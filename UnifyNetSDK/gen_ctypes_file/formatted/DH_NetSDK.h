#ifndef DHNETSDK_H
#define DHNETSDK_H
#if (defined(_MSC_VER))
#include <windows.h>
#ifdef NETSDK_EXPORTS
#if (defined(_WIN64) || defined(WIN64))
#define CLIENT_NET_API
#else
#define CLIENT_NET_API __declspec(dllexport)
#endif
#else
#define CLIENT_NET_API __declspec(dllimport)
#endif
#define CALLBACK __stdcall
#define CALL_METHOD __stdcall 
#define INT64 __int64
#define TP_U64 unsigned __int64
#ifndef LLONG
#ifdef _WIN64
#define LLONG INT64
#else
#define LLONG LONG
#endif
#endif
#ifndef LDWORD
#ifdef _WIN64
#define LDWORD INT64
#else
#define LDWORD DWORD
#endif
#endif
#else 
#define CLIENT_NET_API extern "C"
#define CALL_METHOD
#define CALLBACK
#ifndef INTERNAL_COMPILE
#define RELEASE_HEADER
#endif
#ifdef RELEASE_HEADER
#define WORD unsigned short
#define DWORD unsigned int
#define LONG int
#define LPDWORD DWORD*
#ifdef __OBJC__
#include "objc/objc.h"
#else
#define BOOL int
#endif
#ifndef TRUE
#define TRUE 1
#endif
#ifndef FALSE
#define FALSE 0
#endif
#define BYTE unsigned char
#define UINT unsigned int
#define HDC void*
#define HWND void*
#define LPVOID void*
#ifndef NULL
#define NULL 0
#endif
#define LLONG long
#define INT64 long long
#define TP_U64 unsigned long long
#define LDWORD long
#ifndef MAX_PATH
#define MAX_PATH 260
#endif
#ifndef DEF_RECT
typedef struct tagRECT
{
    LONG left;
    LONG top;
    LONG right;
    LONG bottom;
} RECT;
#define DEF_RECT
#endif
#else 
#include "../../SRC/Platform/osIndependent.h"
#define INT64 int64
#define TP_U64 uint64
#endif 
#endif 
#ifndef LDWORD
#if (defined(WIN32) || defined(_WIN32) || defined(_WIN64))
#ifdef _WIN64
#define LDWORD __int64
#else 
#define LDWORD DWORD
#endif
#else 
#define LDWORD long
#endif
#endif
#ifdef __cplusplus
extern "C" {
#endif
#define DH_SERIALNO_LEN 48        
#define DH_MAX_DISKNUM 256        
#define DH_MAX_SDCARDNUM 32       
#define DH_MAX_BURNING_DEV_NUM 32 
#define DH_BURNING_DEV_NAMELEN 32 
#define DH_MAX_LINK 6
#define DH_MAX_CHANNUM 16         
#define DH_MAX_DECODER_CHANNUM 64 
#define DH_MAX_ALARMIN 128        
#define DH_MAX_ALARMOUT 64        
#define DH_MAX_RIGHT_NUM 100      
#define DH_MAX_GROUP_NUM 20       
#define DH_MAX_USER_NUM 200       
#define DH_RIGHT_NAME_LENGTH 32   
#define DH_USER_NAME_LENGTH 8     
#define DH_USER_PSW_LENGTH 8      
#define DH_CUSTOM_NAME_LENGTH 32  
#define DH_USER_NAME_LEN_EX 32    
#define DH_USER_PSW_LEN_EX 32     
#define DH_MEMO_LENGTH 32         
#define DH_MAX_STRING_LEN 128
#define MAX_STRING_LINE_LEN 6                    
#define MAX_PER_STRING_LEN 20                    
#define DH_MAX_MAIL_NAME_LEN 64                  
#define DH_MAX_MAIL_PSW_LEN 64                   
#define DH_SPEEDLIMIT_TYPE_LEN 32                
#define DH_VEHICLE_TYPE_LEN 32                   
#define DH_VEHICLE_INFO_LEN 32                   
#define DH_VEHICLE_DRIVERNO_LEN 32               
#define DH_MAX_CROSSING_NUM 128                  
#define DH_MAX_CROSSING_ID 32                    
#define DH_MAX_CARD_INFO_LEN 256                 
#define DH_MAX_CHANNUM_EX 32                     
#define DH_MAX_SAERCH_IP_NUM 256                 
#define DH_MAX_HARDDISK_TYPE_LEN 32              
#define DH_MAX_HARDDISK_SERIAL_LEN 32            
#define DH_MAX_SIM_LEN 16                        
#define DH_MAX_SIM_NUM 10                        
#define DH_GATEWAY_MAX_SIM_NUM 8                 
#define DH_MAX_VERSION_LEN 32                    
#define DH_MAX_MDN_LEN 36                        
#define DH_MAX_NETINTERFACE_NUM 64               
#define DH_EVENT_NAME_LEN 128                    
#define DH_STORAGE_NAME_LEN 128                  
#define DH_MAX_CARPORTLIGHT_NUM 4                
#define DH_STATION_NAME_LEN 32                   
#define PTZ_PRESET_NAME_LEN 64                   
#define DH_MAX_GUARD_DETECT_ID_COUNT 64          
#define DH_MAX_VERSION_STR 64                    
#define DH_MAX_AUDIO_MATRIX_OUTPUT 8             
#define DH_MAX_CHANNEL_COUNT 16                  
#define DH_COMMON_STRING_4 4                     
#define DH_COMMON_STRING_8 8                     
#define DH_COMMON_STRING_16 16                   
#define DH_COMMON_STRING_32 32                   
#define DH_COMMON_STRING_36 36                   
#define DH_COMMON_STRING_64 64                   
#define DH_COMMON_STRING_128 128                 
#define DH_COMMON_STRING_256 256                 
#define DH_COMMON_STRING_512 512                 
#define DH_COMMON_STRING_1024 1024               
#define DH_COMMON_STRING_2048 2048               
#define DH_MAX_ACCESS_NAME_LEN 64                
#define DH_MAX_EXALARMCHANNEL_NAME_LEN 128       
#define DH_MAX_ALARM_SUBSYSTEM_NUM 256           
#define DH_MAX_BELL_NUM 4                        
#define DH_MAX_KEYBOARD_NUM 256                  
#define MAX_GOURP_NUM 128                        
#define MAX_PWD_MODIFIEDTIME_LEN 20              
#define MAX_ONVIF_USER_NUM 20                    
#define DH_MAX_POS_EXCHANGE_INFO 64              
#define NET_INTERFACE_DEFAULT_TIMEOUT 3000       
#define DH_MAX_BUSCARD_NUM 64                    
#define DH_MAX_POS_MAC_NUM 8                     
#define DH_MAX_MARK_FILE_NAME_LEN 124            
#define NET_MAX_ATTACHMENT_NUM 8                 
#define NET_MAX_ANNUUALINSPECTION_NUM 8          
#define NET_MAX_EVENT_PIC_NUM 6                  
#define NET_MAX_MONTH_NUM 31                     
#define NET_IPADDRSTR_LEN 46                     
#define NET_MAX_AP_NUM 3                         
#define MAX_WEP_KEY_NUM 4                        
#define MAX_CARNO_LEN 20                         
#define MAX_COACHNO_LEN 12                       
#define MAX_WORKPATTERN_NUM 2                    
#define MAX_NETPORT_NUM 5                        
#define MAX_ANTIFLICKERMODE_COUNT 8              
#define MAX_CATEGORY_LEN 64                      
#define MAX_DANGER_GRADE_NUM 8                   
#define MAX_INSIDE_OBJECT_TYPE_NUM 32            
#define MAX_PATH_LEN 260                         
#define MAX_XRAY_CHANNEL_NUM 10                  
#define MAX_HISTORY_TEMPERATURE_NUM 64           
#define MAX_TEMPERATURE_POINT_NUM 8              
#define MAX_GROUP_LEN 128                        
#define MAX_ILLEGAL_LOGIN_IP_LEN 40              
#define DH_COMMON_STRING_20 20                   
#define MAX_EVENT_ID_LEN 52                      
#define MAX_HUMANTRAIT_EVENT_LEN 36              
#define DH_COMMON_STRING_24 24                   
#define MAX_TEMPERATUREEX_POINT_NUM 12           
#define MAX_PIRPARAM_NUM 10                      
#define MAX_ENCRYPT_SYSTEM_INFO_CONTENT_LEN 8192 
#define MAX_LOCAL_EXT_ALARM_NAME_LEN 64          
#define MAX_TASK_ID_LEN 64                       
#define MAX_FILE_PATH_LEN 256                    
#define MAX_IMAGE_INFO_NUM 8                     
#define MAX_DIAL_RESULT_LEN 2048                 
#define MAX_COUNTRY_CODE_LEN 4                   
#define MAX_PROVINCE_CODE_LEN 64                 
#define MAX_CITY_CODE_LEN 64                     
#define MAX_AREA_CODE_LEN 64                     
#define MAX_REQ_INFO_LEN 1600                    
#define MAX_SIP_SVR_ID_LEN 24                    
#define MAX_SIP_DOMAIN_LEN 128                   
#define MAX_SIP_SVR_IP_LEN 128                   
#define MAX_SIP_SERVER_DEVICE_ID_LEN 24          
#define MAX_REG_PASSWORD_LEN 24                  
#define MAX_CIVIL_CODE_LEN 24                    
#define MAX_INTERVIDEO_ID_LEN 24                 
#define MAX_CHANNEL_ID_LEN 24                    
#define MAX_SIP_SERVER_NUM 5                     
#define MAX_GB28181_PROTOCOL_VERSION 16          
#define DH_MAX_FACEDETECT_FEATURE_NUM 32         
#define MAX_ATTACHMENT_NUM 8                     
#define MAX_ERRORCODE_NUM 512                    
#define MAX_PUSH_STREAM_AUTH_SSID 80             
#define DH_MAX_IPADDRV4_LEN 16                   
#define DH_MAX_IPADDRV6_LEN 64                   
#define DH_MAX_MAIL_ADDR_LEN 128       
#define DH_MAX_MAIL_SUBJECT_LEN 64     
#define DH_MAX_IPADDR_LEN 16           
#define DH_MAX_IPADDR_LEN_EX 40        
#define DH_MACADDR_LEN 40              
#define DH_MAX_URL_LEN 128             
#define DH_MAX_DEV_ID_LEN 48           
#define DH_MAX_HOST_NAMELEN 64         
#define DH_MAX_HOST_PSWLEN 32          
#define DH_MAX_NAME_LEN 16             
#define DH_MAX_ETHERNET_NUM 2          
#define DH_MAX_ETHERNET_NUM_EX 10      
#define DH_DEV_SERIALNO_LEN 48         
#define DH_DEV_CLASS_LEN 16            
#define DH_DEV_TYPE_LEN 32             
#define DH_N_WEEKS 7                   
#define DH_N_TSECT 6                   
#define DH_N_REC_TSECT 6               
#define DH_N_COL_TSECT 2               
#define DH_CHAN_NAME_LEN 32            
#define DH_N_ENCODE_AUX 3              
#define DH_N_TALK 1                    
#define DH_N_COVERS 1                  
#define DH_N_CHANNEL 16                
#define DH_N_ALARM_TSECT 2             
#define DH_MAX_ALARMOUT_NUM 16         
#define DH_MAX_AUDIO_IN_NUM 16         
#define DH_MAX_VIDEO_IN_NUM 16         
#define DH_MAX_ALARM_IN_NUM 16         
#define DH_MAX_DISK_NUM 16             
#define DH_MAX_DECODER_NUM 16          
#define DH_MAX_232FUNCS 10             
#define DH_MAX_232_NUM 2               
#define DH_MAX_232_NUM_EX 16           
#define DH_MAX_DECPRO_LIST_SIZE 100    
#define DH_FTP_MAXDIRLEN 240           
#define DH_MATRIX_MAXOUT 16            
#define DH_TOUR_GROUP_NUM 6            
#define DH_MAX_DDNS_NUM 10             
#define DH_MAX_SERVER_TYPE_LEN 32      
#define DH_MAX_DOMAIN_NAME_LEN 256     
#define DH_MAX_DDNS_ALIAS_LEN 32       
#define DH_MAX_DEFAULT_DOMAIN_LEN 60   
#define DH_MOTION_ROW 32               
#define DH_MOTION_COL 32               
#define DH_STATIC_ROW 32               
#define DH_STATIC_COL 32               
#define DH_FTP_USERNAME_LEN 64         
#define DH_FTP_PASSWORD_LEN 64         
#define DH_TIME_SECTION 2              
#define DH_FTP_MAX_PATH 240            
#define DH_FTP_MAX_SUB_PATH 128        
#define DH_INTERVIDEO_UCOM_CHANID 32   
#define DH_INTERVIDEO_UCOM_DEVID 32    
#define DH_INTERVIDEO_UCOM_REGPSW 16   
#define DH_INTERVIDEO_UCOM_USERNAME 32 
#define DH_INTERVIDEO_UCOM_USERPSW 32  
#define DH_INTERVIDEO_NSS_IP 32        
#define DH_INTERVIDEO_NSS_SERIAL 32    
#define DH_INTERVIDEO_NSS_USER 32      
#define DH_INTERVIDEO_NSS_PWD 50       
#define DH_MAX_VIDEO_COVER_NUM 16      
#define DH_MAX_WATERMAKE_DATA 4096     
#define DH_MAX_WATERMAKE_LETTER 128    
#define DH_MAX_WLANDEVICE_NUM 10       
#define DH_MAX_WLANDEVICE_NUM_EX 32    
#define MAX_WLAN_DEVICE_NUM 128        
#define DH_MAX_ALARM_NAME 64           
#define DH_MAX_REGISTER_SERVER_NUM 10  
#define DH_SNIFFER_FRAMEID_NUM 6       
#define DH_SNIFFER_CONTENT_NUM 4       
#define DH_SNIFFER_CONTENT_NUM_EX 8    
#define DH_SNIFFER_PROTOCOL_SIZE 20    
#define DH_MAX_PROTOCOL_NAME_LENGTH 20
#define DH_SNIFFER_GROUP_NUM 4               
#define MAX_PATH_STOR 240                    
#define DH_ALARM_OCCUR_TIME_LEN 40           
#define DH_VIDEO_OSD_NAME_NUM 64             
#define DH_VIDEO_CUSTOM_OSD_NUM 8            
#define DH_VIDEO_CUSTOM_OSD_NUM_EX 256       
#define DH_CONTROL_AUTO_REGISTER_NUM 100     
#define DH_MMS_RECEIVER_NUM 100              
#define DH_MMS_SMSACTIVATION_NUM 100         
#define DH_MMS_DIALINACTIVATION_NUM 100      
#define DH_MAX_ALARMOUT_NUM_EX 32            
#define DH_MAX_VIDEO_IN_NUM_EX 32            
#define DH_MAX_ALARM_IN_NUM_EX 32            
#define DH_MAX_IPADDR_OR_DOMAIN_LEN 64       
#define DH_MAX_CALLID 32                     
#define DH_MAX_OBJECT_LIST 16                
#define DH_MAX_OBJECT_NUM 32                 
#define DH_MAX_RULE_LIST 16                  
#define DH_MAX_POLYGON_NUM 16                
#define DH_MAX_DETECT_LINE_NUM 20            
#define DH_MAX_DETECT_REGION_NUM 20          
#define MAX_CARGO_CHANNEL_NUM 8              
#define DH_MAX_TRACK_LINE_NUM 20             
#define DH_MAX_CANDIDATE_NUM 50              
#define DH_MAX_PERSON_IMAGE_NUM 48           
#define DH_MAX_FENCE_LINE_NUM 2              
#define MAX_SMART_VALUE_NUM 30               
#define DH_MACHINE_NAME_NUM 64               
#define DH_INTERVIDEO_AMP_DEVICESERIAL 48    
#define DH_INTERVIDEO_AMP_DEVICENAME 16      
#define DH_INTERVIDEO_AMP_USER 32            
#define DH_INTERVIDEO_AMP_PWD 32             
#define MAX_SUBMODULE_NUM 32                 
#define DH_MAX_CARWAY_NUM 8                  
#define DH_MAX_SNAP_SIGNAL_NUM 3             
#define DH_MAX_CARD_NUM 128                  
#define DH_MAX_CARDINFO_LEN 32               
#define MAX_COMPANION_CARD_NUM 6             
#define DH_MAX_CONTROLER_NUM 64              
#define DH_MAX_LIGHT_NUM 32                  
#define DH_MAX_SNMP_COMMON_LEN 64            
#define DH_MAX_DDNS_STATE_LEN 128            
#define DH_MAX_PHONE_NO_LEN 16               
#define DH_MAX_MSGTYPE_LEN 32                
#define DH_MAX_MSG_LEN 256                   
#define DH_MAX_DRIVINGDIRECTION 256          
#define DH_MAX_GRAB_INTERVAL_NUM 4           
#define DH_MAX_FLASH_NUM 5                   
#define DH_MAX_LANE_NUM 8                    
#define DH_MAX_ISCSI_PATH_NUM 64             
#define DH_MAX_WIRELESS_CHN_NUM 256          
#define DH_PROTOCOL3_BASE 100                
#define DH_PROTOCOL3_SUPPORT 11              
#define DH_MAX_CHANMASK 64                   
#define DH_MAX_STAFF_NUM 20                  
#define DH_MAX_CALIBRATEBOX_NUM 10           
#define DH_MAX_EXCLUDEREGION_NUM 10          
#define DH_MAX_POLYLINE_NUM 20               
#define DH_MAX_COLOR_NUM 16                  
#define MAX_OBJFILTER_NUM 16                 
#define DH_MAX_SYNOPSIS_STATE_NAME 64        
#define DH_MAX_SYNOPSIS_QUERY_FILE_COUNT 10  
#define DH_MAX_SSID_LEN 36                   
#define DH_MAX_APPIN_LEN 16                  
#define DH_NETINTERFACE_NAME_LEN 260         
#define DH_NETINTERFACE_TYPE_LEN 260         
#define DH_MAX_CONNECT_STATUS_LEN 260        
#define DH_MAX_MODE_LEN 64                   
#define DH_MAX_MODE_NUM 64                   
#define DH_MAX_COMPRESSION_TYPES_NUM 16      
#define DH_MAX_CAPTURE_SIZE_NUM 64           
#define DH_NODE_NAME_LEN 64                  
#define MAX_CALIBPOINTS_NUM 256              
#define DH_MAX_ATTR_NUM 32                   
#define DH_MAX_CLOUDCONNECT_STATE_LEN 128    
#define DH_MAX_IPADDR_EX_LEN 128             
#define DH_MAX_PLATE_NUMBER_LEN 32           
#define DH_MAX_AUTHORITY_LIST_NUM 16         
#define DH_MAX_CITY_NAME_LEN 64              
#define DH_MAX_PROVINCE_NAME_LEN 64          
#define DH_MAX_PERSON_ID_LEN 32              
#define MAX_FACE_AREA_NUM 8                  
#define MAX_FACE_DB_NUM 8                    
#define MAX_EVENT_NAME 128                   
#define DH_MAX_ETH_NAME 64                   
#define DH_MAX_PERSON_NAME_LEN 64            
#define DH_N_SCHEDULE_TSECT 8                
#define DH_MAX_URL_NUM 8                     
#define DH_MAX_LOWER_MITRIX_NUM 16           
#define DH_MAX_BURN_CHANNEL_NUM 32           
#define DH_MAX_NET_STRORAGE_BLOCK_NUM 64     
#define DH_MAX_CASE_PERSON_NUM 32            
#define DH_MAX_MULTIPLAYBACK_CHANNEL_NUM 64  
#define DH_MAX_MULTIPLAYBACK_SPLIT_NUM 32    
#define DH_MAX_AUDIO_ENCODE_TYPE 64          
#define MAX_LOG_PATH_LEN 260                 
#define MAX_CARD_RECORD_FIELD_NUM 16         
#define DH_BATTERY_NUM_MAX 16                
#define DH_POWER_NUM_MAX 16                  
#define DH_MAX_AUDIO_PATH 260                
#define DH_MAX_DOORNAME_LEN 128              
#define DH_MAX_CARDPWD_LEN 64                
#define NET_MAX_FISHEYE_MOUNTMODE_NUM 4      
#define NET_MAX_FISHEYE_CALIBRATEMODE_NUM 16 
#define NET_MAX_FISHEYE_EPTZCMD_NUM 64       
#define POINT_NUM_IN_PAIR 2                  
#define MAX_POINT_PAIR_NUM 128               
#define CHANNEL_NUM_IN_POINT_GROUP 2         
#define MAX_POINT_GROUP_NUM 32               
#define MAX_LANE_INFO_NUM 32                 
#define MAX_LANE_DIRECTION_NUM 8             
#define DH_MAX_MONITORWALL_NUM 32            
#define DH_MAX_OPTIONAL_URL_NUM 8            
#define DH_MAX_CAMERA_CHANNEL_NUM 1024       
#define MAX_SIMILARITY_COUNT 1024            
#define MAX_FEATURESTATE_NUM 4               
#define MAX_FILE_SUMMARY_NUM 32              
#define MAX_AUDIO_ENCODE_NUM 64              
#define MAX_MONITORWALL_NAME_LEN 64          
#define MAX_FLASH_LIGHT_NUM 8                
#define MAX_STROBOSCOPIC_LIGHT_NUM 8         
#define MAX_MOSAIC_NUM 8                     
#define MAX_MOSAIC_CHANNEL_NUM 256           
#define MAX_FIREWARNING_INFO_NUM 4           
#define MAX_AXLE_NUM 8                       
#define DH_MAX_BULLET_HOLES 10               
#define MAX_PLATE_NUM 64                     
#define MAX_PREVIEW_CHANNEL_NUM 64           
#define MAX_EVENT_RESTORE_UUID 36            
#define MAX_EVENT_RESTORE_CODE_NUM 8         
#define MAX_EVENT_RESOTER_CODE_TYPE 32       
#define MAX_SNAP_TYPE 3                      
#define MAX_MAINFORMAT_NUM 4                 
#define CUSTOM_TITLE_LEN 1024                
#define MAX_CUSTOM_TITLE_NUM 8               
#define FORMAT_TYPE_LEN 16                   
#define MAX_CHANNEL_NAME_LEN 256             
#define MAX_VIRTUALINFO_DOMAIN_LEN 64        
#define MAX_VIRTUALINFO_TITLE_LEN 64         
#define MAX_VIRTUALINFO_USERNAME_LEN 32      
#define MAX_VIRTUALINFO_PASSWORD_LEN 32      
#define MAX_VIRTUALINFO_PHONENUM_LEN 12      
#define MAX_VIRTUALINFO_IMEI_LEN 16          
#define MAX_VIRTUALINFO_IMSI_LEN 16          
#define MAX_VIRTUALINFO_LATITUDE_LEN 16      
#define MAX_VIRTUALINFO_LONGITUDE_LEN 16     
#define MAX_VIRTUALINFO_NUM 1024             
#define MAX_CALL_ID_LEN 64                   
#define MAX_FACE_DATA_LEN 2048               
#define MAX_FACE_DATA_NUM 20                 
#define MAX_PHOTO_COUNT 5                    
#define MAX_FINGERPRINT_NUM 10               
#define MAX_RINGFILE_NUM 64                  
#define MAX_VIDEOIN_CONFLICT_NUM 128         
#define MAX_COURSE_LOGIC_CHANNEL 64          
#define MAX_COMMON_STRING_8 8                
#define MAX_COMMON_STRING_16 16              
#define MAX_COMMON_STRING_32 32              
#define MAX_COMMON_STRING_64 64              
#define MAX_MAN_LIST_COUNT 64                
#define MAX_COMMON_STRING_128 128            
#define MAX_STREAM_NUM 4                     
#define MAX_CELL_PHONE_NUMBER_LEN 32         
#define MAX_MAIL_LEN 64                      
#define MAX_USER_NAME_LEN 128                
#define MAX_PWD_LEN 128                      
#define MAX_SECURITY_CODE_LEN 16             
#define MAX_PWD_SPEC_CHARS_ARRAY_LEN 128     
#define MAX_PWD_BASIC_CHARS_ARRAY_LEN 128    
#define MAX_COMMON_STRING_512 512            
#define MAX_RFIDELETAG_CARDID_LEN 16         
#define MAX_RFIDELETAG_DATE_LEN 16           
#define MAX_LINK_NAME_LEN 16                 
#define MAX_SERVER_ADDRESS_LEN 64            
#define LINK_LAYER_VPN_NUM 64                
#define MAX_SERVER_IP_LEN 32                 
#define MAX_SCENICSPOT_POINTS_NUM 256        
#define MAX_ACCESSSUBCONTROLLER_NUM 64       
#define MAX_ACCESSDOOR_NUM 128               
#define MAX_ACCESS_READER_NUM 32             
#define MAX_ACCESS_POINT_NUM 32              
#define MAX_CONFIG_NAME_LEN 128              
#define MAX_PLATE_NUMBER_LEN 64              
#define MAX_MASTER_OF_CAR_LEN 32             
#define MAX_USER_TYPE_LEN 32                 
#define MAX_SUB_USER_TYPE_LEN 64             
#define MAX_REMARKS_LEN 64                   
#define MAX_PARK_CHARGE_LEN 32               
#define MAX_IN_TIME_LEN 32                   
#define MAX_OUT_TIME_LEN 32                  
#define MAX_CUSTOM_LEN 128                   
#define MAX_DEAL_NUM_LEN 32                  
#define MAX_STORE_NO_LEN 32                  
#define MAX_STORE_NAME_LEN 32                
#define MAX_STORE_EMPLOYEE_ID_LEN 32         
#define MAX_PRODUCT_NO_LEN 32                
#define MAX_PRODUCT_NAME_LEN 32              
#define MAX_PRODUCT_CATEGORY_LEN 32          
#define DH_MAX_FINGER_PRINT 10               
#define MAX_SUBCHANNEL_NUM 16                
#define MAX_NAME_LENGTH 32                   
#define MAX_SNAP_URL_LEN 128                 
#define MAX_CODE_LEN 64                      
#define MAX_PERSON_INFO_NUM 4                
#define MAX_GOOD_INFO_NUM 128                
#define MAX_SUB_TAG_NUM 20                   
#define MAX_MANUFACTURER_LEN 32              
#define MAX_MACHISTORY_SSID_LEN 24           
#define MAX_MACHISTORY_SSID_NUM 5            
#define MAX_ROUTE_NUM 16                     
#define MAX_MCU_NUM 10                       
#define MAX_ALARM_CHANNEL_NAME_LEN 64        
#define MAX_INSIDEOBJECT_NUM 32              
#define DH_PRETASK_CHANNEL 4                 
#define MAX_AGE_NUM 2                        
#define MAX_EMOTION_NUM 8                    
#define MAX_CLASS_NUMBER_LEN 32              
#define MAX_PHONENUMBER_LEN 16               
#define MAX_NASFILE_NUM 8                    
#define MAX_CROWD_DETECTION_NAME_LEN 128     
#define MAX_CROWD_LIST_NUM 5                 
#define MAX_REGION_LIST_NUM 8                
#define MAX_RECORD_ENCRYPT_PASSWD_LEN 128    
#define MAX_EVENT_NAME_LEN 128               
#define MAX_ABSTRACT_INFO_NUM 100            
#define MAX_ACCESS_FLOOR_NUM 64              
#define MAX_TARGET_OBJECT_NUM 100            
#define MAX_MACADDR_NUM 8                    
#define MAX_ADD_DEVICE_NUM 16                
#define MAX_LINK_DEVICE_NUM 1024             
#define MAX_DEVICE_CHANNEL_NUM 1024          
#define MAX_PLATE_TAILNUM 10                 
#define MAX_OBJECT_NUM_EX 100                
#define MAX_LOCAL_IP_LEN 64                  
#define MAX_LV_NAME_NUM 64                   
#define MAX_LV_NAME_LEN 128                  
#define MAX_KEY_LEN 64                       
#define MAX_FILE_FINDER_PATH_NUM 10          
#define MAX_FILE_FINDER_PATH_LEN 256         
#define MAX_FILE_LIST_NUM 16                 
#define MAX_FILE_LIST_LEN 256                
#define MAX_PARKINGLOCK_STATE_NUM 6          
#define MAX_COMMON_STRING_256 256            
#define MAX_COMMON_STRING_2048 2048          
#define MAX_RESOURCE_LEN 64                  
#define MAX_COMPANY_NAME_LEN 200             
#define MAX_CONTACT_LEN 16                   
#define MAX_RADAR_SD_NUM 24                  
#define MAX_FLEXION_INFO_NUM 512             
#define MAX_CALIBRATE_PLOYGON_AREA_NUM 20    
#define MAX_CALIBRATE_RECT_NUM 10            
#define MAX_SCENE_NUM 32                     
#define MAX_SNAP_SHOT_NUM 8                  
#define MAX_AIRPORT_VEHICLE_OBJECT_NUM 16    
#define MAX_UPGRADER_SERIAL_INFO 8           
#define DH_DEVSTATE_COMM_ALARM 0x0001                         
#define DH_DEVSTATE_SHELTER_ALARM 0x0002                      
#define DH_DEVSTATE_RECORDING 0x0003                          
#define DH_DEVSTATE_DISK 0x0004                               
#define DH_DEVSTATE_RESOURCE 0x0005                           
#define DH_DEVSTATE_BITRATE 0x0006                            
#define DH_DEVSTATE_CONN 0x0007                               
#define DH_DEVSTATE_PROTOCAL_VER 0x0008                       
#define DH_DEVSTATE_TALK_ECTYPE 0x0009                        
#define DH_DEVSTATE_SD_CARD 0x000A                            
#define DH_DEVSTATE_BURNING_DEV 0x000B                        
#define DH_DEVSTATE_BURNING_PROGRESS 0x000C                   
#define DH_DEVSTATE_PLATFORM 0x000D                           
#define DH_DEVSTATE_CAMERA 0x000E                             
#define DH_DEVSTATE_SOFTWARE 0x000F                           
#define DH_DEVSTATE_LANGUAGE 0x0010                           
#define DH_DEVSTATE_DSP 0x0011                                
#define DH_DEVSTATE_OEM 0x0012                                
#define DH_DEVSTATE_NET 0x0013                                
#define DH_DEVSTATE_TYPE 0x0014                               
#define DH_DEVSTATE_SNAP 0x0015                               
#define DH_DEVSTATE_RECORD_TIME 0x0016                        
#define DH_DEVSTATE_NET_RSSI 0x0017                           
#define DH_DEVSTATE_BURNING_ATTACH 0x0018                     
#define DH_DEVSTATE_BACKUP_DEV 0x0019                         
#define DH_DEVSTATE_BACKUP_DEV_INFO 0x001a                    
#define DH_DEVSTATE_BACKUP_FEEDBACK 0x001b                    
#define DH_DEVSTATE_ATM_QUERY_TRADE 0x001c                    
#define DH_DEVSTATE_SIP 0x001d                                
#define DH_DEVSTATE_VICHILE_STATE 0x001e                      
#define DH_DEVSTATE_TEST_EMAIL 0x001f                         
#define DH_DEVSTATE_SMART_HARD_DISK 0x0020                    
#define DH_DEVSTATE_TEST_SNAPPICTURE 0x0021                   
#define DH_DEVSTATE_STATIC_ALARM 0x0022                       
#define DH_DEVSTATE_SUBMODULE_INFO 0x0023                     
#define DH_DEVSTATE_DISKDAMAGE 0x0024                         
#define DH_DEVSTATE_IPC 0x0025                                
#define DH_DEVSTATE_ALARM_ARM_DISARM 0x0026                   
#define DH_DEVSTATE_ACC_POWEROFF_ALARM 0x0027                 
#define DH_DEVSTATE_TEST_FTP_SERVER 0x0028                    
#define DH_DEVSTATE_3GFLOW_EXCEED 0x0029                      
#define DH_DEVSTATE_3GFLOW_INFO 0x002a                        
#define DH_DEVSTATE_VIHICLE_INFO_UPLOAD 0x002b                
#define DH_DEVSTATE_SPEED_LIMIT 0x002c                        
#define DH_DEVSTATE_DSP_EX 0x002d                             
#define DH_DEVSTATE_3GMODULE_INFO 0x002e                      
#define DH_DEVSTATE_MULTI_DDNS 0x002f                         
#define DH_DEVSTATE_CONFIG_URL 0x0030                         
#define DH_DEVSTATE_HARDKEY 0x0031                            
#define DH_DEVSTATE_ISCSI_PATH 0x0032                         
#define DH_DEVSTATE_DLPREVIEW_SLIPT_CAP 0x0033                
#define DH_DEVSTATE_WIFI_ROUTE_CAP 0x0034                     
#define DH_DEVSTATE_ONLINE 0x0035                             
#define DH_DEVSTATE_PTZ_LOCATION 0x0036                       
#define DH_DEVSTATE_MONITOR_INFO 0x0037                       
#define DH_DEVSTATE_SUBDEVICE 0x0300                          
#define DH_DEVSTATE_RAID_INFO 0x0038                          
#define DH_DEVSTATE_TEST_DDNSDOMAIN 0x0039                    
#define DH_DEVSTATE_VIRTUALCAMERA 0x003a                      
#define DH_DEVSTATE_TRAFFICWORKSTATE 0x003b                   
#define DH_DEVSTATE_ALARM_CAMERA_MOVE 0x003c                  
#define DH_DEVSTATE_ALARM 0x003e                              
#define DH_DEVSTATE_VIDEOLOST 0x003f                          
#define DH_DEVSTATE_MOTIONDETECT 0x0040                       
#define DH_DEVSTATE_DETAILEDMOTION 0x0041                     
#define DH_DEVSTATE_VEHICLE_INFO 0x0042                       
#define DH_DEVSTATE_VIDEOBLIND 0x0043                         
#define DH_DEVSTATE_3GSTATE_INFO 0x0044                       
#define DH_DEVSTATE_NETINTERFACE 0x0045                       
#define DH_DEVSTATE_PICINPIC_CHN 0x0046                       
#define DH_DEVSTATE_COMPOSITE_CHN 0x0047                      
#define DH_DEVSTATE_WHOLE_RECORDING 0x0048                    
#define DH_DEVSTATE_WHOLE_ENCODING 0x0049                     
#define DH_DEVSTATE_DISK_RECORDE_TIME 0x004a                  
#define DH_DEVSTATE_BURNER_DOOR 0x004b                        
#define DH_DEVSTATE_GET_DATA_CHECK 0x004c                     
#define DH_DEVSTATE_ALARM_IN_CHANNEL 0x004f                   
#define DH_DEVSTATE_ALARM_CHN_COUNT 0x0050                    
#define DH_DEVSTATE_PTZ_VIEW_RANGE 0x0051                     
#define DH_DEVSTATE_DEV_CHN_COUNT 0x0052                      
#define DH_DEVSTATE_RTSP_URL 0x0053                           
#define DH_DEVSTATE_LIMIT_LOGIN_TIME 0x0054                   
#define DH_DEVSTATE_GET_COMM_COUNT 0x0055                     
#define DH_DEVSTATE_RECORDING_DETAIL 0x0056                   
#define DH_DEVSTATE_PTZ_PRESET_LIST 0x0057                    
#define DH_DEVSTATE_EXTERNAL_DEVICE 0x0058                    
#define DH_DEVSTATE_GET_UPGRADE_STATE 0x0059                  
#define DH_DEVSTATE_MULTIPLAYBACK_SPLIT_CAP 0x005a            
#define DH_DEVSTATE_BURN_SESSION_NUM 0x005b                   
#define DH_DEVSTATE_PROTECTIVE_CAPSULE 0x005c                 
#define DH_DEVSTATE_GET_DOORWORK_MODE 0x005d                  
#define DH_DEVSTATE_PTZ_ZOOM_INFO 0x005e                      
#define DH_DEVSTATE_POWER_STATE 0x0152                        
#define DH_DEVSTATE_ALL_ALARM_CHANNELS_STATE 0x153            
#define DH_DEVSTATE_ALARMKEYBOARD_COUNT 0x0154                
#define DH_DEVSTATE_EXALARMCHANNELS 0x0155                    
#define DH_DEVSTATE_GET_BYPASS 0x0156                         
#define DH_DEVSTATE_ACTIVATEDDEFENCEAREA 0x0157               
#define DH_DEVSTATE_DEV_RECORDSET 0x0158                      
#define DH_DEVSTATE_DOOR_STATE 0x0159                         
#define DH_DEVSTATE_ANALOGALARM_CHANNELS 0x1560               
#define DH_DEVSTATE_GET_SENSORLIST 0x1561                     
#define DH_DEVSTATE_ALARM_CHANNELS 0x1562                     
#define DH_DEVSTATE_GET_ALARM_SUBSYSTEM_ACTIVATESTATUS 0x1563 
#define DH_DEVSTATE_AIRCONDITION_STATE 0x1564                 
#define DH_DEVSTATE_ALARMSUBSYSTEM_STATE 0x1565               
#define DH_DEVSTATE_ALARM_FAULT_STATE 0x1566                  
#define DH_DEVSTATE_DEFENCE_STATE 0x1567                      
#define DH_DEVSTATE_CLUSTER_STATE 0x1568                      
#define DH_DEVSTATE_SCADA_POINT_LIST 0x1569                   
#define DH_DEVSTATE_SCADA_INFO 0x156a                         
#define DH_DEVSTATE_SCADA_CAPS 0x156b                         
#define DH_DEVSTATE_GET_CODEID_COUNT 0x156c                   
#define DH_DEVSTATE_GET_CODEID_LIST 0x156d                    
#define DH_DEVSTATE_ANALOGALARM_DATA 0x156e                   
#define DH_DEVSTATE_VTP_CALLSTATE 0x156f                      
#define DH_DEVSTATE_SCADA_INFO_BY_ID 0x1570                   
#define DH_DEVSTATE_SCADA_DEVICE_LIST 0x1571                  
#define DH_DEVSTATE_DEV_RECORDSET_EX 0x1572                   
#define DH_DEVSTATE_ACCESS_LOCK_VER 0x1573                    
#define DH_DEVSTATE_MONITORWALL_TVINFO 0x1574                 
#define DH_DEVSTATE_GET_ALL_POS 0x1575                        
#define DH_DEVSTATE_GET_ROAD_LIST 0x1576                      
#define DH_DEVSTATE_GET_HEAT_MAP 0x1577                       
#define DH_DEVSTATE_GET_WORK_STATE 0x1578                     
#define DH_DEVSTATE_GET_WIRESSLESS_STATE 0x1579               
#define DH_DEVSTATE_GET_REDUNDANCE_POWER_INFO 0x157a          
#define DH_DEVSTATE_GET_ACCESSORY_STATUS 0x157b               
#define DH_DEVSTATE_GET_PTZ_TOURS 0x157c                      
#define DH_DEVSTATE_GET_DEVWIRELESSSIGNAL_LIST 0x157d         
#define DH_DEVSTATE_GET_ACCESSORY_INFO 0x157e                 
#define DH_DEVSTATE_GET_UPNP_STATUS 0x157f                    
#define _setdwSize(stu) ((stu).dwSize = sizeof(stu))
#define POINTERSIZE sizeof(void*)
#define CFG_MAX_ACCESSCONTROL_NUM 8   
#define CFG_MAX_SUMMARY_LEN 1024      
#define CFG_MAX_DBKEY_NUM 64          
#define CFG_MAX_CHANNELNAME_LEN 64    
#define CFG_MAX_VIDEO_CHANNEL_NUM 256 
#define CFG_MAX_CHANNEL_COUNT 16
#define CFG_MAX_PSTN_SERVER_NUM 8 
typedef enum tagNET_THREE_STATUS_BOOL
{
    BOOL_STATUS_FALSE = 0,
    BOOL_STATUS_TRUE,
    BOOL_STATUS_UNKNOWN, 
} NET_THREE_STATUS_BOOL;
typedef enum __EM_AIRCONDITION_MODE
{
    AIRCONDITION_MODE_UNKNOWN = 0,
    AIRCONDITION_MODE_AUTO, 
    AIRCONDITION_MODE_HOT,  
    AIRCONDITION_MODE_COLD, 
    AIRCONDITION_MODE_WET,  
    AIRCONDITION_MODE_WIND, 
} EM_AIRCONDITION_MODE;
typedef enum __EM_AIRCONDITION_WINDMODE
{
    AIRCONDITION_WINDMODE_UNKNOWN = 0,
    AIRCONDITION_WINDMODE_STOP,   
    AIRCONDITION_WINDMODE_AUTO,   
    AIRCONDITION_WINDMODE_HIGH,   
    AIRCONDITION_WINDMODE_MIDDLE, 
    AIRCONDITION_WINDMODE_LOW,    
} EM_AIRCONDITION_WINDMODE;
typedef struct tagNET_AIRCONDITION_STATE_INFO
{
    DWORD dwSize;
    BOOL bIsOnline;                                  
    BOOL bIsON;                                      
    int nTemperature;                                
    EM_AIRCONDITION_MODE emAirconditionMode;         
    EM_AIRCONDITION_WINDMODE emAirconditionWindMode; 
    float fActualTemperature;                        
} NET_AIRCONDITION_STATE_INFO;
typedef struct tagNET_GET_AIRCONDITION_STATE
{
    DWORD dwSize;
    char szDeviceID[DH_MAX_DEV_ID_LEN];               
    NET_AIRCONDITION_STATE_INFO stuAirConditionState; 
} NET_GET_AIRCONDITION_STATE;
typedef struct tagNET_ALARM_CHANNEL_INFO
{
    DWORD dwSize;
    int nSlot;                         
    int nChannel;                      
    char szName[DH_COMMON_STRING_128]; 
} NET_ALARM_CHANNEL_INFO;
typedef struct tagNET_ALARM_CHANNELS
{
    DWORD dwSize;
    int nMaxAlarmChannels;                   
    int nRetAlarmChannels;                   
    NET_ALARM_CHANNEL_INFO* pstuChannelInfo; 
} NET_ALARM_CHANNELS;
typedef enum __EM_ALARM_SUBSYSTEM_STATE_TYPE
{
    ALARM_SUBSYSTEM_STATE_UNKNOWN = 0,
    ALARM_SUBSYSTEM_STATE_ACTIVE,        
    ALARM_SUBSYSTEM_STATE_INACTIVE,      
    ALARM_SUBSYSTEM_STATE_UNDISTRIBUTED, 
} EM_ALARM_SUBSYSTEM_STATE_TYPE;
typedef struct tagNET_ALARM_SUBSYSTEM_STATE
{
    DWORD dwSize;
    int nMaxAlarmSubSystem;                                            
    EM_ALARM_SUBSYSTEM_STATE_TYPE emState[DH_MAX_ALARM_SUBSYSTEM_NUM]; 
} NET_ALARM_SUBSYSTEM_STATE;
typedef enum __EM_ALARM_FAULT_STATE_TYPE
{
    EM_ALARM_FAULT_STATE_ALL = 0,        
    EM_ALARM_FAULT_STATE_CONNECTFAULT,   
    EM_ALARM_FAULT_STATE_BELLFAULT,      
    EM_ALARM_FAULT_STATE_KBFAULT,        
    EM_ALARM_FAULT_STATE_KBTAMPER,       
    EM_ALARM_FAULT_STATE_SENSORSHORTOUT, 
    EM_ALARM_FAULT_STATE_SENSORTAMPER,   
} EM_ALARM_FAULT_STATE_TYPE;
typedef struct tagNET_IN_ALARM_FAULT_STATE
{
    DWORD dwSize;
    EM_ALARM_FAULT_STATE_TYPE emType; 
} NET_IN_ALARM_FAULT_STATE;
typedef struct tagNET_OUT_ALARM_FAULT_STATE
{
    DWORD dwSize;
    int nConnectFaultState;                    
    int nBell;                                 
    int anBellState[DH_MAX_BELL_NUM];          
    int nFaultKeyboard;                        
    int anFaultKeyboard[DH_MAX_KEYBOARD_NUM];  
    int nTamperKeyboard;                       
    int anTamperKeyboard[DH_MAX_KEYBOARD_NUM]; 
    int nShortOutSensor;                       
    int anShortOutSensor[DH_MAX_ALARMIN];      
    int nTamperSensor;                         
    int anTamperSensor[DH_MAX_ALARMIN];        
} NET_OUT_ALARM_FAULT_STATE;
typedef struct tagNET_ALARM_FAULT_STATE_INFO
{
    DWORD dwSize;
    NET_IN_ALARM_FAULT_STATE stuIn;   
    NET_OUT_ALARM_FAULT_STATE stuOut; 
} NET_ALARM_FAULT_STATE_INFO;
typedef enum __EM_DEFENCE_STATE_TYPE
{
    EM_DEFENCE_STATE_UNKNOWN = 0,
    EM_DEFENCE_STATE_BYPASS,   
    EM_DEFENCE_STATE_OPEN,     
    EM_DEFENCE_STATE_CLOSE,    
    EM_DEFENCE_STATE_ALARMING, 
    EM_DEFENCE_STATE_ISOLATED, 
    EM_DEFENCE_STATE_SHORT,    
    EM_DEFENCE_STATE_BREAK,    
    EM_DEFENCE_STATE_INTRUDED, 
} EM_DEFENCE_STATE_TYPE;
typedef struct tagNET_IN_DEFENCE_STATE_INFO
{
    DWORD dwSize;
    int nDefenceNum;               
    int anDefence[DH_MAX_ALARMIN]; 
} NET_IN_DEFENCE_STATE_INFO;
typedef struct tagNET_OUT_DEFENCE_STATE_INFO
{
    DWORD dwSize;
    int nDefenceNum;                                      
    EM_DEFENCE_STATE_TYPE anDefenceState[DH_MAX_ALARMIN]; 
} NET_OUT_DEFENCE_STATE_INFO;
typedef struct tagNET_IN_GET_DEFENCE_STATE_INFO
{
    int nDefenceNum;      
    int anDefence[512];   
    BYTE byReserved[512]; 
} NET_IN_GET_DEFENCE_STATE_INFO;
typedef struct tagNET_OUT_GET_DEFENCE_STATE_INFO
{
    int nDefenceNum;                           
    EM_DEFENCE_STATE_TYPE anDefenceState[512]; 
    BYTE byReserved[512];                      
} NET_OUT_GET_DEFENCE_STATE_INFO;
typedef struct tagNET_DEFENCE_STATE_INFO
{
    DWORD dwSize;                      
    NET_IN_DEFENCE_STATE_INFO stuIn;   
    NET_OUT_DEFENCE_STATE_INFO stuOut; 
} NET_DEFENCE_STATE_INFO;
typedef struct tagNET_GET_DEFENCE_STATE_INFO
{
    DWORD dwSize;
    NET_IN_GET_DEFENCE_STATE_INFO stuIn;   
    NET_OUT_GET_DEFENCE_STATE_INFO stuOut; 
} NET_GET_DEFENCE_STATE_INFO;
typedef enum tagEM_NET_VTP_CALL_TYPE
{
    EM_NET_VTP_CALL_TYPE_SIP = 0, 
    EM_NET_VTP_CALL_TYPE_GSM,     
    EM_NET_VTP_CALL_TYPE_PRIVATE, 
} EM_NET_VTP_CALL_TYPE;
typedef enum tagEM_NET_VTP_CALL_STATE_TYPE
{
    EM_NET_VTP_CALL_STATE_UNKNOWN = 0,
    EM_NET_VTP_CALL_STATE_IDLE,        
    EM_NET_VTP_CALL_STATE_CALLING,     
    EM_NET_VTP_CALL_STATE_CALLED,      
    EM_NET_VTP_CALL_STATE_RINGING,     
    EM_NET_VTP_CALL_STATE_CONNECTING,  
    EM_NET_VTP_CALL_STATE_CONNECTING2, 
    EM_NET_VTP_CALL_STATE_DISCONNECT,  
} EM_NET_VTP_CALL_STATE_TYPE;
typedef struct tagNET_GET_VTP_CALLSTATE
{
    DWORD dwSize;
    EM_NET_VTP_CALL_TYPE emCallType;        
    char szCallID[DH_COMMON_STRING_128];    
    const char* szTargetID;                 
    EM_NET_VTP_CALL_STATE_TYPE emCallState; 
} NET_GET_VTP_CALLSTATE;
#define DH_DEVSTATE_ALARM_REMOTE 0x1000          
#define DH_DEVSTATE_ALARM_FRONTDISCONNECT 0x1001 
#define DH_DEVSTATE_GET_TRACKMOVESTATUS 0x1002   
#define DH_DEV_DEVICECFG 0x0001               
#define DH_DEV_NETCFG 0x0002                  
#define DH_DEV_CHANNELCFG 0x0003              
#define DH_DEV_PREVIEWCFG 0x0004              
#define DH_DEV_RECORDCFG 0x0005               
#define DH_DEV_COMMCFG 0x0006                 
#define DH_DEV_ALARMCFG 0x0007                
#define DH_DEV_TIMECFG 0x0008                 
#define DH_DEV_TALKCFG 0x0009                 
#define DH_DEV_AUTOMTCFG 0x000A               
#define DH_DEV_VEDIO_MARTIX 0x000B            
#define DH_DEV_MULTI_DDNS 0x000C              
#define DH_DEV_SNAP_CFG 0x000D                
#define DH_DEV_WEB_URL_CFG 0x000E             
#define DH_DEV_FTP_PROTO_CFG 0x000F           
#define DH_DEV_INTERVIDEO_CFG 0x0010          
#define DH_DEV_VIDEO_COVER 0x0011             
#define DH_DEV_TRANS_STRATEGY 0x0012          
#define DH_DEV_DOWNLOAD_STRATEGY 0x0013       
#define DH_DEV_WATERMAKE_CFG 0x0014           
#define DH_DEV_WLAN_CFG 0x0015                
#define DH_DEV_WLAN_DEVICE_CFG 0x0016         
#define DH_DEV_REGISTER_CFG 0x0017            
#define DH_DEV_CAMERA_CFG 0x0018              
#define DH_DEV_INFRARED_CFG 0x0019            
#define DH_DEV_SNIFFER_CFG 0x001A             
#define DH_DEV_MAIL_CFG 0x001B                
#define DH_DEV_DNS_CFG 0x001C                 
#define DH_DEV_NTP_CFG 0x001D                 
#define DH_DEV_AUDIO_DETECT_CFG 0x001E        
#define DH_DEV_STORAGE_STATION_CFG 0x001F     
#define DH_DEV_PTZ_OPT_CFG 0x0020             
#define DH_DEV_DST_CFG 0x0021                 
#define DH_DEV_ALARM_CENTER_CFG 0x0022        
#define DH_DEV_VIDEO_OSD_CFG 0x0023           
#define DH_DEV_CDMAGPRS_CFG 0x0024            
#define DH_DEV_IPFILTER_CFG 0x0025            
#define DH_DEV_TALK_ENCODE_CFG 0x0026         
#define DH_DEV_RECORD_PACKET_CFG 0x0027       
#define DH_DEV_MMS_CFG 0x0028                 
#define DH_DEV_SMSACTIVATION_CFG 0x0029       
#define DH_DEV_DIALINACTIVATION_CFG 0x002A    
#define DH_DEV_SNIFFER_CFG_EX 0x0030          
#define DH_DEV_DOWNLOAD_RATE_CFG 0x0031       
#define DH_DEV_PANORAMA_SWITCH_CFG 0x0032     
#define DH_DEV_LOST_FOCUS_CFG 0x0033          
#define DH_DEV_ALARM_DECODE_CFG 0x0034        
#define DH_DEV_VIDEOOUT_CFG 0x0035            
#define DH_DEV_POINT_CFG 0x0036               
#define DH_DEV_IP_COLLISION_CFG 0x0037        
#define DH_DEV_OSD_ENABLE_CFG 0x0038          
#define DH_DEV_LOCALALARM_CFG 0x0039          
#define DH_DEV_NETALARM_CFG 0x003A            
#define DH_DEV_MOTIONALARM_CFG 0x003B         
#define DH_DEV_VIDEOLOSTALARM_CFG 0x003C      
#define DH_DEV_BLINDALARM_CFG 0x003D          
#define DH_DEV_DISKALARM_CFG 0x003E           
#define DH_DEV_NETBROKENALARM_CFG 0x003F      
#define DH_DEV_ENCODER_CFG 0x0040             
#define DH_DEV_TV_ADJUST_CFG 0x0041           
#define DH_DEV_ABOUT_VEHICLE_CFG 0x0042       
#define DH_DEV_ATM_OVERLAY_ABILITY 0x0043     
#define DH_DEV_ATM_OVERLAY_CFG 0x0044         
#define DH_DEV_DECODER_TOUR_CFG 0x0045        
#define DH_DEV_SIP_CFG 0x0046                 
#define DH_DEV_VICHILE_WIFI_AP_CFG 0x0047     
#define DH_DEV_STATICALARM_CFG 0x0048         
#define DH_DEV_DECODE_POLICY_CFG 0x0049       
#define DH_DEV_MACHINE_CFG 0x004A             
#define DH_DEV_MAC_COLLISION_CFG 0x004B       
#define DH_DEV_RTSP_CFG 0x004C                
#define DH_DEV_232_COM_CARD_CFG 0x004E        
#define DH_DEV_485_COM_CARD_CFG 0x004F        
#define DH_DEV_FTP_PROTO_CFG_EX 0x0050        
#define DH_DEV_SYSLOG_REMOTE_SERVER 0x0051    
#define DH_DEV_COMMCFG_EX 0x0052              
#define DH_DEV_NETCARD_CFG 0x0053             
#define DH_DEV_BACKUP_VIDEO_FORMAT 0x0054     
#define DH_DEV_STREAM_ENCRYPT_CFG 0x0055      
#define DH_DEV_IPFILTER_CFG_EX 0x0056         
#define DH_DEV_CUSTOM_CFG 0x0057              
#define DH_DEV_WLAN_DEVICE_CFG_EX 0x0058      
#define DH_DEV_ACC_POWEROFF_CFG 0x0059        
#define DH_DEV_EXPLOSION_PROOF_CFG 0x005a     
#define DH_DEV_NETCFG_EX 0x005b               
#define DH_DEV_LIGHTCONTROL_CFG 0x005c        
#define DH_DEV_3GFLOW_CFG 0x005d              
#define DH_DEV_IPV6_CFG 0x005e                
#define DH_DEV_SNMP_CFG 0x005f                
#define DH_DEV_SNAP_CONTROL_CFG 0x0060        
#define DH_DEV_GPS_MODE_CFG 0x0061            
#define DH_DEV_SNAP_UPLOAD_CFG 0x0062         
#define DH_DEV_SPEED_LIMIT_CFG 0x0063         
#define DH_DEV_ISCSI_CFG 0x0064               
#define DH_DEV_WIRELESS_ROUTING_CFG 0x0065    
#define DH_DEV_ENCLOSURE_CFG 0x0066           
#define DH_DEV_ENCLOSURE_VERSION_CFG 0x0067   
#define DH_DEV_RIAD_EVENT_CFG 0x0068          
#define DH_DEV_FIRE_ALARM_CFG 0x0069          
#define DH_DEV_LOCALALARM_NAME_CFG 0x006a     
#define DH_DEV_URGENCY_RECORD_CFG 0x0070      
#define DH_DEV_ELEVATOR_ATTRI_CFG 0x0071      
#define DH_DEV_ATM_OVERLAY_CFG_EX 0x0072      
#define DH_DEV_MACFILTER_CFG 0x0073           
#define DH_DEV_MACIPFILTER_CFG 0x0074         
#define DH_DEV_STREAM_ENCRYPT_TIME_CFG 0x0075 
#define DH_DEV_LIMIT_BIT_RATE_CFG 0x0076      
#define DH_DEV_SNAP_CFG_EX 0x0077             
#define DH_DEV_DECODER_URL_CFG 0x0078         
#define DH_DEV_TOUR_ENABLE_CFG 0x0079         
#define DH_DEV_VICHILE_WIFI_AP_CFG_EX 0x007a  
#define DH_DEV_ENCODER_CFG_EX 0x007b          
#define DH_DEV_ITC_HWS000_RA_CFG 0x007c          
#define DH_DEV_ITC_HWS000_HS_CFG 0x007d          
#define DH_DEV_ITC_HWS000_LS_CFG 0x007e          
#define DH_DEV_ITC_HWS000_FL_CFG 0x007f          
#define DH_DEV_ITC_HWS000_OC_CFG 0x0080          
#define DH_DEV_ITC_HWS000_LC_CFG 0x0081          
#define DH_DEV_ITC_HWS000_AC_CFG 0x0082          
#define DH_DEV_ITC_HWS000_FC_CFG 0x0083          
#define DH_DEV_ITC_HWS000_ALL_CFG 0x0084         
#define DH_DEV_ITC_HWS000_CLEAR_COUNT_CFG 0x0085 
#define DH_DEV_IPV4_CFG 0x0086            
#define DH_DEV_ENCODER_CFG_EX2 0x0087     
#define DH_DEV_WLAN_DEVICE_CFG_EX2 0x0088 
#define DH_DEV_USER_END_CFG 1000
#define DH_DEV_ITC_HWS000_CFG_ITEM_NUM 8 
typedef struct tagDEV_ITC_HWS000_ALL_CFG
{
    DWORD dwSize;
    int nValue[DH_DEV_ITC_HWS000_CFG_ITEM_NUM]; 
} DEV_ITC_HWS000_ALL_CFG;
#define DH_COMM_ALARM 0x1100          
#define DH_SHELTER_ALARM 0x1101       
#define DH_DISK_FULL_ALARM 0x1102     
#define DH_DISK_ERROR_ALARM 0x1103    
#define DH_SOUND_DETECT_ALARM 0x1104  
#define DH_ALARM_DECODER_ALARM 0x1105 
#define DH_ALARM_ALARM_EX 0x2101                     
#define DH_MOTION_ALARM_EX 0x2102                    
#define DH_VIDEOLOST_ALARM_EX 0x2103                 
#define DH_SHELTER_ALARM_EX 0x2104                   
#define DH_SOUND_DETECT_ALARM_EX 0x2105              
#define DH_DISKFULL_ALARM_EX 0x2106                  
#define DH_DISKERROR_ALARM_EX 0x2107                 
#define DH_ENCODER_ALARM_EX 0x210A                   
#define DH_URGENCY_ALARM_EX 0x210B                   
#define DH_WIRELESS_ALARM_EX 0x210C                  
#define DH_NEW_SOUND_DETECT_ALARM_EX 0x210D          
#define DH_ALARM_DECODER_ALARM_EX 0x210E             
#define DH_DECODER_DECODE_ABILITY 0x210F             
#define DH_FDDI_DECODER_ABILITY 0x2110               
#define DH_PANORAMA_SWITCH_ALARM_EX 0x2111           
#define DH_LOSTFOCUS_ALARM_EX 0x2112                 
#define DH_OEMSTATE_EX 0x2113                        
#define DH_DSP_ALARM_EX 0x2114                       
#define DH_ATMPOS_BROKEN_EX 0x2115                   
#define DH_RECORD_CHANGED_EX 0x2116                  
#define DH_CONFIG_CHANGED_EX 0x2117                  
#define DH_DEVICE_REBOOT_EX 0x2118                   
#define DH_WINGDING_ALARM_EX 0x2119                  
#define DH_TRAF_CONGESTION_ALARM_EX 0x211A           
#define DH_TRAF_EXCEPTION_ALARM_EX 0x211B            
#define DH_EQUIPMENT_FILL_ALARM_EX 0x211C            
#define DH_ALARM_ARM_DISARM_STATE 0x211D             
#define DH_ALARM_ACC_POWEROFF 0x211E                 
#define DH_ALARM_3GFLOW_EXCEED 0x211F                
#define DH_ALARM_SPEED_LIMIT 0x2120                  
#define DH_ALARM_VEHICLE_INFO_UPLOAD 0x2121          
#define DH_STATIC_ALARM_EX 0x2122                    
#define DH_PTZ_LOCATION_EX 0x2123                    
#define DH_ALARM_CARD_RECORD_UPLOAD 0x2124           
#define DH_ALARM_ATM_INFO_UPLOAD 0x2125              
#define DH_ALARM_ENCLOSURE 0x2126                    
#define DH_ALARM_SIP_STATE 0x2127                    
#define DH_ALARM_RAID_STATE 0x2128                   
#define DH_ALARM_CROSSING_SPEED_LIMIT 0x2129         
#define DH_ALARM_OVER_LOADING 0x212A                 
#define DH_ALARM_HARD_BRAKING 0x212B                 
#define DH_ALARM_SMOKE_SENSOR 0x212C                 
#define DH_ALARM_TRAFFIC_LIGHT_FAULT 0x212D          
#define DH_ALARM_TRAFFIC_FLUX_STAT 0x212E            
#define DH_ALARM_CAMERA_MOVE 0x212F                  
#define DH_ALARM_DETAILEDMOTION 0x2130               
#define DH_ALARM_STORAGE_FAILURE 0x2131              
#define DH_ALARM_FRONTDISCONNECT 0x2132              
#define DH_ALARM_ALARM_EX_REMOTE 0x2133              
#define DH_ALARM_BATTERYLOWPOWER 0x2134              
#define DH_ALARM_TEMPERATURE 0x2135                  
#define DH_ALARM_TIREDDRIVE 0x2136                   
#define DH_ALARM_LOST_RECORD 0x2137                  
#define DH_ALARM_HIGH_CPU 0x2138                     
#define DH_ALARM_LOST_NETPACKET 0x2139               
#define DH_ALARM_HIGH_MEMORY 0x213A                  
#define DH_LONG_TIME_NO_OPERATION 0x213B             
#define DH_BLACKLIST_SNAP 0x213C                     
#define DH_ALARM_DISK 0x213E                         
#define DH_ALARM_FILE_SYSTEM 0x213F                  
#define DH_ALARM_IVS 0x2140                          
#define DH_ALARM_GOODS_WEIGHT_UPLOAD 0x2141          
#define DH_ALARM_GOODS_WEIGHT 0x2142                 
#define DH_GPS_STATUS 0x2143                         
#define DH_ALARM_DISKBURNED_FULL 0x2144              
#define DH_ALARM_STORAGE_LOW_SPACE 0x2145            
#define DH_ALARM_DISK_FLUX 0x2160                    
#define DH_ALARM_NET_FLUX 0x2161                     
#define DH_ALARM_FAN_SPEED 0x2162                    
#define DH_ALARM_STORAGE_FAILURE_EX 0x2163           
#define DH_ALARM_RECORD_FAILED 0x2164                
#define DH_ALARM_STORAGE_BREAK_DOWN 0x2165           
#define DH_ALARM_VIDEO_ININVALID 0x2166              
#define DH_ALARM_VEHICLE_TURNOVER 0x2167             
#define DH_ALARM_VEHICLE_COLLISION 0x2168            
#define DH_ALARM_VEHICLE_CONFIRM 0x2169              
#define DH_ALARM_VEHICLE_LARGE_ANGLE 0x2170          
#define DH_ALARM_TALKING_INVITE 0x2171               
#define DH_ALARM_ALARM_EX2 0x2175                    
#define DH_ALARM_VIDEO_TIMING 0x2176                 
#define DH_ALARM_COMM_PORT 0x2177                    
#define DH_ALARM_AUDIO_ANOMALY 0x2178                
#define DH_ALARM_AUDIO_MUTATION 0x2179               
#define DH_EVENT_TYREINFO 0x2180                     
#define DH_ALARM_POWER_ABNORMAL 0x2181               
#define DH_EVENT_REGISTER_OFF 0x2182                 
#define DH_ALARM_NO_DISK 0x2183                      
#define DH_ALARM_FALLING 0x2184                      
#define DH_ALARM_PROTECTIVE_CAPSULE 0x2185           
#define DH_ALARM_NO_RESPONSE 0x2186                  
#define DH_ALARM_CONFIG_ENABLE_CHANGE 0x2187         
#define DH_EVENT_CROSSLINE_DETECTION 0x2188          
#define DH_EVENT_CROSSREGION_DETECTION 0x2189        
#define DH_EVENT_LEFT_DETECTION 0x218a               
#define DH_EVENT_FACE_DETECTION 0x218b               
#define DH_ALARM_IPC 0x218c                          
#define DH_EVENT_TAKENAWAYDETECTION 0x218d           
#define DH_EVENT_VIDEOABNORMALDETECTION 0x218e       
#define DH_EVENT_MOTIONDETECT 0x218f                 
#define DH_ALARM_PIR 0x2190                          
#define DH_ALARM_STORAGE_HOT_PLUG 0x2191             
#define DH_ALARM_FLOW_RATE 0x2192                    
#define DH_ALARM_MOVEDETECTION 0x2193                
#define DH_ALARM_WANDERDETECTION 0x2194              
#define DH_ALARM_CROSSFENCEDETECTION 0x2195          
#define DH_ALARM_PARKINGDETECTION 0x2196             
#define DH_ALARM_RIOTERDETECTION 0x2197              
#define DH_ALARM_FRONTDISCONNECT_V3 0x2198           
#define DH_ALARM_KEYPAD_TAMPER 0x2199                
#define DH_ALARM_KEYPAD_FAILURE 0x219A               
#define DH_ALARM_NOT_CLEAR_CAR 0x219B                
#define DH_ALARM_WIRELESS_DEVBATTERY_LOSS 0x219C     
#define DH_ALARM_SIREN_TAMPER 0x219D                 
#define DH_ALARM_KEYPAD_LOCK 0x219E                  
#define DH_ALARM_ALARMNET 0x219F                     
#define DH_ALARM_PIC_UPLOAD_ALARM 0x21A0             
#define DH_ALARM_CHANG_BAI_VEHICLE_PROHIBITED 0x21A1 
#define DH_ALARM_USER_PASS_CONFIRM 0x21A2            
#define DH_ALARM_INSUFFICIENT_QUOTA_SPACE 0x21A4     
#define DH_ALARM_REID_CLUSTER_STATE 0x21A5           
#define DH_ALARM_SAMPO_USER_INFORMATION 0x21A6       
#define DH_ALARM_SAMPO_SERVICE_ALARM 0x21A7          
#define DH_ALARM_SIA_EVENT 0x21A8                    
#define DH_ALARM_AP_CONNECT 0x21A9                   
#define DH_ALARM_DGS_ERROR_REPORT 0x21AA             
#define DH_ALARM_RESIDENT_ALARM 0x21AB               
#define DH_CONFIG_RESULT_EVENT_EX 0x3000    
#define DH_REBOOT_EVENT_EX 0x3001           
#define DH_AUTO_TALK_START_EX 0x3002        
#define DH_AUTO_TALK_STOP_EX 0x3003         
#define DH_CONFIG_CHANGE_EX 0x3004          
#define DH_IPSEARCH_EVENT_EX 0x3005         
#define DH_AUTO_RECONNECT_FAILD 0x3006      
#define DH_REALPLAY_FAILD_EVENT 0x3007      
#define DH_PLAYBACK_FAILD_EVENT 0x3008      
#define DH_IVS_TRAFFIC_REALFLOWINFO 0x3009  
#define DH_DEVICE_ABORT_EVENT 0x300a        
#define DH_TALK_FAILD_EVENT 0x300b          
#define DH_START_LISTEN_FINISH_EVENT 0x300c 
#define DH_YUEQINGLIGHTING_STATE_EVENT 0x300d    
#define DH_ALARM_VIOLATE_NO_FLY_TIME 0x300e      
#define DH_ALARM_BOX_ALARM 0x300f                
#define DH_ALARM_SOSALERT 0x3010                 
#define DH_ALARM_GYROABNORMALATTITUDE 0x3011     
#define DH_ALARM_ALARMOUTPUT 0x3012              
#define DH_ALARM_PSTNREPORTFAILURE 0x3013        
#define DH_ALARM_NOGSMFIELD 0x3014               
#define DH_ALARM_SMARTMOTION_HUMAN 0x3015        
#define DH_ALARM_SMARTMOTION_VEHICLE 0x3016      
#define DH_ALARM_MOTION_RECORD_ALARM 0x3017      
#define DH_ALARM_SMARTHOME_GET_AUTHORIZED 0x3018 
#define DH_ALARM_SMARTHOME_UPDATE_SCENE 0x3019   
#define DH_ALARM_ASG 0x3020                      
#define DH_ALARM_ASGSTAY 0x3021                  
#define DH_ALARM_ASGFOLLOWING 0x3022             
#define DH_ALARM_ASGCLIMBOVER 0x3023             
#define DH_ALARM_ASGBREAKDOWN 0x3024             
#define DH_ALARM_LIFTCONTROL_REQUEST 0x3025      
#define DH_ALARM_REMOTE_DEVICE_GPS 0x3026        
#define DH_ALARM_ENTRANCE_CAR_STAT_INFO 0x3027   
#define DH_ALARM_ASG_INTRUDED 0x3028             
#define DH_ALARM_IDCARDINFO_CHECK 0x3029         
#define DH_ALARM_REQUEST_APPOINTMENT_INFO 0x302a 
#define DH_ALARM_COURSE_RECORD_UPLOAD 0x302b     
#define DH_ALARM_REQUEST_RECORD 0x302c           
#define DH_ALARM_REQUEST_SNAP 0x302d             
#define DH_ALARM_PARKING_OVERLOAD 0x302e         
#define DH_ALARM_VTS_CALLING_STATE 0x302f        
#define DH_ALARM_DRUG_EXPLOSIVE_DETECTION 0x3030 
#define DH_ALARM_LIQUID_DETECTION 0x3031         
#define DH_ALARM_ASG_ANTIPINCH 0x3032            
#define DH_ALARM_STORAGE_NOT_EXIST 0x3167                         
#define DH_ALARM_NET_ABORT 0x3169                                 
#define DH_ALARM_IP_CONFLICT 0x3170                               
#define DH_ALARM_MAC_CONFLICT 0x3171                              
#define DH_ALARM_POWERFAULT 0x3172                                
#define DH_ALARM_CHASSISINTRUDED 0x3173                           
#define DH_ALARM_ALARMEXTENDED 0x3174                             
#define DH_ALARM_ARMMODE_CHANGE_EVENT 0x3175                      
#define DH_ALARM_BYPASSMODE_CHANGE_EVENT 0x3176                   
#define DH_ALARM_ACCESS_CTL_NOT_CLOSE 0x3177                      
#define DH_ALARM_ACCESS_CTL_BREAK_IN 0x3178                       
#define DH_ALARM_ACCESS_CTL_REPEAT_ENTER 0x3179                   
#define DH_ALARM_ACCESS_CTL_DURESS 0x3180                         
#define DH_ALARM_ACCESS_CTL_EVENT 0x3181                          
#define DH_URGENCY_ALARM_EX2 0x3182                               
#define DH_ALARM_INPUT_SOURCE_SIGNAL 0x3183                       
#define DH_ALARM_ANALOGALARM_EVENT 0x3184                         
#define DH_ALARM_ACCESS_CTL_STATUS 0x3185                         
#define DH_ALARM_ACCESS_SNAP 0x3186                               
#define DH_ALARM_ALARMCLEAR 0x3187                                
#define DH_ALARM_CIDEVENT 0x3188                                  
#define DH_ALARM_TALKING_HANGUP 0x3189                            
#define DH_ALARM_BANKCARDINSERT 0x318a                            
#define DH_ALARM_RCEMERGENCY_CALL 0x318b                          
#define DH_ALARM_OPENDOORGROUP 0x318c                             
#define DH_ALARM_FINGER_PRINT 0x318d                              
#define DH_ALARM_CARD_RECORD 0x318e                               
#define DH_ALARM_SUBSYSTEM_STATE_CHANGE 0x318f                    
#define DH_ALARM_BATTERYPOWER_EVENT 0x3190                        
#define DH_ALARM_BELLSTATUS_EVENT 0x3191                          
#define DH_ALARM_DEFENCE_STATE_CHANGE_EVENT 0x3192                
#define DH_ALARM_TICKET_STATISTIC 0x3193                          
#define DH_ALARM_LOGIN_FAILIUR 0x3194                             
#define DH_ALARM_MODULE_LOST 0x3195                               
#define DH_ALARM_PSTN_BREAK_LINE 0x3196                           
#define DH_ALARM_ANALOG_PULSE 0x3197                              
#define DH_ALARM_MISSION_CONFIRM 0x3198                           
#define DH_ALARM_DEVICE_MSG_NOTIFY 0x3199                         
#define DH_ALARM_VEHICLE_STANDING_OVER_TIME 0x319A                
#define DH_ALARM_ENCLOSURE_ALARM 0x319B                           
#define DH_ALARM_GUARD_DETECT 0x319C                              
#define DH_ALARM_GUARD_INFO_UPDATE 0x319D                         
#define DH_ALARM_NODE_ACTIVE 0x319E                               
#define DH_ALARM_VIDEO_STATIC 0x319F                              
#define DH_ALARM_REGISTER_REONLINE 0x31a0                         
#define DH_ALARM_ISCSI_STATUS 0x31a1                              
#define DH_ALARM_SCADA_DEV_ALARM 0x31a2                           
#define DH_ALARM_AUXILIARY_DEV_STATE 0x31a3                       
#define DH_ALARM_PARKING_CARD 0x31a4                              
#define DH_ALARM_PROFILE_ALARM_TRANSMIT 0x31a5                    
#define DH_ALARM_VEHICLE_ACC 0x31a6                               
#define DH_ALARM_TRAFFIC_SUSPICIOUSCAR 0x31a7                     
#define DH_ALARM_ACCESS_LOCK_STATUS 0x31a8                        
#define DH_ALARM_FINACE_SCHEME 0x31a9                             
#define DH_ALARM_HEATIMG_TEMPER 0x31aa                            
#define DH_ALARM_TALKING_IGNORE_INVITE 0x31ab                     
#define DH_ALARM_BUS_SHARP_TURN 0x31ac                            
#define DH_ALARM_BUS_SCRAM 0x31ad                                 
#define DH_ALARM_BUS_SHARP_ACCELERATE 0x31ae                      
#define DH_ALARM_BUS_SHARP_DECELERATE 0x31af                      
#define DH_ALARM_ACCESS_CARD_OPERATE 0x31b0                       
#define DH_ALARM_POLICE_CHECK 0x31b1                              
#define DH_ALARM_NET 0x31b2                                       
#define DH_ALARM_NEW_FILE 0x31b3                                  
#define DH_ALARM_FIREWARNING 0x31b5                               
#define DH_ALARM_RECORD_LOSS 0x31b6                               
#define DH_ALARM_VIDEO_FRAME_LOSS 0x31b7                          
#define DH_ALARM_RECORD_VOLUME_FAILURE 0x31b8                     
#define DH_EVENT_SNAP_UPLOAD 0x31b9                               
#define DH_ALARM_AUDIO_DETECT 0x31ba                              
#define DH_ALARM_UPLOADPIC_FAILCOUNT 0x31bb                       
#define DH_ALARM_POS_MANAGE 0x31bc                                
#define DH_ALARM_REMOTE_CTRL_STATUS 0x31bd                        
#define DH_ALARM_PASSENGER_CARD_CHECK 0x31be                      
#define DH_ALARM_SOUND 0x31bf                                     
#define DH_ALARM_LOCK_BREAK 0x31c0                                
#define DH_ALARM_HUMAN_INSIDE 0x31c1                              
#define DH_ALARM_HUMAN_TUMBLE_INSIDE 0x31c2                       
#define DH_ALARM_DISABLE_LOCKIN 0x31c3                            
#define DH_ALARM_DISABLE_LOCKOUT 0x31c4                           
#define DH_ALARM_UPLOAD_PIC_FAILED 0x31c5                         
#define DH_ALARM_FLOW_METER 0x31c6                                
#define DH_ALARM_WIFI_SEARCH 0x31c7                               
#define DH_ALARM_WIRELESSDEV_LOWPOWER 0x31C8                      
#define DH_ALARM_PTZ_DIAGNOSES 0x31c9                             
#define DH_ALARM_FLASH_LIGHT_FAULT 0x31ca                         
#define DH_ALARM_STROBOSCOPIC_LIGTHT_FAULT 0x31cb                 
#define DH_ALARM_HUMAM_NUMBER_STATISTIC 0x31cc                    
#define DH_ALARM_VIDEOUNFOCUS 0x31ce                              
#define DH_ALARM_BUF_DROP_FRAME 0x31cd                            
#define DH_ALARM_DOUBLE_DEV_VERSION_ABNORMAL 0x31cf               
#define DH_ALARM_DCSSWITCH 0x31d0                                 
#define DH_ALARM_RADAR_CONNECT_STATE 0x31d1                       
#define DH_ALARM_DEFENCE_ARMMODE_CHANGE 0x31d2                    
#define DH_ALARM_SUBSYSTEM_ARMMODE_CHANGE 0x31d3                  
#define DH_ALARM_RFID_INFO 0x31d4                                 
#define DH_ALARM_SMOKE_DETECTION 0x31d5                           
#define DH_ALARM_BETWEENRULE_TEMP_DIFF 0x31d6                     
#define DH_ALARM_TRAFFIC_PIC_ANALYSE 0x31d7                       
#define DH_ALARM_HOTSPOT_WARNING 0x31d8                           
#define DH_ALARM_COLDSPOT_WARNING 0x31d9                          
#define DH_ALARM_FIREWARNING_INFO 0x31da                          
#define DH_ALARM_FACE_OVERHEATING 0x31db                          
#define DH_ALARM_SENSOR_ABNORMAL 0x31dc                           
#define DH_ALARM_PATIENTDETECTION 0x31de                          
#define DH_ALARM_RADAR_HIGH_SPEED 0x31df                          
#define DH_ALARM_POLLING_ALARM 0x31e0                             
#define DH_ALARM_ITC_HWS000 0x31e1                                
#define DH_ALARM_TRAFFICSTROBESTATE 0x31e2                        
#define DH_ALARM_TELEPHONE_CHECK 0x31e3                           
#define DH_ALARM_PASTE_DETECTION 0x31e4                           
#define DH_ALARM_SHOOTINGSCORERECOGNITION 0x31e5                  
#define DH_ALARM_SWIPEOVERTIME 0x31e6                             
#define DH_ALARM_DRIVING_WITHOUTCARD 0x31e7                       
#define DH_ALARM_TRAFFIC_PEDESTRIAN_RUN_REDLIGHT_DETECTION 0x31e8 
#define DH_ALARM_FIGHTDETECTION 0x31e9                            
#define DH_ALARM_OIL_4G_OVERFLOW 0x31ea                           
#define DH_ALARM_ACCESSIDENTIFY 0x31eb                            
#define DH_ALARM_POWER_SWITCHER_ALARM 0x31ec                      
#define DH_ALARM_SCENNE_CHANGE_ALARM 0x31ed                       
#define DH_ALARM_WIFI_VIRTUALINFO_SEARCH 0x31ef                   
#define DH_ALARM_TRAFFIC_OVERSPEED 0x31f0                         
#define DH_ALARM_TRAFFIC_UNDERSPEED 0x31f1                        
#define DH_ALARM_TRAFFIC_PEDESTRAIN 0x31f2                        
#define DH_ALARM_TRAFFIC_JAM 0x31f3                               
#define DH_ALARM_TRAFFIC_PARKING 0x31f4                           
#define DH_ALARM_TRAFFIC_THROW 0x31f5                             
#define DH_ALARM_TRAFFIC_RETROGRADE 0x31f6                        
#define DH_ALARM_VTSTATE_UPDATE 0x31f7                            
#define DH_ALARM_CALL_NO_ANSWERED 0x31f8                          
#define DH_ALARM_USER_LOCK_EVENT 0x31f9                           
#define DH_ALARM_RETROGRADE_DETECTION 0x31fa                      
#define DH_ALARM_AIO_APP_CONFIG_EVENT 0x31fb                      
#define DH_ALARM_RAID_STATE_EX 0x31fc                             
#define DH_ALARM_STORAGE_IPC_FAILURE 0x31fd                       
#define DH_ALARM_DEVICE_STAY 0x31fe                               
#define DH_ALARM_SUB_WAY_DOOR_STATE 0x31ff                        
#define DH_ALARM_SUB_WAY_PECE_SWITCH 0x3200                       
#define DH_ALARM_SUB_WAY_FIRE_ALARM 0x3201                        
#define DH_ALARM_SUB_WAY_EMER_HANDLE 0x3202                       
#define DH_ALARM_SUB_WAY_CAB_COVER 0x3203                         
#define DH_ALARM_SUB_WAY_DERA_OBST 0x3204                         
#define DH_ALARM_SUB_WAY_PECU_CALL 0x3205                         
#define DH_ALARM_BOX 0x3206                                       
#define DH_ALARM_DOOR_CLOSEDMANUALLY 0x3207                       
#define DH_ALARM_DOOR_NOTCLOSED_LONGTIME 0x3208                   
#define DH_ALARM_UNDER_VOLTAGE 0x3209                             
#define DH_ALARM_OVER_VOLTAGE 0x320a                              
#define DH_ALARM_CUT_LINE 0x320b                                  
#define DH_ALARM_VIDEOMOTION_EVENT 0x320c                         
#define DH_ALARM_WIDE_VIEW_REGION_EVENT 0x320d                    
#define DH_ALARM_FIBRE_OPTIC_ABORT 0x320e                         
#define DH_ALARM_TAIL_DETECTION 0x320f                            
#define DH_ALARM_BITRATES_OVERLIMIT 0x3210                        
#define DH_ALARM_RECORD_CHANGED_EX 0x3211                         
#define DH_ALARM_HIGH_DECIBEL 0x3212                              
#define DH_ALARM_SHAKE_DETECTION 0x3213                           
#define DH_ALARM_TUMBLE_DETECTION 0x3214                          
#define DH_ALARM_ACCESS_CTL_MALICIOUS 0x3215                      
#define DH_ALARM_ACCESS_CTL_USERID_REGISTER 0x3216                
#define DH_ALARM_ACCESS_CTL_REVERSELOCK 0x3217                    
#define DH_ALARM_ACCESS_CTL_USERID_DELETE 0x3218                  
#define DH_ALARM_ACCESS_DOOR_BELL 0x3219                          
#define DH_ALARM_ACCESS_FACTORY_RESET 0x321a                      
#define DH_ALARM_POLICE_RECORD_PROGRESS 0x321b                    
#define DH_ALARM_POLICE_PLUGIN 0x321c                             
#define DH_ALARM_GPS_NOT_ALIGNED 0x321d                           
#define DH_ALARM_WIRELESS_NOT_CONNECTED 0x321e                    
#define DH_ALARM_CABINET 0x321f                                   
#define DH_SWITCH_SCREEN 0x3220                                   
#define DH_ALARM_NEAR_DISTANCE_DETECTION 0x3221                   
#define DH_ALARM_MAN_STAND_DETECTION 0x3222                       
#define DH_ALARM_MAN_NUM_DETECTION 0x3223                         
#define DH_MCS_GENERAL_CAPACITY_LOW 0x3224                        
#define DH_MCS_DATA_NODE_OFFLINE 0x3225                           
#define DH_MCS_DISK_OFFLINE 0x3226                                
#define DH_MCS_DISK_SLOW 0x3227                                   
#define DH_MCS_DISK_BROKEN 0x3228                                 
#define DH_MCS_DISK_UNKNOW_ERROR 0x3229                           
#define DH_MCS_METADATA_SERVER_ABNORMAL 0x322a                    
#define DH_MCS_CATALOG_SERVER_ABNORMAL 0x322b                     
#define DH_MCS_GENERAL_CAPACITY_RESUME 0x322c                     
#define DH_MCS_DATA_NODE_ONLINE 0x322d                            
#define DH_MCS_DISK_ONLINE 0x322e                                 
#define DH_MCS_METADATA_SLAVE_ONLINE 0x322f                       
#define DH_MCS_CATALOG_SERVER_ONLINE 0x3230                       
#define DH_ALARM_OFFLINE_LOGSYNC 0x3231                           
#define DH_ALARM_UPGRADE_STATE 0x3232                             
#define DH_ALARM_LABELINFO 0x3233                                 
#define DH_ALARM_TIRED_PHYSIOLOGICAL 0x3234                       
#define DH_ALARM_CALLING_WHEN_DRIVING 0x3235                      
#define DH_ALARM_TRAFFIC_DRIVER_SMOKING 0x3236                    
#define DH_ALARM_TRAFFIC_DRIVER_LOWER_HEAD 0x3237                 
#define DH_ALARM_TRAFFIC_DRIVER_LOOK_AROUND 0x3238                
#define DH_ALARM_TRAFFIC_DRIVER_LEAVE_POST 0x3239                 
#define DH_ALARM_TRAFFIC_DRIVER_YAWN 0x323a                       
#define DH_ALARM_AUTO_INSPECTION 0x323b                           
#define DH_ALARM_TRAFFIC_VEHICLE_POSITION 0x323c                  
#define DH_ALARM_FACE_VERIFICATION_ACCESS_SNAP 0x323d             
#define DH_ALARM_VIDEOBLIND 0x323e                                
#define DH_ALARM_DRIVER_NOTCONFIRM 0x323f                         
#define DH_ALARM_FACEINFO_COLLECT 0x3240                          
#define DH_ALARM_HIGH_SPEED 0x3241                                
#define DH_ALARM_VIDEO_LOSS 0x3242                                
#define DH_ALARM_MPTBASE_CONNECT 0x3243                           
#define DH_ALARM_LATEST_SHUTDOWN 0x3244                           
#define DH_ALARM_ROBOT_COLLISION 0x3245           
#define DH_ALARM_ROBOT_FALLENDOWN 0x3246          
#define DH_ALARM_ROBOT_UNRECOGNIZED2DCODE 0x3247  
#define DH_ALARM_ROBOT_WRONG2DCODE 0x3248         
#define DH_ALARM_ROBOT_ROADBLOCKED 0x3249         
#define DH_ALARM_ROBOT_FAULT 0x324a               
#define DH_ALARM_ROBOT_OVERLOAD 0x324b            
#define DH_ALARM_ROBOT_YAWEXCEPTION 0x324c        
#define DH_ALARM_ROBOT_LOADTIMEOUT 0x324e         
#define DH_ALARM_ROBOT_UNLOADTIMEOUT 0x324f       
#define DH_ALARM_ROBOT_MAPUPDATE 0x3250           
#define DH_ALARM_ROBOT_BRAKE 0x3252               
#define DH_ALARM_ROBOT_MANUAL_INTERVENTION 0x3253 
#define DH_ALARM_VIDEO_TALK_PATH 0x324d             
#define DH_ALARM_CGIRECORD 0x3251                   
#define DH_ALARM_BATTERY_TEMPERATURE 0x3254         
#define DH_ALARM_TIRE_PRESSURE 0x3255               
#define DH_ALARM_VTH_CONFLICT 0x3256                
#define DH_ALARM_ACCESS_CTL_BLACKLIST 0x3257        
#define DH_ALARM_ROBOT_EMERGENCY_STOP 0x3258        
#define DH_ALARM_ROBOT_PATH_PLAN_FAILED 0x3259      
#define DH_ALARM_ROBOT_LOCAL_MAP_UPLOAD 0x325a      
#define DH_ALARM_ROBOT_SHELF_ERROR 0x325b           
#define DH_ALARM_ROBOT_SENSOR_ERROR 0x325c          
#define DH_ALARM_ROBOT_DERAILMENT 0x325d            
#define DH_ALARM_ROBOT_MOTOR_UNINIT 0x325e          
#define DH_ALARM_ROBOT_PREVENT_FALLING 0x325f       
#define DH_ALARM_ROBOT_LOCATION_EXCEPTION 0x3260    
#define DH_ALARM_ROBOT_UPGRADER_FAIL 0x3261         
#define DH_ALARM_ROBOT_CHARGING_ERROR 0x3262        
#define DH_ALARM_ROBOT_STATIONCHARGING_ERROR 0x3263 
#define DH_ALARM_ROBOT_CAMERA_ABNORMAL 0x3264       
#define DH_ALARM_ROBOT_ERROR_REPORT 0x3265          
#define DH_ALARM_ROBOT_DOOR_CONTROL_REQUEST 0x3266  
#define DH_ALARM_ROBOT_FAILEDTO_CONTROLROOM 0x3267  
#define DH_ALARM_ROBOT_ABNORMAL2DCODE 0x3268        
#define DH_ALARM_ROBOT_SECURITYDOGINVALID 0x3269    
#define DH_ALARM_ROBOT_LOCKAREA_BLOCKED 0x326a      
#define DH_ALARM_ROBOT_REQUEST_CANCLE_TASK 0x326b   
#define DH_ALARM_ROBOT_FORK_BLOCK 0x326c            
#define DH_ALARM_ROBOT_SHUT_DOWN 0x326d             
#define DH_ALARM_ROBOT_LASER_HEAD_DIRTY 0x326e      
#define DH_ALARM_ROBOT_UNTRACK 0x326f               
#define DH_ALARM_ROBOT_IN_ELEVATOR 0x3270           
#define DH_ALARM_ROBOT_CORRECT_LOACATION 0x3271     
#define DH_ALARM_ROBOT_SLIP 0x3272                  
#define DH_ALARM_ROBOT_LOAD_HEIGHT_ALARM 0x3273     
#define DH_ALARM_ROBOT_EMERGENCY_STOP_EX 0x3274     
#define DH_ALARM_USERLOCK 0x3300                             
#define DH_ALARM_DOWNLOAD_REMOTE_FILE 0x3301                 
#define DH_ALARM_NASFILE_STATUS 0x3302                       
#define DH_ALARM_TALKING_CANCELCALL 0x3303                   
#define DH_ALARM_ACCESS_CTL_UNAUTHORIZED_MALICIOUSWIP 0x3304 
#define DH_ALARM_CROWD_DETECTION 0x3305                      
#define DH_ALARM_FACE_FEATURE_ABSTRACT 0x3306                
#define DH_ALARM_RECORD_SCHEDULE_CHANGE 0x3307               
#define DH_ALARM_NTP_CHANGE 0x3308                           
#define DH_ALARM_HDD_TEMPERATUREALARM 0x3309                 
#define DH_ALARM_HDD_HEALTHALARM 0x330a                      
#define DH_ALARM_HDD_SHAKEALARM 0x330b                       
#define DH_ALARM_PATROL_STATUS 0x330c                        
#define DH_ALARM_CITIZEN_PICTURE_COMPARE 0x330d              
#define DH_ALARM_AREAARM_MODECHANGE 0x330e     
#define DH_ALARM_ZONEMODULELOST 0x330f         
#define DH_ALARM_AREAALARM 0x3310              
#define DH_ALARM_ZONEOPEN 0x3311               
#define DH_ALARM_SYSTEMTAMPER 0x3312           
#define DH_ALARM_ALARMREGION_MAXEVENTID 0x3348 
#define DH_ALARM_LAW_ENFORCEMENT_INFO 0x3349    
#define DH_ALARM_CONGESTION_DETECTION 0x334A    
#define DH_ALARM_VEHICLELIMIT_DETECTION 0x334B  
#define DH_ALARM_TRAFFIC_PARKING_TIMEOUT 0x334C 
#define DH_ALARM_DISTANCE_DETECTION 0x334e           
#define DH_ALARM_STAY_DETECTION 0x334f               
#define DH_ALARM_DEVBOARDHOTPLUG 0x3350              
#define DH_ALARM_HOMESCENE_CHANGE 0x3351             
#define DH_ALARM_STORAGE_WORKDIRECTORY_SWITCH 0x3352 
#define DH_ALARM_TRAFFIC_LINKAGEALARM 0x3353         
#define DH_ALARM_COAXIAL_ALARM_LOCAL 0x3354          
#define DH_ALARM_NAS_FILE_REMOVE_STATUS 0x3355       
#define DH_ALARM_NAS_APK_INSTALL_REQUEST 0x3356      
#define DH_ALARM_NAS_APK_INSTALL_STATUS 0x3357       
#define DH_ALARM_FILE_COMPRESS_STATUS 0x3358         
#define DH_ALARM_STRANGER_ALARM 0x3359               
#define DH_ALARM_QR_CODE_CHECK 0x335a                
#define DH_ALARM_ACCESS_CTL_LOCK_MODE 0x335b         
#define DH_ALARM_LOCK_ROOM_NUM_BIND 0x335c           
#define DH_ALARM_LEAVE_DETECTION 0x335d              
#define DH_ALARM_TRAFFICGZJJ_QUEUE_LEN 0x335e        
#define DH_ALARM_TRAFFIC_XINKONG 0x335f              
#define DH_ALARM_DEVICE_ABNORMAL 0x3360              
#define DH_ALARM_RADAR_REGIONDETECTION 0x3370 
#define DH_ALARM_RADAR_LINEDETECTION 0x3371   
#define DH_ALARM_RADAR_MAXEVENTID 0x3433      
#define DH_ALARM_JABLOTRON_ALARM 0x3434          
#define DH_ALARM_FACE_RECOGNITION 0x3435         
#define DH_ALARM_VEHICLE_OILLEVEL 0x3436         
#define DH_ALARM_VEHICLE_LOAD 0x3437             
#define DH_ALARM_VEHICLE_STATE 0x3438            
#define DH_ALARM_IMSI_CHECK 0x3439               
#define DH_ALARM_BLIND_ALARM 0x343A              
#define DH_ALARM_VEHICLE_MAINTAINCE 0x343B       
#define DH_ALARM_PARKINGLOCK_STATE 0x343C        
#define DH_ALARM_FIRE_DETECTION 0x343D           
#define DH_ALARM_NAS_SERVER_STATE 0x343E         
#define DH_ALARM_VOLUME_GROUP_FAULT 0x343F       
#define DH_ALARM_DISK_CHECK 0x3440               
#define DH_ALARM_PHONECALL_DETECT 0x3441         
#define DH_ALARM_FLOATINGOBJECT_DETECTION 0x3442 
#define DH_ALARM_WATER_LEVEL_DETECTION 0x3443    
#define DH_ALARM_LOW_SPEED 0x3444                
#define DH_ALARM_TRAFFIC_VEHICLEINOUT 0x3445     
#define DH_ALARM_TRAFFIC_JUNCTION 0x3446         
#define DH_ALARM_DOOR_CONTROL 0x3447             
#define DH_ALARM_ARMSTATE 0x3448                 
#define DH_ALARM_TICKET_INFO_REPORT 0x3449      
#define DH_ALARM_TRAFFIC_LAMP_WORK_STATE 0x344E 
#define DH_ALARM_ENGINE_FAILURE_STATUS 0x344F        
#define DH_ALARM_HIGH_TOSS_DETECT 0x3450             
#define DH_ALARM_PARKING_LOT_STATUS_DETECTION 0X3451 
#define DH_ALARM_STORAGE_HEALTH_ABNORMAL 0x3452      
#define DH_ALARM_CLEAR_CAR 0x3453                    
#define DH_ALARM_ANATOMY_TEMP_DETECT 0x3454                    
#define DH_ALARM_REGULATOR_ABNORMAL 0x3455                     
#define DH_ALARM_DHOP_CUSTOM 0x3456                            
#define DH_ALARM_DHOP_CUSTOM_ONCE 0x3457                       
#define DH_ALARM_TRAFFIC_LIGHT_STATE 0x3458                    
#define DH_ALARM_SWIPCARD_STATUS 0x3459                        
#define DH_ALARM_AUDIOHOST_STATE 0x345A                        
#define DH_ALARM_PTZ_ABNORMAL 0x345B                           
#define DH_ALARM_STORAGEFORMAT 0x345C                          
#define DH_ALARM_APPCMDSTATE 0x345D                            
#define DH_ALARM_BLUE_TOOTH_HEADSET_ALARM 0x345E               
#define DH_ALARM_SOLARCELL_SYSTEM_INFO 0x345F                  
#define DH_ALARM_REGION_PARKING_TIMEOUT 0x3460                 
#define DH_ALARM_REGION_PARKING_NO_ENTRY_RECORD 0x3461         
#define DH_ALARM_OVER_LOAD 0x3462                              
#define DH_ALARM_WIRELESS_LOG_INFO 0x3463                      
#define DH_ALARM_TIME_TO_POWEROFF 0x3464                       
#define DH_ALARM_TRAFFIC_LIGHT_FAULT_STATE 0x3465              
#define DH_ALARM_VEHICLE_PERIPHERAL 0x3466                     
#define DH_ALARM_FIRE_LANE_DETECTION 0x3467                    
#define DH_ALARM_FIRE_LINE_DETECTION 0x3468                    
#define DH_ALARM_DISK_HEALTH_FAILURE 0x3469                    
#define DH_ALARM_VEHICLE_INOUT 0x346A                          
#define DH_ALARM_REFRIGE_SHUT_DOWN 0x346B                      
#define DH_ALARM_AROUD_4G_PROBE_SEARCH 0x346C                  
#define DH_ALARM_DISS_ASSEMBLY 0x3471                          
#define DH_ALARM_SLEEP_CONTROL_STATUS 0x3472                   
#define DH_ALARM_REMOTE_DISASSEMBLY 0x3473                     
#define DH_ALARM_NONMOTOR_ENTRYING 0x3474                      
#define DH_ALARM_SCREENSAVER 0x3475                            
#define DH_ALARM_ABN_POST_DETECTION 0x3476                     
#define DH_ALARM_CITY_MOTORPARKING 0x3477                      
#define DH_ALARM_RECORD_BACKUP_FAILURE 0x3478                  
#define DH_ALARM_EMERGENCY_FILE_UPLOAD 0x3479                  
#define DH_ALARM_COAXIAL_HIGH_TEMPERATURE 0x347A               
#define DH_ALARM_COAXIAL_LOW_TEMPERATURE 0x347B                
#define DH_ALARM_BREED_DETECTION 0x347C                        
#define DH_ALARM_CHANNEL_RECSHORTAGE 0x347D                    
#define DH_ALARM_EMERGENCY_FILE_UPLOAD_CANCEL 0x347E           
#define DH_ALARM_SECURITY_INSPECTOR_OVERTIME_ON_DUTY 0x347F    
#define DH_ALARM_SECURITY_INSPECTOR_NOT_CONFIRM_PACKAGE 0x3480 
#define DH_ALARM_WORKSUIT_FEATURE_ABSTRACT 0x3481              
#define DH_ALARM_RUN_DETECTION 0x3482                          
#define DH_ALARM_ANATOMY_TEMPDETECT_TO_PHONE 0x3483            
#define DH_ALARM_CHANNEL_CAPS_CHANGE 0x3484                    
#define DH_ALARM_RAIN_FALL_MSG 0x3485                          
#define DH_ALARM_VEHICLE_DETENTION 0x3486                      
#define DH_ALARM_ANIMAL_DETECTION 0x3487                       
#define DH_ALARM_ASG_SELFCHECK 0x3488                          
#define DH_ALARM_GPS_REPORTING_PLATFORM 0x3489                 
#define DH_ALARM_HOSPITAL_ALARM 0x348A                         
#define DH_ALARM_CUTLINE 0x348B                                
#define DH_ALARM_VIDEOTALK 0x348C                              
#define DH_ALARM_PREVENT_FREE_RIDE 0x348D                      
#define DH_ALARM_BLIND_SPOT_DETECTION 0x348E                   
#define DH_ALARM_WATER_SPEED_DETECTION 0x348F                  
#define DH_ALARM_HUMIDITY_ALARM 0x3490                         
#define DH_ALARM_SIP_REGISTER_RESULT 0x3491                    
#define DH_ALARM_GESTURE_DETECTION 0x3492                      
#define DH_ALARM_DEFENSE_CHANGE 0x3493                         
#define DH_ALARM_ABNORMAL_RESTART 0x3494                       
#define DH_ALARM_DOUBLEDOOR 0x3495                             
#define DH_ALARM_OPENOUT_TIMESECTION 0x3496                    
#define DH_ALARM_SERVICESTART 0x3497                           
#define DH_ALARM_WIRELESSDEV_POWERLESS 0x3498                  
#define DH_ALARM_PUBLISHINFO_CONFIRM 0x3499                    
#define DH_ALARM_LEFUNCTION_STATUS_SYNC 0x349A                 
#define DH_ALARM_WATER_QUALITY_DETECTION 0x349B                
#define DH_ALARM_TRAFFIC_FLOW_QUEUE 0x349C                
#define DH_ALARM_TRAFFIC_FLOW_JUNTION 0x349D              
#define DH_ALARM_TRAFFIC_FLOW_VEHICLE_STOP 0x349E         
#define DH_ALARM_TRAFFIC_FLOW_STAT 0x349F                 
#define DH_ALARM_TRAFFIC_FLOW_STAT_EX 0x34A0              
#define DH_ALARM_SCREEN_DISPLAY_ALARM 0x34A1              
#define DH_ALARM_YE_BAO_ALARM 0x34A2                      
#define DH_ALARM_AI_PICKUP_WORK_STATE 0x34A3              
#define DH_ALARM_INTELLI_TYPE_CHANGE 0x34A4               
#define DH_ALARM_TRAFFIC_CAR_PASSING 0x34A5               
#define DH_ALARM_HUMAN_ANIMAL_COEXISTENCE 0x34A6          
#define DH_ALARM_MINIINDOOR_RADAR_ALARM 0x34A7            
#define DH_ALARM_MEMORY_OVER_LOAD 0x34A8                  
#define DH_ALARM_CPU_OVER_LOAD 0x34A9                     
#define DH_ALARM_EAS_ANTITHEFT 0x34AA                     
#define DH_ALARM_EAS_TRANSMIT_COIL 0x34AB                 
#define DH_ALARM_EAS_RECEIVE_COIL 0x34AC                  
#define DH_ALARM_EAS_TAG_RESIDENT 0x34AD                  
#define DH_ALARM_EAS_ANTENNA_POWER_FAULT 0x34AE           
#define DH_ALARM_SAFETY_ABNORMAL 0x34AF                   
#define DH_ALARM_PARKING_SPACE_DETECTOR_STATE 0x34B0      
#define DH_ALARM_REQUEST_IDLE_MODE 0x34B1                 
#define DH_ALARM_FORCE_INTO_IDLE_MODE 0x34B2              
#define DH_ALARM_REMOTE_APPROVAL 0x34B3                   
#define DH_ALARM_DYNAMIC_PWDLOCK_FOR_INIT 0x34B4          
#define DH_ALARM_DYNAMIC_PWDLOCK_UPLOAD_RANDOMCODE 0x34B5 
#define DH_ALARM_DYNAMIC_PWDLOCK_FOR_OPEN 0x34B6          
#define DH_ALARM_DYNAMIC_PWDLOCK_CLOSE 0x34B7             
#define DH_ALARM_SYNCUSER_INFO 0x34B8                     
#define DH_ALARM_GAS_TANK_DETECTION 0x34B9                
#define DH_ALARM_LOSS_FRAME_ALARM 0x34BA         
#define DH_ALARM_INTELLI_MODULE_HIGH_TEMP 0x34BB 
#define DH_ALARM_INTELLI_MODULE_OFFLINE 0x34BC   
#define DH_ALARM_SSD_HEALTH_FAILURE 0x34BD       
#define DH_ALARM_ABNORMALLOGIN 0x34BE            
#define DH_ALARM_INTELLITRACK_EVENT 0x34BF       
#define DH_ALARM_RF_JAMMING 0x34C0               
#define DH_ALARM_ARMING_FAILURE 0x34C1           
#define DH_ALARM_USER_MODIFIED 0x34C2            
#define DH_ALARM_MANUAL_TEST 0x34C3              
#define DH_ALARM_DEVICE_MODIFIED 0x34C4          
#define DH_ALARM_ATS_FAULT 0x34C5                
#define DH_ALARM_ARC_OFFLINE 0x34C6              
#define DH_ALARM_WIFI_FAILURE 0x34C7             
#define DH_ALARM_OVER_TEMPERATURE 0x34C8         
#define DH_ALARM_TRAFFIC_ROADALERT 0x34C9        
#define DH_ALARM_TRAFFIC_CROSSLANE 0x34CA        
#define DH_ALARM_TRAFFIC_OVERYELLOWLINE 0x34CB   
#define DH_ALARM_TRAFFIC_ACCIDENT 0x34CC         
#define DH_ALARM_TRAFFIC_ROADBLOCK 0x34CD        
#define DH_ALARM_TRAFFIC_ROADCONSTRUCTION 0x34CE 
#define DH_ALARM_TRAFFIC_CARDISTANCESHORT 0x34CF 
#define DH_ALARM_TRAFFIC_VEHICLERACING 0x34D0 
#define DH_ALARM_STORAGE_OVERLOAD 0x34D1      
#define DH_ALARM_ZONE_MODE_CHANGE 0x34D2      
#define DH_ALARM_PSTN_PERIODIC_TEST 0x34D3    
#define DH_ALARM_TALKING_PHONE_CALLING 0x34D4 
#define DH_ALARM_NO_PASSAGE 0x34D5            
#define DH_ALARM_HOSPITAL_TALK_CONTROL 0x34D6 
#define DH_ALARM_BLUETOOTH_EVENT 0x34D7       
#define DH_ALARM_SENSITIVE_WORDS 0x34D8       
#define DH_ALARM_DISK_NUMBER_CHANGE 0x34D9    
#define DH_ALARM_SMOKING_DETECT 0x34DA        
#define DH_ALARM_SITE_OVERTIME_ALARM 0x34DB   
#define DH_ALARM_SMART_SOUND_DETECT 0x34DC    
#define DH_ALARM_REQ_WORK_TIME_CALC 0x34DD    
#define DH_ALARM_XRAY_EMERGENCY_ALARM 0x34DE  
#define DH_ALARM_RTSC_PHASE_RUNING 0x5001 
#define DH_ALARM_RTSC_LAMP_RUNING 0x5002  
#define DH_ALARM_RTSC_RUNING 0x5003       
#define DH_ALARM_RTSC_TRAFFIC 0x5004      
#define DH_ALARM_HY_FIRE_DETECTION 0x6001               
#define DH_ALARM_HY_SMOG_DETECTION 0x6002               
#define DH_ALARM_HY_INFIRE_PASSAGE_DETECTION 0x6003     
#define DH_ALARM_HY_OUTFIRE_PASSAGE_DETECTION 0x6004    
#define DH_ALARM_HY_MAN_LEAVING_DETECTION 0x6005        
#define DH_ALARM_HY_FIRE_CONTROL_OFFLINE_FAULT 0x6006   
#define DH_ALARM_HY_FIRE_CONTROL_SENSOR_FAULT 0x6007    
#define DH_ALARM_HY_FIRE_CONTROL_DISMANTLE_FAULT 0x6008 
#define DH_ALARM_XRAY_PIP_COMMUNICATION_ABNORMITY 0x7001  
#define DH_ALARM_XRAY_ACQUISITION_SYSTEM_ABNORMITY 0x7002 
#define DH_ALARM_XRAY_EMERGENCY_STOP 0x7003               
#define DH_ALARM_XRAY_DETECTOR_PROTECTION_OPEN 0x7004     
#define DH_ALARM_XRAY_MACHINE_SHELL_OPEN 0x7005           
#define DH_ALARM_XRAY_KEYBOARD_ABNORMITY 0x7006           
#define DH_ALARM_XRAY_TRANSMISSION_BELT_ABNORMITY 0x7007  
#define DH_ALARM_POWER_GROUND_DETECTION_ABNORMAL 0x7008   
#define DH_ALARM_XRAY_SOURCE_ABNORMITY 0x7009             
#define DH_UPLOAD_ALARM 0x4000                    
#define DH_UPLOAD_MOTION_ALARM 0x4001             
#define DH_UPLOAD_VIDEOLOST_ALARM 0x4002          
#define DH_UPLOAD_SHELTER_ALARM 0x4003            
#define DH_UPLOAD_SOUND_DETECT_ALARM 0x4004       
#define DH_UPLOAD_DISKFULL_ALARM 0x4005           
#define DH_UPLOAD_DISKERROR_ALARM 0x4006          
#define DH_UPLOAD_ENCODER_ALARM 0x4007            
#define DH_UPLOAD_DECODER_ALARM 0x400B            
#define DH_UPLOAD_EVENT 0x400C                    
#define DH_UPLOAD_IVS 0x400D                      
#define DH_UPLOAD_SMOKESENSOR_ALARM 0x400E        
#define DH_UPLOAD_ALARM_EX 0x400F                 
#define DH_UPLOAD_REMOTE_LOGIN_FAILD_ALARM 0x4010 
#define DH_UPLOAD_CUSTOM 0x4011                   
#define DH_UPLOAD_FRONTDISCONNECT_ALARM 0x4012    
#define DH_UPLOAD_ALARM_IPC 0x4013                
#define DH_UPLOAD_NET_ALARM 0x4014                
#define DH_UPLOAD_ALARM_RAID 0x4015               
#define DH_UPLOAD_SCENE_CHANGE 0x4016             
#define DH_UPLOAD_PIRDETECTION 0x4017             
#define DH_UPLOAD_PIRTAMPER 0x4018                
#define DH_UPLOAD_PIRCLOAK 0x4019                 
#define DH_UPLOAD_PIRSHOCK 0x401A                 
#define DH_UPLOAD_PIRFAILURE 0x401B               
#define DH_UPLOAD_PIRBATTERYLOW 0x401C            
#define DH_UPLOAD_PIRMISSINGCALL 0x401D           
#define DH_UPLOAD_VIDEO_UNFOCUS 0x401E            
#define DH_UPLOAD_ALARMPIR 0x401F                 
#define DH_UPLOAD_ALARM_EX2 0x4020                
#define DH_UPLOAD_BYPASSMODE_CHANGE_EVENT 0x4021  
#define DH_UPLOAD_CHASSISINTRUDED 0x4022          
#define DH_UPLOAD_RCEMERGENCY_CALL 0x4023         
#define DH_UPLOAD_ARMMODE_CHANGE_EVENT 0x4024     
#define DH_UPLOAD_SUBSYSTEM_ARMMODE_CHANGE 0x4025 
#define DH_UPLOAD_DEFENCE_ARMMODE_CHANGE 0x4026   
#define DH_UPLOAD_POWERFAULT 0x4027               
#define DH_UPLOAD_HEARTBEAT_ALARM 0x4028          
#define DH_UPLOAD_ONLINE_ALARM 0x4029             
#define DH_UPLOAD_KEYPAD_TAMPER 0x402A            
#define DH_UPLOAD_PROGRAM_MODE 0x402B             
#define DH_UPLOAD_PSTN_PERIODIC_TEST 0x402C       
#define DH_UPLOAD_PROFILE_ALARM_TRANSMIT 0x402D   
#define DH_UPLOAD_USER_LOCK 0x402E                
#define DH_ALARM_BUS_DRIVER_CHECK 0x0001               
#define DH_ALARM_BUS_IMPORT_SITE 0x0002                
#define DH_ALARM_BUS_EXPORT_SITE 0x0003                
#define DH_ALARM_BUS_ABNORMAL 0x0004                   
#define DH_ALARM_BUS_DOOR_OPEN 0x0005                  
#define DH_ALARM_BUS_CUR_MILEAGE 0x0006                
#define DH_ALARM_BUS_CUR_OIL 0x0007                    
#define DH_ALARM_BUS_LOW_OIL 0x0008                    
#define DH_ALARM_BUS_PASSENGER_CARD_CHECK 0x0009       
#define DH_ALARM_BUS_VEHICLE_STANDING_OVER_TIME 0x000a 
#define DH_ALARM_BUS_DRIVE_AFTER_WORK 0x000b           
#define DH_ALARM_BUS_PAD_SHUTDOWN 0x000c               
#define DH_ALARM_BUS_TIRED_DRIVE_CHECK 0x000d          
#define DH_ALARM_BUS_STEAL_OIL 0x000e                  
#define DH_ALARM_BUS_CIRCUIT_SHIFT 0x000f              
#define DH_ALARM_BUS_ROUTE_OVERTIME 0x0010             
#define DH_ALARM_BUS_VEHICLE_CARRY_ALARM 0x0011        
#define DH_ALARM_BUS_VEHICLE_PAULIN_ALARM 0x0012       
#define DH_ALARM_BUS_VEHICLE_LIFT_ALARM 0x0013         
#define DH_ALARM_BUS_FIRE_PRESSURE_ALARM 0x0014        
#define DH_ALARM_BUS_ADD_OIL 0x0015                    
#define RESPONSE_DECODER_CTRL_TV 0x00000001       
#define RESPONSE_DECODER_SWITCH_TV 0x00000002     
#define RESPONSE_DECODER_PLAYBACK 0x00000003      
#define RESPONSE_EXCHANGE_DATA 0x00000004         
#define RESPONSE_ASYN_QUERY_RECORDFILE 0x00000005 
#define DH_DEV_UPGRADEFILETRANS_START 0x0000 
#define DH_DEV_UPGRADEFILETRANS_SEND 0x0001  
#define DH_DEV_UPGRADEFILETRANS_STOP 0x0002  
#define DH_DEV_BLACKWHITETRANS_START 0x0003  
#define DH_DEV_BLACKWHITETRANS_SEND 0x0004   
#define DH_DEV_BLACKWHITETRANS_STOP 0x0005   
#define DH_DEV_BLACKWHITE_LOAD 0x0006        
#define DH_DEV_BLACKWHITE_LOAD_STOP 0x0007   
#define DH_DEV_FILETRANS_STOP 0x002B         
#define DH_DEV_FILETRANS_BURN 0x002C         
#define DH_CAPTURE_SIZE_D1 0x00000001
#define DH_CAPTURE_SIZE_HD1 0x00000002
#define DH_CAPTURE_SIZE_BCIF 0x00000004
#define DH_CAPTURE_SIZE_CIF 0x00000008
#define DH_CAPTURE_SIZE_QCIF 0x00000010
#define DH_CAPTURE_SIZE_VGA 0x00000020
#define DH_CAPTURE_SIZE_QVGA 0x00000040
#define DH_CAPTURE_SIZE_SVCD 0x00000080
#define DH_CAPTURE_SIZE_QQVGA 0x00000100
#define DH_CAPTURE_SIZE_SVGA 0x00000200
#define DH_CAPTURE_SIZE_XVGA 0x00000400
#define DH_CAPTURE_SIZE_WXGA 0x00000800
#define DH_CAPTURE_SIZE_SXGA 0x00001000
#define DH_CAPTURE_SIZE_WSXGA 0x00002000
#define DH_CAPTURE_SIZE_UXGA 0x00004000
#define DH_CAPTURE_SIZE_WUXGA 0x00008000
#define DH_CAPTURE_SIZE_LFT 0x00010000
#define DH_CAPTURE_SIZE_720 0x00020000
#define DH_CAPTURE_SIZE_1080 0x00040000
#define DH_CAPTURE_SIZE_1_3M 0x00080000
#define DH_CAPTURE_SIZE_2M 0x00100000
#define DH_CAPTURE_SIZE_5M 0x00200000
#define DH_CAPTURE_SIZE_3M 0x00400000
#define DH_CAPTURE_SIZE_5_0M 0x00800000
#define DH_CPTRUTE_SIZE_1_2M 0x01000000
#define DH_CPTRUTE_SIZE_1408_1024 0x02000000
#define DH_CPTRUTE_SIZE_8M 0x04000000
#define DH_CPTRUTE_SIZE_2560_1920 0x08000000
#define DH_CAPTURE_SIZE_960H 0x10000000
#define DH_CAPTURE_SIZE_960_720 0x20000000
#define DH_CAPTURE_COMP_DIVX_MPEG4 0x00000001
#define DH_CAPTURE_COMP_MS_MPEG4 0x00000002
#define DH_CAPTURE_COMP_MPEG2 0x00000004
#define DH_CAPTURE_COMP_MPEG1 0x00000008
#define DH_CAPTURE_COMP_H263 0x00000010
#define DH_CAPTURE_COMP_MJPG 0x00000020
#define DH_CAPTURE_COMP_FCC_MPEG4 0x00000040
#define DH_CAPTURE_COMP_H264 0x00000080
#define DH_CAPTURE_COMP_H265 0x00000100
#define DH_CAPTURE_COMP_SVAC 0x00000200
#define DH_ALARM_UPLOAD 0x00000001
#define DH_ALARM_RECORD 0x00000002
#define DH_ALARM_PTZ 0x00000004
#define DH_ALARM_MAIL 0x00000008
#define DH_ALARM_TOUR 0x00000010
#define DH_ALARM_TIP 0x00000020
#define DH_ALARM_OUT 0x00000040
#define DH_ALARM_FTP_UL 0x00000080
#define DH_ALARM_BEEP 0x00000100
#define DH_ALARM_VOICE 0x00000200
#define DH_ALARM_SNAP 0x00000400
#define DH_RESTORE_COMMON 0x00000001          
#define DH_RESTORE_CODING 0x00000002          
#define DH_RESTORE_VIDEO 0x00000004           
#define DH_RESTORE_COMM 0x00000008            
#define DH_RESTORE_NETWORK 0x00000010         
#define DH_RESTORE_ALARM 0x00000020           
#define DH_RESTORE_VIDEODETECT 0x00000040     
#define DH_RESTORE_PTZ 0x00000080             
#define DH_RESTORE_OUTPUTMODE 0x00000100      
#define DH_RESTORE_CHANNELNAME 0x00000200     
#define DH_RESTORE_VIDEOINOPTIONS 0x00000400  
#define DH_RESTORE_CPS 0x00000800             
#define DH_RESTORE_INTELLIGENT 0x00001000     
#define DH_RESTORE_REMOTEDEVICE 0x00002000    
#define DH_RESTORE_DECODERVIDEOOUT 0x00004000 
#define DH_RESTORE_LINKMODE 0x00008000        
#define DH_RESTORE_COMPOSITE 0x00010000       
#define DH_RESTORE_ALL 0x80000000             
#define PTZ_DIRECTION 0x00000001     
#define PTZ_ZOOM 0x00000002          
#define PTZ_FOCUS 0x00000004         
#define PTZ_IRIS 0x00000008          
#define PTZ_ALARM 0x00000010         
#define PTZ_LIGHT 0x00000020         
#define PTZ_SETPRESET 0x00000040     
#define PTZ_CLEARPRESET 0x00000080   
#define PTZ_GOTOPRESET 0x00000100    
#define PTZ_AUTOPANON 0x00000200     
#define PTZ_AUTOPANOFF 0x00000400    
#define PTZ_SETLIMIT 0x00000800      
#define PTZ_AUTOSCANON 0x00001000    
#define PTZ_AUTOSCANOFF 0x00002000   
#define PTZ_ADDTOUR 0x00004000       
#define PTZ_DELETETOUR 0x00008000    
#define PTZ_STARTTOUR 0x00010000     
#define PTZ_STOPTOUR 0x00020000      
#define PTZ_CLEARTOUR 0x00040000     
#define PTZ_SETPATTERN 0x00080000    
#define PTZ_STARTPATTERN 0x00100000  
#define PTZ_STOPPATTERN 0x00200000   
#define PTZ_CLEARPATTERN 0x00400000  
#define PTZ_POSITION 0x00800000      
#define PTZ_AUX 0x01000000           
#define PTZ_MENU 0x02000000          
#define PTZ_EXIT 0x04000000          
#define PTZ_ENTER 0x08000000         
#define PTZ_ESC 0x10000000           
#define PTZ_MENUUPDOWN 0x20000000    
#define PTZ_MENULEFTRIGHT 0x40000000 
#define PTZ_OPT_NUM 0x80000000       
#define PTZ_DEV 0x00000001    
#define PTZ_MATRIX 0x00000002 
#define CODETYPE_MPEG4 0
#define CODETYPE_H264 1
#define CODETYPE_JPG 2
#define DH_CAPTURE_BRC_CBR 0
#define DH_CAPTURE_BRC_VBR 1
#define FRAME_TYPE_MOTION 0x00000001  
#define FRAME_TYPE_HUMAN 0x00000002   
#define FRAME_TYPE_VEHICLE 0x00000004 
#define EVENT_IVS_ALL 0x00000001                               
#define EVENT_IVS_CROSSLINEDETECTION 0x00000002                
#define EVENT_IVS_CROSSREGIONDETECTION 0x00000003              
#define EVENT_IVS_PASTEDETECTION 0x00000004                    
#define EVENT_IVS_LEFTDETECTION 0x00000005                     
#define EVENT_IVS_STAYDETECTION 0x00000006                     
#define EVENT_IVS_WANDERDETECTION 0x00000007                   
#define EVENT_IVS_PRESERVATION 0x00000008                      
#define EVENT_IVS_MOVEDETECTION 0x00000009                     
#define EVENT_IVS_TAILDETECTION 0x0000000A                     
#define EVENT_IVS_RIOTERDETECTION 0x0000000B                   
#define EVENT_IVS_FIREDETECTION 0x0000000C                     
#define EVENT_IVS_SMOKEDETECTION 0x0000000D                    
#define EVENT_IVS_FIGHTDETECTION 0x0000000E                    
#define EVENT_IVS_FLOWSTAT 0x0000000F                          
#define EVENT_IVS_NUMBERSTAT 0x00000010                        
#define EVENT_IVS_CAMERACOVERDDETECTION 0x00000011             
#define EVENT_IVS_CAMERAMOVEDDETECTION 0x00000012              
#define EVENT_IVS_VIDEOABNORMALDETECTION 0x00000013            
#define EVENT_IVS_VIDEOBADDETECTION 0x00000014                 
#define EVENT_IVS_TRAFFICCONTROL 0x00000015                    
#define EVENT_IVS_TRAFFICACCIDENT 0x00000016                   
#define EVENT_IVS_TRAFFICJUNCTION 0x00000017                   
#define EVENT_IVS_TRAFFICGATE 0x00000018                       
#define EVENT_TRAFFICSNAPSHOT 0x00000019                       
#define EVENT_IVS_FACEDETECT 0x0000001A                        
#define EVENT_IVS_TRAFFICJAM 0x0000001B                        
#define EVENT_IVS_TRAFFIC_NONMOTORINMOTORROUTE 0x0000001C      
#define EVENT_IVS_TRAFFIC_RUNREDLIGHT 0x00000100               
#define EVENT_IVS_TRAFFIC_OVERLINE 0x00000101                  
#define EVENT_IVS_TRAFFIC_RETROGRADE 0x00000102                
#define EVENT_IVS_TRAFFIC_TURNLEFT 0x00000103                  
#define EVENT_IVS_TRAFFIC_TURNRIGHT 0x00000104                 
#define EVENT_IVS_TRAFFIC_UTURN 0x00000105                     
#define EVENT_IVS_TRAFFIC_OVERSPEED 0x00000106                 
#define EVENT_IVS_TRAFFIC_UNDERSPEED 0x00000107                
#define EVENT_IVS_TRAFFIC_PARKING 0x00000108                   
#define EVENT_IVS_TRAFFIC_WRONGROUTE 0x00000109                
#define EVENT_IVS_TRAFFIC_CROSSLANE 0x0000010A                 
#define EVENT_IVS_TRAFFIC_OVERYELLOWLINE 0x0000010B            
#define EVENT_IVS_TRAFFIC_DRIVINGONSHOULDER 0x0000010C         
#define EVENT_IVS_TRAFFIC_YELLOWPLATEINLANE 0x0000010E         
#define EVENT_IVS_TRAFFIC_PEDESTRAINPRIORITY 0x0000010F        
#define EVENT_IVS_ELECTROSPARKDETECTION 0x00000110             
#define EVENT_IVS_TRAFFIC_NOPASSING 0x00000111                 
#define EVENT_IVS_ABNORMALRUNDETECTION 0x00000112              
#define EVENT_IVS_RETROGRADEDETECTION 0x00000113               
#define EVENT_IVS_INREGIONDETECTION 0x00000114                 
#define EVENT_IVS_TAKENAWAYDETECTION 0x00000115                
#define EVENT_IVS_PARKINGDETECTION 0x00000116                  
#define EVENT_IVS_FACERECOGNITION 0x00000117                   
#define EVENT_IVS_TRAFFIC_MANUALSNAP 0x00000118                
#define EVENT_IVS_TRAFFIC_FLOWSTATE 0x00000119                 
#define EVENT_IVS_TRAFFIC_STAY 0x0000011A                      
#define EVENT_IVS_TRAFFIC_VEHICLEINROUTE 0x0000011B            
#define EVENT_ALARM_MOTIONDETECT 0x0000011C                    
#define EVENT_ALARM_LOCALALARM 0x0000011D                      
#define EVENT_IVS_PSRISEDETECTION 0x0000011E                   
#define EVENT_IVS_CROSSFENCEDETECTION 0x0000011F               
#define EVENT_IVS_TRAFFIC_TOLLGATE 0x00000120                  
#define EVENT_IVS_DENSITYDETECTION 0x00000121                  
#define EVENT_IVS_VIDEODIAGNOSIS 0x00000122                    
#define EVENT_IVS_QUEUEDETECTION 0x00000123                    
#define EVENT_IVS_TRAFFIC_VEHICLEINBUSROUTE 0x00000124         
#define EVENT_IVS_TRAFFIC_BACKING 0x00000125                   
#define EVENT_IVS_AUDIO_ABNORMALDETECTION 0x00000126           
#define EVENT_IVS_TRAFFIC_RUNYELLOWLIGHT 0x00000127            
#define EVENT_IVS_CLIMBDETECTION 0x00000128                    
#define EVENT_IVS_LEAVEDETECTION 0x00000129                    
#define EVENT_IVS_TRAFFIC_PARKINGONYELLOWBOX 0x0000012A        
#define EVENT_IVS_TRAFFIC_PARKINGSPACEPARKING 0x0000012B       
#define EVENT_IVS_TRAFFIC_PARKINGSPACENOPARKING 0x0000012C     
#define EVENT_IVS_TRAFFIC_PEDESTRAIN 0x0000012D                
#define EVENT_IVS_TRAFFIC_THROW 0x0000012E                     
#define EVENT_IVS_TRAFFIC_IDLE 0x0000012F                      
#define EVENT_ALARM_VEHICLEACC 0x00000130                      
#define EVENT_ALARM_VEHICLE_TURNOVER 0x00000131                
#define EVENT_ALARM_VEHICLE_COLLISION 0x00000132               
#define EVENT_ALARM_VEHICLE_LARGE_ANGLE 0x00000133             
#define EVENT_IVS_TRAFFIC_PARKINGSPACEOVERLINE 0x00000134      
#define EVENT_IVS_MULTISCENESWITCH 0x00000135                  
#define EVENT_IVS_TRAFFIC_RESTRICTED_PLATE 0x00000136          
#define EVENT_IVS_TRAFFIC_OVERSTOPLINE 0x00000137              
#define EVENT_IVS_TRAFFIC_WITHOUT_SAFEBELT 0x00000138          
#define EVENT_IVS_TRAFFIC_DRIVER_SMOKING 0x00000139            
#define EVENT_IVS_TRAFFIC_DRIVER_CALLING 0x0000013A            
#define EVENT_IVS_TRAFFIC_PEDESTRAINRUNREDLIGHT 0x0000013B     
#define EVENT_IVS_TRAFFIC_PASSNOTINORDER 0x0000013C            
#define EVENT_IVS_OBJECT_DETECTION 0x00000141                  
#define EVENT_ALARM_ANALOGALARM 0x00000150                     
#define EVENT_IVS_CROSSLINEDETECTION_EX 0x00000151             
#define EVENT_ALARM_COMMON 0x00000152                          
#define EVENT_ALARM_VIDEOBLIND 0x00000153                      
#define EVENT_ALARM_VIDEOLOSS 0x00000154                       
#define EVENT_IVS_GETOUTBEDDETECTION 0x00000155                
#define EVENT_IVS_PATROLDETECTION 0x00000156                   
#define EVENT_IVS_ONDUTYDETECTION 0x00000157                   
#define EVENT_IVS_NOANSWERCALL 0x00000158                      
#define EVENT_IVS_STORAGENOTEXIST 0x00000159                   
#define EVENT_IVS_STORAGELOWSPACE 0x0000015A                   
#define EVENT_IVS_STORAGEFAILURE 0x0000015B                    
#define EVENT_IVS_PROFILEALARMTRANSMIT 0x0000015C              
#define EVENT_IVS_VIDEOSTATIC 0x0000015D                       
#define EVENT_IVS_VIDEOTIMING 0x0000015E                       
#define EVENT_IVS_HEATMAP 0x0000015F                           
#define EVENT_IVS_CITIZENIDCARD 0x00000160                     
#define EVENT_IVS_PICINFO 0x00000161                           
#define EVENT_IVS_NETPLAYCHECK 0x00000162                      
#define EVENT_IVS_TRAFFIC_JAM_FORBID_INTO 0x00000163           
#define EVENT_IVS_SNAPBYTIME 0x00000164                        
#define EVENT_IVS_PTZ_PRESET 0x00000165                        
#define EVENT_IVS_RFID_INFO 0x00000166                         
#define EVENT_IVS_STANDUPDETECTION 0x00000167                  
#define EVENT_IVS_QSYTRAFFICCARWEIGHT 0x00000168               
#define EVENT_IVS_TRAFFIC_COMPAREPLATE 0x00000169              
#define EVENT_IVS_SHOOTINGSCORERECOGNITION 0x0000016A          
#define EVENT_IVS_TRAFFIC_FCC 0x0000016B                       
#define EVENT_IVS_TRAFFIC_TRANSFINITE 0x0000016C               
#define EVENT_IVS_SCENE_CHANGE 0x0000016D                      
#define EVENT_IVS_LETRACK 0x0000016E                           
#define EVENT_IVS_OBJECT_ACTION 0x0000016F                     
#define EVENT_IVS_TRAFFIC_ANALYSE_PRESNAP 0x00000170           
#define EVENT_ALARM_EQSTATE 0x00000171                         
#define EVENT_IVS_ALARM_IPC 0x00000172                         
#define EVENT_IVS_POS_RECORD 0x00000173                        
#define EVENT_IVS_NEAR_DISTANCE_DETECTION 0x00000174           
#define EVENT_IVS_OBJECTSTRUCTLIZE_PERSON 0x00000175           
#define EVENT_IVS_OBJECTSTRUCTLIZE_NONMOTOR 0x00000176         
#define EVENT_IVS_TUMBLE_DETECTION 0x00000177                  
#define EVENT_IVS_TRAFFIC_ALL 0x000001FF                       
#define EVENT_IVS_VIDEOANALYSE 0x00000200                      
#define EVENT_IVS_LINKSD 0x00000201                            
#define EVENT_IVS_VEHICLEANALYSE 0x00000202                    
#define EVENT_IVS_FLOWRATE 0x00000203                          
#define EVENT_IVS_ACCESS_CTL 0x00000204                        
#define EVENT_IVS_SNAPMANUAL 0x00000205                        
#define EVENT_IVS_TRAFFIC_ELETAGINFO 0x00000206                
#define EVENT_IVS_TRAFFIC_TIREDPHYSIOLOGICAL 0x00000207        
#define EVENT_IVS_TRAFFIC_BUSSHARPTURN 0x00000208              
#define EVENT_IVS_CITIZEN_PICTURE_COMPARE 0x00000209           
#define EVENT_IVS_TRAFFIC_TIREDLOWERHEAD 0x0000020A            
#define EVENT_IVS_TRAFFIC_DRIVERLOOKAROUND 0x0000020B          
#define EVENT_IVS_TRAFFIC_DRIVERLEAVEPOST 0x0000020C           
#define EVENT_IVS_MAN_STAND_DETECTION 0x0000020D               
#define EVENT_IVS_MAN_NUM_DETECTION 0x0000020E                 
#define EVENT_IVS_STEREO_NUMBERSTAT 0x0000020F                 
#define EVENT_IVS_TRAFFIC_DRIVERYAWN 0x00000210                
#define EVENT_IVS_NUMBERSTAT_PLAN 0x00000211                   
#define EVENT_IVS_HEATMAP_PLAN 0x00000212                      
#define EVENT_IVS_CALLNOANSWERED 0x00000213                    
#define EVENT_IVS_IGNOREINVITE 0x00000214                      
#define EVENT_IVS_HUMANTRAIT 0x00000215                        
#define EVENT_ALARM_LE_HEADDETECTION 0x00000216                
#define EVENT_IVS_FACEANALYSIS 0x00000217                      
#define EVENT_IVS_TRAFFIC_TURNLEFTAFTERSTRAIGHT 0x00000218     
#define EVENT_IVS_TRAFFIC_BIGBENDSMALLTURN 0x00000219          
#define EVENT_IVS_ROAD_CONSTRUCTION 0x0000021A                 
#define EVENT_IVS_ROAD_BLOCK 0x0000021B                        
#define EVENT_IVS_TRAFFIC_QUEUEJUMP 0x0000021C                 
#define EVENT_IVS_VEHICLE_SUSPICIOUSCAR 0x0000021D             
#define EVENT_IVS_TRAFFIC_TURNRIGHTAFTERSTRAIGHT 0x0000021E    
#define EVENT_IVS_TRAFFIC_TURNRIGHTAFTERPEOPLE 0x0000021F      
#define EVENT_IVS_INSTALL_CARDREADER 0x00000220                
#define EVENT_ALARM_YALE_DROPBOX_BADTOKEN 0x00000221           
#define EVENT_IVS_ACC_OFF_SNAP 0x00000222                      
#define EVENI_IVS_XRAY_DETECTION 0x00000223                    
#define EVENT_IVS_NOTCLEARCAR 0x00000224                       
#define EVENT_IVS_SOSALEART 0x00000225                         
#define EVENT_IVS_OVERLOAD 0x00000226                          
#define EVENT_IVS_NONWORKINGTIME 0x00000227                    
#define EVENT_IVS_TRAFFIC_HIGH_BEAM 0x00000228                 
#define EVENT_IVS_TRAFFIC_TRUCKFORBID 0x00000229               
#define EVENT_IVS_DRIVINGWITHOUTCARD 0x0000022A                
#define EVENT_IVS_HIGHSPEED 0x0000022B                         
#define EVENT_IVS_CROWDDETECTION 0x0000022C                    
#define EVENT_IVS_TRAFFIC_CARDISTANCESHORT 0x0000022D          
#define EVENT_IVS_PEDESTRIAN_JUNCTION 0x00000230               
#define EVENT_IVS_VEHICLE_RECOGNITION 0x00000231               
#define EVENT_IVS_PASS_CHANGE 0x00000232                       
#define EVENT_IVS_TRAFFIC_PARKING_SPACEDETECTION 0x00000233    
#define EVENT_IVS_TRAFFIC_WAITINGAREA 0x00000234               
#define EVENT_IVS_TRAFFIC_BAN 0x00000235                       
#define EVENT_IVS_POS_EXCHANGE 0x00000236                      
#define EVENT_IVS_STEREO_FIGHTDETECTION 0x00000237             
#define EVENT_IVS_STEREO_DISTANCE_DETECTION 0x00000238         
#define EVENT_IVS_STEREO_STEREOFALLDETECTION 0x00000239        
#define EVENT_IVS_STEREO_STAYDETECTION 0x0000023A              
#define EVENT_IVS_BANNER_DETECTION 0x0000023B                  
#define EVENT_IVS_NORMAL_FIGHTDETECTION 0x0000023C             
#define EVENT_IVS_ELEVATOR_ABNORMAL 0x0000023D                 
#define EVENT_IVS_NONMOTORDETECT 0x0000023E                    
#define EVENT_IVS_VEHICLEDETECT 0x0000023F                     
#define EVENT_IVS_TRAFFIC_PARKING_B 0x00000240                 
#define EVENT_IVS_TRAFFIC_PARKING_C 0x00000241                 
#define EVENT_IVS_TRAFFIC_PARKING_D 0x00000242                 
#define EVENT_IVSS_FACEATTRIBUTE 0x00000243                    
#define EVENT_IVSS_FACECOMPARE 0x00000244                      
#define EVENT_IVS_FIREWARNING 0x00000245                       
#define EVENT_IVS_SHOPPRESENCE 0x00000246                      
#define EVENT_IVS_WASTEDUMPED 0x00000247                       
#define EVENT_IVS_SPILLEDMATERIAL_DETECTION 0x00000248         
#define EVENT_IVS_STEREO_MANNUM_DETECTION 0x00000249           
#define EVENT_IVS_DISTANCE_DETECTION 0x0000024A                
#define EVENT_IVS_TRAFFIC_NONMOTOR_OVERLOAD 0x0000024B         
#define EVENT_IVS_TRAFFIC_NONMOTOR_WITHOUTSAFEHAT 0x0000024C   
#define EVENT_IVS_TRAFFIC_JAM_STOP_ON_ZEBRACROSSING 0x0000024D 
#define EVENT_IVS_FLOWBUSINESS 0x0000024E                      
#define EVENT_IVS_CITY_MOTORPARKING 0x0000024F                 
#define EVENT_IVS_CITY_NONMOTORPARKING 0x00000250              
#define EVENT_IVS_LANEDEPARTURE_WARNNING 0X00000251            
#define EVENT_IVS_FORWARDCOLLISION_WARNNING 0x00000252         
#define EVENT_IVS_MATERIALSSTAY 0x00000253                     
#define EVENT_IVS_TRAFFIC_NONMOTOR_HOLDUMBRELLA 0x00000254     
#define EVENT_IVS_JABLOTRON_ALARM 0x00000255                   
#define EVENT_IVS_VIDEOUNFOCUS_ALARM 0x00000256                
#define EVENT_IVS_FLOATINGOBJECT_DETECTION 0x00000257          
#define EVENT_IVS_SHIP_DETECTION 0x00000258                    
#define EVENT_IVS_AIRPLANE_DETECTION 0x00000259                
#define EVENT_IVS_PHONECALL_DETECT 0x0000025A                  
#define EVENT_IVS_SMOKING_DETECT 0x0000025B                    
#define EVENT_IVS_RADAR_SPEED_LIMIT_ALARM 0x0000025C           
#define EVENT_IVS_WATER_LEVEL_DETECTION 0x0000025D             
#define EVENT_IVS_HOLD_UMBRELLA 0x0000025E                     
#define EVENT_IVS_GARBAGE_EXPOSURE 0x0000025F                  
#define EVENT_IVS_DUSTBIN_OVER_FLOW 0x00000260                 
#define EVENT_IVS_DOOR_FRONT_DIRTY 0x00000261                  
#define EVENT_IVS_QUEUESTAY_DETECTION 0X00000262               
#define EVENT_IVS_QUEUENUM_DETECTION 0X00000263                
#define EVENT_IVS_GENERATEGRAPH_DETECTION 0X00000264           
#define EVENT_IVS_TRAFFIC_PARKING_MANUAL 0x00000265            
#define EVENT_IVS_HELMET_DETECTION 0x00000266                  
#define EVENT_IVS_DEPOSIT_DETECTION 0x00000267                 
#define EVENT_IVS_HOTSPOT_WARNING 0x00000268                   
#define EVENT_IVS_WEIGHING_PLATFORM_DETECTION 0x00000269       
#define EVENT_IVS_CLASSROOM_BEHAVIOR 0x0000026A                
#define EVENT_IVS_VEHICLE_DISTANCE_NEAR 0x0000026B             
#define EVENT_IVS_TRAFFIC_DRIVER_ABNORMAL 0x0000026C           
#define EVENT_IVS_TRAFFIC_DRIVER_CHANGE 0x0000026D             
#define EVENT_IVS_WORKCLOTHES_DETECT 0x0000026E                
#define EVENT_IVS_SECURITYGATE_PERSONALARM 0x0000026F          
#define EVENT_IVS_STAY_ALONE_DETECTION 0x00000270              
#define EVENT_IVS_TRAFFIC_ROAD_BLOCK 0x00000271                
#define EVENT_IVS_TRAFFIC_ROAD_CONSTRUCTION 0x00000272         
#define EVENT_IVS_XRAY_DETECT_BYOBJECT 0x00000273              
#define EVENT_IVS_WORKSTATDETECTION 0x00000274                 
#define EVENT_IVS_INFRAREDBLOCK 0x00000275                     
#define EVENT_IVS_FEATURE_ABSTRACT 0x00000276                  
#define EVENT_IVS_INTELLI_SHELF 0x00000277                     
#define EVENT_IVS_PANORAMA_SHOT 0x00000278                     
#define EVENT_ALARM_SMARTMOTION_HUMAN 0x00000279               
#define EVENT_ALARM_SMARTMOTION_VEHICLE 0x0000027A             
#define EVENT_IVS_CAR_DRIVING_IN_OUT 0x0000027B                
#define EVENT_IVS_PARKINGSPACE_STATUS 0x0000027C               
#define EVENT_IVS_VIOLENT_THROW_DETECTION 0x0000027D           
#define EVENT_IVS_TRAMCARSECTIONS_DETECTION 0x0000027E         
#define EVENT_IVS_ALARM_BOX_ALARM 0x0000027F                   
#define EVENT_IVS_FACE_COMPARISION 0x00000280                  
#define EVENT_IVS_FACEBODY_DETECT 0x00000281                   
#define EVENT_IVS_FACEBODY_ANALYSE 0x00000282                  
#define EVENT_IVS_GASSTATION_VEHICLE_DETECT 0x00000283         
#define EVENT_IVS_CONGESTION_DETECTION 0x00000284              
#define EVENT_IVS_VEHICLELIMIT_DETECTION 0x00000285            
#define EVENT_IVS_ANIMAL_DETECTION 0x00000286                  
#define EVENT_IVS_SHOP_WINDOW_POST 0x00000287                  
#define EVENT_IVS_SHOP_SIGN_ABNORMAL 0x00000288                
#define EVENT_IVS_BREED_DETECTION 0x00000289                   
#define EVENT_IVS_AIRPORT_VEHICLE_DETECT 0x0000028A            
#define EVENT_IVS_PIG_TEMPERATURE_DETECT 0x0000028B            
#define EVENT_IVS_MAN_CAR_COEXISTANCE 0x0000028C             
#define EVENT_IVS_HIGH_TOSS_DETECT 0x0000028D                
#define EVENT_IVS_ELECTRIC_GLOVE_DETECT 0x0000028E           
#define EVENT_IVS_ELECTRIC_LADDER_DETECT 0x0000028F          
#define EVENT_IVS_ELECTRIC_CURTAIN_DETECT 0x00000290         
#define EVENT_IVS_ELECTRIC_FENCE_DETECT 0x00000291           
#define EVENT_IVS_ELECTRIC_SIGNBOARD_DETECT 0x00000292       
#define EVENT_IVS_ELECTRIC_BELT_DETECT 0x00000293            
#define EVENT_IVS_RADAR_LINE_DETECTION 0x00000294            
#define EVENT_IVS_RADAR_REGION_DETECTION 0x00000295          
#define EVENT_IVS_AUDIO_INTENSITY 0x00000296                 
#define EVENT_IVS_PARKING_LOT_STATUS_DETECTION 0x00000297    
#define EVENT_IVS_VEHICLE_COMPARE 0x00000298                 
#define EVENT_IVS_DREGS_UNCOVERED 0x00000299                 
#define EVENT_IVS_WALK_DETECTION 0x0000029A                  
#define EVENT_IVS_BACK_TO_DETECTION 0x0000029B               
#define EVENT_IVS_WRITE_ON_THE_BOARD_DETECTION 0x0000029C    
#define EVENT_IVS_SMART_KITCHEN_CLOTHES_DETECTION 0x0000029D 
#define EVENT_IVS_SLEEP_DETECT 0x0000029E                    
#define EVENT_IVS_WALK_AROUND_DETECT 0x0000029F              
#define EVENT_IVS_PLAY_MOBILEPHONE 0x00000300                
#define EVENT_IVS_FINANCE_CONTRABAND_DETECT 0x00000301       
#define EVENT_IVS_FINANCE_CASH_TRANSACTION 0x00000302        
#define EVENT_IVS_ANATOMY_TEMP_DETECT 0x00000303               
#define EVENT_IVS_ACTIVITY_ANALYSE 0x00000304                  
#define EVENT_IVS_DOOR_STATUS 0x00000305                       
#define EVENT_IVS_DHOP_CUSTOM 0x00000306                       
#define EVENT_IVS_DHOP_CUSTOM_ONCE 0x00000307                  
#define EVENT_IVS_FOG_DETECTION 0x00000308                     
#define EVENT_IVS_TRAFFIC_VEHICLE_BC 0x00000309                
#define EVENT_IVS_TRAFFIC_MOTOR_OVERLOAD 0x0000030A            
#define EVENT_IVS_TRAFFIC_PLATE_OCCLUSION 0x0000030B           
#define EVENT_IVS_NONMOTOR_ENTRYING 0x0000030C                 
#define EVENT_IVS_WATER_STAGE_MONITOR 0x0000030D               
#define EVENT_IVS_TRAFFIC_ROAD_ALERT 0x0000030E                
#define EVENT_IVS_BREAK_RULE_BUILDING_DETECTION 0x0000030F     
#define EVENT_IVS_TRAFFIC_NONMOTOR_RUN_REDLIGHT 0x00000310     
#define EVENT_IVS_TRAFFIC_VEHICLE_IN_EMERGENCY_LANE 0x00000311 
#define EVENT_IVS_PRAM_DETECTION 0x00000312                    
#define EVENT_IVS_STEREO_PRAM_DETECTION 0x00000313             
#define EVENT_IVS_BIG_BAGGAGE_DETECTION 0x00000314             
#define EVENT_IVS_STEREO_BIG_BAGGAGE_DETECTION 0x00000315      
#define EVENT_IVS_TICKET_EVADE_DETECTION 0x00000316            
#define EVENT_IVS_STEREO_TICKET_EVADE_DETECTION 0x00000317     
#define EVENT_IVS_POWERLINE_FOREIGN_DETECITON 0x00000318       
#define EVENT_IVS_TRAFFIC_OVER_GUIDE_LINE 0x00000319           
#define EVENT_IVS_TRAFFIC_CAR_MEASUREMENT 0x00000320           
#define EVENT_IVS_TRAFFIC_WRONG_TURN_LIGHT 0x00000321          
#define EVENT_IVS_TRAFFIC_REAREND_ACCIDENT 0x00000322          
#define EVENT_IVS_DO_TALK_ACTION 0x00000323                    
#define EVENT_IVS_FIRE_LANE_DETECTION 0x00000324               
#define EVENT_IVS_PARKING_DETECTION_FOR_PRMA 0x00000325        
#define EVENT_IVS_TRAFFIC_JAM_FOR_PRMA 0x00000326              
#define EVENT_IVS_TRAFFIC_ACCIDENT_FOR_PRMA 0x00000327         
#define EVENT_IVS_TRAFFIC_NON_MOTOR_RETROGRADE 0x00000328      
#define EVENT_IVS_TRAFFIC_NON_MOTOR_OVER_STOP_LINE 0x00000329  
#define EVENT_IVS_CAR_DRIVING_IN 0x00000330                    
#define EVENT_IVS_CAR_DRIVING_OUT 0x00000331                   
#define EVENT_IVS_PORTRAIT_DETECTION 0x00000332                
#define EVENT_IVS_TRAFFIC_SPECIAL_VEHICLE_DETECT 0x00000333    
#define EVENT_IVS_TRAFFIC_HEAD_LAMP_OFF 0x00000334             
#define EVENT_IVS_TRAFFIC_NONMOTOR 0x00000335                  
#define EVENT_IVS_TRAFFIC_BOARD 0x00000336                     
#define EVENT_IVS_TRAFFIC_VISIBILITY 0x00000337                
#define EVENT_IVS_TRAFFIC_VEHICLE_CLEANLINESS 0x00000338       
#define EVENT_IVS_TRAFFICFLOW_FOR_PRMA 0x00000339            
#define EVENT_IVS_TRUCKNOTCLEAN_FOR_PRMA 0x0000033A          
#define EVENT_IVS_ROADOCCUPATION_BY_FOREIGNOBJECT 0x0000033B 
#define EVENT_IVS_TRAFFICFLOW_OVER 0x0000033C                
#define EVENT_IVS_GOODS_DETECTION 0x0000033D                 
#define EVENT_IVS_CONVEYORBLOCK_DETECTION 0x0000033E         
#define EVENT_IVS_ANYTHING_DETECT 0x0000033F                 
#define EVENT_IVS_OBJECT_ABNORMAL 0x00000340                 
#define EVENT_IVS_DRIVE_ASSISTANT 0x00000341                        
#define EVENT_IVS_DRIVE_ACTION_ANAYLSE 0x00000342                   
#define EVENT_IVS_DRIVE_HANDSOFF_STEERING_WHEEL 0x00000343          
#define EVENT_IVS_DRIVE_BLIND_SPOT 0x00000344                       
#define EVENT_IVS_ARTICLE_DETECTION 0x00000345                      
#define EVENT_IVS_TRAFFIC_PARKINGSPACE_MANUALSNAP 0x00000346        
#define EVENT_IVS_STREET_SUNCURE 0x00000347                         
#define EVENT_IVS_OUTDOOR_ADVERTISEMENT 0x00000348                  
#define EVENT_IVS_HUDDLE_MATERIAL 0x00000349                        
#define EVENT_IVS_FIRE_LINE_DETECTION 0x0000034A                    
#define EVENT_IVS_OCCUPY_BUS_LANE 0x0000034B                        
#define EVENT_IVS_DISTRESS_DETECTION 0x0000034C                     
#define EVENT_IVS_TRAFFIC_ASSISTANT_WITHOUT_SAFEBELT 0x0000034D     
#define EVENT_IVS_TRAFFIC_SPEED_CHANGE_DETECTION 0x0000034E         
#define EVENT_IVS_FOLLOW_CAR_ALARM 0x0000034F                       
#define EVENT_IVS_CONVEYER_BELT_DETECT 0x00000350                   
#define EVENT_IVS_CONVEYER_BELT_BULK 0x00000351                     
#define EVENT_IVS_CONVEYER_BELT_NONLOAD 0x00000352                  
#define EVENT_IVS_CONVEYER_BELT_RUNOFF 0x00000353                   
#define EVENT_IVS_CONVEYER_BELT_COAL_RATIO 0x00000354               
#define EVENT_IVS_PACKBROKEN_DETECTION 0x00000355                   
#define EVENT_IVS_PACKLAND_DETECTION 0x00000356                     
#define EVENT_IVS_PACKOPEN_DETECTION 0x00000357                     
#define EVENT_IVS_TRAFFIC_TURN_RIGHT_NO_STOP 0x00000358             
#define EVENT_IVS_TRAFFIC_CROSSING_GUARDRAIL 0x00000359             
#define EVENT_IVS_EMERGENCY 0x0000035A                              
#define EVENT_IVS_TRAFFIC_PARKING_STATISTICS 0x0000035B             
#define EVENT_IVS_HEAT_IMAGING_TEMPER 0x0000035C                    
#define EVENT_IVS_SCALPER_ALARM 0x0000035D                          
#define EVENT_IVS_ROAD_OBSTACLE_DETECTION 0x0000035E                
#define EVENT_IVS_TRAFFIC_BRIGANDAGE_CAR 0x0000035F                 
#define EVENT_IVS_TRAFFIC_COUNTERFEIT_PLATE_CAR 0x00000360          
#define EVENT_IVS_TRAFFIC_FAKE_PLATE_CAR 0x00000361                 
#define EVENT_IVS_SEWAGE_DETECTION 0x00000362                       
#define EVENT_IVS_WATERCOLOR_DETECTION 0x00000363                   
#define EVENT_IVS_TRAFFIC_MOTORCYCLE_FORBID 0x00000364              
#define EVENT_IVS_VIDEO_NORMAL_DETECTION 0x00000365                 
#define EVENT_IVS_TRAFFIC_TURN_RIGHT_OVER_LINE 0x00000366           
#define EVENT_IVS_MANUAL_ALARM 0x00000367                           
#define EVENT_IVS_TRAFFIC_DRIVE_ON_LINE 0x00000368                  
#define EVENT_IVS_OBJECT_PLACEMENT_DETECTION 0x00000369             
#define EVENT_IVS_OBJECT_REMOVAL_DETECTION 0x0000036A               
#define EVENT_IVS_FIRE_DOOR_DETECTION 0x0000036B                    
#define EVENT_IVS_FIRE_EXTINGUISHER_DETECTION 0x0000036C            
#define EVENT_IVS_DOOR_NOT_CLOSE 0x0000036D                         
#define EVENT_IVS_VEHICLE_PERIPHERAL_ALARM 0x0000036E               
#define EVENT_IVS_PARKING_LIMIT_DETECTION 0x0000036F                
#define EVENT_IVS_PARKING_STATUS_CHANGE_DETECTION 0x00000370        
#define EVENT_IVS_DIALRECOGNITION 0x00000371                        
#define EVENT_IVS_ELECTRICFAULT_DETECT 0x00000372                   
#define EVENT_IVS_TRASH_WITHOUT_COVER_DETECTION 0x00000373          
#define EVENT_IVS_SECURITY_INSPECTOR_LOOKAROUND 0x00000374          
#define EVENT_IVS_SECURITY_INSPECTOR_LOWERHEAD 0x00000375           
#define EVENT_IVS_SECURITY_INSPECTOR_TIRED 0x00000376               
#define EVENT_IVS_SECURITY_INSPECTOR_YAWN 0x00000377                
#define EVENT_IVS_AIPICK_DETECT 0x00000378                          
#define EVENT_IVS_TRAFFIC_LIGHT_FAULT 0x00000379                    
#define EVENT_IVS_TRAFFIC_LANE_INDICATOR_FAULT 0x0000037A           
#define EVENT_IVS_WATER_SPEED_DETECTION 0x0000037B                  
#define EVENT_IVS_TRAFFIC_PARKING_BACKING 0x0000037C                
#define EVENT_IVS_VALVE_ABNORMAL 0x0000037D                         
#define EVENT_IVS_DISCHARGE_PORT_ABNORMAL 0x0000037E                
#define EVENT_IVS_TRAFFIC_MOTOR_STRICTLY_PROHIBIT_MANNED 0x0000037F 
#define EVENT_IVS_BARELAND_DETECTION 0x00000380                     
#define EVENT_IVS_CONSUMPTION_EVENT 0x00000381                      
#define EVENT_IVS_TOUCH_ELECTROSTATIC_BALL 0x00000382               
#define EVENT_IVS_OXYGEN_CYLINDER_DETECTION 0x00000383              
#define EVENT_IVS_XRAY_UNPACKING_CHECK 0x00000384                   
#define EVENT_IVS_GENERAL_ATTITUDE_DETECTION 0x00000385             
#define EVENT_IVS_SNAP_TASK 0x00000386                              
#define EVENT_IVS_TRAFFIC_CHANGE_LANE_CONTINUES 0x00000387          
#define EVENT_IVS_SPRAY_DETECT 0x00000388                           
#define EVENT_IVS_SILICON_FIRE_DETECTION 0x00000389                 
#define EVENT_IVS_TRAFFIC_PARKING_ON_RIGHT_TURN_ROUTE 0x0000038A    
#define EVENT_IVS_PERSONNEL_COEXISTENCE 0x0000038B                  
#define EVENT_IVS_GENEAL_ATTITUDE 0x0000038C                        
#define EVENT_IVS_CASH_BOX_STATE 0x0000038D                         
#define EVENT_IVS_LEAKAGE_DETECTION 0x0000038E                      
#define EVENT_IVS_LADLE_NO_DETECTION 0x0000038F                     
#define EVENT_IVS_FISHING_DETECTION 0x00000390                      
#define EVENT_IVS_ALARM_ACCESSORY 0x00000391                        
#define EVENT_IVS_WIRELESS_DEV_LOWPOWER 0x00000392                  
#define EVENT_IVS_SENSOR_ABNORMAL 0x00000393                        
#define EVENT_IVS_MODULE_LOST 0x00000394                            
#define EVENT_IVS_CROWD_LEVEL_DETECTION 0x00000395                  
#define EVENT_IVS_REGION_DEFENSE_DETECTION 0x00000396               
#define EVENT_IVS_DUSTBIN_DETECTION 0x00000397                      
#define EVENT_IVS_DIALRECOGNITION_EX 0x00000398                     
#define EVENT_IVS_OCR_DETECTION 0x00000399                          
#define EVENT_IVS_ROAD_CONDITIONS_DETECTION 0x0000039A              
#define EVENT_IVS_NEAR_OBJECT_DETECT 0x0000039B                     
#define EVENT_IVS_OBJECT_NUM_DETECTION 0x0000039C                   
#define EVENT_IVS_OPEN_INTELLI 0x0000039D                           
#define EVENT_IVS_CRANE_LOAD_STAY_DETECTION 0x0000039E              
#define EVENT_IVS_TRAFFIC_DRIVER_NO_BELT 0x00000400                 
#define EVENT_IVS_RIDING_MOTOR_CYCLE 0x00000401                     
#define EVENT_IVS_CONVEYOR_ARTICLE_TYPE 0x00000402                  
#define EVENT_IVS_BLIND_ALARM 0x00000403                
#define EVENT_IVS_TRAFFIC_SPEED_DROP_SHARPLY 0x00000404 
#define EVENT_IVS_GESTURE_DETECTION 0x00000405          
#define EVENT_IVS_HEAD_LIFT_DETECTION 0x00000406        
#define EVENT_IVS_DRAINING_DETECTION 0x00000407         
#define EVENT_IVS_TRAFFIC_CROSSING_SPEEDY 0x00000408        
#define EVENT_IVS_TRAFFIC_LARGECAR_NO_STOP 0x00000409       
#define EVENT_IVS_TRAFFIC_OVERTAKE_ONRIGHT 0x0000040A       
#define EVENT_IVS_TRAFFIC_TRUCK_OCCUPIED 0x0000040B         
#define EVENT_IVS_TRAFFIC_SMALL_DISPLACEMENT 0x0000040C     
#define EVENT_IVS_GREEN_BELT 0x0000040D                     
#define EVENT_IVS_ROAD_DAMAGE 0x0000040E                    
#define EVENT_IVS_TRAFFIC_SERPENTINE_CHANGE_LANE 0x0000040F 
#define EVENT_IVS_PERSON_TRANS_DETECTION 0x00000410         
#define EVENT_IVS_HUMAN_ANIMAL_COEXISTENCE 0x00000411       
#define EVENT_IVS_TANK_CAPACITY_DETECTION 0x00000412        
#define EVENT_IVS_TANK_DUMPING_DETECTION 0x00000413         
#define EVENT_IVS_TANK_OVERFLOW_DETECTION 0x00000414        
#define EVENT_IVS_DUSTBIN_RETREAT 0x00000416                
#define EVENT_IVS_SCRAPSTEEL_DETECT 0x00000417              
#define EVENT_IVS_SIGNAL_LIGHT_ON_DETECTION 0x00000418          
#define EVENT_IVS_SIGNAL_LIGHT_FLASHYELLOW_DETECTION 0x00000419 
#define EVENT_IVS_SIGNAL_LIGHT_NOBRIGHT_DETECTION 0x0000041A    
#define EVENT_IVS_SIGNAL_LIGHT_BLOCKING_DETECTION 0x0000041B    
#define EVENT_IVS_SIGNAL_LIGHT_ALWAYSON_DETECTION 0x0000041C    
#define EVENT_IVS_LEDSCREEN_NOTLIGHTUP_DETECTION 0x0000041D     
#define EVENT_IVS_SIGNAL_LIGHTOFF_DETECTION 0x0000041E          
#define EVENT_IVS_PIC_COMPARE_DETECTION 0x0000041F              
#define EVENT_IVS_CHANGE_DETECTION 0x00000420                   
#define EVENT_IVS_LINK_AGE_RADAR_ALARM 0x00000421               
#define EVENT_IVS_VEHICLE_STATE 0x00000422                      
#define EVENT_IVS_PASS_WINDOW_DELIVERY 0x00000423               
#define EVENT_IVS_DOOR_STATE_DETECTION 0x00000424               
#define EVENT_IVS_WASTE_MIXED_INVEST 0x00000425                 
#define EVENT_IVS_UNBROKEN_TRASHBAG 0x00000426                  
#define EVENT_IVS_PERSON_CARRY_TRASHBAG 0x00000427              
#define EVENT_IVS_UNATTENDED_DETENTION 0x00000428               
#define EVENT_IVS_DROP_DETECTION 0x00000429                     
#define EVENT_IVS_TEMPERATURE_ALARM 0x0000042A                  
#define EVENT_IVS_HUMIDITY_ALARM 0x0000042B                     
#define EVENT_IVS_POWER_SWITCHER_ALARM 0x0000042C               
#define EVENT_IVS_GAS_TANK_DETECTION 0x0000042D                 
#define EVENT_IVS_TRAFFIC_OCCUPYING_THEPATH 0x0000042E          
#define EVENT_IVS_ILLEGAL_CARRIAGE 0x0000042F                   
#define EVENT_IVS_SILICON_FIREPUTTER_DETECTION 0x00000430       
#define EVENT_IVS_ALARM_METHANE_ALARM 0x00000431                
#define EVENT_IVS_ALARM_TORPEDO_DETECT 0x00000432               
#define EVENT_IVS_FINANCIAL_CABINET_ALARM_EVENT 0x00000433      
#define EVENT_IVS_SCRAPSTEEL_DANGER_DETECT 0x00000434           
#define EVENT_IVS_TRAFFIC_RUNASTOP_SIGN 0x00000435              
#define EVENT_IVS_IRCUT_MODESWITCH_ALARM_EVENT 0x00000436       
#define EVENT_IVS_TRAFFIC_VEHICLE_OVERLOAD 0x00000437           
#define EVENT_IVS_REMOTE_APPROVAL_ALARM 0x00000438              
#define EVENT_IVS_ANTI_COUNTERFEIT 0x00000439                   
#define EVENT_IVS_TRAFFIC_SPEED_DIFFPREWARNING 0x0000043A       
#define EVENT_IVS_TRAFFIC_DRIVER_IDENTIFIED 0x0000043B          
#define EVENT_IVS_TRAFFIC_QUEUE_OVERFLOW 0x0000043C             
#define EVENT_IVS_TRAFFIC_QUEUE_TIMEOUT 0x0000043D              
#define EVENT_IVS_RAILING_PASS_DETECTION 0x0000043E             
#define EVENT_IVS_MULTI_MAN_NUM_DETECTION 0x0000043F            
#define EVENT_IVS_OBJECT_QUANTITY_DETECTION 0x00000440          
#define EVENT_IVS_USERMANAGER_FOR_TWSDK 0x00000441              
#define EVENT_IVS_DRIVE_ASSISTANT_ALARM 0x00000442              
#define EVENT_IVS_CROSSLINE_STAT 0x00000443                     
#define EVENT_IVS_REGIONNUM_STAT 0x00000444                     
#define EVENT_IVS_FISH_STATE_DETECTION 0x00000445               
#define EVENT_IVS_CONVEYOR_NTH_TO_STH_DETECTION 0x00000446      
#define EVENT_IVS_POSITION_SNAP 0x00000447                      
#define EVENT_IVS_DRIVER_MISMATCH_CERTIFICATE 0x00000448        
#define EVENT_IVS_DRIVER_MISMATCH_VEHICLE 0x00000449            
#define EVENT_IVS_CERTIFICATE_MISMATCH_VEHICLE 0x0000044A       
#define EVENI_IVS_XRAY_DETECT_PACKAGE 0x0000044B                
#define EVENT_IVS_CONVEYOR_STH_TO_NTH_DETECTION 0x0000044C      
#define EVENT_IVS_CO_LOW_ALARM 0x0000044D                       
#define EVENT_IVS_CO_HIGH_ALARM 0x0000044E                      
#define EVENT_IVS_TIMECHANGE_FOR_TWSDK 0x0000044F               
#define EVENT_IVS_CIGARETTE_CASE_DETECTION 0x00000450           
#define EVENT_IVS_CONVEYOR_BELT_STATUS 0x00000451               
#define EVENT_IVS_HOSPITAL_TALK_CONTROL 0x00000452              
#define EVENT_IVS_PASSENGER_FLOW_ALARM 0x00000453               
#define EVENT_IVS_SCHOOL_BUS_SWIPE_CARD 0x00000454              
#define EVENT_IVS_COLD_SPOT_WARNING 0x00000455                  
#define EVENT_IVS_TRAFFIC_PLATE_ABNORMAL 0x00000456             
#define EVENT_IVS_TRAFFIC_ACCELERATION_RAPID 0x00000457         
#define EVENT_IVS_TRAFFIC_TURN_SHARP 0x00000458                 
#define EVENT_IVS_GARBAGE_PLASTICBAG 0x00000459                 
#define EVENT_IVS_DOOR_STATUS_FOR_BOX 0x0000045A                
#define EVENT_IVS_COLLISION_CONFLICT 0x0000045B                 
#define EVENT_IVS_PHOTOGRAPH_DETECTION 0x0000045C               
#define EVENT_IVS_REFUELING_GUN_PERSON 0x0000045D               
#define EVENT_HY_FIRE_DETECTION 0x01000001            
#define EVENT_HY_SMOG_DETECTION 0x01000002            
#define EVENT_HY_INFIRE_PASSAGE_DETECTION 0x01000003  
#define EVENT_HY_OUTFIRE_PASSAGE_DETECTION 0x01000004 
#define EVENT_HY_MAN_LEAVING_DETECTION 0x01000005     
#define STOR_POINT_READ_WRITE 0x00001001 
#define STOR_POINT_READ_ONLY 0x00001002  
#define STOR_POINT_REDUNDANT 0x00001003  
#define STOR_POINT_BACKUP 0x00001004     
#define STOR_POINT_DRAW_FRAME 0x00001005 
#define STOR_POINT_NAS_FTP 0x00001006    
#define STOR_POINT_NAS_NFS 0x00001007    
#define STOR_POINT_NAS_SMB 0x00001008    
#define STOR_POINT_NAS_ISCSI 0x00001009  
#define STOR_POINT_NAS_CLOUD 0x0000100A  
#define FLOWSTAT_ADDR_NAME 16 
#define DH_TARFFIC_NAME_LEN 16
#define DH_CREATE_TIME_LEN 32
#define DH_AUTHORITY_NUM 16
#define _EC(x) (0x80000000 | x)
#define NET_NOERROR 0                       
#define NET_ERROR -1                        
#define NET_SYSTEM_ERROR _EC(1)             
#define NET_NETWORK_ERROR _EC(2)            
#define NET_DEV_VER_NOMATCH _EC(3)          
#define NET_INVALID_HANDLE _EC(4)           
#define NET_OPEN_CHANNEL_ERROR _EC(5)       
#define NET_CLOSE_CHANNEL_ERROR _EC(6)      
#define NET_ILLEGAL_PARAM _EC(7)            
#define NET_SDK_INIT_ERROR _EC(8)           
#define NET_SDK_UNINIT_ERROR _EC(9)         
#define NET_RENDER_OPEN_ERROR _EC(10)       
#define NET_DEC_OPEN_ERROR _EC(11)          
#define NET_DEC_CLOSE_ERROR _EC(12)         
#define NET_MULTIPLAY_NOCHANNEL _EC(13)     
#define NET_TALK_INIT_ERROR _EC(14)         
#define NET_TALK_NOT_INIT _EC(15)           
#define NET_TALK_SENDDATA_ERROR _EC(16)     
#define NET_REAL_ALREADY_SAVING _EC(17)     
#define NET_NOT_SAVING _EC(18)              
#define NET_OPEN_FILE_ERROR _EC(19)         
#define NET_PTZ_SET_TIMER_ERROR _EC(20)     
#define NET_RETURN_DATA_ERROR _EC(21)       
#define NET_INSUFFICIENT_BUFFER _EC(22)     
#define NET_NOT_SUPPORTED _EC(23)           
#define NET_NO_RECORD_FOUND _EC(24)         
#define NET_NOT_AUTHORIZED _EC(25)          
#define NET_NOT_NOW _EC(26)                 
#define NET_NO_TALK_CHANNEL _EC(27)         
#define NET_NO_AUDIO _EC(28)                
#define NET_NO_INIT _EC(29)                 
#define NET_DOWNLOAD_END _EC(30)            
#define NET_EMPTY_LIST _EC(31)              
#define NET_ERROR_GETCFG_SYSATTR _EC(32)    
#define NET_ERROR_GETCFG_SERIAL _EC(33)     
#define NET_ERROR_GETCFG_GENERAL _EC(34)    
#define NET_ERROR_GETCFG_DSPCAP _EC(35)     
#define NET_ERROR_GETCFG_NETCFG _EC(36)     
#define NET_ERROR_GETCFG_CHANNAME _EC(37)   
#define NET_ERROR_GETCFG_VIDEO _EC(38)      
#define NET_ERROR_GETCFG_RECORD _EC(39)     
#define NET_ERROR_GETCFG_PRONAME _EC(40)    
#define NET_ERROR_GETCFG_FUNCNAME _EC(41)   
#define NET_ERROR_GETCFG_485DECODER _EC(42) 
#define NET_ERROR_GETCFG_232COM _EC(43)     
#define NET_ERROR_GETCFG_ALARMIN _EC(44)    
#define NET_ERROR_GETCFG_ALARMDET _EC(45)   
#define NET_ERROR_GETCFG_SYSTIME _EC(46)    
#define NET_ERROR_GETCFG_PREVIEW _EC(47)    
#define NET_ERROR_GETCFG_AUTOMT _EC(48)     
#define NET_ERROR_GETCFG_VIDEOMTRX _EC(49)  
#define NET_ERROR_GETCFG_COVER _EC(50)      
#define NET_ERROR_GETCFG_WATERMAKE _EC(51)  
#define NET_ERROR_GETCFG_MULTICAST _EC(52)  
#define NET_ERROR_SETCFG_GENERAL _EC(55)    
#define NET_ERROR_SETCFG_NETCFG _EC(56)     
#define NET_ERROR_SETCFG_CHANNAME _EC(57)   
#define NET_ERROR_SETCFG_VIDEO _EC(58)      
#define NET_ERROR_SETCFG_RECORD _EC(59)     
#define NET_ERROR_SETCFG_485DECODER _EC(60) 
#define NET_ERROR_SETCFG_232COM _EC(61)     
#define NET_ERROR_SETCFG_ALARMIN _EC(62)    
#define NET_ERROR_SETCFG_ALARMDET _EC(63)   
#define NET_ERROR_SETCFG_SYSTIME _EC(64)    
#define NET_ERROR_SETCFG_PREVIEW _EC(65)    
#define NET_ERROR_SETCFG_AUTOMT _EC(66)     
#define NET_ERROR_SETCFG_VIDEOMTRX _EC(67)  
#define NET_ERROR_SETCFG_COVER _EC(68)      
#define NET_ERROR_SETCFG_WATERMAKE _EC(69)  
#define NET_ERROR_SETCFG_WLAN _EC(70)       
#define NET_ERROR_SETCFG_WLANDEV _EC(71)    
#define NET_ERROR_SETCFG_REGISTER _EC(72)   
#define NET_ERROR_SETCFG_CAMERA _EC(73)     
#define NET_ERROR_SETCFG_INFRARED _EC(74)   
#define NET_ERROR_SETCFG_SOUNDALARM _EC(75) 
#define NET_ERROR_SETCFG_STORAGE _EC(76)    
#define NET_AUDIOENCODE_NOTINIT _EC(77)     
#define NET_DATA_TOOLONGH _EC(78)           
#define NET_UNSUPPORTED _EC(79)             
#define NET_DEVICE_BUSY _EC(80)             
#define NET_SERVER_STARTED _EC(81)          
#define NET_SERVER_STOPPED _EC(82)          
#define NET_LISTER_INCORRECT_SERIAL _EC(83) 
#define NET_QUERY_DISKINFO_FAILED _EC(84)   
#define NET_ERROR_GETCFG_SESSION _EC(85)    
#define NET_USER_FLASEPWD_TRYTIME _EC(86)   
#define NET_LOGIN_ERROR_PASSWORD_EXPIRED _EC(99)                
#define NET_LOGIN_ERROR_PASSWORD _EC(100)                       
#define NET_LOGIN_ERROR_USER _EC(101)                           
#define NET_LOGIN_ERROR_TIMEOUT _EC(102)                        
#define NET_LOGIN_ERROR_RELOGGIN _EC(103)                       
#define NET_LOGIN_ERROR_LOCKED _EC(104)                         
#define NET_LOGIN_ERROR_BLACKLIST _EC(105)                      
#define NET_LOGIN_ERROR_BUSY _EC(106)                           
#define NET_LOGIN_ERROR_CONNECT _EC(107)                        
#define NET_LOGIN_ERROR_NETWORK _EC(108)                        
#define NET_LOGIN_ERROR_SUBCONNECT _EC(109)                     
#define NET_LOGIN_ERROR_MAXCONNECT _EC(110)                     
#define NET_LOGIN_ERROR_PROTOCOL3_ONLY _EC(111)                 
#define NET_LOGIN_ERROR_UKEY_LOST _EC(112)                      
#define NET_LOGIN_ERROR_NO_AUTHORIZED _EC(113)                  
#define NET_LOGIN_ERROR_USER_OR_PASSOWRD _EC(117)               
#define NET_LOGIN_ERROR_DEVICE_NOT_INIT _EC(118)                
#define NET_LOGIN_ERROR_LIMITED _EC(119)                        
#define NET_RENDER_SOUND_ON_ERROR _EC(120)                      
#define NET_RENDER_SOUND_OFF_ERROR _EC(121)                     
#define NET_RENDER_SET_VOLUME_ERROR _EC(122)                    
#define NET_RENDER_ADJUST_ERROR _EC(123)                        
#define NET_RENDER_PAUSE_ERROR _EC(124)                         
#define NET_RENDER_SNAP_ERROR _EC(125)                          
#define NET_RENDER_STEP_ERROR _EC(126)                          
#define NET_RENDER_FRAMERATE_ERROR _EC(127)                     
#define NET_RENDER_DISPLAYREGION_ERROR _EC(128)                 
#define NET_RENDER_GETOSDTIME_ERROR _EC(129)                    
#define NET_GROUP_EXIST _EC(140)                                
#define NET_GROUP_NOEXIST _EC(141)                              
#define NET_GROUP_RIGHTOVER _EC(142)                            
#define NET_GROUP_HAVEUSER _EC(143)                             
#define NET_GROUP_RIGHTUSE _EC(144)                             
#define NET_GROUP_SAMENAME _EC(145)                             
#define NET_USER_EXIST _EC(146)                                 
#define NET_USER_NOEXIST _EC(147)                               
#define NET_USER_RIGHTOVER _EC(148)                             
#define NET_USER_PWD _EC(149)                                   
#define NET_USER_FLASEPWD _EC(150)                              
#define NET_USER_NOMATCHING _EC(151)                            
#define NET_USER_INUSE _EC(152)                                 
#define NET_ERROR_GETCFG_ETHERNET _EC(300)                      
#define NET_ERROR_GETCFG_WLAN _EC(301)                          
#define NET_ERROR_GETCFG_WLANDEV _EC(302)                       
#define NET_ERROR_GETCFG_REGISTER _EC(303)                      
#define NET_ERROR_GETCFG_CAMERA _EC(304)                        
#define NET_ERROR_GETCFG_INFRARED _EC(305)                      
#define NET_ERROR_GETCFG_SOUNDALARM _EC(306)                    
#define NET_ERROR_GETCFG_STORAGE _EC(307)                       
#define NET_ERROR_GETCFG_MAIL _EC(308)                          
#define NET_CONFIG_DEVBUSY _EC(309)                             
#define NET_CONFIG_DATAILLEGAL _EC(310)                         
#define NET_ERROR_GETCFG_DST _EC(311)                           
#define NET_ERROR_SETCFG_DST _EC(312)                           
#define NET_ERROR_GETCFG_VIDEO_OSD _EC(313)                     
#define NET_ERROR_SETCFG_VIDEO_OSD _EC(314)                     
#define NET_ERROR_GETCFG_GPRSCDMA _EC(315)                      
#define NET_ERROR_SETCFG_GPRSCDMA _EC(316)                      
#define NET_ERROR_GETCFG_IPFILTER _EC(317)                      
#define NET_ERROR_SETCFG_IPFILTER _EC(318)                      
#define NET_ERROR_GETCFG_TALKENCODE _EC(319)                    
#define NET_ERROR_SETCFG_TALKENCODE _EC(320)                    
#define NET_ERROR_GETCFG_RECORDLEN _EC(321)                     
#define NET_ERROR_SETCFG_RECORDLEN _EC(322)                     
#define NET_DONT_SUPPORT_SUBAREA _EC(323)                       
#define NET_ERROR_GET_AUTOREGSERVER _EC(324)                    
#define NET_ERROR_CONTROL_AUTOREGISTER _EC(325)                 
#define NET_ERROR_DISCONNECT_AUTOREGISTER _EC(326)              
#define NET_ERROR_GETCFG_MMS _EC(327)                           
#define NET_ERROR_SETCFG_MMS _EC(328)                           
#define NET_ERROR_GETCFG_SMSACTIVATION _EC(329)                 
#define NET_ERROR_SETCFG_SMSACTIVATION _EC(330)                 
#define NET_ERROR_GETCFG_DIALINACTIVATION _EC(331)              
#define NET_ERROR_SETCFG_DIALINACTIVATION _EC(332)              
#define NET_ERROR_GETCFG_VIDEOOUT _EC(333)                      
#define NET_ERROR_SETCFG_VIDEOOUT _EC(334)                      
#define NET_ERROR_GETCFG_OSDENABLE _EC(335)                     
#define NET_ERROR_SETCFG_OSDENABLE _EC(336)                     
#define NET_ERROR_SETCFG_ENCODERINFO _EC(337)                   
#define NET_ERROR_GETCFG_TVADJUST _EC(338)                      
#define NET_ERROR_SETCFG_TVADJUST _EC(339)                      
#define NET_ERROR_CONNECT_FAILED _EC(340)                       
#define NET_ERROR_SETCFG_BURNFILE _EC(341)                      
#define NET_ERROR_SNIFFER_GETCFG _EC(342)                       
#define NET_ERROR_SNIFFER_SETCFG _EC(343)                       
#define NET_ERROR_DOWNLOADRATE_GETCFG _EC(344)                  
#define NET_ERROR_DOWNLOADRATE_SETCFG _EC(345)                  
#define NET_ERROR_SEARCH_TRANSCOM _EC(346)                      
#define NET_ERROR_GETCFG_POINT _EC(347)                         
#define NET_ERROR_SETCFG_POINT _EC(348)                         
#define NET_SDK_LOGOUT_ERROR _EC(349)                           
#define NET_ERROR_GET_VEHICLE_CFG _EC(350)                      
#define NET_ERROR_SET_VEHICLE_CFG _EC(351)                      
#define NET_ERROR_GET_ATM_OVERLAY_CFG _EC(352)                  
#define NET_ERROR_SET_ATM_OVERLAY_CFG _EC(353)                  
#define NET_ERROR_GET_ATM_OVERLAY_ABILITY _EC(354)              
#define NET_ERROR_GET_DECODER_TOUR_CFG _EC(355)                 
#define NET_ERROR_SET_DECODER_TOUR_CFG _EC(356)                 
#define NET_ERROR_CTRL_DECODER_TOUR _EC(357)                    
#define NET_GROUP_OVERSUPPORTNUM _EC(358)                       
#define NET_USER_OVERSUPPORTNUM _EC(359)                        
#define NET_ERROR_GET_SIP_CFG _EC(368)                          
#define NET_ERROR_SET_SIP_CFG _EC(369)                          
#define NET_ERROR_GET_SIP_ABILITY _EC(370)                      
#define NET_ERROR_GET_WIFI_AP_CFG _EC(371)                      
#define NET_ERROR_SET_WIFI_AP_CFG _EC(372)                      
#define NET_ERROR_GET_DECODE_POLICY _EC(373)                    
#define NET_ERROR_SET_DECODE_POLICY _EC(374)                    
#define NET_ERROR_TALK_REJECT _EC(375)                          
#define NET_ERROR_TALK_OPENED _EC(376)                          
#define NET_ERROR_TALK_RESOURCE_CONFLICIT _EC(377)              
#define NET_ERROR_TALK_UNSUPPORTED_ENCODE _EC(378)              
#define NET_ERROR_TALK_RIGHTLESS _EC(379)                       
#define NET_ERROR_TALK_FAILED _EC(380)                          
#define NET_ERROR_GET_MACHINE_CFG _EC(381)                      
#define NET_ERROR_SET_MACHINE_CFG _EC(382)                      
#define NET_ERROR_GET_DATA_FAILED _EC(383)                      
#define NET_ERROR_MAC_VALIDATE_FAILED _EC(384)                  
#define NET_ERROR_GET_INSTANCE _EC(385)                         
#define NET_ERROR_JSON_REQUEST _EC(386)                         
#define NET_ERROR_JSON_RESPONSE _EC(387)                        
#define NET_ERROR_VERSION_HIGHER _EC(388)                       
#define NET_SPARE_NO_CAPACITY _EC(389)                          
#define NET_ERROR_SOURCE_IN_USE _EC(390)                        
#define NET_ERROR_REAVE _EC(391)                                
#define NET_ERROR_NETFORBID _EC(392)                            
#define NET_ERROR_GETCFG_MACFILTER _EC(393)                     
#define NET_ERROR_SETCFG_MACFILTER _EC(394)                     
#define NET_ERROR_GETCFG_IPMACFILTER _EC(395)                   
#define NET_ERROR_SETCFG_IPMACFILTER _EC(396)                   
#define NET_ERROR_OPERATION_OVERTIME _EC(397)                   
#define NET_ERROR_SENIOR_VALIDATE_FAILED _EC(398)               
#define NET_ERROR_DEVICE_ID_NOT_EXIST _EC(399)                  
#define NET_ERROR_UNSUPPORTED _EC(400)                          
#define NET_ERROR_PROXY_DLLLOAD _EC(401)                        
#define NET_ERROR_PROXY_ILLEGAL_PARAM _EC(402)                  
#define NET_ERROR_PROXY_INVALID_HANDLE _EC(403)                 
#define NET_ERROR_PROXY_LOGIN_DEVICE_ERROR _EC(404)             
#define NET_ERROR_PROXY_START_SERVER_ERROR _EC(405)             
#define NET_ERROR_SPEAK_FAILED _EC(406)                         
#define NET_ERROR_NOT_SUPPORT_F6 _EC(407)                       
#define NET_ERROR_CD_UNREADY _EC(408)                           
#define NET_ERROR_DIR_NOT_EXIST _EC(409)                        
#define NET_ERROR_UNSUPPORTED_SPLIT_MODE _EC(410)               
#define NET_ERROR_OPEN_WND_PARAM _EC(411)                       
#define NET_ERROR_LIMITED_WND_COUNT _EC(412)                    
#define NET_ERROR_UNMATCHED_REQUEST _EC(413)                    
#define NET_RENDER_ENABLELARGEPICADJUSTMENT_ERROR _EC(414)      
#define NET_ERROR_UPGRADE_FAILED _EC(415)                       
#define NET_ERROR_NO_TARGET_DEVICE _EC(416)                     
#define NET_ERROR_NO_VERIFY_DEVICE _EC(417)                     
#define NET_ERROR_CASCADE_RIGHTLESS _EC(418)                    
#define NET_ERROR_LOW_PRIORITY _EC(419)                         
#define NET_ERROR_REMOTE_REQUEST_TIMEOUT _EC(420)               
#define NET_ERROR_LIMITED_INPUT_SOURCE _EC(421)                 
#define NET_ERROR_SET_LOG_PRINT_INFO _EC(422)                   
#define NET_ERROR_PARAM_DWSIZE_ERROR _EC(423)                   
#define NET_ERROR_LIMITED_MONITORWALL_COUNT _EC(424)            
#define NET_ERROR_PART_PROCESS_FAILED _EC(425)                  
#define NET_ERROR_TARGET_NOT_SUPPORT _EC(426)                   
#define NET_ERROR_VISITE_FILE _EC(510)                          
#define NET_ERROR_DEVICE_STATUS_BUSY _EC(511)                   
#define NET_USER_PWD_NOT_AUTHORIZED _EC(512)                    
#define NET_USER_PWD_NOT_STRONG _EC(513)                        
#define NET_ERROR_NO_SUCH_CONFIG _EC(514)                       
#define NET_ERROR_AUDIO_RECORD_FAILED _EC(515)                  
#define NET_ERROR_SEND_DATA_FAILED _EC(516)                     
#define NET_ERROR_OBSOLESCENT_INTERFACE _EC(517)                
#define NET_ERROR_INSUFFICIENT_INTERAL_BUF _EC(518)             
#define NET_ERROR_NEED_ENCRYPTION_PASSWORD _EC(519)             
#define NET_ERROR_NOSUPPORT_RECORD _EC(520)                     
#define NET_ERROR_DEVICE_IN_UPGRADING _EC(521)                  
#define NET_ERROR_ANALYSE_TASK_NOT_EXIST _EC(522)               
#define NET_ERROR_ANALYSE_TASK_FULL _EC(523)                    
#define NET_ERROR_DEVICE_RESTART _EC(524)                       
#define NET_ERROR_DEVICE_SHUTDOWN _EC(525)                      
#define NET_ERROR_FILE_SYSTEM_ERROR _EC(526)                    
#define NET_ERROR_HARDDISK_WRITE_ERROR _EC(527)                 
#define NET_ERROR_HARDDISK_READ_ERROR _EC(528)                  
#define NET_ERROR_NO_HARDDISK_RECORD_LOG _EC(529)               
#define NET_ERROR_NO_HARDDISK _EC(530)                          
#define NET_ERROR_HARDDISK_OTHER_ERRORS _EC(531)                
#define NET_ERROR_HARDDISK_BADSECTORS_MINOR_ERRORS _EC(532)     
#define NET_ERROR_HARDDISK_BADSECTORS_CRITICAL_ERRORS _EC(533)  
#define NET_ERROR_HARDDISK_PHYSICAL_BADSECTORS_SLIGHT _EC(534)  
#define NET_ERROR_HARDDISK_PHYSICAL_BADSECTORS_SERIOUS _EC(535) 
#define NET_ERROR_NETWORK_DISCONNECTION_ALARM _EC(536)          
#define NET_ERROR_NETWORK_DISCONNECTION _EC(537)                
#define NET_ERROR_SET_SOURCE_EXCEED _EC(538)                    
#define NET_ERROR_SIZE_EXCEED _EC(539)                          
#define NET_ERROR_LOGOPEN_DISABLE _EC(540)                      
#define NET_ERROR_STREAM_PACKAGE_ERROR _EC(541)                 
#define NET_ERROR_SERIALIZE_ERROR _EC(1010)                                        
#define NET_ERROR_DESERIALIZE_ERROR _EC(1011)                                      
#define NET_ERROR_LOWRATEWPAN_ID_EXISTED _EC(1012)                                 
#define NET_ERROR_LOWRATEWPAN_ID_LIMIT _EC(1013)                                   
#define NET_ERROR_LOWRATEWPAN_ID_ABNORMAL _EC(1014)                                
#define NET_ERROR_ENCRYPT _EC(1015)                                                
#define NET_ERROR_PWD_ILLEGAL _EC(1016)                                            
#define NET_ERROR_DEVICE_ALREADY_INIT _EC(1017)                                    
#define NET_ERROR_SECURITY_CODE _EC(1018)                                          
#define NET_ERROR_SECURITY_CODE_TIMEOUT _EC(1019)                                  
#define NET_ERROR_GET_PWD_SPECI _EC(1020)                                          
#define NET_ERROR_NO_AUTHORITY_OF_OPERATION _EC(1021)                              
#define NET_ERROR_DECRYPT _EC(1022)                                                
#define NET_ERROR_2D_CODE _EC(1023)                                                
#define NET_ERROR_INVALID_REQUEST _EC(1024)                                        
#define NET_ERROR_PWD_RESET_DISABLE _EC(1025)                                      
#define NET_ERROR_PLAY_PRIVATE_DATA _EC(1026)                                      
#define NET_ERROR_ROBOT_OPERATE_FAILED _EC(1027)                                   
#define NET_ERROR_PHOTOSIZE_EXCEEDSLIMIT _EC(1028)                                 
#define NET_ERROR_USERID_INVALID _EC(1029)                                         
#define NET_ERROR_EXTRACTFEATURE_FAILED _EC(1030)                                  
#define NET_ERROR_PHOTO_EXIST _EC(1031)                                            
#define NET_ERROR_PHOTO_OVERFLOW _EC(1032)                                         
#define NET_ERROR_CHANNEL_ALREADY_OPENED _EC(1033)                                 
#define NET_ERROR_CREATE_SOCKET _EC(1034)                                          
#define NET_ERROR_CHANNEL_NUM _EC(1035)                                            
#define NET_ERROR_PHOTO_FORMAT _EC(1036)                                           
#define NET_ERROR_DIGITAL_CERTIFICATE_INTERNAL_ERROR _EC(1037)                     
#define NET_ERROR_DIGITAL_CERTIFICATE_GET_ID_FAILED _EC(1038)                      
#define NET_ERROR_DIGITAL_CERTIFICATE_IMPORT_ILLEGAL _EC(1039)                     
#define NET_ERROR_DIGITAL_CERTIFICATE_SN_ERROR _EC(1040)                           
#define NET_ERROR_DIGITAL_CERTIFICATE_COMMON_NAME_ILLEGAL _EC(1041)                
#define NET_ERROR_DIGITAL_CERTIFICATE_NO_ROOT_CERT _EC(1042)                       
#define NET_ERROR_DIGITAL_CERTIFICATE_CERT_REVOKED _EC(1043)                       
#define NET_ERROR_DIGITAL_CERTIFICATE_CERT_INVALID _EC(1044)                       
#define NET_ERROR_DIGITAL_CERTIFICATE_CERT_ERROR_SIGN _EC(1045)                    
#define NET_ERROR_DIGITAL_CERTIFICATE_COUNTS_UPPER_LIMIT _EC(1046)                 
#define NET_ERROR_DIGITAL_CERTIFICATE_CERT_NO_EXIST _EC(1047)                      
#define NET_ERROR_DEFULAT_SEARCH_PORT _EC(1048)                                    
#define NET_ERROR_FACE_RECOGNITION_SERVER_MULTI_APPEND_STOUP _EC(1049)             
#define NET_ERROR_FACE_RECOGNITION_SERVER_MULTI_APPEND_ERROR _EC(1050)             
#define NET_ERROR_FACE_RECOGNITION_SERVER_GROUP_ID_EXCEED _EC(1051)                
#define NET_ERROR_FACE_RECOGNITION_SERVER_GROUP_ID_NOT_IN_REGISTER_GROUP _EC(1052) 
#define NET_ERROR_FACE_RECOGNITION_SERVER_PICTURE_NOT_FOUND _EC(1053)              
#define NET_ERROR_FACE_RECOGNITION_SERVER_GENERATE_GROUP_ID_FAILED _EC(1054)       
#define NET_ERROR_FACE_RECOGNITION_SERVER_SET_CONFIG_FAILED _EC(1055)              
#define NET_ERROR_FACE_RECOGNITION_SERVER_FILE_OPEN_FAILED _EC(1056)               
#define NET_ERROR_FACE_RECOGNITION_SERVER_FILE_READ_FAILED _EC(1057)               
#define NET_ERROR_FACE_RECOGNITION_SERVER_FILE_WRITE_FAILED _EC(1058)              
#define NET_ERROR_FACE_RECOGNITION_SERVER_PICTURE_DPI_ERROR _EC(1059)              
#define NET_ERROR_FACE_RECOGNITION_SERVER_PICTURE_PX_ERROR _EC(1060)               
#define NET_ERROR_FACE_RECOGNITION_SERVER_PICTURE_SIZE_ERROR _EC(1061)             
#define NET_ERROR_FACE_RECOGNITION_SERVER_DATA_BASE_ERROR _EC(1062)                
#define NET_ERROR_FACE_RECOGNITION_SERVER_FACE_MAX_NUM _EC(1063)                   
#define NET_ERROR_FACE_RECOGNITION_SERVER_BIRTH_DAY_FORMAT_ERROR _EC(1064)         
#define NET_ERROR_FACE_RECOGNITION_SERVER_UID_ERROR _EC(1065)                      
#define NET_ERROR_FACE_RECOGNITION_SERVER_TOKEN_ERROR _EC(1066)                    
#define NET_ERROR_FACE_RECOGNITION_SERVER_BEGIN_NUM_OVER_RUN _EC(1067)             
#define NET_ERROR_FACE_RECOGNITION_SERVER_ABSTRACT_NUM_ZERO _EC(1068)              
#define NET_ERROR_FACE_RECOGNITION_SERVER_ABSTRACT_INIT_ERROR _EC(1069)            
#define NET_ERROR_FACE_RECOGNITION_SERVER_AUTO_ABSTRACT_STATE _EC(1070)            
#define NET_ERROR_FACE_RECOGNITION_SERVER_ABSTRACT_STATE _EC(1071)                 
#define NET_ERROR_FACE_RECOGNITION_SERVER_IM_EX_STATE _EC(1072)                    
#define NET_ERROR_FACE_RECOGNITION_SERVER_PIC_WRITE_FAILED _EC(1073)               
#define NET_ERROR_FACE_RECOGNITION_SERVER_GROUP_SPACE_EXCEED _EC(1074)             
#define NET_ERROR_FACE_RECOGNITION_SERVER_GROUP_PIC_COUNT_EXCEED _EC(1075)         
#define NET_ERROR_FACE_RECOGNITION_SERVER_GROUP_NOT_FOUND _EC(1076)                
#define NET_ERROR_FACE_RECOGNITION_SERVER_FIND_RECORDS_ERROR _EC(1077)             
#define NET_ERROR_FACE_RECOGNITION_SERVER_DELETE_PERSON_ERROR _EC(1078)            
#define NET_ERROR_FACE_RECOGNITION_SERVER_DELETE_GROUP_ERROR _EC(1079)             
#define NET_ERROR_FACE_RECOGNITION_SERVER_NAME_FORMAT_ERROR _EC(1080)              
#define NET_ERROR_FACE_RECOGNITION_SERVER_FILEPATH_NOT_SET _EC(1081)               
#define NET_ERROR_DEVICE_PARSE_PROTOCOL _EC(1079)                 
#define NET_ERROR_DEVICE_INVALID_REQUEST _EC(1080)                
#define NET_ERROR_DEVICE_INTERNAL_ERROR _EC(1081)                 
#define NET_ERROR_DEVICE_REQUEST_TIMEOUT _EC(1082)                
#define NET_ERROR_DEVICE_KEEPALIVE_FAIL _EC(1083)                 
#define NET_ERROR_DEVICE_NETWORK_ERROR _EC(1084)                  
#define NET_ERROR_DEVICE_UNKNOWN_ERROR _EC(1085)                  
#define NET_ERROR_DEVICE_COM_INTERFACE_NOTFOUND _EC(1086)         
#define NET_ERROR_DEVICE_COM_IMPLEMENT_NOTFOUND _EC(1087)         
#define NET_ERROR_DEVICE_COM_NOTFOUND _EC(1088)                   
#define NET_ERROR_DEVICE_COM_INSTANCE_NOTEXIST _EC(1089)          
#define NET_ERROR_DEVICE_CREATE_COM_FAIL _EC(1090)                
#define NET_ERROR_DEVICE_GET_COM_FAIL _EC(1091)                   
#define NET_ERROR_DEVICE_BAD_REQUEST _EC(1092)                    
#define NET_ERROR_DEVICE_REQUEST_IN_PROGRESS _EC(1093)            
#define NET_ERROR_DEVICE_LIMITED_RESOURCE _EC(1094)               
#define NET_ERROR_DEVICE_BUSINESS_TIMEOUT _EC(1095)               
#define NET_ERROR_DEVICE_TOO_MANY_REQUESTS _EC(1096)              
#define NET_ERROR_DEVICE_NOT_ALREADY _EC(1097)                    
#define NET_ERROR_DEVICE_SEARCHRECORD_TIMEOUT _EC(1098)           
#define NET_ERROR_DEVICE_SEARCHTIME_INVALID _EC(1099)             
#define NET_ERROR_DEVICE_SSID_INVALID _EC(1100)                   
#define NET_ERROR_DEVICE_CHANNEL_STREAMTYPE_ERROR _EC(1101)       
#define NET_ERROR_DEVICE_STREAM_PACKINGFORMAT_UNSUPPORT _EC(1102) 
#define NET_ERROR_DEVICE_AUDIO_ENCODINGFORMAT_UNSUPPORT _EC(1103) 
#define NET_ERROR_SECURITY_ERROR_SUPPORT_GUI _EC(1104)            
#define NET_ERROR_SECURITY_ERROR_SUPPORT_MULT _EC(1105)           
#define NET_ERROR_SECURITY_ERROR_SUPPORT_UNIQUE _EC(1106)         
#define NET_ERROR_STREAMCONVERTOR_DEFECT _EC(1107)                
#define NET_ERROR_SECURITY_GENERATE_SAFE_CODE _EC(1108)       
#define NET_ERROR_SECURITY_GET_CONTACT _EC(1109)              
#define NET_ERROR_SECURITY_GET_QRCODE _EC(1110)               
#define NET_ERROR_SECURITY_CANNOT_RESET _EC(1111)             
#define NET_ERROR_SECURITY_NOT_SUPPORT_CONTACT_MODE _EC(1112) 
#define NET_ERROR_SECURITY_RESPONSE_TIMEOUT _EC(1113)         
#define NET_ERROR_SECURITY_AUTHCODE_FORBIDDEN _EC(1114)       
#define NET_ERROR_TRANCODE_LOGIN_REMOTE_DEV _EC(1115)         
#define NET_ERROR_TRANCODE_NOFREE_CHANNEL _EC(1116)           
#define NET_ERROR_VK_INFO_DECRYPT_FAILED _EC(1117)            
#define NET_ERROR_VK_INFO_DESERIALIZE_FAILED _EC(1118)        
#define NET_ERROR_GDPR_ABILITY_NOT_ENABLE _EC(1119)           
#define NET_ERROR_FAST_CHECK_NO_AUTH _EC(1120)         
#define NET_ERROR_FAST_CHECK_NO_FILE _EC(1121)         
#define NET_ERROR_FAST_CHECK_FILE_FAIL _EC(1122)       
#define NET_ERROR_FAST_CHECK_BUSY _EC(1123)            
#define NET_ERROR_FAST_CHECK_NO_PASSWORD _EC(1124)     
#define NET_ERROR_IMPORT_ACCESS_SEND_FAILD _EC(1125)   
#define NET_ERROR_IMPORT_ACCESS_BUSY _EC(1126)         
#define NET_ERROR_IMPORT_ACCESS_DATAERROR _EC(1127)    
#define NET_ERROR_IMPORT_ACCESS_DATAINVALID _EC(1128)  
#define NET_ERROR_IMPORT_ACCESS_SYNC_FALID _EC(1129)   
#define NET_ERROR_IMPORT_ACCESS_DBFULL _EC(1130)       
#define NET_ERROR_IMPORT_ACCESS_SDFULL _EC(1131)       
#define NET_ERROR_IMPORT_ACCESS_CIPHER_ERROR _EC(1132) 
#define NET_ERROR_INVALID_PARAM _EC(1133)                  
#define NET_ERROR_INVALID_PASSWORD _EC(1134)               
#define NET_ERROR_INVALID_FINGERPRINT _EC(1135)            
#define NET_ERROR_INVALID_FACE _EC(1136)                   
#define NET_ERROR_INVALID_CARD _EC(1137)                   
#define NET_ERROR_INVALID_USER _EC(1138)                   
#define NET_ERROR_GET_SUBSERVICE _EC(1139)                 
#define NET_ERROR_GET_METHOD _EC(1140)                     
#define NET_ERROR_GET_SUBCAPS _EC(1141)                    
#define NET_ERROR_UPTO_INSERT_LIMIT _EC(1142)              
#define NET_ERROR_UPTO_MAX_INSERT_RATE _EC(1143)           
#define NET_ERROR_ERASE_FINGERPRINT _EC(1144)              
#define NET_ERROR_ERASE_FACE _EC(1145)                     
#define NET_ERROR_ERASE_CARD _EC(1146)                     
#define NET_ERROR_NO_RECORD _EC(1147)                      
#define NET_ERROR_NOMORE_RECORDS _EC(1148)                 
#define NET_ERROR_RECORD_ALREADY_EXISTS _EC(1149)          
#define NET_ERROR_EXCEED_MAX_FINGERPRINT_PERUSER _EC(1150) 
#define NET_ERROR_EXCEED_MAX_CARD_PERUSER _EC(1151)        
#define NET_ERROR_EXCEED_ADMINISTRATOR_LIMIT _EC(1152)     
#define NET_LOGIN_ERROR_DEVICE_NOT_SUPPORT_HIGHLEVEL_SECURITY_LOGIN _EC(1153)  
#define NET_LOGIN_ERROR_DEVICE_ONLY_SUPPORT_HIGHLEVEL_SECURITY_LOGIN _EC(1154) 
#define NET_ERROR_VIDEO_CHANNEL_OFFLINE _EC(1155)            
#define NET_ERROR_USERID_FORMAT_INCORRECT _EC(1156)          
#define NET_ERROR_CANNOT_FIND_CHANNEL_RELATE_TO_SN _EC(1157) 
#define NET_ERROR_TASK_QUEUE_OF_CHANNEL_IS_FULL _EC(1158)    
#define NET_ERROR_APPLY_USER_INFO_BLOCK_FAIL _EC(1159)       
#define NET_ERROR_EXCEED_MAX_PASSWD_PERUSER _EC(1160)        
#define NET_ERROR_PARSE_PROTOCOL _EC(1161)                   
#define NET_ERROR_CARD_NUM_EXIST _EC(1162)                   
#define NET_ERROR_FINGERPRINT_EXIST _EC(1163)                
#define NET_ERROR_OPEN_PLAYGROUP_FAIL _EC(1164)            
#define NET_ERROR_ALREADY_IN_PLAYGROUP _EC(1165)           
#define NET_ERROR_QUERY_PLAYGROUP_TIME_FAIL _EC(1166)      
#define NET_ERROR_SET_PLAYGROUP_BASECHANNEL_FAIL _EC(1167) 
#define NET_ERROR_SET_PLAYGROUP_DIRECTION_FAIL _EC(1168)   
#define NET_ERROR_SET_PLAYGROUP_SPEED_FAIL _EC(1169)       
#define NET_ERROR_ADD_PLAYGROUP_FAIL _EC(1170)             
#define NET_ERROR_EXPORT_AOL_LOGFILE_NO_AUTH _EC(1171)   
#define NET_ERROR_EXPORT_AOL_LOGFILE_NO_FILE _EC(1172)   
#define NET_ERROR_EXPORT_AOL_LOGFILE_FILE_FAIL _EC(1173) 
#define NET_ERROR_EXPORT_AOL_LOGFILE_BUSY _EC(1174)      
#define NET_ERROR_EMPTY_LICENSE _EC(1175)     
#define NET_ERROR_UNSUPPORTED_MODE _EC(1176)  
#define NET_ERROR_URL_APP_NOT_MATCH _EC(1177) 
#define NET_ERROR_READ_INFO_FAILED _EC(1178)  
#define NET_ERROR_WRITE_FAILED _EC(1179)      
#define NET_ERROR_NO_SUCH_APP _EC(1180)       
#define NET_ERROR_VERIFIF_FAILED _EC(1181)    
#define NET_ERROR_LICENSE_OUT_DATE _EC(1182)  
#define NET_ERROR_UPGRADE_PROGRAM_TOO_OLD _EC(1183)            
#define NET_ERROR_SECURE_TRANSMIT_BEEN_CUT _EC(1184)           
#define NET_ERROR_DEVICE_NOT_SUPPORT_SECURE_TRANSMIT _EC(1185) 
#define NET_ERROR_EXTRA_STREAM_LOGIN_FAIL_CAUSE_BY_MAIN_STREAM _EC(1186) 
#define NET_ERROR_EXTRA_STREAM_CLOSED_BY_REMOTE_DEVICE _EC(1187)         
#define NET_ERROR_IMPORT_FACEDB_SEND_FAILD _EC(1188)    
#define NET_ERROR_IMPORT_FACEDB_BUSY _EC(1189)          
#define NET_ERROR_IMPORT_FACEDB_DATAERROR _EC(1190)     
#define NET_ERROR_IMPORT_FACEDB_DATAINVALID _EC(1191)   
#define NET_ERROR_IMPORT_FACEDB_UPGRADE_FAILD _EC(1192) 
#define NET_ERROR_IMPORT_FACEDB_NO_AUTHORITY _EC(1193)  
#define NET_ERROR_IMPORT_FACEDB_ABNORMAL_FILE _EC(1194) 
#define NET_ERROR_IMPORT_FACEDB_SYNC_FALID _EC(1195)    
#define NET_ERROR_IMPORT_FACEDB_DBFULL _EC(1196)        
#define NET_ERROR_IMPORT_FACEDB_SDFULL _EC(1197)        
#define NET_ERROR_IMPORT_FACEDB_CIPHER_ERROR _EC(1198)  
#define NET_ERROR_EXPORT_FACEDB_NO_AUTH _EC(1199)     
#define NET_ERROR_EXPORT_FACEDB_NO_FILE _EC(1200)     
#define NET_ERROR_EXPORT_FACEDB_FILE_FAIL _EC(1201)   
#define NET_ERROR_EXPORT_FACEDB_BUSY _EC(1202)        
#define NET_ERROR_EXPORT_FACEDB_NO_PASSWORD _EC(1203) 
#define NET_ERROR_REQUESTED_TOO_MUCH_DATA _EC(1204) 
#define NET_ERROR_BATCH_PROCESS_ERROR _EC(1205)     
#define NET_ERROR_OPERATION_CANCELLED _EC(1206)     
#define NET_ERROR_DEVICE_INVALID _EC(1207)     
#define NET_ERROR_DEVICE_UNAVAILABLE _EC(1208) 
#define NET_ERROR_FINGERPRINT_DOWNLOAD_FAIL _EC(1209)            
#define NET_ERROR_ACCOUNT_IN_USE _EC(1210)                       
#define NET_ERROR_IRIS_INFO_NOT_EXISTED _EC(1211)                
#define NET_ERROR_INVALID_IRIS_DATA _EC(1212)                    
#define NET_ERROR_IRIS_ALREADY_EXIST _EC(1213)                   
#define NET_ERROR_ERASE_IRIS_FAILED _EC(1214)                    
#define NET_ERROR_EXCEED_MAX_IRIS_GROUP_COUNT_PER_USER _EC(1215) 
#define NET_ERROR_EXCEED_MAX_IRIS_COUNT_PER_GROUP _EC(1216)      
#define NET_ERROR_FACEMANAGER_NO_FACE_DETECTED _EC(1300)           
#define NET_ERROR_FACEMANAGER_MULTI_FACE_DETECTED _EC(1301)        
#define NET_ERROR_FACEMANAGER_PICTURE_DECODING_ERROR _EC(1302)     
#define NET_ERROR_FACEMANAGER_LOW_PICTURE_QUALITY _EC(1303)        
#define NET_ERROR_FACEMANAGER_NOT_RECOMMENDED _EC(1304)            
#define NET_ERROR_FACEMANAGER_FACE_FEATURE_ALREADY_EXIST _EC(1305) 
#define NET_ERROR_FACEMANAGER_FACE_ANGLE_OVER_THRESHOLDS _EC(1307) 
#define NET_ERROR_FACEMANAGER_FACE_RADIO_EXCEEDS_RANGE _EC(1308)   
#define NET_ERROR_FACEMANAGER_FACE_OVER_EXPOSED _EC(1309)          
#define NET_ERROR_FACEMANAGER_FACE_UNDER_EXPOSED _EC(1310)         
#define NET_ERROR_FACEMANAGER_BRIGHTNESS_IMBALANCE _EC(1311)       
#define NET_ERROR_FACEMANAGER_FACE_LOWER_CONFIDENCE _EC(1312)      
#define NET_ERROR_FACEMANAGER_FACE_LOW_ALIGN _EC(1313)             
#define NET_ERROR_FACEMANAGER_FRAGMENTARY_FACE_DETECTED _EC(1314)  
#define NET_ERROR_FACEMANAGER_PUPIL_DISTANCE_NOT_ENOUGH _EC(1315)  
#define NET_ERROR_FACEMANAGER_FACE_DATA_DOWNLOAD_FAILED _EC(1316)  
#define NET_ERROR_CITIZENMANAGER_ERROR_WORKINGMODE_ERROR _EC(1317)  
#define NET_ERROR_CITIZENMANAGER_ERROR_CAPTURE_BUSY _EC(1318)       
#define NET_ERROR_CITIZENMANAGER_ERROR_CAPTURE_TYPE_ERROR _EC(1319) 
#define NET_ERROR_NORMAL_USER_NOTSUPPORT _EC(1320) 
#define NET_ERROR_THERMOGRAPHY_REF_SENSOR_OPEN_INVALID _EC(1321)     
#define NET_ERROR_THERMOGRAPHY_REF_DELAY_SHUT_DOWN_INVALID _EC(1322) 
#define NET_ERROR_CITIZENID_EXIST _EC(1323) 
#define NET_ERROR_FACEMANAGER_FACE_FFE_FAILED _EC(1324)             
#define NET_ERROR_FACEMANAGER_PHOTO_FEATURE_FAILED_FOR_FA _EC(1325) 
#define NET_ERROR_FACEMANAGER_FACE_DATA_PHOTO_INCOMPLETE _EC(1326)  
#define NET_ERROR_DATABASE_ERROR_INSERT_OVERFLOW _EC(1327) 
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_GROUPID_EXCEED _EC(1328)      
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_ABSTRACT_INIT_ERROR _EC(1329) 
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_GROUPID_NOT_FOUND _EC(1330)   
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_DATABASE_ERROR _EC(1331)      
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_TOKEN_ERROR _EC(1332)         
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_BEGINNUM_OVERRUN _EC(1333)    
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_ABSTRACT_STATE _EC(1334)      
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_BIGPIC_MAXNUM _EC(1335)       
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_OBJECT_MAXNUM _EC(1336)       
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_GROUP_SPACE_EXCEED _EC(1337)  
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_ABSTRACTNUM_ZERO _EC(1338)    
#define NET_ERROR_WORKSUIT_COMPARE_SERVER_INVALID_PARAM _EC(1339)       
#define NET_ERROR_CARD_NOT_EXIST _EC(1340) 
#define NET_ERROR_TEMPORARY_OUTDATED _EC(1341) 
#define NET_SUBBIZ_INVALID_SOCKET _EC(1401) 
#define NET_SUBBIZ_PAUSE_ERROR _EC(1402)    
#define NET_SUBBIZ_GET_PORT_ERROR _EC(1403) 
typedef enum tagEM_NET_QUERY_TYPE
{
    NET_APP_DATA_STAT, 
    NET_APP_LINK_STAT, 
} EM_NET_QUERY_TYPE;
typedef enum tagNET_CAPTURE_FORMATS
{
    NET_CAPTURE_BMP,     
    NET_CAPTURE_JPEG,    
    NET_CAPTURE_JPEG_70, 
    NET_CAPTURE_JPEG_50, 
    NET_CAPTURE_JPEG_30, 
    NET_CAPTURE_JPEG_10  
} NET_CAPTURE_FORMATS;
typedef enum tagNET_DEVICE_TYPE
{
    NET_PRODUCT_NONE = 0,
    NET_DVR_NONREALTIME_MACE, 
    NET_DVR_NONREALTIME,      
    NET_NVS_MPEG1,            
    NET_DVR_MPEG1_2,          
    NET_DVR_MPEG1_8,          
    NET_DVR_MPEG4_8,          
    NET_DVR_MPEG4_16,         
    NET_DVR_MPEG4_SX2,        
    NET_DVR_MEPG4_ST2,        
    NET_DVR_MEPG4_SH2,        
    NET_DVR_MPEG4_GBE,        
    NET_DVR_MPEG4_NVSII,      
    NET_DVR_STD_NEW,          
    NET_DVR_DDNS,             
    NET_DVR_ATM,              
    NET_NB_SERIAL,            
    NET_LN_SERIAL,            
    NET_BAV_SERIAL,           
    NET_SDIP_SERIAL,          
    NET_IPC_SERIAL,           
    NET_NVS_B,                
    NET_NVS_C,                
    NET_NVS_S,                
    NET_NVS_E,                
    NET_DVR_NEW_PROTOCOL,     
    NET_NVD_SERIAL,           
    NET_DVR_N5,               
    NET_DVR_MIX_DVR,          
    NET_SVR_SERIAL,           
    NET_SVR_BS,               
    NET_NVR_SERIAL,           
    NET_DVR_N51,              
    NET_ITSE_SERIAL,          
    NET_ITC_SERIAL,           
    NET_HWS_SERIAL,           
    NET_PVR_SERIAL,           
    NET_IVS_SERIAL,           
    NET_IVS_B,                
    NET_IVS_F,                
    NET_IVS_V,                
    NET_MATRIX_SERIAL,        
    NET_DVR_N52,              
    NET_DVR_N56,              
    NET_ESS_SERIAL,           
    NET_IVS_PC,               
    NET_PC_NVR,               
    NET_DSCON,                
    NET_EVS,                  
    NET_EIVS,                 
    NET_DVR_N6,               
    NET_UDS,                  
    NET_AF6016,               
    NET_AS5008,               
    NET_AH2008,               
    NET_A_SERIAL,             
    NET_BSC_SERIAL,           
    NET_NVS_SERIAL,           
    NET_VTO_SERIAL,           
    NET_VTNC_SERIAL,          
    NET_TPC_SERIAL,           
    NET_ASM_SERIAL,           
    NET_VTS_SERIAL,           
    NET_ARC2016C,             
    NET_ASA,                  
    NET_VTT_SERIAL,           
    NET_VTA_SERIAL,           
    NET_VTNS_SERIAL,          
    NET_VTH_SERIAL,           
    NET_IVSS,                 
    NET_ASG,                  
    NET_RADAR,                
    NET_RADAR_PTZ,            
    NET_RADAR_CAM,            
    NET_ASE,                  
    NET_XRAY_SERVER,          
    NET_XRAY_DEVICE,          
    NET_SECURITY_GATE,        
    NET_TS,                   
    NET_GP,                   
    NET_EAS,                  
} NET_DEVICE_TYPE;
typedef enum __LANGUAGE_TYPE
{
    DH_LANGUAGE_ENGLISH,             
    DH_LANGUAGE_CHINESE_SIMPLIFIED,  
    DH_LANGUAGE_CHINESE_TRADITIONAL, 
    DH_LANGUAGE_ITALIAN,             
    DH_LANGUAGE_SPANISH,             
    DH_LANGUAGE_JAPANESE,            
    DH_LANGUAGE_RUSSIAN,             
    DH_LANGUAGE_FRENCH,              
    DH_LANGUAGE_GERMAN,              
    DH_LANGUAGE_PORTUGUESE,          
    DH_LANGUAGE_TURKEY,              
    DH_LANGUAGE_POLISH,              
    DH_LANGUAGE_ROMANIAN,            
    DH_LANGUAGE_HUNGARIAN,           
    DH_LANGUAGE_FINNISH,             
    DH_LANGUAGE_ESTONIAN,            
    DH_LANGUAGE_KOREAN,              
    DH_LANGUAGE_FARSI,               
    DH_LANGUAGE_DANSK,               
    DH_LANGUAGE_CZECHISH,            
    DH_LANGUAGE_BULGARIA,            
    DH_LANGUAGE_SLOVAKIAN,           
    DH_LANGUAGE_SLOVENIA,            
    DH_LANGUAGE_CROATIAN,            
    DH_LANGUAGE_DUTCH,               
    DH_LANGUAGE_GREEK,               
    DH_LANGUAGE_UKRAINIAN,           
    DH_LANGUAGE_SWEDISH,             
    DH_LANGUAGE_SERBIAN,             
    DH_LANGUAGE_VIETNAMESE,          
    DH_LANGUAGE_LITHUANIAN,          
    DH_LANGUAGE_FILIPINO,            
    DH_LANGUAGE_ARABIC,              
    DH_LANGUAGE_CATALAN,             
    DH_LANGUAGE_LATVIAN,             
    DH_LANGUAGE_THAI,                
    DH_LANGUAGE_HEBREW,              
    DH_LANGUAGE_Bosnian,             
} DH_LANGUAGE_TYPE;
typedef enum __EM_UPGRADE_TYPE
{
    DH_UPGRADE_BIOS_TYPE = 1,     
    DH_UPGRADE_WEB_TYPE,          
    DH_UPGRADE_BOOT_YPE,          
    DH_UPGRADE_CHARACTER_TYPE,    
    DH_UPGRADE_LOGO_TYPE,         
    DH_UPGRADE_EXE_TYPE,          
    DH_UPGRADE_DEVCONSTINFO_TYPE, 
    DH_UPGRADE_PERIPHERAL_TYPE,   
    DH_UPGRADE_GEOINFO_TYPE,      
    DH_UPGRADE_MENU,              
    DH_UPGRADE_ROUTE,             
    DH_UPGRADE_ROUTE_STATE_AUTO,  
    DH_UPGRADE_SCREEN,            
} EM_UPGRADE_TYPE;
typedef enum __REC_TYPE
{
    DH_REC_TYPE_TIM = 0,
    DH_REC_TYPE_MTD,
    DH_REC_TYPE_ALM,
    DH_REC_TYPE_NUM = 3,
} REC_TYPE;
typedef enum __GPRSCDMA_NETWORK_TYPE
{
    DH_TYPE_AUTOSEL = 0, 
    DH_TYPE_TD_SCDMA,    
    DH_TYPE_WCDMA,       
    DH_TYPE_CDMA_1x,     
    DH_TYPE_EDGE,        
    DH_TYPE_EVDO,        
    DH_TYPE_WIFI,        
} EM_GPRSCDMA_NETWORK_TYPE;
typedef enum __EM_INTERFACE_TYPE
{
    DH_INTERFACE_OTHER = 0x00000000, 
    DH_INTERFACE_REALPLAY,           
    DH_INTERFACE_PREVIEW,            
    DH_INTERFACE_PLAYBACK,           
    DH_INTERFACE_DOWNLOAD,           
    DH_INTERFACE_REALLOADPIC,        
} EM_INTERFACE_TYPE;
typedef enum _EM_REALPLAY_DISCONNECT_EVENT_TYPE
{
    DISCONNECT_EVENT_REAVE,      
    DISCONNECT_EVENT_NETFORBID,  
    DISCONNECT_EVENT_SUBCONNECT, 
} EM_REALPLAY_DISCONNECT_EVENT_TYPE;
typedef enum __EM_EVENT_FILETAG
{
    DH_ATMBEFOREPASTE = 1, 
    DH_ATMAFTERPASTE,      
} EM_EVENT_FILETAG;
typedef enum __EM_IPC_TYPE
{
    DH_IPC_PRIVATE,       
    DH_IPC_AEBELL,        
    DH_IPC_PANASONIC,     
    DH_IPC_SONY,          
    DH_IPC_DYNACOLOR,     
    DH_IPC_TCWS = 5,      
    DH_IPC_SAMSUNG,       
    DH_IPC_YOKO,          
    DH_IPC_AXIS,          
    DH_IPC_SANYO,         
    DH_IPC_BOSH = 10,     
    DH_IPC_PECLO,         
    DH_IPC_PROVIDEO,      
    DH_IPC_ACTI,          
    DH_IPC_VIVOTEK,       
    DH_IPC_ARECONT = 15,  
    DH_IPC_PRIVATEEH,     
    DH_IPC_IMATEK,        
    DH_IPC_SHANY,         
    DH_IPC_VIDEOTREC,     
    DH_IPC_URA = 20,      
    DH_IPC_BITICINO,      
    DH_IPC_ONVIF,         
    DH_IPC_SHEPHERD,      
    DH_IPC_YAAN,          
    DH_IPC_AIRPOINT = 25, 
    DH_IPC_TYCO,          
    DH_IPC_XUNMEI,        
    DH_IPC_HIKVISION,
    DH_IPC_LG,             
    DH_IPC_AOQIMAN = 30,   
    DH_IPC_BAOKANG,        
    DH_IPC_WATCHNET,       
    DH_IPC_XVISION,        
    DH_IPC_FUSITSU,        
    DH_IPC_CANON = 35,     
    DH_IPC_GE,             
    DH_IPC_Basler,         
    DH_IPC_Patro,          
    DH_IPC_CPKNC,          
    DH_IPC_CPRNC = 40,     
    DH_IPC_CPUNC,          
    DH_IPC_CPPLUS,         
    DH_IPC_XunmeiS,        
    DH_IPC_GDDW,           
    DH_IPC_PSIA = 45,      
    DH_IPC_GB2818,         
    DH_IPC_GDYX,           
    DH_IPC_OTHER,          
    DH_IPC_CPUNR,          
    DH_IPC_CPUAR = 50,     
    DH_IPC_AIRLIVE,        
    DH_IPC_NPE,            
    DH_IPC_AXVIEW,         
    DH_IPC_DFWL,           
    DH_IPC_HYUNDAI = 56,   
    DH_IPC_APHD,           
    DH_IPC_WELLTRANS,      
    DH_IPC_CDJF,           
    DH_IPC_JVC = 60,       
    DH_IPC_INFINOVA,       
    DH_IPC_ADT,            
    DH_IPC_SIVIDI,         
    DH_IPC_CPUNP,          
    DH_IPC_HX = 65,        
    DH_IPC_TJGS,           
    DH_IPC_MULTICAST = 79, 
    DH_IPC_RVI = 84,       
    DH_IPC_HONEYWELL = 95, 
} EM_IPC_TYPE;
typedef enum __EM_H264_PROFILE_RANK
{
    DH_PROFILE_BASELINE = 1, 
    DH_PROFILE_MAIN,         
    DH_PROFILE_EXTENDED,     
    DH_PROFILE_HIGH = 4,     
} EM_H264_PROFILE_RANK;
typedef enum __EM_DISK_TYPE
{
    DH_DISK_READ_WRITE, 
    DH_DISK_READ_ONLY,  
    DH_DISK_BACKUP,     
    DH_DISK_REDUNDANT,  
    DH_DISK_SNAPSHOT,   
} EM_DISK_TYPE;
typedef enum __EM_ENCRYPT_ALOG_WORKMODE
{
    ENCRYPT_ALOG_WORKMODE_ECB, 
    ENCRYPT_ALOG_WORKMODE_CBC, 
    ENCRYPT_ALOG_WORKMODE_CFB, 
    ENCRYPT_ALOG_WORKMODE_OFB, 
} EM_ENCRYPT_ALOG_WORKMODE;
typedef enum __EM_MOBILE_PPP_STATE
{
    MOBILE_PPP_UP = 0,     
    MOBILE_PPP_DOWN,       
    MOBILE_PPP_CONNECTING, 
    MOBILE_PPP_CLOSEING,   
} EM_MOBILE_PPP_STATE;
typedef enum __EM_3GMOBILE_STATE
{
    MOBILE_MODULE_OFF,      
    MOBILE_MODULE_STARTING, 
    MOBILE_MODULE_WORKING,  
} EM_3GMOBILE_STATE;
typedef enum tagEM_LOGIN_SPAC_CAP_TYPE
{
    EM_LOGIN_SPEC_CAP_TCP = 0,            
    EM_LOGIN_SPEC_CAP_ANY = 1,            
    EM_LOGIN_SPEC_CAP_SERVER_CONN = 2,    
    EM_LOGIN_SPEC_CAP_MULTICAST = 3,      
    EM_LOGIN_SPEC_CAP_UDP = 4,            
    EM_LOGIN_SPEC_CAP_MAIN_CONN_ONLY = 6, 
    EM_LOGIN_SPEC_CAP_SSL = 7,            
    EM_LOGIN_SPEC_CAP_INTELLIGENT_BOX = 9, 
    EM_LOGIN_SPEC_CAP_NO_CONFIG = 10,      
    EM_LOGIN_SPEC_CAP_U_LOGIN = 11,        
    EM_LOGIN_SPEC_CAP_LDAP = 12,           
    EM_LOGIN_SPEC_CAP_AD = 13,             
    EM_LOGIN_SPEC_CAP_RADIUS = 14,         
    EM_LOGIN_SPEC_CAP_SOCKET_5 = 15,       
    EM_LOGIN_SPEC_CAP_CLOUD = 16,          
    EM_LOGIN_SPEC_CAP_AUTH_TWICE = 17,     
    EM_LOGIN_SPEC_CAP_TS = 18,             
    EM_LOGIN_SPEC_CAP_P2P = 19,            
    EM_LOGIN_SPEC_CAP_MOBILE = 20,         
    EM_LOGIN_SPEC_CAP_TLS_ADAPTER = 21,    
    EM_LOGIN_SPEC_CAP_TLS_COMPEL = 22,     
    EM_LOGIN_SPEC_CAP_TLS_MAIN_ONLY = 23,  
    EM_LOGIN_SPEC_CAP_INVALID              
} EM_LOGIN_SPAC_CAP_TYPE;
typedef enum _RealPlayType
{
    DH_RType_Realplay = 0,        
    DH_RType_Multiplay,           
    DH_RType_Realplay_0,          
    DH_RType_Realplay_1,          
    DH_RType_Realplay_2,          
    DH_RType_Realplay_3,          
    DH_RType_Multiplay_1,         
    DH_RType_Multiplay_4,         
    DH_RType_Multiplay_8,         
    DH_RType_Multiplay_9,         
    DH_RType_Multiplay_16,        
    DH_RType_Multiplay_6,         
    DH_RType_Multiplay_12,        
    DH_RType_Multiplay_25,        
    DH_RType_Multiplay_36,        
    DH_RType_Multiplay_64,        
    DH_RType_Multiplay_255,       
    DH_RType_Realplay_Audio,      
    DH_RType_Realplay_Test = 255, 
} DH_RealPlayType;
typedef enum _PTZ_ControlType
{
    DH_PTZ_UP_CONTROL = 0,       
    DH_PTZ_DOWN_CONTROL,         
    DH_PTZ_LEFT_CONTROL,         
    DH_PTZ_RIGHT_CONTROL,        
    DH_PTZ_ZOOM_ADD_CONTROL,     
    DH_PTZ_ZOOM_DEC_CONTROL,     
    DH_PTZ_FOCUS_ADD_CONTROL,    
    DH_PTZ_FOCUS_DEC_CONTROL,    
    DH_PTZ_APERTURE_ADD_CONTROL, 
    DH_PTZ_APERTURE_DEC_CONTROL, 
    DH_PTZ_POINT_MOVE_CONTROL,   
    DH_PTZ_POINT_SET_CONTROL,    
    DH_PTZ_POINT_DEL_CONTROL,    
    DH_PTZ_POINT_LOOP_CONTROL,   
    DH_PTZ_LAMP_CONTROL          
} DH_PTZ_ControlType;
typedef enum _EXTPTZ_ControlType
{
    DH_EXTPTZ_LEFTTOP = 0x20,                    
    DH_EXTPTZ_RIGHTTOP,                          
    DH_EXTPTZ_LEFTDOWN,                          
    DH_EXTPTZ_RIGHTDOWN,                         
    DH_EXTPTZ_ADDTOLOOP,                         
    DH_EXTPTZ_DELFROMLOOP,                       
    DH_EXTPTZ_CLOSELOOP,                         
    DH_EXTPTZ_STARTPANCRUISE,                    
    DH_EXTPTZ_STOPPANCRUISE,                     
    DH_EXTPTZ_SETLEFTBORDER,                     
    DH_EXTPTZ_SETRIGHTBORDER,                    
    DH_EXTPTZ_STARTLINESCAN,                     
    DH_EXTPTZ_CLOSELINESCAN,                     
    DH_EXTPTZ_SETMODESTART,                      
    DH_EXTPTZ_SETMODESTOP,                       
    DH_EXTPTZ_RUNMODE,                           
    DH_EXTPTZ_STOPMODE,                          
    DH_EXTPTZ_DELETEMODE,                        
    DH_EXTPTZ_REVERSECOMM,                       
    DH_EXTPTZ_FASTGOTO,                          
    DH_EXTPTZ_AUXIOPEN,                          
    DH_EXTPTZ_AUXICLOSE,                         
    DH_EXTPTZ_OPENMENU = 0x36,                   
    DH_EXTPTZ_CLOSEMENU,                         
    DH_EXTPTZ_MENUOK,                            
    DH_EXTPTZ_MENUCANCEL,                        
    DH_EXTPTZ_MENUUP,                            
    DH_EXTPTZ_MENUDOWN,                          
    DH_EXTPTZ_MENULEFT,                          
    DH_EXTPTZ_MENURIGHT,                         
    DH_EXTPTZ_ALARMHANDLE = 0x40,                
    DH_EXTPTZ_MATRIXSWITCH = 0x41,               
    DH_EXTPTZ_LIGHTCONTROL,                      
    DH_EXTPTZ_EXACTGOTO,                         
    DH_EXTPTZ_RESETZERO,                         
    DH_EXTPTZ_MOVE_ABSOLUTELY,                   
    DH_EXTPTZ_MOVE_CONTINUOUSLY,                 
    DH_EXTPTZ_GOTOPRESET,                        
    DH_EXTPTZ_SET_VIEW_RANGE = 0x49,             
    DH_EXTPTZ_FOCUS_ABSOLUTELY = 0x4A,           
    DH_EXTPTZ_HORSECTORSCAN = 0x4B,              
    DH_EXTPTZ_VERSECTORSCAN = 0x4C,              
    DH_EXTPTZ_SET_ABS_ZOOMFOCUS = 0x4D,          
    DH_EXTPTZ_SET_FISHEYE_EPTZ = 0x4E,           
    DH_EXTPTZ_SET_TRACK_START = 0x4F,            
    DH_EXTPTZ_SET_TRACK_STOP = 0x50,             
    DH_EXTPTZ_RESTART = 0x51,                    
    DH_EXTPTZ_INTELLI_TRACKMOVE = 0x52,          
    DH_EXTPTZ_SET_FOCUS_REGION = 0x53,           
    DH_EXTPTZ_PAUSELINESCAN = 0x54,              
    DH_EXTPTZ_INTELLI_SETLENSWISDOMSTATE = 0x55, 
    DH_EXTPTZ_INTELLI_SETFOCUSAREA = 0x56,       
    DH_EXTPTZ_UP_TELE = 0x70,                    
    DH_EXTPTZ_DOWN_TELE,                         
    DH_EXTPTZ_LEFT_TELE,                         
    DH_EXTPTZ_RIGHT_TELE,                        
    DH_EXTPTZ_LEFTUP_TELE,                       
    DH_EXTPTZ_LEFTDOWN_TELE,                     
    DH_EXTPTZ_TIGHTUP_TELE,                      
    DH_EXTPTZ_RIGHTDOWN_TELE,                    
    DH_EXTPTZ_UP_WIDE,                           
    DH_EXTPTZ_DOWN_WIDE,                         
    DH_EXTPTZ_LEFT_WIDE,                         
    DH_EXTPTZ_RIGHT_WIDE,                        
    DH_EXTPTZ_LEFTUP_WIDE,                       
    DH_EXTPTZ_LEFTDOWN_WIDE,                     
    DH_EXTPTZ_TIGHTUP_WIDE,                      
    DH_EXTPTZ_RIGHTDOWN_WIDE,                    
    DH_EXTPTZ_GOTOPRESETSNAP = 0x80,             
    DH_EXTPTZ_DIRECTIONCALIBRATION = 0x82,       
    DH_EXTPTZ_SINGLEDIRECTIONCALIBRATION = 0x83, 
    DH_EXTPTZ_MOVE_RELATIVELY = 0x84,            
    DH_EXTPTZ_SET_DIRECTION = 0x85,              
    DH_EXTPTZ_BASE_MOVE_ABSOLUTELY = 0x86,       
    DH_EXTPTZ_BASE_MOVE_CONTINUOUSLY,            
    DH_EXTPTZ_BASE_SET_FOCUS_MAP_VALUE,          
    DH_EXTPTZ_BASE_MOVE_ABSOLUTELY_ONLYPT,       
    DH_EXTPTZ_BASE_MOVE_ABSOLUTELY_ONLYZOOM,     
    DH_EXTPTZ_STOP_MOVE,                         
    DH_EXTPTZ_START,                             
    DH_EXTPTZ_STOP,                              
    DH_EXTPTZ_START_PATTERN_RECORD,              
    DH_EXTPTZ_STOP_PATTERN_RECORD,               
    DH_EXTPTZ_START_PATTERN_REPLAY,              
    DH_EXTPTZ_STOP_PATTERN_REPLAY,               
    DH_EXTPTZ_MOVE_DIRECTLY,                     
    DH_EXTPTZ_TOTAL,                             
} DH_EXTPTZ_ControlType;
typedef enum tagNET_FISHEYE_EPTZ_CMD
{
    NET_FISHEYE_EPTZ_CMD_UNKOWN,          
    NET_FISHEYE_EPTZ_CMD_ZOOMIN,          
    NET_FISHEYE_EPTZ_CMD_ZOOMOUT,         
    NET_FISHEYE_EPTZ_CMD_UP,              
    NET_FISHEYE_EPTZ_CMD_DOWN,            
    NET_FISHEYE_EPTZ_CMD_LEFT,            
    NET_FISHEYE_EPTZ_CMD_RIGHT,           
    NET_FISHEYE_EPTZ_CMD_ROTATECLOCK,     
    NET_FISHEYE_EPTZ_CMD_ROTATEANTICLOCK, 
    NET_FISHEYE_EPTZ_CMD_STOP,            
    NET_FISHEYE_EPTZ_CMD_TAPVIEW,         
    NET_FISHEYE_EPTZ_CMD_SHOEREGION, 
} NET_FISHEYE_EPTZ_CMD;
typedef enum tagNET_TRACK_CONTROL_CMD
{
    NET_TRACK_CONTROL_CMD_UP,          
    NET_TRACK_CONTROL_CMD_DOWN,        
    NET_TRACK_CONTROL_CMD_LEFT,        
    NET_TRACK_CONTROL_CMD_RIGHT,       
    NET_TRACK_CONTROL_CMD_SETPRESET,   
    NET_TRACK_CONTROL_CMD_CLEARPRESET, 
    NET_TRACK_CONTROL_CMD_GOTOPRESET,  
} NET_TRACK_CONTROL_CMD;
typedef enum tagNET_CALIBRATE_MODE
{
    NET_FISHEYE_CALIBRATE_MODE_UNKOWN,                     
    NET_FISHEYE_CALIBRATE_MODE_ORIGIAL,                    
    NET_FISHEYE_CALIBRATE_MODE_CONFIG,                     
    NET_FISHEYE_CALIBRATE_MODE_PANORAMA,                   
    NET_FISHEYE_CALIBRATE_MODE_DOUBLEPANORAMA,             
    NET_FISHEYE_CALIBRATE_MODE_ORIGIALPLUSTHREEEPTZREGION, 
    NET_FISHEYE_CALIBRATE_MODE_SINGLE,                     
    NET_FISHEYE_CALIBRATE_MODE_FOUREPTZREGION,             
    NET_FISHEYE_CALIBRATE_MODE_NORMAL,                     
} NET_FISHEYE_CALIBRATE_MODE;
typedef enum tagNET_FISHEYE_TYPE
{
    NET_FISHEYE_UNKOWN = 0,  
    NET_FISHEYE_CHIP,        
    NET_FISHEYE_PLUGIN,      
    NET_FISHEYE_CHIP_PLUGIN, 
} NET_FISHEYE_TYPE;
typedef enum tagNET_FISHEYE_MOUNT_MODE
{
    NET_FISHEYE_MOUNT_MODE_UNKOWN, 
    NET_FISHEYE_MOUNT_MODE_CEIL,   
    NET_FISHEYE_MOUNT_MODE_WALL,   
    NET_FISHEYE_MOUNT_MODE_FLOOR,  
} NET_FISHEYE_MOUNT_MODE;
typedef enum _DH_LOG_QUERY_TYPE
{
    DHLOG_ALL = 0,  
    DHLOG_SYSTEM,   
    DHLOG_CONFIG,   
    DHLOG_STORAGE,  
    DHLOG_ALARM,    
    DHLOG_RECORD,   
    DHLOG_ACCOUNT,  
    DHLOG_CLEAR,    
    DHLOG_PLAYBACK, 
    DHLOG_MANAGER   
} DH_LOG_QUERY_TYPE;
typedef enum _DH_LOG_TYPE
{
    DH_LOG_REBOOT = 0x0000, 
    DH_LOG_SHUT,            
    DH_LOG_REPORTSTOP,
    DH_LOG_REPORTSTART,
    DH_LOG_UPGRADE = 0x0004,         
    DH_LOG_SYSTIME_UPDATE = 0x0005,  
    DH_LOG_GPS_TIME_UPDATE = 0x0006, 
    DH_LOG_AUDIO_TALKBACK,           
    DH_LOG_COMM_ADAPTER,             
    DH_LOG_NET_TIMING,               
    DH_LOG_CONFSAVE = 0x0100,        
    DH_LOG_CONFLOAD,                 
    DH_LOG_FSERROR = 0x0200,         
    DH_LOG_HDD_WERR,                 
    DH_LOG_HDD_RERR,                 
    DH_LOG_HDD_TYPE,                 
    DH_LOG_HDD_FORMAT,               
    DH_LOG_HDD_NOSPACE,              
    DH_LOG_HDD_TYPE_RW,              
    DH_LOG_HDD_TYPE_RO,              
    DH_LOG_HDD_TYPE_RE,              
    DH_LOG_HDD_TYPE_SS,              
    DH_LOG_HDD_NONE,                 
    DH_LOG_HDD_NOWORKHDD,            
    DH_LOG_HDD_TYPE_BK,              
    DH_LOG_HDD_TYPE_REVERSE,         
    DH_LOG_HDD_START_INFO = 0x20e,   
    DH_LOG_HDD_WORKING_DISK,         
    DH_LOG_HDD_OTHER_ERROR,          
    DH_LOG_HDD_SLIGHT_ERR,           
    DH_LOG_HDD_SERIOUS_ERR,          
    DH_LOG_HDD_NOSPACE_END,          
    DH_LOG_HDD_TYPE_RAID_CONTROL,    
    DH_LOG_HDD_TEMPERATURE_HIGH,     
    DH_LOG_HDD_TEMPERATURE_LOW,      
    DH_LOG_HDD_ESATA_REMOVE,         
    DH_LOG_ALM_IN = 0x0300,          
    DH_LOG_NETALM_IN,                
    DH_LOG_ALM_END = 0x0302,         
    DH_LOG_LOSS_IN,                  
    DH_LOG_LOSS_END,                 
    DH_LOG_MOTION_IN,                
    DH_LOG_MOTION_END,               
    DH_LOG_ALM_BOSHI,                
    DH_LOG_NET_ABORT = 0x0308,       
    DH_LOG_NET_ABORT_RESUME,         
    DH_LOG_CODER_BREAKDOWN,          
    DH_LOG_CODER_BREAKDOWN_RESUME,   
    DH_LOG_BLIND_IN,                 
    DH_LOG_BLIND_END,                
    DH_LOG_ALM_TEMP_HIGH,            
    DH_LOG_ALM_VOLTAGE_LOW,          
    DH_LOG_ALM_BATTERY_LOW,          
    DH_LOG_ALM_ACC_BREAK,            
    DH_LOG_ALM_ACC_RES,
    DH_LOG_GPS_SIGNAL_LOST,           
    DH_LOG_GPS_SIGNAL_RESUME,         
    DH_LOG_3G_SIGNAL_LOST,            
    DH_LOG_3G_SIGNAL_RESUME,          
    DH_LOG_ALM_IPC_IN,                
    DH_LOG_ALM_IPC_END,               
    DH_LOG_ALM_DIS_IN,                
    DH_LOG_ALM_DIS_END,               
    DH_LOG_ALM_UPS_IN,                
    DH_LOG_ALM_UPS_END,               
    DH_LOG_ALM_NAS_IN,                
    DH_LOG_ALM_NAS_END,               
    DH_LOG_ALM_REDUNDANT_POWER_IN,    
    DH_LOG_ALM_REDUNDANT_POWER_END,   
    DH_LOG_ALM_RECORD_FAILED_IN,      
    DH_LOG_ALM_RECORD_FAILED_END,     
    DH_LOG_ALM_VGEXCEPT_IN,           
    DH_LOG_ALM_VGEXCEPT_END,          
    DH_LOG_ALM_FANSPEED_IN,           
    DH_LOG_ALM_FANSPEED_END,          
    DH_LOG_ALM_DROP_FRAME_IN,         
    DH_LOG_ALM_DROP_FRAME_END,        
    DH_LOG_ALM_DISK_STATE_CHECK,      
    DH_LOG_ALARM_COAXIAL_SMOKE,       
    DH_LOG_ALARM_COAXIAL_TEMP_HIGH,   
    DH_LOG_ALARM_COAXIAL_ALM_IN,      
    DH_LOG_INFRAREDALM_IN = 0x03a0,   
    DH_LOG_INFRAREDALM_END,           
    DH_LOG_IPCONFLICT,                
    DH_LOG_IPCONFLICT_RESUME,         
    DH_LOG_SDPLUG_IN,                 
    DH_LOG_SDPLUG_OUT,                
    DH_LOG_NET_PORT_BIND_FAILED,      
    DH_LOG_HDD_BEEP_RESET,            
    DH_LOG_MAC_CONFLICT,              
    DH_LOG_MAC_CONFLICT_RESUME,       
    DH_LOG_ALARM_OUT,                 
    DH_LOG_ALM_RAID_STAT_EVENT,       
    DH_LOG_ABLAZE_ON,                 
    DH_LOG_ABLAZE_OFF,                
    DH_LOG_INTELLI_ALARM_PLUSE,       
    DH_LOG_INTELLI_ALARM_IN,          
    DH_LOG_INTELLI_ALARM_END,         
    DH_LOG_3G_SIGNAL_SCAN,            
    DH_LOG_GPS_SIGNAL_SCAN,           
    DH_LOG_AUTOMATIC_RECORD = 0x0400, 
    DH_LOG_MANUAL_RECORD = 0x0401,    
    DH_LOG_CLOSED_RECORD,             
    DH_LOG_LOGIN = 0x0500,            
    DH_LOG_LOGOUT,                    
    DH_LOG_ADD_USER,                  
    DH_LOG_DELETE_USER,               
    DH_LOG_MODIFY_USER,               
    DH_LOG_ADD_GROUP,                 
    DH_LOG_DELETE_GROUP,              
    DH_LOG_MODIFY_GROUP,              
    DH_LOG_NET_LOGIN = 0x0508,        
    DH_LOG_MODIFY_PASSWORD,           
    DH_LOG_CLEAR = 0x0600,            
    DH_LOG_SEARCHLOG,                 
    DH_LOG_SEARCH = 0x0700,           
    DH_LOG_DOWNLOAD,                  
    DH_LOG_PLAYBACK,                  
    DH_LOG_BACKUP,                    
    DH_LOG_BACKUPERROR,               
    DH_LOG_BACK_UPRT,                 
    DH_LOG_BACKUPCLONE,               
    DH_LOG_DISK_CHANGED,              
    DH_LOG_IMAGEPLAYBACK,             
    DH_LOG_LOCKFILE,                  
    DH_LOG_UNLOCKFILE,                
    DH_LOG_ATMPOS,                    
    DH_PLAY_PAUSE,                    
    DH_PLAY_START,                    
    LOG_PLAY_STOP,                    
    LOG_PLAY_BACK,                    
    LOG_PLAY_FAST,                    
    LOG_PLAY_SLOW,                    
    LOG_SMART_SEARCH,                 
    LOG_RECORD_SNAP,                  
    LOG_ADD_TAG,                      
    LOG_DEL_TAG,                      
    LOG_USB_IN,                       
    LOG_USB_OUT,                      
    LOG_BACKUP_FILE,                  
    LOG_BACKUP_LOG,                   
    LOG_BACKUP_CONFIG,                
    DH_LOG_TIME_UPDATE = 0x0800,  
    DH_LOG_REMOTE_STATE = 0x0850, 
    DH_LOG_USER_DEFINE = 0x0900,
    DH_LOG_TYPE_NR = 10,
} DH_LOG_TYPE;
typedef enum _DH_NEWLOG_TYPE
{
    DH_NEWLOG_REBOOT = 0x0000, 
    DH_NEWLOG_SHUT,            
    DH_NEWLOG_REPORTSTOP,
    DH_NEWLOG_REPORTSTART,
    DH_NEWLOG_UPGRADE = 0x0004,         
    DH_NEWLOG_SYSTIME_UPDATE = 0x0005,  
    DH_NEWLOG_GPS_TIME_UPDATE = 0x0006, 
    DH_NEWLOG_AUDIO_TALKBACK, 
    DH_NEWLOG_COMM_ADAPTER,   
    DH_NEWLOG_NET_TIMING,     
    DH_NEWLOG_CONFSAVE = 0x0100,      
    DH_NEWLOG_CONFLOAD,               
    DH_NEWLOG_FSERROR = 0x0200,       
    DH_NEWLOG_HDD_WERR,               
    DH_NEWLOG_HDD_RERR,               
    DH_NEWLOG_HDD_TYPE,               
    DH_NEWLOG_HDD_FORMAT,             
    DH_NEWLOG_HDD_NOSPACE,            
    DH_NEWLOG_HDD_TYPE_RW,            
    DH_NEWLOG_HDD_TYPE_RO,            
    DH_NEWLOG_HDD_TYPE_RE,            
    DH_NEWLOG_HDD_TYPE_SS,            
    DH_NEWLOG_HDD_NONE,               
    DH_NEWLOG_HDD_NOWORKHDD,          
    DH_NEWLOG_HDD_TYPE_BK,            
    DH_NEWLOG_HDD_TYPE_REVERSE,       
    DH_NEWLOG_HDD_START_INFO = 0x20e, 
    DH_NEWLOG_HDD_WORKING_DISK,       
    DH_NEWLOG_HDD_OTHER_ERROR,        
    DH_NEWLOG_HDD_SLIGHT_ERR,         
    DH_NEWLOG_HDD_SERIOUS_ERR,        
    DH_NEWLOG_HDD_NOSPACE_END,        
    DH_NEWLOG_HDD_TYPE_RAID_CONTROL, 
    DH_NEWLOG_HDD_TEMPERATURE_HIGH,  
    DH_NEWLOG_HDD_TEMPERATURE_LOW,   
    DH_NEWLOG_HDD_ESATA_REMOVE,      
    DH_NEWLOG_ALM_IN = 0x0300,        
    DH_NEWLOG_NETALM_IN,              
    DH_NEWLOG_ALM_END = 0x0302,       
    DH_NEWLOG_LOSS_IN,                
    DH_NEWLOG_LOSS_END,               
    DH_NEWLOG_MOTION_IN,              
    DH_NEWLOG_MOTION_END,             
    DH_NEWLOG_ALM_BOSHI,              
    DH_NEWLOG_NET_ABORT = 0x0308,     
    DH_NEWLOG_NET_ABORT_RESUME,       
    DH_NEWLOG_CODER_BREAKDOWN,        
    DH_NEWLOG_CODER_BREAKDOWN_RESUME, 
    DH_NEWLOG_BLIND_IN,               
    DH_NEWLOG_BLIND_END,              
    DH_NEWLOG_ALM_TEMP_HIGH,          
    DH_NEWLOG_ALM_VOLTAGE_LOW,        
    DH_NEWLOG_ALM_BATTERY_LOW,        
    DH_NEWLOG_ALM_ACC_BREAK,          
    DH_NEWLOG_ALM_ACC_RES,
    DH_NEWLOG_GPS_SIGNAL_LOST,   
    DH_NEWLOG_GPS_SIGNAL_RESUME, 
    DH_NEWLOG_3G_SIGNAL_LOST,    
    DH_NEWLOG_3G_SIGNAL_RESUME,  
    DH_NEWLOG_ALM_IPC_IN,  
    DH_NEWLOG_ALM_IPC_END, 
    DH_NEWLOG_ALM_DIS_IN,  
    DH_NEWLOG_ALM_DIS_END, 
    DH_NEWLOG_INFRAREDALM_IN = 0x03a0,   
    DH_NEWLOG_INFRAREDALM_END,           
    DH_NEWLOG_IPCONFLICT,                
    DH_NEWLOG_IPCONFLICT_RESUME,         
    DH_NEWLOG_SDPLUG_IN,                 
    DH_NEWLOG_SDPLUG_OUT,                
    DH_NEWLOG_NET_PORT_BIND_FAILED,      
    DH_NEWLOG_HDD_BEEP_RESET,            
    DH_NEWLOG_MAC_CONFLICT,              
    DH_NEWLOG_MAC_CONFLICT_RESUME,       
    DH_NEWLOG_ALARM_OUT,                 
    DH_NEWLOG_ALM_RAID_STAT_EVENT,       
    DH_NEWLOG_ABLAZE_ON,                 
    DH_NEWLOG_ABLAZE_OFF,                
    DH_NEWLOG_INTELLI_ALARM_PLUSE,       
    DH_NEWLOG_INTELLI_ALARM_IN,          
    DH_NEWLOG_INTELLI_ALARM_END,         
    DH_NEWLOG_3G_SIGNAL_SCAN,            
    DH_NEWLOG_GPS_SIGNAL_SCAN,           
    DH_NEWLOG_AUTOMATIC_RECORD = 0x0400, 
    DH_NEWLOG_MANUAL_RECORD,             
    DH_NEWLOG_CLOSED_RECORD,             
    DH_NEWLOG_LOGIN = 0x0500,            
    DH_NEWLOG_LOGOUT,                    
    DH_NEWLOG_ADD_USER,                  
    DH_NEWLOG_DELETE_USER,               
    DH_NEWLOG_MODIFY_USER,               
    DH_NEWLOG_ADD_GROUP,                 
    DH_NEWLOG_DELETE_GROUP,              
    DH_NEWLOG_MODIFY_GROUP,              
    DH_NEWLOG_NET_LOGIN = 0x0508,        
    DH_NEWLOG_CLEAR = 0x0600,            
    DH_NEWLOG_SEARCHLOG,                 
    DH_NEWLOG_SEARCH = 0x0700,           
    DH_NEWLOG_DOWNLOAD,                  
    DH_NEWLOG_PLAYBACK,                  
    DH_NEWLOG_BACKUP,                    
    DH_NEWLOG_BACKUPERROR,               
    DH_NEWLOG_BACK_UPRT,     
    DH_NEWLOG_BACKUPCLONE,   
    DH_NEWLOG_DISK_CHANGED,  
    DH_NEWLOG_IMAGEPLAYBACK, 
    DH_NEWLOG_LOCKFILE,      
    DH_NEWLOG_UNLOCKFILE,    
    DH_NEWLOG_ATMPOS,        
    DH_NEWLOG_TIME_UPDATE = 0x0800,  
    DH_NEWLOG_REMOTE_STATE = 0x0850, 
    DH_NEWLOG_USER_DEFINE = 0x0900,
    DH_NEWLOG_TYPE_NR = 10,
} DH_NEWLOG_TYPE;
typedef enum __TALK_CODING_TYPE
{
    DH_TALK_UNKNOWN = -1, 
    DH_TALK_DEFAULT = 0,  
    DH_TALK_PCM = 1,      
    DH_TALK_G711a,        
    DH_TALK_AMR,          
    DH_TALK_G711u,        
    DH_TALK_G726,         
    DH_TALK_G723_53,      
    DH_TALK_G723_63,      
    DH_TALK_AAC,          
    DH_TALK_OGG,          
    DH_TALK_G729 = 10,    
    DH_TALK_MPEG2,        
    DH_TALK_MPEG2_Layer2, 
    DH_TALK_G722_1,       
    DH_TALK_ADPCM = 21,   
    DH_TALK_MP3 = 22,     
} DH_TALK_CODING_TYPE;
typedef enum __NET_RECORD_TYPE
{
    NET_RECORD_TYPE_ALL,    
    NET_RECORD_TYPE_NORMAL, 
    NET_RECORD_TYPE_ALARM,  
    NET_RECORD_TYPE_MOTION, 
} NET_RECORD_TYPE;
typedef enum __EM_USEDEV_MODE
{
    DH_TALK_CLIENT_MODE,         
    DH_TALK_SERVER_MODE,         
    DH_TALK_ENCODE_TYPE,         
    DH_ALARM_LISTEN_MODE,        
    DH_CONFIG_AUTHORITY_MODE,    
    DH_TALK_TALK_CHANNEL,        
    DH_RECORD_STREAM_TYPE,       
    DH_TALK_SPEAK_PARAM,         
    DH_RECORD_TYPE,              
    DH_TALK_MODE3,               
    DH_PLAYBACK_REALTIME_MODE,   
    DH_TALK_TRANSFER_MODE,       
    DH_TALK_VT_PARAM,            
    DH_TARGET_DEV_ID,            
    DH_AUDIO_RECORD_LENGTH = 15, 
} EM_USEDEV_MODE;
typedef enum tagEM_SHOES_TYPE
{
    EM_SHOES_UNKNOWN,   
    EM_SHOES_LEATHER,   
    EM_SHOES_BOOTS,     
    EM_SHOES_CASUAL,    
    EM_SHOES_SANDALS,   
    EM_SHOES_SNEAKERS,  
    EM_SHOES_SLIPPER,   
    EM_SHOES_OTHERS,    
    EM_SHOES_SHOECOVER, 
} EM_SHOES_TYPE;
typedef enum __EM_TALK_DATA_TYPE
{
    NET_TALK_DATA_LOCAL_AUDIO = 0, 
    NET_TALK_DATA_RECV_AUDIO,      
    NET_TALK_DATA_RESPOND,         
    NET_TALK_DATA_RECV_VIDEO,      
} EM_TALK_DATA_TYPE;
typedef struct tagNET_TALK_VIDEO_FORMAT
{
    DWORD dwSize;
    DWORD dwCompression; 
    int nFrequency;      
} NET_TALK_VIDEO_FORMAT;
typedef struct tagNET_TALK_EX
{
    DWORD dwSize;
    int nChannel;                               
    int nAudioPort;                             
    int nWaitTime;                              
    HWND hVideoWnd;                             
    NET_TALK_VIDEO_FORMAT stuVideoFmt;          
    char szMulticastAddr[DH_MAX_IPADDR_LEN_EX]; 
    WORD wMulticastLocalPort;                   
    WORD wMulticastRemotePort;                  
} NET_TALK_EX;
typedef enum __EM_ARM_ENCODE_MODE
{
    DH_TALK_AMR_AMR475 = 1, 
    DH_TALK_AMR_AMR515,     
    DH_TALK_AMR_AMR59,      
    DH_TALK_AMR_AMR67,      
    DH_TALK_AMR_AMR74,      
    DH_TALK_AMR_AMR795,     
    DH_TALK_AMR_AMR102,     
    DH_TALK_AMR_AMR122,     
} EM_ARM_ENCODE_MODE;
typedef struct __NET_SPEAK_PARAM
{
    DWORD dwSize;        
    int nMode;           
    int nSpeakerChannel; 
    BOOL bEnableWait;    
} NET_SPEAK_PARAM;
typedef struct tagNET_TALK_TRANSFER_PARAM
{
    DWORD dwSize;
    BOOL bTransfer; 
} NET_TALK_TRANSFER_PARAM;
typedef enum _CtrlType
{
    DH_CTRL_REBOOT = 0,    
    DH_CTRL_SHUTDOWN,      
    DH_CTRL_DISK,          
    DH_KEYBOARD_POWER = 3, 
    DH_KEYBOARD_ENTER,
    DH_KEYBOARD_ESC,
    DH_KEYBOARD_UP,
    DH_KEYBOARD_DOWN,
    DH_KEYBOARD_LEFT,
    DH_KEYBOARD_RIGHT,
    DH_KEYBOARD_BTN0,
    DH_KEYBOARD_BTN1,
    DH_KEYBOARD_BTN2,
    DH_KEYBOARD_BTN3,
    DH_KEYBOARD_BTN4,
    DH_KEYBOARD_BTN5,
    DH_KEYBOARD_BTN6,
    DH_KEYBOARD_BTN7,
    DH_KEYBOARD_BTN8,
    DH_KEYBOARD_BTN9,
    DH_KEYBOARD_BTN10,
    DH_KEYBOARD_BTN11,
    DH_KEYBOARD_BTN12,
    DH_KEYBOARD_BTN13,
    DH_KEYBOARD_BTN14,
    DH_KEYBOARD_BTN15,
    DH_KEYBOARD_BTN16,
    DH_KEYBOARD_SPLIT,
    DH_KEYBOARD_ONE,
    DH_KEYBOARD_NINE,
    DH_KEYBOARD_ADDR,
    DH_KEYBOARD_INFO,
    DH_KEYBOARD_REC,
    DH_KEYBOARD_FN1,
    DH_KEYBOARD_FN2,
    DH_KEYBOARD_PLAY,
    DH_KEYBOARD_STOP,
    DH_KEYBOARD_SLOW,
    DH_KEYBOARD_FAST,
    DH_KEYBOARD_PREW,
    DH_KEYBOARD_NEXT,
    DH_KEYBOARD_JMPDOWN,
    DH_KEYBOARD_JMPUP,
    DH_KEYBOARD_10PLUS,
    DH_KEYBOARD_SHIFT,
    DH_KEYBOARD_BACK,
    DH_KEYBOARD_LOGIN,                       
    DH_KEYBOARD_CHNNEL,                      
    DH_TRIGGER_ALARM_IN = 100,               
    DH_TRIGGER_ALARM_OUT,                    
    DH_CTRL_MATRIX,                          
    DH_CTRL_SDCARD,                          
    DH_BURNING_START,                        
    DH_BURNING_STOP,                         
    DH_BURNING_ADDPWD,                       
    DH_BURNING_ADDHEAD,                      
    DH_BURNING_ADDSIGN,                      
    DH_BURNING_ADDCURSTOMINFO,               
    DH_CTRL_RESTOREDEFAULT,                  
    DH_CTRL_CAPTURE_START,                   
    DH_CTRL_CLEARLOG,                        
    DH_TRIGGER_ALARM_WIRELESS = 200,         
    DH_MARK_IMPORTANT_RECORD,                
    DH_CTRL_DISK_SUBAREA,                    
    DH_BURNING_ATTACH,                       
    DH_BURNING_PAUSE,                        
    DH_BURNING_CONTINUE,                     
    DH_BURNING_POSTPONE,                     
    DH_CTRL_OEMCTRL,                         
    DH_BACKUP_START,                         
    DH_BACKUP_STOP,                          
    DH_VIHICLE_WIFI_ADD,                     
    DH_VIHICLE_WIFI_DEC,                     
    DH_BUZZER_START,                         
    DH_BUZZER_STOP,                          
    DH_REJECT_USER,                          
    DH_SHIELD_USER,                          
    DH_RAINBRUSH,                            
    DH_MANUAL_SNAP,                          
    DH_MANUAL_NTP_TIMEADJUST,                
    DH_NAVIGATION_SMS,                       
    DH_CTRL_ROUTE_CROSSING,                  
    DH_BACKUP_FORMAT,                        
    DH_DEVICE_LOCALPREVIEW_SLIPT,            
    DH_CTRL_INIT_RAID,                       
    DH_CTRL_RAID,                            
    DH_CTRL_SAPREDISK,                       
    DH_WIFI_CONNECT,                         
    DH_WIFI_DISCONNECT,                      
    DH_CTRL_ARMED,                           
    DH_CTRL_IP_MODIFY,                       
    DH_CTRL_WIFI_BY_WPS,                     
    DH_CTRL_FORMAT_PATITION,                 
    DH_CTRL_EJECT_STORAGE,                   
    DH_CTRL_LOAD_STORAGE,                    
    DH_CTRL_CLOSE_BURNER,                    
    DH_CTRL_EJECT_BURNER,                    
    DH_CTRL_CLEAR_ALARM,                     
    DH_CTRL_MONITORWALL_TVINFO,              
    DH_CTRL_START_VIDEO_ANALYSE,             
    DH_CTRL_STOP_VIDEO_ANALYSE,              
    DH_CTRL_UPGRADE_DEVICE,                  
    DH_CTRL_MULTIPLAYBACK_CHANNALES,         
    DH_CTRL_SEQPOWER_OPEN,                   
    DH_CTRL_SEQPOWER_CLOSE,                  
    DH_CTRL_SEQPOWER_OPEN_ALL,               
    DH_CTRL_SEQPOWER_CLOSE_ALL,              
    DH_CTRL_PROJECTOR_RISE,                  
    DH_CTRL_PROJECTOR_FALL,                  
    DH_CTRL_PROJECTOR_STOP,                  
    DH_CTRL_INFRARED_KEY,                    
    DH_CTRL_START_PLAYAUDIO,                 
    DH_CTRL_STOP_PLAYAUDIO,                  
    DH_CTRL_START_ALARMBELL,                 
    DH_CTRL_STOP_ALARMBELL,                  
    DH_CTRL_ACCESS_OPEN,                     
    DH_CTRL_SET_BYPASS,                      
    DH_CTRL_RECORDSET_INSERT,                
    DH_CTRL_RECORDSET_UPDATE,                
    DH_CTRL_RECORDSET_REMOVE,                
    DH_CTRL_RECORDSET_CLEAR,                 
    DH_CTRL_ACCESS_CLOSE,                    
    DH_CTRL_ALARM_SUBSYSTEM_ACTIVE_SET,      
    DH_CTRL_FORBID_OPEN_STROBE,              
    DH_CTRL_OPEN_STROBE,                     
    DH_CTRL_TALKING_REFUSE,                  
    DH_CTRL_ARMED_EX,                        
    DH_CTRL_REMOTE_TALK,                     
    DH_CTRL_NET_KEYBOARD = 400,              
    DH_CTRL_AIRCONDITION_OPEN,               
    DH_CTRL_AIRCONDITION_CLOSE,              
    DH_CTRL_AIRCONDITION_SET_TEMPERATURE,    
    DH_CTRL_AIRCONDITION_ADJUST_TEMPERATURE, 
    DH_CTRL_AIRCONDITION_SETMODE,            
    DH_CTRL_AIRCONDITION_SETWINDMODE,        
    DH_CTRL_RESTOREDEFAULT_EX,               
    DH_CTRL_NOTIFY_EVENT,                    
    DH_CTRL_SILENT_ALARM_SET,                
    DH_CTRL_START_PLAYAUDIOEX,               
    DH_CTRL_STOP_PLAYAUDIOEX,                
    DH_CTRL_CLOSE_STROBE,                    
    DH_CTRL_SET_ORDER_STATE,                 
    DH_CTRL_RECORDSET_INSERTEX,              
    DH_CTRL_RECORDSET_UPDATEEX,              
    DH_CTRL_CAPTURE_FINGER_PRINT,            
    DH_CTRL_ECK_LED_SET,                     
    DH_CTRL_ECK_IC_CARD_IMPORT,              
    DH_CTRL_ECK_SYNC_IC_CARD,                
    DH_CTRL_LOWRATEWPAN_REMOVE,              
    DH_CTRL_LOWRATEWPAN_MODIFY,              
    DH_CTRL_ECK_SET_PARK_INFO,               
    DH_CTRL_VTP_DISCONNECT,                  
    DH_CTRL_UPDATE_FILES,                    
    DH_CTRL_MATRIX_SAVE_SWITCH,              
    DH_CTRL_MATRIX_RESTORE_SWITCH,           
    DH_CTRL_VTP_DIVERTACK,                   
    DH_CTRL_RAINBRUSH_MOVEONCE,              
    DH_CTRL_RAINBRUSH_MOVECONTINUOUSLY,      
    DH_CTRL_RAINBRUSH_STOPMOVE,              
    DH_CTRL_ALARM_ACK,                       
    DH_CTRL_RECORDSET_IMPORT,                
    DH_CTRL_DELIVERY_FILE,                   
    DH_CTRL_FORCE_BREAKING,                  
    DH_CTRL_RESTORE_EXCEPT,                  
    DH_CTRL_SET_PARK_INFO,                   
    DH_CTRL_CLEAR_SECTION_STAT,              
    DH_CTRL_DELIVERY_FILE_BYCAR,             
    DH_CTRL_ECK_GUIDINGPANEL_CONTENT,        
    DH_CTRL_SET_SAFE_LEVEL,                  
    DH_CTRL_VTP_INVITEACK,                   
    DH_CTRL_ACCESS_RESET_PASSWORD,           
    DH_CTRL_ACCESS_CALL_LIFT,                
    DH_CTRL_RECORDSET_REMOVEEX,              
    DH_CTRL_ADJUST_BRIGHT,                   
    DH_CTRL_CLEARLOG_EX,                     
    DH_CTRL_THERMO_GRAPHY_ENSHUTTER = 0x10000, 
    DH_CTRL_RADIOMETRY_SETOSDMARK,             
    DH_CTRL_AUDIO_REC_START_NAME,              
    DH_CTRL_AUDIO_REC_STOP_NAME,               
    DH_CTRL_SNAP_MNG_SNAP_SHOT,                
    DH_CTRL_LOG_STOP,                          
    DH_CTRL_LOG_RESUME,                        
    DH_CTRL_POS_ADD,                           
    DH_CTRL_POS_REMOVE,                        
    DH_CTRL_POS_REMOVE_MULTI,                  
    DH_CTRL_POS_MODIFY,                        
    DH_CTRL_SET_SOUND_ALARM,                   
    DH_CTRL_AUDIO_MATRIX_SILENCE,              
    DH_CTRL_MANUAL_UPLOAD_PICTURE,             
    DH_CTRL_REBOOT_NET_DECODING_DEV,           
    DH_CTRL_SET_IC_SENDER,                     
    DH_CTRL_SET_MEDIAKIND,                     
    DH_CTRL_LOWRATEWPAN_ADD,                   
    DH_CTRL_LOWRATEWPAN_REMOVEALL,             
    DH_CTRL_SET_DOOR_WORK_MODE,                
    DH_CTRL_TEST_MAIL,                         
    DH_CTRL_CONTROL_SMART_SWITCH,              
    DH_CTRL_LOWRATEWPAN_SETWORKMODE,           
    DH_CTRL_COAXIAL_CONTROL_IO,                
    DH_CTRL_START_REMOTELOWRATEWPAN_ALARMBELL, 
    DH_CTRL_STOP_REMOTELOWRATEWPAN_ALARMBELL,  
    DH_CTRL_THERMO_DO_FFC,                     
    DH_CTRL_THERMO_FIX_FOCUS,                  
    DH_CTRL_SET_THIRD_CALLSTATUS,              
    DH_CTRL_ACCESS_CLEAR_STATUS,               
    DH_CTRL_ACCESS_DEAL_RECORD,                
    DH_CTRL_QUERY_DELIVERED_FILE,              
    DH_CTRL_SET_PARK_CONTROL_INFO,             
    DH_CTRL_CHANGE_SUSTAIN,                    
    DH_CTRL_DEVVIDEOINPUT_LIGHT,               
    DH_CTRL_SNAP_TASK_ADD,                     
    DH_CTRL_QUERY_DELIVERED_FILE_EX,           
    DH_CTRL_LOWRATEWPAN_GETWIRELESSDEVSIGNAL = 0x10100, 
    DH_CTRL_LOWRATEWPAN_SET_ACCESSORY_PARAM,            
} CtrlType;
#define DH_MAX_WIRELESS_DEV_NUM 80 
typedef struct tagNET_IN_CTRL_LOWRATEWPAN_GETWIRELESSDEVSIGNAL
{
    DWORD dwSize;     
    int nStartIndex;  
    int nDevStateNum; 
} NET_IN_CTRL_LOWRATEWPAN_GETWIRELESSDEVSIGNAL;
typedef struct tagNET_WIRELESSDEVSIGNAL_INFO
{
    char szDevSN[32];     
    UINT unSignal;        
    BYTE byReserver[512]; 
} NET_WIRELESSDEVSIGNAL_INFO;
typedef struct tagNET_OUT_CTRL_LOWRATEWPAN_GETWIRELESSDEVSIGNAL
{
    DWORD dwSize;                                                     
    int nWirelessDevNum;                                              
    NET_WIRELESSDEVSIGNAL_INFO stuDevSignal[DH_MAX_WIRELESS_DEV_NUM]; 
} NET_OUT_CTRL_LOWRATEWPAN_GETWIRELESSDEVSIGNAL;
typedef struct tagNET_CTRL_MATRIX_SAVE_SWITCH
{
    DWORD dwSize;
    const char* pszName; 
} NET_CTRL_MATRIX_SAVE_SWITCH;
typedef struct tagNET_CTRL_MATRIX_RESTORE_SWITCH
{
    DWORD dwSize;
    const char* pszName; 
} NET_CTRL_MATRIX_RESTORE_SWITCH;
typedef struct tagNET_CTRL_RESTORE_DEFAULT
{
    DWORD dwSize;
    const char* szCfgNames; 
} NET_CTRL_RESTORE_DEFAULT;
typedef struct tagNET_CTRL_RESTORE_EXCEPT
{
    DWORD dwSize;
    char szCfgName[DH_MAX_STRING_LEN]; 
} NET_CTRL_RESTORE_EXCEPT;
typedef struct tagNET_CTRL_OPEN_AIRCONDITION
{
    DWORD dwSize;
    char szDeviceID[DH_MAX_DEV_ID_LEN]; 
} NET_CTRL_OPEN_AIRCONDITION;
typedef struct tagNET_CTRL_CLOSE_AIRCONDITION
{
    DWORD dwSize;
    char szDeviceID[DH_MAX_DEV_ID_LEN]; 
} NET_CTRL_CLOSE_AIRCONDITION;
typedef struct tagNET_CTRL_SET_TEMPERATURE
{
    DWORD dwSize;
    char szDeviceID[DH_MAX_DEV_ID_LEN]; 
    int nTemperature;                   
} NET_CTRL_SET_TEMPERATURE;
typedef struct tagNET_CTRL_ADJUST_TEMPERATURE
{
    DWORD dwSize;
    char szDeviceID[DH_MAX_DEV_ID_LEN]; 
    int nTemperatureScale;              
} NET_CTRL_ADJUST_TEMPERATURE;
typedef struct tagNET_CTRL_AIRCONDITION_SETMODE
{
    DWORD dwSize;
    char szDeviceID[DH_MAX_DEV_ID_LEN];      
    EM_AIRCONDITION_MODE emAirconditionMode; 
    int nTemperature;                        
} NET_CTRL_AIRCONDITION_SETMODE;
typedef struct tagNET_CTRL_AIRCONDITION_SETWINDMODE
{
    DWORD dwSize;
    char szDeviceID[DH_MAX_DEV_ID_LEN];              
    EM_AIRCONDITION_WINDMODE emAirconditionWindMode; 
} NET_CTRL_AIRCONDITION_SETWINDMODE;
typedef enum _IOTYPE
{
    DH_ALARMINPUT = 1,         
    DH_ALARMOUTPUT = 2,        
    DH_DECODER_ALARMOUT = 3,   
    DH_WIRELESS_ALARMOUT = 5,  
    DH_ALARM_TRIGGER_MODE = 7, 
} DH_IOTYPE;
typedef enum _CAPTURE_SIZE
{
    CAPTURE_SIZE_D1,        
    CAPTURE_SIZE_HD1,       
    CAPTURE_SIZE_BCIF,      
    CAPTURE_SIZE_CIF,       
    CAPTURE_SIZE_QCIF,      
    CAPTURE_SIZE_VGA,       
    CAPTURE_SIZE_QVGA,      
    CAPTURE_SIZE_SVCD,      
    CAPTURE_SIZE_QQVGA,     
    CAPTURE_SIZE_SVGA,      
    CAPTURE_SIZE_XVGA,      
    CAPTURE_SIZE_WXGA,      
    CAPTURE_SIZE_SXGA,      
    CAPTURE_SIZE_WSXGA,     
    CAPTURE_SIZE_UXGA,      
    CAPTURE_SIZE_WUXGA,     
    CAPTURE_SIZE_LTF,       
    CAPTURE_SIZE_720,       
    CAPTURE_SIZE_1080,      
    CAPTURE_SIZE_1_3M,      
    CAPTURE_SIZE_2M,        
    CAPTURE_SIZE_5M,        
    CAPTURE_SIZE_3M,        
    CAPTURE_SIZE_5_0M,      
    CPTRUTE_SIZE_1_2M,      
    CPTRUTE_SIZE_1408_1024, 
    CPTRUTE_SIZE_8M,        
    CPTRUTE_SIZE_2560_1920, 
    CAPTURE_SIZE_960H,      
    CAPTURE_SIZE_960_720,   
    CAPTURE_SIZE_NHD,       
    CAPTURE_SIZE_QNHD,      
    CAPTURE_SIZE_QQNHD,     
    CAPTURE_SIZE_960_540,   
    CAPTURE_SIZE_640_352,   
    CAPTURE_SIZE_640_400,   
    CAPTURE_SIZE_320_192,   
    CAPTURE_SIZE_320_176,   
    CAPTURE_SIZE_SVGA1,     
    CAPTURE_SIZE_2560_1440, 
    CAPTURE_SIZE_2304_1296, 
    CAPTURE_SIZE_2592_1520, 
    CAPTURE_SIZE_4000_3000, 
    CAPTURE_SIZE_2880_2880, 
    CAPTURE_SIZE_2880_2160, 
    CAPTURE_SIZE_2688_1520, 
    CAPTURE_SIZE_2592_1944, 
    CAPTURE_SIZE_3072_1728, 
    CAPTURE_SIZE_3072_2048, 
    CAPTURE_SIZE_3840_2160, 
    CAPTURE_SIZE_NR = 255
} CAPTURE_SIZE;
typedef enum tagEM_CAPTURE_SIZE_EX
{
    EM_CAPTURE_SIZE_EX_D1,        
    EM_CAPTURE_SIZE_EX_D1_PAL,    
    EM_CAPTURE_SIZE_EX_D1_NTSC,   
    EM_CAPTURE_SIZE_EX_HD1,       
    EM_CAPTURE_SIZE_EX_HD1_PAL,   
    EM_CAPTURE_SIZE_EX_HD1_NTSC,  
    EM_CAPTURE_SIZE_EX_BCIF,      
    EM_CAPTURE_SIZE_EX_BCIF_PAL,  
    EM_CAPTURE_SIZE_EX_BCIF_NTSC, 
    EM_CAPTURE_SIZE_EX_CIF,       
    EM_CAPTURE_SIZE_EX_CIF_PAL,   
    EM_CAPTURE_SIZE_EX_CIF_NTSC,  
    EM_CAPTURE_SIZE_EX_QCIF,      
    EM_CAPTURE_SIZE_EX_QCIF_PAL,  
    EM_CAPTURE_SIZE_EX_QCIF_NTSC, 
    EM_CAPTURE_SIZE_EX_VGA,       
    EM_CAPTURE_SIZE_EX_QVGA,      
    EM_CAPTURE_SIZE_EX_SVCD,      
    EM_CAPTURE_SIZE_EX_QQVGA,     
    EM_CAPTURE_SIZE_EX_SVGA,      
    EM_CAPTURE_SIZE_EX_XVGA,      
    EM_CAPTURE_SIZE_EX_WXGA,      
    EM_CAPTURE_SIZE_EX_SXGA,      
    EM_CAPTURE_SIZE_EX_WSXGA,     
    EM_CAPTURE_SIZE_EX_UXGA,      
    EM_CAPTURE_SIZE_EX_WUXGA,     
    EM_CAPTURE_SIZE_EX_LTF,       
    EM_CAPTURE_SIZE_EX_720,       
    EM_CAPTURE_SIZE_EX_1080,      
    EM_CAPTURE_SIZE_EX_1_3M,      
    EM_CAPTURE_SIZE_EX_2M,        
    EM_CAPTURE_SIZE_EX_5M,        
    EM_CAPTURE_SIZE_EX_3M,        
    EM_CAPTURE_SIZE_EX_5_0M,      
    EM_CAPTURE_SIZE_EX_1_2M,      
    EM_CAPTURE_SIZE_EX_1408_1024, 
    EM_CAPTURE_SIZE_EX_8M,        
    EM_CAPTURE_SIZE_EX_2560_1920, 
    EM_CAPTURE_SIZE_EX_960H,      
    EM_CAPTURE_SIZE_EX_960H_PAL,  
    EM_CAPTURE_SIZE_EX_960H_NTSC, 
    EM_CAPTURE_SIZE_EX_960_720,   
    EM_CAPTURE_SIZE_EX_NHD,       
    EM_CAPTURE_SIZE_EX_QNHD,      
    EM_CAPTURE_SIZE_EX_QQNHD,     
    EM_CAPTURE_SIZE_EX_960_540,   
    EM_CAPTURE_SIZE_EX_640_352,   
    EM_CAPTURE_SIZE_EX_640_400,   
    EM_CAPTURE_SIZE_EX_320_192,   
    EM_CAPTURE_SIZE_EX_320_176,   
    EM_CAPTURE_SIZE_EX_SVGA1,     
    EM_CAPTURE_SIZE_EX_2560_1440, 
    EM_CAPTURE_SIZE_EX_2304_1296, 
    EM_CAPTURE_SIZE_EX_2592_1520, 
    EM_CAPTURE_SIZE_EX_4000_3000, 
    EM_CAPTURE_SIZE_EX_2880_2880, 
    EM_CAPTURE_SIZE_EX_2880_2160, 
    EM_CAPTURE_SIZE_EX_2688_1520, 
    EM_CAPTURE_SIZE_EX_2592_1944, 
    EM_CAPTURE_SIZE_EX_3072_1728, 
    EM_CAPTURE_SIZE_EX_3072_2048, 
    EM_CAPTURE_SIZE_EX_3840_2160, 
    EM_CAPTURE_SIZE_EX_NR = 255
} EM_CAPTURE_SIZE_EX;
typedef enum __DH_CONFIG_FILE_TYPE
{
    DH_CONFIGFILE_ALL = 0, 
    DH_CONFIGFILE_LOCAL,   
    DH_CONFIGFILE_NETWORK, 
    DH_CONFIGFILE_USER,    
} DH_CONFIG_FILE_TYPE;
typedef enum __DH_TIME_ZONE_TYPE
{
    DH_TIME_ZONE_0,  
    DH_TIME_ZONE_1,  
    DH_TIME_ZONE_2,  
    DH_TIME_ZONE_3,  
    DH_TIME_ZONE_4,  
    DH_TIME_ZONE_5,  
    DH_TIME_ZONE_6,  
    DH_TIME_ZONE_7,  
    DH_TIME_ZONE_8,  
    DH_TIME_ZONE_9,  
    DH_TIME_ZONE_10, 
    DH_TIME_ZONE_11, 
    DH_TIME_ZONE_12, 
    DH_TIME_ZONE_13, 
    DH_TIME_ZONE_14, 
    DH_TIME_ZONE_15, 
    DH_TIME_ZONE_16, 
    DH_TIME_ZONE_17, 
    DH_TIME_ZONE_18, 
    DH_TIME_ZONE_19, 
    DH_TIME_ZONE_20, 
    DH_TIME_ZONE_21, 
    DH_TIME_ZONE_22, 
    DH_TIME_ZONE_23, 
    DH_TIME_ZONE_24, 
    DH_TIME_ZONE_25, 
    DH_TIME_ZONE_26, 
    DH_TIME_ZONE_27, 
    DH_TIME_ZONE_28, 
    DH_TIME_ZONE_29, 
    DH_TIME_ZONE_30, 
    DH_TIME_ZONE_31, 
    DH_TIME_ZONE_32, 
} DH_TIME_ZONE_TYPE;
typedef enum _SNAP_TYPE
{
    SNAP_TYP_TIMING = 0,
    SNAP_TYP_ALARM,
    SNAP_TYP_NUM = 2,
} SNAP_TYPE;
typedef enum _CONNECT_STATE
{
    CONNECT_STATE_UNCONNECT = 0, 
    CONNECT_STATE_CONNECTING,    
    CONNECT_STATE_CONNECTED,     
    CONNECT_STATE_EMPTY,         
    CONNECT_STATE_CHANGED,       
    CONNECT_STATE_ERROR = 255,   
} CONNECT_STATE;
typedef enum tagDH_TRAFFIC_SNAP_MODE
{
    DH_TRAFFIC_SNAP_MODE_COIL = 1,         
    DH_TRAFFIC_SNAP_MODE_COIL_PICANALYSIS, 
    DH_TRAFFIC_SNAP_MODE_STREAM,           
    DH_TRAFFIC_SNAP_MODE_STREAM_IDENTIFY,  
} DH_TRAFFIC_SNAP_MODE;
typedef enum
{
    NET_CARPORTLIGHT_TYPE_RED,   
    NET_CARPORTLIGHT_TYPE_GREEN, 
} NET_CARPORTLIGHT_TYPE;
typedef enum
{
    NET_CARPORTLIGHT_MODE_OFF,   
    NET_CARPORTLIGHT_MODE_ON,    
    NET_CARPORTLIGHT_MODE_GLINT, 
} NET_CARPORTLIGHT_MODE;
typedef enum _EM_OPERATE_TYPE
{
    NET_TRAFFIC_LIST_INSERT, 
    NET_TRAFFIC_LIST_UPDATE, 
    NET_TRAFFIC_LIST_REMOVE, 
    NET_TRAFFIC_LIST_MAX,
} EM_RECORD_OPERATE_TYPE;
typedef enum _EM_NET_PLATE_TYPE
{
    NET_PLATE_TYPE_UNKNOWN,
    NET_PLATE_TYPE_NORMAL,       
    NET_PLATE_TYPE_YELLOW,       
    NET_PLATE_TYPE_DOUBLEYELLOW, 
    NET_PLATE_TYPE_POLICE,       
    NET_PLATE_TYPE_WJ,
    NET_PLATE_TYPE_OUTERGUARD,
    NET_PLATE_TYPE_DOUBLEOUTERGUARD,
    NET_PLATE_TYPE_SAR,         
    NET_PLATE_TYPE_TRAINNING,   
    NET_PLATE_TYPE_PERSONAL,    
    NET_PLATE_TYPE_AGRI,        
    NET_PLATE_TYPE_EMBASSY,     
    NET_PLATE_TYPE_MOTO,        
    NET_PLATE_TYPE_TRACTOR,     
    NET_PLATE_TYPE_OFFICIALCAR, 
    NET_PLATE_TYPE_PERSONALCAR, 
    NET_PLATE_TYPE_WARCAR,
    NET_PLATE_TYPE_OTHER,                  
    NET_PLATE_TYPE_CIVILAVIATION,          
    NET_PLATE_TYPE_BLACK,                  
    NET_PLATE_TYPE_PURENEWENERGYMICROCAR,  
    NET_PLATE_TYPE_MIXEDNEWENERGYMICROCAR, 
    NET_PLATE_TYPE_PURENEWENERGYLARGECAR,  
    NET_PLATE_TYPE_MIXEDNEWENERGYLARGECAR, 
    NET_PLATE_TYPE_HONGKONG,               
    NET_PLATE_TYPE_MAKAO,                  
} EM_NET_PLATE_TYPE;
typedef enum _EM_NET_PLATE_COLOR_TYPE
{
    NET_PLATE_COLOR_OTHER,                    
    NET_PLATE_COLOR_BLUE,                     
    NET_PLATE_COLOR_YELLOW,                   
    NET_PLATE_COLOR_WHITE,                    
    NET_PLATE_COLOR_BLACK,                    
    NET_PLATE_COLOR_YELLOW_BOTTOM_BLACK_TEXT, 
    NET_PLATE_COLOR_BLUE_BOTTOM_WHITE_TEXT,   
    NET_PLATE_COLOR_BLACK_BOTTOM_WHITE_TEXT,  
    NET_PLATE_COLOR_SHADOW_GREEN,             
    NET_PLATE_COLOR_YELLOW_GREEN,             
} EM_NET_PLATE_COLOR_TYPE;
typedef enum _EM_NET_VEHICLE_TYPE
{
    NET_VEHICLE_TYPE_UNKNOW,                   
    NET_VEHICLE_TYPE_MOTOR,                    
    NET_VEHICLE_TYPE_NON_MOTOR,                
    NET_VEHICLE_TYPE_BUS,                      
    NET_VEHICLE_TYPE_BICYCLE,                  
    NET_VEHICLE_TYPE_MOTORCYCLE,               
    NET_VEHICLE_TYPE_UNLICENSEDMOTOR,          
    NET_VEHICLE_TYPE_LARGECAR,                 
    NET_VEHICLE_TYPE_MICROCAR,                 
    NET_VEHICLE_TYPE_EMBASSYCAR,               
    NET_VEHICLE_TYPE_MARGINALCAR,              
    NET_VEHICLE_TYPE_AREAOUTCAR,               
    NET_VEHICLE_TYPE_FOREIGNCAR,               
    NET_VEHICLE_TYPE_DUALTRIWHEELMOTORCYCLE,   
    NET_VEHICLE_TYPE_LIGHTMOTORCYCLE,          
    NET_VEHICLE_TYPE_EMBASSYMOTORCYCLE,        
    NET_VEHICLE_TYPE_MARGINALMOTORCYCLE,       
    NET_VEHICLE_TYPE_AREAOUTMOTORCYCLE,        
    NET_VEHICLE_TYPE_FOREIGNMOTORCYCLE,        
    NET_VEHICLE_TYPE_FARMTRANSMITCAR,          
    NET_VEHICLE_TYPE_TRACTOR,                  
    NET_VEHICLE_TYPE_TRAILER,                  
    NET_VEHICLE_TYPE_COACHCAR,                 
    NET_VEHICLE_TYPE_COACHMOTORCYCLE,          
    NET_VEHICLE_TYPE_TRIALCAR,                 
    NET_VEHICLE_TYPE_TRIALMOTORCYCLE,          
    NET_VEHICLE_TYPE_TEMPORARYENTRYCAR,        
    NET_VEHICLE_TYPE_TEMPORARYENTRYMOTORCYCLE, 
    NET_VEHICLE_TYPE_TEMPORARYSTEERCAR,        
    NET_VEHICLE_TYPE_PASSENGERCAR,             
    NET_VEHICLE_TYPE_LARGETRUCK,               
    NET_VEHICLE_TYPE_MIDTRUCK,                 
    NET_VEHICLE_TYPE_SALOONCAR,                
    NET_VEHICLE_TYPE_MICROBUS,                 
    NET_VEHICLE_TYPE_MICROTRUCK,               
    NET_VEHICLE_TYPE_TRICYCLE,                 
    NET_VEHICLE_TYPE_PASSERBY,                 
} EM_NET_VEHICLE_TYPE;
typedef enum _EM_NET_VEHICLE_COLOR_TYPE
{
    NET_VEHICLE_COLOR_OTHER,  
    NET_VEHICLE_COLOR_WHITE,  
    NET_VEHICLE_COLOR_BLACK,  
    NET_VEHICLE_COLOR_RED,    
    NET_VEHICLE_COLOR_YELLOW, 
    NET_VEHICLE_COLOR_GRAY,   
    NET_VEHICLE_COLOR_BLUE,   
    NET_VEHICLE_COLOR_GREEN,  
    NET_VEHICLE_COLOR_PINK,   
    NET_VEHICLE_COLOR_PURPLE, 
    NET_VEHICLE_COLOR_BROWN,  
} EM_NET_VEHICLE_COLOR_TYPE;
typedef enum _EM_NET_TRAFFIC_CAR_CONTROL_TYPE
{
    NET_CAR_CONTROL_OTHER,                       
    NET_CAR_CONTROL_OVERDUE_NO_CHECK,            
    NET_CAR_CONTROL_BRIGANDAGE_CAR,              
    NET_CAR_CONTROL_BREAKING,                    
    NET_CAR_CONTROL_CAUSETROUBLE_ESCAPE,         
    NET_CAR_CONTROL_CAUSETROUBLE_OVERDUEPARKING, 
    NET_CAR_CONTROL_COUNTERFEI_PLATE_CAR,        
    NET_CAR_CONTROL_FAKE_PLATE_CAR,              
    NET_CAR_CONTROL_FOCAL_CAR,                   
    NET_CAR_CONTROL_GUARANTEE_CAR,               
    NET_CAR_CONTROL_FOLLOW_CAR,                  
} EM_NET_TRAFFIC_CAR_CONTROL_TYPE;
typedef enum _EM_NET_AUTHORITY_TYPE
{
    NET_AUTHORITY_UNKNOW,
    NET_AUTHORITY_OPEN_GATE, 
} EM_NET_AUTHORITY_TYPE;
typedef enum _EM_NET_RECORD_TYPE
{
    NET_RECORD_UNKNOWN,
    NET_RECORD_TRAFFICREDLIST,    
    NET_RECORD_TRAFFICBLACKLIST,  
    NET_RECORD_BURN_CASE,         
    NET_RECORD_ACCESSCTLCARD,     
    NET_RECORD_ACCESSCTLPWD,      
    NET_RECORD_ACCESSCTLCARDREC,  
    NET_RECORD_ACCESSCTLHOLIDAY,  
    NET_RECORD_TRAFFICFLOW_STATE, 
    NET_RECORD_VIDEOTALKLOG,      
    NET_RECORD_REGISTERUSERSTATE, 
    NET_RECORD_VIDEOTALKCONTACT,  
    NET_RECORD_ANNOUNCEMENT, 
    NET_RECORD_ALARMRECORD, 
    NET_RECORD_COMMODITYNOTICE, 
    NET_RECORD_HEALTHCARENOTICE, 
    NET_RECORD_ACCESSCTLCARDREC_EX, 
    NET_RECORD_GPS_LOCATION, 
    NET_RECORD_RESIDENT, 
    NET_RECORD_SENSORRECORD, 
    NET_RECORD_ACCESSQRCODE, 
    NET_RECORD_ELECTRONICSTAG, 
    NET_RECORD_ACCESS_BLUETOOTH, 
    NET_RECORD_ACCESS_ALARMRECORD, 
    NET_RECORD_ACCESS_DOORSTATUS, 
    NET_RECORD_ACCESSCTL_COMMON_PASSWORD, 
    NET_RECORD_ACCESS_MOBILE_PUSH_RESULT, 
    NET_RECORD_HOSPITAL_USER,             
    NET_RECORD_HOSPITAL_DEVICE,           
    NET_RECORD_ACCESS_CONSUMPTION, 
} EM_NET_RECORD_TYPE;
typedef enum
{
    NET_TIME_TYPE_ABSLUTE,  
    NET_TIME_TYPE_RELATIVE, 
} EM_TIME_TYPE;
typedef enum
{
    NET_COLOR_TYPE_RED,    
    NET_COLOR_TYPE_YELLOW, 
    NET_COLOR_TYPE_GREEN,  
    NET_COLOR_TYPE_CYAN,   
    NET_COLOR_TYPE_BLUE,   
    NET_COLOR_TYPE_PURPLE, 
    NET_COLOR_TYPE_BLACK,  
    NET_COLOR_TYPE_WHITE,  
    NET_COLOR_TYPE_MAX = 8,
} EM_COLOR_TYPE;
typedef enum
{
    PERSON_TYPE_UNKNOWN,
    PERSON_TYPE_NORMAL,    
    PERSON_TYPE_SUSPICION, 
    PERSON_TYPE_ARGXT,     
    PERSON_TYPE_VIP,       
    PERSON_TYPE_FATECHECK, 
    PERSON_TYPE_STAFF,     
} EM_PERSON_TYPE;
typedef enum
{
    CERTIFICATE_TYPE_UNKNOWN,
    CERTIFICATE_TYPE_IC,         
    CERTIFICATE_TYPE_PASSPORT,   
    CERTIFICATE_TYPE_OUTERGUARD, 
    CERTIFICATE_TYPE_STUDENT,    
    CERTIFICATE_TYPE_POLICE,     
    CERTIFICATE_TYPE_LAWYER,     
} EM_CERTIFICATE_TYPE;
typedef enum
{
    NET_FACERECONGNITIONDB_UNKOWN,
    NET_FACERECONGNITIONDB_ADD,            
    NET_FACERECONGNITIONDB_DELETE,         
    NET_FACERECONGNITIONDB_MODIFY,         
    NET_FACERECONGNITIONDB_DELETE_BY_UID,  
    NET_FACERECONGNITIONDB_DELETE_BY_UUID, 
} EM_OPERATE_FACERECONGNITIONDB_TYPE;
typedef enum
{
    NET_FACE_COMPARE_MODE_UNKOWN,
    NET_FACE_COMPARE_MODE_NORMAL, 
    NET_FACE_COMPARE_MODE_AREA,   
    NET_FACE_COMPARE_MODE_AUTO,   
} EM_FACE_COMPARE_MODE;
typedef enum
{
    NET_FACE_AREA_TYPE_UNKOWN,
    NET_FACE_AREA_TYPE_EYEBROW, 
    NET_FACE_AREA_TYPE_EYE,     
    NET_FACE_AREA_TYPE_NOSE,    
    NET_FACE_AREA_TYPE_MOUTH,   
    NET_FACE_AREA_TYPE_CHEEK,   
} EM_FACE_AREA_TYPE;
typedef enum
{
    NET_FACE_DB_TYPE_UNKOWN,
    NET_FACE_DB_TYPE_HISTORY,   
    NET_FACE_DB_TYPE_BLACKLIST, 
    NET_FACE_DB_TYPE_WHITELIST, 
    NET_FACE_DB_TYPE_ALARM,     
    NET_FACE_DB_TYPE_PASSERBY,  
} EM_FACE_DB_TYPE;
typedef enum
{
    NET_FACERECOGNITION_ALARM_TYPE_UNKOWN,
    NET_FACERECOGNITION_ALARM_TYPE_ALL,       
    NET_FACERECOGNITION_ALARM_TYPE_BLACKLIST, 
    NET_FACERECOGNITION_ALARM_TYPE_WHITELIST, 
} EM_FACERECOGNITION_ALARM_TYPE;
typedef enum
{
    EM_FACERECOGNITION_FACE_TYPE_UNKOWN,
    EM_FACERECOGNITION_FACE_TYPE_ALL,         
    EM_FACERECOGNITION_FACE_TYPE_REC_SUCCESS, 
    EM_FACERECOGNITION_FACE_TYPE_REC_FAIL,    
} EM_FACERECOGNITION_FACE_TYPE;
typedef enum __EM_FRAME_TYPE
{
    EM_FRAME_UNKOWN,      
    EM_FRAME_TYPE_MOTION, 
} EM_FRAME_TYPE;
typedef enum _CFG_INDEX
{
    CFG_GENERAL = 0,    
    CFG_COMM,           
    CFG_NET,            
    CFG_RECORD,         
    CFG_CAPTURE,        
    CFG_PTZ,            
    CFG_DETECT,         
    CFG_ALARM,          
    CFG_DISPLAY,        
    CFG_RESERVED,       
    CFG_TITLE = 10,     
    CFG_MAIL = 11,      
    CFG_EXCAPTURE = 12, 
    CFG_PPPOE = 13,     
    CFG_DDNS = 14,      
    CFG_SNIFFER = 15,   
    CFG_DSPINFO = 16,   
    CFG_COLOR = 126,    
    CFG_ALL,            
} CFG_INDEX;
typedef struct
{
    double dleft;   
    double dright;  
    double dtop;    
    double dbottom; 
} DH_DISPLAYRREGION;
typedef struct tagNET_TIME
{
    DWORD dwYear;   
    DWORD dwMonth;  
    DWORD dwDay;    
    DWORD dwHour;   
    DWORD dwMinute; 
    DWORD dwSecond; 
} NET_TIME, *LPNET_TIME;
typedef struct tagNET_TIME_EX
{
    DWORD dwYear;        
    DWORD dwMonth;       
    DWORD dwDay;         
    DWORD dwHour;        
    DWORD dwMinute;      
    DWORD dwSecond;      
    DWORD dwMillisecond; 
    DWORD dwUTC;         
    DWORD dwReserved[1]; 
} NET_TIME_EX, *LPNET_TIME_EX;
typedef struct tagNET_TIME_EX1
{
    DWORD dwHour;   
    DWORD dwMinute; 
    DWORD dwSecond; 
} NET_TIME_EX1;
typedef struct tagUTCTime
{
    unsigned int utc;       
    unsigned int tolerance; 
    char reserved[8];       
} NET_UTCTIME, *LPNET_UTCTIME;
typedef struct _DHDEVTIME
{
    DWORD second : 6; 
    DWORD minute : 6; 
    DWORD hour : 5;   
    DWORD day : 5;    
    DWORD month : 4;  
    DWORD year : 6;   
} DHDEVTIME, *LPDHDEVTIME;
typedef struct tagRANGE
{
    float fMax;     
    float fMin;     
    BOOL abStep;    
    float fStep;    
    BOOL abDefault; 
    float fDefault; 
    char reserved[16];
} RANGE;
typedef struct tagNET_FFCPERIOD_RANGE
{
    int nMaxN; 
    int nMaxP; 
    int nMin;  
    int nStep; 
    BYTE reserved[16];
} NET_FFCPERIOD_RANGE;
typedef struct __NET_CALLBACK_DATA
{
    int nResultCode;      
    char* pBuf;           
    int nRetLen;          
    LLONG lOperateHandle; 
    void* userdata;       
    char reserved[16];
} NET_CALLBACK_DATA, *LPNET_CALLBACK_DATA;
typedef struct tagNET_EVENT_INFO_EXTEND
{
    BOOL bRealUTC;           
    char byReserved[4];      
    NET_TIME_EX stuRealUTC;  
    BOOL bIsEventsTypeValid; 
    UINT szEventsType;       
    char szReserved[1012];   
} NET_EVENT_INFO_EXTEND;
typedef struct _tagVideoFrameParam
{
    BYTE encode;       
    BYTE frametype;    
    BYTE format;       
    BYTE size;         
    DWORD fourcc;      
    WORD width;        
    WORD height;       
    NET_TIME struTime; 
} tagVideoFrameParam;
typedef struct _tagCBPCMDataParam
{
    BYTE channels;  
    BYTE samples;   
    BYTE depth;     
    BYTE param1;    
    DWORD reserved; 
} tagCBPCMDataParam;
typedef enum tagEM_STREAMCONVERT_FRAMEDATA_TYPE
{
    EM_STREAMCONVERT_FRAMEDATA_UNKNOWN, 
    EM_STREAMCONVERT_FRAMEDATA_VIDEO,   
    EM_STREAMCONVERT_FRAMEDATA_AUDIO,   
} EM_STREAMCONVERT_FRAMEDATA_TYPE;
typedef struct tagNET_STREAMCONVERT_INFO
{
    EM_STREAMCONVERT_FRAMEDATA_TYPE emDataType; 
    void* pFrameInfo;                           
} NET_STREAMCONVERT_INFO;
typedef struct _DH_CHANNEL_OSDSTRING
{
    BOOL bEnable;                          
    DWORD dwPosition[MAX_STRING_LINE_LEN]; 
    char szStrings[MAX_STRING_LINE_LEN][MAX_PER_STRING_LEN]; 
} DH_CHANNEL_OSDSTRING;
typedef struct _tagCBYUVDataParam
{
    long nWidth;        
    long nHeight;       
    NET_TIME stNetTime; 
    DWORD reserved[2];  
} tagCBYUVDataParam;
typedef enum tagEmQueryRecordType
{
    EM_RECORD_TYPE_ALL = 0,            
    EM_RECORD_TYPE_ALARM = 1,          
    EM_RECORD_TYPE_MOTION_DETECT = 2,  
    EM_RECORD_TYPE_ALARM_ALL = 3,      
    EM_RECORD_TYPE_CARD = 4,           
    EM_RECORD_TYPE_CONDITION = 5,      
    EM_RECORD_TYPE_JOIN = 6,           
    EM_RECORD_TYPE_CARD_PICTURE = 8,   
    EM_RECORD_TYPE_PICTURE = 9,        
    EM_RECORD_TYPE_FIELD = 10,         
    EM_RECORD_TYPE_INTELLI_VIDEO = 11, 
    EM_RECORD_TYPE_NET_DATA = 15,      
    EM_RECORD_TYPE_TRANS_DATA = 16,    
    EM_RECORD_TYPE_IMPORTANT = 17,     
    EM_RECORD_TYPE_TALK_DATA = 18,     
    EM_RECORD_TYPE_POS = 19,           
    EM_RECORD_TYPE_INVALID = 256, 
} EM_QUERY_RECORD_TYPE;
typedef struct tagNET_RECORDFILE_INFO
{
    unsigned int ch;           
    char filename[124];        
    unsigned int framenum;     
    unsigned int size;         
    NET_TIME starttime;        
    NET_TIME endtime;          
    unsigned int driveno;      
    unsigned int startcluster; 
    BYTE nRecordFileType;      
    BYTE bImportantRecID;      
    BYTE bHint;                
    BYTE bRecType;             
} NET_RECORDFILE_INFO, *LPNET_RECORDFILE_INFO;
typedef enum _EM_RECORD_SNAP_FLAG_TYPE
{
    FLAG_TYPE_UNKNOW = -1,          
    FLAG_TYPE_TIMING,               
    FLAG_TYPE_MANUAL,               
    FLAG_TYPE_MARKED,               
    FLAG_TYPE_EVENT,                
    FLAG_TYPE_MOSAIC,               
    FLAG_TYPE_CUTOUT,               
    FLAG_TYPE_LEAVE_WORD,           
    FLAG_TYPE_TALKBACK_LOCAL_SIDE,  
    FLAG_TYPE_TALKBACK_REMOTE_SIDE, 
    FLAG_TYPE_SYNOPSIS_VIDEO,       
    FLAG_TYPE_ORIGINAL_VIDEO,       
    FLAG_TYPE_PRE_ORIGINAL_VIDEO,   
    FLAG_TYPE_BLACK_PLATE,          
    FLAG_TYPE_ORIGINAL_PIC,         
    FLAG_TYPE_CARD,                 
    FLAG_TYPE_MAX = 128,
} EM_RECORD_SNAP_FLAG_TYPE;
typedef struct tagNET_RECORDFILE_INFOEX
{
    NET_RECORDFILE_INFO stuRecordFileInfo;     
    BYTE bReserved1[4];                        
    int nEventLists[256];                      
    int nEventCount;                           
    EM_RECORD_SNAP_FLAG_TYPE emFlagsList[128]; 
    int nFlagCount;                            
    BOOL bRealUTC;                             
    NET_TIME stuStartTimeRealUTC;              
    NET_TIME stuEndTimeRealUTC;                
    BYTE bReserved[452];                       
} NET_RECORDFILE_INFOEX, *LPNET_RECORDFILE_INFOEX;
typedef struct tagNET_SynopsisFileInfo
{
    DWORD dwSize;              
    char szFileName[MAX_PATH]; 
    NET_TIME stuStartTime;     
    NET_TIME stuEndTime;       
    unsigned int nTaskID;      
    BYTE bFileType;            
    BYTE byMode;               
    BYTE bReserved[2];
    unsigned int nFileLength;      
    unsigned int nStartFileOffset; 
    unsigned int nEndFileOffset;   
    int nChannel;                  
    int nCluster;                  
} NET_SYNOPSISFILE_INFO, *LPNET_SYNOPSISFILE_INFO;
typedef int(CALLBACK* fDataCallBack)(LLONG lRealHandle, DWORD dwDataType, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef int(CALLBACK* fOriDataCallBack)(LLONG lRealHandle, DWORD dwDataType, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef void(CALLBACK* fDownLoadPosCallBack)(LLONG lPlayHandle, DWORD dwTotalSize, DWORD dwDownLoadSize, LDWORD dwUser);
typedef struct __NET_MULTI_PLAYBACK_PARAM
{
    DWORD dwSize;
    int nChannels[DH_MAX_MULTIPLAYBACK_CHANNEL_NUM]; 
    int nChannelNum;                                 
    int nType;                                       
    NET_TIME stStartTime;                            
    NET_TIME stEndTime;                              
    int nFPS;                                        
    int nBitRate;                                    
    char szResolution[DH_MAX_CAPTURE_SIZE_NUM];      
    int nWaitTime;                                   
    HWND hWnd;                                       
    fDataCallBack fDownLoadDataCallBack;             
    LDWORD dwDataUser;                               
    fDownLoadPosCallBack cbDownLoadPos;              
    LDWORD dwPosUser;                                
} NET_MULTI_PLAYBACK_PARAM;
typedef struct
{
    BYTE flag[32];     
    BYTE Reserved[64]; 
} NET_RECORD_STATUS, *LPNET_RECORD_STATUS;
typedef void(CALLBACK* fQueryRecordFileCallBack)(LLONG lQueryHandle, LPNET_RECORDFILE_INFO pFileinfos, int nFileNum, int nError, void* pReserved, LDWORD dwUser);
typedef void(CALLBACK* fQueryRecordFileCallBackEx)(LLONG lQueryHandle, LPNET_RECORDFILE_INFOEX pFileinfos, int nFileNum, int nError, void* pReserved, LDWORD dwUser);
typedef enum tagNET_EM_COMBINATION_MODE
{
    EM_COMBINATION_MODE_DEFAULT = 0, 
    EM_COMBINATION_MODE_YES,         
    EM_COMBINATION_MODE_NO,          
} NET_EM_COMBINATION_MODE;
typedef struct tagNET_IN_START_QUERY_RECORDFILE
{
    DWORD dwSize;                          
    int nChannelId;                        
    int nRecordFileType;                   
    int nStreamType;                       
    NET_TIME stStartTime;                  
    NET_TIME stEndTime;                    
    char* pchCardid;                       
    int nWaitTime;                         
    fQueryRecordFileCallBack cbFunc;       
    LDWORD dwUser;                         
    BOOL bByTime;                          
    NET_EM_COMBINATION_MODE emCombination; 
    fQueryRecordFileCallBackEx cbFuncEx;   
    BOOL bOnlySupportRealUTC;              
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
} NET_IN_START_QUERY_RECORDFILE;
typedef struct tagNET_OUT_START_QUERY_RECORDFILE
{
    DWORD dwSize;       
    LLONG lQueryHandle; 
} NET_OUT_START_QUERY_RECORDFILE;
typedef enum tagEM_OBJECT_TYPE
{
    EM_OBJECT_TYPE_UNKNOWN = -1, 
    EM_OBJECT_TYPE_FACE,         
    EM_OBJECT_TYPE_HUMAN,        
    EM_OBJECT_TYPE_VECHILE,      
    EM_OBJECT_TYPE_NOMOTOR,      
    EM_OBJECT_TYPE_ALL,          
} EM_OBJECT_TYPE;
typedef struct tagEVENT_INFO
{
    int nEvent;                         
    EM_OBJECT_TYPE arrayObejctType[16]; 
    int nObjectCount;                   
    BYTE byReserved[512];               
} EVENT_INFO;
typedef enum tagEM_SUBCLASSID_TYPE
{
    EM_SUBCLASSID_UNKNOWN,      
    EM_SUBCLASSID_ASSISTDEVICE, 
} EM_SUBCLASSID_TYPE;
typedef enum tagEM_ALGORITHM_TYPE
{
    EM_ALGORITHM_TYPE_UNKNOWN,    
    EM_ALGORITHM_TYPE_AES256_OFB, 
    EM_ALGORITHM_TYPE_SM4_OFB,    
} EM_ALGORITHM_TYPE;
typedef enum tagEM_IS_ENCRYPT
{
    EM_IS_ENCRYPT_UNKNOWN, 
    EM_IS_ENCRYPT_YES,     
    EM_IS_ENCRYPT_NO,      
} EM_IS_ENCRYPT;
typedef enum tagEM_IS_CURRENT_VK
{
    EM_IS_CURRENT_VK_UNKNOWN, 
    EM_IS_CURRENT_VK_CURRENT, 
    EM_IS_CURRENT_VK_PRE,     
} EM_IS_CURRENT_VK;
typedef struct tagNET_VKINFO
{
    char szVKID[128];                  
    char szVK[128];                    
    EM_ALGORITHM_TYPE emAlgorithmType; 
    int nRetVKIDLen;                   
    int nRetVKLen;                     
    EM_IS_ENCRYPT emIsEncrypt;         
    EM_IS_CURRENT_VK emIsCurrent;      
    BYTE byReserved[492];              
} NET_VKINFO;
typedef void(CALLBACK* fVKInfoCallBack)(LLONG lRealHandle, NET_VKINFO* pBuffer, DWORD dwError, LDWORD dwUser, void* pReserved);
typedef struct tagNET_IN_PLAY_BACK_BY_TIME_INFO
{
    NET_TIME stStartTime;                  
    NET_TIME stStopTime;                   
    HWND hWnd;                             
    fDownLoadPosCallBack cbDownLoadPos;    
    LDWORD dwPosUser;                      
    fDataCallBack fDownLoadDataCallBack;   
    LDWORD dwDataUser;                     
    int nPlayDirection;                    
    int nWaittime;                         
    EVENT_INFO* pstuEventInfo;             
    UINT nEventInfoCount;                  
    EM_SUBCLASSID_TYPE emSubClass;         
    fVKInfoCallBack pVKInfoCallBack;       
    LDWORD dwVKInfoUser;                   
    fOriDataCallBack pOriDataCallBack;     
    LDWORD dwOriDataUser;                  
    BOOL bOnlySupportRealUTC;              
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
    BYTE bReserved[940 - 2 * POINTERSIZE]; 
} NET_IN_PLAY_BACK_BY_TIME_INFO;
typedef struct tagNET_OUT_PLAY_BACK_BY_TIME_INFO
{
    BYTE bReserved[1024]; 
} NET_OUT_PLAY_BACK_BY_TIME_INFO;
typedef enum tagEM_PLAY_BACK_SPEED
{
    EM_PLAY_BACK_SPEED_SLOW_32 = -5, 
    EM_PLAY_BACK_SPEED_SLOW_16 = -4, 
    EM_PLAY_BACK_SPEED_SLOW_8,       
    EM_PLAY_BACK_SPEED_SLOW_4,       
    EM_PLAY_BACK_SPEED_SLOW_2,       
    EM_PLAY_BACK_SPEED_NORMAL = 0,   
    EM_PLAY_BACK_SPEED_FAST_2,       
    EM_PLAY_BACK_SPEED_FAST_4,       
    EM_PLAY_BACK_SPEED_FAST_8,       
    EM_PLAY_BACK_SPEED_FAST_16,      
    EM_PLAY_BACK_SPEED_FAST_32,      
} EM_PLAY_BACK_SPEED;
typedef struct
{
    unsigned short left;   
    unsigned short right;  
    unsigned short top;    
    unsigned short bottom; 
} MotionDetectRect;
typedef struct
{
    MotionDetectRect motion_rect; 
    NET_TIME stime;               
    NET_TIME etime;               
    BYTE bStart;                  
    BYTE reserved[116];
} IntelligentSearchPlay, *LPIntelligentSearchPlay;
typedef struct
{
    int nChnCount;                 
    NET_TIME stuFurthestTime[16];  
    DWORD dwFurthestTimeAllSize;   
    NET_TIME* pStuFurthestTimeAll; 
    BYTE bReserved[376];           
} NET_FURTHEST_RECORD_TIME;
typedef struct __NET_IN_FIND_FRAMEINFO_PRAM
{
    DWORD dwSize;                      
    BOOL abFileName;                   
    char szFileName[MAX_PATH];         
    NET_RECORDFILE_INFO stuRecordInfo; 
    DWORD dwFramTypeMask;              
    BOOL bSendByUTCTime;               
    NET_TIME stuStartTimeRealUTC;      
    NET_TIME stuEndTimeRealUTC;        
} NET_IN_FIND_FRAMEINFO_PRAM;
typedef struct __NET_OUT_FIND_FRAMEINFO_PRAM
{
    DWORD dwSize;      
    LLONG lFindHandle; 
} NET_OUT_FIND_FRAMEINFO_PRAM;
typedef struct __NET_MOTION_FRAME_INFO
{
    DWORD dwSize;                                       
    NET_TIME stuTime;                                   
    int nMotionRow;                                     
    int nMotionCol;                                     
    BYTE byRegion[DH_MOTION_ROW][DH_MOTION_COL];        
    int nHumanMotionRow;                                
    int nHumanMotionCol;                                
    BYTE byHumanRegion[DH_MOTION_ROW][DH_MOTION_COL];   
    int nVehicleMotionRow;                              
    int nVehicleMotionCol;                              
    BYTE byVehicleRegion[DH_MOTION_ROW][DH_MOTION_COL]; 
} NET_MOTION_FRAME_INFO;
typedef struct __NET_FILE_FRAME_INFO
{
    DWORD dwSize;                 
    int nChannelId;               
    NET_TIME stuStartTime;        
    NET_TIME stuEndTime;          
    WORD wRecType;                
    WORD wFameType;               
    void* pFramInfo;              
    NET_TIME stuStartTimeRealUTC; 
    NET_TIME stuEndTimeRealUTC;   
} NET_FILE_FRAME_INFO;
typedef struct __NET_IN_FINDNEXT_FRAMEINFO_PRAM
{
    DWORD dwSize;   
    int nFramCount; 
} NET_IN_FINDNEXT_FRAMEINFO_PRAM;
typedef struct __NET_OUT_FINDNEXT_FRAMEINFO_PRAM
{
    DWORD dwSize;                    
    NET_FILE_FRAME_INFO* pFramInfos; 
    int nMaxFramCount;               
    int nRetFramCount;               
} NET_OUT_FINDNEXT_FRAMEINFO_PRAM;
#define MAX_LABEL_ARRAY 1024
typedef struct tagNET_FILE_STREAM_TAG_INFO
{
    DWORD dwSize;                            
    NET_TIME stuTime;                        
    char szContext[DH_COMMON_STRING_64];     
    char szUserName[DH_COMMON_STRING_32];    
    char szChannelName[DH_COMMON_STRING_64]; 
    int nDuration;                           
} NET_FILE_STREAM_TAG_INFO;
typedef enum tagNET_FILE_STREAM_TYPE
{
    NET_FILE_STREAM_TYPE_UNKNOWN = 0, 
    NET_FILE_STREAM_TYPE_NORMAL,      
    NET_FILE_STREAM_TYPE_ALARM,       
    NET_FILE_STREAM_TYPE_DETECTION,   
} NET_FILE_STREAM_TYPE;
typedef struct tagNET_FILE_STREAM_TAG_INFO_EX
{
    DWORD dwSize;
    NET_TIME stuTime;                        
    int nMillisecond;                        
    int nSequence;                           
    char szContext[DH_COMMON_STRING_64];     
    NET_TIME stuStartTime;                   
    NET_TIME stuEndTime;                     
    NET_FILE_STREAM_TYPE emType;             
    char szUserName[DH_COMMON_STRING_32];    
    char szChannelName[DH_COMMON_STRING_64]; 
    int nDuration;                           
} NET_FILE_STREAM_TAG_INFO_EX;
typedef struct tagNET_IN_FILE_STREAM_TAGS_INFO
{
    DWORD dwSize;                          
    int nArrayCount;                       
    NET_FILE_STREAM_TAG_INFO* pstuTagInfo; 
} NET_IN_FILE_STREAM_TAGS_INFO;
typedef struct tagNET_OUT_FILE_STREAM_TAGS_INFO
{
    DWORD dwSize; 
} NET_OUT_FILE_STREAM_TAGS_INFO;
typedef struct tagNET_IN_FILE_STREAM_GET_TAGS_INFO
{
    DWORD dwSize; 
} NET_IN_FILE_STREAM_GET_TAGS_INFO;
typedef struct tagNET_OUT_FILE_STREAM_GET_TAGS_INFO
{
    DWORD dwSize;                             
    int nMaxNumber;                           
    int nRetTagsNumber;                       
    NET_FILE_STREAM_TAG_INFO_EX* pstuTagInfo; 
} NET_OUT_FILE_STREAM_GET_TAGS_INFO;
typedef struct tagNET_IN_FILE_STREAM_FILTER_TAGS_INFO
{
    DWORD dwSize;                            
    char szContext[DH_COMMON_STRING_64];     
    char szUserName[DH_COMMON_STRING_32];    
    char szChannelName[DH_COMMON_STRING_64]; 
} NET_IN_FILE_STREAM_FILTER_TAGS_INFO;
typedef struct tagNET_TAGMANAGER_SUB_TAG_INFO
{
    NET_TIME stuTime;                       
    char szSubTagName[DH_COMMON_STRING_64]; 
    BYTE byReserved[512];                   
} NET_TAGMANAGER_SUB_TAG_INFO;
typedef struct tagNET_TAGMANAGER_TAG_INFO
{
    char szContext[DH_COMMON_STRING_64];                    
    NET_TIME stuStartTime;                                  
    NET_TIME stuEndTime;                                    
    int nSubTagVaildNum;                                    
    NET_TAGMANAGER_SUB_TAG_INFO stuSubTag[MAX_SUB_TAG_NUM]; 
    BYTE byReserved[1024];                                  
} NET_TAGMANAGER_TAG_INFO;
typedef struct tagNET_FINDTAGS_CONDITION_INFO
{
    char szContext[DH_COMMON_STRING_64]; 
    BYTE byReserved[1024];               
} NET_FINDTAGS_CONDITION_INFO;
typedef struct tagNET_IN_FINDTAGS_INFO
{
    DWORD dwSize;
    BOOL bConditionEnable;                    
    NET_FINDTAGS_CONDITION_INFO stuCondition; 
    UINT lToken;                              
    int nOffset;                              
    int nCount;                               
} NET_IN_FINDTAGS_INFO;
typedef struct tagNET_OUT_FINDTAGS_INFO
{
    DWORD dwSize;
    UINT lToken;                          
    int nTotal;                           
    int nMaxTagsNumber;                   
    int nRetTagsNumber;                   
    NET_TAGMANAGER_TAG_INFO* pstuTagInfo; 
} NET_OUT_FINDTAGS_INFO;
typedef struct tagNET_TAGMANAGER_TAGSTATE_INFO
{
    int nChannel;                                           
    char szContext[DH_COMMON_STRING_64];                    
    NET_TIME stuStartTime;                                  
    int nSubTagVaildNum;                                    
    NET_TAGMANAGER_SUB_TAG_INFO stuSubTag[MAX_SUB_TAG_NUM]; 
    char szContextEx[DH_COMMON_STRING_256];                 
    BYTE byReserved[768];                                   
} NET_TAGMANAGER_TAGSTATE_INFO;
typedef struct tagNET_IN_TAGMANAGER_GETTAGSTATE_INFO
{
    DWORD dwSize;
} NET_IN_TAGMANAGER_GETTAGSTATE_INFO;
typedef struct tagNET_OUT_TAGMANAGER_GETTAGSTATE_INFO
{
    DWORD dwSize;                                   
    int nState;                                     
    int nMaxTagStaeNumber;                          
    int nRetTagStaeNumber;                          
    NET_TAGMANAGER_TAGSTATE_INFO* pstuTagStateInfo; 
} NET_OUT_TAGMANAGER_GETTAGSTATE_INFO;
typedef struct tagNET_IN_TAGMANAGER_STARTTAG_INFO
{
    DWORD dwSize;                           
    int nChannel;                           
    char szContext[DH_COMMON_STRING_64];    
    char szContextEx[DH_COMMON_STRING_256]; 
    bool bIsUsingContextEx;                 
} NET_IN_TAGMANAGER_STARTTAG_INFO;
typedef struct tagNET_OUT_TAGMANAGER_STARTTAG_INFO
{
    DWORD dwSize;
} NET_OUT_TAGMANAGER_STARTTAG_INFO;
typedef struct tagNET_IN_TAGMANAGER_SETSUBTAG_INFO
{
    DWORD dwSize;
    int nChannel;                           
    char szSubTagName[DH_COMMON_STRING_64]; 
} NET_IN_TAGMANAGER_SETSUBTAG_INFO;
typedef struct tagNET_OUT_TAGMANAGER_SETSUBTAG_INFO
{
    DWORD dwSize;
} NET_OUT_TAGMANAGER_SETSUBTAG_INFO;
typedef struct tagNET_IN_TAGMANAGER_STOPTAG_INFO
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_TAGMANAGER_STOPTAG_INFO;
typedef struct tagNET_OUT_TAGMANAGER_STOPTAG_INFO
{
    DWORD dwSize;
} NET_OUT_TAGMANAGER_STOPTAG_INFO;
typedef struct tagNET_IN_TAGMANAGER_GETCAPS_INFO
{
    DWORD dwSize; 
} NET_IN_TAGMANAGER_GETCAPS_INFO;
typedef struct tagNET_OUT_TAGMANAGER_GETCAPS_INFO
{
    DWORD dwSize;   
    UINT nMaxCount; 
} NET_OUT_TAGMANAGER_GETCAPS_INFO;
typedef struct tagNET_IN_TAGMANAGER_STARTFIND_INFO
{
    DWORD dwSize;                         
    int nChannel;                         
    char szContext[DH_COMMON_STRING_256]; 
    NET_TIME stuStartTime;                
    NET_TIME stuEndTime;                  
} NET_IN_TAGMANAGER_STARTFIND_INFO;
typedef struct tagNET_OUT_TAGMANAGER_STARTFIND_INFO
{
    DWORD dwSize;    
    int nTotalCount; 
} NET_OUT_TAGMANAGER_STARTFIND_INFO;
typedef struct tagNET_IN_TAGMANAGER_DOFIND_INFO
{
    DWORD dwSize;     
    int nBeginNumber; 
    int nCount;       
} NET_IN_TAGMANAGER_DOFIND_INFO;
typedef struct tagNET_FINDSUBTAG_INFO
{
    NET_TIME stuStartTime;                  
    char szSubTagName[DH_COMMON_STRING_64]; 
    BYTE byReserved[128];                   
} NET_FINDSUBTAG_INFO;
typedef struct tagNET_FINDTAG_INFO
{
    char szContext[DH_COMMON_STRING_256];  
    NET_TIME stuStartTime;                 
    NET_TIME stuEndTime;                   
    int nSubtagInfoCount;                  
    NET_FINDSUBTAG_INFO stuSubTagInfo[20]; 
    BYTE byReserved[1020];                 
} NET_FINDTAG_INFO;
typedef struct tagNET_OUT_TAGMANAGER_DOFIND_INFO
{
    DWORD dwSize;                  
    UINT nMaxTagInfoCount;         
    UINT nRetTagInfoCount;         
    NET_FINDTAG_INFO* pstuTagInfo; 
} NET_OUT_TAGMANAGER_DOFIND_INFO;
typedef struct
{
    int channelcount;
    int alarminputcount;
    unsigned char alarm[16];         
    unsigned char motiondection[16]; 
    unsigned char videolost[16];     
} NET_CLIENT_STATE;
typedef struct
{
    int channelcount;
    int alarminputcount;
    unsigned char alarm[32];         
    unsigned char motiondection[32]; 
    unsigned char videolost[32];     
    BYTE bReserved[32];
} NET_CLIENT_STATE_EX;
typedef struct
{
    DWORD dwSize;
    int alarminputcount;
    DWORD dwAlarmState[DH_MAX_CHANMASK]; 
} NET_CLIENT_ALARM_STATE;
typedef struct
{
    DWORD dwSize;
    int channelcount;
    DWORD dwAlarmState[DH_MAX_CHANMASK]; 
} NET_CLIENT_VIDEOLOST_STATE;
typedef struct
{
    DWORD dwSize;
    int channelcount;
    DWORD dwAlarmState[DH_MAX_CHANMASK]; 
} NET_CLIENT_MOTIONDETECT_STATE;
typedef struct
{
    DWORD dwSize;
    int channelcount;
    DWORD dwAlarmState[DH_MAX_CHANMASK]; 
} NET_CLIENT_VIDEOBLIND_STATE;
typedef struct
{
    DWORD dwSize;
    int nChannelID; 
    BOOL bAlarm;    
    int nLevel;     
} NET_CLIENT_DETAILEDMOTION_STATE;
typedef struct
{
    unsigned short index; 
    unsigned short state; 
} ALARM_CONTROL;
typedef struct
{
    unsigned short index; 
    unsigned short mode;  
    BYTE bReserved[28];
} TRIGGER_MODE_CONTROL;
typedef struct
{
    int decoderNo;             
    unsigned short alarmChn;   
    unsigned short alarmState; 
} DECODER_ALARM_CONTROL;
typedef struct __ALARM_NO_RESPONSE_INFO
{
    DWORD dwSize;
    char szCallID[DH_MAX_CALLID]; 
} ALARM_NO_RESPONSE_INFO;
typedef struct
{
    DWORD dwAlarmType;                              
    DWORD dwAlarmMask;                              
    char szGlobalIP[DH_MAX_IPADDR_LEN];             
    char szDomainName[DH_MAX_DOMAIN_NAME_LEN];      
    int nPort;                                      
    char szAlarmOccurTime[DH_ALARM_OCCUR_TIME_LEN]; 
    BYTE bAlarmDecoderIndex;                        
    BYTE bChannelIndex;                             
    BYTE bReserved[2];
    DWORD dwHighAlarmMask; 
    BYTE bReservedSpace[8];
    char szGlobalIPEx[MAX_LOCAL_IP_LEN]; 
} NEW_ALARM_UPLOAD;
typedef struct tagALARM_UPLOAD_PIRDETECTION_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_PIRDETECTION_INFO;
typedef struct tagALARM_UPLOAD_PIRTAMPER_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_PIRTAMPER_INFO;
typedef struct tagALARM_UPLOAD_PIRCLOAK_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_PIRCLOAK_INFO;
typedef struct tagALARM_UPLOAD_PIRSHOCK_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_PIRSHOCK_INFO;
typedef struct tagALARM_UPLOAD_PIRFAILURE_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_PIRFAILURE_INFO;
typedef struct tagALARM_UPLOAD_PIRBATTERYLOW_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_PIRBATTERYLOW_INFO;
typedef struct tagALARM_UPLOAD_PIRMISSINGCALL_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_PIRMISSINGCALL_INFO;
typedef struct tagALARM_UPLOAD_VIDEO_UNFOCUS_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_VIDEO_UNFOCUS_INFO;
typedef struct tagALARM_UPLOAD_ALARMPIR_INFO
{
    int nIndex;                     
    NET_TIME_EX UTC;                
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    BYTE byReserved[1024];          
} ALARM_UPLOAD_ALARMPIR_INFO;
typedef struct tagALARM_UPLOAD_HEARTBEAT_INFO
{
    char szGlobalIP[DH_MAX_IPADDR_LEN];  
    char szMAC[DH_MACADDR_LEN];          
    int nKeepAlive;                      
    NET_TIME_EX stuTime;                 
    char szGlobalIPEx[MAX_LOCAL_IP_LEN]; 
    BYTE byReserved[960];                
} ALARM_UPLOAD_HEARTBEAT_INFO;
typedef struct tagALARM_UPLOAD_ONLINE_INFO
{
    char szGlobalIP[DH_MAX_IPADDR_LEN];  
    int nPort;                           
    NET_TIME_EX stuTime;                 
    BOOL bOnLine;                        
    char szGlobalIPEx[MAX_LOCAL_IP_LEN]; 
    BYTE byReserved[956];                
} ALARM_UPLOAD_ONLINE_INFO;
typedef struct __ALARM_UPLOAD_SMOKESENSOR_INFO
{
    DWORD dwSize;
    char szGlobalIP[DH_MAX_IPADDR_LEN];             
    char szDomainName[DH_MAX_DOMAIN_NAME_LEN];      
    int nPort;                                      
    char szAlarmOccurTime[DH_ALARM_OCCUR_TIME_LEN]; 
    int nChannel;                                   
    BYTE byHighTemperature;                         
    BYTE bySmoke;                                   
    char szGlobalIPEx[MAX_LOCAL_IP_LEN];            
} ALARM_UPLOAD_SMOKESENSOR_INFO;
typedef enum tagNET_CROSSREGION_DIRECTION_INFO
{
    EM_CROSSREGION_DIRECTION_UNKNOW = 0,
    EM_CROSSREGION_DIRECTION_ENTER,     
    EM_CROSSREGION_DIRECTION_LEAVE,     
    EM_CROSSREGION_DIRECTION_APPEAR,    
    EM_CROSSREGION_DIRECTION_DISAPPEAR, 
} NET_CROSSREGION_DIRECTION_INFO;
typedef struct __ALARM_UPLOAD_IVS_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                           
    char szDomainName[DH_MAX_DOMAIN_NAME_LEN];  
    int nChannelID;                             
    char szType[MAX_PATH];                      
    int nState;                                 
    char szRuleName[DH_COMMON_STRING_128];      
    char szIPAddress[DH_MAX_IPADDR_LEN_EX];     
    int nPort;                                  
    char szMacAddress[DH_MACADDR_LEN];          
    char szPicFilePath[MAX_PATH];               
    int nPicFileNum;                            
    int nUploadPicFileNum;                      
    DWORD dwChannelMask;                        
    NET_CROSSREGION_DIRECTION_INFO emDirection; 
} ALARM_UPLOAD_IVS_INFO;
typedef struct _ALARM_UPLOAD_ALARMEX_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                          
    char szDomainName[DH_MAX_DOMAIN_NAME_LEN]; 
    DWORD dwAlarmMask;                         
    char szDevMac[DH_MACADDR_LEN];             
    char szPicFilePath[MAX_PATH];              
    int nPicFileNum;                           
    int nUploadPicFileNum;                     
    char szAreaName[DH_COMMON_STRING_128];     
    DWORD dwChannelMask;                       
} ALARM_UPLOAD_ALARMEX_INFO;
typedef enum _EM_LOGIN_FAILED_TYPE
{
    LOGIN_FAILED_UNKNOW = 0,
    LOGIN_FAILED_PASSWORD,   
    LOGIN_FAILED_USER,       
    LOGIN_FAILED_TIMEOUT,    
    LOGIN_FAILED_RELOGGIN,   
    LOGIN_FAILED_LOCKED,     
    LOGIN_FAILED_BLACKLIST,  
    LOGIN_FAILED_ERROR_BUSY, 
    LOGIN_FAILED_VERSION,    
} EM_LOGIN_FAILED_TYPE;
typedef struct __ALARM_UPLOAD_LOGIN_FAILED_INFO
{
    DWORD dwSize;
    EM_LOGIN_FAILED_TYPE emFailedType;    
    char szDeviceIP[DH_COMMON_STRING_64]; 
    DWORD nDevicePort;                    
} ALARM_UPLOAD_LOGIN_FAILED_INFO;
typedef struct
{
    int nChannel;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserved[12];
} ALARM_RECORDING_CHANGED;
typedef enum tagNET_STREAM_TYPE
{
    NET_EM_STREAM_ERR,      
    NET_EM_STREAM_MAIN,     
    NET_EM_STREAM_EXTRA_1,  
    NET_EM_STREAM_EXTRA_2,  
    NET_EM_STREAM_EXTRA_3,  
    NET_EM_STREAM_SNAPSHOT, 
    NET_EM_STREAM_OBJECT,   
    NET_EM_STREAM_AUTO,     
    NET_EM_STREAM_PREVIEW,  
    NET_EM_STREAM_NONE,     
} NET_STREAM_TYPE;
typedef struct __ALARM_RECORD_CHANGED_INFO_EX
{
    int nAction;                              
    int nChannel;                             
    char szStoragePoint[DH_COMMON_STRING_64]; 
    NET_STREAM_TYPE emStreamType;             
    char szUser[DH_COMMON_STRING_128];        
    BYTE byReserved[828];                     
} ALARM_RECORD_CHANGED_INFO_EX;
typedef struct tagALARM_POLICE_RECORD_PROGRESS_INFO
{
    int nAction;           
    int nUsbSlot;          
    UINT nTotalSize;       
    UINT nTransferSize;    
    BYTE byReserved[1024]; 
} ALARM_POLICE_RECORD_PROGRESS_INFO;
typedef enum tagEM_MPT_STATE
{
    EM_MPT_STATE_UNKNOWN,                    
    EM_MPT_STATE_PLUGIN_OUT,                 
    EM_MPT_STATE_PLUGIN_IN_WORKING_PROPERLY, 
    EM_MPT_STATE_PLUGIN_IN_STORAGE_ERROR,    
} EM_MPT_STATE;
typedef struct tagALARM_POLICE_PLUGIN_INFO
{
    int nAction;                              
    int nUsbSlot;                             
    EM_MPT_STATE eState;                      
    char szSerialNumber[DH_COMMON_STRING_32]; 
    BYTE byReserved[1024];                    
} ALARM_POLICE_PLUGIN_INFO;
typedef struct tagALARM_GPS_NOT_ALIGNED_INFO
{
    int nAction;              
    NET_TIME_EX stuTime;      
    NET_TIME_EX stuStartTime; 
    BYTE byReserved[988];     
} ALARM_GPS_NOT_ALIGNED_INFO;
typedef struct tagALARM_WIRELESS_NOT_CONNECTED_INFO
{
    int nAction;           
    NET_TIME_EX stuTime;   
    BYTE byReserved[1024]; 
} ALARM_WIRELESS_NOT_CONNECTED_INFO;
typedef enum tagEM_OFFLINE_LOGSYNC_STATE
{
    EM_OFFLINE_LOGSYNC_STATE_UNKNOWN,   
    EM_OFFLINE_LOGSYNC_STATE_SUCCEEDED, 
    EM_OFFLINE_LOGSYNC_STATE_FAILED,    
} EM_OFFLINE_LOGSYNC_STATE;
typedef struct tagALARM_OFFLINE_LOGSYNC_INFO
{
    int nAction;                      
    NET_TIME_EX stuTime;              
    int nDevAddrs;                    
    EM_OFFLINE_LOGSYNC_STATE emState; 
    BYTE byReserved[1024];            
} ALARM_OFFLINE_LOGSYNC_INFO;
#define NET_MAX_WINDINGID_NUM 8
typedef struct __ALARM_WINGDING_INFO
{
    int nDriveWayID;  
    int nWindingID;   
    NET_TIME stuTime; 
    int nState;       
    DWORD dwChannel;  
    char reserve[28];
    int nWindingIDNum;                      
    int nWindingIDs[NET_MAX_WINDINGID_NUM]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
} ALARM_WINGDING_INFO;
typedef struct __ALARM_TRAF_CONGESTION_INFO
{
    int nDriveWayID;                      
    int nCongestionLevel;                 
    NET_TIME stuTime;                     
    int nState;                           
    DWORD dwChannel;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserve[28];
} ALARM_TRAF_CONGESTION_INFO;
typedef struct __ALARM_TRAF_EXCEPTION_INFO
{
    int nDriveWayID;                      
    NET_TIME stuTime;                     
    int nState;                           
    DWORD dwChannel;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserve[28];
} ALARM_TRAF_EXCEPTION_INFO;
typedef struct __ALARM_EQUIPMENT_FILL_INFO
{
    int nDriveWayID;                      
    NET_TIME stuTime;                     
    int nState;                           
    DWORD dwChannel;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserve[28];                     
} ALARM_EQUIPMENT_FILL_INFO;
typedef struct __ALARM_ARM_DISARM_STATE_INFO
{
    BYTE bState;                          
    char reserve1[3];                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserve[32];                     
} ALARM_ARM_DISARM_STATE_INFO;
typedef struct __DHDEV_3GFLOW_EXCEED_STATE_INFO
{
    BYTE bState;                          
    char reserve1[3];                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserve[32];                     
} DHDEV_3GFLOW_EXCEED_STATE_INFO;
typedef struct __ALARM_SPEED_LIMIT
{
    char szType[DH_SPEEDLIMIT_TYPE_LEN];   
    int iSpeedLimit;                       
    int iSpeed;                            
    char szCrossingID[DH_MAX_CROSSING_ID]; 
    DWORD dwLongitude;                     
    DWORD dwLatidude;                      
    DHDEVTIME stTime;                      
    BYTE bOffline;                         
    char reserve1[3];                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx;  
    char reserve[24];
} ALARM_SPEED_LIMIT;
typedef struct __ALARM_OVER_LOADING
{
    NET_TIME stuCurTime;                      
    DWORD dwLatidude;                         
    DWORD dwLongitude;                        
    char szDriverNo[DH_VEHICLE_DRIVERNO_LEN]; 
    DWORD dwCurSpeed;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;     
    BYTE byReserved[128];
} ALARM_OVER_LOADING;
typedef struct __ALARM_HARD_BRAKING
{
    NET_TIME stuCurTime;                      
    DWORD dwLatidude;                         
    DWORD dwLongitude;                        
    char szDriverNo[DH_VEHICLE_DRIVERNO_LEN]; 
    DWORD dwCurSpeed;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;     
    BYTE byReserved[128];
} ALARM_HARD_BRAKING;
typedef struct __ALARM_SMOKE_SENSOR
{
    NET_TIME stuCurTime;                  
    int nChannel;                         
    BYTE byHighTemperature;               
    BYTE bySmoke;                         
    char reserve1[2];                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReservrd[128];
} ALARM_SMOKE_SENSOR;
typedef struct _LIGHT_INFO
{
    BYTE byDirection;    
    BYTE byState;        
    BYTE byReserved[62]; 
} LIGHT_INFO;
typedef struct __ALARM_TRAFFIC_LIGHT_FAULT
{
    NET_TIME stTime;                      
    int nInfoNumber;                      
    LIGHT_INFO stLightInfo[8];            
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[128];                 
} ALARM_TRAFFIC_LIGHT_FAULT;
typedef struct __ALARM_TRAFFIC_FLUX_LANE_INFO
{
    NET_TIME stuCurTime;                  
    int nLane;                            
    int nState;                           
    int nFlow;                            
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[124];                 
} ALARM_TRAFFIC_FLUX_LANE_INFO;
typedef struct __ALARM_SIP_STATE
{
    int nChannelID;
    BYTE byStatus;                        
    char reserve1[3];                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE bReserved[64];                   
} ALARM_SIP_STATE;
typedef struct __ALARM_VEHICLE_INFO_UPLOAD
{
    char szType[DH_VEHICLE_TYPE_LEN];         
    char szCheckInfo[DH_VEHICLE_INFO_LEN];    
    char szDirverNO[DH_VEHICLE_DRIVERNO_LEN]; 
    DHDEVTIME stTime;                         
    BYTE bOffline;                            
    char reserve1[3];                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;     
    char reserved[64];
} ALARM_VEHICLE_INFO_UPLOAD;
typedef struct __ALARM_CARD_RECORD_INFO_UPLOAD
{
    int nChannel;                          
    BOOL bEnable;                          
    char szCardInfo[DH_MAX_CARD_INFO_LEN]; 
    NET_TIME stuTime;                      
    BOOL bPreviewOverlayEn;                
    BYTE byOverlayPos;                     
    char reserve1[3];                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx;  
    char reserved[64];
} ALARM_CARD_RECORD_INFO_UPLOAD;
typedef enum __ATMTradeTypes
{
    TRADE_TYPE_INC = 0, 
    TRADE_TYPE_WDC,     
    TRADE_TYPE_CKT,     
    TRADE_TYPE_INQ,     
    TRADE_TYPE_CWD,     
    TRADE_TYPE_PIN,     
    TRADE_TYPE_TFR,     
    TRADE_TYPE_DEP,     
    TRADE_TYPE_NCINQ,   
    TRADE_TYPE_NCDEP,   
    TRADE_TYPE_OTHERS,  
    TRADE_TYPE_ALL,     
} DH_eATMTradeTypes;
typedef struct __ALARM_ATM_INFO_UPLOAD_CHNL
{
    int nChannel;                  
    char szATMID[32];              
    char szCardNo[32];             
    char szTradetime[32];          
    DH_eATMTradeTypes emTradeType; 
    int nAmount;                   
    BYTE byRerved[32];             
} ALARM_ATM_INFO_UPLOAD_CHNL;
typedef struct __ALARM_ATM_INFO_UPLOAD
{
    int nCnt;
    ALARM_ATM_INFO_UPLOAD_CHNL m_stAtmInfo[DH_MAX_CHANNUM];
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_ATM_INFO_UPLOAD;
typedef struct __ALARM_CAMERA_MOVE_INFO
{
    int nChannelNum;                                
    unsigned char alarmChannels[DH_MAX_CHANNUM_EX]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
    BYTE byReserved[128];
} ALARM_CAMERA_MOVE_INFO;
typedef struct __ALARM_DETAILEDMOTION_CHNL_INFO
{
    DWORD dwSize;
    int nChannelID;                       
    BOOL bAlarm;                          
    int nLevel;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_DETAILEDMOTION_CHNL_INFO;
typedef struct __ALARM_STORAGE_FAILURE
{
    DWORD dwSize;                                   
    UINT ActionType;                                
    char szProtocol[DH_MAX_STRING_LEN];             
    char szServerAddr[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    DWORD dwPort;                                   
    NET_TIME stuTime;                               
    int nChannel;                                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} ALARM_STORAGE_FAILURE;
typedef enum tagEM_DATE_SOURCE
{
    EM_DATE_SOURCE_GPS,                
    EM_DATE_SOURCE_INERTIALNAVIGATION, 
} EM_DATE_SOURCE;
typedef struct _NET_GPS_STATUS_INFO
{
    NET_TIME revTime;                       
    char DvrSerial[50];                     
    BYTE byRserved1[6];                     
    double longitude;                       
    double latidude;                        
    double height;                          
    double angle;                           
    double speed;                           
    WORD starCount;                         
    BYTE byRserved2[2];                     
    NET_THREE_STATUS_BOOL antennaState;     
    NET_THREE_STATUS_BOOL orientationState; 
    int workStae;                           
    int nAlarmCount;             
    int nAlarmState[128];        
    BYTE bOffline;               
    BYTE bSNR;                   
    BYTE byRserved3[2];          
    EM_DATE_SOURCE emDateSource; 
    int nSignalStrength;         
    float fHdop;                 
    float fPdop;                 
    int nMileage;                
    BYTE byRserved[96];          
} NET_GPS_STATUS_INFO, *LPNET_GPS_STATUS_INFO;
typedef struct __ALARM_FRONTDISCONNET_INFO
{
    DWORD dwSize;                         
    int nChannelID;                       
    int nAction;                          
    NET_TIME stuTime;                     
    char szIpAddress[MAX_PATH];           
    NET_GPS_STATUS_INFO stGPSStatus;      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_FRONTDISCONNET_INFO;
typedef struct tagALARM_KEYPAD_TAMPER_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX stuTime;                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_KEYPAD_TAMPER_INFO;
typedef struct tagALARM_KEYPAD_FAILURE_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX stuTime;                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_KEYPAD_FAILURE_INFO;
typedef struct tagALARM_NOT_CLEAR_CAR_INFO
{
    int nAction;           
    int nChannelID;        
    NET_TIME_EX stuTime;   
    char szReserved[1024]; 
} ALARM_NOT_CLEAR_CAR_INFO;
typedef struct tagALARM_WIRELESS_DEVBATTERY_LOSS_INFO
{
    int nAction;         
    int nChannelID;      
    NET_TIME_EX stuTime; 
    char szAreaName[32];                  
    char szModel[32];                     
    char szName[32];                      
    char szSN[32];                        
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_WIRELESS_DEVBATTERY_LOSS_INFO;
typedef struct tagALARM_SIREN_TAMPER_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX stuTime;                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_SIREN_TAMPER_INFO;
typedef struct tagALARM_KEYPAD_LOCK_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX stuTime;                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_KEYPAD_LOCK_INFO;
typedef struct tagALARM_ALARMNET_INFO
{
    int nAction;         
    int nChannelID;      
    NET_TIME_EX stuTime; 
    char byReserved[4];  
    char szName[128];                     
    char szTrigger[32];                   
    char szDesc[128];                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_ALARMNET_INFO;
typedef struct tagNET_ALARM_PIC_UPLOAD_ALARM_INFO
{
    int nAction;         
    int nChannelID;      
    NET_TIME_EX stuTime; 
    char byReserved[4];  
    char szProtocol[16];      
    char szPicDirectory[128]; 
    char szReserved[1024];    
} NET_ALARM_PIC_UPLOAD_ALARM_INFO;
typedef struct tagNET_ALARM_CHANG_BAI_VEHICLE_PROHIBITED_INFO
{
    int nAction;         
    int nChannelID;      
    NET_TIME_EX stuTime; 
    char byReserved[4];  
    NET_TIME stuVehicleProhibitedStartTime; 
    NET_TIME stuVehicleProhibitedEndTime;   
    NET_GPS_STATUS_INFO stGPSStatus;        
    char szReserved[1024];                  
} NET_ALARM_CHANG_BAI_VEHICLE_PROHIBITED_INFO;
typedef enum tagEM_USER_PASS_TYPE
{
    EM_USER_PASS_TYPE_UNKNOWN,
    EM_USER_PASS_TYPE_ENTRY, 
    EM_USER_PASS_TYPE_EXIT,  
} EM_USER_PASS_TYPE;
typedef struct tagNET_ALARM_USER_PASS_CONFIRM_INFO
{
    int nAction;            
    int nChannelID;         
    NET_TIME_EX stuTime;    
    BOOL bRealUTC;          
    NET_TIME_EX stuRealUTC; 
    char byReserved[4];     
    UINT nCount;              
    EM_USER_PASS_TYPE emType; 
    char szReserved[1024];    
} NET_ALARM_USER_PASS_CONFIRM_INFO;
typedef struct tagNET_ALARM_INSUFFICIENT_QUOTA_SPACE_INFO
{
    int nAction;           
    int nChannelID;        
    NET_TIME_EX stuTime;   
    char szReserved[1020]; 
} NET_ALARM_INSUFFICIENT_QUOTA_SPACE_INFO;
typedef struct tagNET_ALARM_REID_CLUSTER_STATE_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    int nClusterState;                    
    int nClusterDate;                     
    int nClusterType;                     
    NET_TIME_EX stuDealTime;              
    char szReserved[1020];                
} NET_ALARM_REID_CLUSTER_STATE_INFO;
typedef struct tagNET_SAMPO_PARAMTER
{
    char szName[128];     
    float fValue;         
    char szReserved[512]; 
} NET_SAMPO_PARAMTER;
typedef struct tagNET_ALARM_SAMPO_USER_INFORMATION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    NET_SAMPO_PARAMTER stuParamter[6];    
    int nParamterCount;                   
    char szReserved[1020];                
} NET_ALARM_SAMPO_USER_INFORMATION_INFO;
typedef struct tagNET_ALARM_SAMPO_SERVICE_ALARM_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    char szServiceAlarm[128];             
    char szReserved[1024];                
} NET_ALARM_SAMPO_SERVICE_ALARM_INFO;
typedef enum tagEM_SIA_EVENT_FORMAT
{
    EM_SIA_EVENT_FORMAT_UNKNOWN,          
    EM_SIA_EVENT_FORMAT_SIA_DC_04,        
    EM_SIA_EVENT_FORMAT_CONTACT_ID_DC_05, 
} EM_SIA_EVENT_FORMAT;
typedef struct tagNET_ALARM_SIA_EVENT_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    EM_SIA_EVENT_FORMAT emSIAFormat;      
    char szMessageData[32];               
    char szURL[512];                      
    char szAreaName[128];                 
    char szUserID[32];                    
    char szUserName[128];                 
    char szReserved[1024];                
} NET_ALARM_SIA_EVENT_INFO;
typedef struct tagNET_ALARM_AP_CONNECT_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szMacAddress[32];                
    char szReserved[1024];                
} NET_ALARM_AP_CONNECT_INFO;
typedef struct tagNET_ALARM_DGS_ERROR_REPORT
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    UINT nErrorCode;                      
    char szReserved[1024];                
} NET_ALARM_DGS_ERROR_REPORT;
typedef struct tagNET_ALARM_RESIDENT_ALARM
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    UINT nTime;                           
    int nTriggerType;                     
    char szMac[32];                       
    char szReserved[988];                 
} NET_ALARM_RESIDENT_ALARM;
typedef struct __ALARM_BATTERYLOWPOWER_INFO
{
    DWORD dwSize;                         
    int nAction;                          
    int nBatteryLeft;                     
    NET_TIME stTime;                      
    int nChannelID;                       
    NET_GPS_STATUS_INFO stGPSStatus;      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_BATTERYLOWPOWER_INFO;
typedef struct __ALARM_TEMPERATURE_INFO
{
    DWORD dwSize;                           
    char szSensorName[DH_MACHINE_NAME_NUM]; 
    int nChannelID;                         
    int nAction;                            
    float fTemperature;                     
    NET_TIME stTime;                        
    NET_GPS_STATUS_INFO stuGPSStatus;       
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
} ALARM_TEMPERATURE_INFO;
typedef struct __ALARM_TIREDDRIVE_INFO
{
    DWORD dwSize;                         
    int nAction;                          
    int nDriveTime;                       
    NET_TIME stTime;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_TIREDDRIVE_INFO;
typedef struct __ALARM_LOST_RECORD
{
    DWORD dwSize;                         
    UINT ActionType;                      
    UINT nChannelID;                      
    UINT nStreamType;                     
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_LOST_RECORD;
typedef struct __ALARM_HIGH_CPU
{
    DWORD dwSize;                         
    UINT ActionType;                      
    UINT nUsed;                           
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_HIGH_CPU;
typedef struct __ALARM_LOST_NETPACKET
{
    DWORD dwSize;                         
    UINT ActionType;                      
    UINT nChannelID;                      
    UINT nStreamType;                     
    char szRemoteIP[DH_MAX_IPADDR_LEN];   
    DWORD dwRemotePort;                   
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_LOST_NETPACKET;
typedef struct __ALARM_HIGH_MEMORY
{
    DWORD dwSize;                         
    UINT ActionType;                      
    UINT nUsed;                           
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_HIGH_MEMORY;
typedef struct __DH_BLACKLIST_SNAP_INFO
{
    DWORD dwSize;
    char szPlateNumber[32];               
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} DH_BLACKLIST_SNAP_INFO;
typedef struct __ALARM_DISK_FLUX
{
    DWORD dwSize;
    DWORD dwAction;                       
    DWORD dwDataFlux;                     
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_DISK_FLUX;
typedef struct __ALARM_NET_FLUX
{
    DWORD dwSize;
    DWORD dwAction;                       
    DWORD dwDataFlux;                     
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_NET_FLUX;
typedef struct __ALARM_FAN_SPEED
{
    DWORD dwSize;
    DWORD dwAction;                       
    DWORD dwIndex;                        
    char szName[DH_MACHINE_NAME_NUM];     
    NET_TIME stuTime;                     
    DWORD dwCurrent;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_FAN_SPEED;
typedef struct __ALARM_DISK_INFO
{
    DWORD dwSize;
    DWORD nChannel;                       
    DWORD nHDDNumber;                     
    DWORD nHDDState;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_DISK_INFO;
typedef struct __ALARM_FILE_SYSTEM_INFO
{
    DWORD dwSize;
    char szMountDir[MAX_PATH];            
    DWORD nState;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_FILE_SYSTEM_INFO;
typedef struct __ALARM_REMOTE_ALARM_INFO
{
    DWORD dwSize;
    int nChannelID;                       
    int nState;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_REMOTE_ALARM_INFO;
typedef struct __ALARM_IVS_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                     
    int nChannelID;                       
    char szType[MAX_PATH];                
    int nState;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_IVS_INFO;
typedef struct __ALARM_GOODS_WEIGHT_INFO
{
    DWORD dwSize;
    int nAction;            
    int nAlarmType;         
    DWORD dwGoodsWeight;    
    DWORD dwSelfWeight;     
    DWORD dwTotalWeight;    
    DWORD dwStandardWeight; 
    DWORD dwWeightScale;    
    DWORD dwMaxGoodsWeight; 
    DWORD dwMinGoodsWeight; 
    DWORD dwAlarmWeight;    
    int nWeightChange;      
    int nCheckTime;         
} ALARM_GOODS_WEIGHT_INFO;
typedef struct __ALARM_GOODS_WEIGHT_UPLOAD_INFO
{
    DWORD dwSize;
    DWORD dwGoodsWeight;                
    DWORD dwSelfWeight;                 
    DWORD dwTotalWeight;                
    DWORD dwStandardWeight;             
    DWORD dwWeightScale;                
    char szCardNO[DH_MAX_CARDINFO_LEN]; 
} ALARM_GOODS_WEIGHT_UPLOAD_INFO;
typedef struct __ALARM_DISKBURNED_FULL_INFO
{
    DWORD dwSize;
    int nIndex;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_DISKBURNED_FULL_INFO;
typedef struct tagALARM_STORAGE_LOW_SPACE_INFO
{
    DWORD dwSize;
    int nAction;                          
    char szName[DH_EVENT_NAME_LEN];       
    char szDevice[DH_STORAGE_NAME_LEN];   
    char szGroup[DH_STORAGE_NAME_LEN];    
    INT64 nTotalSpace;                    
    INT64 nFreeSpace;                     
    int nPercent;                         
    NET_TIME_EX stuTime;                  
    NET_GPS_STATUS_INFO stGPSStatus;      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_STORAGE_LOW_SPACE_INFO;
typedef enum __EM_STORAGE_ERROR
{
    STORAGE_ERROR_NONE,                   
    STORAGE_ERROR_PATITION,               
    STORAGE_ERROR_INIT_FS,                
    STORAGE_ERROR_READ_DATA,              
    STORAGE_ERROR_WRITE_DATA,             
    STORAGE_ERROR_RAID_FAILED,            
    STORAGE_ERROR_RAID_DEGRADED,          
    STORAGE_ERROR_ISCSI_FAILED,           
    STORAGE_ERROR_POOL_FAILED,            
    STORAGE_ERROR_DISK_FAILED,            
    STORAGE_ERROR_FS_ABNORMAL,            
    STORAGE_ERROR_RECOGNITION_FAILED,     
    STORAGE_ERROR_CAPACITY_FAILED,        
    STORAGE_ERROR_PREDICT_DISK_FAILED,    
    STORAGE_ERROR_IO_ERROR,               
    STORAGE_ERROR_IO_HUNG,                
    STORAGE_ERROR_IO_SLOW,                
    STORAGE_ERROR_CONTROL_OR_OTHER_ERROR, 
} EM_STORAGE_ERROR;
typedef struct __ALARM_STORAGE_FAILURE_EX
{
    DWORD dwSize;
    int nAction;                          
    char szName[DH_EVENT_NAME_LEN];       
    char szDevice[DH_STORAGE_NAME_LEN];   
    char szGroup[DH_STORAGE_NAME_LEN];    
    char szPath[MAX_PATH];                
    EM_STORAGE_ERROR emError;             
    int nPhysicNo;                        
    NET_TIME_EX stuTime;                  
    NET_GPS_STATUS_INFO stGPSStatus;      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_STORAGE_FAILURE_EX;
typedef struct __ALARM_RECORD_FAILED_INFO
{
    DWORD dwSize;
    int nAction; 
    int nIndex;  
} ALARM_RECORD_FAILED_INFO;
typedef struct __ALARM_STORAGE_BREAK_DOWN_INFO
{
    DWORD dwSize;
    int nAction; 
} ALARM_STORAGE_BREAK_DOWN_INFO;
typedef enum tagEM_STORAGE_HOT_PLUG_ACTION
{
    HOT_PLUG_ACTION_UNKNOW = 0,
    HOT_PLUG_ACTION_ADD,    
    HOT_PLUG_ACTION_REMOVE, 
} EM_STORAGE_HOT_PLUG_ACTION;
typedef struct __ALARM_STORAGE_HOT_PLUG_INFO
{
    int nAction;                                
    EM_STORAGE_HOT_PLUG_ACTION emHotPLugAction; 
    char szDevice[DH_STORAGE_NAME_LEN];         
    char szMediaType[DH_COMMON_STRING_32];      
    char szBusType[DH_COMMON_STRING_32];        
    char szMountOn[DH_COMMON_STRING_128];       
    int nPhysicNo;                              
    int nLogicNo;                               
    BYTE bReserved[256];                        
} ALARM_STORAGE_HOT_PLUG_INFO;
typedef struct tagALARM_FLOW_RATE_INFO
{
    int nAction;         
    int nChannelID;      
    UINT nFlowRate;      
    BYTE bReserved[512]; 
} ALARM_FLOW_RATE_INFO;
typedef enum tagEM_NET_UPS_STATUS
{
    EM_NET_UPS_SYS_SIGN = 0,  
    EM_NET_UPS_SYS_SHUTDOWN,  
    EM_NET_UPS_SYS_TEST,      
    EM_NET_UPS_SYS_TYPE,      
    EM_NET_UPS_SYS_FAULT,     
    EM_NET_UPS_ELE_SUPPLY,    
    EM_NET_UPS_VOL_LOW,       
    EM_NET_UPS_BYPASS_STATUS, 
    EM_NET_UPS_MAX = 64,      
} EM_NET_UPS_STATUS;
typedef struct tagNET_UPS_INFO
{
    DWORD dwSize;
    float fInputVoltage;                    
    float fInputAbnormalVoltage;            
    float fOutputVoltage;                   
    float fOutputCurrent;                   
    float fInputFrequency;                  
    float fVoltage;                         
    float fTemp;                            
    BYTE bStatusInfo[EM_NET_UPS_MAX];       
    char szVersionInfo[DH_MAX_VERSION_STR]; 
} NET_UPS_INFO;
typedef struct tagALARM_COMM_PORT_EVENT_INFO
{
    DWORD dwSize;
    UINT nEventAction;      
    NET_UPS_INFO stUPSInfo; 
} ALARM_COMM_PORT_EVENT_INFO;
typedef struct __ALARM_VIDEO_ININVALID_INFO
{
    DWORD dwSize;   
    int nChannelID; 
} ALARM_VIDEO_ININVALID_INFO;
typedef struct tagALARM_STORAGE_NOT_EXIST_INFO
{
    DWORD dwSize;
    int nAction;                       
    char szGroup[DH_STORAGE_NAME_LEN]; 
    NET_TIME stuTime;                  
    NET_GPS_STATUS_INFO stGPSStatus;   
} ALARM_STORAGE_NOT_EXIST_INFO;
typedef enum __EM_NETABORT_EVENT_TYPE
{
    EM_NETABORT_EVENT_TYPE_WIRE = 0, 
    EM_NETABORT_EVENT_TYPE_WIRELESS, 
    EM_NETABORT_EVENT_TYPE_3G,       
} EM_NETABORT_EVENT_TYPE;
typedef struct tagALARM_NETABORT_INFO
{
    DWORD dwSize;
    int nAction;                           
    EM_NETABORT_EVENT_TYPE emNetAbortType; 
    NET_TIME stuTime;                      
    char szInterface[DH_MAX_ETH_NAME]; 
} ALARM_NETABORT_INFO;
typedef struct tagALARM_IP_CONFLICT_INFO
{
    DWORD dwSize;
    int nAction;         
    NET_TIME stuTime;    
    char szInterface[8]; 
    int nMacNum;         
    char szMac[8][18];   
} ALARM_IP_CONFLICT_INFO;
typedef struct tagALARM_MAC_CONFLICT_INFO
{
    DWORD dwSize;
    int nAction;         
    NET_TIME stuTime;    
    char szInterface[8]; 
} ALARM_MAC_CONFLICT_INFO;
typedef enum __EM_POWER_TYPE
{
    EM_POWER_TYPE_MAIN = 0, 
    EM_POWER_TYPE_BACKUP,   
} EM_POWER_TYPE;
typedef enum __EM_POWERFAULT_EVENT_TYPE
{
    EM_POWERFAULT_EVENT_UNKNOWN = -1,              
    EM_POWERFAULT_EVENT_LOST = 0,                  
    EM_POWERFAULT_EVENT_LOST_ADAPTER,              
    EM_POWERFAULT_EVENT_LOW_BATTERY,               
    EM_POWERFAULT_EVENT_LOW_ADAPTER,               
    EM_POWERFAULT_EVENT_LOW_ADAPTER_LOST_BATTERY,  
    EM_POWERFAULT_EVENT_LESS_ADAPTER_LOW_BATTERY,  
    EM_POWERFAULT_EVENT_LESS_ADAPTER_LOST_BATTERY, 
    EM_POWERFAULT_EVENT_LOST_ADAPTER_LOST_BATTERY, 
    EM_POWERFAULT_EVENT_LOW_ADAPTER_LOW_BATTERY,   
} EM_POWERFAULT_EVENT_TYPE;
typedef struct tagALARM_POWERFAULT_INFO
{
    DWORD dwSize;
    EM_POWER_TYPE emPowerType;                  
    EM_POWERFAULT_EVENT_TYPE emPowerFaultEvent; 
    NET_TIME stuTime;                           
    int nAction;                                
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
} ALARM_POWERFAULT_INFO;
typedef struct tagALARM_UPLOAD_KEYPAD_TAMPER_INFO
{
    DWORD dwSize;
    NET_TIME stuTime; 
    int nAction;      
} ALARM_UPLOAD_KEYPAD_TAMPER_INFO;
typedef struct tagALARM_UPLOAD_PROGRAM_MODE_INFO
{
    DWORD dwSize;
    NET_TIME stuTime; 
    int nAction;      
} ALARM_UPLOAD_PROGRAM_MODE_INFO;
typedef struct tagALARM_UPLOAD_PSTN_PERIODIC_TEST_INFO
{
    DWORD dwSize;
    NET_TIME stuTime; 
    int nAction;      
} ALARM_UPLOAD_PSTN_PERIODIC_TEST_INFO;
typedef enum tagNET_SENSE_METHOD
{
    NET_SENSE_UNKNOWN = -1,          
    NET_SENSE_DOOR = 0,              
    NET_SENSE_PASSIVEINFRA,          
    NET_SENSE_GAS,                   
    NET_SENSE_SMOKING,               
    NET_SENSE_WATER,                 
    NET_SENSE_ACTIVEFRA,             
    NET_SENSE_GLASS,                 
    NET_SENSE_EMERGENCYSWITCH,       
    NET_SENSE_SHOCK,                 
    NET_SENSE_DOUBLEMETHOD,          
    NET_SENSE_THREEMETHOD,           
    NET_SENSE_TEMP,                  
    NET_SENSE_HUMIDITY,              
    NET_SENSE_WIND,                  
    NET_SENSE_CALLBUTTON,            
    NET_SENSE_GASPRESSURE,           
    NET_SENSE_GASCONCENTRATION,      
    NET_SENSE_GASFLOW,               
    NET_SENSE_OTHER,                 
    NET_SENSE_OIL,                   
    NET_SENSE_MILEAGE,               
    NET_SENSE_URGENCYBUTTON,         
    NET_SENSE_STEAL,                 
    NET_SENSE_PERIMETER,             
    NET_SENSE_PREVENTREMOVE,         
    NET_SENSE_DOORBELL,              
    NET_SENSE_ALTERVOLT,             
    NET_SENSE_DIRECTVOLT,            
    NET_SENSE_ALTERCUR,              
    NET_SENSE_DIRECTCUR,             
    NET_SENSE_RSUGENERAL,            
    NET_SENSE_RSUDOOR,               
    NET_SENSE_RSUPOWEROFF,           
    NET_SENSE_TEMP1500,              
    NET_SENSE_TEMPDS18B20,           
    NET_SENSE_HUMIDITY1500,          
    NET_SENSE_INFRARED,              
    NET_SENSE_FIREALARM,             
    NET_SENSE_CO2,                   
    NET_SNESE_SOUND,                 
    NET_SENSE_PM25,                  
    NET_SENSE_SF6,                   
    NET_SENSE_O3,                    
    NET_SENSE_AMBIENTLIGHT,          
    NET_SENSE_SIGNINBUTTON,          
    NET_SENSE_LIQUIDLEVEL,           
    NET_SENSE_DISTANCE,              
    NET_SENSE_WATERFLOW,             
    NET_SENSE_KEYPRESSS,             
    NET_SENSE_TEMP_AND_HUMI_SM7820B, 
    NET_SENSE_WATT_HUR_DDSU666,      
    NET_SENSE_CURTAIN_SENSOR,        
    NET_SENSE_CASEPREVENTREMOVE,     
    NET_SENSE_NUM                    
} NET_SENSE_METHOD;
typedef enum tagEM_PROFILE_ALARM_TRANSMIT_DEVSRC_TYPE
{
    EM_PROFILE_ALARM_TRANSMIT_DEVSRC_TYPE_UNKNOWN,   
    EM_PROFILE_ALARM_TRANSMIT_DEVSRC_TYPE_DIGIT,     
    EM_PROFILE_ALARM_TRANSMIT_DEVSRC_TYPE_ANALOG,    
    EM_PROFILE_ALARM_TRANSMIT_DEVSRC_TYPE_SMARTLOCK, 
} EM_PROFILE_ALARM_TRANSMIT_DEVSRC_TYPE;
typedef enum tagEM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE
{
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_UNKNOWN,         
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_PREVENTREMOVE,   
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_LOWERPOWER,      
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_KEY,             
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_DURESS,          
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_BATTERY_LOST,    
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_PSTNB_BREAKLINE, 
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_EMERGENCY_HELP,  
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE_ALARMIN,         
} EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE;
typedef struct tagNET_PROFILE_ALARM_TRANSMIT_LOWERPOWER
{
    int nPercent;        
    char szReserved[64]; 
} NET_PROFILE_ALARM_TRANSMIT_LOWERPOWER;
typedef struct tagNET_PROFILE_ALARM_TRANSMIT_ALARMIN
{
    int nChannel;        
    char szReserved[64]; 
} NET_PROFILE_ALARM_TRANSMIT_ALARMIN;
typedef struct tagNET_PROFILE_ALARM_TRANSMIT_CLOUDINFO
{
    int nVideoLinkChannel; 
    char szReserved[64];   
} NET_PROFILE_ALARM_TRANSMIT_CLOUDINFO;
typedef struct tagNET_PROFILE_ALARM_TRANSMIT_ALARM_INFO
{
    NET_PROFILE_ALARM_TRANSMIT_LOWERPOWER stuLowerPower; 
    NET_PROFILE_ALARM_TRANSMIT_ALARMIN stuAlarmIn;       
    NET_PROFILE_ALARM_TRANSMIT_CLOUDINFO stuCloudInfo;   
    char szReserved[64];                                 
} NET_PROFILE_ALARM_TRANSMIT_ALARM_INFO;
typedef struct tagALARM_UPLOAD_PROFILE_ALARM_TRANSMIT_INFO
{
    DWORD dwSize;                                       
    int nAction;                                        
    NET_TIME_EX stuTime;                                
    UINT nRealUTC;                                      
    char szUserID[32];                                  
    NET_SENSE_METHOD emSenseMethod;                     
    EM_PROFILE_ALARM_TRANSMIT_DEVSRC_TYPE emDevSrcType; 
    EM_PROFILE_ALARM_TRANSMIT_ALARM_TYPE emAlarmType;   
    NET_PROFILE_ALARM_TRANSMIT_ALARM_INFO stuAlarmInfo; 
    char szSN[32];                                      
    char szSnapURL[128];                                
} ALARM_UPLOAD_PROFILE_ALARM_TRANSMIT_INFO;
typedef struct tagALARM_UPLOAD_USER_LOCK_INFO
{
    DWORD dwSize;         
    int nAction;          
    NET_TIME_EX stuTime;  
    char szDeviceIP[40];  
    char szDeviceMac[24]; 
    char szUserName[128];      
    char szGroup[128];         
    char szIllegalLoginIP[40]; 
} ALARM_UPLOAD_USER_LOCK_INFO;
typedef enum tagEM_ALARM_CHASSISINTRUDED_DEV_TYPE
{
    EM_ALARM_CHASSISINTRUDED_DEV_UNKNOWN,              
    EM_ALARM_CHASSISINTRUDED_DEV_CONTROLLER,           
    EM_ALARM_CHASSISINTRUDED_DEV_RS485EXPANSIONMODULE, 
    EM_ALARM_CHASSISINTRUDED_DEV_MBUSEXPANSIONMODULE,  
    EM_ALARM_CHASSISINTRUDED_DEV_KEYBOARD,             
    EM_ALARM_CHASSISINTRUDED_DEV_SIREN,                
} EM_ALARM_CHASSISINTRUDED_DEV_TYPE;
typedef struct tagALARM_CHASSISINTRUDED_INFO
{
    DWORD dwSize;
    int nAction;                                 
    NET_TIME stuTime;                            
    int nChannelID;                              
    char szReaderID[DH_COMMON_STRING_32];        
    UINT nEventID;                               
    char szSN[32];                               
    BOOL bRealUTC;                               
    NET_TIME_EX RealUTC;                         
    EM_ALARM_CHASSISINTRUDED_DEV_TYPE emDevType; 
} ALARM_CHASSISINTRUDED_INFO;
typedef struct tagALARM_ALARMEXTENDED_INFO
{
    DWORD dwSize;
    int nChannelID;   
    int nAction;      
    NET_TIME stuTime; 
} ALARM_ALARMEXTENDED_INFO;
typedef enum __EM_TALKING_CALLER
{
    EM_TALKING_CALLER_UNKNOWN = 0, 
    EM_TALKING_CALLER_PLATFORM,    
    EM_TALKING_CALLER_LEADER,      
    EM_TALKING_CALLER_SECURITY,    
} EM_TALKING_CALLER;
typedef enum tagTALKINGINVITE_REMOTEDEVICE_PROTOCOL
{
    EM_TALKINGINVITE_REMOTEDEVICE_PROTOCOL_UNKNOWN = 0,
    EM_TALKINGINVITE_REMOTEDEVICE_PROTOCOL_HIKVISION
} EM_TALKINGINVITE_REMOTEDEVICE_PROTOCOL;
#define MAX_REMOTEDEVICEINFO_IPADDR_LEN 128     
#define MAX_REMOTEDEVICEINFO_USERNAME_LEN 128   
#define MAX_REMOTEDEVICEINFO_USERPSW_LENGTH 128 
typedef struct tagTALKINGINVITE_REMOTEDEVICEINFO
{
    char szIP[MAX_REMOTEDEVICEINFO_IPADDR_LEN];           
    int nPort;                                            
    EM_TALKINGINVITE_REMOTEDEVICE_PROTOCOL emProtocol;    
    char szUser[MAX_REMOTEDEVICEINFO_USERNAME_LEN];       
    char szPassword[MAX_REMOTEDEVICEINFO_USERPSW_LENGTH]; 
    char szReverse[1024];                                 
} TALKINGINVITE_REMOTEDEVICEINFO;
typedef struct tagALARM_TALKING_INVITE_INFO
{
    DWORD dwSize;
    EM_TALKING_CALLER emCaller;                         
    NET_TIME stuTime;                                   
    char szCallID[DH_COMMON_STRING_64];                 
    int nLevel;                                         
    TALKINGINVITE_REMOTEDEVICEINFO stuRemoteDeviceInfo; 
    BOOL bRealUTC;                                      
    NET_TIME_EX RealUTC;                                
} ALARM_TALKING_INVITE_INFO;
typedef struct tagALARM_TALKING_IGNORE_INVITE_INFO
{
    DWORD dwSize;
    NET_TIME_EX UTC;     
    BOOL bRealUTC;       
    NET_TIME_EX RealUTC; 
} ALARM_TALKING_IGNORE_INVITE_INFO;
typedef struct tagALARM_TALKING_HANGUP_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;    
    char szRoomNo[128];  
    BOOL bRealUTC;       
    NET_TIME_EX RealUTC; 
    char szCaller[32];   
} ALARM_TALKING_HANGUP_INFO;
typedef struct tagNET_ALARM_TALKING_PHONE_CALLING_INFO
{
    DWORD dwSize;
    int nChannelID;                     
    int nAction;                        
    NET_TIME_EX stuUTC;                 
    NET_EVENT_INFO_EXTEND stuEventinfo; 
    char szNetcardName[16];             
    char szPhonenum[32];                
} NET_ALARM_TALKING_PHONE_CALLING_INFO;
typedef struct tagNET_ALARM_NO_PASSAGE_INFO
{
    DWORD dwSize;                       
    int nChannelID;                     
    int nAction;                        
    NET_TIME_EX stuUTC;                 
    NET_EVENT_INFO_EXTEND stuEventinfo; 
} NET_ALARM_NO_PASSAGE_INFO;
typedef enum tagEM_USERMANAGER_IMAGE_TYPE
{
    EM_USERMANAGER_IMAGE_TYPE_UNKNOWN = -1, 
    EM_USERMANAGER_IMAGE_TYPE_LOCAL,        
    EM_USERMANAGER_IMAGE_TYPE_SCENE,        
    EM_USERMANAGER_IMAGE_TYPE_FACE,         
    EM_USERMANAGER_IMAGE_TYPE_INFRARED,     
    EM_USERMANAGER_IMAGE_TYPE_ENTOURAGE,    
    EM_USERMANAGER_IMAGE_TYPE_THERMOGRAM,   
} EM_USERMANAGER_IMAGE_TYPE;
typedef struct tagNET_USERMANAGER_IMAGE_INFO
{
    unsigned int nOffset;                  
    unsigned int nLength;                  
    unsigned short nWidth;                 
    unsigned short nHeight;                
    EM_USERMANAGER_IMAGE_TYPE emImageType; 
    char szReserved[64];                   
} NET_USERMANAGER_IMAGE_INFO;
typedef struct tagNET_ALARM_HOSPITAL_TALK_CONTROL_INFO
{
    DWORD dwSize;                         
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    char szCitizenIDNo[20];                     
    char szCitizenName[128];                    
    char szPatientIdentity[20];                 
    UINT nMode;                                 
    UINT nStatus;                               
    UINT nImageInfoNum;                         
    NET_USERMANAGER_IMAGE_INFO stuImageInfo[6]; 
    UINT nCardType;                             
} NET_ALARM_HOSPITAL_TALK_CONTROL_INFO;
typedef struct tagNET_ALARM_BLUETOOTH_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    int nStatus;           
    int nPower;            
    int nResult;           
    BYTE byReserved[1024]; 
} NET_ALARM_BLUETOOTH_INFO;
typedef struct tagNET_ALARM_SENSITIVE_WORDS_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    UINT nAlarmType;       
    BYTE byReserved[1024]; 
} NET_ALARM_SENSITIVE_WORDS_INFO;
typedef enum tagEM_DISK_NUMBER_CHANGE_TYPE
{
    EM_DISK_CHANGE_TYPE_UNKNOW, 
    EM_DISK_CHANGE_TYPE_ADD,    
    EM_DISK_CHANGE_TYPE_DEL,    
} EM_DISK_NUMBER_CHANGE_TYPE;
typedef struct tagNET_ALARM_DISK_NUMBER_CHANGE_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    UINT nPreDiskNumber;               
    UINT nCurDiskNumber;               
    EM_DISK_NUMBER_CHANGE_TYPE emType; 
    BYTE byReserved[1020];             
} NET_ALARM_DISK_NUMBER_CHANGE_INFO;
typedef enum tagEM_GUARD_EVENT_STATE
{
    EM_GUARD_EVENT_STATE_UNKNOWN = 0, 
    EM_GUARD_EVNET_STATE_ONGUARD,     
    EM_GUARD_EVENT_STATE_OFFGUARD     
} EM_GUARD_EVENT_STATE;
typedef struct tagALARM_GUARD_UPDATE_INFO
{
    DWORD dwSize;
    EM_GUARD_EVENT_STATE emEventState;          
    int nIDCount;                               
    int nIDArray[DH_MAX_GUARD_DETECT_ID_COUNT]; 
    NET_TIME stuTime;                           
} ALARM_GUARD_UPDATE_INFO;
typedef struct tagALARM_GUARD_DETECT_INFO
{
    DWORD dwSize;
    int nAction;                                
    int nIndex;                                 
    int nIDCount;                               
    int nIDArray[DH_MAX_GUARD_DETECT_ID_COUNT]; 
    NET_TIME stuTime;                           
} ALARM_GUARD_DETECT_INFO;
typedef struct tagALARM_BANKCARDINSERT_INFO
{
    DWORD dwSize;
    int nAction; 
} ALARM_BANKCARDINSERT_INFO;
typedef enum tagNET_RECORD_SAVEFLAG
{
    NET_RECORD_SAVEFLAG_UNKNOWN = 0, 
    NET_RECORD_SAVEFLAG_MARK,        
    NET_RECORD_SAVEFLAG_SAVE,        
} NET_RECORD_SAVEFLAG;
typedef struct tagALARM_CARD_RECORD_INFO
{
    DWORD dwSize;
    int nAction;                                                    
    int nChannelID;                                                 
    unsigned int nFieldCount;                                       
    char szFields[MAX_CARD_RECORD_FIELD_NUM][DH_COMMON_STRING_256]; 
    NET_RECORD_SAVEFLAG emRecordSaveFlag;                           
} ALARM_CARD_RECORD_INFO;
typedef struct tagALARM_NET_INFO
{
    DWORD dwSize;
    int nAction;    
    int nChannelID; 
} ALARM_NET_INFO;
typedef struct tagALARM_VIDEOMOTION_EVENT_INFO
{
    DWORD dwSize;
    int nAction;    
    int nChannelID; 
} ALARM_VIDEOMOTION_EVENT_INFO;
typedef struct tagALARM_WIDE_VIEW_REGION_EVENT_INFO
{
    DWORD dwSize;
    int nAction; 
} ALARM_WIDE_VIEW_REGION_EVENT_INFO;
typedef struct tagNET_NOTIFY_EVENT_DATA
{
    DWORD dwSize;
    LONG lCommand;    
    void* pEventData; 
} NET_NOTIFY_EVENT_DATA;
typedef enum tagEM_SENSE_METHOD_UNIT
{
    EM_SENSE_UNIT_UNKOWN = -1,    
    EM_SENSE_TEMP_CENTIGRADE = 0, 
    EM_SENSE_TEMP_FAHRENHEIT,     
    EM_SENSE_WIND_SPEED,          
    EM_SENSE_HUMIDITY_PERCENT,    
} EM_SENSE_METHOD_UNIT;
typedef enum tagNET_ALARM_MODE
{
    NET_ALARM_MODE_UNKNOWN = -1, 
    NET_ALARM_MODE_DISARMING,    
    NET_ALARM_MODE_ARMING,       
    NET_ALARM_MODE_FORCEON,      
    NET_ALARM_MODE_PARTARMING,   
} NET_ALARM_MODE;
typedef enum tagNET_SCENE_MODE
{
    NET_SCENE_MODE_UNKNOWN,  
    NET_SCENE_MODE_OUTDOOR,  
    NET_SCENE_MODE_INDOOR,   
    NET_SCENE_MODE_WHOLE,    
    NET_SCENE_MODE_RIGHTNOW, 
    NET_SCENE_MODE_SLEEPING, 
    NET_SCENE_MODE_CUSTOM,   
} NET_SCENE_MODE;
typedef enum tagNET_EM_TRIGGER_MODE
{
    NET_EM_TRIGGER_MODE_UNKNOWN = 0,
    NET_EM_TRIGGER_MODE_NET,           
    NET_EM_TRIGGER_MODE_KEYBOARD,      
    NET_EM_TRIGGER_MODE_REMOTECONTROL, 
} NET_EM_TRIGGER_MODE;
typedef struct tagALARM_ARMMODE_CHANGE_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                  
    NET_ALARM_MODE bArm;               
    NET_SCENE_MODE emSceneMode;        
    DWORD dwID;                        
    NET_EM_TRIGGER_MODE emTriggerMode; 
    char szNetClientAddr[64];          
    UINT nUserCode;                    
} ALARM_ARMMODE_CHANGE_INFO;
typedef enum
{
    NET_DEFENCEAREA_TYPE_UNKNOWN,     
    NET_DEFENCEAREA_TYPE_ALARM,       
    NET_DEFENCEAREA_TYPE_ANALOGALARM, 
} NET_DEFENCEAREA_TYPE;
typedef enum
{
    NET_BYPASS_MODE_UNKNOW,   
    NET_BYPASS_MODE_BYPASS,   
    NET_BYPASS_MODE_NORMAL,   
    NET_BYPASS_MODE_ISOLATED, 
} NET_BYPASS_MODE;
typedef struct tagALARM_BYPASSMODE_CHANGE_INFO
{
    DWORD dwSize;
    int nChannelID;                     
    NET_TIME stuTime;                   
    NET_DEFENCEAREA_TYPE emDefenceType; 
    int nIsExtend;                      
    NET_BYPASS_MODE emMode;             
    DWORD dwID;                         
    NET_EM_TRIGGER_MODE emTriggerMode;  
} ALARM_BYPASSMODE_CHANGE_INFO;
typedef struct tagALARM_URGENCY_ALARM_EX2
{
    DWORD dwSize;
    NET_TIME stuTime;                     
    DWORD nID;                            
    int nAction;                          
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    char szImei[16];                      
    UINT nDistance;                       
    char szPlateNumber[64];               
    char szReplyNumber[16];               
    char szLine[64];                      
} ALARM_URGENCY_ALARM_EX2;
typedef struct tagALARM_INPUT_SOURCE_SIGNAL_INFO
{
    DWORD dwSize;
    int nChannelID;                       
    int nAction;                          
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_INPUT_SOURCE_SIGNAL_INFO;
typedef enum tagNET_TEMPERATURE_UNIT
{
    NET_TEMPERATURE_UNIT_UNKNOWN,
    NET_TEMPERATURE_UNIT_CENTIGRADE, 
    NET_TEMPERATURE_UNIT_FAHRENHEIT, 
} NET_TEMPERATURE_UNIT;
typedef struct tagALARM_ANALOGALARM_EVENT_INFO
{
    DWORD dwSize;
    int nChannelID;                         
    int nAction;                            
    NET_TIME stuTime;                       
    NET_SENSE_METHOD emSensorType;          
    char szName[DH_COMMON_STRING_128];      
    int nIsValid;                           
    int nStatus;                            
    float fValue;                           
    NET_TIME stuCollectTime;                
    NET_GPS_STATUS_INFO stGPSStatus;        
    NET_TEMPERATURE_UNIT emTemperatureUnit; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
} ALARM_ANALOGALARM_EVENT_INFO;
typedef enum tagNET_ACCESS_CTL_STATUS_TYPE
{
    NET_ACCESS_CTL_STATUS_TYPE_UNKNOWN = 0,
    NET_ACCESS_CTL_STATUS_TYPE_OPEN,        
    NET_ACCESS_CTL_STATUS_TYPE_CLOSE,       
    NET_ACCESS_CTL_STATUS_TYPE_ABNORMAL,    
    NET_ACCESS_CTL_STATUS_TYPE_FAKELOCKED,  
    NET_ACCESS_CTL_STATUS_TYPE_CLOSEALWAYS, 
    NET_ACCESS_CTL_STATUS_TYPE_OPENALWAYS,  
    NET_ACCESS_CTL_STATUS_TYPE_NORMAL,      
} NET_ACCESS_CTL_STATUS_TYPE;
typedef struct tagALARM_ACCESS_CTL_STATUS_INFO
{
    DWORD dwSize;
    int nDoor;                           
    NET_TIME stuTime;                    
    NET_ACCESS_CTL_STATUS_TYPE emStatus; 
    char szSerialNumber[256];            
    BOOL bRealUTC;                       
    NET_TIME_EX RealUTC;                 
} ALARM_ACCESS_CTL_STATUS_INFO;
typedef enum tagNET_ACCESS_SNAP_TYPE
{
    NET_ACCESS_SNAP_TYPE_UNKNOWN = 0,
    NET_ACCESS_SNAP_TYPE_CARD,        
    NET_ACCESS_SNAP_TYPE_PASSWORD,    
    NET_ACCESS_SNAP_TYPE_REMOTE,      
    NET_ACCESS_SNAP_TYPE_BUTTON,      
    NET_ACCESS_SNAP_TYPE_FINGERPRINT, 
    NET_ACCESS_SNAP_TYPE_QRCODE,      
    NET_ACCESS_SNAP_TYPE_BLUETOOTH,   
    NET_ACCESS_SNAP_TYPE_FACE,        
} NET_ACCESS_SNAP_TYPE;
typedef struct tagALARM_ACCESS_SNAP_INFO
{
    DWORD dwSize;
    NET_ACCESS_SNAP_TYPE emType;          
    char szCardNO[DH_COMMON_STRING_32];   
    char szPassword[DH_COMMON_STRING_64]; 
    char szFtpUrl[MAX_PATH];              
    int nImageNum;                        
    NET_TIME stuTime;                     
    BOOL bRealUTC;                        
    NET_TIME_EX RealUTC;                  
} ALARM_ACCESS_SNAP_INFO;
typedef enum tagEM_ALARM_CLEAR_TYPE
{
    EM_ALARM_CLEAR_TYPE_UNKNOWN = 0, 
    EM_ALARM_CLEAR_TYPE_ALL,         
    EM_ALARM_CLEAR_TYPE_ALARM_AREA,  
    EM_ALARM_CLEAR_TYPE_ALARM_LOCAL, 
} EM_ALARM_CLEAR_TYPE;
typedef struct tagALARM_ALARMCLEAR_INFO
{
    DWORD dwSize;
    int nChannelID;             
    NET_TIME stuTime;           
    int bEventAction;           
    EM_ALARM_CLEAR_TYPE emType; 
    int nAreasCount;            
    UINT nAreas[64];            
    int nZonesCount;            
    UINT nZones[256];           
} ALARM_ALARMCLEAR_INFO;
typedef struct tagALARM_CIDEVENT_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                
    char szCID[DH_COMMON_STRING_32]; 
} ALARM_CIDEVENT_INFO;
typedef enum tagEM_RCEMERGENCY_CALL_TYPE
{
    EM_RCEMERGENCY_CALL_UNKNOWN = 0,
    EM_RCEMERGENCY_CALL_FIRE,      
    EM_RCEMERGENCY_CALL_DURESS,    
    EM_RCEMERGENCY_CALL_ROBBER,    
    EM_RCEMERGENCY_CALL_MEDICAL,   
    EM_RCEMERGENCY_CALL_EMERGENCY, 
    EM_RCEMERGENCY_CALL_PANIC,     
} EM_RCEMERGENCY_CALL_TYPE;
typedef enum tagEM_RCEMERGENCY_MODE_TYPE
{
    EM_RCEMERGENCY_MODE_UNKNOWN = 0,
    EM_RCEMERGENCY_MODE_KEYBOARD,         
    EM_RCEMERGENCY_MODE_WIRELESS_CONTROL, 
} EM_RCEMERGENCY_MODE_TYPE;
typedef struct tagALARM_RCEMERGENCY_CALL_INFO
{
    DWORD dwSize;
    int nAction;                          
    EM_RCEMERGENCY_CALL_TYPE emType;      
    NET_TIME stuTime;                     
    EM_RCEMERGENCY_MODE_TYPE emMode;      
    DWORD dwID;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_RCEMERGENCY_CALL_INFO;
typedef struct tagALARM_OPEN_DOOR_GROUP_INFO
{
    DWORD dwSize;
    int nChannelID;   
    NET_TIME stuTime; 
} ALARM_OPEN_DOOR_GROUP_INFO;
typedef struct tagALARM_CAPTURE_FINGER_PRINT_INFO
{
    DWORD dwSize;
    int nChannelID;                       
    NET_TIME stuTime;                     
    char szReaderID[DH_COMMON_STRING_32]; 
    int nPacketLen;                       
    int nPacketNum;                       
    char* szFingerPrintInfo;              
    BOOL bCollectResult;                  
    char szCardNo[32];                    
    char szUserID[32];                    
} ALARM_CAPTURE_FINGER_PRINT_INFO;
typedef enum __EM_SUBSYSTEM_STATE_TYPE
{
    EM_SUBSYSTEM_STATE_UNKNOWN = 0, 
    EM_SUBSYSTEM_STATE_ACTIVE,      
    EM_SUBSYSTEM_STATE_INACTIVE,    
} EM_SUBSYSTEM_STATE_TYPE;
typedef struct tagALARM_SUBSYSTEM_STATE_CHANGE_INFO
{
    DWORD dwSize;
    int nChannelID;                  
    NET_TIME stuTime;                
    EM_SUBSYSTEM_STATE_TYPE emState; 
} ALARM_SUBSYSTEM_STATE_CHANGE_INFO;
typedef struct tagALARM_BATTERYPOWER_INFO
{
    DWORD dwSize;
    int nChannel;     
    NET_TIME stuTime; 
    int nPercent;     
    float fVoltage;   
    BOOL bCharging;   
} ALARM_BATTERYPOWER_INFO;
typedef struct tagALARM_BELLSTATUS_INFO
{
    DWORD dwSize;
    int nChannel;     
    NET_TIME stuTime; 
    int nAction;      
} ALARM_BELLSTATUS_INFO;
typedef struct tagALARM_DEFENCE_STATUS_CHANGE_INFO
{
    DWORD dwSize;
    int nChannelID;                 
    NET_TIME stuTime;               
    EM_DEFENCE_STATE_TYPE emStatus; 
} ALARM_DEFENCE_STATUS_CHANGE_INFO;
typedef struct tagALARM_LOGIN_FAILIUR_INFO
{
    DWORD dwSize;
    int nAction;                          
    unsigned int nSequence;               
    char szName[DH_EVENT_NAME_LEN];       
    char szType[DH_COMMON_STRING_128];    
    char szAddr[DH_MAX_IPADDR_EX_LEN];    
    int nError;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_LOGIN_FAILIUR_INFO;
typedef struct tagALARM_TICKET_STATISTIC
{
    DWORD dwSize;
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME stuTime;                     
    int nNormalCount;                     
    int nDiscountCount;                   
    int nSubsidyCount;                    
    int nDriverCount;                     
    int nNormalPrice;                     
    int nDiscountPrice;                   
    int nSubsidyPrice;                    
} ALARM_TICKET_STATISTIC;
#define MAX_ALARMEXT_MODULE_NUM 256 
typedef enum tagNET_BUS_TYPE
{
    NET_BUS_TYPE_UNKNOWN = 0,
    NET_BUS_TYPE_MBUS,  
    NET_BUS_TYPE_RS485, 
    NET_BUS_TYPE_CAN,   
    NET_BUS_TYPE_NET,   
} NET_BUS_TYPE;
typedef struct tagALARM_MODULE_LOST_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                     
    int nSequence;                        
    NET_BUS_TYPE emBusType;               
    int nAddr;                            
    int anAddr[MAX_ALARMEXT_MODULE_NUM];  
    char szDevType[DH_COMMON_STRING_64];  
    BOOL bOnline;                         
    char szSN[32];                        
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_MODULE_LOST_INFO;
typedef struct tagALARM_PSTN_BREAK_LINE_INFO
{
    DWORD dwSize;
    int nChannelID;                       
    int nAction;                          
    NET_TIME stuTime;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_PSTN_BREAK_LINE_INFO;
typedef struct tagALARM_ANALOGPULSE_INFO
{
    DWORD dwSize;
    int nChannelID;                       
    NET_TIME stuEventTime;                
    NET_SENSE_METHOD emSense;             
    char szName[DH_COMMON_STRING_128];    
    int nStatus;                          
    float fValue;                         
    NET_TIME stuCollectTime;              
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    float fTempture;                      
    float fHumidity;                      
    float fVoltage;                       
    float fCurrent;                       
    float fActivePower;                   
    float fElmp;                          
    float fEExp;                          
    float fComEp;                         
    float fComEq;                         
} ALARM_ANALOGPULSE_INFO;
typedef enum tagNET_MISSION_CONFIRM_TYPE
{
    NET_MISSION_CONFIRM_UNKNOWN = 0, 
    NET_MISSION_CONFIRM_YES,         
    NET_MISSION_CONFIRM_NO,          
} NET_MISSION_CONFIRM_TYPE;
typedef struct tagALARM_MISSION_CONFIRM_INFO
{
    DWORD dwSize;
    char szTitle[DH_COMMON_STRING_256];     
    char szMissionID[DH_COMMON_STRING_256]; 
    char szComment[DH_COMMON_STRING_256];   
    NET_GPS_STATUS_INFO stuGPSStatusInfo;   
    NET_MISSION_CONFIRM_TYPE emConfirmType; 
} ALARM_MISSION_CONFIRM_INFO;
typedef enum tagNET_CLUSTER_GROUP_TYPE
{
    NET_CLUSTER_GROUP_UNKNOWN, 
    NET_CLUSTER_GROUP_IDLE,    
    NET_CLUSTER_GROUP_MASTER,  
    NET_CLUSTER_GROUP_SLAVE,   
} NET_CLUSTER_GROUP_TYPE;
typedef struct tagALARM_NODE_ACTIVE_INFO
{
    DWORD dwSize;
    int nChannelID;                 
    NET_TIME stuTime;               
    NET_CLUSTER_GROUP_TYPE emGroup; 
} ALARM_NODE_ACTIVE_INFO;
typedef struct tagNET_CLUSTER_STATE_INFO
{
    DWORD dwSize;
    NET_CLUSTER_GROUP_TYPE emGroup; 
} NET_CLUSTER_STATE_INFO;
typedef enum tagEM_ALARM_VIDEO_STATIC_MODE
{
    EM_ALARM_VIDEO_STATIC_MODE_UNKNOWN, 
    EM_ALARM_VIDEO_STATIC_MODE_INDOOR,  
    EM_ALARM_VIDEO_STATIC_MODE_OUTDOOR, 
} EM_ALARM_VIDEO_STATIC_MODE;
typedef struct tagALARM_VIDEO_STATIC_INFO
{
    DWORD dwSize;
    DWORD dwAction;                    
    EM_ALARM_VIDEO_STATIC_MODE emMode; 
    int nChannelID;                    
} ALARM_VIDEO_STATIC_INFO;
typedef struct tagALARM_REGISTER_REONLINE_INFO
{
    DWORD dwSize;
} ALARM_REGISTER_REONLINE_INFO;
typedef enum tagEM_ALARM_ISCSI_STATUS
{
    EM_ALARM_ISCSI_STATUS_UNKNOWN,               
    EM_ALARM_ISCSI_STATUS_CONNECTED,             
    EM_ALARM_ISCSI_STATUS_NOT_CONNECTED,         
    EM_ALARM_ISCSI_STATUS_CONNECT_FAILED,        
    EM_ALARM_ISCSI_STATUS_AUTHENTICATION_FAILED, 
    EM_ALARM_ISCSI_STATUS_CONNECT_TIMEOUT,       
    EM_ALARM_ISCSI_STATUS_NOT_EXIST,             
} EM_ALARM_ISCSI_STATUS;
typedef struct tagALARM_ISCSI_STATUS_INFO
{
    DWORD dwSize;
    int nIndex;                           
    char szAddress[DH_COMMON_STRING_32];  
    char szName[DH_COMMON_STRING_64];     
    char szUserName[DH_COMMON_STRING_64]; 
    EM_ALARM_ISCSI_STATUS emStatus;       
} ALARM_ISCSI_STATUS_INFO;
typedef enum tagEM_ALARM_SCADA_DEV_TYPE
{
    EM_ALARM_SCADA_DEV_UNKNOWN,         
    EM_ALARM_SCADA_DEV_LEAKAGE,         
    EM_ALARM_SCADA_DEV_THCONTROLLER,    
    EM_ALARM_SCADA_DEV_UPS,             
    EM_ALARM_SCADA_DEV_SWITCH,          
    EM_ALARM_SCADA_DEV_ELECTRICMETER,   
    EM_ALARM_SCADA_DEV_COMMERCIALPOWER, 
    EM_ALARM_SCADA_DEV_BATTERY,         
    EM_ALARM_SCADA_DEV_AIRCONDITION,    
    EM_ALARM_SCADA_DEV_ACCESS,          
    EM_ALARM_SCADA_DEV_SMOKINGSENSOR,   
    EM_ALARM_SCADA_DEV_INFRARED,        
    EM_ALARM_SCADA_DEV_CHEMICAL,        
    EM_ALARM_SCADA_DEV_PERIMETER,       
    EM_ALARM_SCADA_DEV_DOORMAGNETISM,   
    EM_ALARM_SCADA_DEV_DISTANCE,        
    EM_ALARM_SCADA_DEV_WINDSENSOR,      
    EM_ALARM_SCADA_DEV_LOCATION,        
    EM_ALARM_SCADA_DEV_ATMOSPHERE,      
    EM_ALARM_SCADA_DEV_SOLARPOWER,      
} EM_ALARM_SCADA_DEV_TYPE;
typedef enum tagEM_SCADA_DEVICE_STATUS
{
    EM_SCADA_DEVICE_STATUS_KNOWN = -1, 
    EM_SCADA_DEVICE_STATUS_NORMAL,     
    EM_SCADA_DEVICE_STATUS_ALARM,      
    EM_SCADA_DEVICE_STATUS_OFFLINE,    
} EM_SCADA_DEVICE_STATUS;
typedef struct tagALARM_SCADA_DEV_INFO
{
    DWORD dwSize;
    int nChannel;                          
    NET_TIME stuTime;                      
    char szDevName[DH_COMMON_STRING_64];   
    char szDesc[DH_COMMON_STRING_256];     
    int nAction;                           
    char szID[DH_COMMON_STRING_32];        
    char szSensorID[DH_COMMON_STRING_32];  
    char szDevID[DH_COMMON_STRING_32];     
    char szPointName[DH_COMMON_STRING_64]; 
    int nAlarmFlag;                        
    EM_ALARM_SCADA_DEV_TYPE emDevType;     
    EM_SCADA_DEVICE_STATUS emDevStatus;    
} ALARM_SCADA_DEV_INFO;
typedef struct tagALARM_VEHICLE_ACC_INFO
{
    DWORD dwSize;
    int nACCStatus;                       
    int nAction;                          
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    int nConstantElectricStatus;          
    NET_TIME_EX stuTime;                  
    unsigned int nTotalMileage;           
    NET_TIME_EX stuStartTime;             
    NET_GPS_STATUS_INFO stuStartGPS;      
} ALARM_VEHICLE_ACC_INFO;
typedef NET_ACCESS_CTL_STATUS_TYPE NET_ACCESS_LOCK_STATUS_TYPE;
typedef struct tagALARM_ACCESS_LOCK_STATUS_INFO
{
    DWORD dwSize;
    int nChannel;                             
    NET_TIME stuTime;                         
    NET_ACCESS_LOCK_STATUS_TYPE emLockStatus; 
} ALARM_ACCESS_LOCK_STATUS_INFO;
typedef enum tagEM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE
{
    EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE_UNKNOWN,      
    EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE_ORGANIZATION, 
    EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE_SEAL,         
    EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE_EXCLUSIVE,    
    EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE_GATHER,       
    EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE_EVEN,         
} EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE;
typedef struct tagALARM_FINACE_SCHEME_INFO
{
    DWORD dwSize;
    int nChannel;                                                   
    char szBusinessSeverID[DH_COMMON_STRING_64];                    
    EM_ALARM_FINACE_SCHEME_BUSINESS_SEVER_TYPE emBusinessSeverType; 
    NET_TIME stuFinaceSchemeTime;                                   
    NET_TIME stuSchemeStartTime;                                    
    NET_TIME stuSchemeEndTime;                                      
    char szProductName[DH_COMMON_STRING_128];                       
    char szCardNo[DH_COMMON_STRING_64];                             
    char szPersonID[DH_COMMON_STRING_64];                           
    char szPersonName[DH_COMMON_STRING_64];                         
    char szOrgNo[DH_COMMON_STRING_64];                              
    char szStuffID[DH_COMMON_STRING_64];                            
    NET_TIME stuRecStartTime;                                       
    NET_TIME stuRecEndTime;                                         
} ALARM_FINACE_SCHEME_INFO;
typedef struct tagNET_CTRL_RECORDSET_IN
{
    DWORD dwSize;
    EM_NET_RECORD_TYPE emType; 
    void* pBuf;                
    int nBufLen;               
} NET_CTRL_RECORDSET_INSERT_IN;
typedef struct tagNET_CTRL_RECORDSET_OUT
{
    DWORD dwSize;
    int nRecNo; 
} NET_CTRL_RECORDSET_INSERT_OUT;
typedef struct tagNET_CTRL_RECORDSET_INSERT_PARAM
{
    DWORD dwSize;
    NET_CTRL_RECORDSET_INSERT_IN stuCtrlRecordSetInfo;    
    NET_CTRL_RECORDSET_INSERT_OUT stuCtrlRecordSetResult; 
} NET_CTRL_RECORDSET_INSERT_PARAM;
typedef struct tagNET_CTRL_RECORDSET_REMOVEEX_PARAM
{
    DWORD dwSize;          
    BOOL bTimeEnable;      
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
} NET_CTRL_RECORDSET_REMOVEEX_PARAM;
typedef struct tagNET_CTRL_RECORDSET_PARAM
{
    DWORD dwSize;
    EM_NET_RECORD_TYPE emType; 
    void* pBuf;                
    int nBufLen;               
} NET_CTRL_RECORDSET_PARAM;
typedef struct tagDH_TSECT
{
    int bEnable; 
    int iBeginHour;
    int iBeginMin;
    int iBeginSec;
    int iEndHour;
    int iEndMin;
    int iEndSec;
} DH_TSECT, *LPDH_TSECT;
typedef struct tagNET_CFG_TIME_SCHEDULE
{
    BOOL bEnableHoliday;                                          
    DH_TSECT stuTimeSection[DH_N_SCHEDULE_TSECT][DH_N_REC_TSECT]; 
} NET_CFG_TIME_SCHEDULE;
typedef enum tagEM_VIDEO_PLAY_MODE_TYPE
{
    EM_VIDEO_PLAY_MODE_TYPE_UNKNOWN, 
    EM_VIDEO_PLAY_MODE_TYPE_ONCE,    
    EM_VIDEO_PLAY_MODE_TYPE_REPEAT,  
    EM_VIDEO_PLAY_MODE_TYPE_ALONE,   
} EM_VIDEO_PLAY_MODE_TYPE;
#define MAX_DELIVERY_FILE_NUM 128  
#define DELIVERY_FILE_URL_LEN 128  
#define MAX_VIDEO_FILE_LIST_NUM 20 
typedef enum tagEM_DELIVERY_FILE_TYPE
{
    EM_DELIVERY_FILE_TYPE_UNKNOWN, 
    EM_DELIVERY_FILE_TYPE_VIDEO,   
    EM_DELIVERY_FILE_TYPE_IMAGE,   
    EM_DELIVERY_FILE_TYPE_AUDIO,   
    EM_DELIVERY_FILE_TYPE_TXT,     
} EM_DELIVERY_FILE_TYPE;
typedef enum tagEM_PLAY_WITH_MODE
{
    EM_PLAY_WITH_MODE_UNKNOWN,             
    EM_PLAY_WITH_MODE_RECOGNITION,         
    EM_PLAY_WITH_MODE_INFORMATION_RELEASE, 
    EM_PLAY_WITH_MODE_MAIN_INTERFACE,      
} EM_PLAY_WITH_MODE;
typedef struct tagNET_DELIVERY_FILE_INFO
{
    EM_DELIVERY_FILE_TYPE emFileType;      
    char szFileURL[DELIVERY_FILE_URL_LEN]; 
    int nImageSustain;                     
    EM_PLAY_WITH_MODE emPlayWithMode;      
    char szFileURLEx[512];                 
    BYTE byReserved[508];                  
} NET_DELIVERY_FILE_INFO;
typedef struct tagNET_DELIVERY_FILE_INFOEX
{
    EM_DELIVERY_FILE_TYPE emFileType;      
    char szFileURL[DELIVERY_FILE_URL_LEN]; 
    int nImageSustain;                     
    EM_PLAY_WITH_MODE emPlayWithMode;      
    char szFileURLEx[512];                 
    NET_CFG_TIME_SCHEDULE stuTimeSection;  
    int nSize;                             
    int nID;                               
    char szTXTContents[1024];              
} NET_DELIVERY_FILE_INFOEX;
typedef enum tagEM_VIDEO_PLAY_OPERATE_TYPE
{
    EM_VIDEO_PLAY_OPERATE_TYPE_UNKNOWN, 
    EM_VIDEO_PLAY_OPERATE_TYPE_REPLACE, 
    EM_VIDEO_PLAY_OPERATE_TYPE_ADD,     
    EM_VIDEO_PLAY_OPERATE_TYPE_REMOVE,  
    EM_VIDEO_PLAY_OPERATE_TYPE_CLEAR,   
} EM_VIDEO_PLAY_OPERATE_TYPE;
typedef struct tagNET_CTRL_DELIVERY_FILE
{
    DWORD dwSize;                                                  
    int nPort;                                                     
    EM_VIDEO_PLAY_MODE_TYPE emPlayMode;                            
    NET_TIME stuStartPlayTime;                                     
    NET_TIME stuStopPlayTime;                                      
    int nFileCount;                                                
    NET_DELIVERY_FILE_INFO stuFileInfo[MAX_DELIVERY_FILE_NUM];     
    EM_VIDEO_PLAY_OPERATE_TYPE emOperateType;                      
    int nFileCountEx;                                              
    NET_DELIVERY_FILE_INFOEX stuFileInfoEx[MAX_DELIVERY_FILE_NUM]; 
    int nNumber;                                                   
    NET_CFG_TIME_SCHEDULE stuTimeSection;                          
    BOOL bEnable;                                                  
    char szName[128];                                              
} NET_CTRL_DELIVERY_FILE;
typedef struct tagNET_DELIVERY_FILE_BYCAR_INFO
{
    EM_DELIVERY_FILE_TYPE emFileType;      
    char szFileURL[DELIVERY_FILE_URL_LEN]; 
    int nImageSustain;                     
    NET_TIME stuStartPlayTime;             
    NET_TIME stuStopPlayTime;              
    BYTE byReserved[1024];                 
} NET_DELIVERY_FILE_BYCAR_INFO;
typedef struct tagNET_CTRL_DELIVERY_FILE_BYCAR
{
    DWORD dwSize;                                                    
    int nPort;                                                       
    EM_VIDEO_PLAY_MODE_TYPE emPlayMode;                              
    int nFileCount;                                                  
    NET_DELIVERY_FILE_BYCAR_INFO stuFileInfo[MAX_DELIVERY_FILE_NUM]; 
} NET_CTRL_DELIVERY_FILE_BYCAR;
typedef enum tagNET_ACCESSCTLCARD_STATE
{
    NET_ACCESSCTLCARD_STATE_UNKNOWN = -1,
    NET_ACCESSCTLCARD_STATE_NORMAL = 0,          
    NET_ACCESSCTLCARD_STATE_LOSE = 0x01,         
    NET_ACCESSCTLCARD_STATE_LOGOFF = 0x02,       
    NET_ACCESSCTLCARD_STATE_FREEZE = 0x04,       
    NET_ACCESSCTLCARD_STATE_ARREARAGE = 0x08,    
    NET_ACCESSCTLCARD_STATE_OVERDUE = 0x10,      
    NET_ACCESSCTLCARD_STATE_PREARREARAGE = 0x20, 
} NET_ACCESSCTLCARD_STATE;
typedef enum tagNET_ACCESSCTLCARD_TYPE
{
    NET_ACCESSCTLCARD_TYPE_UNKNOWN = -1,
    NET_ACCESSCTLCARD_TYPE_GENERAL,                 
    NET_ACCESSCTLCARD_TYPE_VIP,                     
    NET_ACCESSCTLCARD_TYPE_GUEST,                   
    NET_ACCESSCTLCARD_TYPE_PATROL,                  
    NET_ACCESSCTLCARD_TYPE_BLACKLIST,               
    NET_ACCESSCTLCARD_TYPE_CORCE,                   
    NET_ACCESSCTLCARD_TYPE_POLLING,                 
    NET_ACCESSCTLCARD_TYPE_GB_CUSTOM1,              
    NET_ACCESSCTLCARD_TYPE_GB_CUSTOM2,              
    NET_ACCESSCTLCARD_TYPE_TEMPORARY_PERSON = 0x09, 
    NET_ACCESSCTLCARD_TYPE_INVENTORY_PERSON,        
    NET_ACCESSCTLCARD_TYPE_INVENTORY_DIRECTOR,      
    NET_ACCESSCTLCARD_TYPE_SECURITY_GUARD,          
    NET_ACCESSCTLCARD_TYPE_SECURITYGUARD_DIRECTOR,  
    NET_ACCESSCTLCARD_TYPE_STORE_KEEPER,            
    NET_ACCESSCTLCARD_TYPE_STORE_DIRECTOR,          
    NET_ACCESSCTLCARD_TYPE_ESCORT_PERSON,           
    NET_ACCESSCTLCARD_TYPE_REPAIR_PERSON,           
    NET_ACCESSCTLCARD_TYPE_INSPECTOR = 0x12,        
    NET_ACCESSCTLCARD_TYPE_SHENZHENLINK = 0x13,     
    NET_ACCESSCTLCARD_TYPE_MOTHERCARD = 0xff,       
} NET_ACCESSCTLCARD_TYPE;
#define DH_MAX_DOOR_NUM 32        
#define DH_MAX_TIMESECTION_NUM 32 
#define DH_MAX_CARDNAME_LEN 64    
#define DH_MAX_CARDNO_LEN 32      
#define DH_MAX_USERID_LEN 32      
#define DH_MAX_IC_LEN 32          
#define DH_MAX_QRCODE_LEN 128     
typedef struct tagNET_ACCESSCTLCARD_FINGERPRINT_PACKET
{
    DWORD dwSize;
    int nLength;       
    int nCount;        
    char* pPacketData; 
} NET_ACCESSCTLCARD_FINGERPRINT_PACKET;
typedef struct tagNET_ACCESSCTLCARD_FINGERPRINT_PACKET_EX
{
    int nLength;            
    int nCount;             
    char* pPacketData;      
    int nPacketLen;         
    int nRealPacketLen;     
    int nDuressIndex;       
    BYTE byReverseed[1020]; 
} NET_ACCESSCTLCARD_FINGERPRINT_PACKET_EX;
#define MAX_REPEATENTERROUTE_NUM 12 
typedef enum tagEM_HAT_STYLE
{
    EM_HAT_UNKNOWN,      
    EM_HAT_ORDINARY,     
    EM_HAT_HELMET,       
    EM_HAT_SAFETYHAT,    
    EM_HAT_EAVELESS,     
    EM_HAT_PEAKEDCAP,    
    EM_HAT_FISHERMANHAT, 
    EM_HAT_NONE,         
} EM_HAT_STYLE;
typedef enum tagEM_UNIFIED_COLOR_TYPE
{
    EM_UNIFIED_COLOR_TRANSPARENT = -1, 
    EM_UNIFIED_COLOR_UNKNOWN,          
    EM_UNIFIED_COLOR_WHITE,            
    EM_UNIFIED_COLOR_ORANGE,           
    EM_UNIFIED_COLOR_PINK,             
    EM_UNIFIED_COLOR_BLACK,            
    EM_UNIFIED_COLOR_RED,              
    EM_UNIFIED_COLOR_YELLOW,           
    EM_UNIFIED_COLOR_GRAY,             
    EM_UNIFIED_COLOR_BLUE,             
    EM_UNIFIED_COLOR_GREEN,            
    EM_UNIFIED_COLOR_PURPLE,           
    EM_UNIFIED_COLOR_BROWN,            
} EM_UNIFIED_COLOR_TYPE;
typedef enum tagNET_ACCESSCTLCARD_SEX
{
    NET_ACCESSCTLCARD_SEX_UNKNOWN,
    NET_ACCESSCTLCARD_SEX_MALE,   
    NET_ACCESSCTLCARD_SEX_FEMALE, 
} NET_ACCESSCTLCARD_SEX;
typedef enum tagNET_ACCESSCTLCARD_AUTHORITY
{
    NET_ACCESSCTLCARD_AUTHORITY_UNKNOWN,        
    NET_ACCESSCTLCARD_AUTHORITY_ADMINISTRATORS, 
    NET_ACCESSCTLCARD_AUTHORITY_CUSTOMER,       
} NET_ACCESSCTLCARD_AUTHORITY;
typedef struct tagNET_FLOORS_INFO
{
    int nFloorNumEx2;       
    char szFloorEx[256][8]; 
    BYTE byReserved[512];   
} NET_FLOORS_INFO;
typedef enum tagEM_TEST_ITEMS
{
    EM_TEST_ITEMS_UNKNOWN = -1,     
    EM_TEST_ITEMS_OTHER,            
    EM_TEST_ITEMS_HAND_TEST,        
    EM_TEST_ITEMS_TWOFEET_TEST,     
    EM_TEST_ITEMS_HANDTWOFEET_TEST, 
    EM_TEST_ITEMS_NONE              
} EM_TEST_ITEMS;
typedef enum tagEM_ESD_RESULT
{
    EM_ESD_RESULT_UNKNOWN = -1,        
    EM_ESD_RESULT_OTHER_ABERRANT,      
    EM_ESD_RESULT_TEST_PASS,           
    EM_ESD_RESULT_HAND_TEST_FAIL,      
    EM_ESD_RESULT_LEFTFOOT_TEST_FAIL,  
    EM_ESD_RESULT_RIGHTFOOT_TEST_FAIL, 
    EM_ESD_RESULT_FOOT_TEST_FAIL,      
    EM_ESD_RESULT_TEST_FAIL            
} EM_ESD_RESULT;
typedef struct tagNET_TEST_RESULT
{
    UINT nHandValue;           
    UINT nLeftFootValue;       
    UINT nRightFootValue;      
    EM_ESD_RESULT emEsdResult; 
    BYTE bReserved[128];       
} NET_TEST_RESULT;
typedef enum tagEM_GREENCNHEALTH_STATUS
{
    EM_GREENCNHEALTH_STATUS_UNKNOWN = 0, 
    EM_GREENCNHEALTH_STATUS_GREEN,       
    EM_GREENCNHEALTH_STATUS_YELLOW,      
    EM_GREENCNHEALTH_STATUS_RED,         
    EM_GREENCNHEALTH_STATUS_INVALID,     
} EM_GREENCNHEALTH_STATUS;
typedef enum tagEM_ALLOW_PERMIT_FLAG
{
    EM_ALLOW_PERMIT_FLAG_UNKNOWN = 0, 
    EM_ALLOW_PERMIT_FLAG_NO,          
    EM_ALLOW_PERMIT_FLAG_EFFECTIVE,   
    EM_ALLOW_PERMIT_FLAG_INVALID,     
} EM_ALLOW_PERMIT_FLAG;
typedef enum tagEM_RENT_STATE
{
    EM_RENT_STATE_UNKNOWN = 0,                    
    EM_RENT_STATE_NORMAL_PAYMENT,                 
    EM_RENT_STATE_0_TO_3_MONTHS_IN_ARREARS,       
    EM_RENT_STATE_3_TO_6_MONTHS_IN_ARREARS,       
    EM_RENT_STATE_6_TO_12_MONTHS_IN_ARREARS,      
    EM_RENT_STATE_MORE_THAN_12_MONTHS_IN_ARREARS, 
    EM_RENT_STATE_TEMPORARY_VISITOR,              
} EM_RENT_STATE;
typedef struct tagNET_RECORDSET_ACCESS_CTL_CARD
{
    DWORD dwSize;
    int nRecNo;                                                   
    NET_TIME stuCreateTime;                                       
    char szCardNo[DH_MAX_CARDNO_LEN];                             
    char szUserID[DH_MAX_USERID_LEN];                             
    NET_ACCESSCTLCARD_STATE emStatus;                             
    NET_ACCESSCTLCARD_TYPE emType;                                
    char szPsw[DH_MAX_CARDPWD_LEN];                               
    int nDoorNum;                                                 
    int sznDoors[DH_MAX_DOOR_NUM];                                
    int nTimeSectionNum;                                          
    int sznTimeSectionNo[DH_MAX_TIMESECTION_NUM];                 
    int nUserTime;                                                
    NET_TIME stuValidStartTime;                                   
    NET_TIME stuValidEndTime;                                     
    BOOL bIsValid;                                                
    NET_ACCESSCTLCARD_FINGERPRINT_PACKET stuFingerPrintInfo;      
    BOOL bFirstEnter;                                             
    char szCardName[DH_MAX_CARDNAME_LEN];                         
    char szVTOPosition[DH_COMMON_STRING_64];                      
    BOOL bHandicap;                                               
    BOOL bEnableExtended;                                         
    NET_ACCESSCTLCARD_FINGERPRINT_PACKET_EX stuFingerPrintInfoEx; 
    int nFaceDataNum;                                             
    char szFaceData[MAX_FACE_DATA_NUM][MAX_FACE_DATA_LEN];        
    char szDynamicCheckCode[MAX_COMMON_STRING_16];                
    int nRepeatEnterRouteNum;                                     
    int arRepeatEnterRoute[MAX_REPEATENTERROUTE_NUM];             
    int nRepeatEnterRouteTimeout;                                 
    BOOL bNewDoor;                                                
    int nNewDoorNum;                                              
    int nNewDoors[MAX_ACCESSDOOR_NUM];                            
    int nNewTimeSectionNum;                                       
    int nNewTimeSectionNo[MAX_ACCESSDOOR_NUM];                    
    char szCitizenIDNo[MAX_COMMON_STRING_32];                     
    int nSpecialDaysScheduleNum;                                  
    int arSpecialDaysSchedule[MAX_ACCESSDOOR_NUM];                
    UINT nUserType;                                               
    int nFloorNum;                                                
    char szFloorNo[MAX_ACCESS_FLOOR_NUM][DH_COMMON_STRING_4];     
    char szSection[MAX_COMMON_STRING_64];                         
    int nScore;                                                   
    char szCompanyName[MAX_COMPANY_NAME_LEN];                     
    UINT nSectionID;                                              
    NET_ACCESSCTLCARD_SEX emSex;                                  
    char szRole[MAX_COMMON_STRING_32];                            
    char szProjectNo[MAX_COMMON_STRING_32];                       
    char szProjectName[MAX_COMMON_STRING_64];                     
    char szBuilderName[MAX_COMMON_STRING_64];                     
    char szBuilderID[MAX_COMMON_STRING_32];                       
    char szBuilderType[MAX_COMMON_STRING_32];                     
    char szBuilderTypeID[MAX_COMMON_STRING_8];                    
    char szPictureID[MAX_COMMON_STRING_64];                       
    char szContractID[MAX_COMMON_STRING_16];                      
    char szWorkerTypeID[MAX_COMMON_STRING_8];                     
    char szWorkerTypeName[MAX_COMMON_STRING_32];                  
    BOOL bPersonStatus;                                           
    NET_ACCESSCTLCARD_AUTHORITY emAuthority;                      
    char szCompanionName[120];                                    
    char szCompanionCompany[200];                                 
    NET_TIME stuTmpAuthBeginTime;                                 
    NET_TIME stuTmpAuthEndTime;                                   
    BOOL bFloorNoExValid;                                         
    int nFloorNumEx;                                              
    char szFloorNoEx[512][DH_COMMON_STRING_4];                    
    char szSubUserID[32];                                         
    char szPhoneNumber[32];                                       
    char szPhotoPath[256];                                        
    char szCause[64];                                             
    char szCompanionCard[32];                                     
    char szCitizenAddress[128];                                   
    NET_TIME stuBirthDay;                                         
    BOOL bFloorNoEx2Valid;                                        
    NET_FLOORS_INFO* pstuFloorsEx2;                               
    char szDefaultFloor[8];                                       
    int nUserTimeSectionNum;                                      
    char szUserTimeSections[6][20];                               
    char szWorkClass[256];                                        
    NET_TIME stuStartTimeInPeriodOfValidity;                      
    EM_TEST_ITEMS emTestItems;                                    
    UINT nAuthOverdueTime;                                        
    EM_GREENCNHEALTH_STATUS emGreenCNHealthStatus;                
    EM_ALLOW_PERMIT_FLAG emAllowPermitFlag;                       
    EM_RENT_STATE emRentState;                                    
    int nConsumptionTimeSectionsNum;                              
    char szConsumptionTimeSections[42][34];                       
} NET_RECORDSET_ACCESS_CTL_CARD;
typedef struct tagNET_RECORDSET_ACCESS_CTL_PWD
{
    DWORD dwSize;
    int nRecNo;                                    
    NET_TIME stuCreateTime;                        
    char szUserID[DH_MAX_USERID_LEN];              
    char szDoorOpenPwd[DH_MAX_CARDPWD_LEN];        
    char szAlarmPwd[DH_MAX_CARDPWD_LEN];           
    int nDoorNum;                                  
    int sznDoors[DH_MAX_DOOR_NUM];                 
    char szVTOPosition[DH_COMMON_STRING_64];       
    int nTimeSectionNum;                           
    int nTimeSectionIndex[DH_MAX_TIMESECTION_NUM]; 
    BOOL bNewDoor;                                 
    int nNewDoorNum;                               
    int nNewDoors[MAX_ACCESSDOOR_NUM];             
    int nNewTimeSectionNum;                        
    int nNewTimeSectionNo[MAX_ACCESSDOOR_NUM];     
    NET_TIME stuValidStartTime;                    
    NET_TIME stuValidEndTime;                      
    int nValidCounts;                              
    char szCitizenIDNo[20];                        
} NET_RECORDSET_ACCESS_CTL_PWD;
typedef enum tagNET_DOOR_OPEN_METHOD
{
    NET_DOOR_OPEN_METHOD_UNKNOWN = 0,
    NET_DOOR_OPEN_METHOD_PWD_ONLY,    
    NET_DOOR_OPEN_METHOD_CARD,        
    NET_DOOR_OPEN_METHOD_PWD_OR_CARD, 
    NET_DOOR_OPEN_METHOD_CARD_FIRST,  
    NET_DOOR_OPEN_METHOD_PWD_FIRST,   
    NET_DOOR_OPEN_METHOD_SECTION,     
} NET_DOOR_OPEN_METHOD;
typedef enum tagNET_ACCESS_DOOROPEN_METHOD
{
    NET_ACCESS_DOOROPEN_METHOD_UNKNOWN = 0,
    NET_ACCESS_DOOROPEN_METHOD_PWD_ONLY,                                   
    NET_ACCESS_DOOROPEN_METHOD_CARD,                                       
    NET_ACCESS_DOOROPEN_METHOD_CARD_FIRST,                                 
    NET_ACCESS_DOOROPEN_METHOD_PWD_FIRST,                                  
    NET_ACCESS_DOOROPEN_METHOD_REMOTE,                                     
    NET_ACCESS_DOOROPEN_METHOD_BUTTON,                                     
    NET_ACCESS_DOOROPEN_METHOD_FINGERPRINT,                                
    NET_ACCESS_DOOROPEN_METHOD_PWD_CARD_FINGERPRINT,                       
    NET_ACCESS_DOOROPEN_METHOD_PWD_FINGERPRINT = 10,                       
    NET_ACCESS_DOOROPEN_METHOD_CARD_FINGERPRINT = 11,                      
    NET_ACCESS_DOOROPEN_METHOD_PERSONS = 12,                               
    NET_ACCESS_DOOROPEN_METHOD_KEY = 13,                                   
    NET_ACCESS_DOOROPEN_METHOD_COERCE_PWD = 14,                            
    NET_ACCESS_DOOROPEN_METHOD_QRCODE = 15,                                
    NET_ACCESS_DOOROPEN_METHOD_FACE_RECOGNITION = 16,                      
    NET_ACCESS_DOOROPEN_METHOD_FACEIDCARD = 18,                            
    NET_ACCESS_DOOROPEN_METHOD_FACEIDCARD_AND_IDCARD = 19,                 
    NET_ACCESS_DOOROPEN_METHOD_BLUETOOTH = 20,                             
    NET_ACCESS_DOOROPEN_METHOD_CUSTOM_PASSWORD = 21,                       
    NET_ACCESS_DOOROPEN_METHOD_USERID_AND_PWD = 22,                        
    NET_ACCESS_DOOROPEN_METHOD_FACE_AND_PWD = 23,                          
    NET_ACCESS_DOOROPEN_METHOD_FINGERPRINT_AND_PWD = 24,                   
    NET_ACCESS_DOOROPEN_METHOD_FINGERPRINT_AND_FACE = 25,                  
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_FACE = 26,                         
    NET_ACCESS_DOOROPEN_METHOD_FACE_OR_PWD = 27,                           
    NET_ACCESS_DOOROPEN_METHOD_FINGERPRINT_OR_PWD = 28,                    
    NET_ACCESS_DOOROPEN_METHOD_FINGERPRINT_OR_FACE = 29,                   
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_FACE = 30,                          
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_FINGERPRINT = 31,                   
    NET_ACCESS_DOOROPEN_METHOD_FINGERPRINT_AND_FACE_AND_PWD = 32,          
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_FACE_AND_PWD = 33,                 
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_FINGERPRINT_AND_PWD = 34,          
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_PWD_AND_FACE = 35,                 
    NET_ACCESS_DOOROPEN_METHOD_FINGERPRINT_OR_FACE_OR_PWD = 36,            
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_FACE_OR_PWD = 37,                   
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_FINGERPRINT_OR_FACE = 38,           
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_FINGERPRINT_AND_FACE_AND_PWD = 39, 
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_FINGERPRINT_OR_FACE_OR_PWD = 40,    
    NET_ACCESS_DOOROPEN_METHOD_FACEIPCARDANDIDCARD_OR_CARD_OR_FACE = 41,   
    NET_ACCESS_DOOROPEN_METHOD_FACEIDCARD_OR_CARD_OR_FACE = 42,            
    NET_ACCESS_DOOROPEN_METHOD_DTMF = 43,                                  
    NET_ACCESS_DOOROPEN_METHOD_REMOTE_QRCODE = 44,                         
    NET_ACCESS_DOOROPEN_METHOD_REMOTE_FACE = 45,                           
    NET_ACCESS_DOOROPEN_METHOD_CITIZEN_FINGERPRINT = 46,                   
    NET_ACCESS_DOOROPEN_METHOD_TEMPORARY_PASSWORD = 47,                    
    NET_ACCESS_DOOROPEN_METHOD_HEALTHCODE = 48,                            
    NET_ACCESS_DOOROPEN_METHOD_IRIS = 49,                                  
    NET_ACCESS_DOOROPEN_METHOD_IRIS_AND_PASSWORD = 50,                     
    NET_ACCESS_DOOROPEN_METHOD_FACE_AND_IRIS = 51,                         
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_IRIS = 52,                         
    NET_ACCESS_DOOROPEN_METHOD_IRIS_OR_PASSWORD = 53,                      
    NET_ACCESS_DOOROPEN_METHOD_FACE_OR_IRIS = 54,                          
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_IRIS = 55,                          
    NET_ACCESS_DOOROPEN_METHOD_FACE_AND_IRIS_AND_PASSWORD = 56,            
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_FACE_AND_IRIS = 57,                
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_IRIS_AND_PASSWORD = 58,            
    NET_ACCESS_DOOROPEN_METHOD_FACE_OR_IRIS_OR_PASSWORD = 59,              
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_FACE_OR_IRIS = 60,                  
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_IRIS_OR_PASSWORD = 61,              
    NET_ACCESS_DOOROPEN_METHOD_CARD_AND_FACE_AND_IRIS_AND_PASSWORD = 62,   
    NET_ACCESS_DOOROPEN_METHOD_CARD_OR_FACE_OR_IRIS_OR_PASSWORD = 63,      
} NET_ACCESS_DOOROPEN_METHOD;
typedef enum tagNET_ATTENDANCESTATE
{
    NET_ATTENDANCESTATE_UNKNOWN,
    NET_ATTENDANCESTATE_SIGNIN,                
    NET_ATTENDANCESTATE_GOOUT,                 
    NET_ATTENDANCESTATE_GOOUT_AND_RETRUN,      
    NET_ATTENDANCESTATE_SIGNOUT,               
    NET_ATTENDANCESTATE_WORK_OVERTIME_SIGNIN,  
    NET_ATTENDANCESTATE_WORK_OVERTIME_SIGNOUT, 
} NET_ATTENDANCESTATE;
typedef enum tagNET_ENUM_DIRECTION_ACCESS_CTL
{
    NET_ENUM_DIRECTION_UNKNOWN,
    NET_ENUM_DIRECTION_ENTRY, 
    NET_ENUM_DIRECTION_EXIT,  
} NET_ENUM_DIRECTION_ACCESS_CTL;
typedef enum tagEM_CITIZENIDCARD_EC_TYPE
{
    EM_CITIZENIDCARD_EC_Unknown = 0, 
    EM_CITIZENIDCARD_EC_Han,         
    EM_CITIZENIDCARD_EC_Mongolian,   
    EM_CITIZENIDCARD_EC_Hui,         
    EM_CITIZENIDCARD_EC_Tibetan,     
    EM_CITIZENIDCARD_EC_Uygur,       
    EM_CITIZENIDCARD_EC_Miao,        
    EM_CITIZENIDCARD_EC_Yi,          
    EM_CITIZENIDCARD_EC_Zhuang,      
    EM_CITIZENIDCARD_EC_Bouyei,      
    EM_CITIZENIDCARD_EC_Korean,      
    EM_CITIZENIDCARD_EC_Manchu,      
    EM_CITIZENIDCARD_EC_Dong,        
    EM_CITIZENIDCARD_EC_Yao,         
    EM_CITIZENIDCARD_EC_Bai,         
    EM_CITIZENIDCARD_EC_Tujia,       
    EM_CITIZENIDCARD_EC_Hani,        
    EM_CITIZENIDCARD_EC_Kazak,       
    EM_CITIZENIDCARD_EC_Dai,         
    EM_CITIZENIDCARD_EC_Li,          
    EM_CITIZENIDCARD_EC_Lisu,        
    EM_CITIZENIDCARD_EC_Va,          
    EM_CITIZENIDCARD_EC_She,         
    EM_CITIZENIDCARD_EC_Gaoshan,     
    EM_CITIZENIDCARD_EC_Lahu,        
    EM_CITIZENIDCARD_EC_Shui,        
    EM_CITIZENIDCARD_EC_Dongxiang,   
    EM_CITIZENIDCARD_EC_Naxi,        
    EM_CITIZENIDCARD_EC_Jingpo,      
    EM_CITIZENIDCARD_EC_Kirgiz,      
    EM_CITIZENIDCARD_EC_Tu,          
    EM_CITIZENIDCARD_EC_Daur,        
    EM_CITIZENIDCARD_EC_Mulam,       
    EM_CITIZENIDCARD_EC_Qoiang,      
    EM_CITIZENIDCARD_EC_Blang,       
    EM_CITIZENIDCARD_EC_Salar,       
    EM_CITIZENIDCARD_EC_Maonan,      
    EM_CITIZENIDCARD_EC_Gelo,        
    EM_CITIZENIDCARD_EC_Xibe,        
    EM_CITIZENIDCARD_EC_Achang,      
    EM_CITIZENIDCARD_EC_Pumi,        
    EM_CITIZENIDCARD_EC_Tajik,       
    EM_CITIZENIDCARD_EC_Nu,          
    EM_CITIZENIDCARD_EC_Ozbek,       
    EM_CITIZENIDCARD_EC_Russian,     
    EM_CITIZENIDCARD_EC_Ewenkl,      
    EM_CITIZENIDCARD_EC_Deang,       
    EM_CITIZENIDCARD_EC_Bonan,       
    EM_CITIZENIDCARD_EC_Yugur,       
    EM_CITIZENIDCARD_EC_Jing,        
    EM_CITIZENIDCARD_EC_Tatar,       
    EM_CITIZENIDCARD_EC_Drung,       
    EM_CITIZENIDCARD_EC_Oroqen,      
    EM_CITIZENIDCARD_EC_Hezhen,      
    EM_CITIZENIDCARD_EC_Moinba,      
    EM_CITIZENIDCARD_EC_Lhoba,       
    EM_CITIZENIDCARD_EC_Jino         
} EM_CITIZENIDCARD_EC_TYPE;
typedef enum tagEM_CITIZENIDCARD_SEX_TYPE
{
    EM_CITIZENIDCARD_SEX_TYPE_UNKNOWN, 
    EM_CITIZENIDCARD_SEX_TYPE_MALE,    
    EM_CITIZENIDCARD_SEX_TYPE_FEMALE,  
    EM_CITIZENIDCARD_SEX_TYPE_UNTOLD,  
} EM_CITIZENIDCARD_SEX_TYPE;
typedef enum tagEM_HUMAN_TEMPERATURE_UNIT
{
    EM_HUMAN_TEMPERATURE_UNKNOWN = -1, 
    EM_HUMAN_TEMPERATURE_CENTIGRADE,   
    EM_HUMAN_TEMPERATURE_FAHRENHEIT,   
    EM_HUMAN_TEMPERATURE_KELVIN,       
} EM_HUMAN_TEMPERATURE_UNIT;
typedef enum tagEM_HUMAN_TEMPERATURE_STATUS
{
    EM_HUMAN_TEMPERATURE_STATUS_UNKNOWN = -1, 
    EM_HUMAN_TEMPERATURE_STATUS_LOW,          
    EM_HUMAN_TEMPERATURE_STATUS_NORMAL,       
    EM_HUMAN_TEMPERATURE_STATUS_HIGH,         
} EM_HUMAN_TEMPERATURE_STATUS;
typedef struct tagNET_MAN_TEMPERATURE_INFO
{
    float fCurrentTemperature;                       
    EM_HUMAN_TEMPERATURE_UNIT emTemperatureUnit;     
    BOOL bIsOverTemperature;                         
    EM_HUMAN_TEMPERATURE_STATUS emTemperatureStatus; 
    BYTE byReserved[256];                            
} NET_MAN_TEMPERATURE_INFO;
typedef struct tagNET_COMPANION_INFO
{
    char szCompanionCard[32];     
    char szCompanionUserID[32];   
    char szCompanionName[120];    
    char szCompanionCompany[200]; 
    BYTE byReserved[56];          
} NET_COMPANION_INFO;
typedef enum tagEM_MASK_STATE_TYPE
{
    EM_MASK_STATE_UNKNOWN, 
    EM_MASK_STATE_NODISTI, 
    EM_MASK_STATE_NOMASK,  
    EM_MASK_STATE_WEAR,    
} EM_MASK_STATE_TYPE;
typedef enum tagEM_FACE_CHECK
{
    EM_FACE_CHECK_UNKNOWN = -1,  
    EM_FACE_CHECK_NODATA,        
    EM_FACE_CHECK_CONSISTENT,    
    EM_FACE_CHECK_NOT_CONSISTENT 
} EM_FACE_CHECK;
typedef enum tagEM_QRCODE_IS_EXPIRED
{
    EM_QRCODE_EXPIRED_UNKNOWN, 
    EM_QRCODE_NO_EXPIRED,      
    EM_QRCODE_EXPIRED,         
} EM_QRCODE_IS_EXPIRED;
typedef enum tagEM_QRCODE_STATE
{
    EM_QRCODE_STATE_UNKNOWN,   
    EM_QRCODE_STATE_CLEARED,   
    EM_QRCODE_STATE_NOCLEARED, 
} EM_QRCODE_STATE;
typedef enum tagEM_LIFT_CALLER_TYPE
{
    EM_LIFT_CALLER_TYPE_UNKNOWN = 0,    
    EM_LIFT_CALLER_TYPE_VTO,            
    EM_LIFT_CALLER_TYPE_PLATFORM,       
    EM_LIFT_CALLER_TYPE_LOCAL_AUTH,     
    EM_LIFT_CALLER_TYPE_ACCESS_CONTROL, 
} EM_LIFT_CALLER_TYPE;
typedef enum tagEM_TRAVEL_CODE_COLOR
{
    EM_TRAVEL_CODE_COLOR_UNKNOWN, 
    EM_TRAVEL_CODE_COLOR_RED,     
    EM_TRAVEL_CODE_COLOR_GREEN,   
    EM_TRAVEL_CODE_COLOR_YELLOW,  
    EM_TRAVEL_CODE_COLOR_ORANGE,  
} EM_TRAVEL_CODE_COLOR;
typedef struct tagNET_RECORDSET_ACCESS_CTL_CARDREC
{
    DWORD dwSize;
    int nRecNo;                          
    char szCardNo[DH_MAX_CARDNO_LEN];    
    char szPwd[DH_MAX_CARDPWD_LEN];      
    NET_TIME stuTime;                    
    BOOL bStatus;                        
    NET_ACCESS_DOOROPEN_METHOD emMethod; 
    int nDoor;                           
    char szUserID[DH_MAX_USERID_LEN];    
    int nReaderID;                       
    char szSnapFtpUrl[MAX_PATH];         
    char szReaderID[DH_COMMON_STRING_32]; 
    NET_ACCESSCTLCARD_TYPE emCardType;    
    int nErrorCode;                       
    char szRecordURL[MAX_COMMON_STRING_128];   
    int nNumbers;                              
    NET_ATTENDANCESTATE emAttendanceState;     
    NET_ENUM_DIRECTION_ACCESS_CTL emDirection; 
    char szClassNumber[MAX_CLASS_NUMBER_LEN];  
    char szPhoneNumber[MAX_PHONENUMBER_LEN];   
    char szCardName[DH_MAX_CARDNAME_LEN];      
    char szSN[DH_COMMON_STRING_32];            
    BOOL bCitizenIDResult;                          
    char szCitizenIDName[30];                       
    BYTE byReserved1[2];                            
    EM_CITIZENIDCARD_SEX_TYPE emCitizenIDSex;       
    EM_CITIZENIDCARD_EC_TYPE emCitizenIDEC;         
    NET_TIME stuCitizenIDBirth;                     
    char szCitizenIDAddress[108];                   
    char szCitizenIDAuthority[48];                  
    NET_TIME stuCitizenIDStart;                     
    NET_TIME stuCitizenIDEnd;                       
    BOOL bIsEndless;                                
    char szSnapFaceURL[DH_COMMON_STRING_128];       
    char szCitizenPictureURL[DH_COMMON_STRING_128]; 
    char szCitizenIDNo[20];                         
    NET_ACCESSCTLCARD_SEX emSex;                    
    char szRole[MAX_COMMON_STRING_32];              
    char szProjectNo[MAX_COMMON_STRING_32];         
    char szProjectName[MAX_COMMON_STRING_64];       
    char szBuilderName[MAX_COMMON_STRING_64];       
    char szBuilderID[MAX_COMMON_STRING_32];         
    char szBuilderType[MAX_COMMON_STRING_32];       
    char szBuilderTypeID[MAX_COMMON_STRING_8];      
    char szPictureID[MAX_COMMON_STRING_64];         
    char szContractID[MAX_COMMON_STRING_16];        
    char szWorkerTypeID[MAX_COMMON_STRING_8];       
    char szWorkerTypeName[MAX_COMMON_STRING_32];    
    BOOL bPersonStatus;                             
    EM_HAT_STYLE emHatStyle;                        
    EM_UNIFIED_COLOR_TYPE emHatColor;               
    NET_MAN_TEMPERATURE_INFO stuManTemperatureInfo; 
    int nCompanionInfo;                             
    NET_COMPANION_INFO stuCompanionInfo[12];        
    EM_MASK_STATE_TYPE emMask;                      
    UINT nFaceIndex;                                
    int nScore;                                     
    int nLiftNo;                                    
    char szQRCode[512];                             
    EM_FACE_CHECK emFaceCheck;                      
    EM_QRCODE_IS_EXPIRED emQRCodeIsExpired;         
    EM_QRCODE_STATE emQRCodeState;                  
    NET_TIME stuQRCodeValidTo;                      
    EM_LIFT_CALLER_TYPE emLiftCallerType;           
    UINT nBlockId;                                  
    char szSection[64];                             
    char szWorkClass[256];                          
    EM_TEST_ITEMS emTestItems;                      
    NET_TEST_RESULT stuTestResult;                  
    BOOL bUseCardNameEx;                            
    char szCardNameEx[128];                         
    int nHSJCResult;                                
    int nVaccinateFlag;                             
    char szVaccineName[128];                        
    int nDateCount;                                 
    char szVaccinateDate[8][32];                    
    EM_TRAVEL_CODE_COLOR emTravelCodeColor;         
    int nCityCount;                                 
    char szPassingCity[16][128];                    
    char szTrafficPlate[32];                        
    char szRecordLocalUrl[128];                     
    char szHSJCReportDate[32];                      
    int nHSJCExpiresIn;                             
    char szAntigenReportDate[32];                   
    int nAntigenStatus;                             
    int nAntigenExpiresIn;                          
    char szCheckOutType[32];                        
    char szCheckOutCause[512];                      
    NET_TIME stuCreateTimeRealUTC;                  
    char szLocationName[256];                       
    char szLocationAddress[256];                    
    char szLocationType[256];                       
} NET_RECORDSET_ACCESS_CTL_CARDREC;
typedef struct tagNET_RECORDSET_HOLIDAY
{
    DWORD dwSize;
    int nRecNo;                               
    int nDoorNum;                             
    int sznDoors[DH_MAX_DOOR_NUM];            
    NET_TIME stuStartTime;                    
    NET_TIME stuEndTime;                      
    BOOL bEnable;                             
    char szHolidayNo[DH_COMMON_STRING_32];    
    char szHolidayName[DH_COMMON_STRING_128]; 
} NET_RECORDSET_HOLIDAY;
typedef enum tagEM_CARD_PROVINCE
{
    EM_CARD_UNKNOWN = 10,        
    EM_CARD_BEIJING = 11,        
    EM_CARD_TIANJIN = 12,        
    EM_CARD_HEBEI = 13,          
    EM_CARD_SHANXI_TAIYUAN = 14, 
    EM_CARD_NEIMENGGU = 15,      
    EM_CARD_LIAONING = 21,       
    EM_CARD_JILIN = 22,          
    EM_CARD_HEILONGJIANG = 23,   
    EM_CARD_SHANGHAI = 31,       
    EM_CARD_JIANGSU = 32,        
    EM_CARD_ZHEJIANG = 33,       
    EM_CARD_ANHUI = 34,          
    EM_CARD_FUJIAN = 35,         
    EM_CARD_JIANGXI = 36,        
    EM_CARD_SHANDONG = 37,       
    EM_CARD_HENAN = 41,          
    EM_CARD_HUBEI = 42,          
    EM_CARD_HUNAN = 43,          
    EM_CARD_GUANGDONG = 44,      
    EM_CARD_GUANGXI = 45,        
    EM_CARD_HAINAN = 46,         
    EM_CARD_CHONGQING = 50,      
    EM_CARD_SICHUAN = 51,        
    EM_CARD_GUIZHOU = 52,        
    EM_CARD_YUNNAN = 53,         
    EM_CARD_XIZANG = 54,         
    EM_CARD_SHANXI_XIAN = 61,    
    EM_CARD_GANSU = 62,          
    EM_CARD_QINGHAI = 63,        
    EM_CARD_NINGXIA = 64,        
    EM_CARD_XINJIANG = 65,       
    EM_CARD_XIANGGANG = 71,      
    EM_CARD_AOMEN = 82,          
    EM_CARD_TAIWAN = 83,         
} EM_CARD_PROVINCE;
typedef enum tagEM_CAR_TYPE
{
    EM_CAR_0,   
    EM_CAR_1,   
    EM_CAR_2,   
    EM_CAR_3,   
    EM_CAR_4,   
    EM_CAR_5,   
    EM_CAR_6,   
    EM_CAR_7,   
    EM_CAR_8,   
    EM_CAR_9,   
    EM_CAR_10,  
    EM_CAR_11,  
    EM_CAR_12,  
    EM_CAR_13,  
    EM_CAR_14,  
    EM_CAR_15,  
    EM_CAR_16,  
    EM_CAR_17,  
    EM_CAR_18,  
    EM_CAR_19,  
    EM_CAR_20,  
    EM_CAR_21,  
    EM_CAR_22,  
    EM_CAR_23,  
    EM_CAR_24,  
    EM_CAR_25,  
    EM_CAR_26,  
    EM_CAR_27,  
    EM_CAR_28,  
    EM_CAR_29,  
    EM_CAR_30,  
    EM_CAR_31,  
    EM_CAR_32,  
    EM_CAR_33,  
    EM_CAR_34,  
    EM_CAR_35,  
    EM_CAR_36,  
    EM_CAR_37,  
    EM_CAR_38,  
    EM_CAR_39,  
    EM_CAR_40,  
    EM_CAR_41,  
    EM_CAR_42,  
    EM_CAR_43,  
    EM_CAR_44,  
    EM_CAR_45,  
    EM_CAR_46,  
    EM_CAR_47,  
    EM_CAR_48,  
    EM_CAR_49,  
    EM_CAR_50,  
    EM_CAR_51,  
    EM_CAR_52,  
    EM_CAR_53,  
    EM_CAR_54,  
    EM_CAR_55,  
    EM_CAR_56,  
    EM_CAR_57,  
    EM_CAR_58,  
    EM_CAR_59,  
    EM_CAR_60,  
    EM_CAR_61,  
    EM_CAR_62,  
    EM_CAR_63,  
    EM_CAR_64,  
    EM_CAR_65,  
    EM_CAR_66,  
    EM_CAR_67,  
    EM_CAR_68,  
    EM_CAR_69,  
    EM_CAR_70,  
    EM_CAR_71,  
    EM_CAR_72,  
    EM_CAR_73,  
    EM_CAR_74,  
    EM_CAR_75,  
    EM_CAR_76,  
    EM_CAR_77,  
    EM_CAR_78,  
    EM_CAR_79,  
    EM_CAR_80,  
    EM_CAR_81,  
    EM_CAR_82,  
    EM_CAR_83,  
    EM_CAR_84,  
    EM_CAR_85,  
    EM_CAR_86,  
    EM_CAR_87,  
    EM_CAR_88,  
    EM_CAR_89,  
    EM_CAR_90,  
    EM_CAR_91,  
    EM_CAR_92,  
    EM_CAR_93,  
    EM_CAR_94,  
    EM_CAR_95,  
    EM_CAR_96,  
    EM_CAR_97,  
    EM_CAR_98,  
    EM_CAR_99,  
    EM_CAR_100, 
    EM_CAR_101, 
    EM_CAR_102, 
    EM_CAR_103, 
    EM_CAR_104, 
    EM_CAR_105, 
    EM_CAR_106, 
    EM_CAR_107, 
    EM_CAR_108, 
    EM_CAR_109, 
    EM_CAR_110, 
    EM_CAR_111, 
    EM_CAR_112, 
    EM_CAR_113, 
    EM_CAR_114, 
    EM_CAR_115, 
    EM_CAR_116, 
    EM_CAR_117, 
    EM_CAR_118, 
    EM_CAR_119, 
    EM_CAR_120, 
    EM_CAR_121, 
    EM_CAR_122, 
    EM_CAR_123, 
    EM_CAR_124, 
    EM_CAR_125, 
    EM_CAR_126, 
    EM_CAR_127, 
    EM_CAR_128, 
    EM_CAR_129, 
    EM_CAR_130, 
    EM_CAR_131, 
    EM_CAR_132, 
    EM_CAR_133, 
    EM_CAR_134, 
    EM_CAR_135, 
    EM_CAR_136, 
    EM_CAR_137, 
    EM_CAR_138, 
    EM_CAR_139, 
    EM_CAR_140, 
    EM_CAR_141, 
    EM_CAR_142, 
    EM_CAR_143, 
    EM_CAR_144, 
    EM_CAR_145, 
    EM_CAR_146, 
    EM_CAR_147, 
    EM_CAR_148, 
    EM_CAR_149, 
    EM_CAR_150, 
    EM_CAR_151, 
    EM_CAR_152, 
    EM_CAR_153, 
    EM_CAR_154, 
    EM_CAR_155, 
    EM_CAR_156, 
    EM_CAR_157, 
    EM_CAR_158, 
    EM_CAR_159, 
    EM_CAR_160, 
    EM_CAR_161, 
    EM_CAR_162, 
    EM_CAR_163, 
    EM_CAR_164, 
    EM_CAR_165, 
    EM_CAR_166, 
    EM_CAR_167, 
    EM_CAR_168, 
    EM_CAR_169, 
    EM_CAR_170, 
    EM_CAR_171, 
    EM_CAR_172, 
    EM_CAR_173, 
    EM_CAR_174, 
    EM_CAR_175, 
    EM_CAR_176, 
    EM_CAR_177, 
    EM_CAR_178, 
    EM_CAR_179, 
    EM_CAR_180, 
    EM_CAR_181, 
    EM_CAR_182, 
    EM_CAR_183, 
    EM_CAR_184, 
    EM_CAR_185, 
    EM_CAR_186, 
    EM_CAR_187, 
    EM_CAR_188, 
    EM_CAR_189, 
    EM_CAR_190, 
    EM_CAR_191, 
    EM_CAR_192, 
    EM_CAR_193, 
    EM_CAR_194, 
    EM_CAR_195, 
    EM_CAR_196, 
    EM_CAR_197, 
    EM_CAR_198, 
    EM_CAR_199, 
    EM_CAR_200, 
    EM_CAR_201, 
    EM_CAR_202, 
    EM_CAR_203, 
    EM_CAR_204, 
    EM_CAR_205, 
    EM_CAR_206, 
    EM_CAR_207, 
    EM_CAR_208, 
    EM_CAR_209, 
    EM_CAR_210, 
    EM_CAR_211, 
    EM_CAR_212, 
    EM_CAR_213, 
    EM_CAR_214, 
    EM_CAR_215, 
    EM_CAR_216, 
    EM_CAR_217, 
    EM_CAR_218, 
    EM_CAR_219, 
    EM_CAR_220, 
    EM_CAR_221, 
    EM_CAR_222, 
    EM_CAR_223, 
    EM_CAR_224, 
    EM_CAR_225, 
    EM_CAR_226, 
    EM_CAR_227, 
    EM_CAR_228, 
    EM_CAR_229, 
    EM_CAR_230, 
} EM_CAR_TYPE;
typedef enum tagEM_PLATE_TYPE
{
    EM_PLATE_OTHER,              
    EM_PLATE_BIG_CAR,            
    EM_PLATE_SMALL_CAR,          
    EM_PLATE_EMBASSY_CAR,        
    EM_PLATE_CONSULATE_CAR,      
    EM_PLATE_ABROAD_CAR,         
    EM_PLATE_FOREIGN_CAR,        
    EM_PLATE_LOW_SPEED_CAR,      
    EM_PLATE_COACH_CAR,          
    EM_PLATE_MOTORCYCLE,         
    EM_PLATE_NEW_POWER_CAR,      
    EM_PLATE_POLICE_CAR,         
    EM_PLATE_HONGKONG_MACAO_CAR, 
    EM_PLATE_WJPOLICE_CAR,
    EM_PLATE_OUTERGUARD_CAR,
    EM_PLATE_TEMPORARY_LICENSE_FOR_NON_MOTOR_VEHICLES,     
    EM_PLATE_OFFICIAL_LICENSE_PLATE_FOR_NON_MOTOR_VEHICLE, 
} EM_PLATE_TYPE;
typedef enum tagEM_CAR_COLOR_TYPE
{
    EM_CAR_COLOR_WHITE,        
    EM_CAR_COLOR_BLACK,        
    EM_CAR_COLOR_RED,          
    EM_CAR_COLOR_YELLOW,       
    EM_CAR_COLOR_GRAY,         
    EM_CAR_COLOR_BLUE,         
    EM_CAR_COLOR_GREEN,        
    EM_CAR_COLOR_PINK,         
    EM_CAR_COLOR_PURPLE,       
    EM_CAR_COLOR_DARK_PURPLE,  
    EM_CAR_COLOR_BROWN,        
    EM_CAR_COLOR_MAROON,       
    EM_CAR_COLOR_SILVER_GRAY,  
    EM_CAR_COLOR_DARK_GRAY,    
    EM_CAR_COLOR_WHITE_SMOKE,  
    EM_CAR_COLOR_DEEP_ORANGE,  
    EM_CAR_COLOR_LIGHT_ROSE,   
    EM_CAR_COLOR_TOMATO_RED,   
    EM_CAR_COLOR_OLIVE,        
    EM_CAR_COLOR_GOLDEN,       
    EM_CAR_COLOR_DARK_OLIVE,   
    EM_CAR_COLOR_YELLOW_GREEN, 
    EM_CAR_COLOR_GREEN_YELLOW, 
    EM_CAR_COLOR_FOREST_GREEN, 
    EM_CAR_COLOR_OCEAN_BLUE,   
    EM_CAR_COLOR_DEEP_SKYBLUE, 
    EM_CAR_COLOR_CYAN,         
    EM_CAR_COLOR_DEEP_BLUE,    
    EM_CAR_COLOR_DEEP_RED,     
    EM_CAR_COLOR_DEEP_GREEN,   
    EM_CAR_COLOR_DEEP_YELLOW,  
    EM_CAR_COLOR_DEEP_PINK,    
    EM_CAR_COLOR_DEEP_PURPLE,  
    EM_CAR_COLOR_DEEP_BROWN,   
    EM_CAR_COLOR_DEEP_CYAN,    
    EM_CAR_COLOR_ORANGE,       
    EM_CAR_COLOR_DEEP_GOLDEN,  
    EM_CAR_COLOR_OTHER = 255,  
} EM_CAR_COLOR_TYPE;
typedef enum tagEM_USE_PROPERTY_TYPE
{
    EM_USE_PROPERTY_NONOPERATING,                   
    EM_USE_PROPERTY_HIGWAY,                         
    EM_USE_PROPERTY_BUS,                            
    EM_USE_PROPERTY_TAXI,                           
    EM_USE_PROPERTY_FREIGHT,                        
    EM_USE_PROPERTY_LEASE,                          
    EM_USE_PROPERTY_SECURITY,                       
    EM_USE_PROPERTY_COACH,                          
    EM_USE_PROPERTY_SCHOOLBUS,                      
    EM_USE_PROPERTY_FOR_DANGE_VEHICLE,              
    EM_USE_PROPERTY_OTHER,                          
    EM_USE_PROPERTY_ONLINE_CAR_HAILING,             
    EM_USE_PROPERTY_NON_MOTORIZED_TAKE_OUT_VEHICLE, 
    EM_USE_PROPERTY_NON_MOTORIZED_EXPRESS_CAR,      
} EM_USE_PROPERTY_TYPE;
typedef struct tagNET_RFIDELETAG_INFO
{
    BYTE szCardID[MAX_RFIDELETAG_CARDID_LEN];           
    int nCardType;                                      
    EM_CARD_PROVINCE emCardPrivince;                    
    char szPlateNumber[DH_MAX_PLATE_NUMBER_LEN];        
    char szProductionDate[MAX_RFIDELETAG_DATE_LEN];     
    EM_CAR_TYPE emCarType;                              
    int nPower;                                         
    int nDisplacement;                                  
    int nAntennaID;                                     
    EM_PLATE_TYPE emPlateType;                          
    char szInspectionValidity[MAX_RFIDELETAG_DATE_LEN]; 
    int nInspectionFlag;                                
    int nMandatoryRetirement;                           
    EM_CAR_COLOR_TYPE emCarColor;                       
    int nApprovedCapacity;                              
    int nApprovedTotalQuality;                          
    NET_TIME_EX stuThroughTime;                         
    EM_USE_PROPERTY_TYPE emUseProperty;                 
    char szPlateCode[MAX_COMMON_STRING_8];              
    char szPlateSN[MAX_COMMON_STRING_16];               
    char szTID[MAX_COMMON_STRING_64];                   
    BYTE bReserved[40];                                 
} NET_RFIDELETAG_INFO;
typedef struct tagNET_RECORD_ELECTRONICSTAG_INFO
{
    DWORD dwSize;
    int nRecNo;                        
    BOOL bMatch;                       
    UINT unDevID;                      
    NET_RFIDELETAG_INFO stuEleTagInfo; 
} NET_RECORD_ELECTRONICSTAG_INFO;
typedef struct tagNET_RECORD_GPS_LOCATION_INFO
{
    DWORD dwSize;          
    int nRecNo;            
    double dLongitude;     
    double dLatitude;      
    char szPlaceName[128]; 
    char szRadius[16];     
} NET_RECORD_GPS_LOCATION_INFO;
typedef struct tagNET_RECORD_RESIDENT_INFO
{
    DWORD dwSize;                           
    int nRecNo;                             
    char szResidentName[DH_MAX_USERID_LEN]; 
    char szCardNo[DH_MAX_CARDNO_LEN];       
    NET_TIME stuStartTime;                  
    NET_TIME stuEndTime;                    
    char szICNum[DH_MAX_IC_LEN];            
} NET_RECORD_RESIDENT_INFO;
typedef struct tagNET_RECORD_SENSOR_RECORD
{
    DWORD dwSize;         
    UINT uRecNo;          
    NET_TIME stuTime;     
    UINT uDeviceID;       
    BYTE byStatus;        
    BYTE byExceptionCode; 
    BYTE bySwitchOn;                
    BYTE byReserved;                
    int nPowerVoltage;              
    int nPowerCurrent;              
    int nPowerValue;                
    BYTE byReservedSpace[4];        
    double dActualValue;            
    char szName[128];               
    NET_SENSE_METHOD emSenseMethod; 
    EM_SENSE_METHOD_UNIT emUnit;    
} NET_RECORD_SENSOR_RECORD;
typedef struct tagNET_RECORD_ACCESSQRCODE_INFO
{
    DWORD dwSize;                     
    int nRecNo;                       
    char szQRCode[DH_MAX_QRCODE_LEN]; 
    UINT nLeftTimes;                  
    NET_TIME stuStartTime;            
    NET_TIME stuEndTime;              
    char szRoomNumber[16];            
    char szUserID[32];                
} NET_RECORD_ACCESSQRCODE_INFO;
typedef struct tagNET_RECORD_ACCESS_BLUETOOTH_INFO
{
    DWORD dwSize;                          
    int nRecNo;                            
    char szUserName[DH_COMMON_STRING_128]; 
    char szPassword[DH_COMMON_STRING_128]; 
    char szMac[DH_COMMON_STRING_32];       
    char szNote[DH_COMMON_STRING_128];     
} NET_RECORD_ACCESS_BLUETOOTH_INFO;
typedef struct tagFIND_RECORD_ACCESS_BLUETOOTH_INFO_CONDITION
{
    DWORD dwSize;
    char szUserName[DH_COMMON_STRING_128]; 
} FIND_RECORD_ACCESS_BLUETOOTH_INFO_CONDITION;
typedef enum tagEM_RECORD_ACCESS_ALARM_TYPE
{
    EM_RECORD_ACCESS_ALARM_TYPE_UNKNOWN,          
    EM_RECORD_ACCESS_ALARM_TYPE_DOOR_NOTCLOSE,    
    EM_RECORD_ACCESS_ALARM_TYPE_BREAK_IN,         
    EM_RECORD_ACCESS_ALARM_TYPE_REPEAT_ENTER,     
    EM_RECORD_ACCESS_ALARM_TYPE_DURESS,           
    EM_RECORD_ACCESS_ALARM_TYPE_ALARMLOCAL,       
    EM_RECORD_ACCESS_ALARM_TYPE_CHASSIS_INTRUDED, 
    EM_RECORD_ACCESS_ALARM_TYPE_MALICIOUS,        
    EM_RECORD_ACCESS_ALARM_TYPE_BLACKLIST,        
} EM_RECORD_ACCESS_ALARM_TYPE;
typedef enum tagEM_RECORD_ACCESS_ALARM_OPEN_METHOD
{
    EM_RECORD_ACCESS_ALARM_OPEN_METHOD_UNKNOWN,     
    EM_RECORD_ACCESS_ALARM_OPEN_METHOD_PWD,         
    EM_RECORD_ACCESS_ALARM_OPEN_METHOD_FINGERPRINT, 
    EM_RECORD_ACCESS_ALARM_OPEN_METHOD_CARD,        
} EM_RECORD_ACCESS_ALARM_OPEN_METHOD;
typedef struct tagNET_RECORD_ACCESS_ALARMRECORD_INFO
{
    DWORD dwSize;                                         
    int nRecNo;                                           
    char szUserID[DH_COMMON_STRING_128];                  
    EM_RECORD_ACCESS_ALARM_TYPE emAlarmType;              
    int nDevAddress;                                      
    int nChannel;                                         
    EM_RECORD_ACCESS_ALARM_OPEN_METHOD emAlarmOpenMethod; 
    NET_TIME stuTime;                                     
    char szReaderID[32];                                  
    NET_TIME_EX stuCreateTimeRealUTC;                     
} NET_RECORD_ACCESS_ALARMRECORD_INFO;
typedef struct tagFIND_NET_RECORD_ACCESS_ALARMRECORD_INFO_CONDITION
{
    DWORD dwSize;
    char szUserID[DH_COMMON_STRING_128]; 
    NET_TIME stStartTime;                
    NET_TIME stEndTime;                  
    NET_TIME stuCreateTimeRealUTC[2];    
} FIND_NET_RECORD_ACCESS_ALARMRECORD_INFO_CONDITION;
typedef enum tagEM_DOOR_STATUS
{
    EM_DOOR_STATUS_UNKNOWN,      
    EM_DOOR_STATUS_OPEN,         
    EM_DOOR_STATUS_CLOSE,        
    EM_DOOR_STATUS_CLOSE_ALWAYS, 
    EM_DOOR_STATUS_OPEN_ALWAYS,  
} EM_DOOR_STATUS;
typedef struct tagNET_RECORD_ACCESS_DOORSTATUS_INFO
{
    DWORD dwSize;                
    UINT nRecNo;                 
    NET_TIME stuCreateTime;      
    EM_DOOR_STATUS emDoorStatus; 
    char szURL[256];             
    UINT nDoorIndex;             
} NET_RECORD_ACCESS_DOORSTATUS_INFO;
typedef struct tagFIND_RECORD_ACCESS_DOORSTATUS_INFO_CONDITION
{
    DWORD dwSize;                
    EM_DOOR_STATUS emDoorStatus; 
    NET_TIME stuStartTime;       
    NET_TIME stuEndTime;         
} FIND_RECORD_ACCESS_DOORSTATUS_INFO_CONDITION;
typedef struct tagNET_RECORD_ACCESS_CTL_COMMONPASSWORD_INFO
{
    DWORD dwSize;               
    UINT nRecNo;                
    NET_TIME stuCreateTime;     
    char szUserID[256];         
    char szCommonPassword[128]; 
    char szVTONo[16];           
    UINT nDoors;                
    UINT nDoorsAuth[128];       
    NET_TIME stuValidFrom;      
    NET_TIME stuValidTo;        
    UINT nUseTimes;             
    UINT nLeftTimes;            
} NET_RECORD_ACCESS_CTL_COMMONPASSWORD_INFO;
typedef struct tagFIND_RECORD_ACCESS_CTL_COMMONPASSWORD_INFO_CONDITION
{
    DWORD dwSize;       
    char szVTONo[16];   
    char szUserID[256]; 
} FIND_RECORD_ACCESS_CTL_COMMONPASSWORD_INFO_CONDITION;
typedef enum tagEM_CONSUMPTION_STATUS
{
    EM_CONSUMPTION_STATUS_UNKNOWN = -1, 
    EM_CONSUMPTION_STATUS_FAIL,         
    EM_CONSUMPTION_STATUS_SUCC,         
} EM_CONSUMPTION_STATUS;
typedef enum tagEM_CONSUMPTION_RECORD_TYPE
{
    EM_CONSUMPTION_RECORD_TYPE_UNKNOWN = -1, 
    EM_CONSUMPTION_RECORD_TYPE_QUOTA,        
    EM_CONSUMPTION_RECORD_TYPE_NONQUOTA,     
    EM_CONSUMPTION_RECORD_TYPE_DEPOSIT,      
} EM_CONSUMPTION_RECORD_TYPE;
typedef struct tagNET_RECORD_ACCESS_CTL_CONSUMPTION_INFO
{
    DWORD dwSize;                         
    UINT nRecNo;                          
    UINT nBlockId;                        
    NET_TIME stuCreateTime;               
    char szCardNo[16];                    
    char szCardName[128];                 
    NET_ACCESSCTLCARD_TYPE emCardType;    
    char szUserID[12];                    
    NET_ENUM_DIRECTION_ACCESS_CTL emType; 
    EM_CONSUMPTION_STATUS emStatus;       
    NET_ACCESS_DOOROPEN_METHOD emMethod;  
    UINT nDoor;                           
    char szReaderID[32];                  
    UINT nErrorCode;                      
    UINT nSimilarity;                        
    char szSnapFaceURL[128];                 
    EM_CONSUMPTION_RECORD_TYPE emRecordType; 
    UINT nConsumptionAmount;                 
    UINT nRechargeAmount;                    
    char szTransactionSerialNumber[128];     
} NET_RECORD_ACCESS_CTL_CONSUMPTION_INFO;
typedef struct tagFIND_RECORD_ACCESS_CTL_CONSUMPTION_INFO_CONDITION
{
    DWORD dwSize;                     
    BOOL bUserIDEnable;               
    char szUserID[256];               
    BOOL bCardNoEnable;               
    char szCardNo[DH_MAX_CARDNO_LEN]; 
    BOOL bTimeEnable;                 
    NET_TIME stStartTime;             
    NET_TIME stEndTime;               
} FIND_RECORD_ACCESS_CTL_CONSUMPTION_INFO_CONDITION;
typedef enum tagEM_VTO_PUSH_TO_SERVER_TYPE
{
    EM_VTO_PUSH_TO_SERVER_TYPE_UNKNOWN,     
    EM_VTO_PUSH_TO_SERVER_TYPE_IOS,         
    EM_VTO_PUSH_TO_SERVER_TYPE_ANDROID,     
    EM_VTO_PUSH_TO_SERVER_TYPE_DAHUA_CLOUD, 
} EM_VTO_PUSH_TO_SERVER_TYPE;
typedef enum tagEM_VTO_PUSH_RESULT_TYPE
{
    EM_VTO_PUSH_RESULT_TYPE_UNKNOWN,                        
    EM_VTO_PUSH_RESULT_TYPE_SUCCESS,                        
    EM_VTO_PUSH_RESULT_TYPE_TCP_CONNECT_ERROR,              
    EM_VTO_PUSH_RESULT_TYPE_SSL_WRITE_TIME_OUT_ERROR,       
    EM_VTO_PUSH_RESULT_TYPE_SSL_ERROR,                      
    EM_VTO_PUSH_RESULT_TYPE_SSL_READ_TIME_OUT_ERROR,        
    EM_VTO_PUSH_RESULT_TYPE_SSL_SEND_ERROR,                 
    EM_VTO_PUSH_RESULT_TYPE_DNS_ERROR,                      
    EM_VTO_PUSH_RESULT_TYPE_MSG_TIME_OUT,                   
    EM_VTO_PUSH_RESULT_TYPE_CERT_ERROR,                     
    EM_VTO_PUSH_RESULT_TYPE_SSL_RECV_ERROR,                 
    EM_VTO_PUSH_RESULT_TYPE_TOO_LONG_ERROR,                 
    EM_VTO_PUSH_RESULT_TYPE_FCM_INVALID_REGISTRATION_ERROR, 
    EM_VTO_PUSH_RESULT_TYPE_FCM_NOT_REGISTERED_ERROR,       
    EM_VTO_PUSH_RESULT_TYPE_FCM_MSG_RATE_EXCEEDED_ERROR,    
    EM_VTO_PUSH_RESULT_TYPE_FCM_AUTH_ERROR,                 
    EM_VTO_PUSH_RESULT_TYPE_FCM_JSON_ERROR,                 
    EM_VTO_PUSH_RESULT_TYPE_FCM_UNAVAILABLE_ERROR,          
    EM_VTO_PUSH_RESULT_TYPE_FCM_OTHER_ERROR,                
    EM_VTO_PUSH_RESULT_TYPE_NORMAL_FULL_ERROR,              
    EM_VTO_PUSH_RESULT_TYPE_HIGH_FULL_ERROR,                
    EM_VTO_PUSH_RESULT_TYPE_DNS_CHECK_ERROR,                
    EM_VTO_PUSH_RESULT_TYPE_ATTTACH_ERROR,                  
    EM_VTO_PUSH_RESULT_TYPE_TIME_NOT_IN_SCHEDULE,           
    EM_VTO_PUSH_RESULT_TYPE_EVENT_CUSTOM_FILERED,           
    EM_VTO_PUSH_RESULT_TYPE_OTHER_ERROR,                    
} EM_VTO_PUSH_RESULT_TYPE;
typedef struct tagNET_RECORD_ACCESS_MOBILE_PUSH_RESULT_INFO
{
    DWORD dwSize;                                  
    UINT nRecNo;                                   
    UINT nCreateTime;                              
    EM_VTO_PUSH_TO_SERVER_TYPE emPushToServerType; 
    char szEventName[30];                          
    char byReserved[2];                            
    EM_VTO_PUSH_RESULT_TYPE emPushResult;          
    int nChannel;                                  
    char szAppRegisterID[256];                     
    char szAppID[256];                             
    char szDevName[64];                            
} NET_RECORD_ACCESS_MOBILE_PUSH_RESULT_INFO;
typedef enum tagEM_FIND_VTO_PUSH_RESULT_TYPE
{
    EM_FIND_VTO_PUSH_RESULT_TYPE_UNKNOWN, 
    EM_FIND_VTO_PUSH_RESULT_TYPE_ALL,     
    EM_FIND_VTO_PUSH_RESULT_TYPE_SUCCESS, 
    EM_FIND_VTO_PUSH_RESULT_TYPE_FAILD,   
} EM_FIND_VTO_PUSH_RESULT_TYPE;
typedef struct tagFIND_RECORD_ACCESS_MOBILE_PUSH_RESULT_INFO_CONDITION
{
    DWORD dwSize;                                      
    BOOL bValidChannel;                                
    int nChannel;                                      
    BOOL bValidTime;                                   
    UINT nStartTime;                                   
    UINT nStopTime;                                    
    EM_FIND_VTO_PUSH_RESULT_TYPE emFindPushResultType; 
} FIND_RECORD_ACCESS_MOBILE_PUSH_RESULT_INFO_CONDITION;
typedef enum tagEM_VIDEO_TALK_LOG_CALLTYPE
{
    EM_VIDEO_TALK_LOG_CALLTYPE_UNKNOWN = 0, 
    EM_VIDEO_TALK_LOG_CALLTYPE_INCOMING,    
    EM_VIDEO_TALK_LOG_CALLTYPE_OUTGOING,    
    EM_VIDEO_TALK_LOG_CALLTYPE_MAX,         
} EM_VIDEO_TALK_LOG_CALLTYPE;
typedef enum tagEM_VIDEO_TALK_LOG_ENDSTATE
{
    EM_VIDEO_TALK_LOG_ENDSTATE_UNKNOWN = 0, 
    EM_VIDEO_TALK_LOG_ENDSTATE_MISSED,      
    EM_VIDEO_TALK_LOG_ENDSTATE_RECEIVED,    
    EM_VIDEO_TALK_LOG_ENDSTATE_MAX,         
} EM_VIDEO_TALK_LOG_ENDSTATE;
typedef enum tagEM_VIDEO_TALK_LOG_PEERTYPE
{
    EM_VIDEO_TALK_LOG_PEERTYPE_UNKNOWN = 0, 
    EM_VIDEO_TALK_LOG_PEERTYPE_VTO,         
    EM_VIDEO_TALK_LOG_PEERTYPE_VTH,         
    EM_VIDEO_TALK_LOG_PEERTYPE_VTS,         
} EM_VIDEO_TALK_LOG_PEERTYPE;
typedef enum tagNET_RECORD_READFLAG
{
    NET_RECORD_READFLAG_UNREADED = 0, 
    NET_RECORD_READFLAG_READED,       
    NET_RECORD_READFLAG_UNKNOWN,      
} NET_RECORD_READFLAG;
typedef enum tagNET_EM_OFFLINE_CALL_TYPE
{
    NET_EM_OFFLINE_CALL_UNKNOWN = -1, 
    NET_EM_OFFLINE_CALL_ONLINECALL,   
    NET_EM_OFFLINE_CALL_OFFLINECALL,  
    NET_EM_OFFLINE_CALL_NONE = 255,   
} NET_EM_OFFLINE_CALL_TYPE;
typedef struct tagNET_RECORD_VIDEO_TALK_LOG
{
    DWORD dwSize;
    int nRecNo;                               
    NET_TIME stuCreateTime;                   
    EM_VIDEO_TALK_LOG_CALLTYPE emCallType;    
    EM_VIDEO_TALK_LOG_ENDSTATE emEndState;    
    char szPeerNumber[DH_COMMON_STRING_64];   
    EM_VIDEO_TALK_LOG_PEERTYPE emPeerType;    
    char szLocalNumber[DH_COMMON_STRING_64];  
    int nTalkTime;                            
    int nMessageTime;                         
    char szPicturePath[DH_COMMON_STRING_128]; 
    NET_EM_OFFLINE_CALL_TYPE emOfflineCall;   
    NET_TIME_EX stuCreateTimeRealUTC;         
} NET_RECORD_VIDEO_TALK_LOG;
typedef enum tagEM_REGISTER_USER_STATE
{
    EM_REGISTER_USER_STATE_UNKNOWN = 0,    
    EM_REGISTER_USER_STATE_IDLE,           
    EM_REGISTER_USER_STATE_CALLING,        
    EM_REGISTER_USER_STATE_RINGING,        
    EM_REGISTER_USER_STATE_PREVIEWING,     
    EM_REGISTER_USER_STATE_LEAVINGMESSAGE, 
    EM_REGISTER_USER_STATE_TALKING,        
    EM_REGISTER_USER_STATE_MAX,            
} EM_REGISTER_USER_STATE;
typedef enum tagEM_REGISTER_USER_STATE_DEV_TYPE
{
    EM_REGISTER_USER_STATE_DEV_TYPE_UNKNOWN = 0, 
    EM_REGISTER_USER_STATE_DEV_TYPE_DIGIT_VTH,   
    EM_REGISTER_USER_STATE_DEV_TYPE_ANALOG_VTH,  
    EM_REGISTER_USER_STATE_DEV_TYPE_DIGIT_VTO,   
    EM_REGISTER_USER_STATE_DEV_TYPE_ANALOG_VTO,  
    EM_REGISTER_USER_STATE_DEV_TYPE_MAX,         
} EM_REGISTER_USER_STATE_DEV_TYPE;
typedef enum tagEM_REGISTER_USER_STATE_SUPPORTLOCK_TYPE
{
    EM_REGISTER_USER_STATE_SUPPORTLOCK_TYPE_UNKNOWN = 0,     
    EM_REGISTER_USER_STATE_SUPPORTLOCK_TYPE_SUPPORTLOCK,     
    EM_REGISTER_USER_STATE_SUPPORTLOCK_TYPE_NOT_SUPPORTLOCK, 
} EM_REGISTER_USER_STATE_SUPPORTLOCK_TYPE;
typedef enum tagNET_MONITORSTATE_TYPE
{
    NET_MONITORSTATE_TYPE_UNMONITORED = 0, 
    NET_MONITORSTATE_TYPE_MONITORREQUEST,  
    NET_MONITORSTATE_TYPE_MONITORED,       
    NET_MONITORSTATE_TYPE_UNKNOWN,         
} NET_MONITORSTATE_TYPE;
typedef struct tagNET_RECORD_REGISTER_USER_STATE
{
    DWORD dwSize;
    int nRecNo;                                            
    NET_TIME stuCreateTime;                                
    char szUserID[DH_MAX_USERID_LEN];                      
    BOOL bOnline;                                          
    char szAddress[DH_MAX_IPADDR_OR_DOMAIN_LEN];           
    int nPort;                                             
    EM_REGISTER_USER_STATE emVideoTalkState;               
    NET_TIME stuOnlineTime;                                
    NET_TIME stuOfflineTime;                               
    EM_REGISTER_USER_STATE_DEV_TYPE emDevType;             
    EM_REGISTER_USER_STATE_SUPPORTLOCK_TYPE emSupportLock; 
    NET_MONITORSTATE_TYPE emMonitorState;                  
} NET_RECORD_REGISTER_USER_STATE;
typedef enum tagEM_VIDEO_TALK_CONTACT_VTSLAVEBINDMODE
{
    EM_VIDEO_TALK_CONTACT_VTSLAVEBINDMODE_UNKNOWN,           
    EM_VIDEO_TALK_CONTACT_VTSLAVEBINDMODE_SLAVEADDRESS,      
    EM_VIDEO_TALK_CONTACT_VTSLAVEBINDMODE_SLAVEID_SLAVEPORT, 
} EM_VIDEO_TALK_CONTACT_VTSLAVEBINDMODE;
typedef enum tagEM_VIDEO_TALK_CONTACT_TYPE
{
    EM_VIDEO_TALK_CONTACT_TYPE_UNKNOWN, 
    EM_VIDEO_TALK_CONTACT_TYPE_VTH,     
    EM_VIDEO_TALK_CONTACT_TYPE_VTO,     
} EM_VIDEO_TALK_CONTACT_TYPE;
typedef enum tagEM_VIDEO_TALK_CONTACT_REGISTER_TYPE
{
    EM_VIDEO_TALK_CONTACT_REGISTER_TYPE_UNKNOWN, 
    EM_VIDEO_TALK_CONTACT_REGISTER_TYPE_PUBLIC,  
    EM_VIDEO_TALK_CONTACT_REGISTER_TYPE_LOCAL,   
} EM_VIDEO_TALK_CONTACT_REGISTER_TYPE;
typedef struct tagNET_RECORD_VIDEO_TALK_CONTACT
{
    DWORD dwSize;
    int nRecNo;                                              
    NET_TIME stuCreateTime;                                  
    char szFirstName[DH_COMMON_STRING_32];                   
    char szFamilyName[DH_COMMON_STRING_32];                  
    char szVTShortNumber[DH_COMMON_STRING_16];               
    char szVTMiddleNumber[DH_COMMON_STRING_32];              
    char szVTLongNumber[DH_COMMON_STRING_64];                
    char szVTNetAddress[DH_MAX_IPADDR_LEN_EX];               
    char szVTOPosition[DH_COMMON_STRING_64];                 
    EM_VIDEO_TALK_CONTACT_VTSLAVEBINDMODE emVTSlaveBindMode; 
    char szVTSlaveId[DH_COMMON_STRING_32];                   
    char szVTSlavePort[DH_COMMON_STRING_32];                 
    char szVTSlaveAddress[DH_COMMON_STRING_64];              
    char szNickname[DH_COMMON_STRING_64];                    
    char szNotes[DH_COMMON_STRING_64];                       
    EM_VIDEO_TALK_CONTACT_TYPE emType;                       
    EM_VIDEO_TALK_CONTACT_REGISTER_TYPE emRegisterType;      
    char szVTHPassword[DH_COMMON_STRING_64];                 
    char szVTOBuilding[DH_COMMON_STRING_64];                 
    char szVTOUnit[DH_COMMON_STRING_64];                     
    char szGroupNumber[DH_COMMON_STRING_64];                 
    int nVTSlaveId;                                          
    int nVTSlavePort;                                        
} NET_RECORD_VIDEO_TALK_CONTACT;
typedef enum tagEM_SEX_TYPE
{
    EM_SEX_TYPE_UNKNOWN, 
    EM_SEX_TYPE_MALE,    
    EM_SEX_TYPE_FEMALE,  
} EM_SEX_TYPE;
typedef enum tagEM_HOSPITAL_USER_TYPE
{
    EM_HOSPITAL_USER_TYPE_UNKNOWN,             
    EM_HOSPITAL_USER_TYPE_PATIENT,             
    EM_HOSPITAL_USER_TYPE_ATTENDING_PHYSICIAN, 
    EM_HOSPITAL_USER_TYPE_RESPONSIBLE_NURSE,   
} EM_HOSPITAL_USER_TYPE;
typedef enum tagEM_HOSPITAL_CARE_LEVEL
{
    EM_HOSPITAL_CARE_LEVEL_UNKNOWN, 
    EM_HOSPITAL_CARE_LEVEL_PREMIUM, 
    EM_HOSPITAL_CARE_LEVEL_ONE,     
    EM_HOSPITAL_CARE_LEVEL_TWO,     
    EM_HOSPITAL_CARE_LEVEL_THREE,   
} EM_HOSPITAL_CARE_LEVEL;
typedef struct tagNET_RECORD_HOSPITAL_USER_INFO
{
    DWORD dwSize;
    int nRecNo;                     
    char szID[32];                  
    int nDoctorCount;               
    char szDoctorID[5][32];         
    char szCitizenID[64];           
    char szName[64];                
    EM_SEX_TYPE emSex;              
    UINT nAge;                      
    EM_HOSPITAL_USER_TYPE emType;   
    char szRoomNumber[16];          
    char szBedNumber[8];            
    EM_HOSPITAL_CARE_LEVEL emLevel; 
    NET_TIME_EX stuInUTC;           
    NET_TIME_EX stuOutUTC;          
    char szAdviceInfo[4096];        
    char szExpenseInfo[4096];       
    char szSurgeryInfo[4096];       
    char szDeviceCode[64];          
    char szIntro[4096];             
    int nCareLabelsNum;             
    char szCareLabels[50][64];      
} NET_RECORD_HOSPITAL_USER_INFO;
typedef enum tagEM_HOSPITAL_DEVICE_TYPE
{
    EM_HOSPITAL_DEVICE_TYPE_UNKNOWN,           
    EM_HOSPITAL_DEVICE_TYPE_MEDICAL_HOST,      
    EM_HOSPITAL_DEVICE_TYPE_MEDICAL_EXTENSION, 
    EM_HOSPITAL_DEVICE_TYPE_WARD_DOOR_MACHINE, 
    EM_HOSPITAL_DEVICE_TYPE_WARD_EXTENSION,    
    EM_HOSPITAL_DEVICE_TYPE_AREA_DOOR_MACHINE, 
} EM_HOSPITAL_DEVICE_TYPE;
typedef struct tagNET_RECORD_HOSPITAL_DEVICE_INFO
{
    DWORD dwSize;                         
    int nRecNo;                           
    char szDeviceCode[64];                
    char szDeviceName[128];               
    char szCallNumber[32];                
    char szRoomNumber[16];                
    char szBedNumber[8];                  
    EM_HOSPITAL_DEVICE_TYPE emDeviceType; 
    char szAddress[24];                   
    char szUserName[33];                  
    char szReserved1[3];                  
    char szPassword[33];                  
    char szReserved2[3];                  
    int nHostCodeCount;                   
    char szHostCode[10][64];              
    int nOnlineStatus;                    
} NET_RECORD_HOSPITAL_DEVICE_INFO;
typedef enum tagNET_ANNOUNCE_STATE
{
    NET_ANNOUNCE_STATE_UNSENDED = 0, 
    NET_ANNOUNCE_STATE_SENDED,       
    NET_ANNOUNCE_STATE_EXPIRED,      
    NET_ANNOUNCE_STATE_UNKNOWN,      
} NET_ANNOUNCE_STATE;
typedef enum tagNET_ANNOUNCE_READFLAG
{
    NET_ANNOUNCE_READFLAG_UNREADED = 0, 
    NET_ANNOUNCE_READFLAG_READED,       
    NET_ANNOUNCE_READFLAG_UNKNOWN,      
} NET_ANNOUNCE_READFLAG;
typedef struct tagNET_RECORD_ANNOUNCEMENT_INFO
{
    DWORD dwSize;
    int nRecNo;                                   
    NET_TIME stuCreateTime;                       
    NET_TIME stuIssueTime;                        
    char szAnnounceTitle[DH_COMMON_STRING_64];    
    char szAnnounceContent[DH_COMMON_STRING_256]; 
    char szAnnounceDoor[DH_COMMON_STRING_16];     
    NET_TIME stuExpireTime;                       
    NET_ANNOUNCE_STATE emAnnounceState;           
    NET_ANNOUNCE_READFLAG emAnnounceReadFlag;     
    UINT nBackgroundPicture;                      
    BOOL bUseEx;                                  
    char szAnnounceTitleEx[256];                  
    char szAnnounceContentEx[1024];               
    NET_TIME_EX stuCreateTimeRealUTC;             
    NET_TIME stuIssueTimeRealUTC;                 
    NET_TIME stuExpirTimeRealUTC;                 
} NET_RECORD_ANNOUNCEMENT_INFO;
typedef struct tagFIND_RECORD_ANNOUNCEMENT_CONDITION
{
    DWORD dwSize;
    BOOL bTimeEnable;     
    NET_TIME stStartTime; 
    NET_TIME stEndTime;   
} FIND_RECORD_ANNOUNCEMENT_CONDITION;
typedef struct tagNET_RECORD_ALARMRECORD_INFO
{
    DWORD dwSize;
    int nRecNo;                         
    NET_TIME stuCreateTime;             
    int nChannelID;                     
    NET_SENSE_METHOD emSenseMethod;     
    char szRoomNumber[DH_MAX_DOOR_NUM]; 
    NET_ANNOUNCE_READFLAG emReadFlag;   
    char szNotes[128];                  
} NET_RECORD_ALARMRECORD_INFO;
typedef struct tagFIND_RECORD_ALARMRECORD_CONDITION
{
    DWORD dwSize;
    BOOL bTimeEnable;     
    NET_TIME stStartTime; 
    NET_TIME stEndTime;   
} FIND_RECORD_ALARMRECORD_CONDITION;
typedef struct tagALARM_ACCESS_CTL_NOT_CLOSE_INFO
{
    DWORD dwSize;
    int nDoor;                            
    char szDoorName[DH_MAX_DOORNAME_LEN]; 
    NET_TIME stuTime;                     
    int nAction;                          
    UINT nEventID;                        
    BOOL bRealUTC;                        
    NET_TIME_EX RealUTC;                  
} ALARM_ACCESS_CTL_NOT_CLOSE_INFO;
typedef enum tagEM_BREAK_IN_METHOD
{
    EM_BREAK_IN_METHOD_UNKNOWN, 
    EM_BREAK_IN_METHOD_ILLEGAL, 
    EM_BREAK_IN_METHOD_REVERSE, 
} EM_BREAK_IN_METHOD;
typedef struct tagALARM_ACCESS_CTL_BREAK_IN_INFO
{
    DWORD dwSize;
    int nDoor;                            
    char szDoorName[DH_MAX_DOORNAME_LEN]; 
    NET_TIME stuTime;                     
    UINT nEventID;                        
    EM_BREAK_IN_METHOD emMethod;          
    BOOL bRealUTC;                        
    NET_TIME_EX RealUTC;                  
    BYTE reserved[4];                     
} ALARM_ACCESS_CTL_BREAK_IN_INFO;
typedef struct tagALARM_ACCESS_CTL_REPEAT_ENTER_INFO
{
    DWORD dwSize;
    int nDoor;                            
    char szDoorName[DH_MAX_DOORNAME_LEN]; 
    NET_TIME stuTime;                     
    char szCardNo[DH_MAX_CARDNO_LEN];     
    UINT nEventID;                        
} ALARM_ACCESS_CTL_REPEAT_ENTER_INFO;
typedef struct tagALARM_ACCESS_CTL_DURESS_INFO
{
    DWORD dwSize;
    int nDoor;                            
    char szDoorName[DH_MAX_DOORNAME_LEN]; 
    char szCardNo[DH_MAX_CARDNO_LEN];     
    NET_TIME stuTime;                     
    UINT nEventID;                        
    char szSN[32];                        
    char szUserID[12];                    
    BOOL bRealUTC;                        
    NET_TIME_EX RealUTC;                  
    char szUserIDEx[32];                  
} ALARM_ACCESS_CTL_DURESS_INFO;
typedef enum tagNET_ACCESS_CTL_EVENT_TYPE
{
    NET_ACCESS_CTL_EVENT_UNKNOWN = 0,
    NET_ACCESS_CTL_EVENT_ENTRY, 
    NET_ACCESS_CTL_EVENT_EXIT,  
} NET_ACCESS_CTL_EVENT_TYPE;
typedef enum tagEM_CARD_STATE
{
    EM_CARD_STATE_UNKNOWN = -1, 
    EM_CARD_STATE_SWIPE,        
    EM_CARD_STATE_COLLECTION,   
} EM_CARD_STATE;
typedef enum tagEM_USER_TYPE
{
    EM_USER_TYPE_UNKNOWN = -1,
    EM_USER_TYPE_ORDINARY,
    EM_USER_TYPE_BLACKLIST,
    EM_USER_TYPE_VIP,
    EM_USER_TYPE_GUEST,
    EM_USER_TYPE_PATROL,
    EM_USER_TYPE_DISABLED,
    EM_USER_TYPE_FROZEN,
    EM_USER_TYPE_LOGOUT,
    EM_USER_TYPE_LOSSCARD
} EM_USER_TYPE;
typedef struct tagNET_VACCINE_INFO
{
    int nVaccinateFlag;          
    char szVaccineName[128];     
    int nDateCount;              
    char szVaccinateDate[8][32]; 
    int nVaccineIntensifyFlag;   
    char szReserved[1020];       
} NET_VACCINE_INFO;
typedef struct tagNET_TRAVEL_INFO
{
    EM_TRAVEL_CODE_COLOR emTravelCodeColor; 
    int nCityCount;                         
    char szPassingCity[16][128];            
    char szReserved[1024];                  
} NET_TRAVEL_INFO;
typedef struct tagNET_HSJC_INFO
{
    char szHSJCReportDate[32];   
    int nHSJCExpiresIn;          
    int nHSJCResult;             
    char szHSJCInstitution[256]; 
    char szReserved[768];        
} NET_HSJC_INFO;
typedef struct tagNET_ANTIGEN_INFO
{
    char szAntigenReportDate[32]; 
    int nAntigenStatus;           
    int nAntigenExpiresIn;        
    char szResvered[256];         
} NET_ANTIGEN_INFO;
typedef struct tagALARM_ACCESS_CTL_EVENT_INFO
{
    DWORD dwSize;
    int nDoor;                                                          
    char szDoorName[DH_MAX_DOORNAME_LEN];                               
    NET_TIME stuTime;                                                   
    NET_ACCESS_CTL_EVENT_TYPE emEventType;                              
    BOOL bStatus;                                                       
    NET_ACCESSCTLCARD_TYPE emCardType;                                  
    NET_ACCESS_DOOROPEN_METHOD emOpenMethod;                            
    char szCardNo[DH_MAX_CARDNO_LEN];                                   
    char szPwd[DH_MAX_CARDPWD_LEN];                                     
    char szReaderID[DH_COMMON_STRING_32];                               
    char szUserID[DH_COMMON_STRING_64];                                 
    char szSnapURL[DH_COMMON_STRING_256];                               
    int nErrorCode;                                                     
    int nPunchingRecNo;                                                 
    int nNumbers;                                                       
    NET_ACCESSCTLCARD_STATE emStatus;                                   
    char szSN[32];                                                      
    NET_ATTENDANCESTATE emAttendanceState;                              
    char szQRCode[512];                                                 
    char szCallLiftFloor[16];                                           
    EM_CARD_STATE emCardState;                                          
    char szCitizenIDNo[20];                                             
    char szCompanionCards[MAX_COMPANION_CARD_NUM][DH_MAX_CARDINFO_LEN]; 
    int nCompanionCardCount;                                            
    EM_HAT_STYLE emHatStyle;                                            
    EM_UNIFIED_COLOR_TYPE emHatColor;                                   
    EM_LIFT_CALLER_TYPE emLiftCallerType;                               
    BOOL bManTemperature;                                               
    NET_MAN_TEMPERATURE_INFO stuManTemperatureInfo;                     
    char szCitizenName[256];                                            
    EM_MASK_STATE_TYPE emMask;                                          
    char szCardName[DH_MAX_CARDNAME_LEN];                               
    UINT nFaceIndex;                                                    
    EM_USER_TYPE emUserType;                                            
    BOOL bRealUTC;                                                      
    NET_TIME_EX RealUTC;                                                
    char szCompanyName[200];                                            
    int nScore;                                                         
    int nLiftNo;                                                        
    EM_QRCODE_IS_EXPIRED emQRCodeIsExpired;                             
    EM_QRCODE_STATE emQRCodeState;                                      
    NET_TIME stuQRCodeValidTo;                                          
    char szDynPWD[32];                                                  
    UINT nBlockId;                                                      
    char szSection[64];                                                 
    char szWorkClass[256];                                              
    EM_TEST_ITEMS emTestItems;                                          
    NET_TEST_RESULT stuTestResult;                                      
    char szDeviceID[128];                                               
    char szUserUniqueID[128];                                           
    BOOL bUseCardNameEx;                                                
    char szCardNameEx[128];                                             
    char szTempPassword[64];                                            
    char szNote[512];                                                   
    int nHSJCResult;                                                    
    NET_VACCINE_INFO stuVaccineInfo;                                    
    NET_TRAVEL_INFO stuTravelInfo;                                      
    char szQRCodeEx[2048];                                              
    NET_HSJC_INFO stuHSJCInfo;                                          
    NET_ANTIGEN_INFO stuAntigenInfo;                                    
    char szHealthGreenStatus[20];                                       
    int nAge;                                                           
    char szCheckOutType[32];                                            
    char szCheckOutCause[512];                                          
    int nTargetCheck;                                                   
    char szReserved[1496];                                              
} ALARM_ACCESS_CTL_EVENT_INFO;
typedef enum tagEM_NET_RECORD_COMMODITY_NOTICE_SOURCE_TYPE
{
    EM_NET_RECORD_COMMODITY_NOTICE_SOURCE_TYPE_UNKNOWN,     
    EM_NET_RECORD_COMMODITY_NOTICE_SOURCE_TYPE_SUPERMARKET, 
    EM_NET_RECORD_COMMODITY_NOTICE_SOURCE_TYPE_RESTAURANT,  
    EM_NET_RECORD_COMMODITY_NOTICE_SOURCE_TYPE_FRUITSTORE,  
} EM_NET_RECORD_COMMODITY_NOTICE_SOURCE_TYPE;
typedef enum tagEM_NET_RECORD_COMMODITY_NOTICE_BARGAIN_TYPE
{
    EM_NET_RECORD_COMMODITY_NOTICE_BARGAIN_TYPE_UNKNOWN, 
    EM_NET_RECORD_COMMODITY_NOTICE_BARGAIN_TYPE_YES,     
    EM_NET_RECORD_COMMODITY_NOTICE_BARGAIN_TYPE_NO,      
} EM_NET_RECORD_COMMODITY_NOTICE_BARGAIN_TYPE;
typedef struct tagNET_RECORD_COMMODITY_NOTICE
{
    DWORD dwSize;
    int nRecNo;                                            
    NET_TIME stuSaleTime;                                  
    char szName[DH_COMMON_STRING_128];                     
    EM_NET_RECORD_COMMODITY_NOTICE_SOURCE_TYPE emSource;   
    char szURL[DH_COMMON_STRING_256];                      
    float fPrice;                                          
    char szID[DH_COMMON_STRING_64];                        
    EM_NET_RECORD_COMMODITY_NOTICE_BARGAIN_TYPE emBargain; 
} NET_RECORD_COMMODITY_NOTICE;
typedef enum tagEM_NET_RECORD_HEALTH_CARE_NOTICE_OFFICE_TYPE
{
    EM_NET_RECORD_HEALTH_CARE_NOTICE_OFFICE_TYPE_UNKNOWN,     
    EM_NET_RECORD_HEALTH_CARE_NOTICE_OFFICE_TYPE_DIGEST,      
    EM_NET_RECORD_HEALTH_CARE_NOTICE_OFFICE_TYPE_STOMATOLOGY, 
} EM_NET_RECORD_HEALTH_CARE_NOTICE_OFFICE_TYPE;
typedef struct tagNET_RECORD_HEALTH_CARE_NOTICE
{
    DWORD dwSize;
    int nRecNo;                                            
    NET_TIME stuStartTime;                                 
    NET_TIME stuEndTime;                                   
    char szHospital[DH_COMMON_STRING_128];                 
    EM_NET_RECORD_HEALTH_CARE_NOTICE_OFFICE_TYPE emOffice; 
    char szOfficeNumber[DH_COMMON_STRING_64];              
    char szDoctorName[DH_COMMON_STRING_128];               
    char szID[DH_COMMON_STRING_64];                        
} NET_RECORD_HEALTH_CARE_NOTICE;
typedef struct tagALARM_IVS_TRAFFIC_REALFLOW_INFO
{
    int nChannelID;         
    char szName[128];       
    char bReserved1[4];     
    double PTS;             
    NET_TIME_EX UTC;        
    int nEventID;           
    unsigned int nSequence; 
    BYTE bEventAction;      
    BYTE byReserved[3];
    int nLane;            
    int nCount;           
    int nSpeed;           
    int nOverPercent;     
    int nMetersUints;     
    BYTE bReserved[1024]; 
} ALARM_IVS_TRAFFIC_REALFLOW_INFO;
typedef struct tagDEV_YUEQINGLIGHTING_STATE_INFO
{
    DWORD dwAction;       
    int nChannelID;       
    NET_TIME_EX UTC;      
    BYTE bReserved[1024]; 
} DEV_YUEQINGLIGHTING_STATE_INFO;
typedef struct tagALARM_VEHICEL_TURNOVER_EVENT_INFO
{
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    BYTE bEventAction;                   
    BYTE byRserved[3];                   
    NET_TIME_EX UTC;                     
    BYTE bReserved[984];                 
} ALARM_VEHICEL_TURNOVER_EVENT_INFO;
typedef struct tagALARM_VEHICEL_COLLISION_EVENT_INFO
{
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    BYTE bEventAction;                   
    BYTE byRserved[3];                   
    NET_TIME_EX UTC;                     
    BYTE bReserved[984];                 
} ALARM_VEHICEL_COLLISION_EVENT_INFO;
typedef struct tagALARM_VEHICEL_CONFIRM_INFO
{
    DWORD dwStructSize;                  
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    BYTE bEventAction;                   
    BYTE byRserved[3];                   
    char szInfo[128];                    
} ALARM_VEHICEL_CONFIRM_INFO;
typedef struct tagEVENT_REGISTER_OFF_INFO
{
    DWORD dwStructSize;                  
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    BYTE bEventAction;                   
    BYTE byRserved[3];                   
} EVENT_REGISTER_OFF_INFO;
typedef struct tagALARM_VIDEO_TIMING
{
    DWORD dwStructSize; 
    DWORD dwAction;     
    DWORD dwChannelID;  
} ALARM_VIDEO_TIMING;
typedef struct tagALARM_VEHICEL_LARGE_ANGLE
{
    DWORD dwStructSize;                  
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    BYTE bEventAction;                   
    BYTE byRserved[3];                   
    unsigned int nSequence;              
} ALARM_VEHICEL_LARGE_ANGLE;
typedef struct tagALARM_AUDIO_ANOMALY
{
    DWORD dwStructSize; 
    DWORD dwAction;     
    DWORD dwChannelID;  
    int nDecibel;                         
    int nFrequency;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_AUDIO_ANOMALY;
typedef enum tagEM_AUDIO_MUTATION_ALARM_TYPE
{
    AUDIO_MUTATION_UNKNOW,
    AUDIO_MUTATION_CRY,
    AUDIO_MUTATION_ALARM,
    AUDIO_MUTATION_GUNSHOT,
    AUDIO_MUTATION_EXPLOSION,
    AUDIO_MUTATION_SCREAM,
    AUDIO_MUTATION_CRASHINGGLASS,
} EM_AUDIO_MUTATION_ALARM_TYPE;
typedef struct tagALARM_AUDIO_MUTATION
{
    DWORD dwStructSize;                       
    DWORD dwAction;                           
    DWORD dwChannelID;                        
    NET_EVENT_INFO_EXTEND stuEventInfoEx;     
    EM_AUDIO_MUTATION_ALARM_TYPE emAudioType; 
    char reserved[512];                       
} ALARM_AUDIO_MUTATION;
typedef struct tagALARM_AUDIO_DETECT
{
    DWORD dwAction;     
    DWORD dwChannelID;  
    char reserved[512]; 
} ALARM_AUDIO_DETECT;
#define MAX_SENSORID_NUMBER 20 
#define MAX_TYRE_NUM 128       
typedef enum tagAlarmTyreFlag
{
    ALARM_TYRE_FLAG_NONE,                   
    ALARM_TYRE_FLAG_NORMAL,                 
    ALARM_TYRE_FLAG_HIGHPRESSURE,           
    ALARM_TYRE_FLAG_LOWERPRESSURE,          
    ALARM_TYRE_FLAG_HIGHTEMP,               
    ALARM_TYRE_FLAG_HIGHTEMP_HIGHPRESSURE,  
    ALARM_TYRE_FLAG_HIGHTEMP_LOWERPRESSURE, 
    ALARM_TYRE_FLAG_INVALID, 
} EM_ALARM_TYER_FALG;
typedef struct tagTYRE_INFO_UNIT
{
    DWORD dwStructSize;                    
    DWORD dwSensorIDNum;                   
    DWORD dwSensorID[MAX_SENSORID_NUMBER]; 
    DWORD dwTyreNum;                       
    DWORD dwTyrePlace;                     
    EM_ALARM_TYER_FALG emAlarmFlag; 
    int nTemp;      
    int nTempLimit; 
    float fPressure;   
    float fUpperLimit; 
    float fLowerLimit; 
    float fVoltage;    
} TYRE_INFO_UNIT;
typedef struct tagEVENT_TYRE_INFO
{
    DWORD dwStructSize;       
    DWORD dwAction;           
    DWORD dwTyreNum;          
    TYRE_INFO_UNIT* pstuTyre; 
} EVENT_TYRE_INFO;
typedef struct
{
    BYTE byFormatTag;     
    WORD nChannels;       
    WORD wBitsPerSample;  
    DWORD nSamplesPerSec; 
} DH_AUDIO_FORMAT, *LPDH_AUDIO_FORMAT;
typedef struct _OPR_RIGHT
{
    DWORD dwID;
    char name[DH_RIGHT_NAME_LENGTH];
    char memo[DH_MEMO_LENGTH];
} OPR_RIGHT;
typedef struct _USER_INFO
{
    DWORD dwID;
    DWORD dwGroupID;
    char name[DH_USER_NAME_LENGTH];
    char passWord[DH_USER_PSW_LENGTH];
    DWORD dwRightNum;
    DWORD rights[DH_MAX_RIGHT_NUM];
    char memo[DH_MEMO_LENGTH];
    DWORD dwReusable; 
} USER_INFO;
typedef struct _USER_GROUP_INFO
{
    DWORD dwID;
    char name[DH_USER_NAME_LENGTH];
    DWORD dwRightNum;
    DWORD rights[DH_MAX_RIGHT_NUM];
    char memo[DH_MEMO_LENGTH];
} USER_GROUP_INFO;
typedef struct _USER_MANAGE_INFO
{
    DWORD dwRightNum; 
    OPR_RIGHT rightList[DH_MAX_RIGHT_NUM];
    DWORD dwGroupNum; 
    USER_GROUP_INFO groupList[DH_MAX_GROUP_NUM];
    DWORD dwUserNum; 
    USER_INFO userList[DH_MAX_USER_NUM];
    DWORD dwSpecial; 
} USER_MANAGE_INFO;
#define DH_USER_NAME_LENGTH_EX 16 
#define DH_USER_PSW_LENGTH_EX 16  
typedef struct _OPR_RIGHT_EX
{
    DWORD dwID;
    char name[DH_RIGHT_NAME_LENGTH];
    char memo[DH_MEMO_LENGTH];
} OPR_RIGHT_EX;
typedef struct _USER_INFO_EX
{
    DWORD dwID;
    DWORD dwGroupID;
    char name[DH_USER_NAME_LENGTH_EX];
    char passWord[DH_USER_PSW_LENGTH_EX];
    DWORD dwRightNum;
    DWORD rights[DH_MAX_RIGHT_NUM];
    char memo[DH_MEMO_LENGTH];
    DWORD dwFouctionMask; 
    BYTE byReserve[32];
} USER_INFO_EX;
typedef struct _USER_GROUP_INFO_EX
{
    DWORD dwID;
    char name[DH_USER_NAME_LENGTH_EX];
    DWORD dwRightNum;
    DWORD rights[DH_MAX_RIGHT_NUM];
    char memo[DH_MEMO_LENGTH];
} USER_GROUP_INFO_EX;
typedef struct _USER_MANAGE_INFO_EX
{
    DWORD dwRightNum; 
    OPR_RIGHT_EX rightList[DH_MAX_RIGHT_NUM];
    DWORD dwGroupNum; 
    USER_GROUP_INFO_EX groupList[DH_MAX_GROUP_NUM];
    DWORD dwUserNum; 
    USER_INFO_EX userList[DH_MAX_USER_NUM];
    DWORD dwFouctionMask; 
    BYTE byNameMaxLength; 
    BYTE byPSWMaxLength;  
    BYTE byReserve[254];
} USER_MANAGE_INFO_EX;
#define DH_NEW_MAX_RIGHT_NUM 1024
#define DH_NEW_USER_NAME_LENGTH 128 
#define DH_NEW_USER_PSW_LENGTH 128  
typedef struct _OPR_RIGHT_NEW
{
    DWORD dwSize;
    DWORD dwID;
    char name[DH_RIGHT_NAME_LENGTH];
    char memo[DH_MEMO_LENGTH];
} OPR_RIGHT_NEW;
typedef struct _USER_INFO_NEW
{
    DWORD dwSize;
    DWORD dwID;
    DWORD dwGroupID;
    char name[DH_NEW_USER_NAME_LENGTH];
    char passWord[DH_NEW_USER_PSW_LENGTH];
    DWORD dwRightNum;
    DWORD rights[DH_NEW_MAX_RIGHT_NUM];
    char memo[DH_MEMO_LENGTH];
    DWORD dwFouctionMask; 
    NET_TIME stuTime;     
    BYTE byIsAnonymous;   
    BYTE byReserve[7];
} USER_INFO_NEW;
typedef struct tagNET_USER_INFO_NEW_EX
{
    DWORD dwSize;
    DWORD dwID;           
    DWORD dwGroupID;      
    char szName[128];     
    char szPassWord[128]; 
    DWORD dwRightNum;     
    DWORD dwRights[3072]; 
    char szMemo[32];      
    DWORD dwFouctionMask; 
    NET_TIME stuTime;     
    BYTE byIsAnonymous;   
    BYTE byReserve[3];
} NET_USER_INFO_NEW_EX;
typedef struct tagREMAIN_MODIFY_TIME_AND_LOCK_SECOND
{
    DWORD dwSize;           
    int nRemainModifytimes; 
    int nRemainLockSecond;  
} REMAIN_MODIFY_TIME_AND_LOCK_SECOND;
typedef struct _USER_GROUP_INFO_NEW
{
    DWORD dwSize;
    DWORD dwID;
    char name[DH_USER_NAME_LENGTH_EX];
    DWORD dwRightNum;
    DWORD rights[DH_NEW_MAX_RIGHT_NUM];
    char memo[DH_MEMO_LENGTH];
} USER_GROUP_INFO_NEW;
typedef struct _USER_GROUP_INFO_EX2
{
    DWORD dwSize;
    DWORD dwID;
    char name[DH_NEW_USER_NAME_LENGTH];
    DWORD dwRightNum;
    DWORD rights[DH_NEW_MAX_RIGHT_NUM];
    char memo[DH_MEMO_LENGTH];
} USER_GROUP_INFO_EX2;
typedef struct tagNET_USER_GROUP_INFO_EX3
{
    DWORD dwSize;
    DWORD dwID;           
    char szName[128];     
    DWORD dwRightNum;     
    DWORD dwRights[3072]; 
    char szMemo[32];      
    BYTE byReserve[4];
} NET_USER_GROUP_INFO_EX3;
typedef struct _USER_MANAGE_INFO_NEW
{
    DWORD dwSize;
    DWORD dwRightNum; 
    OPR_RIGHT_NEW rightList[DH_NEW_MAX_RIGHT_NUM];
    DWORD dwGroupNum;                                
    USER_GROUP_INFO_NEW groupList[DH_MAX_GROUP_NUM]; 
    DWORD dwUserNum;                                 
    USER_INFO_NEW userList[DH_MAX_USER_NUM];
    DWORD dwFouctionMask; 
    BYTE byNameMaxLength; 
    BYTE byPSWMaxLength;  
    BYTE byReserve[254];
    USER_GROUP_INFO_EX2 groupListEx[DH_MAX_GROUP_NUM]; 
} USER_MANAGE_INFO_NEW;
typedef struct tagNET_USER_MANAGE_INFO_NEW_EX
{
    DWORD dwSize;
    BYTE byRightListFlag; 
    BYTE byGroupListFlag; 
    BYTE byUserListFlag;  
    BYTE byReserved1[9];
    DWORD dwMaxRightNum;          
    DWORD dwRetRightNum;          
    OPR_RIGHT_NEW* pstuRightList; 
    DWORD dwMaxGroupNum;                    
    DWORD dwRetGroupNum;                    
    NET_USER_GROUP_INFO_EX3* pstuGroupList; 
    DWORD dwMaxUserNum;                 
    DWORD dwRetUserNum;                 
    NET_USER_INFO_NEW_EX* pstuUserList; 
    DWORD dwFouctionMask; 
    BYTE byNameMaxLength; 
    BYTE byPSWMaxLength;  
    BYTE byReserved[2];
} NET_USER_MANAGE_INFO_NEW_EX;
typedef enum tagEM_OPERATE_USERINFO_TYPE
{
    EM_OPERATE_USERINFO_TYPE_ADD_USER = 3, 
    EM_OPERATE_USERINFO_TYPE_DEL_USER,     
    EM_OPERATE_USERINFO_TYPE_MODIFY_USER,  
    EM_OPERATE_USERINFO_TYPE_MODIFY_PWD,   
    EM_OPERATE_USERINFO_TYPE_ADD_GROUP,    
    EM_OPERATE_USERINFO_TYPE_DEL_GROUP,    
    EM_OPERATE_USERINFO_TYPE_MODIFY_GROUP, 
    EM_OPERATE_USERINFO_TYPE_ADD_USER_EX = 10, 
    EM_OPERATE_USERINFO_TYPE_DEL_USER_EX,      
    EM_OPERATE_USERINFO_TYPE_MODIFY_USER_EX,   
    EM_OPERATE_USERINFO_TYPE_MODIFY_PWD_EX,    
    EM_OPERATE_USERINFO_TYPE_ADD_GROUP_EX,     
    EM_OPERATE_USERINFO_TYPE_DEL_GROUP_EX,     
    EM_OPERATE_USERINFO_TYPE_MODIFY_GROUP_EX,  
} EM_OPERATE_USERINFO_TYPE;
typedef struct _DH_LANGUAGE_DEVINFO
{
    DWORD dwLanguageNum;      
    BYTE byLanguageType[252]; 
} DH_DEV_LANGUAGE_INFO, *LPDH_DEV_LANGUAGE_INFO;
typedef struct
{
    int nTypeCount;          
    BYTE bSupportTypes[128]; 
} DH_DEV_IPC_INFO;
typedef struct
{
    int nStrategy;      
    int nUplimit;       
    int nUsed;          
    BYTE bReserved[64]; 
} DH_DEV_3GFLOW_INFO;
typedef struct
{
    BYTE byEthNum;        
    BYTE byReserved[255]; 
} DH_DEV_3GMODULE_INFO;
typedef struct
{
    DWORD dwId;                          
    char szState[DH_MAX_DDNS_STATE_LEN]; 
    BYTE bReserved[512];                 
} DH_DEV_DNS_INFO;
typedef struct
{
    DWORD dwDdnsServerNum;
    DH_DEV_DNS_INFO stDdns[DH_MAX_DDNS_NUM];
} DH_DEV_MULTI_DDNS_INFO;
typedef struct
{
    char szURLInfo[512]; 
    BYTE bReserved[512];
} DH_DEV_URL_INFO;
typedef struct
{
    DWORD dwVolume;    
    DWORD dwFreeSpace; 
    BYTE dwStatus;     
    BYTE bDiskNum;     
    BYTE bSubareaNum;  
    BYTE bSignal;      
} NET_DEV_DISKSTATE, *LPNET_DEV_DISKSTATE;
typedef struct _DH_HARDDISK_STATE
{
    DWORD dwDiskNum;                           
    NET_DEV_DISKSTATE stDisks[DH_MAX_DISKNUM]; 
} DH_HARDDISK_STATE, *LPDH_HARDDISK_STATE;
typedef DH_HARDDISK_STATE DH_SDCARD_STATE; 
typedef struct
{
    DH_TALK_CODING_TYPE encodeType; 
    int nAudioBit;                  
    DWORD dwSampleRate;             
    int nPacketPeriod;              
    char reserved[60];
} DHDEV_TALKDECODE_INFO;
typedef struct
{
    int nSupportNum;                
    DHDEV_TALKDECODE_INFO type[64]; 
    char reserved[64];
} DHDEV_TALKFORMAT_LIST;
#define NAME_MAX_LEN 16
typedef struct
{
    DWORD dwHighMask;          
    DWORD dwLowMask;           
    char szName[NAME_MAX_LEN]; 
    WORD wCamAddrMin;          
    WORD wCamAddrMax;          
    WORD wMonAddrMin;          
    WORD wMonAddrMax;          
    BYTE bPresetMin;           
    BYTE bPresetMax;           
    BYTE bTourMin;             
    BYTE bTourMax;             
    BYTE bPatternMin;          
    BYTE bPatternMax;          
    BYTE bTileSpeedMin;        
    BYTE bTileSpeedMax;        
    BYTE bPanSpeedMin;         
    BYTE bPanSpeedMax;         
    BYTE bAuxMin;              
    BYTE bAuxMax;              
    int nInternal;             
    char cType;                
    BYTE bReserved_1;          
    BYTE bFuncMask;            
    BYTE bReserved_2;
    char Reserved[4];
} PTZ_OPT_ATTR;
typedef enum tagEM_NET_BURN_DEV_TRAY_TYPE
{
    EM_NET_BURN_DEV_TRAY_TYPE_UNKNOWN,   
    EM_NET_BURN_DEV_TRAY_TYPE_READY,     
    EM_NET_BURN_DEV_TRAY_TYPE_OPEN,      
    EM_NET_BURN_DEV_TRAY_TYPE_NODISK,    
    EM_NET_BURN_DEV_TRAY_TYPE_NOT_READY, 
} EM_NET_BURN_DEV_TRAY_TYPE;
typedef enum tagEM_NET_BURN_DEV_OPERATE_TYPE
{
    EM_NET_BURN_DEV_OPERATE_TYPE_UNKNOWN, 
    EM_NET_BURN_DEV_OPERATE_TYPE_WRITE,   
    EM_NET_BURN_DEV_OPERATE_TYPE_READ,    
    EM_NET_BURN_DEV_OPERATE_TYPE_IDLE,    
} EM_NET_BURN_DEV_OPERATE_TYPE;
typedef struct _NET_DEV_BURNING
{
    DWORD dwDriverType;                         
    DWORD dwBusType;                            
    DWORD dwTotalSpace;                         
    DWORD dwRemainSpace;                        
    BYTE dwDriverName[DH_BURNING_DEV_NAMELEN];  
    EM_NET_BURN_DEV_TRAY_TYPE emTrayType;       
    EM_NET_BURN_DEV_OPERATE_TYPE emOperateType; 
} NET_DEV_BURNING, *LPNET_DEV_BURNING;
typedef struct _DH_BURNING_DEVINFO
{
    DWORD dwDevNum;                                 
    NET_DEV_BURNING stDevs[DH_MAX_BURNING_DEV_NUM]; 
} DH_BURNING_DEVINFO, *LPDH_BURNING_DEVINFO;
typedef struct _DH_BURNING_PROGRESS
{
    BYTE bBurning;        
    BYTE bRomType;        
    BYTE bOperateType;    
    BYTE bType;           
    NET_TIME stTimeStart; 
    DWORD dwTimeElapse;   
    DWORD dwTotalSpace;   
    DWORD dwRemainSpace;  
    DWORD dwBurned;       
    WORD dwStatus;        
    WORD wChannelMask;    
} DH_BURNING_PROGRESS, *LPDH_BURNING_PROGRESS;
typedef struct _DH_LOG_ITEM
{
    DHDEVTIME time;           
    unsigned short type;      
    unsigned char reserved;   
    unsigned char data;       
    unsigned char context[8]; 
} DH_LOG_ITEM, *LPDH_LOG_ITEM;
typedef struct _DH_NEWLOG_ITEM
{
    DHDEVTIME time;     
    WORD type;          
    WORD data;          
    char szOperator[8]; 
    BYTE context[16];   
} DH_NEWLOG_ITEM, *LPDH_NEWLOG_ITEM;
typedef struct _DH_DEVICE_LOG_ITEM
{
    int nLogType;             
    DHDEVTIME stuOperateTime; 
    char szOperator[16];      
    BYTE bReserved[3];
    BYTE bUnionType; 
    union
    {
        char szLogContext[64]; 
        struct
        {
            DH_LOG_ITEM stuLog; 
            BYTE bReserved[48]; 
        } stuOldLog;
    };
    char reserved[16];
} DH_DEVICE_LOG_ITEM, *LPDH_DEVICE_LOG_ITEM;
typedef struct _DH_DEVICE_LOG_ITEM_EX
{
    int nLogType;             
    DHDEVTIME stuOperateTime; 
    char szOperator[16];      
    BYTE bReserved[3];
    BYTE bUnionType; 
    union
    {
        char szLogContext[64]; 
        struct
        {
            DH_LOG_ITEM stuLog; 
            BYTE bReserved[48]; 
        } stuOldLog;
    };
    char szOperation[32];           
    char szDetailContext[4 * 1024]; 
} DH_DEVICE_LOG_ITEM_EX, *LPDH_DEVICE_LOG_ITEM_EX;
typedef struct _LOG_ITEM_RECORD
{
    DHDEVTIME time; 
    BYTE channel;   
    BYTE type;      
    BYTE reserved[2];
} LOG_ITEM_RECORD, *LPLOG_ITEM_RECORD;
typedef struct _QUERY_DEVICE_LOG_PARAM
{
    DH_LOG_QUERY_TYPE emLogType; 
    NET_TIME stuStartTime;       
    NET_TIME stuEndTime;         
    int nStartNum;               
    int nEndNum;                 
    BYTE nLogStuType;            
    BYTE reserved[3];            
    unsigned int nChannelID;     
    BYTE bReserved[40];
} QUERY_DEVICE_LOG_PARAM;
typedef enum tagNET_EM_LOG_QUERY_TYPE
{
    EM_LOG_QUERY_TYPE_UNKNOWN,
    EM_LOG_QUERY_TYPE_TEXT = 1, 
} NET_EM_LOG_QUERY_TYPE;
typedef struct __DEV_DISK_RECORD_INFO
{
    NET_TIME stuBeginTime; 
    NET_TIME stuEndTime;   
    char reserved[128];
} DEV_DISK_RECORD_INFO;
typedef struct __DEV_DISK_RECORD_TIME
{
    NET_TIME stuStartTime1; 
    NET_TIME stuEndTime1;   
    BOOL bTwoPart;          
    NET_TIME stuStartTime2; 
    NET_TIME stuEndTime2;   
    BYTE bDiskNum;          
    BYTE bSubareaNum;       
    BYTE byReserved[62];    
} DEV_DISK_RECORD_TIME;
typedef struct _NKB_PARAM
{
    BYTE bAddressCode; 
    BYTE bKeyStatus;   
    BYTE bExtern1;     
    BYTE bExtern2;     
    BYTE bReserved[60];
} NKB_PARAM;
typedef struct _DISKCTRL_PARAM
{
    DWORD dwSize;              
    int nIndex;                
    int ctrlType;              
    NET_DEV_DISKSTATE stuDisk; 
} DISKCTRL_PARAM;
typedef struct
{
    BYTE bSubareaNum;      
    BYTE bIndex;           
    BYTE bSubareaSize[32]; 
    BYTE bReserved[30];    
} DISKCTRL_SUBAREA;
typedef struct _ALARMCTRL_PARAM
{
    DWORD dwSize;
    int nAlarmNo; 
    int nAction;  
} ALARMCTRL_PARAM;
typedef struct _MATRIXCTRL_PARAM
{
    DWORD dwSize;
    int nChannelNo; 
    int nMatrixNo;  
} MATRIXCTRL_PARAM;
typedef struct _BURNING_PARM
{
    int channelMask;      
    BYTE devMask;         
    BYTE bySpicalChannel; 
    BYTE byReserved[2];   
} BURNNG_PARM;
typedef struct _BURNING_PARM_ATTACH
{
    BOOL bAttachBurn;   
    BYTE bReserved[12]; 
} BURNING_PARM_ATTACH;
typedef struct _MANUAL_SNAP_PARAMETER
{
    int nChannel;        
    BYTE bySequence[64]; 
    BYTE byReserved[60]; 
} MANUAL_SNAP_PARAMETER;
typedef struct _DEVICE_LOCALPREVIEW_SLIPT_PARAMETER
{
    int nSliptMode;      
    int nSubSliptNum;    
    BYTE byReserved[64]; 
} DEVICE_LOCALPREVIEW_SLIPT_PARAMETER;
typedef struct _DEVICE_LOCALPREVIEW_SLIPT_CAP
{
    int nModeNumber;
    int nSliptMode[36];  
    BYTE byReserved[64]; 
} DEVICE_LOCALPREVIEW_SLIPT_CAP;
typedef struct _CROSSING_INFO
{
    char szCrossingID[DH_MAX_CROSSING_ID]; 
    DWORD dwLatitude;                      
    DWORD dwLongitude;                     
    WORD wSpeedLimit;                      
    BYTE byReserved[22];
} CROSSING_INFO;
typedef struct _ROUTE_CROSSING_INFO
{
    BYTE byCrossingNum; 
    BYTE byReserved1;
    WORD wCrossingRange;                               
    CROSSING_INFO stCrossingInfo[DH_MAX_CROSSING_NUM]; 
    BYTE byReserved2[2044];
} ROUTE_CROSSING_INFO;
typedef struct _CTRL_RAID_INFO
{
    char szAction[16]; 
    char szName[16];   
    int nType;         
    int nStatus;       
    int nCntMem;       
    int nMember[32];   
    int nCapacity;     
    int nRemainSpace;  
    int nTank;         
    char reserved[128];
} CTRL_RAID_INFO;
typedef struct _CTRL_SPARE_DISK_INFO
{
    char szAction[16];      
    char szScope[16];       
    char szName[16];        
    unsigned int nIndex;    
    const char* pszDevName; 
    char reserved[124];
} CTRL_SPARE_DISK_INFO;
typedef struct _CTRL_SPARE_DISK_INFO_A
{
    int nCnt; 
    CTRL_SPARE_DISK_INFO stSpaceDiskInfo[32];
} CTRL_SPARE_DISK_INFO_A;
typedef struct __CTRL_ARM_DISARM_PARAM
{
    BYTE bState; 
    char reserve[3];
    const char* szDevPwd;       
    NET_SCENE_MODE emSceneMode; 
    const char* szDevID;        
    char reserve1[16];
} CTRL_ARM_DISARM_PARAM;
typedef struct tagCTRL_ARM_DISARM_PARAM_EX_IN
{
    DWORD dwSize;
    NET_ALARM_MODE emState;     
    const char* szDevPwd;       
    NET_SCENE_MODE emSceneMode; 
    const char* szDevID;        
} CTRL_ARM_DISARM_PARAM_EX_IN;
#define ARM_DISARM_ZONE_MAX (256) 
typedef struct tagCTRL_ARM_DISARM_PARAM_EX_OUT
{
    DWORD dwSize;
    DWORD dwSourceNum;                
    int nSource[ARM_DISARM_ZONE_MAX]; 
    DWORD dwLinkNum;                  
    int nLink[ARM_DISARM_ZONE_MAX];   
} CTRL_ARM_DISARM_PARAM_EX_OUT;
typedef struct tagCTRL_ARM_DISARM_PARAM_EX
{
    DWORD dwSize;
    CTRL_ARM_DISARM_PARAM_EX_IN stuIn;   
    CTRL_ARM_DISARM_PARAM_EX_OUT stuOut; 
} CTRL_ARM_DISARM_PARAM_EX;
typedef struct tagDHCTRL_CONNECT_WIFI_BYWPS_IN
{
    DWORD dwSize;
    int nType;                        
    char szSSID[DH_MAX_SSID_LEN];     
    char szApPin[DH_MAX_APPIN_LEN];   
    char szWLanPin[DH_MAX_APPIN_LEN]; 
} DHCTRL_CONNECT_WIFI_BYWPS_IN;
typedef struct tagDHCTRL_CONNECT_WIFI_BYWPS_OUT
{
    DWORD dwSize;
    char szRetWLanPin[DH_MAX_APPIN_LEN]; 
} DHCTRL_CONNECT_WIFI_BYWPS_OUT;
typedef struct tagDHCTRL_CONNECT_WIFI_BYWPS
{
    DWORD dwSize;
    DHCTRL_CONNECT_WIFI_BYWPS_IN stuWpsInfo;    
    DHCTRL_CONNECT_WIFI_BYWPS_OUT stuWpsResult; 
} DHCTRL_CONNECT_WIFI_BYWPS;
typedef struct tagNET_CTRL_BURNERDOOR
{
    DWORD dwSize;
    const char* szBurnerName; 
    BOOL bResult;             
    BOOL bSafeEject;          
} NET_CTRL_BURNERDOOR;
typedef struct tagNET_CTRL_START_PLAYAUDIO
{
    DWORD dwSize;
    char szAudioPath[DH_MAX_AUDIO_PATH];
} NET_CTRL_START_PLAYAUDIO;
typedef enum tagNET_PLAYAUDIO_TYPE
{
    NET_PLAYAUDIO_TYPE_UNKNOWN = 0,
    NET_PLAYAUDIO_TYPE_PHRASE,    
    NET_PLAYAUDIO_TYPE_FILE,      
    NET_PLAYAUDIO_TYPE_PLATERNUM, 
    NET_PLAYAUDIO_TYPE_MONEY,     
    NET_PLAYAUDIO_TYPE_DATE,      
    NET_PLAYAUDIO_TYPE_TIME,      
    NET_PLAYAUDIO_TYPE_EMPTY,     
} NET_PLAYAUDIO_TYPE;
typedef enum EM_PLAYAUDIO_PRIORITY
{
    EM_PLAYAUDIO_PRIORITY_UNKNOWN,   
    EM_PLAYAUDIO_PRIORITY_FRONT,     
    EM_PLAYAUDIO_PRIORITY_BACK,      
    EM_PLAYAUDIO_PRIORITY_EMERGENCY, 
} EM_PLAYAUDIO_PRIORITY;
typedef struct tagNET_CTRL_PLAYAUDIO_INFO
{
    DWORD dwSize;
    NET_PLAYAUDIO_TYPE emPlayAudioType;  
    char szDetail[DH_COMMON_STRING_128]; 
    int nRepeatTimes;                    
    EM_PLAYAUDIO_PRIORITY emPriority;    
} NET_CTRL_PLAYAUDIO_INFO;
#define DH_MAX_PLAYAUDIO_COUNT 16 
typedef struct tagNET_CTRL_START_PLAYAUDIOEX
{
    DWORD dwSize;
    unsigned int nAudioCount;                                      
    NET_CTRL_PLAYAUDIO_INFO stuAudioInfos[DH_MAX_PLAYAUDIO_COUNT]; 
    UINT nListRepeatTimes;                                         
} NET_CTRL_START_PLAYAUDIOEX;
typedef struct tagNET_CTRL_ALARMBELL
{
    DWORD dwSize;
    int nChannelID; 
} NET_CTRL_ALARMBELL;
typedef enum tagEM_OPEN_DOOR_TYPE
{
    EM_OPEN_DOOR_TYPE_UNKNOWN = 0,
    EM_OPEN_DOOR_TYPE_REMOTE,         
    EM_OPEN_DOOR_TYPE_LOCAL_PASSWORD, 
    EM_OPEN_DOOR_TYPE_LOCAL_CARD,     
    EM_OPEN_DOOR_TYPE_LOCAL_BUTTON,   
} EM_OPEN_DOOR_TYPE;
typedef enum tagEM_OPEN_DOOR_DIRECTION
{
    EM_OPEN_DOOR_DIRECTION_UNKNOWN,    
    EM_OPEN_DOOR_DIRECTION_FROM_ENTER, 
    EM_OPEN_DOOR_DIRECTION_FROM_LEAVE, 
} EM_OPEN_DOOR_DIRECTION;
typedef enum tagEM_REMOTE_CHECK_CODE
{
    EM_REMOTE_CHECK_CODE_UNKNOWN = -1, 
    EM_REMOTE_CHECK_CODE_SUCCESS,      
    EM_REMOTE_CHECK_CODE_FAIL,         
} EM_REMOTE_CHECK_CODE;
typedef struct tagNET_CTRL_ACCESS_OPEN
{
    DWORD dwSize;
    int nChannelID;                             
    const char* szTargetID;                     
    char szUserID[MAX_COMMON_STRING_32];        
    EM_OPEN_DOOR_TYPE emOpenDoorType;           
    EM_OPEN_DOOR_DIRECTION emOpenDoorDirection; 
    EM_REMOTE_CHECK_CODE emRemoteCheckCode;     
    char szShortNumber[16];                     
} NET_CTRL_ACCESS_OPEN;
typedef enum tagEM_NET_DOOR_WORK_MODE_TYPE
{
    NET_DOOR_WORK_MODE_UNKNOWN,            
    NET_DOOR_WORK_MODE_NORMAL,             
    NET_DOOR_WORK_MODE_SHUTDOWN,           
    NET_DOOR_WORK_MODE_UNUSED,             
    NET_DOOR_WORK_MODE_OPEN_DOOR_CONTINUE, 
} EM_NET_DOOR_WORK_MODE_TYPE;
typedef struct tagNET_IN_CTRL_ACCESS_SET_DOOR_WORK_MODE
{
    DWORD dwSize;
    EM_NET_DOOR_WORK_MODE_TYPE emWorkMode; 
    int nChannelID;                        
} NET_IN_CTRL_ACCESS_SET_DOOR_WORK_MODE;
typedef struct tagNET_OUT_CTRL_ACCESS_SET_DOOR_WORK_MODE
{
    DWORD dwSize;
} NET_OUT_CTRL_ACCESS_SET_DOOR_WORK_MODE;
typedef struct tagNET_IN_CTRL_SYNC_CABINLED_TIME
{
    DWORD dwSize;
} NET_IN_CTRL_SYNC_CABINLED_TIME;
typedef struct tagNET_OUT_CTRL_SYNC_CABINLED_TIME
{
    DWORD dwSize;
} NET_OUT_CTRL_SYNC_CABINLED_TIME;
typedef enum tagEM_NET_CABIN_LED_PLAY_CONTROL_MODE
{
    NET_CABIN_LED_PLAY_CONTROL_MODE_UNKNOWN,           
    NET_CABIN_LED_PLAY_CONTROL_MODE_NORMAL_TURN_ON,    
    NET_CABIN_LED_PLAY_CONTROL_MODE_NEXT_PROGRAM,      
    NET_CABIN_LED_PLAY_CONTROL_MODE_PREVIOUS_PROGRAM,  
    NET_CABIN_LED_PLAY_CONTROL_MODE_PAUSE,             
    NET_CABIN_LED_PLAY_CONTROL_MODE_PAUSE_TURN_OFF,    
    NET_CABIN_LED_PLAY_CONTROL_MODE_PLAY_GO_ON,        
    NET_CABIN_LED_PLAY_CONTROL_MODE_GO_TO_TEST_ITSELF, 
    NET_CABIN_LED_PLAY_CONTROL_MODE_EXIT_TEST_ITSELF,  
    NET_CABIN_LED_PLAY_CONTROL_MODE_SYSTEM_RESET,      
} EM_NET_CABIN_LED_PLAY_CONTROL_MODE;
typedef struct tagNET_IN_CTRL_CABINLED_PLAYCONTROL
{
    DWORD dwSize;
    EM_NET_CABIN_LED_PLAY_CONTROL_MODE emAction; 
} NET_IN_CTRL_CABINLED_PLAYCONTROL;
typedef struct tagNET_OUT_CTRL_CABINLED_PLAYCONTROL
{
    DWORD dwSize;
} NET_OUT_CTRL_CABINLED_PLAYCONTROL;
typedef enum tagEM_NET_CABIN_LED_MODIFY_CONTENT_CMD_TYPE
{
    NET_CABIN_LED_MODIFY_CONTENT_CMD_TYPE_UNKNOWN,
    NET_CABIN_LED_MODIFY_CONTENT_CMD_TYPE_ADD = 0,    
    NET_CABIN_LED_MODIFY_CONTENT_CMD_TYPE_MODIFY = 1, 
    NET_CABIN_LED_MODIFY_CONTENT_CMD_TYPE_DELETE = 2, 
} EM_NET_CABIN_LED_MODIFY_CONTENT_CMD_TYPE;
typedef enum tagEM_NET_CABIN_LED_MODIFY_CONTENT_EFFECT_TYPE
{
    NET_MODIFY_CONTENT_EFFECT_TYPE_UNKNOWN = -1,
    NET_MODIFY_CONTENT_EFFECT_TYPE_SHOW = 0,                     
    NET_MODIFY_CONTENT_EFFECT_TYPE_MOVE_LEFT,                    
    NET_MODIFY_CONTENT_EFFECT_TYPE_MOVE_RIGHT,                   
    NET_MODIFY_CONTENT_EFFECT_TYPE_MOVE_UP,                      
    NET_MODIFY_CONTENT_EFFECT_TYPE_MOVE_DOWN,                    
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_LEFT,                 
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_RIGHT,                
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_UP,                   
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_DOWN,                 
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_UP_LEFT,              
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_DOWN_LEFT,            
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_UP_RIGHT,             
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_DOWN_RIGHT,           
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_LEFT_RIGHT_TO_CENTER, 
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_CENTER_TO_LEFT_RIGHT, 
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_UP_DOWN_TO_CENTER,    
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_CENTER_TO_UP_DOWN,    
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_LEFT_CROSS_RIGHT,     
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_UP_CROSS_DOWN,        
    NET_MODIFY_CONTENT_EFFECT_TYPE_VERTICAL_BLINDS,              
    NET_MODIFY_CONTENT_EFFECT_TYPE_HORIZONTAL_BLINDS,            
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_CENTER_TO_SIDES,      
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_SIDES_TO_CENTER,      
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_CENTER_TO_CORNER,     
    NET_MODIFY_CONTENT_EFFECT_TYPE_FILL_UP_CORNER_TO_CENTER,     
    NET_MODIFY_CONTENT_EFFECT_TYPE_ROTATE_360,                   
    NET_MODIFY_CONTENT_EFFECT_TYPE_ROTATE_180,                   
} EM_NET_CABIN_LED_MODIFY_CONTENT_EFFECT_TYPE;
typedef struct tagNET_IN_CTRL_CABINLED_MODIFY_CONTENT
{
    DWORD dwSize;
    EM_NET_CABIN_LED_MODIFY_CONTENT_CMD_TYPE emCmd;       
    int nMsgID;                                           
    EM_NET_CABIN_LED_MODIFY_CONTENT_EFFECT_TYPE emEffect; 
    int nSpeed;                                           
    int nDuration;                                        
    char szText[512];                                     
} NET_IN_CTRL_CABINLED_MODIFY_CONTENT;
typedef struct tagNET_OUT_CTRL_CABINLED_MODIFY_CONTENT
{
    DWORD dwSize;
} NET_OUT_CTRL_CABINLED_MODIFY_CONTENT;
typedef struct tagNET_IN_CTRL_CABINLED_GET_CONTENT
{
    DWORD dwSize;
    int nMsgID; 
} NET_IN_CTRL_CABINLED_GET_CONTENT;
typedef struct tagNET_OUT_CTRL_CABINLED_GET_CONTENT
{
    DWORD dwSize;
    int nMsgID;                                           
    EM_NET_CABIN_LED_MODIFY_CONTENT_EFFECT_TYPE emEffect; 
    int nSpeed;                                           
    int nDuration;                                        
    char szText[512];                                     
} NET_OUT_CTRL_CABINLED_GET_CONTENT;
#define NET_CABINLED_SCHEDULE_TIME_SECTION_NUM 8 
typedef struct tagNET_IN_CTRL_CABINLED_SET_SCHEDULE
{
    DWORD dwSize;
    int nIndex;                                                      
    DH_TSECT stuTimeSection[NET_CABINLED_SCHEDULE_TIME_SECTION_NUM]; 
} NET_IN_CTRL_CABINLED_SET_SCHEDULE;
typedef struct tagNET_OUT_CTRL_CABINLED_SET_SCHEDULE
{
    DWORD dwSize;
} NET_OUT_CTRL_CABINLED_SET_SCHEDULE;
typedef struct tagNET_IN_CTRL_CABINLED_GET_SCHEDULE
{
    DWORD dwSize;
    int nIndex; 
} NET_IN_CTRL_CABINLED_GET_SCHEDULE;
typedef struct tagNET_OUT_CTRL_CABINLED_GET_SCHEDULE
{
    DWORD dwSize;
    DH_TSECT stuTimeSection[NET_CABINLED_SCHEDULE_TIME_SECTION_NUM]; 
} NET_OUT_CTRL_CABINLED_GET_SCHEDULE;
typedef struct tagNET_IN_CTRL_CABINLED_GET_CHAR_ENCODING
{
    DWORD dwSize; 
} NET_IN_CTRL_CABINLED_GET_CHAR_ENCODING;
typedef struct tagNET_OUT_CTRL_CABINLED_GET_CHAR_ENCODING
{
    DWORD dwSize;           
    int nCharacterEncoding; 
} NET_OUT_CTRL_CABINLED_GET_CHAR_ENCODING;
typedef enum tagEM_CABIN_LED_CONTROL_TYPE
{
    DH_CABIN_LED_CONTROL_UNKNOWN,           
    DH_CABIN_LED_CONTROL_SYNC_TIME,         
    DH_CABIN_LED_CONTROL_PLAY_CONTROL,      
    DH_CABIN_LED_CONTROL_MODIFY_CONTENT,    
    DH_CABIN_LED_CONTROL_GET_CONTENT,       
    DH_CABIN_LED_CONTROL_SET_SCHEDULE,      
    DH_CABIN_LED_CONTROL_GET_SCHEDULE,      
    DH_CABIN_LED_CONTROL_GET_CHAR_ENCODING, 
} EM_CABIN_LED_CONTROL_TYPE;
typedef struct tagNET_CTRL_ACCESS_CLOSE
{
    DWORD dwSize;   
    int nChannelID; 
} NET_CTRL_ACCESS_CLOSE;
typedef enum tagNET_ALARM_TYPE
{
    NET_ALARM_LOCAL = 0,       
    NET_ALARM_ALARMEXTENDED,   
    NET_ALARM_TEMP,            
    NET_ALARM_URGENCY,         
    NET_ALARM_RCEMERGENCYCALL, 
    NET_ALARM_ALL,             
} NET_ALARM_TYPE;
typedef struct tagNET_CTRL_CLEAR_ALARM
{
    DWORD dwSize;
    int nChannelID;             
    NET_ALARM_TYPE emAlarmType; 
    const char* szDevPwd;       
    BOOL bEventType;            
    int nEventType;             
} NET_CTRL_CLEAR_ALARM;
typedef struct tagNET_CTRL_MONITORWALL_TVINFO
{
    DWORD dwSize;
    int nMonitorWallID;  
    BOOL bDecodeChannel; 
    BOOL bControlID;     
    BOOL bCameraID;      
} NET_CTRL_MONITORWALL_TVINFO;
typedef struct tagNET_CTRL_START_VIDEO_ANALYSE
{
    DWORD dwSize;
    int nChannelId; 
} NET_CTRL_START_VIDEO_ANALYSE;
typedef struct tagNET_CTRL_STOP_VIDEO_ANALYSE
{
    DWORD dwSize;
    int nChannelId; 
} NET_CTRL_STOP_VIDEO_ANALYSE;
typedef struct tagNET_CTRL_MULTIPLAYBACK_CHANNALES
{
    DWORD dwSize;
    LLONG lPlayBackHandle;                           
    int nChannels[DH_MAX_MULTIPLAYBACK_CHANNEL_NUM]; 
    int nChannelNum;                                 
} NET_CTRL_MULTIPLAYBACK_CHANNALES;
typedef struct tagNET_CTRL_SET_BYPASS
{
    DWORD dwSize;
    const char* szDevPwd;   
    NET_BYPASS_MODE emMode; 
    int nLocalCount;        
    int* pnLocal;           
    int nExtendedCount;     
    int* pnExtended;        
} NET_CTRL_SET_BYPASS;
typedef struct tagNET_CTRL_SET_MEDIAKIND
{
    DWORD dwSize;         
    int nMediaKind;       
    DWORD dwChannelCount; 
    int nChannels[256];   
} NET_IN_SET_MEDIAKIND;
typedef struct tagNET_OUT_SET_MEDIAKIND
{
    DWORD dwSize; 
} NET_OUT_SET_MEDIAKIND;
typedef struct tagNET_DEVSTATE_GET_BYPASS
{
    DWORD dwSize;
    int nLocalCount;              
    int* pnLocal;                 
    int nExtendedCount;           
    int* pnExtended;              
    NET_BYPASS_MODE* pemLocal;    
    NET_BYPASS_MODE* pemExtended; 
} NET_DEVSTATE_GET_BYPASS;
typedef struct tagNET_DEVSTATE_BURNERDOOR
{
    DWORD dwSize;
    const char* szBurnerName; 
    bool bEjected;            
    BYTE Reserved[3];         
} NET_DEVSTATE_BURNERDOOR;
typedef struct tagNET_DEVSTATE_DATA_CHECK
{
    DWORD dwSize;                    
    const char* szBurnerName;        
    char szState[DH_MAX_STRING_LEN]; 
    int nPercent;                    
} NET_DEVSTATE_DATA_CHECK;
typedef enum
{
    DH_DVR_DISCONNECT = -1,      
    DH_DVR_SERIAL_RETURN = 1,    
    NET_DEV_AUTOREGISTER_RETURN, 
    NET_DEV_NOTIFY_IP_RETURN,    
} EM_DEV_INFO;
typedef struct tagNET_CB_AUTOREGISTER
{
    DWORD dwSize;                          
    char szDevSerial[DH_DEV_SERIALNO_LEN]; 
    char szToken[MAX_PATH];                
} NET_CB_AUTOREGISTER;
typedef struct tagCLOUDSERVICE_CONNECT_PARAM
{
    DWORD dwSize;
    char szDstIp[DH_MAX_IPADDR_EX_LEN]; 
    int nDstPort;                       
    DWORD dwConnectType;                
    char szToken[MAX_PATH];             
} NET_CLOUDSERVICE_CONNECT_PARAM;
typedef struct tagCLOUDSERVICE_CONNECT_RESULT
{
    DWORD dwSize;
    DWORD dwConnectState;                          
    char szMessage[DH_MAX_CLOUDCONNECT_STATE_LEN]; 
} NET_CLOUDSERVICE_CONNECT_RESULT;
typedef struct tagNET_DEVICEINFO
{
    BYTE sSerialNumber[DH_SERIALNO_LEN]; 
    BYTE byAlarmInPortNum;               
    BYTE byAlarmOutPortNum;              
    BYTE byDiskNum;                      
    BYTE byDVRType;                      
    union
    {
        BYTE byChanNum;      
        BYTE byLeftLogTimes; 
    };
} NET_DEVICEINFO, *LPNET_DEVICEINFO;
typedef struct
{
    BYTE sSerialNumber[DH_SERIALNO_LEN]; 
    int nAlarmInPortNum;                 
    int nAlarmOutPortNum;                
    int nDiskNum;                        
    int nDVRType;                        
    int nChanNum;                        
    BYTE byLimitLoginTime;               
    BYTE byLeftLogTimes;                 
    BYTE bReserved[2];                   
    int nLockLeftTime;                   
    char Reserved[24];                   
} NET_DEVICEINFO_Ex, *LPNET_DEVICEINFO_Ex;
typedef struct
{
    DWORD dwSoftwareVersion;
    DWORD dwSoftwareBuildDate;
    DWORD dwDspSoftwareVersion;
    DWORD dwDspSoftwareBuildDate;
    DWORD dwPanelVersion;
    DWORD dwPanelSoftwareBuildDate;
    DWORD dwHardwareVersion;
    DWORD dwHardwareDate;
    DWORD dwWebVersion;
    DWORD dwWebBuildDate;
} DH_VERSION_INFO, *LPDH_VERSION_INFO;
typedef struct
{
    char szDevSerialNo[DH_DEV_SERIALNO_LEN]; 
    char byDevType;                          
    char szDevType[DH_DEV_TYPE_LEN];         
    int nProtocalVer;                        
    char szSoftWareVersion[DH_MAX_URL_LEN];
    DWORD dwSoftwareBuildDate;
    char szPeripheralSoftwareVersion[DH_MAX_URL_LEN]; 
    DWORD dwPeripheralSoftwareBuildDate;
    char szGeographySoftwareVersion[DH_MAX_URL_LEN]; 
    DWORD dwGeographySoftwareBuildDate;
    char szHardwareVersion[DH_MAX_URL_LEN];
    DWORD dwHardwareDate;
    char szWebVersion[DH_MAX_URL_LEN];
    DWORD dwWebBuildDate;
    char szDetailType[MAX_COMMON_STRING_64]; 
    char reserved[192];
} DHDEV_VERSION_INFO;
typedef struct
{
    DWORD dwVideoStandardMask;     
    DWORD dwImageSizeMask;         
    DWORD dwEncodeModeMask;        
    DWORD dwStreamCap;             
    DWORD dwImageSizeMask_Assi[8]; 
    DWORD dwMaxEncodePower;        
    WORD wMaxSupportChannel;       
    WORD wChannelMaxSetSync;       
} DH_DSP_ENCODECAP, *LPDH_DSP_ENCODECAP;
typedef struct
{
    DWORD dwVideoStandardMask;      
    DWORD dwImageSizeMask;          
    DWORD dwEncodeModeMask;         
    DWORD dwStreamCap;              
    DWORD dwImageSizeMask_Assi[32]; 
    DWORD dwMaxEncodePower;         
    WORD wMaxSupportChannel;        
    WORD wChannelMaxSetSync;        
    BYTE bMaxFrameOfImageSize[32];  
    BYTE bEncodeCap;                
    char reserved[95];
} DHDEV_DSP_ENCODECAP, *LPDHDEV_DSP_ENCODECAP;
typedef struct
{
    DWORD dwVideoStandardMask;         
    DWORD dwImageSizeMask;             
    DWORD dwEncodeModeMask;            
    DWORD dwStreamCap;                 
    DWORD dwImageSizeMask_Assi[3][64]; 
    DWORD dwMaxEncodePower;            
    WORD wMaxSupportChannel;           
    WORD wChannelMaxSetSync;           
    BYTE bMaxFrameOfImageSize[32];     
    BYTE bEncodeCap;                   
    BYTE btReserve1[3];                
    DWORD dwExtraStream;    
    DWORD dwCompression[3]; 
    char reserved[108];
} DHDEV_DSP_ENCODECAP_EX, *LPDHDEV_DSP_ENCODECAP_EX;
typedef struct
{
    DWORD dwSize;
    DH_VERSION_INFO stVersion;
    DH_DSP_ENCODECAP stDspEncodeCap;         
    BYTE szDevSerialNo[DH_DEV_SERIALNO_LEN]; 
    BYTE byDevType;                          
    BYTE szDevType[DH_DEV_TYPE_LEN];         
    BYTE byVideoCaptureNum;                  
    BYTE byAudioCaptureNum;                  
    BYTE byTalkInChanNum;                    
    BYTE byTalkOutChanNum;                   
    BYTE byDecodeChanNum;                    
    BYTE byAlarmInNum;                       
    BYTE byAlarmOutNum;                      
    BYTE byNetIONum;                         
    BYTE byUsbIONum;                         
    BYTE byIdeIONum;                         
    BYTE byComIONum;                         
    BYTE byLPTIONum;                         
    BYTE byVgaIONum;                         
    BYTE byIdeControlNum;                    
    BYTE byIdeControlType;                   
    BYTE byCapability;                       
    BYTE byMatrixOutNum;                     
    BYTE byOverWrite;     
    BYTE byRecordLen;     
    BYTE byDSTEnable;     
    WORD wDevNo;          
    BYTE byVideoStandard; 
    BYTE byDateFormat;    
    BYTE byDateSprtr;     
    BYTE byTimeFmt;       
    BYTE byLanguage;      
} DHDEV_SYSTEM_ATTR_CFG, *LPDHDEV_SYSTEM_ATTR_CFG;
typedef struct
{
    DWORD dwType;        
    WORD wResultCode;    
    WORD wRebootSign;    
    DWORD dwReserved[2]; 
} DEV_SET_RESULT;
#define DYNAMIC_RESPONSE_ERROR_CODE_BEGIN 1000
typedef struct
{
    DWORD dwResultCode; 
    LLONG lPlayHandle;   
    BYTE byReserved[32]; 
} DEV_PLAY_RESULT;
typedef struct
{
    DWORD dwResultCode;  
    LLONG lTalkHandle;   
    BYTE byReserved[32]; 
} DEV_TALK_RESULT;
typedef struct tagDH_DST_POINT
{
    int nYear;      
    int nMonth;     
    int nHour;      
    int nMinute;    
    int nWeekOrDay; 
    union
    {
        int iWeekDay; 
        int iDay;     
    };
    DWORD dwReserved[8]; 
} DH_DST_POINT;
typedef struct
{
    DWORD dwSize;
    int nDSTType;            
    DH_DST_POINT stDSTStart; 
    DH_DST_POINT stDSTEnd;   
    DWORD dwReserved[16];    
} DHDEV_DST_CFG;
typedef struct
{
    DWORD dwSize;
    BYTE byAutoRebootDay;       
    BYTE byAutoRebootTime;      
    BYTE byAutoDeleteFilesTime; 
    BYTE reserved[13];          
} DHDEV_AUTOMT_CFG;
typedef struct
{
    DWORD dwSize;                                    
    DWORD dwVolume;                                  
    DWORD dwFreeSpace;                               
    BYTE byModle[DH_MAX_HARDDISK_TYPE_LEN];          
    BYTE bySerialNumber[DH_MAX_HARDDISK_SERIAL_LEN]; 
} DHDEV_VEHICLE_DISK;
typedef struct
{
    DWORD dwSize;                
    BYTE szIMSI[DH_MAX_SIM_LEN]; 
    BYTE szMDN[DH_MAX_MDN_LEN];  
} DHDEV_VEHICLE_3GMODULE;
typedef struct
{
    DWORD dwSize;                                           
    DWORD dwSoftwareBuildDate;                              
    char szVersion[DH_MAX_VERSION_LEN];                     
    char szDevSerialNo[DH_DEV_SERIALNO_LEN];                
    char szDevType[DH_DEV_TYPE_LEN];                        
    DWORD dwDiskNum;                                        
    DHDEV_VEHICLE_DISK stuHarddiskInfo[DH_MAX_DISKNUM];     
    DWORD dw3GModuleNum;                                    
    DHDEV_VEHICLE_3GMODULE stu3GModuleInfo[DH_MAX_SIM_NUM]; 
} DHDEV_VEHICLE_INFO;
typedef struct tagDHDEV_NETINTERFACE_INFO
{
    int dwSize;
    BOOL bValid;                                             
    BOOL bVirtual;                                           
    int nSpeed;                                              
    int nDHCPState;                                          
    char szName[DH_NETINTERFACE_NAME_LEN];                   
    char szType[DH_NETINTERFACE_TYPE_LEN];                   
    char szMAC[DH_MACADDR_LEN];                              
    char szSSID[DH_MAX_SSID_LEN];                            
    char szConnStatus[DH_MAX_CONNECT_STATUS_LEN];            
    int nSupportedModeNum;                                   
    char szSupportedModes[DH_MAX_MODE_NUM][DH_MAX_MODE_LEN]; 
    BOOL bSupportLongPoE;  
    char szNetCardName[8]; 
    char szModuleName[32]; 
    char szIMEI[16];       
    char szICCID[24];      
} DHDEV_NETINTERFACE_INFO;
typedef struct
{
    long left;
    long top;
    long right;
    long bottom;
} DH_RECT, *LPDH_RECT;
typedef struct tagNET_RECT
{
    int nLeft;
    int nTop;
    int nRight;
    int nBottom;
} NET_RECT;
typedef struct tagNET_RECT_EX
{
    unsigned short nLeft;
    unsigned short nTop;
    unsigned short nRight;
    unsigned short nBottom;
} NET_RECT_EX;
typedef struct
{
    short nx;
    short ny;
} DH_POINT, *LPDH_POINT, NET_POINT, *LPNET_POINT;
typedef struct
{
    unsigned short nx;
    unsigned short ny;
} DH_POINT_EX, NET_POINT_EX;
typedef struct
{
    int nPointNum;                                
    DH_POINT stuPoints[DH_MAX_DETECT_REGION_NUM]; 
} DH_POLY_POINTS;
typedef struct tagENCODE_WIDGET
{
    DWORD rgbaFrontground; 
    DWORD rgbaBackground;  
    DH_RECT rcRect;        
    BYTE bShow;            
    BYTE bExtFuncMask;     
    BYTE byReserved[2];
} DH_ENCODE_WIDGET, *LPDH_ENCODE_WIDGET;
typedef struct
{
    BYTE byVideoEnable;    
    BYTE byBitRateControl; 
    BYTE byFramesPerSec;   
    BYTE byEncodeMode;     
    BYTE byImageSize;      
    BYTE byImageQlty : 7;  
    BYTE byImageQltyType : 1;
    WORD wLimitStream; 
    BYTE byAudioEnable;    
    BYTE wFormatTag;       
    WORD nChannels;        
    WORD wBitsPerSample;   
    BYTE bAudioOverlay;    
    BYTE bH264ProfileRank; 
    DWORD nSamplesPerSec;  
    BYTE bIFrameInterval;  
    BYTE bScanMode;        
    BYTE bReserved_3;
    BYTE bReserved_4;
} DH_VIDEOENC_OPT, *LPDH_VIDEOENC_OPT;
typedef struct
{
    DH_TSECT stSect;
    BYTE byBrightness; 
    BYTE byContrast;   
    BYTE bySaturation; 
    BYTE byHue;        
    BYTE byGainEn;     
    BYTE byGain;       
    BYTE byGamma;      
    BYTE byReserved[1];
} DH_COLOR_CFG, *LPDH_COLOR_CFG;
typedef struct
{
    WORD dwSize;
    BYTE bNoise;
    BYTE bMode; 
    char szChannelName[DH_CHAN_NAME_LEN];
    DH_VIDEOENC_OPT stMainVideoEncOpt[DH_REC_TYPE_NUM];
    DH_VIDEOENC_OPT stAssiVideoEncOpt[DH_N_ENCODE_AUX];
    DH_COLOR_CFG stColorCfg[DH_N_COL_TSECT];
    DH_ENCODE_WIDGET stTimeOSD;
    DH_ENCODE_WIDGET stChannelOSD;
    DH_ENCODE_WIDGET stBlindCover[DH_N_COVERS]; 
    BYTE byBlindEnable;                         
    BYTE byBlindMask;                           
    BYTE bVolume;                               
    BYTE bVolumeEnable;                         
} DHDEV_CHANNEL_CFG, *LPDHDEV_CHANNEL_CFG;
typedef struct
{
    DWORD dwSize;
    DH_VIDEOENC_OPT stPreView;
    DH_COLOR_CFG stColorCfg[DH_N_COL_TSECT];
} DHDEV_PREVIEW_CFG;
typedef struct _config_snap_control
{
    BYTE bySnapState[32]; 
    BYTE byReserved[480];
} DHDEV_SNAP_CONTROL_CFG;
typedef enum _gps_mode
{
    GPS_OR_GLONASS_MODE, 
    GLONASS_MODE,        
    GPS_MODE,            
} _gps_mode;
typedef struct tagDHDEV_GPS_MODE_CFG
{
    BYTE byGPSMode; 
    BYTE byRev[255];
} DHDEV_GPS_MODE_CFG;
typedef struct tagDHDEV_SNAP_UPLOAD_CFG
{
    int nUploadInterval; 
    BYTE byReserved[252];
} DHDEV_SNAP_UPLOAD_CFG;
typedef struct tagDHDEV_SPEED_LIMIT_CFG
{
    BYTE byEnable;         
    BYTE byReserved1;      
    WORD wMaxSpeed;        
    WORD wMinSpeed;        
    BYTE byReserved2[122]; 
} DHDEV_SPEED_LIMIT_CFG;
typedef struct
{
    BOOL bEnable;                      
    char szSSID[36];                   
    BOOL bHideSSID;                    
    char szIP[DH_MAX_IPADDR_LEN];      
    char szSubMark[DH_MAX_IPADDR_LEN]; 
    char szGateWay[DH_MAX_IPADDR_LEN]; 
    char szCountry[32];                
    int nSafeType;                     
    int nEncryption;                   
    char szKey[32];                    
    int nChannel;                      
    BOOL bAutoChannelSelect;           
} DHDEV_WIRELESS_ROUTING_CFG;
typedef struct
{
    BYTE byDataBit;  
    BYTE byStopBit;  
    BYTE byParity;   
    BYTE byBaudRate; 
} DH_COMM_PROP;
typedef struct
{
    DH_COMM_PROP struComm;
    BYTE wProtocol;       
    BYTE bPTZType;        
    BYTE wDecoderAddress; 
    BYTE byMartixID;      
} DH_485_CFG;
typedef struct
{
    DH_COMM_PROP struComm;
    BYTE byFunction; 
    BYTE byReserved[3];
} DH_RS232_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwDecProListNum;                                     
    char DecProName[DH_MAX_DECPRO_LIST_SIZE][DH_MAX_NAME_LEN]; 
    DH_485_CFG stDecoder[DH_MAX_DECODER_NUM];                  
    DWORD dw232FuncNameNum;                              
    char s232FuncName[DH_MAX_232FUNCS][DH_MAX_NAME_LEN]; 
    DH_RS232_CFG st232[DH_MAX_232_NUM];                  
} DHDEV_COMM_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwDecProListNum;                                     
    char DecProName[DH_MAX_DECPRO_LIST_SIZE][DH_MAX_NAME_LEN]; 
    DH_485_CFG stDecoder[DH_MAX_DECODER_NUM];                  
    DWORD dw232FuncNameNum;                              
    char s232FuncName[DH_MAX_232FUNCS][DH_MAX_NAME_LEN]; 
    DWORD dw232ComNum;                                   
    DH_RS232_CFG st232[DH_MAX_232_NUM_EX];               
} DHDEV_COMM_CFG_EX;
typedef struct
{
    unsigned int uBeOpened;
    unsigned int uBaudRate;
    unsigned int uDataBites;
    unsigned int uStopBits;
    unsigned int uParity;
    BYTE bReserved[32];
} DH_COMM_STATE;
typedef struct
{
    DWORD dwSize;
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];
    BYTE byPreRecordLen; 
    BYTE byRedundancyEn; 
    BYTE byRecordType;   
    BYTE byReserved;
} DHDEV_RECORD_CFG, *LPDH_RECORD_CFG;
typedef struct
{
    BOOL bEnable;           
    int nHostPort;          
    char szHostIp[32];      
    char szDomainName[128]; 
    int nType;              
    int nUpdateInterval;    
    int nTimeZone;          
    char reserved[128];
} DHDEV_NTP_CFG;
typedef struct tagNET_PERIOD
{
    DH_TSECT struSect; 
    BOOL bMdEn;        
    BOOL bAlarmEn;     
    BOOL bTimerEn;     
    DWORD dwRev[4];
} NET_PERIOD;
typedef struct
{
    NET_PERIOD struPeriod[DH_TIME_SECTION];
} DH_FTP_UPLOAD_CFG;
typedef struct
{
    DWORD dwSize;
    BOOL bEnable;                         
    char szHostIp[DH_MAX_IPADDR_LEN];     
    WORD wHostPort;                       
    char szDirName[DH_FTP_MAX_PATH];      
    char szUserName[DH_FTP_USERNAME_LEN]; 
    char szPassword[DH_FTP_PASSWORD_LEN]; 
    int iFileLen;                         
    int iInterval;                        
    DH_FTP_UPLOAD_CFG struUploadCfg[DH_MAX_CHANNUM][DH_N_WEEKS];
    char protocol;        
    char NASVer;          
    DWORD dwFunctionMask; 
    BYTE bDataType;       
    BYTE reserved[123];
} DHDEV_FTP_PROTO_CFG;
typedef struct
{
    int nMaxPictures;                           
    char szPreChannelName[DH_FTP_MAX_SUB_PATH]; 
    char szFTPChannelPath[DH_FTP_MAX_SUB_PATH]; 
    char szRev[128];                            
} DHDEV_FTP_CHANNEL_CFG;
typedef struct
{
    DHDEV_FTP_PROTO_CFG stuFtpNormalSet;                    
    DHDEV_FTP_CHANNEL_CFG stuFtpChannelSet[DH_MAX_CHANNUM]; 
    char szRev[128];                                        
} DHDEV_FTP_PROTO_CFG_EX;
typedef struct
{
    char sDevIPAddr[DH_MAX_IPADDR_LEN]; 
    char sDevIPMask[DH_MAX_IPADDR_LEN]; 
    char sGatewayIP[DH_MAX_IPADDR_LEN]; 
    BYTE dwNetInterface;            
    BYTE bTranMedia;                
    BYTE bValid;                    
    BYTE bDefaultEth;               
    char byMACAddr[DH_MACADDR_LEN]; 
} DH_ETHERNET;
typedef struct
{
    BYTE byEnable;                          
    BYTE byAssistant;                       
    WORD wHostPort;                         
    char sHostIPAddr[DH_MAX_IPADDR_LEN];    
    char sHostUser[DH_MAX_HOST_NAMELEN];    
    char sHostPassword[DH_MAX_HOST_PSWLEN]; 
} DH_REMOTE_HOST;
typedef struct
{
    char sMailIPAddr[DH_MAX_IPADDR_LEN];    
    WORD wMailPort;                         
    WORD wReserved;                         
    char sSenderAddr[DH_MAX_MAIL_ADDR_LEN]; 
    char sUserName[DH_MAX_NAME_LEN];        
    char sUserPsw[DH_MAX_NAME_LEN];         
    char sDestAddr[DH_MAX_MAIL_ADDR_LEN];   
    char sCcAddr[DH_MAX_MAIL_ADDR_LEN];     
    char sBccAddr[DH_MAX_MAIL_ADDR_LEN];    
    char sSubject[DH_MAX_MAIL_SUBJECT_LEN]; 
} DH_MAIL_CFG;
typedef struct
{
    DWORD dwSize;
    char sDevName[DH_MAX_NAME_LEN];              
    WORD wTcpMaxConnectNum;                      
    WORD wTcpPort;                               
    WORD wUdpPort;                               
    WORD wHttpPort;                              
    WORD wHttpsPort;                             
    WORD wSslPort;                               
    DH_ETHERNET stEtherNet[DH_MAX_ETHERNET_NUM]; 
    DH_REMOTE_HOST struAlarmHost;                
    DH_REMOTE_HOST struLogHost;                  
    DH_REMOTE_HOST struSmtpHost;                 
    DH_REMOTE_HOST struMultiCast;                
    DH_REMOTE_HOST struNfs;                      
    DH_REMOTE_HOST struPppoe;                    
    char sPppoeIP[DH_MAX_IPADDR_LEN];            
    DH_REMOTE_HOST struDdns;                     
    char sDdnsHostName[DH_MAX_HOST_NAMELEN];     
    DH_REMOTE_HOST struDns;                      
    DH_MAIL_CFG struMail;                        
} DHDEV_NET_CFG;
typedef struct
{
    char sDevIPAddr[DH_MAX_IPADDR_LEN]; 
    char sDevIPMask[DH_MAX_IPADDR_LEN]; 
    char sGatewayIP[DH_MAX_IPADDR_LEN]; 
    BYTE dwNetInterface;                  
    BYTE bTranMedia;                      
    BYTE bValid;                          
    BYTE bDefaultEth;                     
    char byMACAddr[DH_MACADDR_LEN];       
    BYTE bMode;                           
    BYTE bReserved1[3];                   
    char szEthernetName[DH_MAX_NAME_LEN]; 
    BYTE bReserved[12];                   
} DH_ETHERNET_EX;
typedef struct
{
    DWORD dwSize;
    char sDevName[DH_MAX_NAME_LEN];                    
    WORD wTcpMaxConnectNum;                            
    WORD wTcpPort;                                     
    WORD wUdpPort;                                     
    WORD wHttpPort;                                    
    WORD wHttpsPort;                                   
    WORD wSslPort;                                     
    int nEtherNetNum;                                  
    DH_ETHERNET_EX stEtherNet[DH_MAX_ETHERNET_NUM_EX]; 
    DH_REMOTE_HOST struAlarmHost;                      
    DH_REMOTE_HOST struLogHost;                        
    DH_REMOTE_HOST struSmtpHost;                       
    DH_REMOTE_HOST struMultiCast;                      
    DH_REMOTE_HOST struNfs;                            
    DH_REMOTE_HOST struPppoe;                          
    char sPppoeIP[DH_MAX_IPADDR_LEN];                  
    DH_REMOTE_HOST struDdns;                           
    char sDdnsHostName[DH_MAX_HOST_NAMELEN];           
    DH_REMOTE_HOST struDns;                            
    DH_MAIL_CFG struMail;                              
    BYTE bReserved[128];                               
} DHDEV_NET_CFG_EX;
typedef struct tagDEV_IPV4_CFG
{
    DWORD dwSize;                                       
    char szDevName[DH_MAX_NAME_LEN];                    
    WORD wTcpMaxConnectNum;                             
    WORD wTcpPort;                                      
    WORD wUdpPort;                                      
    WORD wHttpPort;                                     
    WORD wHttpsPort;                                    
    WORD wSslPort;                                      
    DH_ETHERNET_EX stuEtherNet[DH_MAX_ETHERNET_NUM_EX]; 
    int nEtherNetNum;                                   
} DEV_IPV4_CFG;
typedef struct
{
    DWORD dwId;                                          
    BOOL bEnable;                                        
    char szServerType[DH_MAX_SERVER_TYPE_LEN];           
    char szServerIp[DH_MAX_DOMAIN_NAME_LEN];             
    DWORD dwServerPort;                                  
    char szDomainName[DH_MAX_DOMAIN_NAME_LEN];           
    char szUserName[DH_MAX_HOST_NAMELEN];                
    char szUserPsw[DH_MAX_HOST_PSWLEN];                  
    char szAlias[DH_MAX_DDNS_ALIAS_LEN];                 
    DWORD dwAlivePeriod;                                 
    BYTE ByMode;                                         
    char szDefaultDomainName[DH_MAX_DEFAULT_DOMAIN_LEN]; 
    BYTE bReserved[3];                                   
    char szEmailUserName[DH_MAX_MAIL_NAME_LEN];          
    char reserved[128];
} DH_DDNS_SERVER_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwDdnsServerNum;
    DH_DDNS_SERVER_CFG struDdnsServer[DH_MAX_DDNS_NUM];
} DHDEV_MULTI_DDNS_CFG;
typedef struct
{
    char sMailIPAddr[DH_MAX_DOMAIN_NAME_LEN]; 
    char sSubMailIPAddr[DH_MAX_DOMAIN_NAME_LEN];
    WORD wMailPort; 
    WORD wSubMailPort;
    WORD wReserved;                         
    char sSenderAddr[DH_MAX_MAIL_ADDR_LEN]; 
    char sUserName[DH_MAX_MAIL_NAME_LEN];   
    char sUserPsw[DH_MAX_MAIL_NAME_LEN];    
    char sDestAddr[DH_MAX_MAIL_ADDR_LEN];   
    char sCcAddr[DH_MAX_MAIL_ADDR_LEN];     
    char sBccAddr[DH_MAX_MAIL_ADDR_LEN];    
    char sSubject[DH_MAX_MAIL_SUBJECT_LEN]; 
    BYTE bEnable;                           
    BYTE bSSLEnable;                        
    WORD wSendInterval;                     
    BYTE bAnonymous;                        
    BYTE bAttachEnable;                     
    char reserved[154];
} DHDEV_MAIL_CFG;
typedef struct
{
    char szPrimaryIp[DH_MAX_IPADDR_LEN];
    char szSecondaryIp[DH_MAX_IPADDR_LEN];
    char reserved[256];
} DHDEV_DNS_CFG;
typedef struct
{
    DWORD dwSize;
    BOOL bEnable; 
} DHDEV_DOWNLOAD_STRATEGY_CFG;
typedef struct
{
    DWORD dwSize;
    BOOL bEnable;
    int iStrategy; 
} DHDEV_TRANSFER_STRATEGY_CFG;
typedef struct
{
    int nWaittime;            
    int nConnectTime;         
    int nConnectTryNum;       
    int nSubConnectSpaceTime; 
    int nGetDevInfoTime;      
    int nConnectBufSize;      
    int nGetConnInfoTime;     
    int nSearchRecordTime;    
    int nsubDisconnetTime;    
    BYTE byNetType;           
    BYTE byPlaybackBufSize;   
    BYTE bDetectDisconnTime;  
    BYTE bKeepLifeInterval;   
    int nPicBufSize;          
    BYTE bReserved[4];        
} NET_PARAM;
typedef struct tagNET_UDP_OPTION
{
    unsigned int nPacketArriveTimeout;           
    unsigned int nRetransmitPacketArriveTimeout; 
    unsigned int nMaxLostNumOfMulitcastSeqNo;    
    unsigned int nMaxWaitNumOfUdpSeqNo;          
    unsigned int nMultiSocketSendBufferSize;     
    unsigned int nMultiSocketRecvBufferSize;     
    unsigned int nUdpSocketSendBufferSize;       
    unsigned int nUdpSocketRecvBufferSize;       
    BYTE bReserved[128];                         
} NET_UDP_OPTION;
typedef struct
{
    char szIP[DH_MAX_IPADDR_LEN];       
    int nPort;                          
    char szSubmask[DH_MAX_IPADDR_LEN];  
    char szGateway[DH_MAX_IPADDR_LEN];  
    char szMac[DH_MACADDR_LEN];         
    char szDeviceType[DH_DEV_TYPE_LEN]; 
    BYTE byManuFactory;                 
    BYTE byIPVersion;                   
    BYTE byInitStatus;                  
    BYTE byPwdResetWay;    
    BYTE bySpecialAbility; 
    BYTE byAbroadInfo;     
    BYTE bReserved[26];    
} DEVICE_NET_INFO;
#define DH_DEV_CUSTOM_DEVICEID_LEN 24 
typedef enum tagEM_IPVERSION
{
    EM_IPVERSION_IPV4, 
    EM_IPVERSION_IPV6, 
} EM_IPVERSION;
typedef struct
{
    int iIPVersion;                          
    char szIP[64];                           
    int nPort;                               
    char szSubmask[64];                      
    char szGateway[64];                      
    char szMac[DH_MACADDR_LEN];              
    char szDeviceType[DH_DEV_TYPE_LEN];      
    BYTE byManuFactory;                      
    BYTE byDefinition;                       
    bool bDhcpEn;                            
    BYTE byReserved1;                        
    char verifyData[88];                     
    char szSerialNo[DH_DEV_SERIALNO_LEN];    
    char szDevSoftVersion[DH_MAX_URL_LEN];   
    char szDetailType[DH_DEV_TYPE_LEN];      
    char szVendor[DH_MAX_STRING_LEN];        
    char szDevName[DH_MACHINE_NAME_NUM];     
    char szUserName[DH_USER_NAME_LENGTH_EX]; 
    char szPassWord[DH_USER_NAME_LENGTH_EX]; 
    unsigned short nHttpPort;                
    WORD wVideoInputCh;                      
    WORD wRemoteVideoInputCh;                
    WORD wVideoOutputCh;                     
    WORD wAlarmInputCh;                      
    WORD wAlarmOutputCh;                     
    BOOL bNewWordLen;                        
    char szNewPassWord[DH_COMMON_STRING_64]; 
    BYTE byInitStatus;                       
    BYTE byPwdResetWay;    
    BYTE bySpecialAbility; 
    char szNewDetailType[DH_COMMON_STRING_64];   
    BOOL bNewUserName;                           
    char szNewUserName[DH_COMMON_STRING_64];     
    BYTE byPwdFindVersion;                       
    char szDeviceID[DH_DEV_CUSTOM_DEVICEID_LEN]; 
    DWORD dwUnLoginFuncMask;                     
    char szMachineGroup[64];                     
    EM_IPVERSION emIPVersionFrom;                
    char szCountryCode[3];                       
    BYTE byAbroadInfo;                           
    char cReserved[4];                           
} DEVICE_NET_INFO_EX;
typedef struct
{
    DEVICE_NET_INFO_EX stuDevInfo;    
    char szLocalIP[MAX_LOCAL_IP_LEN]; 
    char cReserved[2048];             
} DEVICE_NET_INFO_EX2;
typedef struct
{
    DWORD dwSize;                        
    int nIpNum;                          
    char szIP[DH_MAX_SAERCH_IP_NUM][64]; 
} DEVICE_IP_SEARCH_INFO;
typedef struct tagNET_DEVICE_SEARCH_PARAM
{
    DWORD dwSize;                 
    BOOL bUseDefault;             
    WORD wBroadcastLocalPort;     
    WORD wBroadcastRemotePort;    
    WORD wMulticastRemotePort;    
    BOOL bMulticastModifyRespond; 
    WORD wMulticastLocalPort;     
    int iAutoUpdatePortTimes;     
    WORD wAOLMulticastRemotePort; 
    WORD wAOLMulticastLocalPort;  
} NET_DEVICE_SEARCH_PARAM;
typedef struct
{
    BOOL bEnable;                               
    int iSNMPPort;                              
    char szReadCommon[DH_MAX_SNMP_COMMON_LEN];  
    char szWriteCommon[DH_MAX_SNMP_COMMON_LEN]; 
    char szTrapServer[64];                      
    int iTrapPort;                              
    BYTE bSNMPV1;                               
    BYTE bSNMPV2;                               
    BYTE bSNMPV3;                               
    char szReserve[125];
} DHDEV_NET_SNMP_CFG;
typedef struct tagDHDEV_ISCSI_SERVER
{
    char szServerName[32]; 
    union
    {
        BYTE c[4];
        WORD s[2];
        DWORD l;
    } stuIP;             
    int nPort;           
    char szUserName[32]; 
    char szPassword[32]; 
    BOOL bAnonymous;     
} DHDEV_ISCSI_SERVER;
typedef struct
{
    BOOL bEnable;                 
    DHDEV_ISCSI_SERVER stuServer; 
    char szRemotePath[240];       
    BYTE reserved[256];
} DHDEV_ISCSI_CFG;
typedef struct
{
    int iType; 
    int iValue;
} DH_PTZ_LINK, *LPDH_PTZ_LINK;
typedef struct
{
    DWORD dwActionMask;                           
    DWORD dwActionFlag;                           
    BYTE byRelAlarmOut[DH_MAX_ALARMOUT_NUM];      
    DWORD dwDuration;                             
    BYTE byRecordChannel[DH_MAX_VIDEO_IN_NUM];    
    DWORD dwRecLatch;                             
    BYTE bySnap[DH_MAX_VIDEO_IN_NUM];             
    BYTE byTour[DH_MAX_VIDEO_IN_NUM];             
    DH_PTZ_LINK struPtzLink[DH_MAX_VIDEO_IN_NUM]; 
    DWORD dwEventLatch;                           
    BYTE byRelWIAlarmOut[DH_MAX_ALARMOUT_NUM];    
    BYTE bMessageToNet;
    BYTE bMMSEn;           
    BYTE bySnapshotTimes;  
    BYTE bMatrixEn;        
    DWORD dwMatrix;        
    BYTE bLog;             
    BYTE bSnapshotPeriod;  
    BYTE byEmailType;      
    BYTE byEmailMaxLength; 
    BYTE byEmailMaxTime;   
    BYTE byReserved[99];
} DH_MSG_HANDLE;
typedef struct
{
    BYTE byAlarmType; 
    BYTE byAlarmEn;   
    BYTE byReserved[2];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE struHandle;                    
} DH_ALARMIN_CFG, *LPDHDEV_ALARMIN_CFG;
typedef struct
{
    BYTE byMotionEn; 
    BYTE byReserved;
    WORD wSenseLevel;                              
    WORD wMotionRow;                               
    WORD wMotionCol;                               
    BYTE byDetected[DH_MOTION_ROW][DH_MOTION_COL]; 
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];   
    DH_MSG_HANDLE struHandle;                      
} DH_MOTION_DETECT_CFG;
typedef struct
{
    BYTE byAlarmEn; 
    BYTE byReserved[3];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE struHandle;                    
} DH_VIDEO_LOST_CFG;
typedef struct
{
    BYTE byBlindEnable; 
    BYTE byBlindLevel;  
    BYTE byReserved[2];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE struHandle;                    
} DH_BLIND_CFG;
typedef struct
{
    BYTE byNoDiskEn; 
    BYTE byReserved_1[3];
    DH_TSECT stNDSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE struNDHandle;                    
    BYTE byLowCapEn;                               
    BYTE byLowerLimit;                             
    BYTE byReserved_2[2];
    DH_TSECT stLCSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE struLCHandle;                    
    BYTE byDiskErrEn;                              
    BYTE bDiskNum;
    BYTE byReserved_3[2];
    DH_TSECT stEDSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE struEDHandle;                    
} DH_DISK_ALARM_CFG;
typedef struct
{
    BYTE byEnable;
    BYTE byReserved[3];
    DH_MSG_HANDLE struHandle;
} DH_NETBROKEN_ALARM_CFG;
typedef struct
{
    DWORD dwSize;
    DH_ALARMIN_CFG struLocalAlmIn[DH_MAX_ALARM_IN_NUM];
    DH_ALARMIN_CFG struNetAlmIn[DH_MAX_ALARM_IN_NUM];
    DH_MOTION_DETECT_CFG struMotion[DH_MAX_VIDEO_IN_NUM];
    DH_VIDEO_LOST_CFG struVideoLost[DH_MAX_VIDEO_IN_NUM];
    DH_BLIND_CFG struBlind[DH_MAX_VIDEO_IN_NUM];
    DH_DISK_ALARM_CFG struDiskAlarm;
    DH_NETBROKEN_ALARM_CFG struNetBrokenAlarm;
} DHDEV_ALARM_SCHEDULE;
#define DECODER_OUT_SLOTS_MAX_NUM 16
#define DECODER_IN_SLOTS_MAX_NUM 16
typedef struct
{
    DWORD dwAddr;                                
    BOOL bEnable;                                
    DWORD dwOutSlots[DECODER_OUT_SLOTS_MAX_NUM]; 
    int nOutSlotNum;                             
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];
    DH_MSG_HANDLE struHandle[DECODER_IN_SLOTS_MAX_NUM]; 
    int nMsgHandleNum;                                  
    BYTE bReserved[120];
} DH_ALARMDEC_CFG;
typedef struct
{
    BYTE byEnable;                       
    BYTE bReserverd;                     
    WORD wHostPort;                      
    char sHostIPAddr[DH_MAX_IPADDR_LEN]; 
    int nByTimeEn;                       
    int nUploadDay;                      
    int nUploadHour;                     
    DWORD dwReserved[300];               
} ALARMCENTER_UP_CFG;
typedef struct __DH_PANORAMA_SWITCH_CFG
{
    BOOL bEnable;     
    int nReserved[5]; 
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];
    DH_MSG_HANDLE struHandle; 
} DH_PANORAMA_SWITCH_CFG;
typedef struct __ALARM_PANORAMA_SWITCH_CFG
{
    int nAlarmChnNum; 
    DH_PANORAMA_SWITCH_CFG stuPanoramaSwitch[DH_MAX_VIDEO_IN_NUM];
} ALARM_PANORAMA_SWITCH_CFG;
typedef struct __DH_LOST_FOCUS_CFG
{
    BOOL bEnable;     
    int nReserved[5]; 
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];
    DH_MSG_HANDLE struHandle; 
} DH_LOST_FOCUS_CFG;
typedef struct __ALARM_LOST_FOCUS_CFG
{
    int nAlarmChnNum; 
    DH_LOST_FOCUS_CFG stuLostFocus[DH_MAX_VIDEO_IN_NUM];
} ALARM_LOST_FOCUS_CFG;
typedef struct __ALARM_IP_COLLISION_CFG
{
    BOOL bEnable;             
    DH_MSG_HANDLE struHandle; 
    int nReserved[300];       
} ALARM_IP_COLLISION_CFG;
typedef struct __ALARM_MAC_COLLISION_CFG
{
    BOOL bEnable;             
    DH_MSG_HANDLE struHandle; 
    int nReserved[300];       
} ALARM_MAC_COLLISION_CFG;
typedef struct __COM_CARD_SIGNAL_INFO
{
    WORD wCardStartPose;      
    WORD wCardLenth;          
    char cStartCharacter[32]; 
    char cEndCharacter[32];   
    BYTE byReserved[28];      
} COM_CARD_SIGNAL_INFO;
typedef struct __COM_CARD_SIGNAL_LINK_CFG
{
    COM_CARD_SIGNAL_INFO struCardInfo; 
    DH_MSG_HANDLE struHandle;          
    BYTE byReserved[24];               
} COM_CARD_SIGNAL_LINK_CFG;
typedef struct __VIDEO_COVER_ATTR
{
    DH_RECT rcBlock;   
    int nColor;        
    BYTE bBlockType;   
    BYTE bEncode;      
    BYTE bPriview;     
    char reserved[29]; 
} VIDEO_COVER_ATTR;
typedef struct __DHDEV_VIDEOCOVER_CFG
{
    DWORD dwSize;
    char szChannelName[DH_CHAN_NAME_LEN];                
    BYTE bTotalBlocks;                                   
    BYTE bCoverCount;                                    
    VIDEO_COVER_ATTR CoverBlock[DH_MAX_VIDEO_COVER_NUM]; 
    char reserved[30];                                   
} DHDEV_VIDEOCOVER_CFG;
typedef struct __DHDEV_DECODEPOLICY_CFG
{
    int nMinTime;       
    int nMaxTime;       
    int nDeocdeBufTime; 
    char reserved[128]; 
} DHDEV_DECODEPOLICY_CFG;
typedef struct __DHDEV_MACHINE_CFG
{
    char szMachineName[DH_MACHINE_NAME_NUM];    
    char szMachineAddress[DH_MACHINE_NAME_NUM]; 
    char reserved[128];                         
} DHDEV_MACHINE_CFG;
typedef struct tagDHDEV_WLAN_INFO
{
    int nEnable;     
    char szSSID[36]; 
    int nLinkMode;   
    int nEncryption; 
    int nKeyType;    
    int nKeyID;      
    union
    {
        char szKeys[4][32];  
        char szWPAKeys[128]; 
    };
    int nKeyFlag;
    BYTE byConnectedFlag; 
    char reserved[11];
} DHDEV_WLAN_INFO;
typedef struct
{
    char szSSID[36];
    int nLinkMode;   
    int nEncryption; 
    char reserved[48];
} DHDEV_WLAN_DEVICE;
typedef struct
{
    DWORD dwSize;
    BYTE bWlanDevCount; 
    DHDEV_WLAN_DEVICE lstWlanDev[DH_MAX_WLANDEVICE_NUM];
    char reserved[255];
} DHDEV_WLAN_DEVICE_LIST;
typedef struct
{
    char szSSID[36];             
    char szMacAddr[18];          
    BYTE byApConnected;          
    BYTE byLinkMode;             
    int nRSSIQuality;            
    unsigned int unApMaxBitRate; 
    BYTE byAuthMode;             
    BYTE byEncrAlgr;             
    BYTE byLinkQuality;          
    BYTE byWifiType;             
    BYTE byReserved[128];        
} DHDEV_WLAN_DEVICE_EX;
typedef struct
{
    DWORD dwSize;
    BYTE bWlanDevCount; 
    DHDEV_WLAN_DEVICE_EX lstWlanDev[DH_MAX_WLANDEVICE_NUM_EX];
    char reserved[255];
} DHDEV_WLAN_DEVICE_LIST_EX;
typedef struct
{
    DWORD dwSize;
    BYTE bWlanDevCount; 
    DHDEV_WLAN_DEVICE_EX lstWlanDev[MAX_WLAN_DEVICE_NUM];
} DHDEV_WLAN_DEVICE_LIST_EX2;
typedef struct
{
    int nResult; 
    BYTE reserved[32];
} DHDEV_FUNC_TEST;
typedef struct
{
    char szServerName[32]; 
    char szIp[16];         
    int nPort;             
    char szUserName[32];   
    char szPassword[32];   
    BOOL bAnonymity;       
    BYTE byReserved[256];  
} FTP_SERVER_CFG;
typedef struct
{
    FTP_SERVER_CFG stuFtpServerInfo; 
    DHDEV_FUNC_TEST stuTestResult;   
    BYTE byReserved[64];
} DHDEV_FTP_SERVER_TEST;
typedef struct
{
    char szServerType[DH_MAX_SERVER_TYPE_LEN]; 
    char szServerIp[DH_MAX_DOMAIN_NAME_LEN];   
    DWORD dwServerPort;                        
    char szDomainName[DH_MAX_DOMAIN_NAME_LEN]; 
    char szUserName[DH_MAX_HOST_NAMELEN];      
    char szUserPsw[DH_MAX_HOST_PSWLEN];        
    BYTE byReserved[256];                      
} DDNS_DOMAIN_INFO;
typedef struct
{
    DDNS_DOMAIN_INFO stuDomainInfo; 
    DHDEV_FUNC_TEST stuTestResult;  
    char szMemo[128];               
    BYTE byReserved[64];
} DHDEV_DDNS_DOMAIN_TEST;
typedef struct
{
    BYTE byModle[32];        
    BYTE bySerialNumber[32]; 
    BYTE byFirmWare[32];     
    int nAtaVersion;         
    int nSmartNum;           
    INT64 Sectors;
    int nStatus;       
    int nReserved[33]; 
} DHDEV_DEVICE_INFO;
typedef struct
{
    BYTE byId;        
    BYTE byCurrent;   
    BYTE byWorst;     
    BYTE byThreshold; 
    char szName[64];  
    char szRaw[8];    
    int nPredict;     
    char reserved[128];
} DHDEV_SMART_VALUE;
typedef struct
{
    BYTE nDiskNum;      
    BYTE byRaidNO;      
    BYTE byReserved[2]; 
    DHDEV_DEVICE_INFO deviceInfo;
    DHDEV_SMART_VALUE smartValue[MAX_SMART_VALUE_NUM];
} DHDEV_SMART_HARDDISK;
typedef struct
{
    char szModuleName[64];      
    char szHardWareVersion[32]; 
    char szSoftwareVersion[32]; 
    BYTE reserved[128];
} DHDEV_SUBMODELE_VALUE;
typedef struct
{
    int nSubModuleNum;                                          
    DHDEV_SUBMODELE_VALUE stuSubmoduleValue[MAX_SUBMODULE_NUM]; 
    BYTE bReserved[256];
} DHDEV_SUBMODULE_INFO;
typedef struct
{
    BYTE bDiskDamageLevel[DH_MAX_DISK_NUM]; 
    BYTE bReserved[128];
} DHDEV_DISKDAMAGE_INFO;
typedef struct
{
    char szServerIp[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    int nServerPort;                              
    BYTE bEnable;                                 
    BYTE bReserved[255];                          
} DHDEV_SYSLOG_REMOTE_SERVER;
typedef struct
{
    BYTE backupVideoFormat; 
    BYTE password[6];       
    BYTE reversed[505];
} DHDEV_BACKUP_VIDEO_FORMAT;
typedef struct
{
    char szServerIp[32];   
    int nServerPort;       
    BYTE byReserved[3];    
    BYTE bServerIpExEn;    
    char szServerIpEx[60]; 
} DHDEV_SERVER_INFO;
typedef struct
{
    DWORD dwSize;
    BYTE bServerNum; 
    DHDEV_SERVER_INFO lstServer[DH_MAX_REGISTER_SERVER_NUM];
    BYTE bEnable;        
    char szDeviceID[32]; 
    char reserved[94];
} DHDEV_REGISTER_SERVER;
typedef struct __DHDEV_CAMERA_INFO
{
    BYTE bBrightnessEn;               
    BYTE bContrastEn;                 
    BYTE bColorEn;                    
    BYTE bGainEn;                     
    BYTE bSaturationEn;               
    BYTE bBacklightEn;                
    BYTE bExposureEn;                 
    BYTE bColorConvEn;                
    BYTE bAttrEn;                     
    BYTE bMirrorEn;                   
    BYTE bFlipEn;                     
    BYTE iWhiteBalance;               
    BYTE iSignalFormatMask;           
    BYTE bRotate90;                   
    BYTE bLimitedAutoExposure;        
    BYTE bCustomManualExposure;       
    BYTE bFlashAdjustEn;              
    BYTE bNightOptions;               
    BYTE iReferenceLevel;             
    BYTE bExternalSyncInput;          
    unsigned short usMaxExposureTime; 
    unsigned short usMinExposureTime; 
    BYTE bWideDynamicRange;           
    BYTE bDoubleShutter;              
    BYTE byExposureCompensation;      
    BYTE bRev[109];                   
} DHDEV_CAMERA_INFO;
typedef struct __DHDEV_NIGHTOPTIONS
{
    BYTE bEnable; 
    BYTE bSunriseHour;
    BYTE bSunriseMinute;
    BYTE bSunriseSecond;
    BYTE bSunsetHour;
    BYTE bSunsetMinute;
    BYTE bSunsetSecond;
    BYTE bWhiteBalance;            
    BYTE bGainRed;                 
    BYTE bGainBlue;                
    BYTE bGainGreen;               
    BYTE bGain;                    
    BYTE bGainAuto;                
    BYTE bBrightnessThreshold;     
    BYTE ReferenceLevel;           
    BYTE bExposureSpeed;           
    float ExposureValue1;          
    float ExposureValue2;          
    BYTE bAutoApertureEnable;      
    BYTE bWideDynamicRange;        
    WORD wNightSyncValue;          
    WORD wNightSyncValueMillValue; 
    BYTE res[10];                  
} DHDEV_NIGHTOPTIONS;
typedef struct __DHDEV_CAMERA_CFG
{
    DWORD dwSize;
    BYTE bExposure;                     
    BYTE bBacklight;                    
    BYTE bAutoColor2BW;                 
    BYTE bMirror;                       
    BYTE bFlip;                         
    BYTE bLensEn;                       
    BYTE bLensFunction;                 
    BYTE bWhiteBalance;                 
    BYTE bSignalFormat;                 
    BYTE bRotate90;                     
    BYTE bReferenceLevel;               
    BYTE byReserve;                     
    float ExposureValue1;               
    float ExposureValue2;               
    DHDEV_NIGHTOPTIONS stuNightOptions; 
    BYTE bGainRed;                      
    BYTE bGainBlue;                     
    BYTE bGainGreen;                    
    BYTE bFlashMode;                    
    BYTE bFlashValue;                   
    BYTE bFlashPole;                    
    BYTE bExternalSyncPhase;            
    BYTE bFlashInitValue;               
    WORD wExternalSyncValue;            
    WORD wExternalSyncValueMillValue;   
    BYTE bWideDynamicRange;             
    BYTE byExposureCompensation;        
    char bRev[54];                      
} DHDEV_CAMERA_CFG;
#define ALARM_MAX_NAME 64
typedef struct
{
    BOOL bEnable;                             
    char szAlarmName[DH_MAX_ALARM_NAME];      
    int nAlarmInPattern;                      
    int nAlarmOutPattern;                     
    char szAlarmInAddress[DH_MAX_ALARM_NAME]; 
    int nSensorType;                          
    int nDefendEfectTime;                     
    int nDefendAreaType;                      
    int nAlarmSmoothTime;                     
    char reserved[128];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];
    DH_MSG_HANDLE struHandle; 
} DH_INFRARED_INFO;
typedef struct
{
    BYTE address[ALARM_MAX_NAME]; 
    BYTE name[ALARM_MAX_NAME];    
    BYTE reserved[32];            
} DH_WI_CONFIG_ROBOT;
typedef struct
{
    BYTE address[ALARM_MAX_NAME]; 
    BYTE name[ALARM_MAX_NAME];    
    BYTE reserved[32];            
} DH_WI_CONFIG_ALARM_OUT;
typedef struct
{
    DWORD dwSize;
    BYTE bAlarmInNum;                        
    BYTE bAlarmOutNum;                       
    DH_WI_CONFIG_ALARM_OUT AlarmOutAddr[16]; 
    BYTE bRobotNum;                          
    DH_WI_CONFIG_ROBOT RobotAddr[16];        
    DH_INFRARED_INFO InfraredAlarm[16];
    char reserved[256];
} DH_INFRARED_CFG;
typedef struct
{
    int channel;         
    int alarmType;       
    unsigned int volume; 
    BYTE byState;        
    char reserved[255];
} NET_NEW_SOUND_ALARM_STATE;
typedef struct
{
    int channelcount; 
    NET_NEW_SOUND_ALARM_STATE SoundAlarmInfo[DH_MAX_ALARM_IN_NUM];
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} DH_NEW_SOUND_ALARM_STATE;
typedef struct
{
    int nChannelNum;           
    DWORD dwVideoStandardMask; 
    int nFramesCount;          
    char Frames[128];          
    int nSnapModeCount;        
    char SnapMode[16];         
    int nPicFormatCount;       
    char PictureFormat[16];    
    int nPicQualityCount;      
    char PictureQuality[32];   
    char nReserved[128];       
} DH_QUERY_SNAP_INFO;
typedef struct
{
    int nChannelCount; 
    DH_QUERY_SNAP_INFO stuSnap[DH_MAX_CHANNUM];
} DH_SNAP_ATTR_EN;
#define DH_IPIFILTER_NUM 200    
#define DH_IPIFILTER_NUM_EX 512 
typedef struct
{
    DWORD dwIPNum;                                  
    char SZIP[DH_IPIFILTER_NUM][DH_MAX_IPADDR_LEN]; 
    char byReserve[32];                             
} IPIFILTER_INFO;
typedef struct
{
    DWORD dwSize;
    DWORD dwEnable;          
    DWORD dwType;            
    IPIFILTER_INFO BannedIP; 
    IPIFILTER_INFO TrustIP;  
    char byReserve[256];     
} DHDEV_IPIFILTER_CFG;
typedef struct
{
    DWORD dwIPNum;                                     
    char SZIP[DH_IPIFILTER_NUM_EX][DH_MAX_IPADDR_LEN]; 
    char byReserve[32];                                
} IPIFILTER_INFO_EX;
typedef struct
{
    DWORD dwSize;
    DWORD dwEnable;             
    DWORD dwType;               
    IPIFILTER_INFO_EX BannedIP; 
    IPIFILTER_INFO_EX TrustIP;  
    char byReserve[256];        
} DHDEV_IPIFILTER_CFG_EX;
#define DH_MACFILTER_NUM 512 
typedef struct
{
    DWORD dwSize;                                 
    DWORD dwMacNum;                               
    char szMac[DH_MACFILTER_NUM][DH_MACADDR_LEN]; 
} MACFILTER_INFO;
typedef struct
{
    DWORD dwSize;                
    DWORD dwEnable;              
    DWORD dwType;                
    MACFILTER_INFO stuBannedMac; 
    MACFILTER_INFO stuTrustMac;  
} DHDEV_MACFILTER_CFG;
#define DH_MACIPFILTER_NUM 512 
typedef struct
{
    DWORD dwSize;                 
    char szMac[DH_MACADDR_LEN];   
    char szIp[DH_MAX_IPADDR_LEN]; 
} MACIP_INFO;
typedef struct
{
    DWORD dwSize;                                  
    DWORD dwEnable;                                
    DWORD dwType;                                  
    DWORD dwBannedMacIpNum;                        
    MACIP_INFO stuBannedMacIp[DH_MACIPFILTER_NUM]; 
    DWORD dwTrustMacIpNum;                         
    MACIP_INFO stuTrustMacIp[DH_MACIPFILTER_NUM];  
} DHDEV_MACIPFILTER_CFG;
typedef struct
{
    int nCardNum;                                        
    char cardInfo[DH_MAX_CARD_NUM][DH_MAX_CARDINFO_LEN]; 
    BYTE byReserve[32];                                  
} DHDEV_NETCARD_CFG;
typedef struct
{
    WORD wPort;          
    BYTE byReserved[62]; 
} DHDEV_RTSP_CFG;
typedef struct _ENCRYPT_KEY_INFO
{
    BYTE byEncryptEnable; 
    BYTE byReserved[3];
    union
    {
        BYTE byDesKey[8];     
        BYTE by3DesKey[3][8]; 
        BYTE byAesKey[32];    
    };
} ENCRYPT_KEY_INFO;
typedef struct _ALGO_PARAM_INFO
{
    WORD wEncryptLenth;  
    BYTE byAlgoWorkMode; 
    BYTE reserved[13];   
} ALGO_PARAM_INFO;
typedef struct _DHEDV_STREAM_ENCRYPT
{
    BYTE byEncrptAlgoType; 
    BYTE byReserved1[3];
    ALGO_PARAM_INFO stuEncrptAlgoparam;  
    ENCRYPT_KEY_INFO stuEncryptKeys[32]; 
    BYTE byEncrptPlanEnable;             
    BYTE byReserved3[3];
    NET_TIME stuPreTime; 
    BYTE reserved2[1360];
} DHEDV_STREAM_ENCRYPT;
typedef struct _DHDEV_BIT_RATE
{
    DWORD nExpectCodeRate; 
    BYTE byReserved[64];   
} DHDEV_LIMIT_BIT_RATE;
typedef struct _DHDEV_CUSTOM_CFG
{
    char szData[1024];   
    char reserved[3072]; 
} DHDEV_CUSTOM_CFG;
typedef struct
{
    DWORD dwSize;
    int nCompression;    
    int nMode;           
    char byReserve[256]; 
} DHDEV_TALK_ENCODE_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwEnable;                           
    DWORD dwReceiverNum;                      
    char SZReceiver[DH_MMS_RECEIVER_NUM][32]; 
    BYTE byType;                              
    char SZTitle[32];                         
    char byReserve[223];                      
} DHDEV_MMS_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwEnable;                              
    DWORD dwSenderNum;                           
    char SZSender[DH_MMS_SMSACTIVATION_NUM][32]; 
    char byReserve[256];                         
} DHDEV_SMSACTIVATION_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwEnable;                                 
    DWORD dwCallerNum;                              
    char SZCaller[DH_MMS_DIALINACTIVATION_NUM][32]; 
    char byReserve[256];                            
} DHDEV_DIALINACTIVATION_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwTDSCDMA;     
    DWORD dwWCDMA;       
    DWORD dwCDMA1x;      
    DWORD dwEDGE;        
    DWORD dwEVDO;        
    int nCurrentType;    
    DWORD dwTDLTE;       
    DWORD dwFDDLTE;      
    char byReserve[244]; 
} DHDEV_WIRELESS_RSS_INFO;
typedef struct _DHDEV_SIP_CFG
{
    BOOL bUnregOnBoot;         
    char szAccoutName[64];     
    char szSIPServer[128];     
    char szOutBoundProxy[128]; 
    DWORD dwSIPUsrID;          
    DWORD dwAuthID;            
    char szAuthPsw[64];        
    char szSTUNServer[128];    
    DWORD dwRegExp;            
    DWORD dwLocalSIPPort;      
    DWORD dwLocalRTPPort;      
    BOOL bEnable;              
    char szNotifyID[128];      
    NET_TIME stuRegTime;       
    BYTE bReserved[868];       
} DHDEV_SIP_CFG;
typedef struct _DHDEV_SIP_STATE
{
    int nStatusNum;     
    BYTE byStatus[64];  
    BYTE bReserved[64]; 
} DHDEV_SIP_STATE;
typedef struct _DHDEV_HARDKEY_STATE
{
    BOOL bState;        
    BYTE bReserved[64]; 
} DHDEV_HARDKEY_STATE;
typedef struct _DHDEV_ISCSI_PATHLIST
{
    int nCount;
    char szPaths[DH_MAX_ISCSI_PATH_NUM][MAX_PATH_STOR]; 
} DHDEV_ISCSI_PATHLIST;
typedef struct _DHDEV_WIFI_ROUTE_CAP_COUNTRY
{
    char szCountry[32];      
    int nValidChnNum;        
    int nValideChannels[32]; 
    char reserved[64];       
} DHDEV_WIFI_ROUTE_CAP_COUNTRY;
typedef struct _DHDEV_WIFI_ROUTE_CAP
{
    int nCountryNum;                              
    DHDEV_WIFI_ROUTE_CAP_COUNTRY stuCountry[256]; 
    char reserved[256];                           
} DHDEV_WIFI_ROUTE_CAP;
typedef struct _MONITOR_INFO
{
    int nPresetObjectNum; 
    int nActualObjectNum; 
    char reserved[64];
} MONITOR_INFO;
typedef struct _DHDEV_MONITOR_INFO
{
    int nChannelNumber;
    MONITOR_INFO stMonitorInfo[64]; 
    char reserved[128];
} DHDEV_MONITOR_INFO;
typedef struct tagNET_MULTIPLAYBACK_SPLIT_CAP
{
    DWORD dwSize;
    int nSliptMode[DH_MAX_MULTIPLAYBACK_SPLIT_NUM]; 
    int nModeNumber;
} NET_MULTIPLAYBACK_SPLIT_CAP;
typedef struct _POINTEANBLE
{
    BYTE bPoint;  
    BYTE bEnable; 
    BYTE bReserved[2];
} POINTEANBLE;
typedef struct _POINTCFG
{
    char szIP[DH_MAX_IPADDR_LEN];   
    int nPort;                      
    POINTEANBLE stuPointEnable[80]; 
    BYTE bReserved[256];
} POINTCFG;
typedef struct _DHDEV_POINT_CFG
{
    int nSupportNum;          
    POINTCFG stuPointCfg[16]; 
    BYTE bReserved[256];      
} DHDEV_POINT_CFG;
typedef struct _GPS_Info
{
    NET_TIME revTime;      
    char DvrSerial[50];    
    double longitude;      
    double latidude;       
    double height;         
    double angle;          
    double speed;          
    WORD starCount;        
    BOOL antennaState;     
    BOOL orientationState; 
} GPS_Info, *LPGPS_Info;
typedef struct
{
    int nAlarmCount;      
    int nAlarmState[128]; 
    BYTE byRserved[128];  
} ALARM_STATE_INFO;
typedef struct tagNET_GPS_LOCATION_INFO
{
    GPS_Info stuGpsInfo;                
    ALARM_STATE_INFO stuAlarmStateInfo; 
    int nTemperature;                   
    int nHumidity;                      
    unsigned int nIdleTime;             
    unsigned int nMileage;              
    int nVoltage;                       
    BYTE bOffline;                      
    BYTE byReserved[1023];
} NET_GPS_LOCATION_INFO, *LPNET_GPS_LOCATION_INFO;
typedef struct _snap_param
{
    unsigned int Channel;   
    unsigned int Quality;   
    unsigned int ImageSize; 
    unsigned int mode;      
    unsigned int InterSnap; 
    unsigned int CmdSerial; 
    unsigned int Reserved[4];
} SNAP_PARAMS, *LPSNAP_PARAMS;
typedef struct
{
    DWORD dwSize;
    BYTE bTimingEnable;                        
    BYTE bPicIntervalHour;                     
    short PicTimeInterval;                     
    DH_VIDEOENC_OPT struSnapEnc[SNAP_TYP_NUM]; 
} DHDEV_SNAP_CFG;
typedef struct
{
    DWORD dwSize;
    BYTE bTimingEnable;                        
    BYTE bPicIntervalHour;                     
    short PicTimeInterval;                     
    DH_VIDEOENC_OPT struSnapEnc[SNAP_TYP_NUM]; 
    DWORD dwTrigPicIntervalSecond;             
    BYTE byRserved[256];                       
} DHDEV_SNAP_CFG_EX;
typedef struct
{
    char szSSID[128]; 
    BOOL bEnable;     
    int nSafeType;    
    int nEncryprion; 
    int nStrength;           
    char szHostIP[128];      
    char szHostNetmask[128]; 
    char szHostGateway[128]; 
    int nPriority;           
    int nEnDHCP;             
    BYTE bReserved[1016];
} DHDEV_VEHICLE_WIFI_STATE;
typedef struct
{
    char szSSID[128]; 
    int nPriority;    
    int nSafeType;    
    int nEncryprion; 
    char szKey[128];         
    char szHostIP[128];      
    char szHostNetmask[128]; 
    char szHostGateway[128]; 
    int nEnDHCP;             
    BYTE byKeyIndex;         
    BYTE bReserved[1019];
} DHDEV_VEHICLE_WIFI_CONFIG;
typedef struct
{
    char szSSID[128];    
    BYTE bReserved[256]; 
} WIFI_CONNECT;
typedef struct __DHCTRL_IPMODIFY_PARAM
{
    int nStructSize;
    char szRemoteIP[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    char szSubmask[DH_MAX_IPADDR_LEN];            
    char szGateway[DH_MAX_IPADDR_OR_DOMAIN_LEN];  
    char szMac[DH_MACADDR_LEN];                   
    char szDeviceType[DH_DEV_TYPE_LEN];           
} DHCTRL_IPMODIFY_PARAM;
typedef struct
{
    BOOL bIsScan;     
    char szSSID[128]; 
    int nSafeType;    
    int nEncryprion; 
    char szKey[128];         
    int nStrength;           
    int nMaxBitRate;         
    int nIsCnnted;           
    int nIsSaved;            
    int nPriority;           
    char szHostIP[128];      
    char szHostNetmask[128]; 
    char szHostGateway[128]; 
    int nWifiFreq;           
    int nEnDHCP;             
    BYTE byKeyIndex;         
    BYTE bReserved[1019];
} DHDEV_VEHICLE_SINGLE_WIFI_AP_CFG;
typedef struct
{
    BOOL bEnable;                                    
    int nWifiApNum;                                  
    DHDEV_VEHICLE_SINGLE_WIFI_AP_CFG struWifiAp[64]; 
    int nReserved[512];                              
} DHDEV_VEHICLE_WIFI_AP_CFG;
typedef struct
{
    BOOL bEnable;                              
    int nRetWifiApNum;                         
    int nMaxWifiApNum;                         
    DHDEV_VEHICLE_SINGLE_WIFI_AP_CFG* pWifiAp; 
    int nReserved[512];                        
} DHDEV_VEHICLE_WIFI_AP_CFG_EX;
typedef struct _DH_DEVICE_GPS_LOG_ITEM
{
    DHDEVTIME stuDevTime; 
    DWORD dwLatidude;     
    DWORD dwLongitude;    
    DWORD dwSpeed;        
    DWORD dwHight;        
    DWORD dwAngle;        
    DHDEVTIME stuGpsTime; 
    BYTE bAntStatus;      
    BYTE bOriStatus;      
    BYTE bSatCount;       
    BYTE bGPSStatus;      
    DWORD dwTemp;         
    DWORD dwHumidity;     
    BYTE bReserved[24];   
} DH_DEVICE_GPS_LOG_ITEM;
typedef struct _QUERY_GPS_LOG_PARAM
{
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    int nStartNum;         
    BYTE bReserved[20];
} QUERY_GPS_LOG_PARAM;
typedef struct _GPS_TEMP_HUMIDITY_INFO
{
    double dTemperature; 
    double dHumidity;    
    BYTE bReserved[128]; 
} GPS_TEMP_HUMIDITY_INFO;
typedef enum
{
    ENCLOSURE_UNKNOWN = 0x00,         
    ENCLOSURE_LIMITSPEED = 0x01,      
    ENCLOSURE_DRIVEALLOW = 0x02,      
    ENCLOSURE_FORBIDDRIVE = 0x04,     
    ENCLOSURE_LOADGOODS = 0x08,       
    ENCLOSURE_UPLOADGOODS = 0x10,     
    ENCLOSURE_FLYALLOW = 0x20,        
    ENCLOSURE_MANUALFORBIDFLY = 0x40, 
    ENCLOSURE_FIXEDFORBIDFLY = 0x80,  
    ENCLOSURE_FiXEDLIMITFLY = 0x81,   
} ENCLOSURE_TYPE;
typedef enum
{
    ENCLOSURE_ALARM_DRIVEIN,    
    ENCLOSURE_ALARM_DRIVEOUT,   
    ENCLOSURE_ALARM_OVERSPEED,  
    ENCLOSURE_ALARM_SPEEDCLEAR, 
    ENCLOSURE_ALARM_FLYNEAR,    
} ENCLOSURE_ALARM_TYPE;
typedef struct
{
    DWORD dwLongitude; 
    DWORD dwLatidude;  
} GPS_POINT;
typedef struct _DHDEV_ENCLOSURE_CFG
{
    UINT unType;                             
    BYTE bRegion[8];                         
    UINT unId;                               
    UINT unSpeedLimit;                       
    UINT unPointNum;                         
    GPS_POINT stPoints[128];                 
    char szStationName[DH_STATION_NAME_LEN]; 
    BYTE bDisenable;                         
    BYTE bShape;                             
    BYTE bLimitType;                         
    BYTE bAction;                            
    int nLimitAltitude;                      
    int nAlarmAltitude;                      
    UINT unLimitRadius;                      
    UINT unAlarmRadius;                      
    BYTE reserved[12];                       
} DHDEV_ENCLOSURE_CFG;
typedef struct _DHDEV_ENCLOSURE_VERSION_CFG
{
    UINT unType;        
    UINT unVersion[32]; 
    int nReserved;      
} DHDEV_ENCLOSURE_VERSION_CFG;
typedef enum tagEM_ENCLOSURE_TYPE_EX
{
    EM_ENCLOSURE_TYPE_EX_UNKNOWN,     
    EM_ENCLOSURE_TYPE_EX_LIMITSPEED,  
    EM_ENCLOSURE_TYPE_EX_DRIVEALLOW,  
    EM_ENCLOSURE_TYPE_EX_FORBIDDRIVE, 
    EM_ENCLOSURE_TYPE_EX_LOADGOODS,   
    EM_ENCLOSURE_TYPE_EX_UPLOADGOODS, 
} EM_ENCLOSURE_TYPE_EX;
typedef enum tagEM_ENCLOSURE_ALARM_TYPE_EX
{
    ENCLOSURE_ALARM_EX_UNKNOWN,    
    ENCLOSURE_ALARM_EX_DRIVEIN,    
    ENCLOSURE_ALARM_EX_DRIVEOUT,   
    ENCLOSURE_ALARM_EX_OVERSPEED,  
    ENCLOSURE_ALARM_EX_SPEEDCLEAR, 
} EM_ENCLOSURE_ALARM_TYPE_EX;
typedef struct tagALARM_ENCLOSURE_INFO_EX
{
    int nChannelID;                          
    int nAction;                             
    NET_TIME_EX stuUTC;                      
    EM_ENCLOSURE_TYPE_EX emType;             
    int nActionNum;                          
    EM_ENCLOSURE_ALARM_TYPE_EX emAction[16]; 
    int nDriverNo;                           
    int nEnclosureID;                        
    DWORD dwLongitude;                       
    DWORD dwLatidude;                        
    int nLimitSpeed;                         
    int nSpeed;                              
    char szDeviceID[32];                     
    int nStartEnclosureID;                   
    int nEndEnclosureID;                     
    NET_TIME_EX stuStartTime;                
    NET_TIME_EX stuEndTime;                  
    int nMileage;                            
    int nTriggerCount;                       
    char szReserved[1024];                   
} ALARM_ENCLOSURE_INFO_EX;
typedef struct __ALARM_ENCLOSURE_INFO
{
    int nTypeNumber;                                 
    BYTE bType[16];                                  
    int nAlarmTypeNumber;                            
    BYTE bAlarmType[16];                             
    char szDriverId[DH_VEHICLE_DRIVERNO_LEN];        
    UINT unEnclosureId;                              
    UINT unLimitSpeed;                               
    UINT unCurrentSpeed;                             
    NET_TIME stAlarmTime;                            
    DWORD dwLongitude;                               
    DWORD dwLatidude;                                
    BYTE bOffline;                                   
    char reserve[3];                                 
    UINT unTriggerCount;                             
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BOOL bIsAlarmEnclosureInfoEx;                    
    ALARM_ENCLOSURE_INFO_EX stuAlarmEnclosureInfoEx; 
    BYTE byReserved[128];                            
} ALARM_ENCLOSURE_INFO;
typedef struct tagSTART_LISTEN_FINISH_RESULT_INFO
{
    DWORD dwEventResult;  
    BYTE byReserved[508]; 
} START_LISTEN_FINISH_RESULT_INFO;
#define DH_MAX_RAID_NUM 16
#define DH_MAX_RAID_DEVICE_NAME 16
typedef struct __RAID_STATE_INFO
{
    char szName[16]; 
    BYTE byType;     
    BYTE byStatus;   
    BYTE byReserved[2];
    int nCntMem;      
    int nMember[32];  
    int nCapacity;    
    int nRemainSpace; 
    int nTank;        
    char reserved[32];
} RAID_STATE_INFO;
typedef struct __ALARM_RAID_INFO
{
    int nRaidNumber;                              
    RAID_STATE_INFO stuRaidInfo[DH_MAX_RAID_NUM]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;         
    char reserved[128];
} ALARM_RAID_INFO;
typedef enum tagEM_RAID_ERROR
{
    EM_RAID_ERROR_UNKNOW,   
    EM_RAID_ERROR_FAILED,   
    EM_RAID_ERROR_DEGRADED, 
} EM_RAID_ERROR;
typedef enum tagEM_RAID_ERR_SUBDISK
{
    EM_RAID_ERR_SUBDISK_UNKNOWN,  
    EM_RAID_ERR_SUBDISK_OFFLINE,  
    EM_RAID_ERR_SUBDISK_FAULTY,   
    EM_RAID_ERR_SUBDISK_WRITEERR, 
} EM_RAID_ERR_SUBDISK;
typedef struct tagNET_RAID_ERR_DETAIL_INFO
{
    DWORD dwSlotNum;                  
    EM_RAID_ERR_SUBDISK emErrSubDisk; 
    BYTE byReserved[24];              
} NET_RAID_ERR_DETAIL_INFO;
typedef struct tagALARM_RAID_INFO_EX
{
    DWORD nAction;                             
    char szDevice[DH_MAX_RAID_DEVICE_NAME];    
    EM_RAID_ERROR emErrorType;                 
    int nDetailNum;                            
    NET_RAID_ERR_DETAIL_INFO stuErrDetail[16]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;      
    BYTE byReserved[508];                      
} ALARM_RAID_INFO_EX;
typedef struct tagALARM_STORAGE_IPC_FAILURE_INFO
{
    int nAction;           
    int nChannelID;        
    BYTE byReserved[1024]; 
} ALARM_STORAGE_IPC_FAILURE_INFO;
typedef struct tagALARM_DEVICE_STAY_INFO
{
    int nAction;           
    int nChannelID;        
    BYTE byReserved[1024]; 
} ALARM_DEVICE_STAY_INFO;
typedef enum tagEM_SUB_WAY_DOOR_STATE_TYPE
{
    EM_SUB_WAY_DOOR_STATE_TYPE_UNKNOWN,   
    EM_SUB_WAY_DOOR_STATE_TYPE_LOST,      
    EM_SUB_WAY_DOOR_STATE_TYPE_ISOLATION, 
    EM_SUB_WAY_DOOR_STATE_TYPE_UNLOCK,    
    EM_SUB_WAY_DOOR_STATE_TYPE_NORMAL,    
} EM_SUB_WAY_DOOR_STATE_TYPE;
typedef enum tagEM_SUB_WAY_CARRIAGE_NUMBER_TYPE
{
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE_UNKNOWN, 
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE_TC1,     
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE_M1,      
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE_M2,      
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE_TC2,     
} EM_SUB_WAY_CARRIAGE_NUMBER_TYPE;
typedef struct tagALARM_SUB_WAY_DOOR_STATE_INFO
{
    int nAction;                                      
    int nEventID;                                     
    double dbPTS;                                     
    NET_TIME_EX stuTime;                              
    int nDoorNumber;                                  
    EM_SUB_WAY_DOOR_STATE_TYPE emDoorState;           
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE emCarriageNumber; 
    BYTE byReserved[1024];                            
} ALARM_SUB_WAY_DOOR_STATE_INFO;
typedef struct tagALARM_SUB_WAY_PECE_SWITCH_INFO
{
    int nAction;                                      
    int nEventID;                                     
    double dbPTS;                                     
    NET_TIME_EX stuTime;                              
    int nDoorNumber;                                  
    int nState;                                       
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE emCarriageNumber; 
    BYTE byReserved[1024];                            
} ALARM_SUB_WAY_PECE_SWITCH_INFO;
typedef struct tagALARM_SUB_WAY_FIRE_ALARM_INFO
{
    int nAction;           
    int nEventID;          
    double dbPTS;          
    NET_TIME_EX stuTime;   
    int nSourceNumber;     
    BOOL bState;           
    BYTE byReserved[1024]; 
} ALARM_SUB_WAY_FIRE_ALARM_INFO;
typedef struct tagALARM_SUB_WAY_EMER_HANDLE_INFO
{
    int nAction;                                      
    int nEventID;                                     
    double dbPTS;                                     
    NET_TIME_EX stuTime;                              
    BOOL bState;                                      
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE emCarriageNumber; 
    BYTE byReserved[1024];                            
} ALARM_SUB_WAY_EMER_HANDLE_INFO;
typedef struct tagALARM_SUB_WAY_CAB_COVER_INFO
{
    int nAction;                                      
    int nEventID;                                     
    double dbPTS;                                     
    NET_TIME_EX stuTime;                              
    int nState;                                       
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE emCarriageNumber; 
    BYTE byReserved[1024];                            
} ALARM_SUB_WAY_CAB_COVER_INFO;
typedef struct tagALARM_SUB_WAY_DERA_OBST_INFO
{
    int nAction;                                      
    int nEventID;                                     
    double dbPTS;                                     
    NET_TIME_EX stuTime;                              
    BOOL bState;                                      
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE emCarriageNumber; 
    BYTE byReserved[1024];                            
} ALARM_SUB_WAY_DERA_OBST_INFO;
typedef struct tagALARM_SUB_WAY_PECU_CALL_INFO
{
    int nAction;                                      
    int nEventID;                                     
    double dbPTS;                                     
    NET_TIME_EX stuTime;                              
    int nCallNumber;                                  
    BOOL bState;                                      
    EM_SUB_WAY_CARRIAGE_NUMBER_TYPE emCarriageNumber; 
    BYTE byReserved[1024];                            
} ALARM_SUB_WAY_PECU_CALL_INFO;
typedef struct tagALARM_DOOR_CLOSEDMANUALLY_INFO
{
    int nAction;                          
    int nEventID;                         
    double dbPTS;                         
    NET_TIME_EX stuTime;                  
    int nDoor;                            
    char szDoorName[DH_MAX_DOORNAME_LEN]; 
    BYTE byReserved[1024];                
} ALARM_DOOR_CLOSEDMANUALLY_INFO;
typedef struct tagALARM_DOOR_NOTCLOSED_LONGTIME_INFO
{
    int nAction;                          
    int nEventID;                         
    double dbPTS;                         
    NET_TIME_EX stuTime;                  
    int nDoor;                            
    char szDoorName[DH_MAX_DOORNAME_LEN]; 
    BYTE byReserved[1024];                
} ALARM_DOOR_NOTCLOSED_LONGTIME_INFO;
typedef struct tagALARM_CUT_LINE_INFO
{
    int nChannel;          
    int nAction;           
    NET_TIME_EX stuTime;   
    BYTE byReserved[1024]; 
} ALARM_CUT_LINE_INFO;
typedef struct tagALARM_FIBRE_OPTIC_ABORT
{
    int nAlarmIn;          
    int nAction;           
    NET_TIME_EX UTC;       
    BYTE byReserved[1024]; 
} ALARM_FIBRE_OPTIC_ABORT;
typedef struct tagALARM_TAIL_DETECTION_INFO
{
    int nAction;          
    int nChannelID;       
    double dbPTS;         
    NET_TIME_EX stuTime;  
    int nEventID;         
    char szSourceID[32];  
    BYTE byReserved[992]; 
} ALARM_TAIL_DETECTION_INFO;
typedef struct tagALARM_NEAR_DISTANCE_INFO
{
    int nChannel;          
    int nAction;           
    int nEventID;          
    double dbPTS;          
    NET_TIME_EX stuTime;   
    BYTE byReserved[1024]; 
} ALARM_NEAR_DISTANCE_INFO;
typedef struct tagMAN_STAND_LIST_INFO
{
    DH_POINT stuCenter;     
    char szSerialUUID[22];  
    DH_RECT stuBoundingBox; 
    char szReversed[90];    
} MAN_STAND_LIST_INFO;
typedef struct tagALARM_MAN_STAND_INFO
{
    int nChannel;        
    int nAction;         
    int nEventID;        
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nManListCount;                                  
    MAN_STAND_LIST_INFO stuManList[MAX_MAN_LIST_COUNT]; 
    BYTE byReserved[1024];                              
} ALARM_MAN_STAND_INFO;
typedef struct tagMAN_NUM_LIST_INFO
{
    DH_RECT stuBoudingBox; 
    int nStature;          
    char szReversed[128];  
} MAN_NUM_LIST_INFO;
typedef struct tagALARM_MAN_NUM_INFO
{
    int nChannel;                                     
    int nAction;                                      
    int nEventID;                                     
    double dbPTS;                                     
    NET_TIME_EX stuTime;                              
    int nManListCount;                                
    MAN_NUM_LIST_INFO stuManList[MAX_MAN_LIST_COUNT]; 
    char szName[128];                                 
    UINT nPrevNumber;                                 
    UINT nCurrentNumber;                              
    char szRuleName[128];                             
    UINT nAlertNum;                                   
    int nAlarmType;                                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    BYTE byReserved[752];                             
} ALARM_MAN_NUM_INFO;
typedef struct tagALARM_BITRATES_OVERLIMIT_INFO
{
    int nChannel;          
    int nAction;           
    int nLimitBps;         
    int nCurrentBps;       
    BYTE byReserved[1024]; 
} ALARM_BITRATES_OVERLIMIT_INFO;
typedef struct tagALARM_HIGH_DECIBEL_INFO
{
    int nAudioChannel;     
    int nAction;           
    NET_TIME_EX stuTime;   
    BYTE byReserved[1024]; 
} ALARM_HIGH_DECIBEL_INFO;
typedef struct tagALARM_SHAKE_DETECTION_INFO
{
    int nAction;           
    NET_TIME_EX stuTime;   
    BYTE byReserved[1024]; 
} ALARM_SHAKE_DETECTION_INFO;
typedef enum tagNET_ACCESS_METHOD
{
    NET_ACCESS_METHOD_UNKNOWN,     
    NET_ACCESS_METHOD_CARD,        
    NET_ACCESS_METHOD_PASSWORD,    
    NET_ACCESS_METHOD_FINGERPRINT, 
} NET_ACCESS_METHOD;
typedef struct tagALARM_ACCESS_CTL_MALICIOUS
{
    int nAction;                            
    NET_TIME_EX stuTime;                    
    NET_ACCESS_METHOD emMethod;             
    char szSerialNum[MAX_COMMON_STRING_32]; 
    int nChannel;                           
    BOOL bRealUTC;                          
    NET_TIME_EX RealUTC;                    
    BYTE byReserved[970];                   
} ALARM_ACCESS_CTL_MALICIOUS;
typedef struct tagALARM_ACCESS_CTL_USERID_REGISTER
{
    int nAction;                            
    NET_TIME_EX stuTime;                    
    char UserID[DH_USER_NAME_LEN_EX];       
    NET_ACCESS_METHOD emMethod;             
    char szSerialNum[MAX_COMMON_STRING_32]; 
    BYTE byReserved[1024];                  
} ALARM_ACCESS_CTL_USERID_REGISTER;
typedef enum tagNET_ACCESS_CTL_LOCKTYPE
{
    NET_ACCESS_CTL_LOCKTYPE_UNKNOWN,  
    NET_ACCESS_CTL_LOCKTYPE_DEADBOLT, 
    NET_ACCESS_CTL_LOCKTYPE_STAYBOLT, 
} NET_ACCESS_CTL_LOCKTYPE;
typedef struct tagALARM_ACCESS_CTL_REVERSELOCK
{
    int nAction;                            
    NET_TIME_EX stuTime;                    
    BOOL bStatus;                           
    NET_ACCESS_CTL_LOCKTYPE emMethod;       
    char szSerialNum[MAX_COMMON_STRING_32]; 
    BYTE byReserved[1024];                  
} ALARM_ACCESS_CTL_REVERSELOCK;
typedef struct tagALARM_ACCESS_CTL_USERID_DELETE
{
    int nAction;                            
    NET_TIME_EX stuTime;                    
    NET_ACCESS_METHOD emMethod;             
    char szSerialNum[MAX_COMMON_STRING_32]; 
    BYTE byReserved[1024];                  
} ALARM_ACCESS_CTL_USERID_DELETE;
typedef struct tagALARM_ACCESS_DOOR_BELL_INFO
{
    int nChannelID;                               
    NET_TIME_EX stuTime;                          
    char szName[DH_MAX_NAME_LEN];                 
    char szWirelessDevSN[DH_MAX_ACCESS_NAME_LEN]; 
    BYTE bReserved[512];                          
} ALARM_ACCESS_DOOR_BELL_INFO;
typedef struct tagALARM_ACCESS_FACTORY_RESET_INFO
{
    NET_TIME_EX stuTime;                        
    char szSmartLockSN[DH_MAX_ACCESS_NAME_LEN]; 
    BYTE bReserved[512];                        
} ALARM_ACCESS_FACTORY_RESET_INFO;
typedef enum tagEM_NET_CABINET_SWITCH_ACTION_TYPE
{
    NET_CABINET_SWITCH_ACTION_TYPE_UNKNOWN, 
    NET_CABINET_SWITCH_ACTION_TYPE_OPEN,    
    NET_CABINET_SWITCH_ACTION_TYPE_CLOSE,   
} EM_NET_CABINET_SWITCH_ACTION_TYPE;
#define MAX_LINK_CHANNEL_NUMBER 16
typedef struct tagALARM_CABINET_INFO
{
    int nAction;                               
    NET_TIME_EX stuTime;                       
    EM_NET_CABINET_SWITCH_ACTION_TYPE emType;  
    char szSerialNo[MAX_COMMON_STRING_32];     
    int nLinkChannelNum;                       
    int nLinkChannel[MAX_LINK_CHANNEL_NUMBER]; 
    BYTE byReserved[1024];                     
} ALARM_CABINET_INFO;
typedef struct tagDH_SWITCH_SCREEN_INFO
{
    int nChannelID; 
    BYTE bReserved[512];
} DH_SWITCH_SCREEN_INFO;
#define MAX_EVENT_INFO_LEN 128 
typedef struct tagALARM_MCS_GENERAL_CAPACITY_LOW_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_GENERAL_CAPACITY_LOW_INFO;
typedef struct tagALARM_MCS_DATA_NODE_OFFLINE_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_DATA_NODE_OFFLINE_INFO;
typedef struct tagALARM_MCS_DISK_OFFLINE_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_DISK_OFFLINE_INFO;
typedef struct tagALARM_MCS_DISK_SLOW_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_DISK_SLOW_INFO;
typedef struct tagALARM_MCS_DISK_BROKEN_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_DISK_BROKEN_INFO;
typedef struct tagALARM_MCS_DISK_UNKNOW_ERROR_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_DISK_UNKNOW_ERROR_INFO;
typedef struct tagALARM_MCS_METADATA_SERVER_ABNORMAL_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_METADATA_SERVER_ABNORMAL_INFO;
typedef struct tagALARM_MCS_CATALOG_SERVER_ABNORMAL_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_CATALOG_SERVER_ABNORMAL_INFO;
typedef struct tagALARM_MCS_GENERAL_CAPACITY_RESUME_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_GENERAL_CAPACITY_RESUME_INFO;
typedef struct tagALARM_MCS_DATA_NODE_ONLINE_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_DATA_NODE_ONLINE_INFO;
typedef struct tagALARM_MCS_DISK_ONLINE_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_DISK_ONLINE_INFO;
typedef struct tagALARM_MCS_METADATA_SLAVE_ONLINE_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_METADATA_SLAVE_ONLINE_INFO;
typedef struct tagALARM_MCS_CATALOG_SERVER_ONLINE_INFO
{
    char szEventInfo[MAX_EVENT_INFO_LEN]; 
    BYTE byReserved[1024];                
} ALARM_MCS_CATALOG_SERVER_ONLINE_INFO;
typedef struct
{
    int Offset;   
    int Length;   
    char Key[16]; 
} DH_SNIFFER_FRAMEID;
typedef struct
{
    int Offset;     
    int Offset2;    
    int Length;     
    int Length2;    
    char Title[12]; 
    char Key[12];   
} DH_SNIFFER_CONTENT;
typedef struct
{
    DH_SNIFFER_FRAMEID snifferFrameId;                         
    DH_SNIFFER_CONTENT snifferContent[DH_SNIFFER_CONTENT_NUM]; 
} DH_SNIFFER_FRAME;
typedef struct
{
    char SnifferSrcIP[DH_MAX_IPADDR_LEN];                  
    int SnifferSrcPort;                                    
    char SnifferDestIP[DH_MAX_IPADDR_LEN];                 
    int SnifferDestPort;                                   
    char reserved[28];                                     
    DH_SNIFFER_FRAME snifferFrame[DH_SNIFFER_FRAMEID_NUM]; 
    int displayPosition;                                   
    int recdChannelMask;                                   
} DH_ATM_SNIFFER_CFG;
typedef struct
{
    DWORD dwSize;
    DH_ATM_SNIFFER_CFG SnifferConfig[4];
    char reserved[256]; 
} DHDEV_SNIFFER_CFG;
typedef DH_SNIFFER_FRAMEID DH_SNIFFER_FRAMEID_EX;
typedef DH_SNIFFER_CONTENT DH_SNIFFER_CONTENT_EX;
typedef struct
{
    DH_SNIFFER_FRAMEID snifferFrameId;                            
    DH_SNIFFER_CONTENT snifferContent[DH_SNIFFER_CONTENT_NUM_EX]; 
} DH_SNIFFER_FRAME_EX;
typedef struct
{
    char SnifferSrcIP[DH_MAX_IPADDR_LEN];                     
    int SnifferSrcPort;                                       
    char SnifferDestIP[DH_MAX_IPADDR_LEN];                    
    int SnifferDestPort;                                      
    DH_SNIFFER_FRAME_EX snifferFrame[DH_SNIFFER_FRAMEID_NUM]; 
    int displayPosition;                                      
    int recdChannelMask;                                      
    BOOL bDateScopeEnable;                                    
    BOOL bProtocolEnable;                                     
    char szProtocolName[DH_SNIFFER_PROTOCOL_SIZE];            
    int nSnifferMode;                                         
    int recdChannelMask1;                                     
    char reserved[252];
} DH_ATM_SNIFFER_CFG_EX;
#define ATM_MAX_TRADE_TYPE_NAME 64
#define ATM_MAX_TRADE_NUM 1024
typedef struct __DH_ATM_QUERY_TRADE
{
    int nTradeTypeNum;                                                       
    int nExceptionTypeNum;                                                   
    char szSupportTradeType[ATM_MAX_TRADE_NUM][ATM_MAX_TRADE_TYPE_NAME];     
    char szSupportExceptionType[ATM_MAX_TRADE_NUM][ATM_MAX_TRADE_TYPE_NAME]; 
} DH_ATM_QUERY_TRADE, *LPDH_ATM_QUERY_TRADE;
#define nEncoderID nDecoderID
#define byEncoderID byDecoderID
typedef struct __DEV_DECODER_INFO
{
    char szDecType[64];      
    int nMonitorNum;         
    int nEncoderNum;         
    BYTE szSplitMode[16];    
    BYTE bMonitorEnable[16]; 
    BYTE bTVTipDisplay;      
    BYTE reserved1[3];
    BYTE byLayoutEnable[48]; 
    DWORD dwLayoutEnMask[2]; 
    char reserved[4];
} DEV_DECODER_INFO, *LPDEV_DECODER_INFO;
typedef struct __DEV_ENCODER_INFO
{
    char szDevIp[DH_MAX_IPADDR_LEN];             
    WORD wDevPort;                               
    BYTE bDevChnEnable;                          
    BYTE byDecoderID;                            
    char szDevUser[DH_USER_NAME_LENGTH_EX];      
    char szDevPwd[DH_USER_PSW_LENGTH_EX];        
    int nDevChannel;                             
    int nStreamType;                             
    BYTE byConnType;                             
    BYTE byWorkMode;                             
    WORD wListenPort;                            
    DWORD dwProtoType;                           
    char szDevName[64];                          
    BYTE byVideoInType;                          
    char szDevIpEx[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    BYTE bySnapMode;                             
    BYTE byManuFactory;                          
    BYTE byDeviceType;                           
    BYTE byDecodePolicy;                         
    BYTE bReserved[3];                           
    DWORD dwHttpPort;                            
    DWORD dwRtspPort;                            
    char szChnName[32];                          
    DWORD dwDecoderID;                           
} DEV_ENCODER_INFO, *LPDEV_ENCODER_INFO;
typedef struct __DHDEV_DECODER_URL_CFG
{
    DWORD dwSize;
    char szMainStreamUrl[MAX_PATH];  
    char szExtraStreamUrl[MAX_PATH]; 
} DHDEV_DECODER_URL_CFG;
typedef enum tagDH_SPLIT_DISPLAY_TYPE
{
    DH_SPLIT_DISPLAY_TYPE_GENERAL = 1, 
    DH_SPLIT_DISPLAY_TYPE_PIP = 2,     
    DH_SPLIT_DISPLAY_TYPE_CUSTOM = 3,  
} DH_SPLIT_DISPLAY_TYPE;
typedef struct tagDH_CTRL_DECTV_SCREEN
{
    DWORD dwSize;          
    int nSplitType;        
    BYTE* pEncoderChannel; 
    BYTE byGroupNo;        
    char reserved[3];      
    DWORD dwDisplayType;   
} DH_CTRL_DECTV_SCREEN;
typedef struct __DEV_DECODER_TV
{
    int nID;                         
    BOOL bEnable;                    
    int nSplitType;                  
    DEV_ENCODER_INFO stuDevInfo[16]; 
    BYTE bySupportSplit[10];         
    BYTE byGroupNo;                  
    char reserved[1];                
    DWORD dwDisplayType;             
} DEV_DECODER_TV, *LPDEV_DECODER_TV;
typedef struct __DEC_COMBIN_INFO
{
    int nCombinID;    
    int nSplitType;   
    BYTE bDisChn[16]; 
    char reserved[16];
} DEC_COMBIN_INFO, *LPDEC_COMBIN_INFO;
#define DEC_COMBIN_NUM 32 
typedef struct __DEC_TOUR_COMBIN
{
    int nTourTime;                  
    int nCombinNum;                 
    BYTE bCombinID[DEC_COMBIN_NUM]; 
    char reserved1[32];
    BYTE bCombinState[DEC_COMBIN_NUM]; 
    char reserved2[32];
} DEC_TOUR_COMBIN, *LPDEC_TOUR_COMBIN;
typedef enum __DEC_PLAYBACK_MODE
{
    Dec_By_Device_File = 0, 
    Dec_By_Device_Time,     
} DEC_PLAYBACK_MODE;
typedef enum __DEC_CTRL_PLAYBACK_TYPE
{
    Dec_Playback_Seek = 0, 
    Dec_Playback_Play,     
    Dec_Playback_Pause,    
    Dec_Playback_Stop,     
} DEC_CTRL_PLAYBACK_TYPE;
typedef enum __DEC_CTRL_TOUR_TYPE
{
    Dec_Tour_Stop = 0, 
    Dec_Tour_Start,    
    Dec_Tour_Pause,    
    Dec_Tour_Resume,   
} DEC_CTRL_TOUR_TYPE;
typedef struct __DEC_PLAYBACK_FILE_PARAM
{
    char szDevIp[DH_MAX_IPADDR_LEN];        
    WORD wDevPort;                          
    BYTE bDevChnEnable;                     
    BYTE byDecoderID;                       
    char szDevUser[DH_USER_NAME_LENGTH_EX]; 
    char szDevPwd[DH_USER_PSW_LENGTH_EX];   
    NET_RECORDFILE_INFO stuRecordInfo;      
    char reserved[12];
} DEC_PLAYBACK_FILE_PARAM, *LPDEC_PLAYBACK_FILE_PARAM;
typedef struct __DEC_PLAYBACK_TIME_PARAM
{
    char szDevIp[DH_MAX_IPADDR_LEN];        
    WORD wDevPort;                          
    BYTE bDevChnEnable;                     
    BYTE byDecoderID;                       
    char szDevUser[DH_USER_NAME_LENGTH_EX]; 
    char szDevPwd[DH_USER_PSW_LENGTH_EX];   
    int nChannelID;
    NET_TIME startTime;
    NET_TIME endTime;
    char reserved[12];
} DEC_PLAYBACK_TIME_PARAM, *LPDEC_PLAYBACK_TIME_PARAM;
typedef struct __DEV_DECCHANNEL_STATE
{
    BYTE byDecoderID;      
    BYTE byChnState;       
    BYTE byFrame;          
    BYTE byReserved;       
    int nChannelFLux;      
    int nDecodeFlux;       
    char szResolution[16]; 
    char reserved[256];
} DEV_DECCHANNEL_STATE, *LPDEV_DECCHANNEL_STATE;
typedef struct __DEV_VIDEOOUT_INFO
{
    DWORD dwVideoStandardMask; 
    int nVideoStandard;        
    DWORD dwImageSizeMask;     
    int nImageSize;            
    char reserved[256];
} DEV_VIDEOOUT_INFO, *LPDEV_VIDEOOUT_INFO;
typedef struct __DEV_TVADJUST_CFG
{
    int nTop;    
    int nBotton; 
    int nLeft;   
    int nRight;  
    int reserved[32];
} DHDEV_TVADJUST_CFG, *LPDHDEV_TVADJUST_CFG;
typedef struct tagPTZ_SPEED_UNIT
{
    float fPositionX;   
    float fPositionY;   
    float fZoom;        
    char szReserve[32]; 
} PTZ_SPEED_UNIT;
typedef struct tagPTZ_SPACE_RELATIVELY_UNIT
{
    float fPositionX;   
    float fPositionY;   
    float fZoom;        
    char szReserve[32]; 
} PTZ_SPACE_RELATIVELY_UNIT;
typedef struct tagPTZ_SPACE_UNIT
{
    int nPositionX;     
    int nPositionY;     
    int nZoom;          
    char szReserve[32]; 
} PTZ_SPACE_UNIT;
typedef struct tagNET_PTZSPACE_UNNORMALIZED
{
    int nPosX;           
    int nPosY;           
    int nZoom;           
    BYTE byReserved[52]; 
} NET_PTZSPACE_UNNORMALIZED;
typedef struct __DEV_DECODER_TOUR_SINGLE_CFG
{
    char szIP[128];      
    int nPort;           
    int nPlayChn;        
    int nPlayType;       
    char szUserName[32]; 
    char szPassword[32]; 
    int nInterval;       
    DWORD nManuFactory;  
    UINT nHttpPport;     
    UINT nRtspPort;      
    BYTE byServiceType;  
    BYTE bReserved[51];  
} DHDEV_DECODER_TOUR_SINGLE_CFG;
typedef struct __DEV_DECODER_TOUR_CFG
{
    int nCfgNum;                               
    DHDEV_DECODER_TOUR_SINGLE_CFG tourCfg[64]; 
    BYTE bReserved[256];                       
} DHDEV_DECODER_TOUR_CFG;
typedef struct
{
    DWORD dwOffSet;     
    DWORD dwFileLenth;  
    WORD wWidth;        
    WORD wHeight;       
    char* pszFilePath;  
    BYTE bIsDetected;   
    BYTE bReserved[2];  
    BYTE byQulityScore; 
    int nFilePathLen;   
    DH_POINT stuPoint;  
    UINT nIndexInData;  
} DH_PIC_INFO;
typedef enum tagEM_IMAGE_TYPE_EX2
{
    EM_IMAGE_TYPE_UNKNOWN,                           
    EM_IMAGE_TYPE_SCENE_IMAGE,                       
    EM_IMAGE_TYPE_GLOBAL_SCENE,                      
    EM_IMAGE_TYPE_THUM_IMAGE,                        
    EM_IMAGE_TYPE_FACE_SCENE_IMAGE,                  
    EM_IMAGE_TYPE_FACE_IMAGE,                        
    EM_IMAGE_TYPE_HUMAN_IMAGE,                       
    EM_IMAGE_TYPE_ALONG_WITH_FACE_HUMAN_IMAGE,       
    EM_IMAGE_TYPE_ALONG_WITH_FACE_HUMAN_SCENE_IMAGE, 
    EM_IMAGE_TYPE_PARKING_IMAGE,                     
    EM_IMAGE_TYPE_BINARIZED_PLATE,                   
    EM_IMAGE_TYPE_DEPOSIT_IMAGE_INFO,                
    EM_IMAGE_TYPE_IMAGE_INFO,                        
} EM_IMAGE_TYPE_EX2;
typedef struct tagNET_IMAGE_INFO_EX2
{
    EM_IMAGE_TYPE_EX2 emType; 
    UINT nOffset;             
    UINT nLength;             
    char byReserverd[4];      
    char szPath[256];         
} NET_IMAGE_INFO_EX2;
typedef struct tagNET_IMAGE_INFO_EX3
{
    EM_IMAGE_TYPE_EX2 emType; 
    UINT nOffset;             
    UINT nLength;             
    char byReserverd[4];      
    char szPath[256];         
    char szEncryptKey[128];   
    BYTE byReserverd2[1024];  
} NET_IMAGE_INFO_EX3;
typedef struct tagNET_PIC_INFO_EX
{
    UINT nLength;          
    UINT nWidth;           
    UINT nHeight;          
    char byReserverd[4];   
    char szFilePath[256];  
    char szReserverd[256]; 
} NET_PIC_INFO_EX;
typedef struct tagNET_RELATING_VIDEO_INFO
{
    char szVideoPath[256]; 
    char szReserved[128];  
} NET_RELATING_VIDEO_INFO;
typedef struct tagNET_FILE_PROCESS_INFO
{
    NET_IMAGE_INFO_EX2 stuImageInfo[32];              
    int nImageInfoNum;                                
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    char szReserved[1024];                            
} NET_FILE_PROCESS_INFO;
typedef struct tagDH_PIC_INFO_EXX
{
    DWORD dwSize;
    char szFilePath[DH_COMMON_STRING_256]; 
    DH_PIC_INFO stuPicInfo;                
} DH_PIC_INFO_EX2;
typedef struct
{
    DWORD dwOffSet;      
    DWORD dwFileLenth;   
    WORD wWidth;         
    WORD wHeight;        
    char szFilePath[64]; 
    BYTE bIsDetected;    
    BYTE bReserved[11];  
} DH_PIC_INFO_EX3;
#ifndef LINUX64_JNA
#pragma pack(push)
#pragma pack(4)
#endif
typedef struct
{
    int nObjectID;                        
    char szObjectType[128];               
    int nConfidence;                      
    int nAction;                          
    DH_RECT BoundingBox;                  
    DH_POINT Center;                      
    int nPolygonNum;                      
    DH_POINT Contour[DH_MAX_POLYGON_NUM]; 
    DWORD rgbaMainColor;                  
    char szText[128];                     
    char szObjectSubType[62]; 
    WORD wColorLogoIndex; 
    WORD wSubBrand;       
    BYTE byReserved1;
    bool bPicEnble;        
    DH_PIC_INFO stPicInfo; 
    bool bShotFrame;       
    bool bColor;           
    BYTE byReserved2;
    BYTE byTimeType;                                  
    NET_TIME_EX stuCurrentTime;                       
    NET_TIME_EX stuStartTime;                         
    NET_TIME_EX stuEndTime;                           
    DH_RECT stuOriginalBoundingBox;                   
    DH_RECT stuSignBoundingBox;                       
    DWORD dwCurrentSequence;                          
    DWORD dwBeginSequence;                            
    DWORD dwEndSequence;                              
    INT64 nBeginFileOffset;                           
    INT64 nEndFileOffset;                             
    BYTE byColorSimilar[NET_COLOR_TYPE_MAX];          
    BYTE byUpperBodyColorSimilar[NET_COLOR_TYPE_MAX]; 
    BYTE byLowerBodyColorSimilar[NET_COLOR_TYPE_MAX]; 
    int nRelativeID;                                  
    char szSubText[20];                               
    WORD wBrandYear;                                  
} DH_MSG_OBJECT;
typedef struct tagDH_MSG_OBJECT_SUPPLEMENT
{
    char szObjectUUID[48]; 
    UINT nMuckHide;        
    UINT nCarryType;       
    char szCategory[32];   
    char szReserved[216];  
} DH_MSG_OBJECT_SUPPLEMENT;
typedef enum tagEM_MSG_OBJ_PERSON_DIRECTION
{
    EM_MSG_OBJ_PERSON_DIRECTION_UNKOWN,        
    EM_MSG_OBJ_PERSON_DIRECTION_LEFT_TO_RIGHT, 
    EM_MSG_OBJ_PERSON_DIRECTION_RIGHT_TO_LEFT  
} EM_MSG_OBJ_PERSON_DIRECTION;
typedef struct tagDH_MSG_OBJECT_EX
{
    DWORD dwSize;
    int nObjectID;                        
    char szObjectType[128];               
    int nConfidence;                      
    int nAction;                          
    DH_RECT BoundingBox;                  
    DH_POINT Center;                      
    int nPolygonNum;                      
    DH_POINT Contour[DH_MAX_POLYGON_NUM]; 
    DWORD rgbaMainColor;                  
    char szText[128];                     
    char szObjectSubType[64];             
    BYTE byReserved1[3];
    bool bPicEnble;                                   
    DH_PIC_INFO stPicInfo;                            
    bool bShotFrame;                                  
    bool bColor;                                      
    BYTE bLowerBodyColor;                             
    BYTE byTimeType;                                  
    NET_TIME_EX stuCurrentTime;                       
    NET_TIME_EX stuStartTime;                         
    NET_TIME_EX stuEndTime;                           
    DH_RECT stuOriginalBoundingBox;                   
    DH_RECT stuSignBoundingBox;                       
    DWORD dwCurrentSequence;                          
    DWORD dwBeginSequence;                            
    DWORD dwEndSequence;                              
    INT64 nBeginFileOffset;                           
    INT64 nEndFileOffset;                             
    BYTE byColorSimilar[NET_COLOR_TYPE_MAX];          
    BYTE byUpperBodyColorSimilar[NET_COLOR_TYPE_MAX]; 
    BYTE byLowerBodyColorSimilar[NET_COLOR_TYPE_MAX]; 
    int nRelativeID;                                  
    char szSubText[20];                               
    int nPersonStature;                            
    EM_MSG_OBJ_PERSON_DIRECTION emPersonDirection; 
    DWORD rgbaLowerBodyColor;                      
} DH_MSG_OBJECT_EX;
typedef struct tagDH_MSG_OBJECT_EX2
{
    DWORD dwSize;
    int nObjectID;                        
    char szObjectType[128];               
    int nConfidence;                      
    int nAction;                          
    DH_RECT BoundingBox;                  
    DH_POINT Center;                      
    int nPolygonNum;                      
    DH_POINT Contour[DH_MAX_POLYGON_NUM]; 
    DWORD rgbaMainColor;                  
    char szText[128];                     
    char szObjectSubType[64];             
    BYTE byReserved1[3];
    bool bPicEnble;                                   
    DH_PIC_INFO stPicInfo;                            
    bool bShotFrame;                                  
    bool bColor;                                      
    BYTE bLowerBodyColor;                             
    BYTE byTimeType;                                  
    NET_TIME_EX stuCurrentTime;                       
    NET_TIME_EX stuStartTime;                         
    NET_TIME_EX stuEndTime;                           
    DH_RECT stuOriginalBoundingBox;                   
    DH_RECT stuSignBoundingBox;                       
    DWORD dwCurrentSequence;                          
    DWORD dwBeginSequence;                            
    DWORD dwEndSequence;                              
    INT64 nBeginFileOffset;                           
    INT64 nEndFileOffset;                             
    BYTE byColorSimilar[NET_COLOR_TYPE_MAX];          
    BYTE byUpperBodyColorSimilar[NET_COLOR_TYPE_MAX]; 
    BYTE byLowerBodyColorSimilar[NET_COLOR_TYPE_MAX]; 
    int nRelativeID;                                  
    char szSubText[20];                               
    int nPersonStature;                            
    EM_MSG_OBJ_PERSON_DIRECTION emPersonDirection; 
    DWORD rgbaLowerBodyColor;                      
    int nSynopsisSpeed;                
    int nSynopsisSize;                 
    BOOL bEnableDirection;             
    DH_POINT stuSynopsisStartLocation; 
    DH_POINT stuSynopsisEndLocation;   
    char szSerialUUID[22];             
    char szReserved[2];                
    BYTE byReserved[2024];             
} DH_MSG_OBJECT_EX2;
#ifndef LINUX64_JNA
#pragma pack(pop)
#endif
typedef struct
{
    short snSpeed;      
    short snCarLength;  
    float fRedTime;     
    float fCapTime;     
    BYTE bSigSequence;  
    BYTE bType;         
    BYTE bDirection;    
    BYTE bLightColor;   
    BYTE bSnapFlag[16]; 
} DH_SIG_CARWAY_INFO;
typedef struct
{
    BYTE byRedundance[8]; 
    BYTE bReserved[120];  
} DH_SIG_CARWAY_INFO_EX;
typedef struct
{
    BYTE bCarWayID;                                        
    BYTE bReserve[2];                                      
    BYTE bSigCount;                                        
    DH_SIG_CARWAY_INFO stuSigInfo[DH_MAX_SNAP_SIGNAL_NUM]; 
    BYTE bReserved[12];                                    
} DH_CARWAY_INFO;
typedef struct
{
    BYTE bCount;             
    BYTE bIndex;             
    BYTE bFileTag;           
    BYTE bFileType;          
    NET_TIME_EX stuFileTime; 
    DWORD nGroupId;          
} DH_EVENT_FILE_INFO;
typedef struct
{
    unsigned short snWidth; 
    unsigned short snHight; 
} DH_RESOLUTION_INFO;
typedef struct tagDH_COLOR_RGBA
{
    int nRed;   
    int nGreen; 
    int nBlue;  
    int nAlpha; 
} DH_COLOR_RGBA, NET_COLOR_RGBA;
#define NET_COUNTRY_LENGTH 3        
#define NET_COMMENT_LENGTH 100      
#define NET_GROUPID_LENGTH 64       
#define NET_GROUPNAME_LENGTH 128    
#define NET_FEATUREVALUE_LENGTH 128 
typedef enum tagEM_DEV_EVENT_FACEDETECT_FEATURE_TYPE
{
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_UNKNOWN,         
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_WEAR_GLASSES,    
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SMILE,           
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_ANGER,           
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SADNESS,         
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_DISGUST,         
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_FEAR,            
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SURPRISE,        
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_NEUTRAL,         
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_LAUGH,           
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_NOGLASSES,       
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_HAPPY,           
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_CONFUSED,        
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_SCREAM,          
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE_WEAR_SUNGLASSES, 
} EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE;
typedef struct tagFACERECOGNITION_PERSON_INFO
{
    char szPersonName[DH_MAX_NAME_LEN];                 
    WORD wYear;                                         
    BYTE byMonth;                                       
    BYTE byDay;                                         
    char szID[DH_MAX_PERSON_ID_LEN];                    
    BYTE bImportantRank;                                
    BYTE bySex;                                         
    WORD wFacePicNum;                                   
    DH_PIC_INFO szFacePicInfo[DH_MAX_PERSON_IMAGE_NUM]; 
    BYTE byType;                                        
    BYTE byIDType;                                      
    BYTE byGlasses;                                     
    BYTE byAge;                                         
    char szProvince[DH_MAX_PROVINCE_NAME_LEN];          
    char szCity[DH_MAX_CITY_NAME_LEN];                  
    char szPersonNameEx[DH_MAX_PERSON_NAME_LEN];        
    char szUID[DH_MAX_PERSON_ID_LEN];                   
    char szCountry[NET_COUNTRY_LENGTH];                 
    BYTE byIsCustomType;                                
    char* pszComment;                                   
    char* pszGroupID; 
    char* pszGroupName; 
    char* pszFeatureValue; 
    BYTE bGroupIdLen;                               
    BYTE bGroupNameLen;                             
    BYTE bFeatureValueLen;                          
    BYTE bCommentLen;                               
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion; 
} FACERECOGNITION_PERSON_INFO;
typedef enum tagEM_GLASSES_TYPE
{
    EM_GLASSES_UNKNOWN,  
    EM_GLASSES_SUNGLASS, 
    EM_GLASSES_GLASS,    
} EM_GLASSES_TYPE;
typedef enum tagEM_EYE_STATE_TYPE
{
    EM_EYE_STATE_UNKNOWN, 
    EM_EYE_STATE_NODISTI, 
    EM_EYE_STATE_CLOSE,   
    EM_EYE_STATE_OPEN,    
} EM_EYE_STATE_TYPE;
typedef enum tagEM_GLASS_STATE_TYPE
{
    EM_GLASS_STATE_TYPE_UNKNOWN,              
    EM_GLASS_STATE_TYPE_NOT_WEARING,          
    EM_GLASS_STATE_TYPE_CONVENTIONAL_GLASSES, 
    EM_GLASS_STATE_TYPE_SUN_GLASSES,          
    EM_GLASS_STATE_TYPE_BLACK_GLASSES,        
} EM_GLASS_STATE_TYPE;
typedef enum tagEM_MOUTH_STATE_TYPE
{
    EM_MOUTH_STATE_UNKNOWN, 
    EM_MOUTH_STATE_NODISTI, 
    EM_MOUTH_STATE_CLOSE,   
    EM_MOUTH_STATE_OPEN,    
} EM_MOUTH_STATE_TYPE;
typedef enum tagEM_BEARD_STATE_TYPE
{
    EM_BEARD_STATE_UNKNOWN,   
    EM_BEARD_STATE_NODISTI,   
    EM_BEARD_STATE_NOBEARD,   
    EM_BEARD_STATE_HAVEBEARD, 
} EM_BEARD_STATE_TYPE;
typedef enum tagEM_FACEDETECT_GLASSES_TYPE
{
    EM_FACEDETECT_GLASSES_UNKNOWN,    
    EM_FACEDETECT_WITH_GLASSES,       
    EM_FACEDETECT_WITHOUT_GLASSES,    
    EM_FACEDETECT_SUN_GLASSES,        
    EM_FACEDETECT_BLACKFRAME_GLASSES, 
} EM_FACEDETECT_GLASSES_TYPE;
typedef enum tagEM_PERSON_FEATURE_STATE
{
    EM_PERSON_FEATURE_UNKNOWN,     
    EM_PERSON_FEATURE_FAIL,        
    EM_PERSON_FEATURE_USEFUL,      
    EM_PERSON_FEATURE_CALCULATING, 
    EM_PERSON_FEATURE_UNUSEFUL,    
} EM_PERSON_FEATURE_STATE;
typedef enum tagEM_PERSON_FEATURE_ERRCODE
{
    EM_PERSON_FEATURE_ERRCODE_UNKNOWN,         
    EM_PERSON_FEATURE_ERRCODE_PIC_FORMAT,      
    EM_PERSON_FEATURE_ERRCODE_NO_FACE,         
    EM_PERSON_FEATURE_ERRCODE_MULTI_FACE,      
    EM_PERSON_FEATURE_ERRCODE_PIC_DECODE_FAIL, 
    EM_PERSON_FEATURE_ERRCODE_NOT_RECOMMEND,   
    EM_PERSON_FEATURE_ERRCODE_FACEDB_FAIL,     
    EM_PERSON_FEATURE_ERRCODE_GET_PICTURE,     
    EM_PERSON_FEATURE_ERRCODE_SYSTEM_ERROR,    
} EM_PERSON_FEATURE_ERRCODE;
#define DH_MAX_PERSON_INFO_LEN 64 
typedef struct tagCUSTOM_PERSON_INFO
{
    char szPersonInfo[DH_MAX_PERSON_INFO_LEN]; 
    BYTE byReserved[124];                      
} CUSTOM_PERSON_INFO;
typedef enum tagEM_REGISTER_DB_TYPE
{
    EM_REGISTER_DB_TYPE_UNKNOWN,   
    EM_REGISTER_DB_TYPE_NORMAL,    
    EM_REGISTER_DB_TYPE_BLACKLIST, 
    EM_REGISTER_DB_TYPE_WHITELIST, 
    EM_REGISTER_DB_TYPE_VIP,       
    EM_REGISTER_DB_TYPE_STAFF,     
    EM_REGISTER_DB_TYPE_LEADER,    
} EM_REGISTER_DB_TYPE;
typedef enum tagEM_PIC_OPERATE_TYPE
{
    EM_PIC_OPERATE_UNKNOWN, 
    EM_PIC_OPERATE_MODIFY,  
    EM_PIC_OPERATE_ADD,     
    EM_PIC_OPERATE_DEL,     
} EM_PIC_OPERATE_TYPE;
typedef struct tagNET_FACE_PIC_INFO
{
    DWORD dwOffSet;                             
    DWORD dwFileLenth;                          
    DWORD dwWidth;                              
    DWORD dwHeight;                             
    BOOL bIsDetected;                           
    int nFilePathLen;                           
    char* pszFilePath;                          
    char szPictureID[32];                       
    EM_PERSON_FEATURE_STATE emFeatureState;     
    EM_PERSON_FEATURE_ERRCODE emFeatureErrCode; 
    EM_PIC_OPERATE_TYPE emPicOperate;           
    BYTE bReserved[20];                         
} NET_FACE_PIC_INFO;
typedef struct tagNET_PERSON_FEATURE_VALUE_INFO
{
    UINT nOffset;         
    UINT nLength;         
    BYTE byReserved[128]; 
} NET_PERSON_FEATURE_VALUE_INFO;
typedef enum tagEM_FREQUENCY_ALARM_TYPE
{
    EM_FREQUENCY_ALARM_UNKNOWN = -1, 
    EM_FREQUENCY_ALARM_HIGH,         
    EM_FREQUENCY_ALARM_LOW,          
} EM_FREQUENCY_ALARM_TYPE;
typedef struct tagNET_PERSON_FREQUENCY_INFO
{
    EM_FREQUENCY_ALARM_TYPE emAlarmType; 
    int nTimes;                          
    char szReserved[128];                
} NET_PERSON_FREQUENCY_INFO;
#define DH_MAX_CUSTOM_PERSON_INFO_NUM 4 
typedef struct tagFACERECOGNITION_CUSTOM_PASSER_BY_INFO
{
    int nStorageAddrChannel;        
    int nStoragePresetID;           
    NET_TIME stuStorageTime;        
    NET_TIME stuLastAppearTime;     
    int nLastAppearAddrChannel;     
    int nLastAppearPresetID;        
    unsigned int nOccurrenceNumber; 
    char szReserved[1020];          
} FACERECOGNITION_CUSTOM_PASSER_BY_INFO;
typedef struct tagFACERECOGNITION_PERSON_INFOEX
{
    char szPersonName[DH_MAX_PERSON_NAME_LEN];          
    WORD wYear;                                         
    BYTE byMonth;                                       
    BYTE byDay;                                         
    BYTE bImportantRank;                                
    BYTE bySex;                                         
    char szID[DH_MAX_PERSON_ID_LEN];                    
    WORD wFacePicNum;                                   
    DH_PIC_INFO szFacePicInfo[DH_MAX_PERSON_IMAGE_NUM]; 
    BYTE byType;                                        
    BYTE byIDType;                                      
    BYTE byGlasses;                                     
    BYTE byAge;                                         
    char szProvince[DH_MAX_PROVINCE_NAME_LEN];          
    char szCity[DH_MAX_CITY_NAME_LEN];                  
    char szUID[DH_MAX_PERSON_ID_LEN];                   
    char szCountry[NET_COUNTRY_LENGTH];                 
    BYTE byIsCustomType;                                
    char szCustomType[DH_COMMON_STRING_16];             
    char szComment[NET_COMMENT_LENGTH];                 
    char szGroupID[NET_GROUPID_LENGTH];                 
    char szGroupName[NET_GROUPNAME_LENGTH];             
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion;     
    char szHomeAddress[DH_COMMON_STRING_128];           
    EM_GLASSES_TYPE emGlassesType;                      
    char szReserved1[4];
    EM_EYE_STATE_TYPE emEye;                                                        
    EM_MOUTH_STATE_TYPE emMouth;                                                    
    EM_MASK_STATE_TYPE emMask;                                                      
    EM_BEARD_STATE_TYPE emBeard;                                                    
    int nAttractive;                                                                
    EM_PERSON_FEATURE_STATE emFeatureState;                                         
    BOOL bAgeEnable;                                                                
    int nAgeRange[2];                                                               
    int nEmotionValidNum;                                                           
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotions[DH_MAX_FACEDETECT_FEATURE_NUM]; 
    int nCustomPersonInfoNum;                                                       
    CUSTOM_PERSON_INFO szCustomPersonInfo[DH_MAX_CUSTOM_PERSON_INFO_NUM];           
    EM_REGISTER_DB_TYPE emRegisterDbType;                                           
    NET_TIME stuEffectiveTime;                                                      
    EM_PERSON_FEATURE_ERRCODE emFeatureErrCode;                                     
    DWORD wFacePicNumEx;                                                            
    NET_FACE_PIC_INFO szFacePicInfoEx[6];                                           
    NET_PERSON_FEATURE_VALUE_INFO stuPersonFeatureValue;                            
    BOOL bFrozenStatus;                                                             
    char szReserved[4];                                                             
    NET_PERSON_FREQUENCY_INFO stuFrequencyInfo;                                     
    char szUUID[64];                                                                
    FACERECOGNITION_CUSTOM_PASSER_BY_INFO* pstuCustomPasserbyInfo;                  
    BYTE byReserved[188 - POINTERSIZE];                                             
} FACERECOGNITION_PERSON_INFOEX;
typedef struct tagCANDIDATE_INFO
{
    FACERECOGNITION_PERSON_INFO stPersonInfo; 
    BYTE bySimilarity; 
    BYTE byRange;      
    BYTE byReserved1[2];
    NET_TIME stTime;               
    char szAddress[MAX_PATH];      
    BOOL bIsHit;                   
    DH_PIC_INFO_EX3 stuSceneImage; 
    int nChannelID;                
    char szChannelString[32];      
} CANDIDATE_INFO;
typedef enum tagEM_CLOTHES_COLOR
{
    EM_CLOTHES_COLOR_UNKNOWN,        
    EM_CLOTHES_COLOR_WHITE,          
    EM_CLOTHES_COLOR_ORANGE,         
    EM_CLOTHES_COLOR_PINK,           
    EM_CLOTHES_COLOR_BLACK,          
    EM_CLOTHES_COLOR_RED,            
    EM_CLOTHES_COLOR_YELLOW,         
    EM_CLOTHES_COLOR_GRAY,           
    EM_CLOTHES_COLOR_BLUE,           
    EM_CLOTHES_COLOR_GREEN,          
    EM_CLOTHES_COLOR_PURPLE,         
    EM_CLOTHES_COLOR_BROWN,          
    EM_CLOTHES_COLOR_DARKORANGE,     
    EM_CLOTHES_COLOR_OTHER,          
    EM_CLOTHES_COLOR_SILVER,         
    EM_CLOTHES_COLOR_DARKVIOLET,     
    EM_CLOTHES_COLOR_MARRON,         
    EM_CLOTHES_COLOR_DIMGRAY,        
    EM_CLOTHES_COLOR_WHITESMOKE,     
    EM_CLOTHES_COLOR_MISTYROSE,      
    EM_CLOTHES_COLOR_TOMATO,         
    EM_CLOTHES_COLOR_OLIVE,          
    EM_CLOTHES_COLOR_GLOD,           
    EM_CLOTHES_COLOR_DARKOLIVEGREEN, 
    EM_CLOTHES_COLOR_CHARTREUSE,     
    EM_CLOTHES_COLOR_GREENYELLOW,    
    EM_CLOTHES_COLOR_FORESTGREEN,    
    EM_CLOTHES_COLOR_SEAGREEN,       
    EM_CLOTHES_COLOR_DEEPSKYBLUE,    
    EM_CLOTHES_COLOR_CYAN,           
    EM_CLOTHES_COLOR_LIGHTGREEN,     
} EM_CLOTHES_COLOR;
typedef enum tagEM_COAT_TYPE
{
    EM_COAT_TYPE_UNKNOWN,     
    EM_COAT_TYPE_LONG_SLEEVE, 
    EM_COAT_TYPE_COTTA,       
    EM_COAT_TYPE_SLEEVELESS,  
} EM_COAT_TYPE;
typedef enum tagEM_TROUSERS_TYPE
{
    EM_TROUSERS_TYPE_UNKNOWN,  
    EM_TROUSERS_TYPE_TROUSERS, 
    EM_TROUSERS_TYPE_SHORTS,   
    EM_TROUSERS_TYPE_SKIRT,    
} EM_TROUSERS_TYPE;
typedef enum tagEM_HAS_HAT
{
    EM_HAS_HAT_UNKNOWN, 
    EM_HAS_HAT_NO,      
    EM_HAS_HAT_YES,     
} EM_HAS_HAT;
typedef enum tagEM_HAS_BAG
{
    EM_HAS_BAG_UNKNOWN, 
    EM_HAS_BAG_NO,      
    EM_HAS_BAG_YES,     
} EM_HAS_BAG;
typedef enum tagEM_HAS_BACK_BAG
{
    EM_HAS_BACK_BAG_UNKNOWN, 
    EM_HAS_BACK_BAG_NO,      
    EM_HAS_BACK_BAG_YES,     
} EM_HAS_BACK_BAG;
typedef enum tagEM_HAS_CARRIER_BAG
{
    EM_HAS_CARRIER_BAG_UNKNOWN, 
    EM_HAS_CARRIER_BAG_NO,      
    EM_HAS_CARRIER_BAG_YES,     
} EM_HAS_CARRIER_BAG;
typedef enum tagEM_HAS_SHOULDER_BAG
{
    EM_HAS_SHOULDER_BAG_UNKNOWN, 
    EM_HAS_SHOULDER_BAG_NO,      
    EM_HAS_SHOULDER_BAG_YES,     
} EM_HAS_SHOULDER_BAG;
typedef enum tagEM_HAS_MESSENGER_BAG
{
    EM_HAS_MESSENGER_BAG_UNKNOWN, 
    EM_HAS_MESSENGER_BAG_NO,      
    EM_HAS_MESSENGER_BAG_YES,     
} EM_HAS_MESSENGER_BAG;
typedef enum tagEM_ANGLE_TYPE
{
    EM_ANGLE_UNKNOWN = 0, 
    EM_ANGLE_FRONT,       
    EM_ANGLE_SIDE,        
    EM_ANGLE_BACK,        
} EM_ANGLE_TYPE;
typedef enum tagEM_HAS_UMBRELLA
{
    EM_HAS_UMBRELLA_UNKNOWN, 
    EM_HAS_UMBRELLA_NO,      
    EM_HAS_UMBRELLA_YES,     
} EM_HAS_UMBRELLA;
typedef enum tagEM_BAG_TYPE
{
    EM_BAG_UNKNOWN,     
    EM_BAG_HANDBAG,     
    EM_BAG_SHOULDERBAG, 
    EM_BAG_KNAPSACK,    
    EM_BAG_DRAWBARBOX,  
    EM_BAG_WAISTPACK,   
    EM_BAG_NONE,        
} EM_BAG_TYPE;
typedef enum tagEM_CAP_TYPE
{
    EM_CAP_UNKNOWN,  
    EM_CAP_ORDINARY, 
    EM_CAP_HELMET,   
    EM_CAP_SAFE,     
} EM_CAP_TYPE;
typedef enum tagEM_CLOTHES_PATTERN
{
    EM_CLOTHES_PATTERN_UNKNOWN,   
    EM_CLOTHES_PATTERN_PURE,      
    EM_CLOTHES_PATTERN_STRIPE,    
    EM_CLOTHES_PATTERN_PATTERN,   
    EM_CLOTHES_PATTERN_GAP,       
    EM_CLOTHES_PATTERN_LATTICE,   
    EM_CLOTHES_PATTERN_SPLITJOIN, 
    EM_CLOTHES_PATTERN_FLORAL,    
} EM_CLOTHES_PATTERN;
typedef enum tagEM_HAIR_STYLE
{
    EM_HAIR_UNKNOWN = 0,  
    EM_HAIR_LONG_HAIR,    
    EM_HAIR_SHORT_HAIR,   
    EM_HAIR_PONYTAIL,     
    EM_HAIR_UPDO,         
    EM_HAIR_HEAD_BLOCKED, 
    EM_HAIR_NONE,         
} EM_HAIR_STYLE;
typedef struct tagNET_HISTORY_HUMAN_IMAGE_INFO
{
    int nLength;          
    int nWidth;           
    int nHeight;          
    char szFilePath[260]; 
} NET_HISTORY_HUMAN_IMAGE_INFO;
typedef struct tagNET_HISTORY_HUMAN_INFO
{
    EM_CLOTHES_COLOR emCoatColor;                  
    EM_COAT_TYPE emCoatType;                       
    EM_CLOTHES_COLOR emTrousersColor;              
    EM_TROUSERS_TYPE emTrousersType;               
    EM_HAS_HAT emHasHat;                           
    EM_HAS_BAG emHasBag;                           
    NET_RECT stuBoundingBox;                       
    int nAge;                                      
    EM_SEX_TYPE emSex;                             
    EM_ANGLE_TYPE emAngle;                         
    EM_HAS_UMBRELLA emHasUmbrella;                 
    EM_BAG_TYPE emBag;                             
    EM_CLOTHES_PATTERN emUpperPattern;             
    EM_HAIR_STYLE emHairStyle;                     
    EM_CAP_TYPE emCap;                             
    EM_HAS_BACK_BAG emHasBackBag;                  
    EM_HAS_CARRIER_BAG emHasCarrierBag;            
    EM_HAS_SHOULDER_BAG emHasShoulderBag;          
    EM_HAS_MESSENGER_BAG emMessengerBag;           
    NET_HISTORY_HUMAN_IMAGE_INFO stuImageInfo;     
    NET_HISTORY_HUMAN_IMAGE_INFO stuFaceImageInfo; 
    BYTE byReserved[256];                          
} NET_HISTORY_HUMAN_INFO;
typedef struct tagCANDIDATE_INFOEX
{
    FACERECOGNITION_PERSON_INFOEX stPersonInfo; 
    BYTE bySimilarity; 
    BYTE byRange;      
    BYTE byReserved1[2];
    NET_TIME stTime;                            
    char szAddress[MAX_PATH];                   
    BOOL bIsHit;                                
    DH_PIC_INFO_EX3 stuSceneImage;              
    int nChannelID;                             
    char szFilePathEx[256];                     
    NET_HISTORY_HUMAN_INFO stuHistoryHumanInfo; 
    char szChannelString[32];                   
    BYTE byReserved[104];                       
} CANDIDATE_INFOEX;
typedef enum tagEM_CLASS_TYPE
{
    EM_CLASS_UNKNOWN = 0,            
    EM_CLASS_VIDEO_SYNOPSIS = 1,     
    EM_CLASS_TRAFFIV_GATE = 2,       
    EM_CLASS_ELECTRONIC_POLICE = 3,  
    EM_CLASS_SINGLE_PTZ_PARKING = 4, 
    EM_CLASS_PTZ_PARKINBG = 5,       
    EM_CLASS_TRAFFIC = 6,            
    EM_CLASS_NORMAL = 7,             
    EM_CLASS_PS = 8,
    EM_CLASS_ATM = 9,                     
    EM_CLASS_METRO = 10,                  
    EM_CLASS_FACE_DETECTION = 11,         
    EM_CLASS_FACE_RECOGNITION = 12,       
    EM_CLASS_NUMBER_STAT = 13,            
    EM_CLASS_HEAT_MAP = 14,               
    EM_CLASS_VIDEO_DIAGNOSIS = 15,        
    EM_CLASS_VIDEO_ENHANCE = 16,          
    EM_CLASS_SMOKEFIRE_DETECT = 17,       
    EM_CLASS_VEHICLE_ANALYSE = 18,        
    EM_CLASS_PERSON_FEATURE = 19,         
    EM_CLASS_SDFACEDETECTION = 20,        
    EM_CLASS_HEAT_MAP_PLAN = 21,          
    EM_CLASS_NUMBERSTAT_PLAN = 22,        
    EM_CLASS_ATMFD = 23,                  
    EM_CLASS_HIGHWAY = 24,                
    EM_CLASS_CITY = 25,                   
    EM_CLASS_LETRACK = 26,                
    EM_CLASS_SCR = 27,                    
    EM_CLASS_STEREO_VISION = 28,          
    EM_CLASS_HUMANDETECT = 29,            
    EM_CLASS_FACE_ANALYSIS = 30,          
    EM_CALSS_XRAY_DETECTION = 31,         
    EM_CLASS_STEREO_NUMBER = 32,          
    EM_CLASS_CROWDDISTRIMAP = 33,         
    EM_CLASS_OBJECTDETECT = 34,           
    EM_CLASS_FACEATTRIBUTE = 35,          
    EM_CLASS_FACECOMPARE = 36,            
    EM_CALSS_STEREO_BEHAVIOR = 37,        
    EM_CALSS_INTELLICITYMANAGER = 38,     
    EM_CALSS_PROTECTIVECABIN = 39,        
    EM_CALSS_AIRPLANEDETECT = 40,         
    EM_CALSS_CROWDPOSTURE = 41,           
    EM_CLASS_PHONECALLDETECT = 42,        
    EM_CLASS_SMOKEDETECTION = 43,         
    EM_CLASS_BOATDETECTION = 44,          
    EM_CLASS_SMOKINGDETECT = 45,          
    EM_CLASS_WATERMONITOR = 46,           
    EM_CLASS_GENERATEGRAPHDETECTION = 47, 
    EM_CLASS_TRAFFIC_PARK = 48,           
    EM_CLASS_OPERATEMONITOR = 49,         
    EM_CLASS_INTELLI_RETAIL = 50,         
    EM_CLASS_CLASSROOM_ANALYSE = 51,      
    EM_CLASS_FEATURE_ABSTRACT = 52,       
    EM_CLASS_FACEBODY_DETECT = 53,        
    EM_CLASS_FACEBODY_ANALYSE = 54,       
    EM_CLASS_VEHICLES_DISTRI = 55,        
    EM_CLASS_INTELLI_BREED = 56,          
    EM_CLASS_INTELLI_PS = 57,
    EM_CLASS_ELECTRIC_DETECT = 58,         
    EM_CLASS_RADAR_DETECT = 59,            
    EM_CLASS_PARKINGSPACE = 60,            
    EM_CLASS_INTELLI_FINANCE = 61,         
    EM_CLASS_CROWD_ABNORMAL = 62,          
    EM_CLASS_ANATOMY_TEMP_DETECT = 63,     
    EM_CLASS_WEATHER_MONITOR = 64,         
    EM_CLASS_ELEVATOR_ACCESS_CONTROL = 65, 
    EM_CLASS_BREAK_RULE_BUILDING = 66,     
    EM_CLASS_FOREIGN_DETECT = 67,          
    EM_CLASS_PANORAMA_TRAFFIC = 68,        
    EM_CLASS_CONVEY_OR_BLOCK = 69,      
    EM_CLASS_KITCHEN_ANIMAL = 70,       
    EM_CLASS_ALLSEEINGEYE = 71,         
    EM_CLASS_INTELLI_FIRE_CONTROL = 72, 
    EM_CLASS_CONVERYER_BELT = 73,       
    EM_CLASS_INTELLI_LOGISTICS = 74,    
    EM_CLASS_SMOKE_FIRE = 75,           
    EM_CLASS_OBJECT_MONITOR = 76,       
    EM_CLASS_INTELLI_PARKING = 77,      
    EM_CLASS_FIRE_CONTROL = 78,         
    EM_CLASS_ANIMAL_DETECTION = 79,     
    EM_CLASS_FIRE_CONTROL_MONITOR = 80, 
    EM_CLASS_FISH_MONITOR = 81,         
    EM_CLASS_SHOPTRUCK_DETECT = 82,     
} EM_CLASS_TYPE;
typedef enum tagEM_SCENE_CLASS_TYPE
{
    EM_SCENE_CLASS_UNKNOW,          
    EM_SCENE_CLASS_NORMAL,          
    EM_SCENE_CLASS_TRAFFIC,         
    EM_SCENE_CLASS_TRAFFIC_PATROL,  
    EM_SCENE_CLASS_FACEDETECTION,   
    EM_SCENE_CLASS_ATM,             
    EM_SENCE_CLASS_INDOOR,          
    EM_SENCE_CLASS_FACERECOGNITION, 
    EM_SENCE_CLASS_PS,
    EM_SENCE_CLASS_NUMBERSTAT,             
    EM_SENCE_CLASS_HEAT_MAP,               
    EM_SENCE_CLASS_VIDEODIAGNOSIS,         
    EM_SENCE_CLASS_VEHICLEANALYSE,         
    EM_SENCE_CLASS_COURSERECORD,           
    EM_SENCE_CLASS_VEHICLE,                
    EM_SENCE_CLASS_STANDUPDETECTION,       
    EM_SCENE_CLASS_GATE,                   
    EM_SCENE_CLASS_SDFACEDETECTION,        
    EM_SCENE_CLASS_HEAT_MAP_PLAN,          
    EM_SCENE_CLASS_NUMBERSTAT_PLAN,        
    EM_SCENE_CLASS_ATMFD,                  
    EM_SCENE_CLASS_HIGHWAY,                
    EM_SCENE_CLASS_CITY,                   
    EM_SCENE_CLASS_LETRACK,                
    EM_SCENE_CLASS_SCR,                    
    EM_SCENE_CLASS_STEREO_VISION,          
    EM_SCENE_CLASS_HUMANDETECT,            
    EM_SCENE_CLASS_FACEANALYSIS,           
    EM_SCENE_CLASS_XRAY_DETECTION,         
    EM_SCENE_CLASS_STEREO_NUMBER,          
    EM_SCENE_CLASS_CROWDDISTRIMAP,         
    EM_SCENE_CLASS_OBJECTDETECT,           
    EM_SCENE_CLASS_FACEATTRIBUTE,          
    EM_SCENE_CLASS_FACECOMPARE,            
    EM_SCENE_CLASS_STEREO_BEHAVIOR,        
    EM_SCENE_CLASS_INTELLICITYMANAGER,     
    EM_SCENE_CLASS_PROTECTIVECABIN,        
    EM_SCENE_CLASS_AIRPLANEDETECT,         
    EM_SCENE_CLASS_CROWDPOSTURE,           
    EM_SCENE_CLASS_PHONECALLDETECT,        
    EM_SCENE_CLASS_SMOKEDETECTION,         
    EM_SCENE_CLASS_BOATDETECTION,          
    EM_SCENE_CLASS_SMOKINGDETECT,          
    EM_SCENE_CLASS_WATERMONITOR,           
    EM_SCENE_CLASS_GENERATEGRAPHDETECTION, 
    EM_SCENE_CLASS_TRAFFIC_PARK,           
    EM_SCENE_CLASS_OPERATEMONITOR,         
    EM_SCENE_CLASS_INTELLI_RETAIL,         
    EM_SCENE_CLASS_CLASSROOM_ANALYSE,      
    EM_SCENE_CLASS_FEATURE_ABSTRACT,       
    EM_SCENE_CLASS_FACEBODY_DETECT,        
    EM_SCENE_CLASS_FACEBODY_ANALYSE,       
    EM_SCENE_CLASS_VEHICLES_DISTRI,        
    EM_SCENE_CLASS_INTELLI_BREED,          
    EM_SCENE_CLASS_INTELLI_PS,
    EM_SCENE_CLASS_ELECTRIC_DETECT,         
    EM_SCENE_CLASS_RADAR_DETECT,            
    EM_SCENE_CLASS_PARKINGSPACE,            
    EM_SCENE_CLASS_INTELLI_FINANCE,         
    EM_SCENE_CLASS_CROWD_ABNORMAL,          
    EM_SCENE_CLASS_ANATOMYTEMP_DETECT,      
    EM_SCENE_CLASS_WEATHER_MONITOR,         
    EM_SCENE_CLASS_ELEVATOR_ACCESS_CONTROL, 
    EM_SCENE_CLASS_BREAK_RULE_BUILDING,     
    EM_SCENE_CLASS_PANORAMA_TRAFFIC,        
    EM_SCENE_CLASS_PORTRAIT_DETECT,         
    EM_SCENE_CLASS_CONVEY_OR_BLOCK,         
    EM_SCENE_CLASS_KITCHEN_ANIMAL,          
    EM_SCENE_CLASS_ALLSEEINGEYE,            
    EM_SCENE_CLASS_DRIVE,                   
    EM_SCENE_CLASS_DRIVEASSISTANT,          
    EM_SCENE_CLASS_INCABINMONITOR,          
    EM_SCENE_CLASS_BLINDSPOTDETECTION,      
    EM_SCENE_CLASS_CONVERYER_BELT,          
    EM_SCENE_CLASS_INTELLI_LOGISTICS,       
    EM_SCENE_CLASS_SMOKE_FIRE,              
    EM_SCENE_CLASS_OBJECT_MONITOR,          
    EM_SCENE_CLASS_FIRE_FACILITIES,         
    EM_SCENE_CLASS_FIRE_CONTROL,            
    EM_SCENE_CLASS_INTELLI_PARKING,         
    EM_SCENE_CLASS_FINANCE_REGULATION,      
    EM_SCENE_CLASS_ENERGY,                  
    EM_SCENE_CLASS_FIRE_CONTROL_EX,         
    EM_SCENE_CLASS_ANIMAL_DETECTION,        
    EM_SCENE_CLASS_FIRE_CONTROL_MONITOR,    
    EM_SCENE_CLASS_PROTECTIVE_SUIT,         
    EM_SCENE_CLASS_FISH_MONITOR,            
    EM_SCENE_CLASS_SHOPTRUCK_DETECT,        
} EM_SCENE_CLASS_TYPE;
typedef struct tagEVENT_INTELLI_COMM_INFO
{
    EM_CLASS_TYPE emClassType; 
    int nPresetID;             
    BYTE bReserved[124];       
} EVENT_INTELLI_COMM_INFO;
typedef struct tagNET_INTELLIGENCE_IMAGE_INFO
{
    UINT nOffSet;        
    UINT nLength;        
    UINT nWidth;         
    UINT nHeight;        
    UINT nIndexInData;   
    BYTE byReserved[44]; 
} NET_INTELLIGENCE_IMAGE_INFO;
typedef struct tagEVENT_TRAFFIC_CAR_PART_INFO
{
    char szMachineName[128]; 
    char szRoadwayNo[32];    
    char szPlateNumber[32];  
    char szCategory[32];     
    BYTE bReserved[288];     
} EVENT_TRAFFIC_CAR_PART_INFO;
typedef enum tagEM_TRAFFICCAR_MOVE_DIRECTION
{
    EM_TRAFFICCAR_MOVE_DIRECTION_UNKNOWN,     
    EM_TRAFFICCAR_MOVE_DIRECTION_STRAIGHT,    
    EM_TRAFFICCAR_MOVE_DIRECTION_TURN_LEFT,   
    EM_TRAFFICCAR_MOVE_DIRECTION_TURN_RIGHT,  
    EM_TRAFFICCAR_MOVE_DIRECTION_TURN_AROUND, 
} EM_TRAFFICCAR_MOVE_DIRECTION;
typedef struct tagNET_WHITE_LIST_AUTHORITY_LIST
{
    BOOL bOpenGate;     
    BYTE bReserved[16]; 
} NET_WHITE_LIST_AUTHORITY_LIST;
typedef struct tagNET_TRAFFICCAR_WHITE_LIST
{
    BOOL bTrustCar;                                 
    NET_TIME stuBeginTime;                          
    NET_TIME stuCancelTime;                         
    NET_WHITE_LIST_AUTHORITY_LIST stuAuthorityList; 
    BYTE bReserved[32];                             
} NET_TRAFFICCAR_WHITE_LIST;
typedef struct tagNET_TRAFFICCAR_BLACK_LIST
{
    BOOL bEnable;                                  
    BOOL bIsBlackCar;                              
    NET_TIME stuBeginTime;                         
    NET_TIME stuCancelTime;                        
    EM_NET_TRAFFIC_CAR_CONTROL_TYPE emControlType; 
    UINT nControlledRouteID;                       
    BYTE bReserved[24];                            
} NET_TRAFFICCAR_BLACK_LIST;
typedef enum tagEM_TRAFFICCAR_CAR_TYPE
{
    EM_TRAFFICCAR_CAR_TYPE_UNKNOWN,        
    EM_TRAFFICCAR_CAR_TYPE_TRUST_CAR,      
    EM_TRAFFICCAR_CAR_TYPE_SUSPICIOUS_CAR, 
    EM_TRAFFICCAR_CAR_TYPE_NORMAL_CAR,     
} EM_TRAFFICCAR_CAR_TYPE;
typedef enum tagEM_TRAFFICCAR_LANE_TYPE
{
    EM_TRAFFICCAR_LANE_TYPE_UNKNOWN,    
    EM_TRAFFICCAR_LANE_TYPE_NORMAL,     
    EM_TRAFFICCAR_LANE_TYPE_NONMOTOR,   
    EM_TRAFFICCAR_LANE_TYPE_LIGHT_DUTY, 
    EM_TRAFFICCAR_LANE_TYPE_BUS,        
    EM_TRAFFICCAR_LANE_TYPE_EMERGENCY,  
    EM_TRAFFICCAR_LANE_TYPE_DANGEROUS,  
    EM_TRAFFICCAR_LANE_TYPE_TIDAL,      
} EM_TRAFFICCAR_LANE_TYPE;
typedef enum tagEM_VEHICLE_DIRECTION
{
    NET_VEHICLE_DIRECTION_UNKOWN,      
    NET_VEHICLE_DIRECTION_HEAD,        
    NET_VEHICLE_DIRECTION_TAIL,        
    NET_VEHICLE_DIRECTION_VEHBODYSIDE, 
} EM_VEHICLE_DIRECTION;
typedef enum tagEM_TOLLS_VEHICLE_TYPE
{
    EM_TOLLS_VEHICLE_TYPE_UNKNOWN,                 
    EM_TOLLS_VEHICLE_TYPE_PASSENGER_CAR1,          
    EM_TOLLS_VEHICLE_TYPE_PASSENGER_CAR2,          
    EM_TOLLS_VEHICLE_TYPE_PASSENGER_CAR3,          
    EM_TOLLS_VEHICLE_TYPE_PASSENGER_CAR4,          
    EM_TOLLS_VEHICLE_TYPE_TRUCK1 = 11,             
    EM_TOLLS_VEHICLE_TYPE_TRUCK2,                  
    EM_TOLLS_VEHICLE_TYPE_TRUCK3,                  
    EM_TOLLS_VEHICLE_TYPE_TRUCK4,                  
    EM_TOLLS_VEHICLE_TYPE_TRUCK5,                  
    EM_TOLLS_VEHICLE_TYPE_TRUCK6 = 16,             
    EM_TOLLS_VEHICLE_TYPE_OPERATION_VEHICLE1 = 21, 
    EM_TOLLS_VEHICLE_TYPE_OPERATION_VEHICLE2,      
    EM_TOLLS_VEHICLE_TYPE_OPERATION_VEHICLE3,      
    EM_TOLLS_VEHICLE_TYPE_OPERATION_VEHICLE4,      
    EM_TOLLS_VEHICLE_TYPE_OPERATION_VEHICLE5,      
    EM_TOLLS_VEHICLE_TYPE_OPERATION_VEHICLE6 = 26, 
} EM_TOLLS_VEHICLE_TYPE;
typedef struct tagNET_TRAFFICCAR_ORIGINAL_VEHICLE
{
    UINT nOffset;        
    UINT nLength;        
    UINT nIndexInData;   
    char szReserved[60]; 
} NET_TRAFFICCAR_ORIGINAL_VEHICLE;
typedef enum tagEM_VEHICLE_TYPE_BY_FUNC
{
    EM_VEHICLE_TYPE_BY_FUNC_UNKNOWN, 
    EM_VEHICLE_TYPE_BY_FUNC_TANK_CAR,             
    EM_VEHICLE_TYPE_BY_FUNC_SLOT_TANK_CAR,        
    EM_VEHICLE_TYPE_BY_FUNC_DREGS_CAR,            
    EM_VEHICLE_TYPE_BY_FUNC_CONCRETE_MIXER_TRUCK, 
    EM_VEHICLE_TYPE_BY_FUNC_TAXI,                 
    EM_VEHICLE_TYPE_BY_FUNC_POLICE,               
    EM_VEHICLE_TYPE_BY_FUNC_AMBULANCE,            
    EM_VEHICLE_TYPE_BY_FUNC_GENERAL,              
    EM_VEHICLE_TYPE_BY_FUNC_WATERING_CAR,         
    EM_VEHICLE_TYPE_BY_FUNC_FIRE_ENGINE,          
    EM_VEHICLE_TYPE_BY_FUNC_MACHINESHOP_TRUCK,    
    EM_VEHICLE_TYPE_BY_FUNC_POWER_LOT_VEHICLE,    
    EM_VEHICLE_TYPE_BY_FUNC_SUCTION_SEWAGE_TRUCK, 
    EM_VEHICLE_TYPE_BY_FUNC_NORMAL_TANK_TRUCK,    
    EM_VEHICLE_TYPE_BY_FUNC_SCHOOL_BUS,           
    EM_VEHICLE_TYPE_BY_FUNC_EXCAVATOR,            
    EM_VEHICLE_TYPE_BY_FUNC_BULLDOZER,            
    EM_VEHICLE_TYPE_BY_FUNC_CRANE,                
    EM_VEHICLE_TYPE_BY_FUNC_PUMP_TRUCK,           
    EM_VEHICLE_TYPE_BY_FUNC_POULTRY,              
    EM_VEHICLE_TYPE_BY_FUNC_TRACTOR,              
} EM_VEHICLE_TYPE_BY_FUNC;
typedef enum tagEM_PLATE_ATTRIBUTE
{
    EM_PLATE_ATTRIBUTE_UNKNOWN,           
    EM_PLATE_ATTRIBUTE_NORMAL,            
    EM_PLATE_ATTRIBUTE_NO_PLATE,          
    EM_PLATE_ATTRIBUTE_PARTIAL_OCCLUSION, 
    EM_PLATE_ATTRIBUTE_FULL_OCCLUSION,    
} EM_PLATE_ATTRIBUTE;
typedef struct tagDEV_EVENT_TRAFFIC_TRAFFICCAR_INFO
{
    char szPlateNumber[32];                              
    char szPlateType[32];                                
    char szPlateColor[32];                               
    char szVehicleColor[32];                             
    int nSpeed;                                          
    char szEvent[64];                                    
    char szViolationCode[32];                            
    char szViolationDesc[64];                            
    int nLowerSpeedLimit;                                
    int nUpperSpeedLimit;                                
    int nOverSpeedMargin;                                
    int nUnderSpeedMargin;                               
    int nLane;                                           
    int nVehicleSize;                                    
    float fVehicleLength;                                
    int nSnapshotMode;                                   
    char szChannelName[32];                              
    char szMachineName[256];                             
    char szMachineGroup[256];                            
    char szRoadwayNo[64];                                
    char szDrivingDirection[3][DH_MAX_DRIVINGDIRECTION]; 
    char* szDeviceAddress;                               
    char szVehicleSign[32];                              
    DH_SIG_CARWAY_INFO_EX stuSigInfo;                    
    char* szMachineAddr;                                 
    float fActualShutter;                                
    BYTE byActualGain;                                   
    BYTE byDirection;                                    
    BYTE byReserved[2];
    char* szDetailedAddress;                      
    char szDefendCode[DH_COMMON_STRING_64];       
    int nTrafficBlackListID;                      
    DH_COLOR_RGBA stuRGBA;                        
    NET_TIME stSnapTime;                          
    int nRecNo;                                   
    char szCustomParkNo[DH_COMMON_STRING_32 + 1]; 
    BYTE byReserved1[3];
    int nDeckNo;                       
    int nFreeDeckCount;                
    int nFullDeckCount;                
    int nTotalDeckCount;               
    char szViolationName[64];          
    unsigned int nWeight;              
    char szCustomRoadwayDirection[32]; 
    BYTE byPhysicalLane;               
    BYTE byReserved2[3];
    EM_TRAFFICCAR_MOVE_DIRECTION emMovingDirection;     
    NET_TIME stuEleTagInfoUTC;                          
    NET_RECT stuCarWindowBoundingBox;                   
    NET_TRAFFICCAR_WHITE_LIST stuWhiteList;             
    EM_TRAFFICCAR_CAR_TYPE emCarType;                   
    EM_TRAFFICCAR_LANE_TYPE emLaneType;                 
    char szVehicleBrandYearText[64];                    
    char szCategory[32];                                
    NET_TRAFFICCAR_BLACK_LIST stuBlackList;             
    EM_VEHICLE_DIRECTION emFlowDirection;               
    EM_TOLLS_VEHICLE_TYPE emTollsVehicleType;           
    UINT nAxleType;                                     
    UINT nAxleCount;                                    
    UINT nWheelNum;                                     
    NET_TRAFFICCAR_ORIGINAL_VEHICLE stuOriginalVehicle; 
    EM_VEHICLE_TYPE_BY_FUNC emVehicleTypeByFunc;        
    unsigned short nSunBrand;                           
    unsigned short nBrandYear;                          
    int nTrafficLightType;                              
    EM_PLATE_ATTRIBUTE emPlateAttribute;                
    BYTE bReserved[132];                                
} DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO;
#ifndef LINUX64_JNA
#pragma pack(push)
#pragma pack(4)
#endif
typedef struct tagNET_GPS_INFO
{
    unsigned int nLongitude; 
    unsigned int nLatidude;  
    double dbAltitude;       
    double dbSpeed;          
    double dbBearing;        
    BYTE bReserved[8];       
} NET_GPS_INFO;
#ifndef LINUX64_JNA
#pragma pack(pop)
#endif
typedef struct tagNET_GPS_INFO_EX
{
    int nLongitude; 
    int nLatidude; 
    double nAltitude;    
    char szReserved[48]; 
} NET_GPS_INFO_EX;
typedef struct tagNET_EXTENSION_INFO
{
    char szEventID[MAX_EVENT_ID_LEN]; 
    BYTE byReserved[80];              
} NET_EXTENSION_INFO;
typedef struct tagSCENE_IMAGE_INFO_EX
{
    unsigned int nOffSet; 
    unsigned int nLength; 
    unsigned int nWidth;  
    unsigned int nHeight; 
    char szFilePath[260]; 
    UINT nIndexInData;    
    char szImageID[42];   
    char szReserved[6];   
    BYTE byReserved[460]; 
} SCENE_IMAGE_INFO_EX;
typedef enum tagEM_UNIFORM_STYLE
{
    EM_UNIFORM_STYLE_UNKNOWN,     
    EM_UNIFORM_STYLE_POLICE,      
    EM_UNIFORM_STYLE_NOUNIFORM,   
    EM_UNIFORM_STYLE_SINOPEC,     
    EM_UNIFORM_STYLE_GUARD,       
    EM_UNIFORM_STYLE_VEST,        
    EM_UNIFORM_STYLE_SATNITATION, 
    EM_UNIFORM_STYLE_TAKEOUT,     
    EM_UNIFORM_STYLE_JUN,
    EM_UNIFORM_STYLE_EXPRESS, 
    EM_UNIFORM_STYLE_SECURITY 
} EM_UNIFORM_STYLE;
typedef struct tagNET_VAOBJECT_NUMMAN
{
    UINT nObjectID;                  
    EM_UNIFORM_STYLE emUniformStyle; 
    NET_RECT stuBoundingBox;         
    NET_RECT stuOriginalBoundingBox; 
    BYTE byReserved[128];            
} NET_VAOBJECT_NUMMAN;
typedef enum tagEM_EVENT_LEVEL
{
    EM_EVENT_LEVEL_UNKNOWN = -1, 
    EM_EVENT_LEVEL_HINT,         
    EM_EVENT_LEVEL_GENERAL,      
    EM_EVENT_LEVEL_WARNING       
} EM_EVENT_LEVEL;
typedef struct tagNET_PRESET_POSITION
{
    int nHorizontal;    
    int nVertical;      
    int nMagnification; 
} NET_PRESET_POSITION;
typedef enum tagEM_ACTION
{
    EM_ACTION_UNKNOWN,   
    EM_ACTION_APPEAR,    
    EM_ACTION_MOVE,      
    EM_ACTION_STAY,      
    EM_ACTION_REMOVE,    
    EM_ACTION_DISAPPEAR, 
    EM_ACTION_SPLIT,     
    EM_ACTION_MERGE,     
    EM_ACTION_RENAME,    
} EM_ACTION;
typedef enum tagEM_BOAT_DIRECTION
{
    EM_BOAT_DIRECTION_UNKNOWN,  
    EM_BOAT_DIRECTION_OPPOSITE, 
    EM_BOAT_DIRECTION_POSITIVE, 
} EM_BOAT_DIRECTION;
typedef struct tagNET_BOAT_OBJECT
{
    UINT nObjectID;                  
    int nDistance;                   
    int nHeight;                     
    int nWidth;                      
    int nSpeed;                      
    EM_ACTION emActionType;          
    NET_RECT stuBoundingBox;         
    NET_RECT stuOriginalBoundingBox; 
    EM_BOAT_DIRECTION emDirection;   
    char szBoatCode[64];             
    BYTE byReserved[60];             
} NET_BOAT_OBJECT;
typedef struct tagDEV_EVENT_CROSSLINE_INFO
{
    int nChannelID;                              
    char szName[128];                            
    char bReserved1[4];                          
    double PTS;                                  
    NET_TIME_EX UTC;                             
    int nEventID;                                
    DH_MSG_OBJECT stuObject;                     
    DH_EVENT_FILE_INFO stuFileInfo;              
    DH_POINT DetectLine[DH_MAX_DETECT_LINE_NUM]; 
    int nDetectLineNum;                          
    DH_POINT TrackLine[DH_MAX_TRACK_LINE_NUM];   
    int nTrackLineNum;                           
    BYTE bEventAction;                           
    BYTE bDirection;                             
    BYTE byReserved[1];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_EXTENSION_INFO stuExtensionInfo;        
    SCENE_IMAGE_INFO_EX stuSceneImage;          
    UINT nObjetcHumansNum;                      
    NET_VAOBJECT_NUMMAN stuObjetcHumans[100];   
    UINT nRuleID;                               
    EM_EVENT_LEVEL emEventType;                 
    NET_PRESET_POSITION stPosition;             
    UINT nVisibleHFOV;                          
    UINT nVisibleVFOV;                          
    UINT nCurChannelHFOV;                       
    UINT nCurChannelVFOV;                       
    int nImageNum;                              
    NET_IMAGE_INFO_EX2* pImageArray;            
    int nCarMirrorStatus;                       
    int nCarLightStatus;                        
    UINT nObjectBoatsNum;                       
    NET_BOAT_OBJECT stuBoatObjects[100];        
    int nUpDownGoing;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE byReserved1[452];                      
} DEV_EVENT_CROSSLINE_INFO;
typedef struct tagDEV_EVENT_CROSSLINE_INFO_EX
{
    DWORD dwSize;
    int nChannelID;                              
    char szName[128];                            
    char bReserved1[4];                          
    float PTS;                                   
    NET_TIME_EX UTC;                             
    int nEventID;                                
    DH_MSG_OBJECT_EX stuObject;                  
    DH_EVENT_FILE_INFO stuFileInfo;              
    DH_POINT DetectLine[DH_MAX_DETECT_LINE_NUM]; 
    int nDetectLineNum;                          
    DH_POINT TrackLine[DH_MAX_TRACK_LINE_NUM];   
    int nTrackLineNum;                           
    BYTE bEventAction;                           
    BYTE bDirection;                             
    BYTE byReserved[1];
    BYTE byImageIndex;             
    DWORD dwSnapFlagMask;          
    int nSourceIndex;              
    char szSourceDevice[MAX_PATH]; 
    unsigned int nOccurrenceCount; 
    int nMsgObjArrayCount;                      
    DH_MSG_OBJECT_EX* pMsgObjArray;             
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    SCENE_IMAGE_INFO_EX stuSceneImage;          
    UINT nObjetcHumansNum;                      
    NET_VAOBJECT_NUMMAN stuObjetcHumans[100];   
    UINT nRuleID;                               
    EM_EVENT_LEVEL emEventType;                 
    NET_PRESET_POSITION stPosition;             
    UINT nVisibleHFOV;                          
    UINT nVisibleVFOV;                          
    UINT nCurChannelHFOV;                       
    UINT nCurChannelVFOV;                       
    int nImageNum;                              
    NET_IMAGE_INFO_EX2* pImageArray;            
    int nCarMirrorStatus;                       
    int nCarLightStatus;                        
    UINT nObjectBoatsNum;                       
    NET_BOAT_OBJECT stuBoatObjects[100];        
    int nUpDownGoing;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE byReserved1[452];                      
} DEV_EVENT_CROSSLINE_INFO_EX;
typedef struct tagNET_CUSTOM_INFO
{
    int nCargoChannelNum;                       
    float fCoverageRate[MAX_CARGO_CHANNEL_NUM]; 
    BYTE byReserved[40];                        
} NET_CUSTOM_INFO;
typedef enum tagEM_SPECIAL_REGION_TYPE
{
    EM_SPEICAL_REGION_UNKNOW = 0,      
    EM_SPEICAL_REGION_HIGH_LIGHT,      
    EM_SPEICAL_REGION_REGULAR_BLINK,   
    EM_SPEICAL_REGION_IRREGULAR_BLINK, 
} EM_SPECIAL_REGION_TYPE;
typedef struct tagDEV_EVENT_PASTE_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    unsigned int nOccurrenceCount;              
    EM_SPECIAL_REGION_TYPE emSpecialRegion;     
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    BYTE bReserved[748];                        
} DEV_EVENT_PASTE_INFO;
typedef struct tagDEV_EVENT_LEFT_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    int nSourceIndex;                                
    char szSourceDevice[MAX_PATH];                   
    unsigned int nOccurrenceCount;                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    short nPreserID;                                 
    char szPresetName[64];                           
    NET_EXTENSION_INFO stuExtensionInfo;             
    BYTE byReserved2[2];                             
    NET_GPS_INFO stuGPSInfo;                         
    char szVideoPath[256];                           
    SCENE_IMAGE_INFO_EX stuSceneImage;               
    NET_IMAGE_INFO_EX2 stuImageInfo[32];             
    int nImageInfoNum;                               
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_LEFT_INFO;
typedef struct tagSCENE_IMAGE_INFO
{
    UINT nOffSet;        
    UINT nLength;        
    UINT nWidth;         
    UINT nHeight;        
    UINT nIndexInData;   
    BYTE byReserved[52]; 
} SCENE_IMAGE_INFO;
typedef struct tagDEV_EVENT_PRESERVATION_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    int nSourceIndex;                                
    char szSourceDevice[MAX_PATH];                   
    unsigned int nOccurrenceCount;                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    SCENE_IMAGE_INFO stuSceneImage;                  
    int nObjectCount;                                
    DH_MSG_OBJECT_EX2 stuObjects[128];               
    char szReserved[1024];                           
} DEV_EVENT_PRESERVATION_INFO;
typedef struct tagPTZ_PRESET_UNIT
{
    int nPositionX;     
    int nPositionY;     
    int nZoom;          
    char szReserve[32]; 
} PTZ_PRESET_UNIT;
typedef struct tagNET_LINK_INFO
{
    UINT nLinkObjectID;         
    UINT nLinkEventID;          
    UINT nSpeedValue;           
    UINT nAlarmType;            
    UINT nLongitude;            
    UINT nLatitude;             
    UINT nDistance;             
    char szObjectType[16];      
    NET_TIME_EX stuLinkRealUTC; 
    char szResvered[176];       
} NET_LINK_INFO;
typedef struct tagDEV_EVENT_STAY_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    int nSourceIndex;                                
    char szSourceDevice[MAX_PATH];                   
    unsigned int nOccurrenceCount;                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_NUM];   
    UINT nAreaID;                                    
    BOOL bIsCompliant;                               
    PTZ_PRESET_UNIT stPosition;                      
    UINT nCurChannelHFOV;                            
    UINT nCurChannelVFOV;                            
    SCENE_IMAGE_INFO stuSceneImage;                  
    NET_IMAGE_INFO_EX2* pstuImageInfo;               
    int nImageInfoNum;                               
    NET_LINK_INFO stuLinkInfo;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    NET_BOAT_OBJECT* pstuBoatObject;                 
    int nBoatObjectNum;                              
    BYTE bReserved[620 - POINTERSIZE];               
} DEV_EVENT_STAY_INFO;
typedef struct tagNET_POSTION
{
    int nHorizontalCoordinate; 
    int nVerticalCoordinate;   
    int nMagnification;        
} NET_POSTION;
typedef struct tagDEV_EVENT_WANDER_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];                              
    BYTE byImageIndex;                               
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_LIST];  
    int nTrackNum;                                   
    DH_POLY_POINTS stuTrackInfo[DH_MAX_OBJECT_LIST]; 
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    int nSourceIndex;                                
    char szSourceDevice[MAX_PATH];                   
    unsigned int nOccurrenceCount;                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    short nPreserID;                                 
    char szPresetName[64];                           
    NET_EXTENSION_INFO stuExtensionInfo;             
    NET_POSTION stuPostion;                          
    char byReserved2[4];                             
    UINT nCurChannelHFOV;                            
    UINT nCurChannelVFOV;                            
    NET_IMAGE_INFO_EX2 stuImageInfo[32];             
    int nImageInfoNum;                               
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE szReserved[402];                            
} DEV_EVENT_WANDER_INFO;
typedef struct tagNET_OBJECT_IMAGE_INFO
{
    unsigned int nOffSet; 
    unsigned int nLength; 
    unsigned int nWidth;  
    unsigned int nHeight; 
    char szFilePath[260]; 
    UINT nIndexInData;    
    BYTE byReserved[504]; 
} NET_OBJECT_IMAGE_INFO;
typedef enum tagEM_ANINAL_CATEGORY
{
    EM_ANINAL_CATEGORY_UNKNOWN,            
    EM_ANINAL_CATEGORY_PIG,                
    EM_ANINAL_CATEGORY_CAT,                
    EM_ANINAL_CATEGORY_DOG,                
    EM_ANINAL_CATEGORY_BIRD,               
    EM_ANINAL_CATEGORY_GOLDEN_MONKEY,      
    EM_ANINAL_CATEGORY_BLACK_BECKED_CRANE, 
    EM_ANINAL_CATEGORY_RAT,                
} EM_ANINAL_CATEGORY;
typedef enum tagENUM_MOTION_STATUS
{
    ENUM_MOTION_STATUS_UNKNOWN, 
    ENUM_MOTION_STATUS_STATIC,  
    ENUM_MOTION_STATUS_MOVE,    
} ENUM_MOTION_STATUS;
typedef enum tagENUM_IN_REGION_STATUS
{
    ENUM_IN_REGION_STATUS_UNKNOWN, 
    ENUM_IN_REGION_STATUS_YES,     
    ENUM_IN_REGION_STATUS_NO,      
} ENUM_IN_REGION_STATUS;
typedef struct tagVA_OBJECT_ANIMAL
{
    UINT nObjectID;                         
    EM_ANINAL_CATEGORY emCategory;          
    NET_RECT stuBoundingBox;                
    UINT nObjectWeight;                     
    NET_OBJECT_IMAGE_INFO stuImage;         
    ENUM_MOTION_STATUS emMoveStatus;        
    ENUM_IN_REGION_STATUS emInRegionStatus; 
    int nResultType;                        
    BYTE bReserved[1024];                   
} VA_OBJECT_ANIMAL;
typedef struct tagDEV_EVENT_MOVE_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    int nSourceIndex;                                
    char szSourceDevice[MAX_PATH];                   
    int nTrackLineNum;                               
    DH_POINT stuTrackLine[DH_MAX_TRACK_LINE_NUM];    
    unsigned int nOccurrenceCount;                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    NET_EXTENSION_INFO stuExtensionInfo;             
    int nAnimalNum;                                  
    VA_OBJECT_ANIMAL* pstuAnimals;                   
    int nMsgObjArrayCount;                           
    DH_MSG_OBJECT_EX* pMsgObjArray;                  
    int nImageNum;                                   
    NET_IMAGE_INFO_EX2* pImageArray;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE bReserved[236];                             
} DEV_EVENT_MOVE_INFO;
typedef struct tagDEV_EVENT_TAIL_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    int nSourceIndex;                                
    char szSourceDevice[MAX_PATH];                   
    unsigned int nOccurrenceCount;                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    NET_IMAGE_INFO_EX3* pstuImageInfo;               
    int nImageInfoNum;                               
    BYTE bReserved[484 - POINTERSIZE];               
} DEV_EVENT_TAIL_INFO;
typedef struct tagDEV_EVENT_RIOTER_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_LIST];  
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];                              
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_EXTENSION_INFO stuExtensionInfo;        
    char szSourceID[32];                        
    NET_IMAGE_INFO_EX2 stuImageInfo[32];        
    int nImageInfoNum;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[328];                        
} DEV_EVENT_RIOTERL_INFO;
typedef enum tagEM_STEREO_ACTION_TYPE
{
    EM_STEREO_ACTION_TYPE_UNKNOWN,        
    EM_STEREO_ACTION_TYPE_DRASTIC_MOTION, 
    EM_STEREO_ACTION_TYPE_SINGLE_FIGHT,   
    EM_STEREO_ACTION_TYPE_MULTI_FIGHT,    
} EM_STEREO_ACTION_TYPE;
typedef struct tagDEV_EVENT_FIGHT_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_LIST];  
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];                              
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_EXTENSION_INFO stuExtensionInfo;        
    char szSourceID[32];                        
    EM_STEREO_ACTION_TYPE emActionType;         
    SCENE_IMAGE_INFO stuSceneImage;             
    NET_IMAGE_INFO_EX2* pstuImageInfo;          
    int nImageInfoNum;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[240];                        
} DEV_EVENT_FIGHT_INFO;
typedef struct tagDEV_EVENT_GETOUTBED_INFO
{
    int nChannelID;     
    char szName[128];   
    char bReserved1[4]; 
    double PTS;         
    NET_TIME_EX UTC;    
    int nEventID;       
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];   
    BYTE byImageIndex;    
    DWORD dwSnapFlagMask; 
    BYTE bReserved[1024]; 
} DEV_EVENT_GETOUTBED_INFO;
typedef struct tagDEV_EVENT_PATROL_INFO
{
    int nChannelID;     
    char szName[128];   
    char bReserved1[4]; 
    double PTS;         
    NET_TIME_EX UTC;    
    int nEventID;       
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];   
    BYTE byImageIndex;    
    DWORD dwSnapFlagMask; 
    BYTE bReserved[1024]; 
} DEV_EVENT_PATROL_INFO;
typedef struct tagDEV_EVENT_ONDUTY_INFO
{
    int nChannelID;     
    char szName[128];   
    char bReserved1[4]; 
    double PTS;         
    NET_TIME_EX UTC;    
    int nEventID;       
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];   
    BYTE byImageIndex;    
    DWORD dwSnapFlagMask; 
    BYTE bReserved[1024]; 
} DEV_EVENT_ONDUTY_INFO;
typedef struct tagDEV_EVENT_ELECTROSPARK_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;    
    DWORD dwSnapFlagMask; 
    BYTE bReserved[972];  
} DEV_EVENT_ELECTROSPARK_INFO;
typedef struct tagDEV_EVENT_FLOWSTAT_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nNumberLeft;                
    int nNumberRight;               
    int nUpperLimit;                
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                    
    DWORD dwSnapFlagMask;                 
    unsigned int nOccurrenceCount;        
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE bReserved[972];                  
} DEV_EVENT_FLOWSTAT_INFO;
typedef enum tagEM_NUMBER_STAT_TYPE
{
    EM_NUMBERSTAT_TYPE_UNKNOWN,    
    EM_NUMBERSTAT_TYPE_ENTEROVER,  
    EM_NUMBERSTAT_TYPE_EXITOVER,   
    EM_NUMBERSTAT_TYPE_INSIDEOVER, 
    EM_NUMBERSTAT_TYPE_PASSOVER,   
} EM_NUMBER_STAT_TYPE;
typedef struct tagDEV_EVENT_NUMBERSTAT_INFO
{
    int nChannelID;                             
    char szName[128];                           
    char bReserved2[4];                         
    double PTS;                                 
    NET_TIME_EX UTC;                            
    int nEventID;                               
    int nNumber;                                
    int nUpperLimit;                            
    DH_EVENT_FILE_INFO stuFileInfo;             
    BYTE bEventAction;                          
    BYTE bReserved1[2];                         
    BYTE byImageIndex;                          
    int nEnteredNumber;                         
    int nExitedNumber;                          
    DWORD dwSnapFlagMask;                       
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    UINT nAreaID;                               
    BOOL bIsCompliant;                          
    EM_NUMBER_STAT_TYPE emType;                 
    NET_IMAGE_INFO_EX2* pstuImageInfo;          
    int nImageInfoNum;                          
    int nPassedNumber;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[800];                        
} DEV_EVENT_NUMBERSTAT_INFO;
typedef struct tagDEV_EVENT_CROSSFENCEDETECTION_INFO
{
    int nChannelID;                                     
    char szName[128];                                   
    char bReserved1[4];                                 
    double PTS;                                         
    NET_TIME_EX UTC;                                    
    int nEventID;                                       
    DH_MSG_OBJECT stuObject;                            
    int nUpstairsLinePointNumber;                       
    DH_POINT stuUpstairsLine[DH_MAX_DETECT_LINE_NUM];   
    int nDownstairsLinePointNumber;                     
    DH_POINT stuDownstairsLine[DH_MAX_DETECT_LINE_NUM]; 
    int nTrackLineNum;                                  
    DH_POINT TrackLine[DH_MAX_TRACK_LINE_NUM];          
    DH_EVENT_FILE_INFO stuFileInfo;                     
    BYTE bEventAction;                                  
    BYTE bDirection;                                    
    BYTE byReserved[1];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_IMAGE_INFO_EX2 stuImageInfo[32];        
    int nImageInfoNum;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[616];                        
} DEV_EVENT_CROSSFENCEDETECTION_INFO;
typedef struct tagDEV_EVENT_INREGIONDETECTION_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_LIST];  
    int nTrackNum;                                   
    DH_POLY_POINTS stuTrackInfo[DH_MAX_OBJECT_LIST]; 
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;    
    DWORD dwSnapFlagMask; 
    BYTE bReserved[1016]; 
} DEV_EVENT_INREGIONDETECTION_INFO;
typedef struct tagDEV_EVENT_TAKENAWAYDETECTION_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    short nPreserID;                            
    char szPresetName[64];                      
    NET_EXTENSION_INFO stuExtensionInfo;        
    NET_IMAGE_INFO_EX2 stuImageInfo[32];        
    int nImageInfoNum;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[418];                        
} DEV_EVENT_TAKENAWAYDETECTION_INFO;
typedef struct tagDEV_EVENT_VIDEOABNORMALDETECTION_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE bType;                     
    BYTE byReserved[1];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    SCENE_IMAGE_INFO_EX stuSceneImage;          
    NET_IMAGE_INFO_EX2 stuImageInfo[32];        
    int nImageInfoNum;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    char byReserved2[1024];                     
} DEV_EVENT_VIDEOABNORMALDETECTION_INFO;
typedef struct tagDEV_EVENT_PARKINGDETECTION_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_EXTENSION_INFO stuExtensionInfo;        
    char szCustomParkNo[64];                    
    NET_PRESET_POSITION stPosition;             
    UINT nCurChannelHFOV;                       
    UINT nCurChannelVFOV;                       
    SCENE_IMAGE_INFO_EX stuSceneImage;          
    NET_IMAGE_INFO_EX2 stuImageInfo[32];        
    int nImageInfoNum;                          
    UINT nObjectBoatsNum;                       
    NET_BOAT_OBJECT stuBoatObjects[100];        
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[400];                        
} DEV_EVENT_PARKINGDETECTION_INFO;
#define HDBJ_MAX_OBJECTS_NUM 200 
typedef struct tagDEV_EVENT_SHOPPRESENCE_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    int nSourceIndex;                               
    char szSourceDevice[MAX_PATH];                  
    unsigned int nOccurrenceCount;                  
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    char szPresetName[DH_COMMON_STRING_64];         
    EM_EVENT_LEVEL emEventLevel;                    
    char szShopAddress[DH_COMMON_STRING_256];       
    UINT nViolationDuration;                        
    int nObjectNum;                                 
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM]; 
    char szSourceID[32];                            
    NET_IMAGE_INFO_EX2* pstuImageInfo;              
    int nImageInfoNum;                              
    BYTE byReserved2[2044 - POINTERSIZE];           
} DEV_EVENT_SHOPPRESENCE_INFO;
typedef struct tagDEV_EVENT_WASTEDUMPED_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    char szPresetName[DH_COMMON_STRING_64];     
    EM_EVENT_LEVEL emEventLevel;                
    BYTE byReserved2[512];                      
} DEV_EVENT_WASTEDUMPED_INFO;
typedef struct tagDEV_EVENT_ABNORMALRUNDETECTION
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    double dbSpeed;                                  
    double dbTriggerSpeed;                           
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nTrackLineNum;                               
    DH_POINT TrackLine[DH_MAX_TRACK_LINE_NUM];       
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE bRunType;                                   
    BYTE byReserved[1];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_IMAGE_INFO_EX2* pstuImageInfo;          
    int nImageInfoNum;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[604];                        
} DEV_EVENT_ABNORMALRUNDETECTION_INFO;
typedef struct tagDEV_EVENT_RETROGRADEDETECTION_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    int nTrackLineNum;                               
    DH_POINT TrackLine[DH_MAX_TRACK_LINE_NUM];       
    int nDirectionPointNum;                          
    DH_POINT stuDirections[DH_MAX_DETECT_LINE_NUM];  
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_IMAGE_INFO_EX2* pstuImageInfo;          
    int nImageInfoNum;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE bReserved[604];                        
} DEV_EVENT_RETROGRADEDETECTION_INFO;
typedef enum tagEM_DEV_EVENT_FACEDETECT_SEX_TYPE
{
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE_UNKNOWN, 
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE_MAN,     
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE_WOMAN,   
} EM_DEV_EVENT_FACEDETECT_SEX_TYPE;
typedef struct tagNET_EULER_ANGLE
{
    int nPitch; 
    int nYaw;   
    int nRoll;  
} NET_EULER_ANGLE;
typedef struct tagNET_ANGEL_RANGE
{
    int nMin; 
    int nMax; 
} NET_ANGEL_RANGE;
typedef struct tagNET_FACE_ORIGINAL_SIZE
{
    UINT nWidth;  
    UINT nHeight; 
} NET_FACE_ORIGINAL_SIZE;
typedef struct tagNET_FACE_DATA
{
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;                                        
    int nAge;                                                                      
    unsigned int nFeatureValidNum;                                                 
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emFeature[DH_MAX_FACEDETECT_FEATURE_NUM]; 
    char szReserved1[4];
    EM_EYE_STATE_TYPE emEye;             
    EM_MOUTH_STATE_TYPE emMouth;         
    EM_MASK_STATE_TYPE emMask;           
    EM_BEARD_STATE_TYPE emBeard;         
    int nAttractive;                     
    BYTE bReserved1[4];                  
    NET_EULER_ANGLE stuFaceCaptureAngle; 
    UINT nFaceQuality;                   
    int nFaceAlignScore;                 
    int nFaceClarity;                    
    double dbTemperature;                        
    BOOL bAnatomyTempDetect;                     
    EM_HUMAN_TEMPERATURE_UNIT emTemperatureUnit; 
    BOOL bIsOverTemp;                            
    BOOL bIsUnderTemp;                           
    NET_FACE_ORIGINAL_SIZE stuOriginalSize;      
    EM_GLASS_STATE_TYPE emGlass;                 
    BYTE bReserved[64];                          
} NET_FACE_DATA;
typedef struct tagNET_FEATURE_VECTOR
{
    DWORD dwOffset;       
    DWORD dwLength;       
    BOOL bFeatureEnc;     
    BYTE byReserved[116]; 
} NET_FEATURE_VECTOR;
typedef enum tagEM_FACE_DETECT_STATUS
{
    EM_FACE_DETECT_UNKNOWN,   
    EM_FACE_DETECT_APPEAR,    
    EM_FACE_DETECT_INPICTURE, 
    EM_FACE_DETECT_EXIT,      
} EM_FACE_DETECT_STATUS;
typedef struct tagNET_PASSERBY_INFO
{
    char szPasserbyUID[MAX_COMMON_STRING_32];        
    char szPasserbyGroupId[MAX_COMMON_STRING_64];    
    char szPasserbyGroupName[MAX_COMMON_STRING_128]; 
    BYTE byReserved[128];                            
} NET_PASSERBY_INFO;
typedef struct tagNET_FACECOMPARISON_PTZ_INFO
{
    char szPresetName[64]; 
    DWORD dwPresetNumber;  
    BYTE byReserved1[4];   
    BYTE byReserved[256];  
} NET_FACECOMPARISON_PTZ_INFO;
typedef struct tagNET_CUSTOM_PROJECTS_INFO
{
    NET_GPS_INFO stuGPSInfo;                              
    NET_FACECOMPARISON_PTZ_INFO stuFaceComparisonPTZInfo; 
    char szPlateNumber[64];                               
    BOOL bIsAlarm;                                        
    int nStayEvent;                                       
    int nWanderEvent;                                     
    BYTE byReserved[1012];                                
} NET_CUSTOM_PROJECTS_INFO;
typedef struct tagDEV_EVENT_FACERECOGNITION_INFO
{
    int nChannelID;                                         
    char szName[128];                                       
    int nEventID;                                           
    NET_TIME_EX UTC;                                        
    DH_MSG_OBJECT stuObject;                                
    int nCandidateNum;                                      
    CANDIDATE_INFO stuCandidates[DH_MAX_CANDIDATE_NUM];     
    BYTE bEventAction;                                      
    BYTE byImageIndex;                                      
    BYTE byReserved1[2];                                    
    BOOL bGlobalScenePic;                                   
    DH_PIC_INFO stuGlobalScenePicInfo;                      
    char szSnapDevAddress[MAX_PATH];                        
    unsigned int nOccurrenceCount;                          
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;             
    NET_FACE_DATA stuFaceData;                              
    char szUID[DH_COMMON_STRING_32];                        
    NET_FEATURE_VECTOR stuFeatureVector;                    
    char szFeatureVersion[32];                              
    EM_FACE_DETECT_STATUS emFaceDetectStatus;               
    char szSourceID[32];                                    
    NET_PASSERBY_INFO stuPasserbyInfo;                      
    unsigned int nStayTime;                                 
    NET_GPS_INFO stuGPSInfo;                                
    char szCameraID[64];                                    
    DH_RESOLUTION_INFO stuResolution;                       
    int nPerFlag;                                           
    BYTE bReserved[360];                                    
    int nRetCandidatesExNum;                                
    CANDIDATE_INFOEX stuCandidatesEx[DH_MAX_CANDIDATE_NUM]; 
    char szSerialUUID[22];                                  
    BYTE byReserved[2];                                     
    NET_CUSTOM_PROJECTS_INFO stuCustomProjects;             
    BOOL bIsDuplicateRemove;                                
    BYTE byReserved2[4];                                    
    NET_IMAGE_INFO_EX2 stuImageInfo[32];                    
    int nImageInfoNum;                                      
    DH_MSG_OBJECT_SUPPLEMENT stuObjectSupplement;           
    UINT nMode;                                             
    SCENE_IMAGE_INFO stuThumImageInfo;                      
    SCENE_IMAGE_INFO stuHumanImageInfo;                     
    char szVideoPath[256];                                  
    BOOL bIsHighFrequencyAlarm;                             
    char szFrequencyAlarmName[32];                          
    double PTS;                                             
    char byReserved3[272];                                  
} DEV_EVENT_FACERECOGNITION_INFO;
typedef struct tagDEV_EVENT_DENSITYDETECTTION_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_LIST];  
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];                              
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    int nUnit;                                  
    int nValue;                                 
    BYTE bReserved[612];                        
} DEV_EVENT_DENSITYDETECTION_INFO;
typedef struct tagDEV_EVENT_QUEUEDETECTION_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved2[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE bReserved1[2];             
    BYTE byImageIndex;              
    DH_POINT stuDetectLine[2];      
    unsigned int nOccurrenceCount;  
    BYTE bReserved[1012];           
} DEV_EVENT_QUEUEDETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFICCONTROL_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;       
    DWORD dwSnapFlagMask;    
    NET_GPS_INFO stuGPSInfo; 
    BYTE bReserved[932];     
} DEV_EVENT_TRAFFICCONTROL_INFO;
typedef struct tagDEV_EVENT_TRAFFICACCIDENT_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved1[4];                             
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    int nObjectNum;                                 
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_LIST]; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE bEventAction;                              
    BYTE byReserved[2];
    BYTE byImageIndex;                                 
    DWORD dwSnapFlagMask;                              
    EVENT_TRAFFIC_CAR_PART_INFO stuTrafficCarPartInfo; 
    UINT nLane;                                        
    BYTE bReserved[460];                               
} DEV_EVENT_TRAFFICACCIDENT_INFO;
#define DH_EVENT_MAX_CARD_NUM 16 
#define DH_EVENT_CARD_LEN 36     
typedef struct tagEVENT_CARD_INFO
{
    char szCardNumber[DH_EVENT_CARD_LEN]; 
    BYTE bReserved[32];                   
} EVENT_CARD_INFO;
typedef enum tagEM_OPEN_STROBE_STATE
{
    NET_OPEN_STROBE_STATE_UNKOWN, 
    NET_OPEN_STROBE_STATE_CLOSE,  
    NET_OPEN_STROBE_STATE_AUTO,   
    NET_OPEN_STROBE_STATE_MANUAL, 
} EM_OPEN_STROBE_STATE;
typedef enum tagEM_NTP_STATUS
{
    NET_NTP_STATUS_UNKNOWN = 0,
    NET_NTP_STATUS_DISABLE,
    NET_NTP_STATUS_SUCCESSFUL,
    NET_NTP_STATUS_FAILED,
} EM_NTP_STATUS;
#define COMMON_SEAT_MAX_NUMBER 8 
typedef enum tagEM_COMMON_SEAT_TYPE
{
    COMMON_SEAT_TYPE_UNKNOWN = 0, 
    COMMON_SEAT_TYPE_MAIN = 1,    
    COMMON_SEAT_TYPE_SLAVE = 2,   
} EM_COMMON_SEAT_TYPE;
typedef struct tagEVENT_COMM_STATUS
{
    BYTE bySmoking;      
    BYTE byCalling;      
    char szReserved[14]; 
} EVENT_COMM_STATUS;
typedef enum tagNET_SAFEBELT_STATE
{
    SS_NUKNOW = 0,        
    SS_WITH_SAFE_BELT,    
    SS_WITHOUT_SAFE_BELT, 
} NET_SAFEBELT_STATE;
typedef enum tagNET_SUNSHADE_STATE
{
    SS_NUKNOW_SUN_SHADE = 0, 
    SS_WITH_SUN_SHADE,       
    SS_WITHOUT_SUN_SHADE,    
} NET_SUNSHADE_STATE;
typedef enum tagEM_CALL_ACTION_TYPE
{
    EM_CALL_ACTION_TYPE_UNKNOWN,        
    EM_CALL_ACTION_TYPE_CALL_BY_EAR,    
    EM_CALL_ACTION_TYPE_CALL_HAND_HOLD, 
} EM_CALL_ACTION_TYPE;
typedef struct tagEVENT_COMM_SEAT
{
    BOOL bEnable;                        
    EM_COMMON_SEAT_TYPE emSeatType;      
    EVENT_COMM_STATUS stStatus;          
    NET_SAFEBELT_STATE emSafeBeltStatus; 
    NET_SUNSHADE_STATE emSunShadeStatus; 
    EM_CALL_ACTION_TYPE emCallAction;    
    UINT nSafeBeltConf;                  
    UINT nPhoneConf;                     
    UINT nSmokeConf;                     
    char szReserved[8];                  
} EVENT_COMM_SEAT;
typedef enum tagEM_COMM_ATTACHMENT_TYPE
{
    COMM_ATTACHMENT_TYPE_UNKNOWN = 0,    
    COMM_ATTACHMENT_TYPE_FURNITURE = 1,  
    COMM_ATTACHMENT_TYPE_PENDANT = 2,    
    COMM_ATTACHMENT_TYPE_TISSUEBOX = 3,  
    COMM_ATTACHMENT_TYPE_DANGER = 4,     
    COMM_ATTACHMENT_TYPE_PERFUMEBOX = 5, 
} EM_COMM_ATTACHMENT_TYPE;
typedef struct tagEVENT_COMM_ATTACHMENT
{
    EM_COMM_ATTACHMENT_TYPE emAttachmentType; 
    NET_RECT stuRect;                         
    UINT nConf;                               
    BYTE bReserved[16];                       
} EVENT_COMM_ATTACHMENT;
typedef struct tagEVENT_PIC_INFO
{
    DWORD nOffset;     
    DWORD nLength;     
    UINT nIndexInData; 
} EVENT_PIC_INFO;
typedef enum tagEM_VEHICLE_TYPE
{
    EM_VEHICLE_TYPE_UNKNOWN,       
    EM_VEHICLE_TYPE_PASSENGERCAR1, 
    EM_VEHICLE_TYPE_TRUCK1,        
    EM_VEHICLE_TYPE_PASSENGERCAR2, 
    EM_VEHICLE_TYPE_TRUCK2,        
    EM_VEHICLE_TYPE_PASSENGERCAR3, 
    EM_VEHICLE_TYPE_TRUCK3,        
    EM_VEHICLE_TYPE_PASSENGERCAR4, 
    EM_VEHICLE_TYPE_TRUCK4,        
    EM_VEHICLE_TYPE_PASSENGERCAR5, 
    EM_VEHICLE_TYPE_TRUCK5,        
} EM_VEHICLE_TYPE;
typedef enum tagEM_SNAPCATEGORY
{
    EM_SNAPCATEGORY_MOTOR,    
    EM_SNAPCATEGORY_NONMOTOR, 
} EM_SNAPCATEGORY;
typedef enum tagEM_STANDARD_VEHICLE_TYPE
{
    EM_STANDARD_VEHICLE_UNKNOWN,                   
    EM_STANDARD_VEHICLE_MOTOR,                     
    EM_STANDARD_VEHICLE_BUS,                       
    EM_STANDARD_VEHICLE_UNLICENSED_MOTOR,          
    EM_STANDARD_VEHICLE_LARGE_CAR,                 
    EM_STANDARD_VEHICLE_MICRO_CAR,                 
    EM_STANDARD_VEHICLE_EMBASSY_CAR,               
    EM_STANDARD_VEHICLE_MARGINAL_CAR,              
    EM_STANDARD_VEHICLE_AREAOUT_CAR,               
    EM_STANDARD_VEHICLE_FOREIGN_CAR,               
    EM_STANDARD_VEHICLE_FARM_TRANS_CAR,            
    EM_STANDARD_VEHICLE_TRACTOR,                   
    EM_STANDARD_VEHICLE_TRAILER,                   
    EM_STANDARD_VEHICLE_COACH_CAR,                 
    EM_STANDARD_VEHICLE_TRIAL_CAR,                 
    EM_STANDARD_VEHICLE_TEMPORARYENTRY_CAR,        
    EM_STANDARD_VEHICLE_TEMPORARYENTRY_MOTORCYCLE, 
    EM_STANDARD_VEHICLE_TEMPORARY_STEER_CAR,       
    EM_STANDARD_VEHICLE_LARGE_TRUCK,               
    EM_STANDARD_VEHICLE_MID_TRUCK,                 
    EM_STANDARD_VEHICLE_MICRO_TRUCK,               
    EM_STANDARD_VEHICLE_MICROBUS,                  
    EM_STANDARD_VEHICLE_SALOON_CAR,                
    EM_STANDARD_VEHICLE_CARRIAGE,                  
    EM_STANDARD_VEHICLE_MINI_CARRIAGE,             
    EM_STANDARD_VEHICLE_SUV_MPV,                   
    EM_STANDARD_VEHICLE_SUV,                       
    EM_STANDARD_VEHICLE_MPV,                       
    EM_STANDARD_VEHICLE_PASSENGER_CAR,             
    EM_STANDARD_VEHICLE_MOTOR_BUS,                 
    EM_STANDARD_VEHICLE_MID_PASSENGER_CAR,         
    EM_STANDARD_VEHICLE_MINI_BUS,                  
    EM_STANDARD_VEHICLE_PICKUP,                    
    EM_STANDARD_VEHICLE_OILTANK_TRUCK,             
} EM_STANDARD_VEHICLE_TYPE;
typedef enum tagEM_RADAR_DETECTION_VEHICLE_TYPE
{
    EM_RADAR_DETECTION_VEHICLE_TYPE_UNKNOWN,           
    EM_RADAR_DETECTION_VEHICLE_TYPE_MID_PASSENGER_CAR, 
    EM_RADAR_DETECTION_VEHICLE_TYPE_MOTOR_BUS,         
    EM_RADAR_DETECTION_VEHICLE_TYPE_MICRO_TRUCK,       
    EM_RADAR_DETECTION_VEHICLE_TYPE_MID_TRUCK,         
    EM_RADAR_DETECTION_VEHICLE_TYPE_LARGE_TRUCK,       
    EM_RADAR_DETECTION_VEHICLE_TYPE_SUPER_TRUCK,       
    EM_RADAR_DETECTION_VEHICLE_TYPE_CONTAINER_CAR,     
    EM_RADAR_DETECTION_VEHICLE_TYPE_MOTORCYCLE,        
    EM_RADAR_DETECTION_VEHICLE_TYPE_TRACTOR,           
} EM_RADAR_DETECTION_VEHICLE_TYPE;
typedef enum tagEM_OVERSEA_VEHICLE_CATEGORY_TYPE
{
    EM_OVERSEA_VEHICLE_CATEGORY_UNKNOWN,                   
    EM_OVERSEA_VEHICLE_CATEGORY_MOTORCYCLE,                
    EM_OVERSEA_VEHICLE_CATEGORY_LIGHT_GOODS_VEHICLE,       
    EM_OVERSEA_VEHICLE_CATEGORY_COMPANY_VEHICLE,           
    EM_OVERSEA_VEHICLE_CATEGORY_PRIVATE_VEHICLE,           
    EM_OVERSEA_VEHICLE_CATEGORY_TAXI,                      
    EM_OVERSEA_VEHICLE_CATEGORY_TRAILER,                   
    EM_OVERSEA_VEHICLE_CATEGORY_ENGINEERING_PLANT_VEHICLE, 
    EM_OVERSEA_VEHICLE_CATEGORY_VERY_HEAVY_GOODS_VEHICLE,  
    EM_OVERSEA_VEHICLE_CATEGORY_HEAVY_GOODS_VEHICLE,       
    EM_OVERSEA_VEHICLE_CATEGORY_PUBLIC_BUS,                
    EM_OVERSEA_VEHICLE_CATEGORY_PRIVATE_BUS,               
    EM_OVERSEA_VEHICLE_CATEGORY_SPECIAL_VEHICLE,           
} EM_OVERSEA_VEHICLE_CATEGORY_TYPE;
typedef struct tagNET_EVENT_RADAR_INFO
{
    float fCoordinateX;   
    float fCoordinateY;   
    float fAccelerationX; 
    float fAccelerationY; 
    BYTE bReserved[16];   
} NET_EVENT_RADAR_INFO;
typedef struct tagNET_EVENT_GPS_INFO
{
    double dLongitude;  
    double dLatitude;   
    BYTE bReserved[24]; 
} NET_EVENT_GPS_INFO;
typedef struct tagNET_EXTRA_PLATES
{
    UINT nOffset;                    
    UINT nLength;                    
    char szText[64];                 
    EM_NET_PLATE_TYPE emCategory;    
    EM_NET_PLATE_COLOR_TYPE emColor; 
    NET_RECT stuArea;                
    char bReserved[32];              
} NET_EXTRA_PLATES;
typedef struct tagEVENT_COMM_INFO
{
    EM_NTP_STATUS emNTPStatus;                                   
    int nDriversNum;                                             
    DH_MSG_OBJECT_EX* pstDriversInfo;                            
    char* pszFilePath;                                           
    char* pszFTPPath;                                            
    char* pszVideoPath;                                          
    EVENT_COMM_SEAT stCommSeat[COMMON_SEAT_MAX_NUMBER];          
    int nAttachmentNum;                                          
    EVENT_COMM_ATTACHMENT stuAttachment[NET_MAX_ATTACHMENT_NUM]; 
    int nAnnualInspectionNum;                                    
    NET_RECT stuAnnualInspection[NET_MAX_ANNUUALINSPECTION_NUM]; 
    float fHCRatio;                                              
    float fNORatio;                                              
    float fCOPercent;                                            
    float fCO2Percent;                                           
    float fLightObscuration;                                     
    int nPictureNum;                                             
    EVENT_PIC_INFO stuPicInfos[NET_MAX_EVENT_PIC_NUM];           
    float fTemperature;                                          
    int nHumidity;                                               
    float fPressure;                                             
    float fWindForce;                                            
    UINT nWindDirection;                                         
    float fRoadGradient;                                         
    float fAcceleration;                                         
    NET_RFIDELETAG_INFO stuRFIDEleTagInfo;                       
    EVENT_PIC_INFO stuBinarizedPlateInfo;                        
    EVENT_PIC_INFO stuVehicleBodyInfo;                           
    EM_VEHICLE_TYPE emVehicleTypeInTollStation;                  
    EM_SNAPCATEGORY emSnapCategory;                              
    int nRegionCode;                                             
    EM_VEHICLE_TYPE_BY_FUNC emVehicleTypeByFunc;                 
    EM_STANDARD_VEHICLE_TYPE emStandardVehicleType;              
    UINT nExtraPlateCount;                                       
    char szExtraPlateNumber[3][32];                              
    EM_OVERSEA_VEHICLE_CATEGORY_TYPE emOverseaVehicleCategory;   
    char szProvince[64];                                         
    NET_EVENT_RADAR_INFO stuRadarInfo;                           
    NET_EVENT_GPS_INFO stuGPSInfo;                               
    NET_EXTRA_PLATES stuExtraPlates[2];                          
    int nExtraPlatesCount;                                       
    UINT nPlateRecogniseConf;                                    
    UINT nVecPostureConf;                                        
    UINT nVecColorConf;                                          
    UINT nSpecialVehConf;                                        
    UINT nIsLargeAngle;                                          
    UINT nIsRelatedPlate;                                        
    UINT nDetectConf;                                            
    UINT nClarity;                                               
    UINT nCompleteScore;                                         
    UINT nQeScore;                                               
    float fSpeedFloat;                                           
    double dbHeadingAngle;                                       
    UINT nDriverNum;                                             
    BYTE bReserved[112];                                         
    char szCountry[20];                                          
} EVENT_COMM_INFO;
typedef enum tagEM_TEMPERATURE_UNIT
{
    EM_TEMPERATURE_UNKNOWN = -1, 
    EM_TEMPERATURE_CENTIGRADE,   
    EM_TEMPERATURE_FAHRENHEIT,   
    EM_TEMPERATURE_KELVIN,       
} EM_TEMPERATURE_UNIT;
typedef struct tagEVENT_CUSTOM_WEIGHT_INFO
{
    DWORD dwRoughWeight; 
    DWORD dwTareWeight;  
    DWORD dwNetWeight;   
    BYTE bReserved[28];  
} EVENT_CUSTOM_WEIGHT_INFO;
typedef struct tagNET_RADAR_FREE_STREAM
{
    TP_U64 nABSTime; 
    int nVehicleID;  
    UINT unOBUMAC;   
} NET_RADAR_FREE_STREAM;
typedef struct tagNET_CUSTOM_MEASURE_TEMPER
{
    float fLeft;                
    float fRight;               
    float fHead;                
    EM_TEMPERATURE_UNIT emUnit; 
} NET_CUSTOM_MEASURE_TEMPER;
typedef struct tagEVENT_JUNCTION_CUSTOM_INFO
{
    EVENT_CUSTOM_WEIGHT_INFO stuWeightInfo;     
    DWORD nCbirFeatureOffset;                   
    DWORD nCbirFeatureLength;                   
    DWORD dwVehicleHeadDirection;               
    UINT nAvailableSpaceNum;                    
    NET_RADAR_FREE_STREAM stuRadarFreeStream;   
    NET_CUSTOM_MEASURE_TEMPER stuMeasureTemper; 
    BOOL bCbirFeatureEnc;                       
    UINT nRadarTriggerLineNo;                   
    BYTE bReserved[4];                          
} EVENT_JUNCTION_CUSTOM_INFO;
typedef struct tagNET_SEAT_INFO
{
    NET_RECT stuFaceRect; 
    BYTE bySunShade;      
    BYTE byDriverCalling; 
    BYTE byDriverSmoking; 
    BYTE bySafeBelt;      
    BYTE byReserved[32];  
} NET_SEAT_INFO;
typedef struct tagNET_VEHICLE_ATTACH
{
    int nType;               
    NET_RECT stuBoundingBox; 
    BYTE byReserved[32];
} NET_VEHICLE_ATTACH;
typedef struct tagFACE_SCENE_IMAGE
{
    unsigned int nOffSet; 
    unsigned int nLength; 
    unsigned int nWidth;  
    unsigned int nHeight; 
    UINT nIndexInData;    
    BYTE byReserved[52];  
} FACE_SCENE_IMAGE;
typedef enum tagEM_OBJECT_COLOR_TYPE
{
    EM_OBJECT_COLOR_TYPE_UNKNOWN,        
    EM_OBJECT_COLOR_TYPE_WHITE,          
    EM_OBJECT_COLOR_TYPE_ORANGE,         
    EM_OBJECT_COLOR_TYPE_PINK,           
    EM_OBJECT_COLOR_TYPE_BLACK,          
    EM_OBJECT_COLOR_TYPE_RED,            
    EM_OBJECT_COLOR_TYPE_YELLOW,         
    EM_OBJECT_COLOR_TYPE_GRAY,           
    EM_OBJECT_COLOR_TYPE_BLUE,           
    EM_OBJECT_COLOR_TYPE_GREEN,          
    EM_OBJECT_COLOR_TYPE_PURPLE,         
    EM_OBJECT_COLOR_TYPE_BROWN,          
    EM_OBJECT_COLOR_TYPE_SLIVER,         
    EM_OBJECT_COLOR_TYPE_DARKVIOLET,     
    EM_OBJECT_COLOR_TYPE_MAROON,         
    EM_OBJECT_COLOR_TYPE_DIMGRAY,        
    EM_OBJECT_COLOR_TYPE_WHITESMOKE,     
    EM_OBJECT_COLOR_TYPE_DARKORANGE,     
    EM_OBJECT_COLOR_TYPE_MISTYROSE,      
    EM_OBJECT_COLOR_TYPE_TOMATO,         
    EM_OBJECT_COLOR_TYPE_OLIVE,          
    EM_OBJECT_COLOR_TYPE_GOLD,           
    EM_OBJECT_COLOR_TYPE_DARKOLIVEGREEN, 
    EM_OBJECT_COLOR_TYPE_CHARTREUSE,     
    EM_OBJECT_COLOR_TYPE_GREENYELLOW,    
    EM_OBJECT_COLOR_TYPE_FORESTGREEN,    
    EM_OBJECT_COLOR_TYPE_SEAGREEN,       
    EM_OBJECT_COLOR_TYPE_DEEPSKYBLUE,    
    EM_OBJECT_COLOR_TYPE_CYAN,           
    EM_OBJECT_COLOR_TYPE_OTHER,          
} EM_OBJECT_COLOR_TYPE;
typedef enum tagEM_HAS_GLASS
{
    EM_HAS_GLASS_UNKNOWN, 
    EM_HAS_GLASS_NO,      
    EM_HAS_GLASS_NORMAL,  
    EM_HAS_GLASS_SUN,     
    EM_HAS_GLASS_BLACK,   
} EM_HAS_GLASS;
typedef enum tagEM_NONMOTOR_OBJECT_STATUS
{
    EM_NONMOTOR_OBJECT_STATUS_UNKNOWN, 
    EM_NONMOTOR_OBJECT_STATUS_NO,      
    EM_NONMOTOR_OBJECT_STATUS_YES,     
} EM_NONMOTOR_OBJECT_STATUS;
typedef enum tagEM_EMOTION_TYPE
{
    EM_EMOTION_TYPE_UNKNOWN,  
    EM_EMOTION_TYPE_NORMAL,   
    EM_EMOTION_TYPE_SMILE,    
    EM_EMOTION_TYPE_ANGER,    
    EM_EMOTION_TYPE_SADNESS,  
    EM_EMOTION_TYPE_DISGUST,  
    EM_EMOTION_TYPE_FEAR,     
    EM_EMOTION_TYPE_SURPRISE, 
    EM_EMOTION_TYPE_NEUTRAL,  
    EM_EMOTION_TYPE_LAUGH,    
    EM_EMOTION_TYPE_HAPPY,    
    EM_EMOTION_TYPE_CONFUSED, 
    EM_EMOTION_TYPE_SCREAM,   
    EM_EMOTION_TYPE_CALMNESS, 
} EM_EMOTION_TYPE;
typedef enum tagEM_CLOTHES_TYPE
{
    EM_CLOTHES_TYPE_UNKNOWN,      
    EM_CLOTHES_TYPE_LONG_SLEEVE,  
    EM_CLOTHES_TYPE_SHORT_SLEEVE, 
    EM_CLOTHES_TYPE_TROUSERS,     
    EM_CLOTHES_TYPE_SHORTS,       
    EM_CLOTHES_TYPE_SKIRT,        
    EM_CLOTHES_TYPE_WAISTCOAT,    
    EM_CLOTHES_TYPE_MINIPANTS,    
    EM_CLOTHES_TYPE_MINISKIRT,    
} EM_CLOTHES_TYPE;
typedef enum tagEM_NEWUPCLOTHES_TYPE
{
    EM_NEWUPCLOTHES_TYPE_UNKNOWN,          
    EM_NEWUPCLOTHES_TYPE_LONG_SLEEVE,      
    EM_NEWUPCLOTHES_TYPE_SHORT_SLEEVE,     
    EM_NEWUPCLOTHES_TYPE_LONGCOAT,         
    EM_NEWUPCLOTHES_TYPE_JACKET_AND_JEANS, 
    EM_NEWUPCLOTHES_TYPE_TSHIRT,           
    EM_NEWUPCLOTHES_TYPE_SPORTWEAR,        
    EM_NEWUPCLOTHES_TYPE_DOWNJACKETS,      
    EM_NEWUPCLOTHES_TYPE_SHIRT,            
    EM_NEWUPCLOTHES_TYPE_DRESS,            
    EM_NEWUPCLOTHES_TYPE_SUIT,             
    EM_NEWUPCLOTHES_TYPE_SWEATER,          
    EM_NEWUPCLOTHES_TYPE_SLEEVELESS,       
    EM_NEWUPCLOTHES_TYPE_VEST,             
} EM_NEWUPCLOTHES_TYPE;
typedef enum tagEM_NEWDOWNCLOTHES_TYPE
{
    EM_NEWDOWNCLOTHES_TYPE_UNKNOWN,  
    EM_NEWDOWNCLOTHES_TYPE_TROUSERS, 
    EM_NEWDOWNCLOTHES_TYPE_SHORTS,   
    EM_NEWDOWNCLOTHES_TYPE_SKIRT,    
} EM_NEWDOWNCLOTHES_TYPE;
typedef enum tagEM_CATEGORY_NONMOTOR_TYPE
{
    EM_CATEGORY_NONMOTOR_TYPE_UNKNOWN,                     
    EM_CATEGORY_NONMOTOR_TYPE_TRICYCLE,                    
    EM_CATEGORY_NONMOTOR_TYPE_MOTORCYCLE,                  
    EM_CATEGORY_NONMOTOR_TYPE_NON_MOTOR,                   
    EM_CATEGORY_NONMOTOR_TYPE_BICYCLE,                     
    EM_CATEGORY_NONMOTOR_TYPE_DUALTRIWHEELMOTORCYCLE,      
    EM_CATEGORY_NONMOTOR_TYPE_LIGHTMOTORCYCLE,             
    EM_CATEGORY_NONMOTOR_TYPE_EMBASSYMOTORCYCLE,           
    EM_CATEGORY_NONMOTOR_TYPE_MARGINALMOTORCYCLE,          
    EM_CATEGORY_NONMOTOR_TYPE_AREAOUTMOTORCYCLE,           
    EM_CATEGORY_NONMOTOR_TYPE_FOREIGNMOTORCYCLE,           
    EM_CATEGORY_NONMOTOR_TYPE_TRIALMOTORCYCLE,             
    EM_CATEGORY_NONMOTOR_TYPE_COACHMOTORCYCLE,             
    EM_CATEGORY_NONMOTOR_TYPE_PASSERBY,                    
    EM_CATEGORY_NONMOTOR_TYPE_VANTRICYCLE,                 
    EM_CATEGORY_NONMOTOR_TYPE_MANNEDCONVERTIBLETRICYCLE,   
    EM_CATEGORY_NONMOTOR_TYPE_NOMANNEDCONVERTIBLETRICYCLE, 
    EM_CATEGORY_NONMOTOR_TYPE_ELECTRICBIKE,                
    EM_CATEGORY_NONMOTOR_TYPE_FOURWHEELER,                 
    EM_CATEGORY_NONMOTOR_TYPE_SCOOTER,                     
} EM_CATEGORY_NONMOTOR_TYPE;
typedef struct tagNET_NONMOTOR_PIC_INFO
{
    UINT uOffset;                  
    UINT uLength;                  
    UINT uWidth;                   
    UINT uHeight;                  
    char szFilePath[MAX_PATH_LEN]; 
    UINT nIndexInData;             
    BYTE byReserved[508];          
} NET_NONMOTOR_PIC_INFO;
typedef struct tagRIDER_FACE_IMAGE_INFO
{
    unsigned int nOffSet; 
    unsigned int nLength; 
    unsigned int nWidth;  
    unsigned int nHeight; 
    UINT nIndexInData;    
    BYTE byReserved[44];  
} RIDER_FACE_IMAGE_INFO;
typedef enum tagEM_STRABISMUS_TYPE
{
    EM_STRABISMUS_UNKNOWN, 
    EM_STRABISMUS_NORMAL,  
    EM_STRABISMUS_YES,     
} EM_STRABISMUS_TYPE;
typedef struct tagNET_FACE_ATTRIBUTE_EX
{
    EM_SEX_TYPE emSex; 
    int nAge;          
    char szReserved[4];
    EM_EYE_STATE_TYPE emEye;         
    EM_MOUTH_STATE_TYPE emMouth;     
    EM_MASK_STATE_TYPE emMask;       
    EM_BEARD_STATE_TYPE emBeard;     
    int nAttractive;                 
    EM_HAS_GLASS emGlass;            
    EM_EMOTION_TYPE emEmotion;       
    DH_RECT stuBoundingBox;          
    BYTE bReserved1[4];              
    EM_STRABISMUS_TYPE emStrabismus; 
    int nAngle[3];                   
    NET_POINT stuObjCenter;          
    BYTE byReserved[48];             
} NET_FACE_ATTRIBUTE_EX;
typedef struct tagNET_FACE_FEATURE_VECTOR_INFO
{
    UINT nOffset;        
    UINT nLength;        
    BOOL bFeatureEnc;    
    BYTE byReserved[28]; 
} NET_FACE_FEATURE_VECTOR_INFO;
typedef struct tagNET_HUMAN_FEATURE_VECTOR_INFO
{
    UINT nOffset;        
    UINT nLength;        
    BOOL bFeatureEnc;    
    BYTE byReserved[28]; 
} NET_HUMAN_FEATURE_VECTOR_INFO;
typedef enum tagEM_FEATURE_VERSION
{
    EM_FEATURE_VERSION_UNKNOWN,                   
    EM_FEATURE_VERSION_FACE_LARGE_1_01_001 = 1,   
    EM_FEATURE_VERSION_FACE_LARGE_1_02_001,       
    EM_FEATURE_VERSION_FACE_LARGE_1_03_001,       
    EM_FEATURE_VERSION_FACE_LARGE_1_04_001,       
    EM_FEATURE_VERSION_FACE_MIDDLE_1_01_002 = 31, 
    EM_FEATURE_VERSION_FACE_MIDDLE_1_02_002,      
    EM_FEATURE_VERSION_FACE_MIDDLE_1_03_002,      
    EM_FEATURE_VERSION_FACE_MIDDLE_1_04_002,      
    EM_FEATURE_VERSION_FACE_MIDDLE_1_09_002 = 39, 
    EM_FEATURE_VERSION_FACE_SMALL_1_01_003 = 61,  
    EM_FEATURE_VERSION_FACE_SMALL_1_02_003,       
    EM_FEATURE_VERSION_HUMAN_NONMOTOR = 91,          
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_FLOAT_1_00_01, 
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_HASH_1_00_01,  
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_FLOAT_1_01_00, 
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_HASH_1_01_00,  
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_FLOAT_1_01_01, 
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_HASH_1_01_01,  
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_FLOAT_1_01_03, 
    EM_FEATURE_VERSION_HUMAN_NONMOTOR_HASH_1_01_03,  
    EM_FEATURE_VERSION_TRAFFIC = 121,         
    EM_FEATURE_VERSION_TRAFFIC_FLOAT,         
    EM_FEATURE_VERSION_TRAFFIC_FLOAT_1_00_01, 
    EM_FEATURE_VERSION_TRAFFIC_HASH_1_00_01,  
    EM_FEATURE_VERSION_TRAFFIC_FLOAT_1_00_02, 
    EM_FEATURE_VERSION_TRAFFIC_HASH_1_00_02,  
    EM_FEATURE_VERSION_SHANGTANG_FACE_1_5_0 = 151, 
    EM_FEATURE_VERSION_SHANGTANG_FACE_1_8_1,       
    EM_FEATURE_VERSION_SHANGTANG_FACE_2_1_3,       
    EM_FEATURE_VERSION_SHANGTANG_FACE_2_39_6,      
    EM_FEATURE_VERSION_SHANGTANG_FACE_2_39_7,      
    EM_FEATURE_VERSION_SHANGTANG_FACE_2_39_8,      
    EM_FEATURE_VERSION_SHANGTANG_FACE_239,         
    EM_FEATURE_VERSION_SHANGTANG_FACE_242,         
    EM_FEATURE_VERSION_SHANGTANG_FACE_244,         
    EM_FEATURE_VERSION_SHANGTANG_FACE_245,         
    EM_FEATURE_VERSION_SHENMO_HUMAN_TRAFFIC_NON_2_4_2 = 181, 
    EM_FEATURE_VERSION_SHENMO_HUMAN_TRAFFIC_NON_2_5_7,       
} EM_FEATURE_VERSION;
typedef enum tagEM_AGE_SEG
{
    EM_AGE_SEG_UNKOWN = 0,  
    EM_AGE_SEG_BABY = 2,    
    EM_AGE_SEG_CHILD = 10,  
    EM_AGE_SEG_YOUTH = 28,  
    EM_AGE_SEG_MIDDLE = 50, 
    EM_AGE_SEG_OLD = 60,    
} EM_AGE_SEG;
typedef struct tagNET_RIDER_INFO
{
    BOOL bFeatureValid; 
    EM_SEX_TYPE emSex;  
    int nAge;           
    EM_NONMOTOR_OBJECT_STATUS emHelmet;     
    EM_NONMOTOR_OBJECT_STATUS emCall;       
    EM_NONMOTOR_OBJECT_STATUS emBag;        
    EM_NONMOTOR_OBJECT_STATUS emCarrierBag; 
    EM_NONMOTOR_OBJECT_STATUS emUmbrella;   
    EM_NONMOTOR_OBJECT_STATUS emGlasses;    
    EM_NONMOTOR_OBJECT_STATUS emMask;       
    EM_EMOTION_TYPE emEmotion;               
    EM_CLOTHES_TYPE emUpClothes;             
    EM_CLOTHES_TYPE emDownClothes;           
    EM_OBJECT_COLOR_TYPE emUpperBodyColor;   
    EM_OBJECT_COLOR_TYPE emLowerBodyColor;   
    BOOL bHasFaceImage;                      
    RIDER_FACE_IMAGE_INFO stuFaceImage;      
    BOOL bHasFaceAttributes;                 
    NET_FACE_ATTRIBUTE_EX stuFaceAttributes; 
    EM_HAS_HAT emHasHat;                     
    EM_CAP_TYPE emCap;                       
    EM_HAIR_STYLE emHairStyle;               
    NET_FACE_FEATURE_VECTOR_INFO stuFaceFeatureVectorInfo;   
    EM_FEATURE_VERSION emFaceFeatureVersion;                 
    NET_HUMAN_FEATURE_VECTOR_INFO stuHumanFeatureVectorInfo; 
    EM_FEATURE_VERSION emHumanFeatureVersion;                
    UINT nAgeConf;                                           
    UINT nUpColorConf;                                       
    UINT nDownColorConf;                                     
    UINT nUpTypeConf;                                        
    UINT nDownTypeConf;                                      
    UINT nHatTypeConf;                                       
    UINT nHairTypeConf;                                      
    EM_CLOTHES_PATTERN emUpperPattern;                       
    UINT nUpClothes;                                         
    EM_UNIFORM_STYLE emUniformStyle;         
    UINT nRainCoat;                          
    EM_COAT_TYPE emCoatStyle;                
    EM_AGE_SEG emAgeSeg;                     
    UINT nShoulderBag;                       
    UINT nMessengerBag;                      
    BOOL bNewUpClothes;                      
    EM_NEWUPCLOTHES_TYPE emNewUpClothes;     
    BOOL bNewDownClothes;                    
    EM_NEWDOWNCLOTHES_TYPE emNewDownClothes; 
    BYTE byReserved[140];                    
} NET_RIDER_INFO;
#define MAX_RIDER_NUM 16 
typedef struct tagNET_NONMOTOR_FEATURE_VECTOR_INFO
{
    UINT nOffset;        
    UINT nLength;        
    BOOL bFeatureEnc;    
    BYTE byReserved[28]; 
} NET_NONMOTOR_FEATURE_VECTOR_INFO;
typedef struct tagNET_NONMOTOR_PLATE_IMAGE
{
    UINT nOffset;         
    UINT nLength;         
    UINT nWidth;          
    UINT nHeight;         
    UINT nIndexInData;    
    BYTE byReserved[508]; 
} NET_NONMOTOR_PLATE_IMAGE;
typedef enum tagEM_PLATE_COLOR_TYPE
{
    EM_PLATE_COLOR_UNKNOWN,                  
    EM_PLATE_COLOR_OTHER,                    
    EM_PLATE_COLOR_BLUE,                     
    EM_PLATE_COLOR_YELLOW,                   
    EM_PLATE_COLOR_WHITE,                    
    EM_PLATE_COLOR_BLACK,                    
    EM_PLATE_COLOR_RED,                      
    EM_PLATE_COLOR_GREEN,                    
    EM_PLATE_COLOR_SHADOW_GREEN,             
    EM_PLATE_COLOR_YELLOW_GREEN,             
    EM_PLATE_COLOR_YELLOW_BOTTOM_BLACK_TEXT, 
    EM_PLATE_COLOR_BLUE_BOTTOM_WHITE_TEXT,   
    EM_PLATE_COLOR_BLACK_BOTTOM_WHITE_TEXT,  
} EM_PLATE_COLOR_TYPE;
typedef struct tagNET_NONMOTOR_PLATE_INFO
{
    char szPlateNumber[128];                
    NET_RECT stuBoundingBox;                
    NET_RECT stuOriginalBoundingBox;        
    NET_NONMOTOR_PLATE_IMAGE stuPlateImage; 
    EM_PLATE_COLOR_TYPE emPlateColor;       
    BYTE byReserved[132]; 
} NET_NONMOTOR_PLATE_INFO;
typedef enum tagEM_OBJECT_NONMOTORANGLE_TYPE 
{
    EM_OBJECT_NONMOTORANGLE_TYPE_UNKNOWN, 
    EM_OBJECT_NONMOTORANGLE_TYPE_FRONT,   
    EM_OBJECT_NONMOTORANGLE_TYPE_SIDE,    
    EM_OBJECT_NONMOTORANGLE_TYPE_BEHIND,  
} EM_OBJECT_NONMOTORANGLE_TYPE;
typedef enum tagEM_OBJECT_BASKET_TYPE 
{
    EM_OBJECT_BASKET_UNKNOWN, 
    EM_OBJECT_BASKET_NO,      
    EM_OBJECT_BASKET_YES,     
} EM_OBJECT_BASKET_TYPE;
typedef enum tagEM_OBJECT_STORAGEBOX_TYPE 
{
    EM_OBJECT_STORAGEBOX_UNKNOWN,  
    EM_OBJECT_STORAGEBOX_NO,       
    EM_OBJECT_STORAGEBOX_OWNBOX,   
    EM_OBJECT_STORAGEBOX_SELFPACK, 
    EM_OBJECT_STORAGEBOX_ALL,      
} EM_OBJECT_STORAGEBOX_TYPE;
typedef enum tagEM_RAIN_SHED_TYPE
{
    EM_RAIN_SHED_TYPE_NONE = -1,         
    EM_RAIN_SHED_TYPE_NO_UMBRELLA,       
    EM_RAIN_SHED_TYPE_NOT_PEOPLE_HOLD,   
    EM_RAIN_SHED_TYPE_UNKOWN,            
    EM_RAIN_SHED_TYPE_NO_MOTOR_UMBRELLA, 
    EM_RAIN_SHED_TYPE_NO_MOTOR_CANOPY,   
} EM_RAIN_SHED_TYPE;
typedef struct tagVA_OBJECT_NONMOTOR
{
    int nObjectID;                                                 
    EM_CATEGORY_NONMOTOR_TYPE emCategory;                          
    DH_RECT stuBoundingBox;                                        
    DH_RECT stuOriginalBoundingBox;                                
    NET_COLOR_RGBA stuMainColor;                                   
    EM_OBJECT_COLOR_TYPE emColor;                                  
    BOOL bHasImage;                                                
    NET_NONMOTOR_PIC_INFO stuImage;                                
    int nNumOfCycling;                                             
    NET_RIDER_INFO stuRiderList[MAX_RIDER_NUM];                    
    SCENE_IMAGE_INFO stuSceneImage;                                
    FACE_SCENE_IMAGE stuFaceSceneImage;                            
    int nNumOfFace;                                                
    float fSpeed;                                                  
    NET_NONMOTOR_FEATURE_VECTOR_INFO stuNonMotorFeatureVectorInfo; 
    EM_FEATURE_VERSION emNonMotorFeatureVersion;                   
    NET_NONMOTOR_PLATE_INFO stuNomotorPlateInfo;           
    NET_POINT stuObjCenter;                                
    NET_FACE_FEATURE_VECTOR_INFO stuFaceFeatureVectorInfo; 
    EM_FEATURE_VERSION emFaceFeatureVersion;               
    int nCategoryConf;                                     
    char szNonMotorFeatureVersion[32];                     
    EM_OBJECT_NONMOTORANGLE_TYPE emNonMotorAngle;          
    EM_OBJECT_BASKET_TYPE emBasket;                        
    EM_OBJECT_STORAGEBOX_TYPE emStorageBox;                
    UINT nCompleteScore;                                   
    UINT nClarityScore;                                    
    UINT nStartSequence;                                   
    UINT nEndSequence;                                     
    BOOL bIsErrorDetect;                                   
    UINT nImageLightType;                                  
    UINT nAbsScore;                                        
    EM_RAIN_SHED_TYPE emRainShedType;                      
    char szSerialUUID[22];                                 
    char szReserved[2];                                    
    UINT nHumanFeatureExtractSingle;                       
    BYTE byReserved[2920];                                 
} VA_OBJECT_NONMOTOR;
typedef struct tagEVENT_PLATE_INFO
{
    char szFrontPlateNumber[64];           
    EM_PLATE_COLOR_TYPE emFrontPlateColor; 
    char szBackPlateNumber[64];            
    EM_PLATE_COLOR_TYPE emBackPlateColor;  
    BYTE reversed[128];                    
} EVENT_PLATE_INFO;
typedef enum tagEM_VEHICLE_POSTURE_TYPE
{
    EM_VEHICLE_POSTURE_TYPE_UNKNOWN,      
    EM_VEHICLE_POSTURE_TYPE_VEHICLE_HEAD, 
    EM_VEHICLE_POSTURE_TYPE_VEHICLE_SIDE, 
    EM_VEHICLE_POSTURE_TYPE_VEHICLE_TAIL, 
} EM_VEHICLE_POSTURE_TYPE;
typedef enum tagEM_TRACK_CAR_STATUS
{
    EM_TRACK_CAR_STATUS_UNKNOWN, 
    EM_TRACK_CAR_STATUS_START,   
    EM_TRACK_CAR_STATUS_END,     
} EM_TRACK_CAR_STATUS;
typedef enum tagEM_CAR_DRIVING_DIRECTION
{
    EM_CAR_DRIVING_DIRECTION_UNKNOWN,       
    EM_CAR_DRIVING_DIRECTION_DRIVE_IN_AREA, 
    EM_CAR_DRIVING_DIRECTION_EXIT_AREA,     
} EM_CAR_DRIVING_DIRECTION;
typedef struct tagDEV_EVENT_TRAFFICJUNCTION_INFO
{
    int nChannelID;          
    char szName[128];        
    BYTE byMainSeatBelt;     
    BYTE bySlaveSeatBelt;    
    BYTE byVehicleDirection; 
    BYTE byOpenStrobeState;  
    double PTS;              
    NET_TIME_EX UTC;         
    int nEventID;            
    DH_MSG_OBJECT stuObject; 
    int nLane;               
    DWORD dwBreakingRule;    
    NET_TIME_EX RedLightUTC;                  
    DH_EVENT_FILE_INFO stuFileInfo;           
    int nSequence;                            
    int nSpeed;                               
    BYTE bEventAction;                        
    BYTE byDirection;                         
    BYTE byLightState;                        
    BYTE byReserved;                          
    BYTE byImageIndex;                        
    DH_MSG_OBJECT stuVehicle;                 
    DWORD dwSnapFlagMask;                     
    DH_RESOLUTION_INFO stuResolution;         
    char szRecordFile[DH_COMMON_STRING_128];  
    EVENT_JUNCTION_CUSTOM_INFO stuCustomInfo; 
    BYTE byPlateTextSource;                   
    BYTE bReserved1[3];                       
    NET_GPS_INFO stuGPSInfo;                  
    BYTE byNoneMotorInfo;             
    BYTE byBag;                       
    BYTE byUmbrella;                  
    BYTE byCarrierBag;                
    BYTE byHat;                       
    BYTE byHelmet;                    
    BYTE bySex;                       
    BYTE byAge;                       
    NET_COLOR_RGBA stuUpperBodyColor; 
    NET_COLOR_RGBA stuLowerBodyColor; 
    BYTE byUpClothes;                 
    BYTE byDownClothes;               
    NET_EXTENSION_INFO stuExtensionInfo;                
    BYTE bReserved[22];                                 
    int nTriggerType;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;     
    DWORD dwRetCardNumber;                              
    EVENT_CARD_INFO stuCardInfo[DH_EVENT_MAX_CARD_NUM]; 
    EVENT_COMM_INFO stCommInfo;                         
    BOOL bNonMotorInfoEx;                       
    VA_OBJECT_NONMOTOR stuNonMotor;             
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    EVENT_PLATE_INFO stuPlateInfo;              
    BOOL bSceneImage;                           
    SCENE_IMAGE_INFO_EX stuSceneImage;          
    DH_MSG_OBJECT* pstObjects;                      
    int nObjectNum;                                 
    EM_VEHICLE_POSTURE_TYPE emVehiclePosture;       
    UINT nVehicleSignConfidence;                    
    UINT nVehicleCategoryConfidence;                
    EM_CAR_DRIVING_DIRECTION emCarDrivingDirection; 
    NET_IMAGE_INFO_EX2 stuImageInfo[32];            
    int nImageInfoNum;                              
    char szSerialNo[128];                           
    UINT nAlarmCompliance;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
    DH_MSG_OBJECT_SUPPLEMENT stObjectInfoEx;        
    DH_MSG_OBJECT_EX2* pstuObjectEx2;               
    DH_MSG_OBJECT_EX2* pstuVehicleEx2;              
    DH_MSG_OBJECT_EX2* pstuObjectsEx2;              
    UINT nPresetID;                                 
    int nTransfer;                                  
    char szFeatureVersion[32];                      
    UINT nDetectMode;                               
    char byReserved2[544 - 3 * POINTERSIZE];        
} DEV_EVENT_TRAFFICJUNCTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NONMOTORINMOTORROUTE_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    BYTE bEventAction;              
    BYTE bReserved1[3];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DWORD dwSnapFlagMask;                    
    DH_RESOLUTION_INFO stuResolution;        
    char szRecordFile[DH_COMMON_STRING_128]; 
    int nLane;                      
    int nSequence;                  
    EVENT_COMM_INFO stCommInfo;     
    BOOL bHasNonMotor;              
    VA_OBJECT_NONMOTOR stuNonMotor; 
    BYTE bReserved[4096];           
} DEV_EVENT_TRAFFIC_NONMOTORINMOTORROUTE_INFO;
typedef struct tagNET_VEHICLE_INFO
{
    UINT nUID;              
    char szGroupID[64];     
    char szGroupName[128];  
    char szPlateNumber[64]; 
    char szPlateCountry[4]; 
    int nPlateType;         
    int nVehicleType;               
    int nBrand;                     
    int nCarSeries;                 
    int nCarSeriesModelYearIndex;   
    NET_COLOR_RGBA stuVehicleColor; 
    NET_COLOR_RGBA stuPlateColor;   
    char szOwnerName[64];           
    int nSex;                       
    int nCertificateType;           
    char szPersonID[32];            
    char szOwnerCountry[4];         
    char szProvince[64];            
    char szCity[64];                
    char szHomeAddress[128];        
    char szEmail[32];               
    char szPhoneNo[128];            
    int nVehicleColorState;         
    int nPlateColorState;           
    BYTE bReserved[504];
} NET_VEHICLE_INFO;
#define MAX_CAR_CANDIDATE_NUM (50)
typedef struct tagNET_CAR_CANDIDATE_INFO
{
    NET_VEHICLE_INFO stuVehicleInfo; 
    int nDifferentAttributresNum;    
    int nDifferentAttributres[16];   
    BYTE byReserved[512];
} NET_CAR_CANDIDATE_INFO;
typedef struct tagDEV_EVENT_VEHICLE_RECOGNITION_INFO
{
    char szName[128];   
    double PTS;         
    NET_TIME_EX UTC;    
    int nEventID;       
    int nVehicleAction; 
    DH_MSG_OBJECT stuObject;  
    DH_MSG_OBJECT stuVehicle; 
    NET_SEAT_INFO stuMainSeatInfo;          
    NET_SEAT_INFO stuSlaveSeatInfo;         
    int nVehicleAttachNum;                  
    NET_VEHICLE_ATTACH stuVehicleAttach[8]; 
    char szCountry[32];                     
    int nCarCandidateNum;                                          
    NET_CAR_CANDIDATE_INFO stuCarCandidate[MAX_CAR_CANDIDATE_NUM]; 
    EVENT_COMM_INFO stCommInfo;        
    int nChannel;                      
    int nImageInfoNum;                 
    NET_IMAGE_INFO_EX2* pstuImageInfo; 
    BYTE bReserved[1020 - POINTERSIZE];
} DEV_EVENT_VEHICLE_RECOGNITION_INFO;
typedef struct tagDEV_EVENT_TRAFFICGATE_INFO
{
    int nChannelID;                                      
    char szName[128];                                    
    BYTE byOpenStrobeState;                              
    char bReserved1[3];                                  
    double PTS;                                          
    NET_TIME_EX UTC;                                     
    int nEventID;                                        
    DH_MSG_OBJECT stuObject;                             
    int nLane;                                           
    int nSpeed;                                          
    int nSpeedUpperLimit;                                
    int nSpeedLowerLimit;                                
    DWORD dwBreakingRule;                                
    DH_EVENT_FILE_INFO stuFileInfo;                      
    DH_MSG_OBJECT stuVehicle;                            
    BYTE szManualSnapNo[64];                             
    int nSequence;                                       
    BYTE bEventAction;                                   
    BYTE byReserved[3];                                  
    BYTE szSnapFlag[16];                                 
    BYTE bySnapMode;                                     
    BYTE byOverSpeedPercentage;                          
    BYTE byUnderSpeedingPercentage;                      
    BYTE byRedLightMargin;                               
    BYTE byDriveDirection;                               
    char szRoadwayNo[32];                                
    char szViolationCode[16];                            
    char szViolationDesc[128];                           
    DH_RESOLUTION_INFO stuResolution;                    
    char szVehicleType[32];                              
    BYTE byVehicleLenth;                                 
    BYTE byLightState;                                   
    BYTE byReserved1;                                    
    BYTE byImageIndex;                                   
    int nOverSpeedMargin;                                
    int nUnderSpeedMargin;                               
    char szDrivingDirection[3][DH_MAX_DRIVINGDIRECTION]; 
    char szMachineName[256];                             
    char szMachineAddress[256];                          
    char szMachineGroup[256];                            
    DWORD dwSnapFlagMask;                                
    DH_SIG_CARWAY_INFO_EX stuSigInfo;                    
    char szFilePath[MAX_PATH];                           
    NET_TIME_EX RedLightUTC;                             
    char* szDeviceAddress;                               
    float fActualShutter;                                
    BYTE byActualGain;                                   
    BYTE byDirection;                                    
    BYTE bReserve;                                       
    BYTE bRetCardNumber;                                 
    EVENT_CARD_INFO stuCardInfo[DH_EVENT_MAX_CARD_NUM];  
    char szDefendCode[DH_COMMON_STRING_64];              
    int nTrafficBlackListID;                             
    EVENT_COMM_INFO stCommInfo;                          
    EM_VEHICLE_DIRECTION emVehicleDirection;             
    BYTE bReserved[448];                                 
} DEV_EVENT_TRAFFICGATE_INFO;
typedef struct tagDEV_EVENT_TRAFFICSNAPSHOT_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    BYTE bReserv[3];                                 
    BYTE bCarWayCount;                               
    DH_CARWAY_INFO stuCarWayInfo[DH_MAX_CARWAY_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;          
    DWORD dwSnapFlagMask;       
    BYTE bReserved[344];        
    EVENT_COMM_INFO stCommInfo; 
} DEV_EVENT_TRAFFICSNAPSHOT_INFO;
typedef enum tagEM_RED_LIGHT_DIRECTION
{
    EM_RED_LIGHT_DIRECTION_UNKNOWN,      
    EM_RED_LIGHT_DIRECTION_STRAIGHT,     
    EM_RED_LIGHT_DIRECTION_TURNLEFT,     
    EM_RED_LIGHT_DIRECTION_TURNRIGHT,    
    EM_RED_LIGHT_DIRECTION_UTURN,        
    EM_RED_LIGHT_DIRECTION_FORWARDLEFT,  
    EM_RED_LIGHT_DIRECTION_FORWARDRIGHT, 
} EM_RED_LIGHT_DIRECTION;
typedef struct tagDEV_EVENT_TRAFFIC_RUNREDLIGHT_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nLightState;                
    int nSpeed;                     
    int nSequence;                  
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    NET_TIME_EX stRedLightUTC;                      
    DH_RESOLUTION_INFO stuResolution;               
    BYTE byRedLightMargin;                          
    BYTE byAlignment[3];                            
    int nRedLightPeriod;                            
    NET_GPS_INFO stuGPSInfo;                        
    int nDirectionCount;                            
    EM_RED_LIGHT_DIRECTION emDirection[8];          
    BYTE bReserved[892];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    BOOL bHasNonMotor;                              
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_RUNREDLIGHT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PEDESTRAINRUNREDLIGHT_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE bReserved[1024];             
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_TRAFFIC_PEDESTRAINRUNREDLIGHT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PASSNOTINORDER_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[984];                            
} DEV_EVENT_TRAFFIC_PASSNOTINORDER_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_OVERLINE_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    int nSpeed;                     
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[968];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_OVERLINE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_RETROGRADE_INFO
{
    int nChannelID;                 
    char szName[128];               
    UINT nRuleID;                   
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    int nSpeed;                     
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                               
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    BOOL bIsExistAlarmRecord;                        
    DWORD dwAlarmRecordSize;                         
    char szAlarmRecordPath[DH_COMMON_STRING_256];    
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    NET_GPS_INFO stuGPSInfo;                         
    BYTE bReserved[484];                             
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;  
    int nDetectNum;                                  
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    EVENT_COMM_INFO stCommInfo;                      
    BOOL bHasNonMotor;                               
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_TRAFFIC_RETROGRADE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_TURNLEFT_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    int nSpeed;                     
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[968];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    BOOL bHasNonMotor;                              
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_TURNLEFT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_TURNRIGHT_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    int nSpeed;                     
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[968];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_TURNRIGHT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_UTURN_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    int nSpeed;                     
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[968];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_UTURN_INFO;
typedef struct tagNET_REGION_INFO
{
    NET_TIME stuDriveInTime;  
    NET_TIME stuDriveOutTime; 
    BYTE bReserved[1024];     
} NET_REGION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_OVERSPEED_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSpeed;                     
    int nSpeedUpperLimit;           
    int nSpeedLowerLimit;           
    int nSequence;                  
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    char szFilePath[MAX_PATH];                      
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    NET_GPS_INFO stuGPSInfo;                        
    int nSpeedingPercentage;                        
    BYTE bReserved[572];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    NET_REGION_INFO stRegionInfo;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    BOOL bHasNonMotor;                              
} DEV_EVENT_TRAFFIC_OVERSPEED_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_UNDERSPEED_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved2[4];                             
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    int nLane;                                      
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DH_EVENT_FILE_INFO stuFileInfo;                 
    int nSpeed;                                     
    int nSpeedUpperLimit;                           
    int nSpeedLowerLimit;                           
    int nSequence;                                  
    BYTE bEventAction;                              
    BYTE bReserved1[2];                             
    BYTE byImageIndex;                              
    int nUnderSpeedingPercentage;                   
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[832];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_UNDERSPEED_INFO;
typedef struct tagDEV_EVENT_ALARM_JAMFORBIDINTO_INFO
{
    int nChannelID;                                  
    char szName[DH_EVENT_NAME_LEN];                  
    char bReserved1[4];                              
    DWORD PTS;                                       
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nMark;                                       
    int nSource;                                     
    int nSequence;                                   
    int nFrameSequence;                              
    int nLane;                                       
    BYTE byImageIndex;                               
    DH_MSG_OBJECT stuObject;                         
    NET_GPS_INFO stuGPSInfo;                         
    BYTE bReserved[984];                             
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                      
    DH_MSG_OBJECT stuVehicle;                        
    DH_RESOLUTION_INFO stuResolution;                
} DEV_EVENT_ALARM_JAMFORBIDINTO_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_JAM_STOP_ON_ZEBRACROSSING_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;                  
    int nLane;                      
    BYTE byImageIndex;              
    BYTE byReserved[3];
    DH_MSG_OBJECT stuObject;                         
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DH_MSG_OBJECT stuVehicle;                        
    DH_RESOLUTION_INFO stuResolution;                
    DWORD dwSnapFlagMask;                            
    BYTE bReserved[2048];                            
} DEV_EVENT_TRAFFIC_JAM_STOP_ON_ZEBRACROSSING_INFO;
typedef struct tagEVENT_PIC_ANALYSE_INFO
{
    DH_MSG_OBJECT stuObject;     
    DH_MSG_OBJECT stuVehicle;    
    EVENT_COMM_INFO stuCommInfo; 
    BYTE bReserved[1024];        
} EVENT_PIC_ANAKYSE_INFO;
typedef struct tagDEV_ALARM_PIC_ANALYSE_INFO
{
    int nIndex;                            
    char szName[128];                      
    double PTS;                            
    NET_TIME_EX UTC;                       
    int nEventID;                          
    DH_MSG_OBJECT stuObject;               
    DH_MSG_OBJECT stuVehicle;              
    int nGroupID;                          
    int nCountInGroup;                     
    int nIndexInGroup;                     
    char szFilePath[MAX_PATH];             
    EVENT_COMM_INFO stuCommInfo;           
    EVENT_PIC_ANAKYSE_INFO stuAnalyseInfo; 
    BYTE bReserved[1024];                  
} ALARM_PIC_ANALYSE_INFO;
typedef struct tagNET_BULLET_HOLES_INFO
{
    int nObjectID;          
    char szObjectType[128]; 
    DH_RECT stuBoundingBox; 
    DH_POINT stuCenter;     
    int nSequence;          
    int nScore;             
    BYTE byReserved[512];   
} NET_BULLET_HOLES_INFO;
typedef struct tagDEV_ALARM_PIC_SHOOTINGSCORERECOGNITION_INFO
{
    int nIndex;                                                    
    char szName[128];                                              
    double dbPTS;                                                  
    NET_TIME_EX stuUTC;                                            
    int nEventID;                                                  
    int nGroupID;                                                  
    int nCountInGroup;                                             
    int nIndexInGroup;                                             
    char szFilePath[MAX_PATH];                                     
    DH_POINT stuDetectRegion;                                      
    int nValidBulletHolesNum;                                      
    NET_BULLET_HOLES_INFO stuBulletHolesInfo[DH_MAX_BULLET_HOLES]; 
    BYTE bReserved[1024];                                          
} ALARM_PIC_SHOOTINGSCORERECOGNITION_INFO;
typedef struct tagNET_ALARM_OIL_4G_OVERFLOW_INFO
{
    int nChannelID;        
    double dbPTS;          
    NET_TIME_EX stuTime;   
    int nFlowRateCur;      
    int nFlowRateMax;      
    BYTE byReserved[1024]; 
} NET_ALARM_OIL_4G_OVERFLOW_INFO;
typedef enum tagEM_ALARM_INTERFACE_TYPE
{
    EM_ALARM_INTERFACE_TYPE_UNKNOWN, 
    EM_ALARM_INTERFACE_TYPE_A,       
    EM_ALARM_INTERFACE_TYPE_B,       
    EM_ALARM_INTERFACE_TYPE_C,       
} EM_ALARM_INTERFACE_TYPE;
typedef struct tagDEV_ALARM_POWERSWITCHER_INFO
{
    int nEventAction;                        
    int nEventIndex;                         
    char szName[128];                        
    NET_TIME_EX stuUTC;                      
    int nPowerVoltage;                       
    int nPowerCurrent;                       
    int nPowerValue;                         
    int nSwitchOn;                           
    int nPowerState;                         
    EM_ALARM_INTERFACE_TYPE emInterfaceType; 
    BYTE byReserved[1020];                   
} DEV_ALRAM_POWERSWITCHER_INFO;
typedef struct tagDEV_ALARM_PIC_SCENECHANGE_INFO
{
    int nChannelID;       
    int nEventAction;     
    double dbPTS;         
    NET_TIME_EX stuUTC;   
    int nEventID;         
    BYTE bReserved[1024]; 
} ALARM_PIC_SCENECHANGE_INFO;
typedef struct tagDEV_ALRAM_SCENECHANGE_INFO
{
    int nChannelID;     
    int nEventAction;   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    DH_EVENT_FILE_INFO stuFileInfo;       
    BYTE byImageIndex;                    
    DWORD dwSnapFlagMask;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE bReserved[1024];                 
} DEV_ALRAM_SCENECHANGE_INFO;
typedef struct tagDEV_EVENT_SNAPMANUAL
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE byImageIndex;              
    DWORD dwSnapFlagMask;           
    BYTE bReserved[1024];           
} DEV_EVENT_SNAPMANUAL;
typedef struct tagALARM_SWIPE_OVERTIME_INFO
{
    NET_TIME_EX stuTime; 
    BYTE bReserved[1024];
} ALARM_SWIPE_OVERTIME_INFO;
typedef struct tagALARM_DRIVING_WITHOUTCARD_INFO
{
    NET_TIME_EX stuTime; 
    BYTE bReserved[1024];
} ALARM_DRIVING_WITHOUTCARD_INFO;
typedef struct tagNET_FACE_INFO
{
    int nObjectID;          
    char szObjectType[128]; 
    int nRelativeID;        
    DH_RECT BoundingBox;    
    DH_POINT Center;        
} NET_FACE_INFO;
typedef struct tagNET_HUMAN_TEMPERATURE_INFO
{
    double dbTemperature;                        
    EM_HUMAN_TEMPERATURE_UNIT emTemperatureUnit; 
    BOOL bIsOverTemp;                            
    BOOL bIsUnderTemp;                           
    BYTE bReserved[132];                         
} NET_HUMAN_TEMPERATURE_INFO;
typedef struct tagDEV_EVENT_FACEDETECT_INFO
{
    int nChannelID;                                                                
    char szName[128];                                                              
    char bReserved1[4];                                                            
    double PTS;                                                                    
    NET_TIME_EX UTC;                                                               
    int nEventID;                                                                  
    DH_MSG_OBJECT stuObject;                                                       
    DH_EVENT_FILE_INFO stuFileInfo;                                                
    BYTE bEventAction;                                                             
    BYTE reserved[2];                                                              
    BYTE byImageIndex;                                                             
    int nDetectRegionNum;                                                          
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM];                               
    DWORD dwSnapFlagMask;                                                          
    char szSnapDevAddress[MAX_PATH];                                               
    unsigned int nOccurrenceCount;                                                 
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;                                        
    int nAge;                                                                      
    unsigned int nFeatureValidNum;                                                 
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emFeature[DH_MAX_FACEDETECT_FEATURE_NUM]; 
    int nFacesNum;                                                                 
    NET_FACE_INFO stuFaces[10];                                                    
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;                                    
    char szReserved1[4];
    EM_EYE_STATE_TYPE emEye;                        
    EM_MOUTH_STATE_TYPE emMouth;                    
    EM_MASK_STATE_TYPE emMask;                      
    EM_BEARD_STATE_TYPE emBeard;                    
    int nAttractive;                                
    char szUID[DH_COMMON_STRING_32];                
    BYTE bReserved2[4];                             
    NET_FEATURE_VECTOR stuFeatureVector;            
    char szFeatureVersion[32];                      
    EM_FACE_DETECT_STATUS emFaceDetectStatus;       
    NET_EULER_ANGLE stuFaceCaptureAngle;            
    UINT nFaceQuality;                              
    double dHumanSpeed;                             
    int nFaceAlignScore;                            
    int nFaceClarity;                               
    BOOL bHumanTemperature;                         
    NET_HUMAN_TEMPERATURE_INFO stuHumanTemperature; 
    char szCameraID[64];                            
    DH_RESOLUTION_INFO stuResolution;               
    NET_FACE_ORIGINAL_SIZE stuOriginalSize;         
    EM_GLASS_STATE_TYPE emGlass;                    
    EM_HAT_STYLE emHat;                             
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
    NET_IMAGE_INFO_EX3* pstuImageInfo;              
    int nImageInfoNum;                              
    BYTE bReserved[392 - POINTERSIZE];              
} DEV_EVENT_FACEDETECT_INFO;
typedef struct tagDEV_EVENT_TRAFFICJAM_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved1[4];                             
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    int nLane;                                      
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE bEventAction;                              
    BYTE bJamLenght;                                
    BYTE reserved;                                  
    BYTE byImageIndex;                              
    NET_TIME_EX stuStartJamTime;                    
    int nSequence;                                  
    int nAlarmIntervalTime;                         
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    int nJamRealLength;                             
    NET_EXTENSION_INFO stuExtensionInfo;            
    BOOL bJamRegionFlagValid;                       
    UINT nJamRegionFlag;                            
    BYTE bReserved[868];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFICJAM_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKING_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    UINT nRuleID;                                    
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    int nLane;                                       
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE reserved[2];                                
    BYTE byImageIndex;                               
    NET_TIME_EX stuStartParkingTime;                 
    int nSequence;                                   
    int nAlarmIntervalTime;                          
    int nParkingAllowedTime;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    BOOL bIsExistAlarmRecord;                        
    DWORD dwAlarmRecordSize;                         
    char szAlarmRecordPath[DH_COMMON_STRING_256];    
    char szFTPPath[DH_COMMON_STRING_256];            
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    BYTE byPreAlarm;                                 
    BYTE bReserved2[3];                              
    NET_GPS_INFO stuGPSInfo;                         
    NET_IMAGE_INFO_EX2* pstuImageInfo;               
    int nImageInfoNum;                               
    int nPresetID;                                   
    char szSN[32];                                   
    BYTE bReserved[184];                             
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;  
    EVENT_COMM_INFO stCommInfo;                      
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    BOOL bHasNonMotor;                               
    UINT nParkingDuration;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_TRAFFIC_PARKING_INFO, DEV_EVENT_TRAFFIC_PARKING_B_INFO, DEV_EVENT_TRAFFIC_PARKING_C_INFO, DEV_EVENT_TRAFFIC_PARKING_D_INFO, DEV_EVENT_TRAFFIC_PARKING_MANUAL_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_WRONGROUTE_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    int nLane;                      
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    int nSpeed;                                     
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[972];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_WRONGROUTE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_CROSSLANE_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    int nLane;                      
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                               
    int nSpeed;                                      
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    NET_GPS_INFO stuGPSInfo;                         
    BYTE bReserved[836];                             
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_TRAFFIC_CROSSLANE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_OVERYELLOWLINE_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    int nLane;                      
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    int nSpeed;                                     
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    BOOL bIsExistAlarmRecord;                       
    DWORD dwAlarmRecordSize;                        
    char szAlarmRecordPath[DH_COMMON_STRING_256];   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    BYTE bReserved[532];                            
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nDetectNum;                                  
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    EVENT_COMM_INFO stCommInfo;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_TRAFFIC_OVERYELLOWLINE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_DRIVINGONSHOULDER_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    int nLane;                      
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    int nSpeed;                                     
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_DRIVINGONSHOULDER_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_YELLOWPLATEINLANE_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    int nLane;                      
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    int nSpeed;                                     
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    BYTE bReserved[1016];                           
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_YELLOWPLATEINLANE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NOPASSING_INFO
{
    int nChannelID;                                 
    char szName[DH_EVENT_NAME_LEN];                 
    int nTriggerType;                               
    DWORD PTS;                                      
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    int UTCMS;                                      
    int nMark;                                      
    int nSequence;                                  
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE bEventAction;                              
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    BYTE byImageIndex;                              
    BYTE byReserved1[3];
    int nLane;                  
    DH_MSG_OBJECT stuObject;    
    DH_MSG_OBJECT stuVehicle;   
    int nFrameSequence;         
    int nSource;                
    NET_GPS_INFO stuGPSInfo;    
    BYTE byReserved[984];       
    EVENT_COMM_INFO stCommInfo; 
} DEV_EVENT_TRAFFIC_NOPASSING_INFO;
typedef struct tagDH_TRAFFICFLOWSTAT
{
    char szMachineAddress[256];     
    char szMachineName[256];        
    char szDrivingDirection[3][32]; 
    int nLane;                      
    NET_TIME_EX UTC;                
    int nPeriod;                    
    int nVehicles;                  
    float fAverageSpeed;            
    float fAverageLength;           
    float fTimeOccupyRatio;         
    float fSpaceOccupyRatio;        
    float fSpaceHeadway;            
    float fTimeHeadway;             
    float fDensity;                 
    int nOverSpeedVehicles;         
    int nUnderSpeedVehicles;        
    int nLargeVehicles;             
    int nMediumVehicles;            
    int nSmallVehicles;             
    int nMotoVehicles;              
    int nLongVehicles;              
    char szChannel[64];             
    char szResvered[1024];          
} DH_TRAFFICFLOWSTAT;
typedef struct tagDEV_EVENT_TRAFFIC_FLOWSTAT_INFO
{
    char szName[128];                                       
    double PTS;                                             
    NET_TIME_EX UTC;                                        
    int nEventID;                                           
    int nLaneCnt;                                           
    DH_TRAFFICFLOWSTAT stTrafficFlowStats[DH_MAX_LANE_NUM]; 
    char Reserved[4];                                       
} DEV_EVENT_TRAFFIC_FLOWSTAT_INFO;
typedef struct tagEVENT_MANUALSNAP_CUSTOM_DATA
{
    EVENT_CUSTOM_WEIGHT_INFO stuWeighInfo; 
    BYTE byReserved[472];                  
} EVENT_MANUALSNAP_CUSTOM_DATA;
typedef struct tagEVENT_MANUALSNAP_PARKING_INFO
{
    UINT nChannel;          
    UINT nStatus;           
    char szPlateNumber[64]; 
    char szParkingNo[32];   
    char szReserved[128];   
} EVENT_MANUALSNAP_PARKING_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_MANUALSNAP_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved1[4];                             
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    int nLane;                                      
    BYTE szManualSnapNo[64];                        
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE bEventAction;                              
    BYTE byOpenStrobeState;                         
    BYTE byReserved[1];
    BYTE byImageIndex;                                
    DWORD dwSnapFlagMask;                             
    DH_RESOLUTION_INFO stuResolution;                 
    int nParkingInfoNum;                              
    BYTE bReserved[500];                              
    EVENT_MANUALSNAP_CUSTOM_DATA stuCustom;           
    EVENT_COMM_INFO stCommInfo;                       
    EVENT_MANUALSNAP_PARKING_INFO stuParkingInfo[32]; 
} DEV_EVENT_TRAFFIC_MANUALSNAP_INFO;
typedef struct tagNET_MANUALSNAP_PARKINGSPACE_INFO
{
    int nStatus;            
    char szPlateNumber[64]; 
    char szParkingNo[32];   
    BYTE byReserved[412];   
} NET_MANUALSNAP_PARKINGSPACE_INFO;
typedef struct tagDEV_EVENT_PARKINGSPACE_MANUALSNAP_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved1[4];                             
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    char szSerialNo[128];                           
    int nParkingNum;                                     
    NET_MANUALSNAP_PARKINGSPACE_INFO stuParkingInfo[32]; 
    char szSN[32];                                       
    BYTE bReserved[484];                                 
} DEV_EVENT_PARKINGSPACE_MANUALSNAP_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_STAY_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved1[4];                             
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    int nLane;                                      
    int nSequence;                                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE bEventAction;                              
    BYTE byReserved0[2];
    BYTE byImageIndex;                
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1012];
    EVENT_COMM_INFO stCommInfo; 
} DEV_EVENT_TRAFFIC_STAY_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_VEHICLEINROUTE_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved1[4];                             
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    int nLane;                                      
    int nSequence;                                  
    int nSpeed;                                     
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE bEventAction;                              
    BYTE byReserved0[2];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    DH_RESOLUTION_INFO stuResolution;           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    BYTE byReserved[884];
    EVENT_COMM_INFO stCommInfo; 
} DEV_EVENT_TRAFFIC_VEHICLEINROUTE_INFO;
typedef struct tagDEV_EVENT_CONVEYER_BELT_BULK_INFO
{
    int nChannelID;                    
    int nEventAction;                  
    char szName[128];                  
    double PTS;                        
    NET_TIME_EX UTC;                   
    UINT nRuleID;                      
    EM_CLASS_TYPE emClassType;         
    int nDetectLineNum;                
    DH_POINT stuDetectLine[20];        
    UINT nEventID;                     
    int nDetectRegionNum;              
    DH_POINT stuDetectRegion[20];      
    UINT nSizeFilterThreshold;         
    UINT nObjectNum;                   
    DH_MSG_OBJECT stuObjects[20];      
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    UINT nConveyorBeltWidth;           
    UINT nBulkEventCount;              
    BYTE byReserved[1012];             
} DEV_EVENT_CONVEYER_BELT_BULK_INFO;
typedef struct tagDDEV_EVENT_CONVEYER_BELT_NONLOAD_INFO
{
    int nChannelID;                    
    int nEventAction;                  
    char szName[128];                  
    double PTS;                        
    NET_TIME_EX UTC;                   
    UINT nRuleID;                      
    UINT nEventID;                     
    EM_CLASS_TYPE emClassType;         
    DH_POINT stuDetectRegion[20];      
    int nDetectRegionNum;              
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    int nAlarmLevel;                   
    int nEventDataType;                
    BYTE byReserved[1016];             
} DEV_EVENT_CONVEYER_BELT_NONLOAD_INFO;
typedef struct tagDEV_EVENT_CONVEYER_BELT_RUNOFF_INFO
{
    int nChannelID;                    
    int nEventAction;                  
    char szName[128];                  
    UINT nEventID;                     
    BYTE byReserved1[4];               
    double PTS;                        
    NET_TIME_EX UTC;                   
    UINT nRuleID;                      
    EM_CLASS_TYPE emClassType;         
    int nDetectRegionNum;              
    DH_POINT stuDetectRegion[20];      
    UINT nWarningThreshold;            
    UINT nDowntimeThreshold;           
    UINT nAlarmType;                   
    UINT nObjectNum;                   
    DH_MSG_OBJECT stuObjects[20];      
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    int nRunOffEventCount;             
    BYTE byReserved[1016];             
} DEV_EVENT_CONVEYER_BELT_RUNOFF_INFO;
typedef struct tagNET_UINT_POINT
{
    UINT nx;
    UINT ny;
} NET_UINT_POINT;
typedef struct tagDEV_EVENT_CONVEYER_BELT_COAL_RATIO_INFO
{
    int nChannelID;                     
    int nEventAction;                   
    char szName[128];                   
    EM_CLASS_TYPE emClassType;          
    UINT nRuleID;                       
    NET_TIME_EX UTC;                    
    UINT UTCMS;                         
    UINT nEventID;                      
    int nDetectRegionNum;               
    NET_UINT_POINT stuDetectRegion[20]; 
    float fCoalData;                    
    UINT nAlarmOutMode;                 
    SCENE_IMAGE_INFO_EX stuSceneImage;  
    char szReserved[1024];              
} DEV_EVENT_CONVEYER_BELT_COAL_RATIO_INFO;
typedef enum tagEM_IMAGE_TYPE
{
    EM_IMAGE_UNKNOWN = -1, 
    EM_IMAGE_INSPECTOR,    
    EM_IMAGE_PACKAGE       
} EM_IMAGE_TYPE;
typedef struct tagNET_IMAGE_INFO_EX
{
    UINT nIndexInData;    
    UINT nOffset;         
    UINT nLength;         
    EM_IMAGE_TYPE emType; 
} NET_IMAGE_INFO_EX;
typedef struct tagDEV_EVENT_ALARM_VIDEOBLIND
{
    int nChannelID;   
    char szName[128]; 
    char Reserved[4]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    NET_TIME_EX stuTime;                              
    char szDriverID[32];                              
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szVideoPath[256];                            
    NET_IMAGE_INFO_EX stuImageInfo[6];                
    int nImageInfo;                                   
    NET_IMAGE_INFO_EX2 stuImageInfoEx2[32];           
    int nImageInfoEx2Num;                             
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE bEventAction;                                
    char byReserved[1023];                            
} DEV_EVENT_ALARM_VIDEOBLIND;
typedef struct tagDEV_EVENT_ALARM_ANALOGALRM_INFO
{
    int nChannelID;                         
    char szName[DH_COMMON_STRING_128];      
    char Reserved[4];                       
    double PTS;                             
    NET_TIME_EX UTC;                        
    int nEventID;                           
    DH_EVENT_FILE_INFO stuFileInfo;         
    int nIndex;                             
    NET_SENSE_METHOD emSensor;              
    int nStatus;                            
    float fValue;                           
    NET_TIME stuCollectTime;                
    DWORD dwSnapFlagMask;                   
    BYTE bEventAction;                      
    NET_TEMPERATURE_UNIT emTemperatureUnit; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
    BYTE byReserved2[1019];                 
} DEV_EVENT_ALARM_ANALOGALRM_INFO;
typedef struct tagDEV_EVENT_ALARM_VEHICLEACC_INFO
{
    int nChannelID;                      
    char szName[DH_COMMON_STRING_128];   
    char Reserved[4];                    
    double PTS;                          
    NET_TIME_EX UTC;                     
    int nEventID;                        
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    int nACCStatus;                      
    BYTE bEventAction;                   
    BYTE bConstantElectricStatus;        
    BYTE bReserved[1022];                
} DEV_EVENT_ALARM_VEHICLEACC_INFO;
typedef struct tagDEV_EVENT_VEHICEL_ALARM_INFO
{
    int nChannelID;                      
    char szName[128];                    
    char Reserved[4];                    
    double PTS;                          
    NET_TIME_EX UTC;                     
    int nEventID;                        
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    DH_EVENT_FILE_INFO stuFileInfo;      
    BYTE bEventAction;                   
    BYTE byReserved[2];                  
    BYTE byImageIndex;                   
    DWORD dwSnapFlagMask;                
    DH_RESOLUTION_INFO stuResolution;    
    BYTE bReserved[1024];                
} DEV_EVENT_VEHICEL_ALARM_INFO;
typedef struct tagDEV_EVENT_PSRISEDETECTION_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    double dInitialUTC;                              
    BYTE bEventAction;                               
    BYTE byReserved[2];
    BYTE byImageIndex;                          
    DWORD dwSnapFlagMask;                       
    int nSourceIndex;                           
    char szSourceDevice[MAX_PATH];              
    unsigned int nOccurrenceCount;              
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    char szSerialUUID[22];                      
    BYTE bReserved[594];                        
} DEV_EVENT_PSRISEDETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PEDESTRAINPRIORITY_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nLane;                      
    double dInitialUTC;             
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_RESOLUTION_INFO stuResolution;               
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[984];                            
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_PEDESTRAINPRIORITY_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_VEHICLEINBUSROUTE_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nLane;                      
    int nSequence;                  
    int nSpeed;                     
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_RESOLUTION_INFO stuResolution;               
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[980];                            
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_VEHICLEINBUSROUTE_INFO;
typedef struct tagDEV_EVENT_IVS_TRAFFIC_BACKING_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nLane;                      
    int nSequence;                  
    int nSpeed;                     
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_RESOLUTION_INFO stuResolution;               
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[848];                            
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_IVS_TRAFFIC_BACKING_INFO;
typedef struct tagDEV_EVENT_IVS_AUDIO_ABNORMALDETECTION_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nDecibel;                   
    int nFrequency;                 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE bReserved[1024];             
} DEV_EVENT_IVS_AUDIO_ABNORMALDETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_RUNYELLOWLIGHT_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nLightState;                
    int nSpeed;                     
    int nSequence;                  
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    NET_TIME_EX stYellowLightUTC;                   
    unsigned int nYellowLightPeriod;                
    DH_RESOLUTION_INFO stuResolution;               
    BYTE byRedLightMargin;                          
    char szSourceDevice[MAX_PATH];                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    BYTE bReserved[1024];                           
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_RUNYELLOWLIGHT_INFO;
typedef enum tagEM_LEAVEDETECTION_TRIGGER_MODE
{
    EM_LEAVEDETECTION_TRIGGER_UNKNOEN,        
    EM_LEAVEDETECTION_TRIGGER_NOPERSON,       
    EM_LEAVEDETECTION_TRIGGER_LEAVE,          
    EM_LEAVEDETECTION_TRIGGER_STATIC,         
    EM_LEAVEDETECTION_TRIGGER_OUTPERSONLIMIT, 
} EM_LEAVEDETECTION_TRIGGER_MODE;
typedef enum tagEM_LEAVEDETECTION_STATE
{
    EM_LEAVEDETECTION_STATE_UNKNOWN = 0, 
    EM_LEAVEDETECTION_STATE_LEAVE,       
    EM_LEAVEDETECTION_STATE_ON_THE_JOB,  
} EM_LEAVEDETECTION_STATE;
typedef struct tagDEV_EVENT_IVS_LEAVE_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DH_RESOLUTION_INFO stuResolution;                
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    BYTE bEventAction;                               
    BYTE byImageIndex;                               
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    EM_LEAVEDETECTION_TRIGGER_MODE emTriggerMode;    
    EM_LEAVEDETECTION_STATE emState;                 
    BOOL bSceneImage;                                
    SCENE_IMAGE_INFO_EX stuSceneImage;               
    char szUserName[32];                             
    NET_IMAGE_INFO_EX2* pstuImageInfo;               
    int nImageInfoNum;                               
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE bReserved[50];                              
} DEV_EVENT_IVS_LEAVE_INFO;
typedef struct tagDEV_EVENT_IVS_CLIMB_INFO
{
    int nChannelID;                              
    char szName[128];                            
    char bReserved1[4];                          
    double PTS;                                  
    NET_TIME_EX UTC;                             
    int nEventID;                                
    DH_MSG_OBJECT stuObject;                     
    DH_EVENT_FILE_INFO stuFileInfo;              
    DH_RESOLUTION_INFO stuResolution;            
    int nDetectLineNum;                          
    DH_POINT DetectLine[DH_MAX_DETECT_LINE_NUM]; 
    BYTE bEventAction;                           
    BYTE byImageIndex;                           
    unsigned int nOccurrenceCount;               
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;  
    BYTE bReserved[890];                         
} DEV_EVENT_IVS_CLIMB_INFO;
typedef struct tagDEV_EVENT_IVS_MULTI_SCENE_SWICH_INFO
{
    int nChannelID;       
    char szName[128];     
    char bReserved1[4];   
    double PTS;           
    NET_TIME_EX UTC;      
    int nEventID;         
    BYTE bEventAction;    
    BYTE bReserved[1027]; 
} DEV_EVENT_IVS_MULTI_SCENE_SWICH_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKINGONYELLOWBOX_INFO
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[8];             
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nInterval1;  
    int nInterval2;  
    int nFollowTime; 
    BYTE bEventAction; 
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    NET_GPS_INFO stuGPSInfo;                        
    BYTE bReserved[984];                            
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_PARKINGONYELLOWBOX_INFO;
typedef struct tagDEV_TRAFFIC_PARKING_INFO
{
    int nFeaturePicAreaPointNum;                   
    DH_POINT stFeaturePicArea[DH_MAX_POLYGON_NUM]; 
    BYTE bReserved[572];                           
} DEV_TRAFFIC_PARKING_INFO;
typedef struct tagDEV_OCCUPIED_WARNING_INFO
{
    char szParkingNo[32];      
    char szPlateNumber[5][64]; 
    int nPlateNumber;          
    BYTE bReserved[508];       
} DEV_OCCUPIED_WARNING_INFO;
typedef enum tagEM_PARKINGSPACE_DIRECTION
{
    EM_PARKINGSPACE_DIRECTION_UNKNOWN, 
    EM_PARKINGSPACE_DIRECTION_REVERSE, 
    EM_PARKINGSPACE_DIRECTION_FORWARD, 
} EM_PARKINGSPACE_DIRECTION;
typedef enum tagEM_FORBID_PARKING_STATUS
{
    EM_FORBID_PARKING_STATUS_UNKNOWN,    
    EM_FORBID_PARKING_STATUS_NOT_FORBID, 
    EM_FORBID_PARKING_STATUS_FORBID,     
} EM_FORBID_PARKING_STATUS;
typedef enum tagEM_ACROSS_PARKING
{
    EM_ACROSS_PARKING_UNKNOWN, 
    EM_ACROSS_PARKING_NO,      
    EM_ACROSS_PARKING_YES,     
} EM_ACROSS_PARKING;
typedef enum tagEM_PARKING_TRIGGER_TYPE
{
    EM_PARKING_TRIGGER_TYPE_UNKNOWN = -1, 
    EM_PARKING_TRIGGER_TYPE_NONMANUAL,    
    EM_PARKING_TRIGGER_TYPE_MANUAL,       
} EM_PARKING_TRIGGER_TYPE;
typedef enum tagEM_PARKING_SPACE_TYPE
{
    EM_PARKING_SPACE_TYPE_UNKNOWN = -1, 
    EM_PARKING_SPACE_TYPE_NORMAL,       
    EM_PARKING_SPACE_TYPE_CHANGE,       
} EM_PARKING_SPACE_TYPE;
typedef enum tagEM_SMALL_OCCUPY_LARGE
{
    EM_SMALL_OCCUPY_LARGE_UNKNOWN = 0, 
    EM_SMALL_OCCUPY_LARGE_NO,          
    EM_SMALL_OCCUPY_LARGE_YES,         
} EM_SMALL_OCCUPY_LARGE;
typedef enum tagEM_NON_ALLOW_LIST_CAR
{
    EM_NON_ALLOW_LIST_CAR_UNKNOWN = 0, 
    EM_NON_ALLOW_LIST_CAR_NO,          
    EM_NON_ALLOW_LIST_CAR_YES,         
} EM_NON_ALLOW_LIST_CAR;
typedef enum tagEM_NON_NEW_ENERGY_CAR
{
    EM_NON_NEW_ENERGY_CAR_UNKNOWN = 0, 
    EM_NON_NEW_ENERGY_CAR_NO,          
    EM_NON_NEW_ENERGY_CAR_YES,         
} EM_NON_NEW_ENERGY_CAR;
typedef struct tagNET_PARKING_CHANGE_INFO
{
    char szPreParkingNo[32];   
    char szAfterParkingNo[32]; 
    UINT nStrandTime;          
    BYTE byReserved[252];      
} NET_PARKING_CHANGE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKINGSPACEPARKING_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[8];             
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;     
    BYTE bEventAction; 
    BYTE byReserved[2];
    BYTE byImageIndex;                                
    DWORD dwSnapFlagMask;                             
    DH_RESOLUTION_INFO stuResolution;                 
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;   
    int nParkingSpaceStatus;                          
    DEV_TRAFFIC_PARKING_INFO stTrafficParingInfo;     
    BYTE byPlateTextSource;                           
    BYTE byReserved2[3];                              
    char szParkingNum[32];                            
    DWORD dwPresetNum;                                
    BOOL bParkingFault;                               
    BYTE bReserved[364];                              
    EVENT_COMM_INFO stCommInfo;                       
    NET_INTELLIGENCE_IMAGE_INFO stuParkingImage;      
    UINT nConfidence;                                 
    EM_ACROSS_PARKING emAcrossParking;                
    EM_PARKINGSPACE_DIRECTION emParkingDirection;     
    EM_FORBID_PARKING_STATUS emForbidParkingStatus;   
    EM_SMALL_OCCUPY_LARGE emSmallOccupyLarge;         
    EM_NON_ALLOW_LIST_CAR emNonAllowListCar;          
    EM_NON_NEW_ENERGY_CAR emNonNewEnergyCar;          
    BYTE byReserved1[992];                            
    EM_PARKING_TRIGGER_TYPE emTriggerType;            
    DEV_OCCUPIED_WARNING_INFO stuOccupiedWarningInfo; 
    char szAllParkingNo[12][32];                      
    int nParkingNoNum;                                
    EM_PARKING_SPACE_TYPE emParkingSpaceType;         
    NET_PARKING_CHANGE_INFO stuParkingChangeInfo;     
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    char szReserved[4];                               
} DEV_EVENT_TRAFFIC_PARKINGSPACEPARKING_INFO;
typedef struct tagDEV_MATCH_PARKING_INFO
{
    char szParkingNo[32]; 
    char szPlateNum[64];  
    UINT nSimilarity;     
    BYTE bReserved[508];  
} DEV_MATCH_PARKING_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKINGSPACENOPARKING_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[8];             
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;     
    BYTE bEventAction; 
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DEV_TRAFFIC_PARKING_INFO stTrafficParingInfo;   
    BYTE byPlateTextSource;                         
    BYTE byReserved2[3];                            
    char szParkingNum[32];                          
    DWORD dwPresetNum;                              
    BOOL bParkingFault;                             
    NET_IMAGE_INFO_EX3* pstuImageInfo;              
    int nImageInfoNum;                              
    BYTE bReserved[364 - POINTERSIZE];              
    EVENT_COMM_INFO stCommInfo;                     
    NET_INTELLIGENCE_IMAGE_INFO stuGlobalImage;     
    NET_INTELLIGENCE_IMAGE_INFO stuParkingImage;    
    UINT nConfidence;                               
    BYTE byReserved1[1016];                         
    EM_PARKING_TRIGGER_TYPE emTriggerType;          
    DEV_MATCH_PARKING_INFO stuMatchParkingInfo[5];  
    int nMatchParkingNum;                           
    char szAllParkingNo[12][32];                    
    int nParkingNoNum;                              
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_TRAFFIC_PARKINGSPACENOPARKING_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKINGSPACEOVERLINE_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nLane;                      
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSequence;      
    BYTE byEventAction; 
    BYTE byImageIndex;  
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    DEV_TRAFFIC_PARKING_INFO stTrafficParingInfo;    
    BYTE byReserved[384];                            
    EVENT_COMM_INFO stCommInfo;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_TRAFFIC_PARKINGSPACEOVERLINE_INFO;
typedef struct tagDEV_EVENT_TURNLEFTAFTERSTRAIGHT_INFO
{
    int nChannelID;                                 
    char szName[DH_EVENT_NAME_LEN];                 
    char Reserved[4];                               
    double PTS;                                     
    NET_TIME_EX UTC;                                
    DWORD nEventID;                                 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nLane;                                      
    int nSequence;                                  
    BYTE byEventAction;                             
    BYTE byImageIndex;                              
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    NET_GPS_INFO stuGPSInfo;          
    BYTE byReserved[984];             
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_TURNLEFTAFTERSTRAIGHT_INFO;
typedef struct tagDEV_EVENT_BIGBENDSMALLTURN_INFO
{
    int nChannelID;                                 
    char szName[DH_EVENT_NAME_LEN];                 
    char Reserved[4];                               
    double PTS;                                     
    NET_TIME_EX UTC;                                
    DWORD nEventID;                                 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nLane;                                      
    int nSequence;                                  
    BYTE byEventAction;                             
    BYTE byImageIndex;                              
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1024];            
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_BIGBENDSMALLTURN_INFO;
typedef struct tagDEV_EVENT_ROAD_CONSTRUCTION_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char Reserved[4];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DWORD nEventID;                 
    int nEventAction;               
    EM_CLASS_TYPE emClassType;      
    DH_RECT stuBoudingBox;          
    BYTE byReserved[512];           
} DEV_EVENT_ROAD_CONSTRUCTION_INFO;
typedef struct tagDEV_EVENT_ROAD_BLOCK_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char Reserved[4];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DWORD nEventID;                 
    int nEventAction;               
    EM_CLASS_TYPE emClassType;      
    DH_RECT stuBoudingBox;          
    BYTE byReserved[512];           
} DEV_EVENT_ROAD_BLOCK_INFO;
typedef struct tagDEV_EVENT_INSTALL_CARDREADER_INFO
{
    int nChannelID;        
    char szName[128];      
    char Reserved[4];      
    double PTS;            
    NET_TIME_EX UTC;       
    int nEventID;          
    BYTE byReserved[1024]; 
} DEV_EVENT_INSTALL_CARDREADER_INFO;
typedef struct tagDEV_EVENT_ACC_OFF_SNAP_INFO
{
    int nChannelID;        
    char szName[128];      
    char Reserved[4];      
    double PTS;            
    NET_TIME_EX UTC;       
    int nEventID;          
    BYTE byReserved[1024]; 
} DEV_EVENT_ACC_OFF_SNAP_INFO;
typedef enum tagEM_DANGER_GRADE_TYPE
{
    EM_DANGER_GRADE_UNKNOWN = -1, 
    EM_DANGER_GRADE_NORMAL,       
    EM_DANGER_GRADE_WARN,         
    EM_DANGER_GRADE_DANGER,       
} EM_DANGER_GRADE_TYPE;
typedef struct tagNET_PACKAGE_INFO
{
    EM_DANGER_GRADE_TYPE emDangerGrade; 
    BYTE byReserved[128];               
} NET_PACKAGE_INFO;
typedef enum tagEM_INSIDE_OBJECT_TYPE
{
    EM_INSIDE_OBJECT_UNKNOWN,                
    EM_INSIDE_OBJECT_KNIFE,                  
    EM_INSIDE_OBJECT_BOTTLELIQUID,           
    EM_INSIDE_OBJECT_GUN,                    
    EM_INSIDE_OBJECT_UMBRELLA,               
    EM_INSIDE_OBJECT_PHONE,                  
    EM_INSIDE_OBJECT_NOTEBOOK,               
    EM_INSIDE_OBJECT_POWERBANK,              
    EM_INSIDE_OBJECT_SHOES,                  
    EM_INSIDE_OBJECT_ROD,                    
    EM_INSIDE_OBJECT_METAL,                  
    EM_INSIDE_OBJECT_EXPLOSIVE,              
    EM_INSIDE_OBJECT_CONTAINERSPRAY,         
    EM_INSIDE_OBJECT_EXPLOSIVE_FIREWORKS,    
    EM_INSIDE_OBJECT_LIGHTER,                
    EM_INSIDE_OBJECT_STICK,                  
    EM_INSIDE_OBJECT_BRASSKNUCKLE,           
    EM_INSIDE_OBJECT_HANDCUFFS,              
    EM_INSIDE_OBJECT_IVORY,                  
    EM_INSIDE_OBJECT_BOOK,                   
    EM_INSIDE_OBJECT_CD,                     
    EM_INSIDE_OBJECT_HAMMERS,                
    EM_INSIDE_OBJECT_PLIERS,                 
    EM_INSIDE_OBJECT_AXE,                    
    EM_INSIDE_OBJECT_SCREW_DRIVER,           
    EM_INSIDE_OBJECT_WRENCH,                 
    EM_INSIDE_OBJECT_ELECTRIC_SHOCK_STICK,   
    EM_INSIDE_OBJECT_THERMOS,                
    EM_INSIDE_OBJECT_GLASS_BOTTLES,          
    EM_INSIDE_OBJECT_PLASTIC_BOTTLE,         
    EM_INSIDE_OBJECT_IGNITION_OIL,           
    EM_INSIDE_OBJECT_NAIL_POLISH,            
    EM_INSIDE_OBJECT_BLUNT_INSTRUMENT,       
    EM_INSIDE_OBJECT_SCISSORS,               
    EM_INSIDE_OBJECT_ELECTRONIC,             
    EM_INSIDE_OBJECT_PISTOL,                 
    EM_INSIDE_OBJECT_FOLDINGKNIFE,           
    EM_INSIDE_OBJECT_SHARPKNIFE,             
    EM_INSIDE_OBJECT_KITCHENKNIFE,           
    EM_INSIDE_OBJECT_UTILITYKNIFE,           
    EM_INSIDE_OBJECT_FIREWORKS,              
    EM_INSIDE_OBJECT_FIRECRACKER,            
    EM_INSIDE_OBJECT_POWDER,                 
    EM_INSIDE_OBJECT_IMPENETERABLE_MATERALS, 
} EM_INSIDE_OBJECT_TYPE;
typedef struct tagNET_INSIDE_OBJECT
{
    EM_DANGER_GRADE_TYPE emDangerGrade; 
    EM_INSIDE_OBJECT_TYPE emObjType;    
    UINT nSimilarity;                   
    NET_RECT stuBoundingBox;            
    char szObjectType[32];              
    BYTE byReserved[76];                
} NET_INSIDE_OBJECT;
typedef enum tagEM_XRAY_IMAGE_TYPE
{
    EM_XRAY_IMAGE_TYPE_UNKNOWN = -1,  
    EM_XRAY_IMAGE_TYPE_COLOR,         
    EM_XRAY_IMAGE_COLOR_TYPE_OVERLAY, 
} EM_XRAY_IMAGE_TYPE;
typedef enum tagEM_XRAY_VIEW_TYPE
{
    EM_XRAY_VIEW_TYPE_UNKNOWN = -1, 
    EM_XRAY_VIEW_TYPE_MASTER,       
    EM_XRAY_VIEW_TYPE_SLAVE,        
} EM_XRAY_VIEW_TYPE;
typedef struct tagNET_XRAY_IMAGE_INFO
{
    EM_XRAY_VIEW_TYPE emViewType;   
    EM_XRAY_IMAGE_TYPE emImageType; 
    unsigned int nOffset;           
    unsigned int nLength;           
    BYTE byReserved[1024];          
} NET_XRAY_IMAGE_INFO;
typedef struct tagNET_XRAY_CUSTOM_INFO
{
    EM_XRAY_VIEW_TYPE emViewType; 
    char szSerialNumber[128];     
    BYTE byReserved[124];         
} NET_XRAY_CUSTOM_INFO;
typedef enum tagEM_XRAY_PACKAGE_MODE
{
    EM_XRAY_PACKAGE_MODE_UNKNOWN = -1, 
    EM_XRAY_PACKAGE_MODE_LOCAL,        
    EM_XRAY_PACKAGE_MODE_CENTRAL,      
} EM_XRAY_PACKAGE_MODE;
typedef enum tagEM_XRAY_RELATED_IMAGE_TYPE
{
    EM_XRAY_RELATED_IMAGE_TYPE_UNKNOWN = -1,          
    EM_XRAY_RELATED_IMAGE_TYPE_LARGE_FACE,            
    EM_XRAY_RELATED_IMAGE_TYPE_SMALL_FACE,            
    EM_XRAY_RELATED_IMAGE_TYPE_PACKAGE_VISIBLE_LIGHT, 
} EM_XRAY_RELATED_IMAGE_TYPE;
typedef struct tagNET_XRAY_RELATED_IMAGE_INFO
{
    EM_XRAY_RELATED_IMAGE_TYPE emImageType; 
    UINT nOffset;                           
    UINT nLength;                           
    char byReserved[64];                    
} NET_XRAY_RELATED_IMAGE_INFO;
typedef struct tagNET_BAR_CODE_IMAGE
{
    UINT nOffset;         
    UINT nLength;         
    char szResvered[248]; 
} NET_BAR_CODE_IMAGE;
typedef struct tagNET_BAR_CODE_INFO
{
    int nCodeCount;              
    char szCode[32][128];        
    NET_BAR_CODE_IMAGE stuImage; 
    char szReserved[256];        
} NET_BAR_CODE_INFO;
typedef enum tagEM_XRAY_DETECTION_JUDGE_REMOTELY
{
    EM_XRAY_DETECTION_JUDGE_REMOTELY_UNKNOWN = -1,   
    EM_XRAY_DETECTION_JUDGE_REMOTELY_NOT_SEND_JUDGE, 
    EM_XRAY_DETECTION_JUDGE_REMOTELY_SEND_JUDGE,     
} EM_XRAY_DETECTION_JUDGE_REMOTELY;
typedef struct tagDEV_EVENT_XRAY_DETECTION_INFO
{
    int nChannelID;                                                
    char szName[128];                                              
    char Reserved[4];                                              
    double PTS;                                                    
    NET_TIME_EX UTC;                                               
    int nEventID;                                                  
    EM_CLASS_TYPE emClassType;                                     
    NET_PACKAGE_INFO stuPacketInfo;                                
    char Reserved1[4];                                             
    UINT nObjectNum;                                               
    NET_INSIDE_OBJECT stuInsideObj[MAX_INSIDEOBJECT_NUM];          
    UINT nSlaveViewObjectNum;                                      
    NET_INSIDE_OBJECT stuSlaveViewInsideObj[MAX_INSIDEOBJECT_NUM]; 
    UINT nImageCount;                                              
    NET_XRAY_IMAGE_INFO stuImageInfo[8];                           
    UINT nViewCustomInfoNum;                                       
    NET_XRAY_CUSTOM_INFO stuViewCustomInfo[4];                     
    char szPackageTag[32];                                         
    EM_XRAY_PACKAGE_MODE emPackageMode;                            
    int nRelatedImageNum;                                          
    NET_XRAY_RELATED_IMAGE_INFO stuRelatedImageInfo[8];            
    int nBarCodeCount;                                             
    NET_BAR_CODE_INFO stuBarCodeInfo[32];                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                          
    EM_XRAY_DETECTION_JUDGE_REMOTELY emJudgeRemotely;              
    BYTE byReserved[368];                                          
} DEV_EVENT_XRAY_DETECTION_INFO;
typedef enum tagEM_XRAY_IMAGELIST_TYPE
{
    EM_XRAY_IMAGELIST_TYPE_UNKNOWN,       
    EM_XRAY_IMAGELIST_TYPE_ENERGY,        
    EM_XRAY_IMAGELIST_TYPE_COLOR,         
    EM_XRAY_IMAGELIST_TYPE_COLOR_OVERLAY, 
    EM_XRAY_IMAGELIST_TYPE_VISIBLE_LIGHT, 
} EM_XRAY_IMAGELIST_TYPE;
typedef struct tagNET_XRAY_IMAGE_LIST
{
    EM_XRAY_IMAGELIST_TYPE emType; 
    UINT nOffset;                  
    UINT nLength;                  
    UINT nWorkDirID;               
    char szPath[128];              
    UINT nFileID;                  
    UINT nWidth;                   
    UINT nHeight;                  
    UINT nXOffset;                 
    UINT nYOffset;                 
    char szReserved[128];          
} NET_XRAY_IMAGE_LIST;
typedef struct tagNET_XRAY_BACKGROUND_INFO
{
    UINT nOffset;         
    UINT nLength;         
    UINT nWidth;          
    UINT nHeight;         
    BYTE nPartFlag;       
    char szReserved1[3];  
    char szReserved[124]; 
} NET_XRAY_BACKGROUND_INFO;
typedef enum tagEM_GROUP_GRADE_TYPE
{
    EM_GROUP_GRADE_TYPE_UNKNOWN = -1, 
    EM_GROUP_GRADE_TYPE_NORMAL,       
    EM_GROUP_GRADE_TYPE_WARN,         
    EM_GROUP_GRADE_TYPE_DANGER,       
} EM_GROUP_GRADE_TYPE;
typedef struct tagNET_XRAY_INSIDE
{
    UINT nID;                          
    NET_RECT stuBoundingBox;           
    EM_GROUP_GRADE_TYPE emGrade;       
    UINT nSimilarity;                  
    EM_INSIDE_OBJECT_TYPE emType;      
    EM_INSIDE_OBJECT_TYPE emSubType;   
    EM_INSIDE_OBJECT_TYPE emGroupType; 
    char szReserved[128];              
} NET_XRAY_INSIDE;
typedef struct tagNET_XRAY_APPEAR_INFO
{
    NET_RECT stuRect;     
    TP_U64 nTimeMS;       
    TP_U64 nUTCTimeMS;    
    char szReserved[128]; 
} NET_XRAY_APPEAR_INFO;
typedef struct tagNET_XRAY_CHANNEL_INFO_LIST
{
    UINT nChannel;                          
    UINT nImageListNum;                     
    NET_XRAY_IMAGE_LIST stuImageList[16];   
    NET_XRAY_BACKGROUND_INFO stuBackGround; 
    UINT nInsideNum;                        
    NET_XRAY_INSIDE stuInside[16];          
    NET_XRAY_APPEAR_INFO stuAppearInfo;     
    BYTE nPartFlag;                         
    char szReserved1[3];                    
    char szReserved[252];                   
} NET_XRAY_CHANNEL_INFO_LIST;
typedef struct tagNET_XRAY_ALLCHANNEL_INFO_LIST
{
    NET_XRAY_IMAGE_LIST stuAllImageList[16]; 
    UINT nAllImageListNum;                   
    char szReserved[256];                    
} NET_XRAY_ALLCHANNEL_INFO_LIST;
typedef struct tagNET_EVENT_XRAY_DETECT_PACKAGE_INFO
{
    char szName[128];                                    
    double PTS;                                          
    NET_TIME_EX UTC;                                     
    int nChannelID;                                      
    UINT nEventID;                                       
    EM_CLASS_TYPE emClassType;                           
    UINT nPackageID;                                     
    char szModelName[512];                               
    NET_XRAY_CHANNEL_INFO_LIST stuChannelInfoList[32];   
    UINT nChannelInfoListNum;                            
    UINT nRelatedImageNum;                               
    NET_XRAY_RELATED_IMAGE_INFO stuRelatedImageInfo[32]; 
    NET_XRAY_ALLCHANNEL_INFO_LIST stuAllChannelInfoList; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                
    int nAction;                                         
    unsigned int UTCMS;                                  
    BYTE byReserved[1016];                               
} NET_EVENT_XRAY_DETECT_PACKAGE_INFO;
typedef struct tagDEV_EVENT_NOTCLEARCAR_INFO
{
    int nChannelID;     
    NET_TIME_EX UTC;    
    BYTE byEventAction; 
    BYTE byImageIndex;  
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1024];            
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_NOTCLEARCAR_INFO;
typedef struct tagDEV_EVENT_SOSALEART_INFO
{
    int nChannelID;     
    NET_TIME_EX UTC;    
    BYTE byEventAction; 
    BYTE byImageIndex;  
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1024];            
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_SOSALEART_INFO;
typedef struct tagDEV_EVENT_OVERLOAD_INFO
{
    int nChannelID;     
    NET_TIME_EX UTC;    
    BYTE byEventAction; 
    BYTE byImageIndex;  
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1024];            
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_OVERLOAD_INFO;
typedef struct tagDEV_EVENT_NONWORKINGTIME_INFO
{
    int nChannelID;     
    NET_TIME_EX UTC;    
    BYTE byEventAction; 
    BYTE byImageIndex;  
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1024];            
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_NONWORKINGTIME_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_HIGH_BEAM_INFO
{
    int nChannelID;                                  
    char szName[DH_EVENT_NAME_LEN];                  
    BYTE byReserved1[4];                             
    double PTS;                                      
    int nEventID;                                    
    NET_TIME_EX UTC;                                 
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE byImageIndex;                               
    BYTE byReserved2[3];                             
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    int nLane;                                       
    int nSequence;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    EVENT_COMM_INFO stuCommInfo;                     
    BYTE byReserved[1024];                           
} DEV_EVENT_TRAFFIC_HIGH_BEAM_INFO;
typedef struct tagDEV_EVENT_TRAFFICTRUCKFORBID_INFO
{
    int nChannel;                                   
    char szName[DH_EVENT_NAME_LEN];                 
    int nGroupID;                                   
    int nCountInGroup;                              
    int nIndexInGroup;                              
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int UTCMS;                                      
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    int nLane;                                      
    int nSequence;                                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DWORD dwSnapFlagMask;                           
    DH_RESOLUTION_INFO stuResolution;               
    BYTE byReserved[1016];                          
} DEV_EVENT_TRAFFICTRUCKFORBID_INFO;
typedef struct tagDEV_EVENT_DRIVINGWITHOUTCARD_INFO
{
    int nChannelID;         
    BYTE byEventAction;     
    BYTE byReserved[3];     
    double PTS;             
    NET_TIME_EX UTC;        
    DWORD nEventID;         
    BYTE byReserved1[1024]; 
} DEV_EVENT_DRIVINGWITHOUTCARD_INFO;
typedef struct tagDEV_EVENT_HIGHSPEED_INFO
{
    int nChannelID;                      
    int nAction;                         
    NET_TIME_EX UTC;                     
    BYTE byReserved[4];                  
    double dbPTS;                        
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    int nSpeedLimit;                     
    int nCurSpeed;                       
    int nMaxSpeed;                       
    NET_TIME_EX stuStartTime;            
    BYTE byReserved1[1024];              
} DEV_EVENT_HIGHSPEED_INFO;
typedef struct tagNET_CROWD_LIST_INFO
{
    DH_POINT stuCenterPoint; 
    unsigned int nRadiusNum; 
    BYTE byReserved[1024];   
} NET_CROWD_LIST_INFO;
typedef struct tagNET_REGION_LIST_INFO
{
    unsigned int nRegionID;                             
    unsigned int nPeopleNum;                            
    char szName[32];                                    
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                               
    BYTE byReserved[908];                               
} NET_REGION_LIST_INFO;
typedef enum tagEM_ALARM_TYPE
{
    EM_ALARM_TYPE_UNKNOWN,                         
    EM_ALARM_TYPE_CROWD_DENSITY,                   
    EM_ALARM_TYPE_NUMBER_EXCEED,                   
    EM_ALARM_TYPE_CROWD_DENSITY_AND_NUMBER_EXCEED, 
} EM_ALARM_TYPE;
#define RECT_POINT 2          
#define MAX_CROWD_RECT_LIST 5 
typedef struct tagNET_CROWD_RECT_LIST_INFO
{
    DH_POINT stuRectPoint[RECT_POINT]; 
    BYTE byReserved[32];               
} NET_CROWD_RECT_LIST_INFO;
typedef struct tagDEV_EVENT_CROWD_DETECTION_INFO
{
    int nChannelID;                                                 
    int nEventID;                                                   
    double PTS;                                                     
    NET_TIME_EX UTC;                                                
    int nEventAction;                                               
    EM_ALARM_TYPE emAlarmType;                                      
    char szName[MAX_CROWD_DETECTION_NAME_LEN];                      
    int nCrowdListNum;                                              
    int nRegionListNum;                                             
    NET_CROWD_LIST_INFO stuCrowdList[MAX_CROWD_LIST_NUM];           
    NET_REGION_LIST_INFO stuRegionList[MAX_REGION_LIST_NUM];        
    NET_EXTENSION_INFO stuExtensionInfo;                            
    int nCrowdRectListNum;                                          
    NET_CROWD_RECT_LIST_INFO stuCrowdRectList[MAX_CROWD_RECT_LIST]; 
    int nGlobalPeopleNum;                                           
    NET_IMAGE_INFO_EX2* pstuImageInfo;                              
    int nImageInfoNum;                                              
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                           
    BYTE byReserved[680];                                           
} DEV_EVENT_CROWD_DETECTION_INFO;
typedef struct tagNET_EVENT_TYPE
{
    BOOL bIsAlarmEvent;  
    BOOL bIsViolation;   
    BYTE byReserved[24]; 
} NET_EVENT_TYPE;
typedef struct tagDEV_EVENT_TRAFFIC_CARDISTANCESHORT_INFO
{
    int nChannelID;                                 
    BYTE byReserved[4];                             
    char szName[MAX_EVENT_NAME_LEN];                
    double dbPTS;                                   
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    int nLane;                                      
    int nSequence;                                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE byReserved1[992];                          
    EVENT_COMM_INFO stCommInfo;                     
    NET_EVENT_TYPE stuEventType;                    
} DEV_EVENT_TRAFFIC_CARDISTANCESHORT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_QUEUEJUMP_INFO
{
    int nChannelID;                                 
    char szName[DH_EVENT_NAME_LEN];                 
    char Reserved[4];                               
    double PTS;                                     
    NET_TIME_EX UTC;                                
    DWORD nEventID;                                 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nLane;                                      
    int nSequence;                                  
    BYTE byEventAction;                             
    BYTE byImageIndex;                              
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;                 
    DH_RESOLUTION_INFO stuResolution;     
    EVENT_COMM_INFO stCommInfo;           
    UINT nEventType;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1020];                
} DEV_EVENT_TRAFFIC_QUEUEJUMP_INFO;
typedef struct tagDEV_EVENT_PEDESTRIAN_JUNCTION_INFO
{
    int nChannelID;                     
    char szName[DH_EVENT_NAME_LEN];     
    int nGroupID;                       
    int nCountInGroup;                  
    int nIndexInGroup;                  
    double PTS;                         
    NET_TIME_EX UTC;                    
    int UTCMS;                          
    int nEventID;                       
    DH_EVENT_FILE_INFO stuFileInfo;     
    DH_MSG_OBJECT stuObject;            
    int nLane;                          
    int nSequence;                      
    VA_OBJECT_NONMOTOR stuNonMotor;     
    BOOL bHasNonMotor;                  
    DH_MSG_OBJECT stuVehicle;           
    char szReserved[344 - POINTERSIZE]; 
} DEV_EVENT_PEDESTRIAN_JUNCTION_INFO;
typedef struct tagDEV_EVENT_VEHICLE_SUSPICIOUSCAR_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char Reserved[4];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DWORD nEventID;                 
    DH_EVENT_FILE_INFO stuFileInfo; 
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    NET_GPS_INFO stuGPSInfo;          
    BYTE byReserved[4096];            
} DEV_EVENT_VEHICLE_SUSPICIOUSCAR_INFO;
typedef struct tagEVENT_VEHICLE_INFO
{
    char szCategory[MAX_CATEGORY_LEN]; 
    BYTE byReserved[64];               
} EVENT_VEHICLE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PEDESTRAIN_INFO
{
    int nChannelID;                   
    char szName[DH_EVENT_NAME_LEN];   
    char bReserved1[8];               
    DWORD PTS;                        
    NET_TIME_EX UTC;                  
    int nEventID;                     
    DH_EVENT_FILE_INFO stuFileInfo;   
    DH_RESOLUTION_INFO stuResolution; 
    DWORD dwSnapFlagMask;             
    BYTE bEventAction;                
    BYTE bReserved2[2];
    BYTE byImageIndex;                                 
    int nLane;                                         
    DH_MSG_OBJECT stuObject;                           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;        
    EVENT_TRAFFIC_CAR_PART_INFO stuTrafficCarPartInfo; 
    EVENT_VEHICLE_INFO stuVehicle;                     
    BYTE bReserved[252];                               
    EVENT_COMM_INFO stCommInfo;                        
} DEV_EVENT_TRAFFIC_PEDESTRAIN_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_THROW_INFO
{
    int nChannelID;                   
    char szName[DH_EVENT_NAME_LEN];   
    char bReserved1[8];               
    DWORD PTS;                        
    NET_TIME_EX UTC;                  
    int nEventID;                     
    DH_EVENT_FILE_INFO stuFileInfo;   
    DH_RESOLUTION_INFO stuResolution; 
    DWORD dwSnapFlagMask;             
    BYTE bEventAction;                
    BYTE bReserved2[2];
    BYTE byImageIndex;                                 
    int nLane;                                         
    DH_MSG_OBJECT stuObject;                           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;        
    EVENT_TRAFFIC_CAR_PART_INFO stuTrafficCarPartInfo; 
    NET_GPS_INFO stuGPSInfo;                           
    BYTE bReserved[340];                               
    EVENT_COMM_INFO stCommInfo;                        
} DEV_EVENT_TRAFFIC_THROW_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_IDLE_INFO
{
    int nChannelID;                   
    char szName[DH_EVENT_NAME_LEN];   
    char bReserved1[8];               
    DWORD PTS;                        
    NET_TIME_EX UTC;                  
    int nEventID;                     
    DH_EVENT_FILE_INFO stuFileInfo;   
    DH_RESOLUTION_INFO stuResolution; 
    DWORD dwSnapFlagMask;             
    BYTE bEventAction;                
    BYTE bReserved2[2];
    BYTE byImageIndex;          
    int nLane;                  
    BYTE bReserved[1024];       
    EVENT_COMM_INFO stCommInfo; 
} DEV_EVENT_TRAFFIC_IDLE_INFO;
typedef struct tagDEV_EVENT_TURNRIGHTAFTERSTRAIGHT_INFO
{
    int nChannelID;                                 
    char szName[DH_EVENT_NAME_LEN];                 
    char bReserved[4];                              
    double dPTS;                                    
    NET_TIME_EX stuUTC;                             
    int nEventID;                                   
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nLane;                                      
    int nSequence;                                  
    BYTE byEventAction;                             
    BYTE byImageIndex;                              
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;             
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1012];            
    EVENT_COMM_INFO stCommInfo;       
} DEV_EVENT_TURNRIGHTAFTERSTRAIGHT_INFO;
typedef struct tagDEV_EVENT_TURNRIGHTAFTERPEOPLE_INFO
{
    int nChannelID;                                 
    char szName[DH_EVENT_NAME_LEN];                 
    char bReserved[4];                              
    double dPTS;                                    
    NET_TIME_EX stuUTC;                             
    int nEventID;                                   
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nLane;                                      
    int nSequence;                                  
    BYTE byEventAction;                             
    BYTE byImageIndex;                              
    BYTE byReserved1[2];
    DWORD dwSnapFlagMask;                 
    DH_RESOLUTION_INFO stuResolution;     
    BYTE byReserved[1012];                
    EVENT_COMM_INFO stCommInfo;           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} DEV_EVENT_TURNRIGHTAFTERPEOPLE_INFO;
#define MAX_DRIVING_DIR_NUM 16 
typedef enum tagNET_FLOWSTAT_DIRECTION
{
    DRIVING_DIR_UNKNOW = 0, 
    DRIVING_DIR_APPROACH,   
    DRIVING_DIR_LEAVE,      
} NET_FLOWSTAT_DIRECTION;
typedef enum tagNET_ROAD_DIRECTION
{
    ROAD_DIR_UNKNOW,    
    ROAD_DIR_TURNLEFT,  
    ROAD_DIR_TURNRIGHT, 
    ROAD_DIR_STRAIGHT,  
    ROAD_DIR_UTURU,     
    ROAD_DIR_NUM,
} NET_ROAD_DIRECTION;
typedef struct tagNET_TRAFFIC_FLOWSTAT_INFO_DIR
{
    NET_FLOWSTAT_DIRECTION emDrivingDir;  
    char szUpGoing[FLOWSTAT_ADDR_NAME];   
    char szDownGoing[FLOWSTAT_ADDR_NAME]; 
    BYTE reserved[32];                    
} NET_TRAFFIC_FLOWSTAT_INFO_DIR;
typedef enum tagNET_TRAFFIC_JAM_STATUS
{
    JAM_STATUS_UNKNOW = 0, 
    JAM_STATUS_CLEAR,      
    JAM_STATUS_JAMMED,     
    JAM_STATUS_SLOWED,     
} NET_TRAFFIC_JAM_STATUS;
typedef enum tagNET_TRAFFIC_ROAD_RANK
{
    ROAD_RANK_UNKNOWN = 0,
    ROAD_RANK_RAPID = 1,    
    ROAD_RANK_TRUNK = 2,    
    ROAD_RANK_SUBTRUNK = 3, 
    ROAD_RANK_BRANCH = 4,   
} NET_TRAFFIC_ROAD_RANK;
typedef enum tagNET_EM_FLOW_ATTRIBUTE
{
    EM_FLOW_ATTRIBUTE_UNKNOWN = 0,
    EM_FLOW_ATTRIBUTE_FLOW_DETECTION,  
    EM_FLOW_ATTRIBUTE_QUEUE_DETECTION, 
} NET_EM_FLOW_ATTRIBUTE;
typedef enum tagNET_EM_OVER_FLOW_STATE
{
    EM_OVER_FLOW_STATE_UNKNOWN = 0,  
    EM_OVER_FLOW_STATE_NOT_OVERFLOW, 
    EM_OVER_FLOW_STATE_OVERFLOW      
} NET_EM_OVER_FLOW_STATE;
typedef struct tagNET_SPACE_OCCUPY_RATIO_MULTI
{
    UINT nID;                
    float fSpaceOccupyRatio; 
    char szReserverd[8];     
} NET_SPACE_OCCUPY_RATIO_MULTI;
typedef struct tagNET_TRAFFIC_FLOW_STATE
{
    int nLane;                                      
    DWORD dwState;                                  
    DWORD dwFlow;                                   
    DWORD dwPeriod;                                 
    NET_TRAFFIC_FLOWSTAT_INFO_DIR stTrafficFlowDir; 
    int nVehicles;                                  
    float fAverageSpeed;                            
    float fAverageLength;                           
    float fTimeOccupyRatio;                         
    float fSpaceOccupyRatio;                        
    float fSpaceHeadway;                            
    float fTimeHeadway;                             
    float fDensity;                                 
    int nOverSpeedVehicles;                         
    int nUnderSpeedVehicles;                        
    int nLargeVehicles;                             
    int nMediumVehicles;                            
    int nSmallVehicles;                             
    int nMotoVehicles;                              
    int nLongVehicles;                              
    int nVolume;                                    
    int nFlowRate;                                  
    int nBackOfQueue;                               
    int nTravelTime;                                
    int nDelay;                                     
    BYTE byDirection[MAX_DRIVING_DIR_NUM];          
    BYTE byDirectionNum;                            
    BYTE reserved1[3];                              
    NET_TRAFFIC_JAM_STATUS emJamState;              
    int nPassengerCarVehicles;    
    int nLargeTruckVehicles;      
    int nMidTruckVehicles;        
    int nSaloonCarVehicles;       
    int nMicrobusVehicles;        
    int nMicroTruckVehicles;      
    int nTricycleVehicles;        
    int nMotorcycleVehicles;      
    int nPasserbyVehicles;        
    NET_TRAFFIC_ROAD_RANK emRank; 
    int nState;                   
    BOOL bOccupyHeadCoil;         
    BOOL bOccupyTailCoil;         
    BOOL bStatistics;             
    int nLeftVehicles;                                         
    int nRightVehicles;                                        
    int nStraightVehicles;                                     
    int nUTurnVehicles;                                        
    DH_POINT stQueueEnd;                                       
    double dBackOfQueue;                                       
    DWORD dwPeriodByMili;                                      
    int nBusVehicles;                                          
    int nMPVVehicles;                                          
    int nMidPassengerCarVehicles;                              
    int nMiniCarriageVehicles;                                 
    int nOilTankTruckVehicles;                                 
    int nPickupVehicles;                                       
    int nSUVVehicles;                                          
    int nSUVorMPVVehicles;                                     
    int nTankCarVehicles;                                      
    int nUnknownVehicles;                                      
    NET_EM_FLOW_ATTRIBUTE emCustomFlowAttribute;               
    int nRoadFreeLength;                                       
    NET_EM_OVER_FLOW_STATE emOverflowState;                    
    int nQueueVehicleNum;                                      
    int nSpaceOccupyRatioMultiCount;                           
    NET_SPACE_OCCUPY_RATIO_MULTI stuSpaceOccupyRatioMulti[32]; 
    UINT nTotalStopNum;                                        
    UINT nTotalDelayTime;                                      
    UINT nTotalNum;                                            
    float fAverageStopNum;                                     
    float fAverageDelayTime;                                   
    float fFlowSaturationRatio;                                
    float fMaxQueueLen;                                        
    float fQueueStartingPoint;                                 
    float fQueueFinishingPoint;                                
    char szSpaceOccupyNum[64];                                 
    BYTE reserved[92];                                         
} NET_TRAFFIC_FLOW_STATE;
typedef struct tagNET_TRAFFICFLOWSTATINFO
{
    DH_TRAFFICFLOWSTAT stuTrafficFlowStat; 
    double dbBackOfQueue;         
    NET_TRAFFIC_ROAD_RANK emRank; 
    int nState;                   
    BYTE reserved[1024];          
} NET_TRAFFICFLOWSTATINFO;
typedef struct tagDEV_EVENT_TRAFFIC_FLOW_STATE
{
    int nChannelID;                                    
    char szName[DH_EVENT_NAME_LEN];                    
    UINT nRuleID;                                      
    char bReserved1[4];                                
    DWORD PTS;                                         
    NET_TIME_EX UTC;                                   
    int nEventID;                                      
    int nSequence;                                     
    int nStateNum;                                     
    NET_TRAFFIC_FLOW_STATE stuStates[DH_MAX_LANE_NUM]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;        
    int nStopVehiclenum;                               
    int nDetectionAreaVehicleNum;                      
    BYTE bReserved[884];                               
} DEV_EVENT_TRAFFIC_FLOW_STATE;
typedef struct tagDEV_EVENT_ALARM_VIDEOSTATIC_INFO
{
    int nChannelID;                    
    char szName[DH_EVENT_NAME_LEN];    
    char bReserved1[8];                
    DWORD PTS;                         
    NET_TIME_EX UTC;                   
    int nEventID;                      
    EM_ALARM_VIDEO_STATIC_MODE emMode; 
    BYTE bEventAction;                 
    BYTE bReserved[1027];              
} DEV_EVENT_ALARM_VIDEOSTATIC_INFO;
typedef struct tagDEV_EVENT_ALARM_VIDEOTIMING_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[8];             
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    BYTE bEventAction;              
    BYTE bReserved[1027];           
} DEV_EVENT_ALARM_VIDEOTIMING_INFO;
typedef struct tagDEV_SRC_INFO
{
    char szSrcEvent[DH_COMMON_STRING_32]; 
    NET_TIME_EX stSrcTime;                
    int iSrcChannel;                      
    BYTE reserved[512];                   
} DEV_SRC_INFO;
typedef struct tagDEV_EVENT_LINK_SD
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[8];             
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    DEV_SRC_INFO* pstSrcInfo; 
    NET_TIME_EX stStartTime;  
    NET_TIME_EX stEndTime;    
    int iPresetID;            
    BYTE reserved[512];       
} DEV_EVENT_LINK_SD;
typedef struct tagDEV_EVENT_FLOWRATE_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[8];             
    double dbPTS;                   
    NET_TIME_EX stuTime;            
    int nEventID;                   
    unsigned int nFlowRate; 
    BYTE reserved[1024];    
} DEV_EVENT_FLOWRATE_INFO;
typedef struct tagDEV_EVENT_ALARM_CITIZENIDCARD_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[8];             
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nGroupID;                        
    int nCountInGroup;                   
    int nIndexInGroup;                   
    char szCitizen[DH_COMMON_STRING_64]; 
    EM_CITIZENIDCARD_SEX_TYPE emSex;     
    int nECType;                         
    NET_TIME stuBirth;                      
    char szAddress[DH_COMMON_STRING_256];   
    char szNumber[DH_COMMON_STRING_64];     
    char szAuthority[DH_COMMON_STRING_256]; 
    NET_TIME stuStart;                      
    BOOL bLongTimeValidFlag;                
    NET_TIME stuEnd;       
    char szReversed[1024]; 
} DEV_EVENT_ALARM_CITIZENIDCARD_INFO;
typedef struct tagDEV_EVENT_ALARM_PIC_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[8];             
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    NET_TIME_EX stuTime;                   
    DWORD dwEventType;                     
    DWORD dwSpeed;                         
    DWORD dwSpeedHighLine;                 
    DWORD dwDisk;                          
    DWORD dwCluster;                       
    DWORD dwPartition;                     
    char szSnapAddr[DH_COMMON_STRING_128]; 
    char szPicID[DH_COMMON_STRING_32];     
    char szPlate[DH_COMMON_STRING_16];     
    char szReversed[2000];                 
} DEV_EVENT_ALARM_PIC_INFO;
typedef enum tagEM_ACCESS_CTL_IMAGE_TYPE
{
    EM_ACCESS_CTL_IMAGE_UNKNOWN = -1, 
    EM_ACCESS_CTL_IMAGE_LOCAL,        
    EM_ACCESS_CTL_IMAGE_SCENE,        
    EM_ACCESS_CTL_IMAGE_FACE,         
    EM_ACCESS_CTL_IMAGE_INFRARED,     
    EM_ACCESS_CTL_IMAGE_COMPANION,    
    EM_ACCESS_CTL_IMAGE_HEAT,         
} EM_ACCESS_CTL_IMAGE_TYPE;
typedef struct tagDEV_ACCESS_CTL_IMAGE_INFO
{
    EM_ACCESS_CTL_IMAGE_TYPE emType; 
    UINT nOffSet;                    
    UINT nLength;                    
    UINT nWidth;                     
    UINT nHeight;                    
    NET_RECT stuBoundingBox;         
    BYTE byReserved[48];             
} DEV_ACCESS_CTL_IMAGE_INFO;
typedef struct tagDEV_ACCESS_CTL_CUSTOM_WORKER_INFO
{
    NET_ACCESSCTLCARD_SEX emSex;                 
    char szRole[MAX_COMMON_STRING_32];           
    char szProjectNo[MAX_COMMON_STRING_32];      
    char szProjectName[MAX_COMMON_STRING_64];    
    char szBuilderName[MAX_COMMON_STRING_64];    
    char szBuilderID[MAX_COMMON_STRING_32];      
    char szBuilderType[MAX_COMMON_STRING_32];    
    char szBuilderTypeID[MAX_COMMON_STRING_8];   
    char szPictureID[MAX_COMMON_STRING_64];      
    char szContractID[MAX_COMMON_STRING_16];     
    char szWorkerTypeID[MAX_COMMON_STRING_8];    
    char szWorkerTypeName[MAX_COMMON_STRING_32]; 
    BOOL bPersonStatus;                          
    BYTE byReserved[256];                        
} DEV_ACCESS_CTL_CUSTOM_WORKER_INFO;
typedef struct tagDEV_EVENT_ACCESS_CTL_INFO
{
    int nChannelID;                                                     
    char szName[DH_EVENT_NAME_LEN];                                     
    char bReserved1[4];                                                 
    double PTS;                                                         
    NET_TIME_EX UTC;                                                    
    int nEventID;                                                       
    DH_MSG_OBJECT stuObject;                                            
    DH_EVENT_FILE_INFO stuFileInfo;                                     
    NET_ACCESS_CTL_EVENT_TYPE emEventType;                              
    BOOL bStatus;                                                       
    NET_ACCESSCTLCARD_TYPE emCardType;                                  
    NET_ACCESS_DOOROPEN_METHOD emOpenMethod;                            
    char szCardNo[DH_MAX_CARDNO_LEN];                                   
    char szPwd[DH_MAX_CARDPWD_LEN];                                     
    char szReaderID[DH_COMMON_STRING_32];                               
    char szUserID[DH_COMMON_STRING_64];                                 
    char szSnapURL[DH_COMMON_STRING_128];                               
    int nErrorCode;                                                     
    int nPunchingRecNo;                                                 
    int nNumbers;                                                       
    BYTE byImageIndex;                                                  
    BYTE byReserved[3];                                                 
    DWORD dwSnapFlagMask;                                               
    NET_ATTENDANCESTATE emAttendanceState;                              
    char szClassNumber[MAX_CLASS_NUMBER_LEN];                           
    char szPhoneNumber[MAX_PHONENUMBER_LEN];                            
    char szCardName[DH_MAX_CARDNAME_LEN];                               
    UINT uSimilarity;                                                   
    DEV_ACCESS_CTL_IMAGE_INFO stuImageInfo[6];                          
    int nImageInfoCount;                                                
    char szCitizenIDNo[20];                                             
    UINT nGroupID;                                                      
    int nCompanionCardCount;                                            
    char szCompanionCards[MAX_COMPANION_CARD_NUM][DH_MAX_CARDINFO_LEN]; 
    DEV_ACCESS_CTL_CUSTOM_WORKER_INFO stuCustomWorkerInfo;              
    EM_CARD_STATE emCardState;                                          
    char szSN[32];                                                      
    EM_HAT_STYLE emHatStyle;                                            
    EM_UNIFIED_COLOR_TYPE emHatColor;                                   
    EM_LIFT_CALLER_TYPE emLiftCallerType;                               
    BOOL bManTemperature;                                               
    NET_MAN_TEMPERATURE_INFO stuManTemperatureInfo;                     
    char szCitizenName[256];                                            
    int nCompanionInfo;                                                 
    NET_COMPANION_INFO stuCompanionInfo[12];                            
    EM_MASK_STATE_TYPE emMask;                                          
    UINT nFaceIndex;                                                    
    BOOL bClassNumberEx;                                                
    char szClassNumberEx[512];                                          
    char szDormitoryNo[64];                                             
    char szStudentNo[64];                                               
    EM_USER_TYPE emUserType;                                            
    BOOL bRealUTC;                                                      
    NET_TIME_EX RealUTC;                                                
    char szQRCode[512];                                                 
    char szCompanyName[200];                                            
    int nScore;                                                         
    EM_FACE_CHECK emFaceCheck;                                          
    EM_QRCODE_IS_EXPIRED emQRCodeIsExpired;                             
    EM_QRCODE_STATE emQRCodeState;                                      
    NET_TIME stuQRCodeValidTo;                                          
    UINT nBlockId;                                                      
    char szSection[64];                                                 
    char szWorkClass[256];                                              
    EM_TEST_ITEMS emTestItems;                                          
    NET_TEST_RESULT stuTestResult;                                      
    char szDeviceID[128];                                               
    char szUserUniqueID[128];                                           
    BOOL bUseCardNameEx;                                                
    char szCardNameEx[128];                                             
    int nHSJCResult;                                                    
    NET_VACCINE_INFO stuVaccineInfo;                                    
    NET_TRAVEL_INFO stuTravelInfo;                                      
    char szTrafficPlate[32];                                            
    char szQRCodeEx[2048];                                              
    char szRecordUrl[128];                                              
    NET_HSJC_INFO stuHSJCInfo;                                          
    NET_ANTIGEN_INFO stuAntigenInfo;                                    
    char szHealthGreenStatus[20];                                       
    char szCitizenIDAddress[108];                                       
    UINT nCitizenIDEC;                                                  
    NET_TIME stuCitizenIDBirth;                                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                               
    int nAge;                                                           
    char szCheckOutType[32];                                            
    char szCheckOutCause[512];                                          
    char szLocationName[256];                                           
    char szLocationAddress[256];                                        
    char szLocationType[256];                                           
    char szCallLiftFloor[16];                                           
    BYTE szReversed[384];                                               
} DEV_EVENT_ACCESS_CTL_INFO;
typedef struct tagDEV_EVENT_ALARM_NETPLAYCHECK_INFO
{
    int nChannelID;                           
    char szName[DH_EVENT_NAME_LEN];           
    char bReserved1[8];                       
    DWORD PTS;                                
    NET_TIME_EX UTC;                          
    int nEventID;                             
    NET_TIME_EX stuTime;                      
    char szIdentityCard[DH_COMMON_STRING_32]; 
    char szNetBarName[DH_COMMON_STRING_32];   
    char szNetBarID[DH_COMMON_STRING_32];     
    char szNetBarAddr[DH_COMMON_STRING_64];   
} DEV_EVENT_ALARM_NETPLAYCHECK_INFO;
#define MAX_SNAPBYTIME_DATA_NUM 20
typedef struct tagEVENT_SNAPBYTIME_DATA
{
    DWORD dwLiquidLevel; 
    DWORD dwDistMeasure; 
    int nTemperature;    
    int nHumidity;       
    DWORD dwWaterFlow;   
    BOOL bAlarmFlag;     
    char szReversed[40]; 
} EVENT_SNAPBYTIME_DATA;
typedef struct tagDEV_EVENT_SNAPBYTIME
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    NET_TIME_EX stuSnapTime;   
    unsigned int uLiquidLevel; 
    unsigned int uDistMeasure; 
    int nTemperature;          
    int nHumidity;             
    int nDataNum;                                               
    EVENT_SNAPBYTIME_DATA stuDataList[MAX_SNAPBYTIME_DATA_NUM]; 
    char szReversed[748];                                       
} DEV_EVENT_SNAPBYTIME;
typedef struct tagDEV_EVENT_MANSTAND_DETECTION_INFO
{
    int nChannelID;                                     
    char szName[DH_EVENT_NAME_LEN];                     
    char bReserved1[4];                                 
    double PTS;                                         
    NET_TIME_EX UTC;                                    
    int nEventID;                                       
    int nAction;                                        
    int nManListCount;                                  
    MAN_STAND_LIST_INFO stuManList[MAX_MAN_LIST_COUNT]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;         
    char szReversed[2048];                              
} DEV_EVENT_MANSTAND_DETECTION_INFO;
typedef enum tagEM_EVENT_DETECT_TYPE
{
    EM_EVENT_DETECT_TYPE_UNKNOWN = -1,     
    EM_EVENT_DETECT_TYPE_LESS_OR_EQUAL,    
    EM_EVENT_DETECT_TYPE_GREATER_OR_EQUAL, 
    EM_EVENT_DETECT_TYPE_EQUAL,            
    EM_EVENT_DETECT_TYPE_NOEQUAL,          
    EM_EVENT_DETECT_TYPE_CHANGE,           
    EM_EVENT_DETECT_TYPE_GREATER,          
    EM_EVENT_DETECT_TYPE_LESS,             
    EM_EVENT_DETECT_TYPE_IN_INTERVAL,      
    EM_EVENT_DETECT_TYPE_OUT_INTERVAL,     
} EM_EVENT_DETECT_TYPE;
typedef struct tagDEV_EVENT_MANNUM_DETECTION_INFO
{
    int nChannelID;                                   
    char szName[DH_EVENT_NAME_LEN];                   
    char bReserved1[4];                               
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    int nEventID;                                     
    int nAction;                                      
    int nManListCount;                                
    MAN_NUM_LIST_INFO stuManList[MAX_MAN_LIST_COUNT]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    UINT nAreaID;                                     
    UINT nPrevNumber;                                 
    UINT nCurrentNumber;                              
    char szSourceID[32];                              
    char szRuleName[128];                             
    EM_EVENT_DETECT_TYPE emDetectType;                
    UINT nAlertNum;                                   
    int nAlarmType;                                   
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    int nDetectRegionNum;                             
    NET_POINT_EX stuDetectRegion[20];                 
    char szReversed[700];                             
} DEV_EVENT_MANNUM_DETECTION_INFO;
typedef struct tagDEV_EVENT_QUEUENUM_DETECTION_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    DWORD nEventID;                 
    int nAction;                    
    UINT nAreaID;                                     
    int nMaxManListNum;                               
    MAN_NUM_LIST_INFO stuManList[MAX_MAN_LIST_COUNT]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    BYTE byReversed[1012];                            
} DEV_EVENT_QUEUENUM_DETECTION_INFO;
typedef struct tagDEV_EVENT_GENERATEGRAPH_DETECTION_INFO
{
    int nChannelID;                             
    char szName[DH_EVENT_NAME_LEN];             
    char bReserved1[4];                         
    double PTS;                                 
    NET_TIME_EX UTC;                            
    int nEventID;                               
    int nAction;                                
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    DH_EVENT_FILE_INFO stuFileInfo;             
    BYTE byReversed[1024]; 
} DEV_EVENT_GENERATEGRAPH_DETECTION_INFO;
typedef struct tagDEV_EVENT_TIREDPHYSIOLOGICAL_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;                                      
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE bReserved[736];                              
} DEV_EVENT_TIREDPHYSIOLOGICAL_INFO;
typedef struct tagDEV_EVENT_TIREDLOWERHEAD_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE bReserved[736];                              
} DEV_EVENT_TIREDLOWERHEAD_INFO;
typedef struct tagDEV_EVENT_DRIVERLOOKAROUND_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE bReserved[736];                              
} DEV_EVENT_DRIVERLOOKAROUND_INFO;
typedef struct tagDEV_EVENT_INFRAREDBLOCK_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE bReserved[736];                              
} DEV_EVENT_INFRAREDBLOCK_INFO;
typedef struct tagDEV_EVENT_DRIVERLEAVEPOST_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE bReserved[736];                              
} DEV_EVENT_DRIVERLEAVEPOST_INFO;
typedef struct tagDEV_EVENT_DRIVERYAWN_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char szReserved1[4];            
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE byReserved[736];                             
} DEV_EVENT_DRIVERYAWN_INFO;
typedef enum tagEM_FIREWARNING_PIC_TYPE
{
    EM_PIC_UNKNOWN,  
    EM_PIC_NONE,     
    EM_PIC_OVERVIEW, 
    EM_PIC_DETAIL,   
} EM_FIREWARNING_PIC_TYPE;
typedef struct tagDEV_EVENT_FIREWARNING_INFO
{
    int nChannelID;                      
    char szName[DH_EVENT_NAME_LEN];      
    DH_EVENT_FILE_INFO stuFileInfo;      
    int nAction;                         
    UINT nFSID;                          
    EM_FIREWARNING_PIC_TYPE emPicType;   
    BOOL bIsLeaveFireDetect;             
    NET_IMAGE_INFO_EX2* pstuImageInfo;   
    int nImageInfoNum;                   
    BYTE byReserved[1008 - POINTERSIZE]; 
} DEV_EVENT_FIREWARNING_INFO;
typedef enum tagEM_DETECT_OBJECT
{
    EM_DETECT_OBJECT_UNKNOWN,             
    EM_DETECT_OBJECT_HUMAN_BODY_AND_FACE, 
    EM_DETECT_OBJECT_HUMAN_BODY,          
    EM_DETECT_OBJECT_HUMAN_FACE,          
} EM_DETECT_OBJECT;
typedef struct tagHUMAN_IMAGE_INFO
{
    UINT nOffSet;        
    UINT nLength;        
    UINT nWidth;         
    UINT nHeight;        
    UINT nIndexInData;   
    BYTE byReserved[52]; 
} HUMAN_IMAGE_INFO;
typedef struct tagFACE_IMAGE_INFO
{
    UINT nOffSet;        
    UINT nLength;        
    UINT nWidth;         
    UINT nHeight;        
    UINT nIndexInData;   
    BYTE byReserved[52]; 
} FACE_IMAGE_INFO;
typedef enum tagEM_HAS_VEST
{
    EM_HAS_VEST_UNKNOWN = 0, 
    EM_HAS_VEST_NO,          
    EM_HAS_VEST_YES,         
} EM_HAS_VEST;
typedef enum tagEM_HAS_BADGE
{
    EM_HAS_BADGE_UNKNOWN = 0, 
    EM_HAS_BADGE_NO,          
    EM_HAS_BADGE_YES,         
} EM_HAS_BADGE;
typedef enum tagEM_HAS_BABYCARRIAGE
{
    EM_HAS_BABYCARRIAGE_UNKNOWN = 0, 
    EM_HAS_BABYCARRIAGE_NO,          
    EM_HAS_BABYCARRIAGE_YES,         
} EM_HAS_BABYCARRIAGE;
typedef enum tagEM_IS_ERRORDETECT
{
    EM_IS_ERRORDETECT_UNKNOWN = -1, 
    EM_IS_ERRORDETECT_NO,           
    EM_IS_ERRORDETECT_YES,          
} EM_IS_ERRORDETECT;
typedef enum tagEM_HAS_HEAD
{
    EM_HAS_HEAD_UNKNOWN = -1, 
    EM_HAS_HEAD_NO,           
    EM_HAS_HEAD_YES,          
} EM_HAS_HEAD;
typedef enum tagEM_HAS_DOWNBODY
{
    EM_HAS_DOWNBODY_UNKNOWN = -1, 
    EM_HAS_DOWNBODY_NO,           
    EM_HAS_DOWNBODY_YES,          
} EM_HAS_DOWNBODY;
typedef enum tagEM_HAS_RAINCOAT
{
    EM_HAS_RAINCOAT_UNKNOWN = 0, 
    EM_HAS_RAINCOAT_NO,          
    EM_HAS_RAINCOAT_YES,         
} EM_HAS_RAINCOAT;
typedef enum tagEM_ASSOCIATED_RECORD_SOURCE
{
    EM_ASSOCIATED_RECORD_SOURCE_UNKNOWN = -1,             
    EM_ASSOCIATED_RECORD_SOURCE_NONE,                     
    EM_ASSOCIATED_RECORD_SOURCE_HUMAN,                    
    EM_ASSOCIATED_RECORD_SOURCE_MOTOR_VEHICLE_PASSING,    
    EM_ASSOCIATED_RECORD_SOURCE_MOTOR_VEHICLE_VIOLATION,  
    EM_ASSOCIATED_RECORD_SOURCE_STRUCTURED_MOTOR_VEHICLE, 
    EM_ASSOCIATED_RECORD_SOURCE_FACE,                     
    EM_ASSOCIATED_RECORD_SOURCE_NON_MOTOR_VEHICLE,        
} EM_ASSOCIATED_RECORD_SOURCE;
typedef struct tagHUMAN_ATTRIBUTES_INFO
{
    EM_CLOTHES_COLOR emCoatColor;     
    EM_COAT_TYPE emCoatType;          
    EM_CLOTHES_COLOR emTrousersColor; 
    EM_TROUSERS_TYPE emTrousersType;  
    EM_HAS_HAT emHasHat;              
    EM_HAS_BAG emHasBag;              
    NET_RECT stuBoundingBox;          
    int nAge;                              
    EM_SEX_TYPE emSex;                     
    EM_ANGLE_TYPE emAngle;                 
    EM_HAS_UMBRELLA emHasUmbrella;         
    EM_BAG_TYPE emBag;                     
    EM_CLOTHES_PATTERN emUpperPattern;     
    EM_HAIR_STYLE emHairStyle;             
    EM_CAP_TYPE emCap;                     
    NET_POINT stuHumanCenter;              
    EM_HAS_VEST emHasVest;                 
    EM_HAS_BADGE emHasBadge;               
    EM_HAS_BABYCARRIAGE emHasBabyCarriage; 
    EM_IS_ERRORDETECT emIsErrorDetect;     
    EM_HAS_HEAD emHasHead;                 
    EM_HAS_DOWNBODY emHasDownBody;         
    UINT nAngleConf;                       
    UINT nUpColorConf;                     
    UINT nDownColorConf;                   
    UINT nGenderConf;                      
    UINT nAgeConf;                         
    UINT nHatTypeConf;                     
    UINT nUpTypeConf;                      
    UINT nDownTypeConf;                    
    UINT nHairTypeConf;                    
    UINT nHasHeadConf;                     
    UINT nHasDownBodyConf;                 
    UINT nUniformStyleConf;                
    char nCoatType;                        
    BYTE byReserved[3];                    
} HUMAN_ATTRIBUTES_INFO;
typedef struct tagHUMAN_ATTRIBUTES_INFO_EX
{
    EM_HAS_RAINCOAT emHasRainCoat;                 
    EM_CLOTHES_COLOR emMaskColor;                  
    UINT nQeScore;                                 
    UINT nIntegrality;                             
    EM_ASSOCIATED_RECORD_SOURCE emExtRecordSource; 
    EM_CLOTHES_COLOR emCapColor;                   
    EM_UNIFORM_STYLE emUniformStyle;               
    int nHumanClarity;                             
    int nHumanCompleteScore;                       
    BOOL bIsRelatedFace;                           
    EM_COAT_TYPE emCoatStyle;                      
    EM_SHOES_TYPE emShoesType;                     
    EM_CLOTHES_COLOR emShoesColor;                 
    EM_AGE_SEG emAgeSeg;                           
    int nMask;                                     
    BYTE byReserved[984];                          
} HUMAN_ATTRIBUTES_INFO_EX;
typedef struct tagNET_FACE_ATTRIBUTE
{
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;                                         
    int nAge;                                                                       
    unsigned int nFeatureValidNum;                                                  
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emFeatures[DH_MAX_FACEDETECT_FEATURE_NUM]; 
    char szReserved[4];
    EM_EYE_STATE_TYPE emEye;     
    EM_MOUTH_STATE_TYPE emMouth; 
    EM_MASK_STATE_TYPE emMask;   
    EM_BEARD_STATE_TYPE emBeard; 
    int nAttractive;             
    NET_RECT stuBoundingBox;     
    NET_EULER_ANGLE stuFaceCaptureAngle;    
    UINT nFaceQuality;                      
    int nFaceAlignScore;                    
    int nFaceClarity;                       
    NET_POINT stuFaceCenter;                
    EM_FACEDETECT_GLASSES_TYPE emGlass;     
    UINT nFaceDetectConf;                   
    NET_FACE_ORIGINAL_SIZE stuOriginalSize; 
    int arrAngleStatus[3];                  
    UINT nIlluminationScore;   
    char nLeftEyeCoverConf;    
    char nLeftCheekCoverConf;  
    char nMouthCoverConf;      
    char nRightEyeCoverConf;   
    char nRightCheekCoverConf; 
    char nChinCoverConf;       
    char nIsCompleteFace;      
    char nSaturationScore;     
    char nBrowCoverConf;       
    char nNoseCoverConf;       
    BYTE bReserved0[2];        
    EM_AGE_SEG emAgeSeg;       
    BYTE bReserved[36];        
} NET_FACE_ATTRIBUTE;
typedef struct tagNET_HUMANTRAIT_EXTENSION_INFO
{
    char szAdditionalCode[MAX_HUMANTRAIT_EVENT_LEN]; 
    BYTE byReserved[32];                             
} NET_HUMANTRAIT_EXTENSION_INFO;
typedef enum tagEM_COMPLIANTDETAIL_TYPE
{
    EM_COMPLIANTDETAIL_UNKNOWN,      
    EM_COMPLIANTDETAIL_MASK,         
    EM_COMPLIANTDETAIL_HELMET,       
    EM_COMPLIANTDETAIL_VEST,         
    EM_COMPLIANTDETAIL_GLASSESS,     
    EM_COMPLIANTDETAIL_COATCOLOR,    
    EM_COMPLIANTDETAIL_TROUSESCOLOR, 
} EM_COMPLIANTDETAIL_TYPE;
typedef enum EM_HUMAN_POSTURE_TYPE
{
    EM_HUMAN_POSTURE_UNKNOWN,         
    EM_HUMAN_POSTURE_ALONG_WITH_FACE, 
} EM_HUMAN_POSTURE_TYPE;
typedef enum EM_IMAGE_LIGHT_TYPE
{
    EM_IMAGE_LIGHT_TYPE_UNKNOWN = 0,      
    EM_IMAGE_LIGHT_TYPE_VISIBLE,          
    EM_IMAGE_LIGHT_TYPE_NEAR_INFRARED,    
    EM_IMAGE_LIGHT_TYPE_THERMAL_INFRARED, 
} EM_IMAGE_LIGHT_TYPE;
typedef struct tagDEV_EVENT_HUMANTRAIT_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nEventID;                   
    double PTS;                     
    NET_TIME_EX UTC;                
    int nAction;                    
    EM_CLASS_TYPE emClassType;                                     
    int nGroupID;                                                  
    int nCountInGroup;                                             
    int nIndexInGroup;                                             
    HUMAN_IMAGE_INFO stuHumanImage;                                
    FACE_IMAGE_INFO stuFaceImage;                                  
    EM_DETECT_OBJECT emDetectObject;                               
    HUMAN_ATTRIBUTES_INFO stuHumanAttributes;                      
    SCENE_IMAGE_INFO stuSceneImage;                                
    NET_FACE_ATTRIBUTE stuFaceAttributes;                          
    FACE_SCENE_IMAGE stuFaceSceneImage;                            
    NET_EXTENSION_INFO stuExtensionInfo;                           
    NET_HUMANTRAIT_EXTENSION_INFO stuHumanTrait;                   
    NET_HUMAN_FEATURE_VECTOR_INFO stuHumanFeatureVectorInfo;       
    EM_FEATURE_VERSION emHumanFeatureVersion;                      
    NET_FACE_FEATURE_VECTOR_INFO stuFaceFeatureVectorInfo;         
    EM_FEATURE_VERSION emFaceFeatureVersion;                       
    UINT nCompliantMark;                                           
    int nCompliantDetailsNum;                                      
    EM_COMPLIANTDETAIL_TYPE emCompliantDetailType[32];             
    int nHumanPostureTypeNum;                                      
    EM_HUMAN_POSTURE_TYPE emHumanPostureType[32];                  
    HUMAN_IMAGE_INFO stuAlongWithFaceHumanImage;                   
    SCENE_IMAGE_INFO stuAlongWithFaceHumanSceneImage;              
    HUMAN_ATTRIBUTES_INFO stuAlongWithFaceHumanAttributes;         
    BOOL bCompliantMarkEnable;                                     
    NET_HUMAN_FEATURE_VECTOR_INFO stuAlongWithFaceHumanVectorInfo; 
    EM_FEATURE_VERSION emAlongWithFaceHumanVersion;                
    UINT nCompliantMode;                                           
    UINT nAlarmCompliance;                                         
    UINT nStartSequence;                                           
    UINT nEndSequence;                                             
    EM_IMAGE_LIGHT_TYPE emImageLightType;                          
    HUMAN_ATTRIBUTES_INFO_EX stuHumanAttributesEx;                 
    HUMAN_ATTRIBUTES_INFO_EX stuAlongWithFaceHumanAttributesEx;    
    NET_IMAGE_INFO_EX2 stuImageInfo[32];                           
    int nImageInfoNum;                                             
    char szObjectUUID[48];                                         
    char szHumanFeatureVersion[32];                                
    char szFaceFeatureVersion[32];                                 
    char szAlongWithFaceHumanVersion[32];                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                          
    char szSerialUUID[22];                                         
    char szReserved[2];                                            
    NET_IMAGE_INFO_EX3* pstuImageInfo;                             
    UINT nDetectMode;                                              
    char byReserved[852 - POINTERSIZE];                            
} DEV_EVENT_HUMANTRAIT_INFO;
typedef struct tagDEV_EVENT_LE_HEADDETECTION_INFO
{
    int nChannelID;       
    int nAction;          
    char szName[128];     
    double PTS;           
    NET_TIME_EX UTC;      
    int nEventID;         
    BYTE bReserved[1024]; 
} DEV_EVENT_LE_HEADDETECTION_INFO;
typedef struct tagDEV_EVENT_BUSSHARPTURN_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;                      
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE bReserved[1024];             
} DEV_EVENT_BUSSHARPTURN_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_ELETAGINFO_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;                           
    NET_RFIDELETAG_INFO stuRFIDEleTagInfo; 
    int nRetChannelNum;                    
    int nLinkChannel[DH_MAX_CHANNUM];      
    BYTE bReserved[956];                   
} DEV_EVENT_TRAFFIC_ELETAGINFO_INFO;
typedef enum tagEM_PASS_CHANGE_PICTURE_TYPE
{
    EM_PASS_CHANGE_PICTURE_TYPE_UNKNOWN, 
    EM_PASS_CHANGE_PICTURE_TYPE_PASS,    
    EM_PASS_CHANGE_PICTURE_TYPE_REAL,    
} EM_PASS_CHANGE_PICTURE_TYPE;
typedef struct tagDEV_EVENT_PASS_CHANGE_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char szReserved1[4];            
    double dbPTS;                   
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nPresetID;                             
    int nGroupID;                              
    int nCountInGroup;                         
    int nIndexInGroup;                         
    EM_PASS_CHANGE_PICTURE_TYPE emPictureType; 
    BYTE byReserved1[1020];                    
} DEV_EVENT_PASS_CHANGE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_WAITINGAREA_INFO
{
    int nChannelID;                                 
    BYTE byReserved[4];                             
    char szName[MAX_EVENT_NAME_LEN];                
    double dbPTS;                                   
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    int nLane;                                      
    int nSequence;                                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    BYTE byReserved1[1024];                         
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_WAITINGAREA_INFO;
#define MAX_OBJECT_NUM 32 
typedef struct tagDEV_EVENT_QUEUESTAY_DETECTION_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;                    
    int nGroupID;                                       
    int nCountInGroup;                                  
    int nIndexInGroup;                                  
    DH_MSG_OBJECT stuObject;                            
    int nObjectNum;                                     
    DH_MSG_OBJECT stuObjects[MAX_OBJECT_NUM];           
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    UINT nAreaID;                                       
    int nCount;                                         
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;         
    DH_EVENT_FILE_INFO stuFileInfo;                     
    NET_IMAGE_INFO_EX2* pstuImageInfo;                  
    int nImageInfoNum;                                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx;               
    BYTE byReversed[1012];                              
} DEV_EVENT_QUEUESTAY_DETECTION_INFO;
typedef struct tagDEV_EVENT_BANNER_DETECTION_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nAction;                    
    EM_CLASS_TYPE emClassType;                       
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjects[MAX_OBJECT_NUM];        
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nCount;                                      
    int nPresetID;                                   
    NET_EXTENSION_INFO stuExtensionInfo;             
    BYTE byReserved[1028];                           
} DEV_EVENT_BANNER_DETECTION_INFO;
typedef struct tagNONMOTOR_IMAGE_INFO
{
    int nOffset; 
    int nLength; 
} NONMOTOR_IMAGE_INFO;
typedef struct tagDEV_EVENT_NONMOTORDETECT_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nAction;                    
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    DWORD dwSnapFlagMask;                       
    DH_RESOLUTION_INFO stuResolution;           
    NONMOTOR_IMAGE_INFO stuImageInfo;     
    int nNumOfCycling;                    
    EM_OBJECT_COLOR_TYPE emNonMotorColor; 
    DH_RECT stuBoundingBox;               
    EM_SEX_TYPE emSex;                    
    int nAge;                             
    EM_NONMOTOR_OBJECT_STATUS emHelmet;     
    EM_NONMOTOR_OBJECT_STATUS emCall;       
    EM_NONMOTOR_OBJECT_STATUS emHat;        
    EM_NONMOTOR_OBJECT_STATUS emBag;        
    EM_NONMOTOR_OBJECT_STATUS emCarrierBag; 
    EM_NONMOTOR_OBJECT_STATUS emUmbrella;   
    EM_NONMOTOR_OBJECT_STATUS emGlasses;    
    EM_NONMOTOR_OBJECT_STATUS emMask;       
    EM_EMOTION_TYPE emEmotion;                
    EM_CLOTHES_TYPE emUpClothes;              
    EM_CLOTHES_TYPE emDownClothes;            
    EM_OBJECT_COLOR_TYPE emUpperBodyColor;    
    EM_OBJECT_COLOR_TYPE emLowerBodyColor;    
    EM_CATEGORY_NONMOTOR_TYPE emCategoryType; 
    BYTE byReserved[1024];                    
} DEV_EVENT_NONMOTORDETECT_INFO;
typedef enum tagEM_TRIGGER_TYPE
{
    EM_TRIGGER_TYPE_UNKNOWN = -1,       
    EM_TRIGGER_TYPE_CAR_INSPECTION_DEV, 
    EM_TRIGGER_TYPE_DADAR,              
    EM_TRIGGER_TYPE_VIDEO,              
} EM_TRIGGER_TYPE;
typedef enum tagEM_VIOLATION_ALARM_TYPE
{
    EM_VIOLATION_ALARM_TYPE_UNKNOWN = -1,      
    EM_VIOLATION_ALARM_TYPE_PARKING_VIOLATION, 
    EM_VIOLATION_ALARM_TYPE_PREALARM,          
} EM_VIOLATION_ALARM_TYPE;
typedef struct tagNET_CUSTOM_GPS_INFO
{
    double dbLongitude;    
    double dbLatidude;     
    double dbAltitude;     
    double dbSpeed;        
    double dbBearing;      
    BYTE byReserved[1024]; 
} NET_CUSTOM_GPS_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_BAN_INFO
{
    int nChannelID;                                 
    EM_TRIGGER_TYPE emTriggerType;                  
    char szName[MAX_EVENT_NAME_LEN];                
    double dbPTS;                                   
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nLane;                                      
    NET_TIME stuStartParkingTime;                   
    int nAlarmInterval;                             
    int nParkingAllowedTime;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    NET_CUSTOM_GPS_INFO stuCustomGPSStatus;         
    EM_VIOLATION_ALARM_TYPE emViolationAlarmType;   
    int nSequence;                                  
    BYTE byReserved[1024];                          
    EVENT_COMM_INFO stCommInfo;                     
} DEV_EVENT_TRAFFIC_BAN_INFO;
typedef struct tagDEV_EVENT_ELEVATOR_ABNORMAL_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[DH_EVENT_NAME_LEN]; 
    double dbPTS;                   
    NET_TIME_EX UTC;                
    int nAction;                          
    EM_CLASS_TYPE emClassType;            
    int nDetectRegionPointNum;            
    NET_POINT stuDetectRegion[20];        
    NET_POINT stuDirection[2];            
    NET_IMAGE_INFO_EX2* pstuImageInfo;    
    int nImageInfoNum;                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved1[908];                
} DEV_EVENT_ELEVATOR_ABNORMAL_INFO;
typedef struct tagNET_POS_ITEM_INFO
{
    char szItemName[DH_COMMON_STRING_32]; 
    double dbPrice;                       
    double dbQuantity;                    
    double dbAmount;                      
    char szUnit[DH_COMMON_STRING_8];      
    BYTE byReserved[256];                 
} NET_POS_ITEM_INFO;
typedef struct tagDEV_EVENT_POS_EXCHANGE_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[DH_EVENT_NAME_LEN]; 
    double dbPTS;                   
    NET_TIME_EX UTC;                
    int nEventID;                   
    char szDealNum[DH_COMMON_STRING_16]; 
    char szCardID[DH_COMMON_STRING_16];  
    BYTE byReserved1[4];                 
    int nItemListCount;                  
    NET_POS_ITEM_INFO* pstItemList;      
    NET_RECT stRect;                     
    NET_COLOR_RGBA stFrontColor;         
    unsigned int nFontSize;              
    BYTE byReserved[1020];               
} DEV_EVENT_POS_EXCHANGE_INFO;
typedef struct tagDEV_EVENT_DISTANCE_DETECTION_INFO
{
    int nChannelID;                                      
    char szName[128];                                    
    int nAction;                                         
    double PTS;                                          
    NET_TIME_EX UTC;                                     
    int nEventID;                                        
    DH_MSG_OBJECT stuObject;                             
    int nDetectRegionNum;                                
    NET_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;          
    char szSourceID[32];                                 
    NET_IMAGE_INFO_EX2* pstuImageInfo;                   
    int nImageInfoNum;                                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                
    BYTE byReserved[980];                                
} DEV_EVENT_DISTANCE_DETECTION_INFO;
typedef struct tagDEV_EVENT_FORWARDCOLLISION_WARNNING_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nAction;                    
    NET_GPS_STATUS_INFO stuGPSStatusInfo;             
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE byReserved[736];                             
} DEV_EVENT_FORWARDCOLLISION_WARNNING_INFO;
typedef struct tagDEV_EVENT_MATERIALSSTAY_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nAction;                    
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    char szPresetName[64];                           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    BYTE byReserved[4092];                           
} DEV_EVENT_MATERIALSSTAY_INFO;
typedef struct tagDEV_EVENT_LANEDEPARTURE_WARNNING_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nAction;                    
    NET_GPS_STATUS_INFO stuGPSStatusInfo;             
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE byReserved[736];                             
} DEV_EVENT_LANEDEPARTURE_WARNNING_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NONMOTOR_OVERLOAD_INFO
{
    int nChannelID;                             
    char szName[128];                           
    int nAction;                                
    double PTS;                                 
    NET_TIME_EX UTC;                            
    int nEventID;                               
    DH_EVENT_FILE_INFO stuFileInfo;             
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    DWORD dwSnapFlagMask;                       
    DH_RESOLUTION_INFO stuResolution;           
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    int nLane;                                      
    int nSequence;                                  
    EVENT_COMM_INFO stuCommInfo;                    
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    BYTE byReserved[2048];                          
} DEV_EVENT_TRAFFIC_NONMOTOR_OVERLOAD_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NONMOTOR_WITHOUTSAFEHAT_INFO
{
    int nChannelID;                             
    char szName[128];                           
    int nAction;                                
    double PTS;                                 
    NET_TIME_EX UTC;                            
    int nEventID;                               
    DH_EVENT_FILE_INFO stuFileInfo;             
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    DWORD dwSnapFlagMask;                       
    DH_RESOLUTION_INFO stuResolution;           
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    int nLane;                                      
    int nSequence;                                  
    EVENT_COMM_INFO stuCommInfo;                    
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    BYTE byReserved[2048];                          
} DEV_EVENT_TRAFFIC_NONMOTOR_WITHOUTSAFEHAT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NONMOTOR_HOLDUMBRELLA_INFO
{
    int nChannelID;                             
    int nAction;                                
    char szName[128];                           
    double PTS;                                 
    NET_TIME_EX UTC;                            
    int nEventID;                               
    DH_EVENT_FILE_INFO stuFileInfo;             
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    DWORD dwSnapFlagMask;                       
    DH_RESOLUTION_INFO stuResolution;           
    DH_MSG_OBJECT stuObject;                        
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    int nLane;                                      
    int nSequence;                                  
    EVENT_COMM_INFO stCommInfo;                     
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    BYTE byReserved[1368];                          
} DEV_EVENT_TRAFFIC_NONMOTOR_HOLDUMBRELLA_INFO;
typedef struct tagDEV_EVENT_VIDEOUNFOCUS_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nAction;                    
    BYTE byReserved[4096];          
} DEV_EVENT_VIDEOUNFOCUS_INFO;
typedef struct tagDEV_EVENT_FLOWBUSINESS_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    char szPresetName[64];                           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    UINT nViolationDuration;                         
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];  
    char szSourceID[32];                             
    DWORD dwSnapFlagMask;                            
    NET_IMAGE_INFO_EX2* pstuImageInfo;               
    int nImageInfoNum;                               
    BYTE byReserved[2040 - POINTERSIZE];             
} DEV_EVENT_FLOWBUSINESS_INFO;
typedef struct tagPTZ_NORMALIZED_POSITION_UNIT
{
    double dbPositionX;  
    double dbPositionY;  
    double dbZoom;       
    char szReserved[32]; 
} PTZ_NORMALIZED_POSITION_UNIT;
typedef enum tagEM_CITYMOTOR_STATUS
{
    EM_CITYMOTOR_STATUS_UNKNOWN,   
    EM_CITYMOTOR_STATUS_DRIVE_IN,  
    EM_CITYMOTOR_STATUS_DRIVE_OUT, 
} EM_CITYMOTOR_STATUS;
typedef enum tagEM_PREALARM
{
    EM_PREALARM_UNKNOWN = -1,            
    EM_PREALARM_VIOLATION_EVENT,         
    EM_PREALARM_VIOLATION_WARNING_EVENT, 
} EM_PREALARM;
typedef struct tagDEV_EVENT_CITY_MOTORPARKING_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjects[MAX_OBJECT_NUM];        
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    char szPresetName[64];                           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    UINT nParkingDuration;                           
    char szSourceID[32];                             
    DWORD dwSnapFlagMask;                            
    BOOL bPtzPosition;                               
    PTZ_NORMALIZED_POSITION_UNIT stuPtzPosition;     
    EM_CITYMOTOR_STATUS emMotorStatus;               
    SCENE_IMAGE_INFO stuSceneImage;                  
    EM_PREALARM emPreAlarm;                          
    NET_IMAGE_INFO_EX2* pstuImageInfo;               
    int nImageInfoNum;                               
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE byVehicleHeadDirection;                     
    char byReserved[1011];                           
} DEV_EVENT_CITY_MOTORPARKING_INFO;
typedef struct tagDEV_EVENT_CITY_NONMOTORPARKING_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nAlarmNum;                                   
    int nNoMotorNum;                                 
    char szPresetName[64];                           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    UINT nViolationDuration;                         
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];  
    char szSourceID[32];                             
    DWORD dwSnapFlagMask;                            
    SCENE_IMAGE_INFO stuSceneImage;                  
    NET_IMAGE_INFO_EX2* pstuImageInfo;               
    int nImageInfoNum;                               
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE byReserved[892];                            
} DEV_EVENT_CITY_NONMOTORPARKING_INFO;
typedef enum tagEM_AIRPLANE_STATE
{
    EM_AIRPLANE_STATE_UNKNOWN = 0,
    EM_AIRPLANE_STATE_ENTER,       
    EM_AIRPLANE_STATE_LEAVE,       
    EM_AIRPLANE_STATE_CHOCKON,     
    EM_AIRPLANE_STATE_CHOCKOFF,    
    EM_AIRPLANE_STATE_NEARBRIDGE,  
    EM_AIRPLANE_STATE_LEAVEBRIDGE, 
    EM_AIRPLANE_STATE_OPENDOOR,    
    EM_AIRPLANE_STATE_CLOSEDOOR,   
    EM_AIRPLANE_STATE_FUELSTART,   
    EM_AIRPLANE_STATE_FUELEND,     
    EM_AIRPLANE_STATE_FOODSTART,   
    EM_AIRPLANE_STATE_FOODEND,     
    EM_AIRPLANE_STATE_BELTSTART,   
    EM_AIRPLANE_STATE_BELTEND,     
    EM_AIRPLANE_STATE_TRACTORIN,   
    EM_AIRPLANE_STATE_TRACTOROUT,  
    EM_AIRPLANE_STATE_GUIDEIN,     
    EM_AIRPLANE_STATE_GUIDEOUT,    
} EM_AIRPLANE_STATE;
typedef struct tagDEV_EVENT_AIRPLANE_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    DH_EVENT_FILE_INFO stuFileInfo;             
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    NET_POINT stuGuideLine[2];         
    NET_POINT stuStopLine[10][2];      
    int nStopLineNum;                  
    int nAirPlaneID;                   
    NET_POINT stuAirPlaneStopLine[2];  
    NET_RECT stuRect;                  
    EM_AIRPLANE_STATE emAirPlaneState; 
    BYTE byReserved[4096]; 
} DEV_EVENT_AIRPLANE_DETECTION_INFO;
typedef struct tagDEV_EVENT_PHONECALL_DETECT_INFO
{
    int nChannelID;              
    int nAction;                 
    char szName[MAX_EVENT_NAME]; 
    double PTS;                  
    NET_TIME_EX UTC;             
    int nEventID;                
    int nGroupID;                                       
    int nCountInGroup;                                  
    int nIndexInGroup;                                  
    unsigned int UTCMS;                                 
    DH_MSG_OBJECT stuObject;                            
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;         
    UINT nRuleID;                                       
    UINT nObjectNum;                                    
    DH_MSG_OBJECT stuObjects[128];                      
    UINT nSerialUUIDNum;                                
    char szSerialUUID[128][22];                         
    BOOL bSceneImage;                                   
    SCENE_IMAGE_INFO_EX stuSceneImage;                  
    char szUserName[32];                                
    NET_IMAGE_INFO_EX2* pstuImageInfo;                  
    int nImageInfoNum;                                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx;               
    BYTE byReserved[188];                               
} DEV_EVENT_PHONECALL_DETECT_INFO;
typedef struct tagDEV_EVENT_SMOKING_DETECT_INFO
{
    int nChannelID;              
    int nAction;                 
    char szName[MAX_EVENT_NAME]; 
    double PTS;                  
    NET_TIME_EX UTC;             
    int nEventID;                
    int nGroupID;                                       
    int nCountInGroup;                                  
    int nIndexInGroup;                                  
    unsigned int UTCMS;                                 
    DH_MSG_OBJECT stuObject;                            
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;         
    char szSerialUUID[22];                              
    SCENE_IMAGE_INFO stuSceneImageInfo;   
    char szUserName[32];                  
    NET_IMAGE_INFO_EX2 stuImageInfo[32];  
    int nImageInfoNum;                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char byReserved[1024];                
} DEV_EVENT_SMOKING_DETECT_INFO;
typedef struct tagDEV_EVENT_RADAR_SPEED_LIMIT_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    char szAddress[32]; 
    int nSpeed;         
    NET_TIME_EX UTC;    
    int nGroupID;                               
    int nCountInGroup;                          
    int nIndexInGroup;                          
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    BYTE byReserved[1024];                      
} DEV_EVENT_RADAR_SPEED_LIMIT_ALARM_INFO;
typedef enum tagEM_FRUIT_TYPE
{
    EM_FRUIT_TYPE_UNKNOWN,                 
    EM_FRUIT_TYPE_GREEN_TANGERINE,         
    EM_FRUIT_TYPE_YELLOW_TANGERINE_ORANGE, 
    EM_FRUIT_TYPE_GRAPEFRUIT,              
    EM_FRUIT_TYPE_LEMON,                   
    EM_FRUIT_TYPE_WATERMELON,              
    EM_FRUIT_TYPE_BANANA,                  
    EM_FRUIT_TYPE_RED_APPLE,               
    EM_FRUIT_TYPE_GREEN_APPLE,             
    EM_FRUIT_TYPE_MUSKMELON,               
    EM_FRUIT_TYPE_HAMIMELON,               
    EM_FRUIT_TYPE_PEAR,                    
    EM_FRUIT_TYPE_KIWI,                    
    EM_FRUIT_TYPE_PAPAYA,                  
    EM_FRUIT_TYPE_PINEAPPLE,               
    EM_FRUIT_TYPE_MANGO,                   
    EM_FRUIT_TYPE_LONGAN,                  
    EM_FRUIT_TYPE_GINSENG_FRUIT,           
    EM_FRUIT_TYPE_POMEGRABATE,             
    EM_FRUIT_TYPE_COCONUT,                 
    EM_FRUIT_TYPE_CREAM_JUJUBE,            
    EM_FRUIT_TYPE_WINTER_JUJUBE,           
    EM_FRUIT_TYPE_AVOCADO,                 
    EM_FRUIT_TYPE_RED_PLUM,                
    EM_FRUIT_TYPE_PITAYA,                  
    EM_FRUIT_TYPE_GUAVA,                   
    EM_FRUIT_TYPE_PERSIMMON,               
    EM_FRUIT_TYPE_YACON,                   
} EM_FRUIT_TYPE;
typedef struct tagNET_CANDIDATE_FRUIT_INFO
{
    UINT nSimilarity;          
    EM_FRUIT_TYPE emFruitType; 
    BYTE byReserved[1024];     
} NET_CANDIDATE_FRUIT_INFO;
typedef struct tagDEV_EVENT_WEIGHING_PLATFORM_DETECTION_INFO
{
    int nChannelID;              
    int nAction;                 
    char szName[MAX_EVENT_NAME]; 
    double PTS;                  
    NET_TIME_EX UTC;             
    int nEventID;                
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;  
    UINT nCandidateFruitNum;                     
    NET_CANDIDATE_FRUIT_INFO stuFruitInfos[100]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;           
    SCENE_IMAGE_INFO_EX stuFruitImage;           
    BYTE byReserved[1024];                       
} DEV_EVENT_WEIGHING_PLATFORM_DETECTION_INFO;
typedef enum __EM_FILE_QUERY_TYPE
{
    DH_FILE_QUERY_TRAFFICCAR,                      
    DH_FILE_QUERY_ATM,                             
    DH_FILE_QUERY_ATMTXN,                          
    DH_FILE_QUERY_FACE,                            
    DH_FILE_QUERY_FILE,                            
    DH_FILE_QUERY_TRAFFICCAR_EX,                   
    DH_FILE_QUERY_FACE_DETECTION,                  
    DH_FILE_QUERY_IVS_EVENT,                       
    DH_FILE_QUERY_ANALYSE_OBJECT,                  
    DH_FILE_QUERY_MPT_RECORD_FILE,                 
    DH_FILE_QUERY_XRAY_DETECTION,                  
    DH_FILE_QUERY_HUMAN_TRAIT,                     
    DH_FILE_QUERY_NONMOTOR,                        
    DH_FILE_QUERY_DOORCONTROL_RECORD,              
    DH_FILE_QUERY_FACEBODY_DETECT,                 
    DH_FILE_QUERY_FACEBODY_ANALYSE,                
    DH_FILE_QUERY_FILE_EX,                         
    DH_FILE_QUERY_SNAPSHOT_WITH_MARK,              
    DH_FILE_QUERY_ANATOMY_TEMP_DETECT,             
    DH_FILE_QUERY_ILLEGAL_TRAFFIC,                 
    DH_FILE_QUERY_SMOKE_FIRE,                      
    DH_FILE_QUERY_FIRE_CONTROL_MONITOR,            
    DH_FILE_QUERY_FIRE_LANE_DETECTION,             
    DH_FILE_QUERY_NONMOTOR_ENTRYING,               
    DH_FILE_QUERY_WORK_CLOTHES_DETECTION,          
    DH_FILE_QUERY_INTELLIGENT_CITY_MANAGER,        
    DH_FILE_QUERY_SMD_RECORD_FILE,                 
    DH_FILE_QUERY_MOBILE_ENFORCE,                  
    DH_FILE_QUERY_SMART_KITCHEN_CLOTHES_DETECTION, 
    DH_FILE_QUERY_WATER_CONSERVANCY_SEARCH,        
    DH_FILE_QUERY_BREAK_RULE_BUILDING_SEARCH,      
    DH_FILE_QUERY_BOAT_SEARCH,                     
    DH_FILE_QUERY_RADAR_REGION_DETECTION,          
    DH_FILE_QUERY_EXAM,                            
    DH_FILE_QUERY_POLICEID,                        
} EM_FILE_QUERY_TYPE;
typedef enum
{
    ATM_TRADE_ALL,              
    ATM_TRADE_ENQUIRY,          
    ATM_TRADE_WITHDRAW,         
    ATM_TRADE_MODIFY_PASSWORD,  
    ATM_TRADE_TRANSFER,         
    ATM_TRADE_DEPOSIT,          
    ATM_TRADE_CARDLESS_ENQUIRY, 
    ATM_TRADE_CARDLESS_DEPOSIT, 
    ATM_TRADE_OTHER,            
} EM_ATM_TRADE_TYPE;
typedef struct
{
    DWORD dwSize;
    int nType;                                                      
    char szCardNo[DH_MAX_CARD_INFO_LEN];                            
    EM_ATM_TRADE_TYPE emTradeType;                                  
    char szAmount[DH_COMMON_STRING_64];                             
    int nError;                                                     
    int nFieldCount;                                                
    char szFields[MAX_CARD_RECORD_FIELD_NUM][DH_COMMON_STRING_256]; 
    char szChange[DH_COMMON_STRING_32];                             
} NET_RECORD_CARD_INFO;
#define MAX_IVS_EVENT_NUM 256
#define MAX_QUERY_USER_NUM 4 
typedef enum tagEM_RESULT_ORDER_TYPE
{
    EM_RESULT_ORDER_UNKNOWN,        
    EM_RESULT_ORDER_ASCENT_BYTIME,  
    EM_RESULT_ORDER_DESCENT_BYTIME, 
} EM_RESULT_ORDER_TYPE;
typedef struct tagNET_IN_MEDIA_QUERY_FILE
{
    DWORD dwSize;                                                 
    char* szDirs;                                                 
    int nMediaType;                                               
    int nChannelID;                                               
    NET_TIME stuStartTime;                                        
    NET_TIME stuEndTime;                                          
    int nEventLists[MAX_IVS_EVENT_NUM];                           
    int nEventCount;                                              
    BYTE byVideoStream;                                           
    BYTE bReserved[3];                                            
    EM_RECORD_SNAP_FLAG_TYPE emFalgLists[FLAG_TYPE_MAX];          
    int nFalgCount;                                               
    NET_RECORD_CARD_INFO stuCardInfo;                             
    int nUserCount;                                               
    char szUserName[MAX_QUERY_USER_NUM][DH_NEW_USER_NAME_LENGTH]; 
    EM_RESULT_ORDER_TYPE emResultOrder;                           
    BOOL bTime;                                                   
    NET_EM_COMBINATION_MODE emCombination;                        
    EVENT_INFO stuEventInfo[16];                                  
    int nEventInfoCount;                                          
    BOOL bOnlySupportRealUTC;                                     
    NET_TIME stuStartTimeRealUTC;                                 
    NET_TIME stuEndTimeRealUTC;                                   
} NET_IN_MEDIA_QUERY_FILE;
typedef struct
{
    char szKey[DH_COMMON_STRING_64];    
    char szValue[DH_COMMON_STRING_512]; 
    BYTE bReserved[256];                
} NET_FILE_SUMMARY_INFO;
typedef enum tagEM_VIDEO_FILE_STATE
{
    EM_VIDEO_FILE_STATE_UNKNOWN,   
    EM_VIDEO_FILE_STATE_TEMPORARY, 
    EM_VIDEO_FILE_STATE_COMPLETE,  
} EM_VIDEO_FILE_STATE;
typedef struct
{
    DWORD dwSize;                                        
    int nChannelID;                                      
    NET_TIME stuStartTime;                               
    NET_TIME stuEndTime;                                 
    unsigned int nFileSize;                              
    BYTE byFileType;                                     
    BYTE byDriveNo;                                      
    BYTE byPartition;                                    
    BYTE byVideoStream;                                  
    unsigned int nCluster;                               
    char szFilePath[MAX_PATH];                           
    int nEventLists[MAX_IVS_EVENT_NUM];                  
    int nEventCount;                                     
    EM_RECORD_SNAP_FLAG_TYPE emFalgLists[FLAG_TYPE_MAX]; 
    int nFalgCount;                                      
    unsigned int nDriveNo;                               
    char szSynopsisPicPath[DH_COMMON_STRING_512]; 
    int nSynopsisMaxTime;                         
    int nSynopsisMinTime;                         
    int nFileSummaryNum;                                           
    NET_FILE_SUMMARY_INFO stFileSummaryInfo[MAX_FILE_SUMMARY_NUM]; 
    INT64 nFileSizeEx;                                             
    UINT nTotalFrame;                                              
    EM_VIDEO_FILE_STATE emFileState;                               
    char szWorkDir[256];                                           
    char szThumbnail[260];                                         
    BOOL bRealUTC;                                                 
    NET_TIME stuStartTimeRealUTC;                                  
    NET_TIME stuEndTimeRealUTC;                                    
} NET_OUT_MEDIA_QUERY_FILE;
typedef enum tagEM_SAFE_BELT_STATE
{
    EM_SAFE_BELT_UNKNOWN, 
    EM_SAFE_BELT_OTHER,   
    EM_SAFE_BELT_WITH,    
    EM_SAFE_BELT_WITHOUT, 
} EM_SAFE_BELT_STATE;
typedef enum tagEM_ATTACHMENT_TYPE
{
    EM_ATTACHMENT_UNKNOWN,    
    EM_ATTACHMENT_OTHER,      
    EM_ATTACHMENT_FURNITURE,  
    EM_ATTACHMENT_PENDANT,    
    EM_ATTACHMENT_TISSUEBOX,  
    EM_ATTACHMENT_DANGER,     
    EM_ATTACHMENT_PERFUMEBOX, 
} EM_ATTACHMENT_TYPE;
typedef enum tagEM_CALLING_STATE
{
    EM_CALLING_UNKNOWN, 
    EM_CALLING_OTHER,   
    EM_CALLING_NO,      
    EM_CALLING_YES,     
} EM_CALLING_STATE;
typedef enum tagEM_CATEGORY_TYPE
{
    EM_CATEGORY_UNKNOWN,                    
    EM_CATEGORY_OTHER,                      
    EM_CATEGORY_MOTOR,                      
    EM_CATEGORY_BUS,                        
    EM_CATEGORY_UNLICENSED_MOTOR,           
    EM_CATEGORY_LARGE_CAR,                  
    EM_CATEGORY_MICRO_CAR,                  
    EM_CATEGORY_EMBASSY_CAR,                
    EM_CATEGORY_MARGINAL_CAR,               
    EM_CATEGORY_AREAOUT_CAR,                
    EM_CATEGORY_FOREIGN_CAR,                
    EM_CATEGORY_FARMTRANSMIT_CAR,           
    EM_CATEGORY_TRACTOR,                    
    EM_CATEGORY_TRAILER,                    
    EM_CATEGORY_COACH_CAR,                  
    EM_CATEGORY_TRIAL_CAR,                  
    EM_CATEGORY_TEMPORARY_ENTRY_CAR,        
    EM_CATEGORY_TEMPORARY_ENTRY_MOTORCYCLE, 
    EM_CATEGORY_TEMPORARY_STEER_CAR,        
    EM_CATEGORY_LARGE_TRUCK,                
    EM_CATEGORY_MID_TRUCK,                  
    EM_CATEGORY_MICRO_TRUCK,                
    EM_CATEGORY_MICROBUS,                   
    EM_CATEGORY_SALOON_CAR,                 
    EM_CATEGORY_CARRIAGE,                   
    EM_CATEGORY_MINI_CARRIAGE,              
    EM_CATEGORY_SUV_MPV,                    
    EM_CATEGORY_SUV,                        
    EM_CATEGORY_MPV,                        
    EM_CATEGORY_PASSENGER_CAR,              
    EM_CATEGORY_MOTOR_BUS,                  
    EM_CATEGORY_MID_PASSENGER_CAR,          
    EM_CATEGORY_MINI_BUS,                   
    EM_CATEGORY_PICKUP,                     
    EM_CATEGORY_OILTANK_TRUCK,              
    EM_CATEGORY_TANK_CAR,                   
    EM_CATEGORY_SLOT_TANK_CAR,              
    EM_CATEGORY_DREGS_CAR,                  
    EM_CATEGORY_CONCRETE_MIXER_TRUCK,       
    EM_CATEGORY_TAXI,                       
    EM_CATEGORY_POLICE,                     
    EM_CATEGORY_AMBULANCE,                  
    EM_CATEGORY_GENERAL,                    
    EM_CATEGORY_WATERING_CAR,               
    EM_CATEGORY_FIRE_ENGINE,                
    EM_CATEGORY_MACHINE_TRUCK,              
    EM_CATEGORY_POWER_LOT_VEHICLE,          
    EM_CATEGORY_SUCTION_SEWAGE_TRUCK,       
    EM_CATEGORY_NORMAL_TANK_TRUCK,          
    EM_CATEGORY_SCHOOL_BUS,                 
    EM_CATEGORY_EXCAVATOR,                  
    EM_CATEGORY_BULLDOZER,                  
    EM_CATEGORY_CRANE,                      
    EM_CATEGORY_PIMP_TRUCK,                 
    EM_CATEGORY_FORKLIFT,                   
    EM_CATEGORY_ELECTRICBIKE,               
    EM_CATEGORY_NON_MOTOR,                  
} EM_CATEGORY_TYPE;
typedef struct tagNET_MEDIA_QUERY_TRAFFICCAR_PARAM_EX
{
    char szViolationCode[16];     
    char szCountry[4];            
    BOOL bOnlySupportRealUTC;     
    NET_TIME stuStartTimeRealUTC; 
    NET_TIME stuEndTimeRealUTC;   
    char szPlateCode[16];         
    BYTE byReserved[952];         
} NET_MEDIA_QUERY_TRAFFICCAR_PARAM_EX;
typedef struct
{
    int nChannelID;         
    NET_TIME StartTime;     
    NET_TIME EndTime;       
    int nMediaType;         
    int nEventType;         
    char szPlateNumber[32]; 
    int nSpeedUpperLimit;   
    int nSpeedLowerLimit;   
    BOOL bSpeedLimit;       
    DWORD dwBreakingRule;   
    char szPlateType[32];                                       
    char szPlateColor[16];                                      
    char szVehicleColor[16];                                    
    char szVehicleSize[16];                                     
    int nGroupID;                                               
    short byLane;                                               
    BYTE byFileFlag;                                            
    BYTE byRandomAccess;                                        
    int nFileFlagEx;                                            
    int nDirection;                                             
    char* szDirs;                                               
    int* pEventTypes;                                           
    int nEventTypeNum;                                          
    char* pszDeviceAddress;                                     
    char* pszMachineAddress;                                    
    char* pszVehicleSign;                                       
    WORD wVehicleSubBrand;                                      
    WORD wVehicleYearModel;                                     
    EM_SAFE_BELT_STATE emSafeBeltState;                         
    EM_CALLING_STATE emCallingState;                            
    EM_ATTACHMENT_TYPE emAttachMentType;                        
    EM_CATEGORY_TYPE emCarType;                                 
    NET_MEDIA_QUERY_TRAFFICCAR_PARAM_EX* pstuTrafficCarParamEx; 
    int bReserved[4];                                           
} MEDIA_QUERY_TRAFFICCAR_PARAM;
typedef enum tagEM_REFUEL_TYPE
{
    EM_REFUEL_TYPE_UNKNOWN = 0,          
    EM_REFUEL_TYPE_NINETY_EIGHT,         
    EM_REFUEL_TYPE_NINETY_SEVEN,         
    EM_REFUEL_TYPE_NINETY_FIVE,          
    EM_REFUEL_TYPE_NINETY_THREE,         
    EM_REFUEL_TYPE_NINETY,               
    EM_REFUEL_TYPE_TEN,                  
    EM_REFUEL_TYPE_FIVE,                 
    EM_REFUEL_TYPE_ZERO,                 
    EM_REFUEL_TYPE_NEGATIVE_TEN,         
    EM_REFUEL_TYPE_NEGATIVE_TWENTY,      
    EM_REFUEL_TYPE_NEGATIVE_THIRTY_FIVE, 
    EM_REFUEL_TYPE_NEGATIVE_FIFTY,       
} EM_REFUEL_TYPE;
typedef struct
{
    unsigned int ch;         
    char szFilePath[128];    
    unsigned int size;       
    NET_TIME starttime;      
    NET_TIME endtime;        
    unsigned int nWorkDirSN; 
    BYTE nFileType;          
    BYTE bHint;              
    BYTE bDriveNo;           
    BYTE bReserved2;
    unsigned int nCluster; 
    BYTE byPictureType;    
    BYTE byVideoStream;    
    BYTE byPartition;      
    BYTE bReserved[1];     
    char szPlateNumber[32];               
    char szPlateType[32];                 
    char szPlateColor[16];                
    char szVehicleColor[16];              
    int nSpeed;                           
    int nEventsNum;                       
    int nEvents[32];                      
    DWORD dwBreakingRule;                 
    char szVehicleSize[16];               
    char szChannelName[DH_CHAN_NAME_LEN]; 
    char szMachineName[DH_MAX_NAME_LEN];  
    int nSpeedUpperLimit;            
    int nSpeedLowerLimit;            
    int nGroupID;                    
    BYTE byCountInGroup;             
    BYTE byIndexInGroup;             
    BYTE byLane;                     
    BYTE bReserved1[21];             
    NET_TIME stSnapTime;             
    int nDirection;                  
    char szMachineAddress[MAX_PATH]; 
    INT64 sizeEx;                    
} MEDIAFILE_TRAFFICCAR_INFO, *LPMEDIAFILE_TRAFFICCAR_INFO;
typedef struct tagMEDIA_QUERY_TRAFFICCAR_PARAM_EX
{
    DWORD dwSize;
    MEDIA_QUERY_TRAFFICCAR_PARAM stuParam; 
} MEDIA_QUERY_TRAFFICCAR_PARAM_EX;
typedef struct tagNET_ATTACH_MENET_INFO
{
    EM_ATTACHMENT_TYPE emAttachMentType; 
    BYTE bReserved1[128];                
} NET_ATTACH_MENET_INFO;
typedef enum tagEM_SMOKING_STATE
{
    EM_SMOKING_UNKNOWN, 
    EM_SMOKING_NO,      
    EM_SMOKING_YES,     
} EM_SMOKING_STATE;
typedef enum tagEM_UPLOAD_FLAG
{
    EM_UPLOAD_FLAG_UNKNOWN = 0, 
    EM_UPLOAD_FLAG_SUCCEED,     
    EM_UPLOAD_FLAG_FAILED,      
} EM_UPLOAD_FLAG;
typedef struct tagNET_UPLOAD_CLIENT_INFO
{
    char szClientID[20];         
    EM_UPLOAD_FLAG emUploadFlag; 
    NET_TIME stuUploadTime;      
    BYTE byReserved[64];         
} NET_UPLOAD_CLIENT_INFO;
typedef struct tagNET_PLATE_IMAGE_INFO
{
    char szFilePath[128]; 
    int nLength;          
    char szReserved[252]; 
} NET_PLATE_IMAGE_INFO;
typedef struct tagNET_CARBODY_IMAGE_INFO
{
    char szFilePath[128]; 
    int nLength;          
    char szReserved[252]; 
} NET_CARBODY_IMAGE_INFO;
typedef struct tagMEDIAFILE_TRAFFICCAR_INFO_EX
{
    DWORD dwSize;
    MEDIAFILE_TRAFFICCAR_INFO stuInfo;                       
    char szDeviceAddr[DH_COMMON_STRING_256];                 
    char szVehicleSign[DH_COMMON_STRING_32];                 
    char szCustomParkNo[DH_COMMON_STRING_64];                
    WORD wVehicleSubBrand;                                   
    WORD wVehicleYearModel;                                  
    NET_TIME stuEleTagInfoUTC;                               
    EM_RECORD_SNAP_FLAG_TYPE emFalgLists[FLAG_TYPE_MAX];     
    int nFalgCount;                                          
    EM_SAFE_BELT_STATE emSafeBelSate;                        
    EM_CALLING_STATE emCallingState;                         
    int nAttachMentNum;                                      
    NET_ATTACH_MENET_INFO stuAttachMent[MAX_ATTACHMENT_NUM]; 
    char szCountry[DH_COMMON_STRING_32];                     
    EM_CATEGORY_TYPE emCarType;                              
    NET_SUNSHADE_STATE emSunShadeState;                      
    EM_SMOKING_STATE emSmokingState;                         
    int nAnnualInspection;                                   
    BYTE byReserved[4];                                      
    int nPicIDHigh;                                          
    int nPicIDLow;                                           
    NET_UPLOAD_CLIENT_INFO stuClient1;                       
    NET_UPLOAD_CLIENT_INFO stuClient2;                       
    char szExtraPlateNumber[3][32];                          
    int nExtraPlateNumberNum;                                
    UINT nEntranceTime;                                      
    UINT nOilTime;                                           
    UINT nExitTime;                                          
    BOOL bRealUTC;                                           
    NET_TIME stuStartTimeRealUTC;                            
    NET_TIME stuEndTimeRealUTC;                              
    NET_PLATE_IMAGE_INFO stuPlateImageInfo;                  
    NET_CARBODY_IMAGE_INFO stuCarBodyImageInfo;              
    char szPlateCode[16];                                    
} MEDIAFILE_TRAFFICCAR_INFO_EX;
typedef struct __NET_FINDNEXT_RESERVED
{
    DWORD dwSize; 
    unsigned int nBeginNumber; 
} NET_FINDNEXT_RESERVED;
typedef struct __NET_FINDING_JUMP_OPTION_INFO
{
    DWORD dwSize;
    int nOffset; 
} NET_FINDING_JUMP_OPTION_INFO;
typedef struct __MEDIAFILE_FACERECOGNITION_PARAM
{
    DWORD dwSize; 
    NET_TIME stStartTime;                               
    NET_TIME stEndTime;                                 
    char szMachineAddress[MAX_PATH];                    
    int nAlarmType;                                     
    BOOL abPersonInfo;                                  
    FACERECOGNITION_PERSON_INFO stPersonInfo;           
    int nChannelId;                                     
    int nGroupIdNum;                                    
    char szGroupId[MAX_GOURP_NUM][DH_COMMON_STRING_64]; 
    BOOL abPersonInfoEx;                                
    FACERECOGNITION_PERSON_INFOEX stPersonInfoEx;       
    BOOL bSimilaryRangeEnable;    
    int nSimilaryRange[2];        
    int nFileType;                
    BOOL bOnlySupportRealUTC;     
    NET_TIME stuStartTimeRealUTC; 
    NET_TIME stuEndTimeRealUTC;   
} MEDIAFILE_FACERECOGNITION_PARAM;
typedef struct tagDH_PIC_INFO_EX
{
    DWORD dwSize;              
    DWORD dwFileLenth;         
    char szFilePath[MAX_PATH]; 
} DH_PIC_INFO_EX;
typedef struct tagNET_PIC_INFO
{
    DWORD dwFileLenth;         
    char szFilePath[MAX_PATH]; 
    BYTE bReserved[256];       
} NET_PIC_INFO;
typedef struct __NET_CANDIDAT_PIC_PATHS
{
    DWORD dwSize;                                    
    int nFileCount;                                  
    DH_PIC_INFO_EX stFiles[DH_MAX_PERSON_IMAGE_NUM]; 
} NET_CANDIDAT_PIC_PATHS;
typedef struct tagNET_CANDIDAT_PIC_PATHS_EX
{
    int nFileCount;                                
    NET_PIC_INFO stFiles[DH_MAX_PERSON_IMAGE_NUM]; 
    BYTE bReserved[256];                           
} NET_CANDIDAT_PIC_PATHS_EX;
typedef struct tagIMAGE_INFO
{
    int nLength;          
    int nWidth;           
    int nHeight;          
    char szFilePath[260]; 
    BYTE byReserved[512]; 
} IMAGE_INFO;
typedef struct tagFACE_INFO_OBJECT
{
    IMAGE_INFO stuImageInfo;                        
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;         
    unsigned int nAge;                              
    EM_FACEDETECT_GLASSES_TYPE emGlasses;           
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion; 
    char szReserved[4];
    EM_EYE_STATE_TYPE emEye;             
    EM_MOUTH_STATE_TYPE emMouth;         
    EM_MASK_STATE_TYPE emMask;           
    EM_BEARD_STATE_TYPE emBeard;         
    int nAttractive;                     
    NET_EULER_ANGLE stuFaceCaptureAngle; 
    UINT nFaceQuality;                   
    double dMaxTemp;                     
    UINT nIsOverTemp;                    
    UINT nIsUnderTemp;                   
    EM_TEMPERATURE_UNIT emTempUnit;      
    BYTE byReserved1[4];                 
    BYTE byReserved[2008];               
} FACE_INFO_OBJECT;
typedef struct tagNET_MEDIAFILE_GENERAL_INFO
{
    char szFilePath[MAX_PATH];      
    int nObjectUrlNum;              
    char szObjectUrls[8][MAX_PATH]; 
    BYTE byReserved[4096];          
} NET_MEDIAFILE_GENERAL_INFO;
typedef struct __MEDIAFILE_FACERECOGNITION_INFO
{
    DWORD dwSize;                                                  
    BOOL bGlobalScenePic;                                          
    DH_PIC_INFO_EX stGlobalScenePic;                               
    DH_MSG_OBJECT stuObject;                                       
    DH_PIC_INFO_EX stObjectPic;                                    
    int nCandidateNum;                                             
    CANDIDATE_INFO stuCandidates[DH_MAX_CANDIDATE_NUM];            
    NET_CANDIDAT_PIC_PATHS stuCandidatesPic[DH_MAX_CANDIDATE_NUM]; 
    NET_TIME stTime;                                               
    char szAddress[MAX_PATH];                                      
    int nChannelId;                                                
    BOOL bUseCandidatesEx;                                         
    int nCandidateExNum;                                           
    CANDIDATE_INFOEX stuCandidatesEx[DH_MAX_CANDIDATE_NUM];        
    FACE_INFO_OBJECT stuFaceInfoObject;                            
    NET_POINT stuFaceCenter;                                       
    NET_MEDIAFILE_GENERAL_INFO stuGeneralInfo;                     
    int nRecNo;                                                    
    BOOL bRealUTC;                                                 
    NET_TIME stuStartTimeRealUTC;                                  
    NET_TIME stuEndTimeRealUTC;                                    
} MEDIAFILE_FACERECOGNITION_INFO;
typedef enum __EM_FACEPIC_TYPE
{
    NET_FACEPIC_TYPE_UNKOWN,       
    NET_FACEPIC_TYPE_GLOBAL_SENCE, 
    NET_FACEPIC_TYPE_SMALL,        
} EM_FACEPIC_TYPE;
#define NET_MAX_FRAMESEQUENCE_NUM 2
#define NET_MAX_TIMESTAMP_NUM 2
typedef struct __MEDIAFILE_FACE_DETECTION_DETAIL_PARAM
{
    DWORD dwSize;
    DWORD dwObjectId;      
    DWORD dwFrameSequence; 
    NET_TIME_EX stTime;    
} MEDIAFILE_FACE_DETECTION_DETAIL_PARAM;
typedef struct __MEDIAFILE_FACE_DETECTION_PARAM
{
    DWORD dwSize; 
    int nChannelID;                                                                
    NET_TIME stuStartTime;                                                         
    NET_TIME stuEndTime;                                                           
    EM_FACEPIC_TYPE emPicType;                                                     
    BOOL bDetailEnable;                                                            
    MEDIAFILE_FACE_DETECTION_DETAIL_PARAM stuDetail;                               
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;                                        
    BOOL bAgeEnable;                                                               
    int nAgeRange[2];                                                              
    int nEmotionValidNum;                                                          
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion[DH_MAX_FACEDETECT_FEATURE_NUM]; 
    EM_FACEDETECT_GLASSES_TYPE emGlasses;                                          
    EM_MASK_STATE_TYPE emMask;                                                     
    EM_BEARD_STATE_TYPE emBeard;                                                   
    int nIsStranger;                                                               
    BOOL bOnlySupportRealUTC;                                                      
    NET_TIME stuStartTimeRealUTC;                                                  
    NET_TIME stuEndTimeRealUTC;                                                    
    int nChannelIDs[256];                                                          
    int nChannelNum;                                                               
} MEDIAFILE_FACE_DETECTION_PARAM;
typedef struct tagNET_FACEDETECT_IMAGE_INFO
{
    UINT nLength;         
    char szFilePath[260]; 
    BYTE byReserved[128]; 
} NET_FACEDETECT_IMAGE_INFO;
typedef struct __MEDIAFILE_FACE_DETECTION_INFO
{
    DWORD dwSize; 
    unsigned int ch;         
    char szFilePath[128];    
    unsigned int size;       
    NET_TIME starttime;      
    NET_TIME endtime;        
    unsigned int nWorkDirSN; 
    BYTE nFileType;          
    BYTE bHint;              
    BYTE bDriveNo;           
    BYTE byPictureType;      
    unsigned int nCluster;   
    EM_FACEPIC_TYPE emPicType;                        
    DWORD dwObjectId;                                 
    DWORD dwFrameSequence[NET_MAX_FRAMESEQUENCE_NUM]; 
    int nFrameSequenceNum;                            
    NET_TIME_EX stTimes[NET_MAX_TIMESTAMP_NUM];       
    int nTimeStampNum;
    int nPicIndex;                                  
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;         
    int nAge;                                       
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion; 
    EM_FACEDETECT_GLASSES_TYPE emGlasses;           
    INT64 sizeEx;                                   
    EM_MASK_STATE_TYPE emMask;                      
    EM_BEARD_STATE_TYPE emBeard;                    
    char szReserved1[4];
    EM_EYE_STATE_TYPE emEye;                 
    EM_MOUTH_STATE_TYPE emMouth;             
    int nAttractive;                         
    int nIsStranger;                         
    char szFaceObjectUrl[128];               
    NET_EULER_ANGLE stuFaceCaptureAngle;     
    UINT nFaceQuality;                       
    NET_FACEDETECT_IMAGE_INFO stuSceneImage; 
    NET_POINT stuFaceCenter;                 
    BOOL bRealUTC;                           
    NET_TIME stuStartTimeRealUTC;            
    NET_TIME stuEndTimeRealUTC;              
} MEDIAFILE_FACE_DETECTION_INFO;
typedef enum tagNET_CROSSREGION_ACTION_INFO
{
    EM_CROSSREGION_ACTION_UNKNOW = 0,
    EM_CROSSREGION_ACTION_INSIDE,    
    EM_CROSSREGION_ACTION_CROSS,     
    EM_CROSSREGION_ACTION_APPEAR,    
    EM_CROSSREGION_ACTION_DISAPPEAR, 
} NET_CROSSREGION_ACTION_INFO;
typedef enum tagEM_MEDIAFILE_IVS_OBJECT
{
    EM_MEDIAFILE_IVS_UNKNOWN,  
    EM_MEDIAFILE_IVS_OTHER,    
    EM_MEDIAFILE_IVS_HUMAN,    
    EM_MEDIAFILE_IVS_VEHICLE,  
    EM_MEDIAFILE_IVS_NONMOTOR, 
} EM_MEDIAFILE_IVS_OBJECT;
typedef struct __MEDIAFILE_IVS_EVENT_PARAM
{
    DWORD dwSize; 
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    int nMediaType;        
    int nVideoStream;                                    
    int nEventLists[MAX_IVS_EVENT_NUM];                  
    int nEventCount;                                     
    EM_RECORD_SNAP_FLAG_TYPE emFalgLists[FLAG_TYPE_MAX]; 
    int nFalgCount;                                      
    int nRuleType;                                           
    NET_CROSSREGION_ACTION_INFO emAction;                    
    int nIvsObjectNum;                                       
    EM_MEDIAFILE_IVS_OBJECT emIvsObject[DH_MAX_OBJECT_LIST]; 
    BOOL bOnlySupportRealUTC;                                
    NET_TIME stuStartTimeRealUTC;                            
    NET_TIME stuEndTimeRealUTC;                              
} MEDIAFILE_IVS_EVENT_PARAM;
typedef struct tagNET_EVENT_IMAGE_INFO
{
    int nImageLength;                       
    char szImagePath[DH_COMMON_STRING_128]; 
    BYTE bReserved[256];                    
} NET_EVENT_IMAGE_INFO;
typedef struct __MEDIAFILE_IVS_EVENT_INFO
{
    DWORD dwSize;             
    int nChannelID;           
    NET_TIME stuStartTime;    
    NET_TIME stuEndTime;      
    char szFilePath[128];     
    int nMediaType;           
    unsigned int nFileLength; 
    unsigned int nCluster;    
    unsigned int nHint;       
    unsigned int nDriveNo;    
    int nVideoStream;                                    
    int nEventLists[MAX_IVS_EVENT_NUM];                  
    int nEventCount;                                     
    EM_RECORD_SNAP_FLAG_TYPE emFalgLists[FLAG_TYPE_MAX]; 
    int nFalgCount;                                      
    int nRuleType;                          
    NET_CROSSREGION_ACTION_INFO emAction;   
    INT64 nFileLengthEx;                    
    EM_MEDIAFILE_IVS_OBJECT emIvsObject;    
    NET_EVENT_IMAGE_INFO stuEventImageInfo; 
    NET_POINT stuObjCenter;                 
    BOOL bRealUTC;                          
    NET_TIME stuStartTimeRealUTC;           
    NET_TIME stuEndTimeRealUTC;             
} MEDIAFILE_IVS_EVENT_INFO;
typedef enum tagEM_ANALYSE_OBJECT_TYPE
{
    EM_ANALYSE_OBJECT_TYPE_UNKNOWN,           
    EM_ANALYSE_OBJECT_TYPE_HUMAN,             
    EM_ANALYSE_OBJECT_TYPE_VEHICLE,           
    EM_ANALYSE_OBJECT_TYPE_FIRE,              
    EM_ANALYSE_OBJECT_TYPE_SMOKE,             
    EM_ANALYSE_OBJECT_TYPE_PLATE,             
    EM_ANALYSE_OBJECT_TYPE_HUMANFACE,         
    EM_ANALYSE_OBJECT_TYPE_CONTAINER,         
    EM_ANALYSE_OBJECT_TYPE_ANIMAL,            
    EM_ANALYSE_OBJECT_TYPE_TRAFFICLIGHT,      
    EM_ANALYSE_OBJECT_TYPE_PASTEPAPER,        
    EM_ANALYSE_OBJECT_TYPE_HUMANHEAD,         
    EM_ANALYSE_OBJECT_TYPE_ENTITY,            
    EM_ANALYSE_OBJECT_TYPE_PACKAGE,           
    EM_ANALYSE_OBJECT_TYPE_SCRAPSTEEL_DANGER, 
} EM_ANALYSE_OBJECT_TYPE;
typedef struct __MEDIAFILE_ANALYSE_OBJECT_PARAM
{
    DWORD dwSize; 
    int nChannelID;                                      
    NET_TIME stuStartTime;                               
    NET_TIME stuEndTime;                                 
    int nMediaType;                                      
    int nVideoStream;                                    
    int nEventLists[MAX_IVS_EVENT_NUM];                  
    int nEventCount;                                     
    EM_RECORD_SNAP_FLAG_TYPE emFalgLists[FLAG_TYPE_MAX]; 
    int nFalgCount;                                      
    EM_ANALYSE_OBJECT_TYPE emObject; 
    BOOL bOnlySupportRealUTC;        
    NET_TIME stuStartTimeRealUTC;    
    NET_TIME stuEndTimeRealUTC;      
} MEDIAFILE_ANALYSE_OBJECT_PARAM;
typedef struct __MEDIAFILE_ANALYSE_OBJECT_INFO
{
    DWORD dwSize;             
    int nChannelID;           
    NET_TIME stuStartTime;    
    NET_TIME stuEndTime;      
    char szFilePath[128];     
    int nMediaType;           
    unsigned int nFileLength; 
    unsigned int nCluster;    
    unsigned int nHint;       
    unsigned int nDriveNo;    
    int nVideoStream;                                    
    int nEventLists[MAX_IVS_EVENT_NUM];                  
    int nEventCount;                                     
    EM_RECORD_SNAP_FLAG_TYPE emFalgLists[FLAG_TYPE_MAX]; 
    int nFalgCount;                                      
    EM_ANALYSE_OBJECT_TYPE emObject; 
    INT64 nFileLengthEx;             
    BOOL bRealUTC;                   
    NET_TIME stuStartTimeRealUTC;    
    NET_TIME stuEndTimeRealUTC;      
} MEDIAFILE_ANALYSE_OBJECT_INFO;
typedef struct __MEDIAFILE_MPT_RECORD_FILE_PARAM
{
    DWORD dwSize; 
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    int nMediaType;        
    int nVideoStream;      
    char szPoliceID[DH_COMMON_STRING_32];     
    int nCrimeType;                           
    int nCrimeTag;                            
    char szSerialNumber[DH_COMMON_STRING_32]; 
    BOOL bOnlySupportRealUTC;                 
    NET_TIME stuStartTimeRealUTC;             
    NET_TIME stuEndTimeRealUTC;               
} MEDIAFILE_MPT_RECORD_FILE_PARAM;
typedef struct __MEDIAFILE_MPT_RECORD_FILE_INFO
{
    DWORD dwSize;                          
    int nChannelID;                        
    NET_TIME stuStartTime;                 
    NET_TIME stuEndTime;                   
    char szFilePath[DH_COMMON_STRING_128]; 
    int nMediaType;                        
    int nVideoStream;                      
    unsigned int nFileLength;              
    unsigned int nCluster;                 
    unsigned int nHint;                    
    unsigned int nDriveNo;                 
    int nCrimeType;                       
    int nCrimeTag;                        
    char szComment[DH_COMMON_STRING_256]; 
    INT64 nFileLengthEx;                  
    BOOL bRealUTC;                        
    NET_TIME stuStartTimeRealUTC;         
    NET_TIME stuEndTimeRealUTC;           
} MEDIAFILE_MPT_RECORD_FILE_INFO;
typedef enum tagNET_EM_INSIDE_TYPE
{
    NET_EM_INSIDE_TYPE_GRADE,  
    NET_EM_INSIDE_TYPE_OBJECT, 
} NET_EM_INSIDE_TYPE;
typedef struct tagMEDIAFILE_XRAY_DETECTION_PARAM
{
    DWORD dwSize; 
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    NET_EM_INSIDE_TYPE emInsideType;                                   
    int nDangerGradeNum;                                               
    EM_DANGER_GRADE_TYPE emDangerGrade[MAX_DANGER_GRADE_NUM];          
    int nInsideObjTypeNum;                                             
    EM_INSIDE_OBJECT_TYPE emInsideObjType[MAX_INSIDE_OBJECT_TYPE_NUM]; 
    BOOL bOnlySupportRealUTC;                                          
    NET_TIME stuStartTimeRealUTC;                                      
    NET_TIME stuEndTimeRealUTC;                                        
} MEDIAFILE_XRAY_DETECTION_PARAM;
typedef struct tagMEDIAFILE_XRAY_DETECTION_INFO
{
    DWORD dwSize;          
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    char szProcessedFilePath[MAX_PATH_LEN];                               
    char szOriginalPath[MAX_PATH_LEN];                                    
    unsigned int nOriginalLength;                                         
    EM_DANGER_GRADE_TYPE emDangerGrade;                                   
    EM_INSIDE_OBJECT_TYPE emInsideObjectType[MAX_INSIDE_OBJECT_TYPE_NUM]; 
    int nRetInsideObjectTypeNum;                                          
    BOOL bRealUTC;                                                        
    NET_TIME stuStartTimeRealUTC;                                         
    NET_TIME stuEndTimeRealUTC;                                           
} MEDIAFILE_XRAY_DETECTION_INFO;
#define MAX_CLOTH_NUM 4     
#define MAX_CLOTHTYPE_NUM 2 
typedef struct tagMEDIAFILE_HUMAN_TRAIT_PARAM
{
    DWORD dwSize;         
    int nChannel;         
    NET_TIME stStartTime; 
    NET_TIME stEndTime;   
    EM_CLOTHES_COLOR emCoatColor[MAX_CLOTH_NUM];        
    EM_CLOTHES_COLOR emTrousersColor[MAX_CLOTH_NUM];    
    EM_COAT_TYPE emCoatType[MAX_CLOTHTYPE_NUM];         
    EM_TROUSERS_TYPE emTrousersType[MAX_CLOTHTYPE_NUM]; 
    UINT nCoatColorNum;                                 
    UINT nTrousersColorNum;                             
    UINT nCoatTypeNum;                                  
    UINT nTrousersTypeNum;                              
    EM_HAS_HAT emHasHat;                                
    EM_HAS_BAG emHasBag;                                
    EM_SEX_TYPE emSex;                                  
    EM_HAIR_STYLE emHairStyle;                          
    UINT nAgeMin;                                       
    UINT nAgeMax;                                       
    BOOL bOnlySupportRealUTC;                           
    NET_TIME stuStartTimeRealUTC;                       
    NET_TIME stuEndTimeRealUTC;                         
} MEDIAFILE_HUMAN_TRAIT_PARAM;
typedef struct tagHUMAN_TRAIT_INFO
{
    EM_CLOTHES_COLOR emCoatColor;     
    EM_CLOTHES_COLOR emTrousersColor; 
    EM_COAT_TYPE emCoatType;          
    EM_TROUSERS_TYPE emTrousersType;  
    EM_HAS_HAT emHasHat;              
    EM_HAS_BAG emHasBag;              
    EM_SEX_TYPE emSex;                
    UINT nAge;                        
    EM_HAIR_STYLE emHairStyle;        
    EM_HAS_UMBRELLA emHasUmbrella;    
    EM_BAG_TYPE emBagType;            
    EM_CAP_TYPE emCapType;            
    BYTE byReserved[1024];            
} HUMAN_TRAIT_INFO;
typedef struct tagNET_HUMAN_FACE_ATTRIBUTE
{
    EM_SEX_TYPE emSex;                              
    int nAge;                                       
    EM_MASK_STATE_TYPE emMask;                      
    EM_BEARD_STATE_TYPE emBeard;                    
    EM_HAS_GLASS emHasGlass;                        
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion; 
    BYTE byReserved[1024];                          
} NET_HUMAN_FACE_ATTRIBUTE;
typedef struct tagMEDIAFILE_HUMAN_TRAIT_INFO
{
    DWORD dwSize; 
    int nChannel;              
    NET_TIME stStartTime;      
    NET_TIME stEndTime;        
    char szFilePath[MAX_PATH]; 
    int nFileSize;             
    char szFacePath[MAX_PATH];        
    char szFaceScenePath[MAX_PATH];   
    char szHumanPath[MAX_PATH];       
    char szHumanSceneImage[MAX_PATH]; 
    UINT nFaceImageLength;       
    UINT nFaceSceneImageLength;  
    UINT nHumanImageLength;      
    UINT nHumanSceneImageLength; 
    HUMAN_TRAIT_INFO stuHumanTrait; 
    NET_HUMAN_FACE_ATTRIBUTE stuFaceAttribute; 
    NET_POINT stuFaceCenter;      
    NET_POINT stuHumanCenter;     
    BOOL bRealUTC;                
    NET_TIME stuStartTimeRealUTC; 
    NET_TIME stuEndTimeRealUTC;   
} MEDIAFILE_HUMAN_TRAIT_INFO;
typedef enum tagEM_NONMOTOR_COLOR
{
    EM_NONMOTOR_UNKNOWN,              
    EM_NONMOTOR_COLOR_OTHER,          
    EM_NONMOTOR_COLOR_WHITE,          
    EM_NONMOTOR_COLOR_ORANGE,         
    EM_NONMOTOR_COLOR_PINK,           
    EM_NONMOTOR_COLOR_BLACK,          
    EM_NONMOTOR_COLOR_RED,            
    EM_NONMOTOR_COLOR_YELLOW,         
    EM_NONMOTOR_COLOR_GRAY,           
    EM_NONMOTOR_COLOR_BLUE,           
    EM_NONMOTOR_COLOR_GREEN,          
    EM_NONMOTOR_COLOR_PURPLE,         
    EM_NONMOTOR_COLOR_BROWN,          
    EM_NONMOTOR_COLOR_SLIVER,         
    EM_NONMOTOR_COLOR_DARKVIOLET,     
    EM_NONMOTOR_COLOR_MAROON,         
    EM_NONMOTOR_COLOR_DIMGRAY,        
    EM_NONMOTOR_COLOR_WHITESMOKE,     
    EM_NONMOTOR_COLOR_DARKORANGE,     
    EM_NONMOTOR_COLOR_MISTYROSE,      
    EM_NONMOTOR_COLOR_TOMATO,         
    EM_NONMOTOR_COLOR_OLIVE,          
    EM_NONMOTOR_COLOR_GOLD,           
    EM_NONMOTOR_COLOR_DARKOLIVEGREEN, 
    EM_NONMOTOR_COLOR_CHARTREUSE,     
    EM_NONMOTOR_COLOR_GREENYELLOW,    
    EM_NONMOTOR_COLOR_FORESTGREEN,    
    EM_NONMOTOR_COLOR_SEAGREEN,       
    EM_NONMOTOR_COLOR_DEEPSKYBLUE,    
    EM_NONMOTOR_COLOR_CYAN,           
} EM_NONMOTOR_COLOR;
typedef enum tagEM_NONMOTOR_SUBTYPE
{
    EM_NONMOTOR_SUBTYPE_UNKNOWN,             
    EM_NONMOTOR_SUBTYPE_NONMOTOR,            
    EM_NONMOTOR_SUBTYPE_BICYCLE,             
    EM_NONMOTOR_SUBTYPE_TRICYCLE,            
    EM_NONMOTOR_SUBTYPE_MOTORCYCLE,          
    EM_NONMOTOR_SUBTYPE_DUALTRIWHEEL,        
    EM_NONMOTOR_SUBTYPE_LIGHT_MOTORCYCLE,    
    EM_NONMOTOR_SUBTYPE_EMBASSY_MOTORCYCLE,  
    EM_NONMOTOR_SUBTYPE_MARGINAL_MOTORCYCLE, 
    EM_NONMOTOR_SUBTYPE_AREAOUT_MOTORCYCLE,  
    EM_NONMOTOR_SUBTYPE_FOREIGN_MOTORCYCLE,  
    EM_NONMOTOR_SUBTYPE_TRIAL_MOTORCYCLE,    
    EM_NONMOTOR_SUBTYPE_COACH_MOTORCYCLE,    
    EM_NONMOTOR_SUBTYPE_PASSERBY,            
} EM_NONMOTOR_SUBTYPE;
typedef enum tagEM_HELMET_STATE
{
    EM_HELMET_UNKNOWN, 
    EM_HELMET_OTHER,   
    EM_HELMET_NO,      
    EM_HELMET_YES,     
} EM_HELMET_STATE;
typedef struct tagMEDIAFILE_NONMOTOR_PARAM
{
    DWORD dwSize;         
    int nChannel;         
    NET_TIME stStartTime; 
    NET_TIME stEndTime;   
    UINT nNumOfCyclingMin;                 
    UINT nNumOfCyclingMax;                 
    EM_NONMOTOR_COLOR emNonmotorColor;     
    EM_NONMOTOR_SUBTYPE emNonmotorSubtype; 
    EM_HELMET_STATE emHelmetState;         
    BOOL bOnlySupportRealUTC;              
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
} MEDIAFILE_NONMOTOR_PARAM;
typedef struct tagMEDIAFILE_NONMOTOR_INFO
{
    DWORD dwSize; 
    int nChannel;              
    NET_TIME stStartTime;      
    NET_TIME stEndTime;        
    char szFilePath[MAX_PATH]; 
    int nFileSize;             
    UINT nNumOfCycling;                    
    EM_NONMOTOR_COLOR emNonmotorColor;     
    EM_NONMOTOR_SUBTYPE emNonmotorSubtype; 
    EM_HELMET_STATE emHelmetState;         
    NET_POINT stuFaceCenter;               
    BOOL bRealUTC;                         
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
} MEDIAFILE_NONMOTOR_INFO;
typedef struct tagNET_FACE_IMAGE_INFO
{
    DWORD dwOffSet;                           
    DWORD dwFileLength;                       
    DWORD dwWidth;                            
    DWORD dwHeight;                           
    BOOL bIsDetected;                         
    char szPicFilePath[DH_COMMON_STRING_256]; 
    BYTE bReserved[512];                      
} NET_FACE_IMAGE_INFO;
typedef enum tagEM_FINDFILE_TYPE
{
    EM_FINDFILE_UNKNOWN, 
    EM_FINDFILE_JPG,     
    EM_FINDFILE_DAV,     
    EM_FINDFILE_LOG,     
    EM_FINDFILE_GPS,     
    EM_FINDFILE_JPK,     
    EM_FINDFILE_MP4,     
    EM_FINDFILE_AUDIO,   
} EM_FINDFILE_TYPE;
typedef enum tagEM_OPEN_DOOR_METHOD
{
    EM_OPEN_DOOR_METHOD_UNKNOWN = -1, 
    EM_OPEN_DOOR_METHOD_OTHER,        
    EM_OPEN_DOOR_METHOD_FACE,         
} EM_OPEN_DOOR_METHOD;
typedef enum tagEM_OPEN_DOOR_STATE
{
    EM_OPEN_DOOR_STATE_UNKNOWN = -1, 
    EM_OPEN_DOOR_STATE_FAIL,         
    EM_OPEN_DOOR_STATE_SUCCESS,      
} EM_OPEN_DOOR_STATE;
typedef struct tagMEDIAFILE_DOORCONTROL_RECORD_PARAM
{
    DWORD dwSize; 
    int nChannel;                    
    NET_TIME stStartTime;            
    NET_TIME stEndTime;              
    UINT nFileTypeNum;               
    EM_FINDFILE_TYPE emFileType[32]; 
    EM_OPEN_DOOR_METHOD emOpenDoorMethod; 
    EM_OPEN_DOOR_STATE emOpenDoorState;   
    BOOL bOnlySupportRealUTC;             
    NET_TIME stuStartTimeRealUTC;         
    NET_TIME stuEndTimeRealUTC;           
} MEDIAFILE_DOORCONTROL_RECORD_PARAM;
typedef enum tagEM_FACE_TRAIT_EMOTION_TYPE
{
    EM_FACE_TRAIT_EMOTION_UNKNOWN,     
    EM_FACE_TRAIT_EMOTION_UNRECOGNIZE, 
    EM_FACE_TRAIT_EMOTION_ANGRY,       
    EM_FACE_TRAIT_EMOTION_SAD,         
    EM_FACE_TRAIT_EMOTION_DISGUST,     
    EM_FACE_TRAIT_EMOTION_FEAR,        
    EM_FACE_TRAIT_EMOTION_SURPRISE,    
    EM_FACE_TRAIT_EMOTION_CALM,        
    EM_FACE_TRAIT_EMOTION_SMILE,       
    EM_FACE_TRAIT_EMOTION_LAUGH,       
    EM_FACE_TRAIT_EMOTION_HAPPY,       
    EM_FACE_TRAIT_EMOTION_CONFUSED,    
    EM_FACE_TRAIT_EMOTION_SCREAM,      
} EM_FACE_TRAIT_EMOTION_TYPE;
typedef enum tagEM_FACE_TRAIT_ALIVE_TYPE
{
    EM_FACE_TRAIT_ALIVE_UNKNOWN, 
    EM_FACE_TRAIT_ALIVE_NON,     
    EM_FACE_TRAIT_ALIVE,         
} EM_FACE_TRAIT_ALIVE_TYPE;
typedef struct tagFACE_TRAIT
{
    EM_SEX_TYPE emSex;           
    UINT nAge;                   
    EM_HAS_GLASS emGlass;        
    EM_BEARD_STATE_TYPE emBeard; 
    char szReserved[4];
    EM_MASK_STATE_TYPE emMask;            
    EM_FACE_TRAIT_EMOTION_TYPE emEmotion; 
    NET_TIME_EX stuSnapTime;              
    EM_FACE_TRAIT_ALIVE_TYPE emAlive;     
    BYTE byReserved[1020];                
} FACE_TRAIT;
typedef enum tagEM_AGE_GROUP_TYPE
{
    EM_AGE_GROUP_UNKNOWN, 
    EM_AGE_GROUP_OLD,     
    EM_AGE_GROUP_ADULT,   
    EM_AGE_GROUP_CHILD,   
} EM_AGE_GROUP_TYPE;
typedef enum tagEM_HAS_HOLD
{
    EM_HAS_HOLD_UNKNOWN, 
    EM_HAS_HOLD_NO,      
    EM_HAS_HOLD_YES,     
} EM_HAS_HOLD;
typedef enum tagEM_UPPER_TYPE
{
    EM_UPPER_UNKNOWN,       
    EM_UPPER_LONGCOAT,      
    EM_UPPER_JACKETORJEANS, 
    EM_UPPER_TSHIRT,        
    EM_UPPER_SPORTSWEAR,    
    EM_UPPER_DOWNJACKET,    
    EM_UPPER_SHIRT,         
    EM_UPPER_DRESS,         
    EM_UPPER_SUIT,          
} EM_UPPER_TYPE;
typedef enum tagEM_MASK_TYPE
{
    EM_MASK_UNKNOWN, 
    EM_MASK_NO,      
    EM_MASK_YES,     
} EM_MASK_TYPE;
typedef struct tagBODY_TRAIT
{
    EM_SEX_TYPE emSex;                     
    EM_AGE_GROUP_TYPE emAgeGroup;          
    EM_COAT_TYPE emCoatType;               
    EM_TROUSERS_TYPE emTrousersType;       
    EM_ANGLE_TYPE emAngle;                 
    EM_CLOTHES_PATTERN emUpperPattern;     
    EM_UNIFIED_COLOR_TYPE emTrousersColor; 
    EM_HAS_UMBRELLA emUmbrella;            
    EM_UNIFIED_COLOR_TYPE emUmbrellaColor; 
    EM_HAS_HOLD emHold;                    
    EM_CLOTHES_PATTERN emTrousersPattern;  
    EM_HAT_STYLE emHatType;                
    EM_UNIFIED_COLOR_TYPE emHatColor;      
    EM_UPPER_TYPE emUpperType;             
    EM_UNIFIED_COLOR_TYPE emCoatColor;     
    EM_HAIR_STYLE emHairStyle;             
    EM_UNIFIED_COLOR_TYPE emHairColor;     
    EM_SHOES_TYPE emShoesType;             
    EM_UNIFIED_COLOR_TYPE emShoesColor;    
    EM_BAG_TYPE emBagType;                 
    EM_UNIFIED_COLOR_TYPE emBagColor;      
    EM_MASK_TYPE emMaskType;               
    EM_UNIFIED_COLOR_TYPE emMaskColor;     
    NET_TIME_EX stuSnapTime;               
    BYTE szReserved[1024];                 
} BODY_TRAIT;
typedef struct tagFACEBODY_DETECT_RECORDFILTER
{
    int nAgeRange[2];        
    FACE_TRAIT stuFaceTrait; 
    BODY_TRAIT stuBodyTrait; 
    BYTE byReserved[1024];   
} FACEBODY_DETECT_RECORDFILTER;
typedef struct tagNET_EVENT_IMAGE_OFFSET_INFO
{
    unsigned int nOffSet; 
    unsigned int nLength; 
    unsigned int nWidth;  
    unsigned int nHeight; 
    char szPath[260];     
    UINT nIndexInData;    
    BYTE byReserved[248]; 
} NET_EVENT_IMAGE_OFFSET_INFO;
typedef struct tagMEDIAFILE_FACEBODY_DETECT_PARAM
{
    DWORD dwSize;                                       
    int nFileType;                                      
    int nChannelID;                                     
    UINT nVideoStream;                                  
    NET_TIME stuBeginTime;                              
    NET_TIME stuEndTime;                                
    EM_RECORD_SNAP_FLAG_TYPE emFlagList[FLAG_TYPE_MAX]; 
    int nFlagCount;                                     
    NET_RECORD_CARD_INFO stuCardInfo;                   
    EM_RESULT_ORDER_TYPE emResultOrder;                 
    BOOL bTime;                                         
    FACEBODY_DETECT_RECORDFILTER stuFilter;             
    BOOL bOnlySupportRealUTC;                           
    NET_TIME stuStartTimeRealUTC;                       
    NET_TIME stuEndTimeRealUTC;                         
} MEDIAFILE_FACEBODY_DETECT_PARAM;
typedef struct tagMEDIAFILE_FACEBODY_DETECT_INFO
{
    DWORD dwSize;                                       
    int nChannelID;                                     
    NET_TIME stuBeginTime;                              
    NET_TIME stuEndTime;                                
    UINT nFileType;                                     
    UINT nFileSize;                                     
    UINT nVideoStream;                                  
    UINT nPartition;                                    
    UINT nCluster;                                      
    char szFilePath[MAX_PATH];                          
    EM_RECORD_SNAP_FLAG_TYPE emFlagList[FLAG_TYPE_MAX]; 
    int nFlagCount;                                     
    UINT nDriveNo;                                      
    FACE_TRAIT stuFaceTrait;                            
    BODY_TRAIT stuBodyTrait;                            
    NET_EVENT_IMAGE_OFFSET_INFO stuFaceImage;           
    NET_EVENT_IMAGE_OFFSET_INFO stuBodyImage;           
    NET_EVENT_IMAGE_OFFSET_INFO stuSceneImage;          
    BOOL bRealUTC;                                      
    NET_TIME stuStartTimeRealUTC;                       
    NET_TIME stuEndTimeRealUTC;                         
} MEDIAFILE_FACEBODY_DETECT_INFO;
typedef struct tagFACEBODY_ANALYSE_RECORDFILTER
{
    int nAgeRange[2];                          
    EM_SEX_TYPE emSex;                         
    char szCountry[NET_COUNTRY_LENGTH];        
    BYTE byReserved1;                          
    char szProvince[DH_MAX_PROVINCE_NAME_LEN]; 
    char szCity[DH_MAX_CITY_NAME_LEN];         
    char szID[DH_MAX_PERSON_ID_LEN];           
    EM_CERTIFICATE_TYPE emCertificateType;     
    BYTE byReserved[1028];                     
} FACEBODY_ANALYSE_RECORDFILTER;
typedef struct tagMEDIAFILE_FACEBODY_ANALYSE_PARAM
{
    DWORD dwSize;                                        
    int nFileType;                                       
    int nChannelID;                                      
    UINT nVideoStream;                                   
    NET_TIME stuBeginTime;                               
    NET_TIME stuEndTime;                                 
    EM_RECORD_SNAP_FLAG_TYPE emFlagLists[FLAG_TYPE_MAX]; 
    int nFlagCount;                                      
    NET_RECORD_CARD_INFO stuCardInfo;                    
    EM_RESULT_ORDER_TYPE emResultOrder;                  
    BOOL bTime;                                          
    FACEBODY_ANALYSE_RECORDFILTER stuFilter;             
    BOOL bOnlySupportRealUTC;                            
    NET_TIME stuStartTimeRealUTC;                        
    NET_TIME stuEndTimeRealUTC;                          
} MEDIAFILE_FACEBODY_ANALYSE_PARAM;
typedef struct tagMEDIAFILE_FACEBODY_ANALYSE_INFO
{
    DWORD dwSize;                                         
    int nChannelID;                                       
    NET_TIME stuBeginTime;                                
    NET_TIME stuEndTime;                                  
    UINT nFileSize;                                       
    UINT nFileType;                                       
    UINT nVideoStream;                                    
    UINT nPartition;                                      
    UINT nCluster;                                        
    char szFilePath[MAX_PATH];                            
    EM_RECORD_SNAP_FLAG_TYPE emFlagLists[FLAG_TYPE_MAX];  
    int nFlagCount;                                       
    UINT nDriveNo;                                        
    FACE_TRAIT stuFaceTrait;                              
    BODY_TRAIT stuBodyTrait;                              
    NET_EVENT_IMAGE_OFFSET_INFO stuFaceImage;             
    NET_EVENT_IMAGE_OFFSET_INFO stuBodyImage;             
    NET_EVENT_IMAGE_OFFSET_INFO stuSceneImage;            
    CANDIDATE_INFOEX stuCandidates[DH_MAX_CANDIDATE_NUM]; 
    int nCandidateNum;                                    
    BOOL bRealUTC;                                        
    NET_TIME stuStartTimeRealUTC;                         
    NET_TIME stuEndTimeRealUTC;                           
} MEDIAFILE_FACEBODY_ANALYSE_INFO;
typedef struct tagMEDIAFILE_SNAPSHORT_WITH_MARK_PARAM
{
    DWORD dwSize;                 
    NET_TIME stuStartTime;        
    NET_TIME stuEndTime;          
    BOOL bOnlySupportRealUTC;     
    NET_TIME stuStartTimeRealUTC; 
    NET_TIME stuEndTimeRealUTC;   
} MEDIAFILE_SNAPSHORT_WITH_MARK_PARAM;
typedef struct tagNET_SNAPSHOT_MARK_INFO
{
    NET_POINT stuPosition; 
    BYTE byReserved[1020]; 
} NET_SNAPSHOT_MARK_INFO;
typedef struct tagMEDIAFILE_SNAPSHORT_WITH_MARK_INFO
{
    DWORD dwSize;              
    int nChannelID;            
    NET_TIME stuStartTime;     
    NET_TIME stuEndTime;       
    UINT nFileSize;            
    char szFilePath[MAX_PATH]; 
    NET_SNAPSHOT_MARK_INFO stuMarkInfo; 
    BOOL bRealUTC;                      
    NET_TIME stuStartTimeRealUTC;       
    NET_TIME stuEndTimeRealUTC;         
} MEDIAFILE_SNAPSHORT_WITH_MARK_INFO;
typedef struct tagNET_DOORCONTROL_FACE_OBJECT
{
    NET_RECT stuBoundingBox;     
    IMAGE_INFO stuFaceImageInfo; 
    BYTE byReserved[512];        
} NET_DOORCONTROL_FACE_OBJECT;
typedef struct tagNET_REGISTER_PERSON_INFO
{
    char szUID[DH_MAX_PERSON_ID_LEN];                            
    char szGroupID[NET_GROUPID_LENGTH];                          
    char szGroupName[NET_GROUPNAME_LENGTH];                      
    EM_REGISTER_DB_TYPE emRegisterDbType;                        
    EM_SEX_TYPE emSexType;                                       
    UINT nFacePicNum;                                            
    NET_FACE_IMAGE_INFO stuFacePicInfo[DH_MAX_PERSON_IMAGE_NUM]; 
    EM_PERSON_FEATURE_STATE emFeatureState;                      
    char szPersonName[DH_MAX_PERSON_NAME_LEN]; 
    NET_TIME stuBirthday;                      
    char szCountry[NET_COUNTRY_LENGTH];        
    char szProvince[DH_MAX_PROVINCE_NAME_LEN]; 
    char szCity[DH_MAX_CITY_NAME_LEN];         
    char szHomeAddress[DH_COMMON_STRING_128];  
    EM_CERTIFICATE_TYPE emCertificateType;     
    char szID[DH_MAX_PERSON_ID_LEN];           
    UINT nImportant;                           
    char szComment[NET_COMMENT_LENGTH];        
    BYTE byReserved[2048];                     
} NET_REGISTER_PERSON_INFO;
typedef struct tagNET_DOORCONTROL_CANDIDATE
{
    UINT nSimilarity;                       
    NET_REGISTER_PERSON_INFO stuPersonInfo; 
    BYTE byReserved[1024];                  
} NET_DOORCONTROL_CANDIDATE;
typedef struct tagMEDIAFILE_DOORCONTROL_RECORD_INFO
{
    DWORD dwSize; 
    int nChannel;              
    UINT nDriveNo;             
    UINT nCluster;             
    UINT nHint;                
    char szFilePath[MAX_PATH]; 
    int nFileSize;             
    EM_OPEN_DOOR_METHOD emOpenDoorMethod;                          
    EM_OPEN_DOOR_STATE emOpenDoorState;                            
    IMAGE_INFO stuSceneImageInfo;                                  
    NET_TIME stuSnapTime;                                          
    NET_DOORCONTROL_FACE_OBJECT stuFaceObject;                     
    UINT nCandidatesNum;                                           
    NET_DOORCONTROL_CANDIDATE stuCandidates[DH_MAX_CANDIDATE_NUM]; 
    BOOL bRealUTC;                                                 
    NET_TIME stuStartTimeRealUTC;                                  
    NET_TIME stuEndTimeRealUTC;                                    
} MEDIAFILE_DOORCONTROL_RECORD_INFO;
typedef struct __MEDIA_QUERY_VIDEOSYNOPSIS_PARAM
{
    DWORD dwSize;
    NET_TIME StartTime; 
    NET_TIME EndTime;   
    int nMediaType;     
    int nQueryType;     
} MEDIA_QUERY_VIDEOSYNOPSIS_PARAM;
typedef struct __MEDIAFILE_VIDEOSYNOPSIS_INFO
{
    char szFilePath[128];    
    unsigned int size;       
    NET_TIME starttime;      
    NET_TIME endtime;        
    unsigned int nWorkDirSN; 
    BYTE nFileType;          
    BYTE bHint;              
    BYTE bDriveNo;           
    BYTE bReserved2;
    unsigned int nCluster; 
    BYTE byPictureType;    
    BYTE bReserved[3];     
    int nTaskID;                                     
    char szCurrentState[DH_MAX_SYNOPSIS_STATE_NAME]; 
    int nProgress;                                   
    int nObjectNum;                                  
    int nDurationTime; 
} MEDIAFILE_VIDEOSYNOPSIS_INFO;
typedef enum tagEM_QUERY_TEMPERATURE_TYPE
{
    EM_QUERY_TEMPERATURE_TYPE_UNKNOWN = -1, 
    EM_QUERY_TEMPERATURE_TYPE_ALL,          
    EM_QUERY_TEMPERATURE_TYPE_LOW,          
    EM_QUERY_TEMPERATURE_TYPE_NORMAL,       
    EM_QUERY_TEMPERATURE_TYPE_HIGH,         
} EM_QUERY_TEMPERATURE_TYPE;
typedef struct tagANATOMY_TEMP_DETECT_PERSON_FILTER
{
    char szName[64];       
    BYTE byReserved[1024]; 
} ANATOMY_TEMP_DETECT_PERSON_FILTER;
typedef struct tagNET_ANATOMY_TEMP_DETECT_FILTER
{
    EM_QUERY_TEMPERATURE_TYPE emTempType;            
    BYTE byReserved1[4];                             
    double dbTemperature;                            
    ANATOMY_TEMP_DETECT_PERSON_FILTER stuPersonInfo; 
    BYTE byReserved[1024];                           
} NET_ANATOMY_TEMP_DETECT_FILTER;
typedef struct tagMEDIAFILE_ANATOMY_TEMP_DETECT_PARAM
{
    DWORD dwSize;                             
    int nChannelID;                           
    NET_TIME stuBeginTime;                    
    NET_TIME stuEndTime;                      
    NET_ANATOMY_TEMP_DETECT_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;                 
    NET_TIME stuStartTimeRealUTC;             
    NET_TIME stuEndTimeRealUTC;               
} MEDIAFILE_ANATOMY_TEMP_DETECT_PARAM;
typedef struct tagNET_ANATOMY_TEMP_DETECT_ANATOMYTEMPDETECT_RESULT
{
    BYTE byReserved[1024]; 
} NET_ANATOMY_TEMP_DETECT_ANATOMYTEMPDETECT_RESULT;
typedef struct tagMEDIAFILE_ANATOMY_TEMP_DETECT_FACEDETECT_RESULT
{
    EM_SEX_TYPE emSex;                              
    int nAge;                                       
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion; 
    char szReserved1[4];
    EM_EYE_STATE_TYPE emEye;              
    EM_MOUTH_STATE_TYPE emMouth;          
    EM_MASK_STATE_TYPE emMask;            
    EM_BEARD_STATE_TYPE emBeard;          
    int nAttractive;                      
    BYTE byReserved1[4];                  
    EM_FACEDETECT_GLASSES_TYPE emGlasses; 
    BYTE byReserved[1020];                
} MEDIAFILE_ANATOMY_TEMP_DETECT_FACEDETECT_RESULT;
typedef struct tagMEDIAFILE_ANATOMY_TEMP_DETECT_CANDIDATE_INFO
{
    int nSimilarity;                             
    FACERECOGNITION_PERSON_INFOEX stuPersonInfo; 
    BYTE byReserved[2048];                       
} MEDIAFILE_ANATOMY_TEMP_DETECT_CANDIDATE_INFO;
typedef struct tagMEDIAFILE_ANATOMY_TEMP_DETECT_FACERECOGNITION_RESULT
{
    BOOL bGlobalScenePic;             
    DH_PIC_INFO_EX stuGlobalScenePic; 
    int nCandidateNum;                                                                
    MEDIAFILE_ANATOMY_TEMP_DETECT_CANDIDATE_INFO stuCandidates[DH_MAX_CANDIDATE_NUM]; 
    FACE_INFO_OBJECT stuFaceInfo;                                                     
    BYTE byReserved[1024];                                                            
} MEDIAFILE_ANATOMY_TEMP_DETECT_FACERECOGNITION_RESULT;
typedef enum tagEM_FILE_TYPE
{
    EM_FILE_TYPE_UNKNOWN, 
    EM_FILE_TYPE_JPG,     
    EM_FILE_TYPE_DAV,     
} EM_FILE_TYPE;
typedef struct tagMEDIAFILE_ANATOMY_TEMP_DETECT_INFO
{
    DWORD dwSize;                         
    int nChannelID;                       
    NET_TIME stuBeginTime;                
    NET_TIME stuEndTime;                  
    NET_TIME stuEventTime;                
    INT64 nFileSize;                      
    EM_FILE_TYPE emFileType;              
    char szFilePath[MAX_PATH];            
    int nEventList[MAX_IVS_EVENT_NUM];    
    int nEventCount;                      
    int nPartition;                       
    int nDriveNo;                         
    int nCluster;                         
    int nPicIndex;                        
    EM_QUERY_TEMPERATURE_TYPE emTempType; 
    double dbTemperature;                 
    BYTE byReserved1[4];                  
    int nEventType;                       
    NET_ANATOMY_TEMP_DETECT_ANATOMYTEMPDETECT_RESULT stuAnatomyDetectResult;       
    MEDIAFILE_ANATOMY_TEMP_DETECT_FACEDETECT_RESULT stuFaceDetectResult;           
    MEDIAFILE_ANATOMY_TEMP_DETECT_FACERECOGNITION_RESULT stuFaceRecognitionResult; 
    char szObjectPath[8][MAX_PATH];                                                
    int nObjectPathNum;                                                            
    char szFacePicturePath[MAX_PATH];                                              
    BOOL bRealUTC;                                                                 
    NET_TIME stuStartTimeRealUTC;                                                  
    NET_TIME stuEndTimeRealUTC;                                                    
} MEDIAFILE_ANATOMY_TEMP_DETECT_INFO;
typedef enum tagEM_COMPARE_OPERATOR_TYPE
{
    EM_COMPARE_OPERATOR_TYPE_UNKNOWN, 
    EM_COMPARE_OPERATOR_TYPE_EQUAL,   
    EM_COMPARE_OPERATOR_TYPE_OR,      
} EM_COMPARE_OPERATOR_TYPE;
typedef enum tagEM_QUERY_FILE_TYPE
{
    EM_QUERY_FILE_TYPE_UNKNOWN,   
    EM_QUERY_FILE_TYPE_ORIGIN,    
    EM_QUERY_FILE_TYPE_COMPOSITE, 
    EM_QUERY_FILE_TYPE_DAV,       
    EM_QUERY_FILE_TYPE_AVI,       
    EM_QUERY_FILE_TYPE_MP4,       
} EM_QUERY_FILE_TYPE;
typedef struct tagNET_PLATE_NUMBER_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szPlateNumber[16][64];              
    int nPlateNumberCount;                   
    BYTE byReserved[128];                    
} NET_PLATE_NUMBER_FILTER;
typedef enum tagEM_ILLEGAL_TRAFFIC_EVENT_TYPE
{
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE_UNKNOWN,           
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE_TRAFFIC_PARKING,   
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE_TRAFFIC_PARKING_A, 
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE_TRAFFIC_PARKING_B, 
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE_TRAFFIC_PARKING_C, 
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE_TRAFFIC_PARKING_D, 
} EM_ILLEGAL_TRAFFIC_EVENT_TYPE;
typedef struct tagNET_EVENT_TYPE_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType;       
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE emEventType[16]; 
    int nEventTypeCount;                           
    BYTE byReserved[128];                          
} NET_EVENT_TYPE_FILTER;
typedef struct tagNET_PLATE_COLOR_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szColor[16][64];                    
    int nColorCount;                         
    BYTE byReserved[128];                    
} NET_PLATE_COLOR_FILTER;
typedef struct tagNET_VEHICLE_COLOR_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szColor[16][64];                    
    int nColorCount;                         
    BYTE byReserved[128];                    
} NET_VEHICLE_COLOR_FILTER;
typedef struct tagNET_VEHICLE_TYPE_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szType[16][64];                     
    int nTypeCount;                          
    BYTE byReserved[128];                    
} NET_VEHICLE_TYPE_FILTER;
typedef struct tagNET_VEHICLE_LOGO_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szLogo[16][64];                     
    int nLogoCount;                          
    BYTE byReserved[128];                    
} NET_VEHICLE_LOGO_FILTER;
typedef struct tagNET_VEHICLE_SERIES_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szSeries[16][64];                   
    int nSeriesCount;                        
    BYTE byReserved[128];                    
} NET_VEHICLE_SERIES_FILTER;
typedef struct tagNET_EVENT_CODE_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szEventCode[16][64];                
    int nEventCodeCount;                     
    BYTE byReserved[128];                    
} NET_EVENT_CODE_FILTER;
typedef struct tagNET_DEFEND_CODE_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szDefendCode[16][64];               
    int nDefendCodeCount;                    
    BYTE byReserved[128];                    
} NET_DEFEND_CODE_FILTER;
typedef struct tagNET_FILE_TYPE_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    EM_QUERY_FILE_TYPE emFileType[16];       
    int nFileTypeCount;                      
    BYTE byReserved[128];                    
} NET_FILE_TYPE_FILTER;
typedef struct tagNET_ILLEGAL_TRAFFIC_FILTER
{
    NET_PLATE_NUMBER_FILTER stuPlateNumberFilter;     
    NET_PLATE_COLOR_FILTER stuPlateColorFilter;       
    NET_EVENT_TYPE_FILTER stuEventTypeFilter;         
    NET_VEHICLE_COLOR_FILTER stuVehicleColorFilter;   
    NET_VEHICLE_TYPE_FILTER stuVehicleTypeFilter;     
    NET_VEHICLE_LOGO_FILTER stuVehicleLogoFilter;     
    NET_VEHICLE_SERIES_FILTER stuVehicleSeriesFilter; 
    NET_EVENT_CODE_FILTER stuEventCodeFilter;         
    NET_DEFEND_CODE_FILTER stuDefendCodeFilter;       
    NET_FILE_TYPE_FILTER stuFileTypeFilter;           
    BYTE byReserved[2048];                            
} NET_ILLEGAL_TRAFFIC_FILTER;
typedef struct tagMEDIAFILE_ILLEGAL_TRAFFIC_PARAM
{
    DWORD dwSize;                         
    int nChannelID;                       
    NET_TIME stuBeginTime;                
    NET_TIME stuEndTime;                  
    NET_ILLEGAL_TRAFFIC_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;             
    NET_TIME stuStartTimeRealUTC;         
    NET_TIME stuEndTimeRealUTC;           
} MEDIAFILE_ILLEGAL_TRAFFIC_PARAM;
typedef struct tagMEDIAFILE_ILLEGAL_TRAFFIC_INFO
{
    DWORD dwSize;                              
    int nChannelID;                            
    char szFilePath[MAX_PATH];                 
    INT64 nFileSize;                           
    EM_QUERY_FILE_TYPE emFileType;             
    EM_ILLEGAL_TRAFFIC_EVENT_TYPE emEventType; 
    char szEventCode[64];                      
    NET_TIME stuEventTime;                     
    char szEventAddress[128];                  
    int nGroupID;                              
    int nIndexInGroup;                         
    int nParkingTime;                          
    BYTE byReserved[4];                        
    char szVehicleColor[64];                   
    char szMachineName[64];                    
    char szDefendCode[64];                     
    char szPlateColor[64];                     
    char szPlateNumber[64];                    
    char szVehicleLogo[64];                    
    char szVehicleSeries[64];                  
    char szVehicleType[64];                    
    BOOL bRealUTC;                             
    NET_TIME stuStartTimeRealUTC;              
    NET_TIME stuEndTimeRealUTC;                
} MEDIAFILE_ILLEGAL_TRAFFIC_INFO;
typedef struct tagNET_SMOKE_FIRE_FILTER
{
    char szRule[64];       
    BYTE byReserved[1024]; 
} NET_SMOKE_FIRE_FILTER;
typedef struct tagMEDIAFILE_SMOKE_FIRE_PARAM
{
    DWORD dwSize;                    
    int nFileType;                   
    int nChannelID;                  
    NET_TIME stuBeginTime;           
    NET_TIME stuEndTime;             
    int nEventList[256];             
    int nEventCount;                 
    NET_SMOKE_FIRE_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;        
    NET_TIME stuStartTimeRealUTC;    
    NET_TIME stuEndTimeRealUTC;      
} MEDIAFILE_SMOKE_FIRE_PARAM;
typedef struct tagMEDIAFILE_SMOKE_FIRE_INFO
{
    DWORD dwSize;                      
    int nChannelID;                    
    NET_TIME stuBeginTime;             
    NET_TIME stuEndTime;               
    char szGlobalSceneFilePath[260];   
    int nGlobalSceneFileSize;          
    char szRule[64];                   
    NET_RECT stuBoundingBox;           
    NET_EVENT_IMAGE_INFO stuImageInfo; 
    int nFileType;                     
    BOOL bRealUTC;                     
    NET_TIME stuStartTimeRealUTC;      
    NET_TIME stuEndTimeRealUTC;        
} MEDIAFILE_SMOKE_FIRE_INFO;
typedef struct tagNET_FIRE_CONTROL_MONITOR_FILTER
{
    char szRule[64];       
    BYTE byReserved[1024]; 
} NET_FIRE_CONTROL_MONITOR_FILTER;
typedef struct tagMEDIAFILE_FIRE_CONTROL_MONITOR_PARAM
{
    DWORD dwSize;                              
    int nFileType;                             
    int nChannelID;                            
    NET_TIME stuBeginTime;                     
    NET_TIME stuEndTime;                       
    int nEventList[256];                       
    int nEventCount;                           
    NET_FIRE_CONTROL_MONITOR_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;                  
    NET_TIME stuStartTimeRealUTC;              
    NET_TIME stuEndTimeRealUTC;                
} MEDIAFILE_FIRE_CONTROL_MONITOR_PARAM;
typedef struct tagMEDIAFILE_FIRE_CONTROL_MONITOR_INFO
{
    DWORD dwSize;                      
    int nChannelID;                    
    NET_TIME stuBeginTime;             
    NET_TIME stuEndTime;               
    char szGlobalSceneFilePath[260];   
    int nGlobalSceneFileSize;          
    char szRule[64];                   
    NET_RECT stuBoundingBox;           
    NET_EVENT_IMAGE_INFO stuImageInfo; 
    int nFileType;                     
    BOOL bRealUTC;                     
    NET_TIME stuStartTimeRealUTC;      
    NET_TIME stuEndTimeRealUTC;        
} MEDIAFILE_FIRE_CONTROL_MONITOR_INFO;
typedef enum tagEM_FIRE_LANE_OBJECT_TYPE
{
    EM_FIRE_LANE_OBJECT_TYPE_UNKNOWN,  
    EM_FIRE_LANE_OBJECT_TYPE_ANY,      
    EM_FIRE_LANE_OBJECT_TYPE_CARTON,   
    EM_FIRE_LANE_OBJECT_TYPE_BOX,      
    EM_FIRE_LANE_OBJECT_TYPE_NONMOTOR, 
} EM_FIRE_LANE_OBJECT_TYPE;
typedef struct tagNET_FIRE_LANE_DETECTION_FILTER
{
    EM_FIRE_LANE_OBJECT_TYPE emObjectTypes[32]; 
    int nObjectTypes;                           
    BYTE byReserved[1020];                      
} NET_FIRE_LANE_DETECTION_FILTER;
typedef struct tagMEDIAFILE_FIRE_LANE_DETECTION_PARAM
{
    DWORD dwSize;                             
    int nFileType;                            
    int nChannelID;                           
    NET_TIME stuBeginTime;                    
    NET_TIME stuEndTime;                      
    int nEventList[256];                      
    int nEventCount;                          
    NET_FIRE_LANE_DETECTION_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;                 
    NET_TIME stuStartTimeRealUTC;             
    NET_TIME stuEndTimeRealUTC;               
} MEDIAFILE_FIRE_LANE_DETECTION_PARAM;
typedef struct tagMEDIAFILE_FIRE_LANE_DETECTION_INFO
{
    DWORD dwSize;                          
    int nChannelID;                        
    NET_TIME stuBeginTime;                 
    NET_TIME stuEndTime;                   
    char szGlobalSceneFilePath[260];       
    int nGlobalSceneFileSize;              
    int nFileType;                         
    EM_FIRE_LANE_OBJECT_TYPE emObjectType; 
    NET_RECT stuBoundingBox;               
    NET_EVENT_IMAGE_INFO stuImageInfo;     
    BOOL bRealUTC;                         
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
} MEDIAFILE_FIRE_LANE_DETECTION_INFO;
typedef enum tagEM_NONMOTOR_ENTRYING_OBJECT_TYPE
{
    EM_NONMOTOR_ENTRYING_OBJECT_TYPE_UNKNOWN,  
    EM_NONMOTOR_ENTRYING_OBJECT_TYPE_ANY,      
    EM_NONMOTOR_ENTRYING_OBJECT_TYPE_NONMOTOR, 
} EM_NONMOTOR_ENTRYING_OBJECT_TYPE;
typedef struct tagNET_NONMOTOR_ENTRYING_FILTER
{
    EM_NONMOTOR_ENTRYING_OBJECT_TYPE emObjectTypes[32]; 
    int nObjectTypes;                                   
    BYTE byReserved[1020];                              
} NET_NONMOTOR_ENTRYING_FILTER;
typedef struct tagMEDIAFILE_NONMOTOR_ENTRYING_PARAM
{
    DWORD dwSize;                           
    int nFileType;                          
    int nChannelID;                         
    NET_TIME stuBeginTime;                  
    NET_TIME stuEndTime;                    
    int nEventList[256];                    
    int nEventCount;                        
    NET_NONMOTOR_ENTRYING_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;               
    NET_TIME stuStartTimeRealUTC;           
    NET_TIME stuEndTimeRealUTC;             
} MEDIAFILE_NONMOTOR_ENTRYING_PARAM;
typedef struct tagMEDIAFILE_NONMOTOR_ENTRYING_INFO
{
    DWORD dwSize;                                  
    int nChannelID;                                
    NET_TIME stuBeginTime;                         
    NET_TIME stuEndTime;                           
    char szGlobalSceneFilePath[260];               
    int nGlobalSceneFileSize;                      
    int nFileType;                                 
    EM_NONMOTOR_ENTRYING_OBJECT_TYPE emObjectType; 
    NET_RECT stuBoundingBox;                       
    NET_EVENT_IMAGE_INFO stuImageInfo;             
    BOOL bRealUTC;                                 
    NET_TIME stuStartTimeRealUTC;                  
    NET_TIME stuEndTimeRealUTC;                    
} MEDIAFILE_NONMOTOR_ENTRYING_INFO;
typedef enum tagEM_WORK_HELMET_STATE
{
    EM_HELMET_STATE_UNKNOWN,            
    EM_HELMET_STATE_NOTWEAR,            
    EM_HELMET_STATE_WEAR,               
    EM_HELMET_STATE_INCONFORMITY_COLOR, 
} EM_WORK_HELMET_STATE;
typedef enum tagEM_WORKCLOTHES_STATE
{
    EM_WORKCLOTHES_STATE_UNKNOWN, 
    EM_WORKCLOTHES_STATE_NOTWEAR, 
    EM_WORKCLOTHES_STATE_WEAR,    
} EM_WORKCLOTHES_STATE;
typedef struct tagNET_HELMET_FILTER
{
    EM_CLOTHES_COLOR emColors[16];    
    UINT nColorsCount;                
    EM_WORK_HELMET_STATE emStates[8]; 
    UINT nStatesCount;                
    char byReserved[512];             
} NET_HELMET_FILTER;
typedef struct tagNET_CLOTHES_FILTER
{
    EM_CLOTHES_COLOR emColors[16];    
    UINT nColorsCount;                
    EM_WORKCLOTHES_STATE emStates[8]; 
    UINT nStatesCount;                
    char byReserved[512];             
} NET_CLOTHES_FILTER;
typedef struct tagNET_WORK_CLOTHER_DETECTION_FILTER
{
    NET_HELMET_FILTER stuHelmetFilter;   
    NET_CLOTHES_FILTER stuClothesFilter; 
    BYTE byReserved[1024];               
} NET_WORK_CLOTHER_DETECTION_FILTER;
typedef struct tagMEDIAFILE_WORK_CLOTHES_DETECTION_PARAM
{
    DWORD dwSize;                                
    int nFileType;                               
    int nChannelID;                              
    NET_TIME stuBeginTime;                       
    NET_TIME stuEndTime;                         
    int nEventList[256];                         
    int nEventCount;                             
    NET_WORK_CLOTHER_DETECTION_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;                    
    NET_TIME stuStartTimeRealUTC;                
    NET_TIME stuEndTimeRealUTC;                  
} MEDIAFILE_WORK_CLOTHES_DETECTION_PARAM;
typedef struct tagMEDIAFILE_HELMET_INFO
{
    EM_CLOTHES_COLOR emColor;     
    EM_WORK_HELMET_STATE emState; 
    char byReserved[512];         
} MEDIAFILE_HELMET_INFO;
typedef struct tagMEDIAFILE_CLOTHES_INFO
{
    EM_CLOTHES_COLOR emColor;     
    EM_WORKCLOTHES_STATE emState; 
    char byReserved[512];         
} MEDIAFILE_CLOTHES_INFO;
typedef struct tagMEDIAFILE_WORK_CLOTHES_DETECTION_INFO
{
    DWORD dwSize;                          
    int nChannelID;                        
    NET_TIME stuBeginTime;                 
    NET_TIME stuEndTime;                   
    MEDIAFILE_HELMET_INFO stuHelmetInfo;   
    MEDIAFILE_CLOTHES_INFO stuClothesInfo; 
    char szGlobalSceneImageFilePath[260];  
    UINT nGlobalSceneImageFileLength;      
    char szHumanSmallImageFilePath[260];   
    UINT nHumanSmallImageFileLength;       
    NET_RECT stuHumanBoundingBox;          
    int nFileType;                         
    BOOL bRealUTC;                         
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
    BYTE byReserved[968];                  
} MEDIAFILE_WORK_CLOTHES_DETECTION_INFO;
typedef struct tagNET_INTELLIGENT_CITY_MANAGER_EVENT_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    int nEventList[64];                      
    int nEventCount;                         
    BYTE byReserved[1024];                   
} NET_INTELLIGENT_CITY_MANAGER_EVENT_FILTER;
typedef struct tagNET_INTELLIGENT_CITY_MANAGER_PLATENO_FILTER
{
    EM_COMPARE_OPERATOR_TYPE emOperatorType; 
    char szPlateNo[16][32];                  
    int nPlateCount;                         
    BYTE byReserved[1024];                   
} NET_INTELLIGENT_CITY_MANAGER_PLATENO_FILTER;
typedef struct tagNET_INTELLIGENT_CITY_MANAGER_FILTER
{
    NET_INTELLIGENT_CITY_MANAGER_EVENT_FILTER stuEventFilter;     
    NET_INTELLIGENT_CITY_MANAGER_PLATENO_FILTER stuPlateNoFilter; 
    BYTE byReserved[2048];                                        
} NET_INTELLIGENT_CITY_MANAGER_FILTER;
typedef struct tagMEDIAFILE_INTELLIGENT_CITY_MANAGER_PARAM
{
    DWORD dwSize;                                  
    int nFileType;                                 
    int nChannelID;                                
    NET_TIME stuBeginTime;                         
    NET_TIME stuEndTime;                           
    NET_INTELLIGENT_CITY_MANAGER_FILTER stuFilter; 
    BOOL bOnlySupportRealUTC;                      
    NET_TIME stuStartTimeRealUTC;                  
    NET_TIME stuEndTimeRealUTC;                    
} MEDIAFILE_INTELLIGENT_CITY_MANAGER_PARAM;
typedef struct tagMEDIAFILE_COMPOSITE_PICTURE_INFO
{
    char szPicturePath[260]; 
    UINT nPictureLength;     
    UINT nGroupID;           
    UINT nCountInGroup;      
    UINT nIndexInGroup;      
    char szDefendCode[64];   
    BYTE byReserved[1020];   
} MEDIAFILE_COMPOSITE_PICTURE_INFO;
typedef struct tagMEDIAFILE_ORIGINAL_PICTURE_INFO
{
    char szPicturePath[260]; 
    UINT nPictureLength;     
    UINT nGroupID;           
    UINT nCountInGroup;      
    UINT nIndexInGroup;      
    char szDefendCode[64];   
    BYTE byReserved[1020];   
} MEDIAFILE_ORIGINAL_PICTURE_INFO;
typedef struct tagNET_INTELLIGENT_CITY_TRAFFIC_CAR_INFO
{
    char szPlateColor[32];    
    char szPlateNo[128];      
    char szVehicleColor[32];  
    char szVehicleLogo[32];   
    char szVehicleSeries[32]; 
    char szVehicleType[32];   
    UINT nParkingDuration;    
    BYTE byReserved[1020];    
} NET_INTELLIGENT_CITY_TRAFFIC_CAR_INFO;
typedef struct tagMEDIAFILE_INTELLIGENT_CITY_MANAGER_INFO
{
    DWORD dwSize;                                             
    int nChannelID;                                           
    NET_TIME stuBeginTime;                                    
    NET_TIME stuEndTime;                                      
    int nEvent;                                               
    int nFileType;                                            
    NET_TIME stuEventTime;                                    
    char szEventCode[128];                                    
    char szEventAddress[256];                                 
    char szSourceID[32];                                      
    MEDIAFILE_COMPOSITE_PICTURE_INFO stuCompositePicInfo[16]; 
    UINT nCompositePicCount;                                  
    MEDIAFILE_ORIGINAL_PICTURE_INFO stuOriginPicInfo[16];     
    UINT nOriginPicCount;                                     
    NET_INTELLIGENT_CITY_TRAFFIC_CAR_INFO stuTrafficCar;      
    BOOL bTrafficCar;                                         
    UINT nPresetID;                                           
    char szShopAddress[256];                                  
    char szPresetName[128];                                   
    UINT nViolationDuration;                                  
    BOOL bRealUTC;                                            
    NET_TIME stuStartTimeRealUTC;                             
    NET_TIME stuEndTimeRealUTC;                               
} MEDIAFILE_INTELLIGENT_CITY_MANAGER_INFO;
typedef enum tagEM_SMD_RECORD_TYPE
{
    EM_SMD_RECORD_UNKNWON,           
    EM_SMD_RECORD_HUMAN,             
    EM_SMD_RECORD_VEHICLE,           
    EM_SMD_RECORD_HUMAN_AND_VEHICLE, 
} EM_SMD_RECORD_TYPE;
typedef enum tagEM_SMD_VIDEO_STREAM
{
    EM_SMD_VIDEO_STREAM_UNKNOWN, 
    EM_SMD_VIDEO_STREAM_MAIN,    
    EM_SMD_VIDEO_STREAM_EXTRA1,  
    EM_SMD_VIDEO_STREAM_EXTRA2,  
    EM_SMD_VIDEO_STREAM_EXTRA3,  
    EM_SMD_VIDEO_STREAM_EXTRAX,  
} EM_SMD_VIDEO_STREAM;
typedef struct tagMEDIAFILE_SMD_RECORD_FILE_PARAM
{
    DWORD dwSize;                          
    int nChannelID;                        
    NET_TIME stuBeginTime;                 
    NET_TIME stuEndTime;                   
    EM_SMD_RECORD_TYPE emSmdRecordType[8]; 
    UINT nSmdRecordTypeNum;                
    EM_SMD_VIDEO_STREAM emVideoStream;     
    BOOL bOnlySupportRealUTC;              
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
} MEDIAFILE_SMD_RECORD_FILE_PARAM;
typedef enum tagEM_MOBILE_ENFORCE_UPLOAD_FLAG
{
    EM_MOBILE_ENFORCE_UPLOAD_FLAG_UNKNWON = -1, 
    EM_MOBILE_ENFORCE_UPLOAD_FLAG_NOTUPLOAD,    
    EM_MOBILE_ENFORCE_UPLOAD_FLAG_UPLOADED,     
    EM_MOBILE_ENFORCE_UPLOAD_FLAG_BACKEDUP = 3, 
} EM_MOBILE_ENFORCE_UPLOAD_FLAG;
typedef struct tagMEDIAFILE_MOBILE_ENFORCE_PARAM
{
    DWORD dwSize;                               
    int nChannelID;                             
    NET_TIME stuBeginTime;                      
    NET_TIME stuEndTime;                        
    EM_MOBILE_ENFORCE_UPLOAD_FLAG emUploadFlag; 
    UINT nFileTypeNum;                          
    EM_FINDFILE_TYPE emFileType[32];            
    int nSerialNoNum;                           
    char szSerialNo[256][128];                  
    int nRegistIDNum;                           
    char szRegistID[256][128];                  
    NET_TIME stuCollectStartTime;               
    NET_TIME stuCollectEndTime;                 
    BOOL bIsColloectTime;                       
    BOOL bOnlySupportRealUTC;                   
    NET_TIME stuStartTimeRealUTC;               
    NET_TIME stuEndTimeRealUTC;                 
    NET_TIME stuCollectStartTimeRealUTC;        
    NET_TIME stuCollectEndTimeRealUTC;          
} MEDIAFILE_MOBILE_ENFORCE_PARAM;
typedef struct tagNET_SMD_RECORD_ATTRIBUTE_INFO
{
    EM_SMD_RECORD_TYPE emSmdRecordType; 
    BYTE byReserved[2044];              
} NET_SMD_RECORD_ATTRIBUTE_INFO;
typedef struct tagMEDIAFILE_SMD_RECORD_FILE_INFO
{
    DWORD dwSize;                                  
    int nChannelID;                                
    NET_TIME stuStartTime;                         
    NET_TIME stuEndTime;                           
    INT64 nFileSize;                               
    UINT nFileType;                                
    UINT nVideoStream;                             
    char szFilePath[260];                          
    BYTE byReserved[4];                            
    int nEventLists[256];                          
    int nEventCount;                               
    UINT nPartition;                               
    UINT nDriveNo;                                 
    UINT nCluster;                                 
    NET_SMD_RECORD_ATTRIBUTE_INFO stuSmdAttribute; 
    BOOL bRealUTC;                                 
    NET_TIME stuStartTimeRealUTC;                  
    NET_TIME stuEndTimeRealUTC;                    
} MEDIAFILE_SMD_RECORD_FILE_INFO;
typedef enum tagEM_MOBILE_ENFORCE_FORMAT
{
    EM_MOBILE_ENFORCE_FORMAT_UNKNOWN, 
    EM_MOBILE_ENFORCE_FORMAT_VIDEO,   
    EM_MOBILE_ENFORCE_FORMAT_AUDIO,   
    EM_MOBILE_ENFORCE_FORMAT_IMAGE,   
} EM_MOBILE_ENFORCE_FORMAT;
typedef enum tagEM_MOBILE_ENFORCE_FILE_TYPE
{
    EM_MOBILE_ENFORCE_FILE_TYPE_UNKNOWN = 0, 
    EM_MOBILE_ENFORCE_FILE_TYPE_DAV,         
    EM_MOBILE_ENFORCE_FILE_TYPE_MP4,         
    EM_MOBILE_ENFORCE_FILE_TYPE_AAC,         
    EM_MOBILE_ENFORCE_FILE_TYPE_MP3,         
    EM_MOBILE_ENFORCE_FILE_TYPE_JPG,         
} EM_MOBILE_ENFORCE_FILE_TYPE;
typedef enum tagEM_MOBILE_ENFORCE_VIDEO_STREAM
{
    EM_MOBILE_ENFORCE_VIDEO_STREAM_UNKNOWN, 
    EM_MOBILE_ENFORCE_VIDEO_STREAM_MAIN,    
    EM_MOBILE_ENFORCE_VIDEO_STREAM_EXTRA1,  
    EM_MOBILE_ENFORCE_VIDEO_STREAM_EXTRA2,  
    EM_MOBILE_ENFORCE_VIDEO_STREAM_EXTRA3,  
} EM_MOBILE_ENFORCE_VIDEO_STREAM;
typedef struct tagMEDIAFILE_MOBILE_ENFORCE_INFO
{
    DWORD dwSize;          
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    char szFilePath[260];  
    UINT nLength;          
    char szUniqueID[128];                   
    char szOriginalDeviceID[128];           
    EM_MOBILE_ENFORCE_FORMAT emFormat;      
    EM_MOBILE_ENFORCE_FILE_TYPE emFileType; 
    char szFileName[256];                   
    char szExtraInfos[256];                 
    NET_TIME stuCollectTime;                
    char szIntegrityCheckID[128];           
    BOOL bRealUTC;                          
    NET_TIME stuStartTimeRealUTC;           
    NET_TIME stuEndTimeRealUTC;             
    NET_TIME stuCollectTimeRealUTC;         
} MEDIAFILE_MOBILE_ENFORCE_INFO;
typedef enum tagEM_SMART_KITCHEN_CLOTHES_STATE
{
    EM_SMART_KITCHEN_CLOTHES_STATE_UNKNOWN, 
    EM_SMART_KITCHEN_CLOTHES_STATE_LACK,    
    EM_SMART_KITCHEN_CLOTHES_STATE_HAS,     
} EM_SMART_KITCHEN_CLOTHES_STATE;
typedef struct tagNET_SMART_KITCHEN_CLOTHES_CHEF_MASK
{
    BOOL bChefMask;                              
    EM_SMART_KITCHEN_CLOTHES_STATE emHasMask[3]; 
    char szReserved[1024];                       
} NET_SMART_KITCHEN_CLOTHES_CHEF_MASK;
typedef struct tagNET_SMART_KITCHEN_CLOTHES_CHEF_HAT
{
    BOOL bChefHat;                                  
    EM_SMART_KITCHEN_CLOTHES_STATE emHasChefHat[3]; 
    char szReserved[1024];                          
} NET_SMART_KITCHEN_CLOTHES_CHEF_HAT;
typedef enum tagEM_SMART_KITCHEN_CLOTHES_COLOUR
{
    EM_SMART_KITCHEN_CLOTHES_COLOUR_UNKNOWN, 
    EM_SMART_KITCHEN_CLOTHES_COLOUR_RED,     
    EM_SMART_KITCHEN_CLOTHES_COLOUR_BLACK,   
    EM_SMART_KITCHEN_CLOTHES_COLOUR_WHITE,   
} EM_SMART_KITCHEN_CLOTHES_COLOUR;
typedef struct tagNET_SMART_KITCHEN_CLOTHES_CHEF_CLOTHES
{
    BOOL bChefClothes;                                     
    EM_SMART_KITCHEN_CLOTHES_STATE emHasChefClothes[3];    
    EM_SMART_KITCHEN_CLOTHES_COLOUR emChefClothesColor[3]; 
    char szReserved[1024];                                 
} NET_SMART_KITCHEN_CLOTHES_CHEF_CLOTHES;
typedef struct tagMEDIAFILE_SMART_KITCHEN_CLOTHES_DETECTION_PARAM
{
    DWORD dwSize;                                          
    int nChannelID;                                        
    NET_TIME stuBeginTime;                                 
    NET_TIME stuEndTime;                                   
    NET_SMART_KITCHEN_CLOTHES_CHEF_MASK stuChefMask;       
    NET_SMART_KITCHEN_CLOTHES_CHEF_HAT stuChefHat;         
    NET_SMART_KITCHEN_CLOTHES_CHEF_CLOTHES stuChefClothes; 
    BOOL bOnlySupportRealUTC;                              
    NET_TIME stuStartTimeRealUTC;                          
    NET_TIME stuEndTimeRealUTC;                            
} MEDIAFILE_SMART_KITCHEN_CLOTHES_DETECTION_PARAM;
typedef struct tagMEDIAFILE_SMART_KITCHEN_CLOTHES_DETECTION_INFO
{
    DWORD dwSize;                                       
    int nChannelID;                                     
    NET_TIME stuStartTime;                              
    NET_TIME stuEndTime;                                
    EM_SMART_KITCHEN_CLOTHES_STATE emHasMask;           
    EM_SMART_KITCHEN_CLOTHES_STATE emHasChefHat;        
    EM_SMART_KITCHEN_CLOTHES_STATE emHasChefClothes;    
    EM_SMART_KITCHEN_CLOTHES_COLOUR emChefClothesColor; 
    char szFaceImagePath[260];                          
    UINT nFaceImageLength;                              
    char szHumanImagePath[260];                         
    UINT nHumanImageLength;                             
    char szSceneImagePath[260];                         
    UINT nSceneImageLength;                             
    BOOL bRealUTC;                                      
    NET_TIME stuStartTimeRealUTC;                       
    NET_TIME stuEndTimeRealUTC;                         
} MEDIAFILE_SMART_KITCHEN_CLOTHES_DETECTION_INFO;
typedef enum tagNET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE
{
    NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE_UNKNOWN,                   
    NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE_FLOATING_OBJECT_DETECTION, 
    NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE_WATER_LEVEL_DETECTION,     
    NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE_SEWAGE_DETECTION,          
    NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE_WATER_COLOR_DETECTION,     
} NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE;
typedef enum tagNET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR
{
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR_UNKNOWN, 
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR_BLACK,   
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR_RED,     
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR_GREEN,   
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR_YELLOW,  
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR_ALL,     
} NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR;
typedef struct tagMEDIAFILE_WATER_CONSERVANCY_SEARCH_PARAM
{
    DWORD dwSize;                                             
    int nChannelID;                                           
    NET_TIME stuStartTime;                                    
    NET_TIME stuEndTime;                                      
    NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE emEventType;   
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR emWaterColor; 
    BOOL bOnlySupportRealUTC;                                 
    NET_TIME stuStartTimeRealUTC;                             
    NET_TIME stuEndTimeRealUTC;                               
} MEDIAFILE_WATER_CONSERVANCY_SEARCH_PARAM;
typedef enum tagNET_EM_WATER_STATUS
{
    NET_EM_WATER_STATUS_UNKNOWN,               
    NET_EM_WATER_STATUS_NORMAL,                
    NET_EM_WATER_STATUS_ABOVE_UPPER_THRESHOLD, 
    NET_EM_WATER_STATUS_BELOW_LOWER_THRESHOLD, 
} NET_EM_WATER_STATUS;
typedef struct tagNET_WATER_CONSERVANCY_SEARCH_IMAGE_INFO
{
    int nLength;          
    char szFilePath[128]; 
    char szReserved[892]; 
} NET_WATER_CONSERVANCY_SEARCH_IMAGE_INFO;
typedef struct tagMEDIAFILE_WATER_CONSERVANCY_SEARCH_INFO
{
    DWORD dwSize;                                             
    int nChannelID;                                           
    NET_TIME stuStartTime;                                    
    NET_TIME stuEndTime;                                      
    NET_EM_WATER_CONSERVANCY_SEARCH_EVENT_TYPE emEventType;   
    int nCurrentRatio;                                        
    NET_EM_WATER_STATUS emWaterStatus;                        
    float fWaterValue;                                        
    NET_EM_WATER_CONSERVANCY_SEARCH_WATER_COLOR emWaterColor; 
    char szGlobalSceneFilePath[256];                          
    int nGlobalScenePicLength;                                
    NET_WATER_CONSERVANCY_SEARCH_IMAGE_INFO stuImageInfo;     
    BOOL bRealUTC;                                            
    NET_TIME stuStartTimeRealUTC;                             
    NET_TIME stuEndTimeRealUTC;                               
} MEDIAFILE_WATER_CONSERVANCY_SEARCH_INFO;
typedef struct tagMEDIAFILE_BREAK_RULE_BUILDING_SEARCH_PARAM
{
    DWORD dwSize;                 
    int nChannelID;               
    NET_TIME stuStartTime;        
    NET_TIME stuEndTime;          
    BOOL bOnlySupportRealUTC;     
    NET_TIME stuStartTimeRealUTC; 
    NET_TIME stuEndTimeRealUTC;   
} MEDIAFILE_BREAK_RULE_BUILDING_SEARCH_PARAM;
typedef struct tagMEDIAFILE_BREAK_RULE_BUILDING_SEARCH_INFO
{
    DWORD dwSize;                    
    int nChannelID;                  
    NET_TIME stuStartTime;           
    NET_TIME stuEndTime;             
    char szGlobalSceneFilePath[256]; 
    int nGlobalScenePicLength;       
    BOOL bRealUTC;                   
    NET_TIME stuStartTimeRealUTC;    
    NET_TIME stuEndTimeRealUTC;      
} MEDIAFILE_BREAK_RULE_BUILDING_SEARCH_INFO;
typedef enum tagNET_EM_BOAT_SEARCH_RULE
{
    NET_EM_BOAT_SEARCH_RULE_UNKNOWN,                
    NET_EM_BOAT_SEARCH_RULE_CROSS_LINE_DETECTION,   
    NET_EM_BOAT_SEARCH_RULE_CROSS_REGION_DETECTION, 
    NET_EM_BOAT_SEARCH_RULE_PARKING_DETECTION,      
    NET_EM_BOAT_SEARCH_RULE_FISHING_DETECTION,      
} NET_EM_BOAT_SEARCH_RULE;
typedef enum tagNET_EM_BOAT_SEARCH_ACTION
{
    NET_EM_BOAT_SEARCH_ACTION_UNKNOWN,   
    NET_EM_BOAT_SEARCH_ACTION_APPEAR,    
    NET_EM_BOAT_SEARCH_ACTION_DISAPPEAR, 
    NET_EM_BOAT_SEARCH_ACTION_INSIDE,    
    NET_EM_BOAT_SEARCH_ACTION_CROSS,     
} NET_EM_BOAT_SEARCH_ACTION;
typedef enum tagNET_EM_BOAT_SEARCH_DIRECTION
{
    NET_EM_BOAT_SEARCH_DIRECTION_UNKNOW = 0,
    NET_EM_BOAT_SEARCH_DIRECTION_LEFT_TO_RIGHT, 
    NET_EM_BOAT_SEARCH_DIRECTION_RIGHT_TO_LEFT, 
} NET_EM_BOAT_SEARCH_DIRECTION;
typedef struct tagMEDIAFILE_BOAT_SEARCH_PARAM
{
    DWORD dwSize;                             
    int nChannelID;                           
    NET_TIME stuStartTime;                    
    NET_TIME stuEndTime;                      
    int nRuleNum;                             
    NET_EM_BOAT_SEARCH_RULE emRule[4];        
    NET_EM_BOAT_SEARCH_ACTION emAction;       
    NET_EM_BOAT_SEARCH_DIRECTION emDirection; 
    BOOL bOnlySupportRealUTC;                 
    NET_TIME stuStartTimeRealUTC;             
    NET_TIME stuEndTimeRealUTC;               
} MEDIAFILE_BOAT_SEARCH_PARAM;
typedef struct tagMEDIAFILE_BOAT_SEARCH_INFO
{
    DWORD dwSize;                             
    int nChannelID;                           
    NET_TIME stuStartTime;                    
    NET_TIME stuEndTime;                      
    NET_EM_BOAT_SEARCH_RULE emRule;           
    NET_EM_BOAT_SEARCH_ACTION emAction;       
    NET_EM_BOAT_SEARCH_DIRECTION emDirection; 
    char szGlobalSceneFilePath[256];          
    int nGlobalScenePicLength;                
    BOOL bRealUTC;                            
    NET_TIME stuStartTimeRealUTC;             
    NET_TIME stuEndTimeRealUTC;               
} MEDIAFILE_BOAT_SEARCH_INFO;
typedef struct tagMEDIAFILE_RADAR_REGION_DETECTION_PARAM
{
    DWORD dwSize;          
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
} MEDIAFILE_RADAR_REGION_DETECTION_PARAM;
typedef struct tagMEDIAFILE_RADAR_REGION_DETECTION_INFO
{
    DWORD dwSize;                          
    int nChannelID;                        
    NET_TIME stuStartTime;                 
    NET_TIME stuEndTime;                   
    SCENE_IMAGE_INFO_EX stuSceneImage[10]; 
    int nSceneImageNum;                    
} MEDIAFILE_RADAR_REGION_DETECTION_INFO;
typedef struct tagNET_MEDIAFILE_EXAM_PARAM
{
    DWORD dwSize;          
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    char szName[64];       
    char szNumber[64];     
    char szCameraIP[32];   
} NET_MEDIAFILE_EXAM_PARAM;
typedef struct tagNET_MEDIAFILE_EXAM_INFO
{
    DWORD dwSize;          
    int nChannelID;        
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    char szName[64];       
    char szNumber[64];     
    char szCameraIP[32];   
} NET_MEDIAFILE_EXAM_INFO;
typedef struct tagNET_MEDIAFILE_POLICEID_PARAM
{
    DWORD dwSize;              
    NET_TIME stuStartTime;     
    NET_TIME stuEndTime;       
    char szPoliceManID[32];    
    char szPoliceCarID[32];    
    char szPoliceOfficeID[64]; 
} NET_MEDIAFILE_POLICEID_PARAM;
typedef struct __NET_FLASHCONTROL
{
    DWORD dwSize; 
    int nMode;    
} NET_FLASHCONTROL;
typedef enum tagSNAP_CLIENT_TYPE
{
    SNAP_CLIENT_TYPE_COMMON,       
    SNAP_CLIENT_TYPE_PARKINGSPACE, 
} SNAP_CLIENT_TYPE;
#define DH_MAX_USER_DEFINE_INFO 1024
typedef struct _NET_CLIENT_SNAP_INFO
{
    DWORD dwSize;                                       
    unsigned int nFrameSequence;                        
    double PTS;                                         
    char szUserDefinedInfo[DH_MAX_USER_DEFINE_INFO];    
    SNAP_CLIENT_TYPE emSNAP_CLIENT_TYPE;                
    DWORD dwRetCardNumber;                              
    EVENT_CARD_INFO stuCardInfo[DH_EVENT_MAX_CARD_NUM]; 
} NET_CLIENT_SNAP_INFO;
typedef struct __NET_IN_SNAPSHOT
{
    DWORD dwSize;     
    int nTriggerType; 
    int nLaneID;      
    int nGroupID;     
    int nGrabTimes;   
    int nStartPicNum; 
    int nDirection;   
    int nGrabWaitTime;    
    DWORD* pGrabWaitTime; 
    int nLowerSpeedLimit; 
    int nUpperSpeedLimit; 
    int nSpeed;           
    int nViolationNo;     
    int nRedLightTime;    
    int nFlashControl;                 
    NET_FLASHCONTROL* pFlashControl;   
    DWORD dwUser;                      
    NET_CLIENT_SNAP_INFO stClientInfo; 
} NET_IN_SNAPSHOT;
typedef struct __NET_OUT_SNAPSHOT
{
    DWORD dwSize; 
} NET_OUT_SNAPSHOT;
typedef struct __NET_IN_FORCELIGHTSTATE
{
    DWORD dwSize;            
    unsigned int nDirection; 
} NET_IN_FORCELIGHTSTATE;
typedef struct __NET_OUT_FORCELIGHTSTATE
{
    DWORD dwSize; 
} NET_OUT_FORCELIGHTSTATE;
typedef int(CALLBACK* fFluxStatDataCallBack)(LLONG lFluxStatHandle, DWORD dwEventType, void* pEventInfo, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser, int nSequence, void* reserved);
typedef struct __NET_IN_TRAFFICFLUXSTAT
{
    DWORD dwSize;                 
    fFluxStatDataCallBack cbData; 
    LDWORD dwUser;                
} NET_IN_TRAFFICFLUXSTAT;
typedef struct __NET_OUT_TRAFFICFLUXSTAT
{
    DWORD dwSize; 
} NET_OUT_TRAFFICFLUXSTAT;
typedef enum tagEM_GRANULARITY_STARTFIND_TYPE
{
    EM_GRANULARITY_TYPE_UNKNOWN, 
    EM_GRANULARITY_TYPE_MINUTE,  
    EM_GRANULARITY_TYPE_HOUR,    
    EM_GRANULARITY_TYPE_DAY,     
    EM_GRANULARITY_TYPE_MONTH,   
} EM_GRANULARITY_STARTFIND_TYPE;
typedef enum tagEM_STARTFIND_DIRECTION
{
    EM_STARTFIND_DIRECTION_UNKNOWN,     
    EM_STARTFIND_DIRECTION_BOTH,        
    EM_STARTFIND_DIRECTION_LEFTTORIGHT, 
    EM_STARTFIND_DIRECTION_RIGHTTOLEFT, 
} EM_STARTFIND_DIRECTION;
typedef struct __NET_IN_TRAFFICSTARTFINDSTAT
{
    DWORD dwSize;                                
    NET_TIME stStartTime;                        
    NET_TIME stEndTime;                          
    int nWaittime;                               
    int nChannelCount;                           
    int nChannels[256];                          
    int nLaneCount;                              
    int nLanes[16];                              
    int nClassType;                              
    EM_GRANULARITY_STARTFIND_TYPE emGranularity; 
    EM_STARTFIND_DIRECTION emDirection;          
} NET_IN_TRAFFICSTARTFINDSTAT;
typedef struct __NET_OUT_TRAFFICSTARTFINDSTAT
{
    DWORD dwSize;       
    DWORD dwTotalCount; 
} NET_OUT_TRAFFICSTARTFINDSTAT;
typedef struct __NET_IN_TRAFFICDOFINDSTAT
{
    DWORD dwSize;        
    unsigned int nCount; 
    int nWaittime;       
} NET_IN_TRAFFICDOFINDSTAT;
typedef struct
{
    DWORD dwSize;                  
    int nStatInfo;                 
    DH_TRAFFICFLOWSTAT* pStatInfo; 
} DH_TRAFFICFLOWSTAT_OUT;
typedef struct __NET_OUT_TRAFFICDOFINDSTAT
{
    DWORD dwSize;                      
    DH_TRAFFICFLOWSTAT_OUT stStatInfo; 
} NET_OUT_TRAFFICDOFINDSTAT;
typedef enum tagEM_RULE_TYPE
{
    EM_RULE_UNKNOWN,            
    EM_RULE_NUMBER_STAT,        
    EM_RULE_MAN_NUM_DETECTION,  
    EM_RULE_QUEUE_DETECTION,    
    EM_RULE_ANATOMYTEMP_DETECT, 
} EM_RULE_TYPE;
typedef enum tagEM_OTHER_RULE_TYPE
{
    EM_OTHER_RULE_TYPE_UNKOWN,           
    EM_OTHER_RULE_TYPE_AVERAGE_STAYTIME, 
} EM_OTHER_RULE_TYPE;
typedef struct __NET_IN_FINDNUMBERSTAT
{
    DWORD dwSize;                   
    int nChannelID;                 
    NET_TIME stStartTime;           
    NET_TIME stEndTime;             
    int nGranularityType;           
    int nWaittime;                  
    UINT nPlanID;                   
    EM_RULE_TYPE emRuleType;        
    int nMinStayTime;               
    int nAreaIDNum;                 
    UINT nAreaID[20];               
    EM_OTHER_RULE_TYPE emOtherRule; 
    int nGranularityExt;            
} NET_IN_FINDNUMBERSTAT;
typedef struct __NET_OUT_FINDNUMBERSTAT
{
    DWORD dwSize;       
    DWORD dwTotalCount; 
} NET_OUT_FINDNUMBERSTAT;
typedef struct __NET_IN_DOFINDNUMBERSTAT
{
    DWORD dwSize;              
    unsigned int nBeginNumber; 
    unsigned int nCount;       
    int nWaittime;             
} NET_IN_DOFINDNUMBERSTAT;
typedef struct tagNET_TEMPERATURE_STATISTICS_INFO
{
    UINT nTotalCount;      
    UINT nHighTempCount;   
    UINT nLowTempCount;    
    UINT nNormalTempCount; 
    UINT nNoMaskCount;     
    UINT nTimeKey;         
    BYTE byReserved[1024]; 
} NET_TEMPERATURE_STATISTICS_INFO;
typedef struct __DH_NUMBERSTAT
{
    DWORD dwSize;
    int nChannelID;                              
    char szRuleName[DH_CHAN_NAME_LEN];           
    NET_TIME stuStartTime;                       
    NET_TIME stuEndTime;                         
    int nEnteredSubTotal;                        
    int nExitedSubtotal;                         
    int nAvgInside;                              
    int nMaxInside;                              
    int nEnteredWithHelmet;                      
    int nEnteredWithoutHelmet;                   
    int nExitedWithHelmet;                       
    int nExitedWithoutHelmet;                    
    int nInsideSubtotal;                         
    UINT nPlanID;                                
    UINT nAreaID;                                
    UINT nAverageStayTime;                       
    NET_TEMPERATURE_STATISTICS_INFO stuTempInfo; 
    int nPassedSubtotal;                         
} DH_NUMBERSTAT;
typedef struct __NET_OUT_DOFINDNUMBERSTAT
{
    DWORD dwSize;                  
    int nCount;                    
    DH_NUMBERSTAT* pstuNumberStat; 
    int nBufferLen;                
    int nMinStayTime;              
} NET_OUT_DOFINDNUMBERSTAT;
typedef struct tagNET_VIDEOSTAT_SUBTOTAL
{
    int nTotal;                  
    int nHour;                   
    int nToday;                  
    int nOSD;                    
    unsigned int nTotalNonMotor; 
    unsigned int nHourNonMotor;  
    unsigned int nTodayNonMotor; 
    UINT nTotalPig;              
    UINT nHourPig;               
    UINT nTodayPig;              
    UINT nTotalPigInTimeSection; 
    char reserved[224];          
} NET_VIDEOSTAT_SUBTOTAL;
#define MAX_EXIT_MAN_NUM 32 
typedef struct tagNET_EXITMAN_STAY_STAT
{
    NET_TIME stuEnterTime; 
    NET_TIME stuExitTime;  
    BYTE reserved[128];    
} NET_EXITMAN_STAY_STAT;
typedef struct tagNET_NONMOTOR_STAY_STAT
{
    NET_TIME stuEnterTime; 
    NET_TIME stuExitTime;  
    BYTE reserved[128];    
} NET_NONMOTOR_STAY_STAT;
typedef struct tagNET_PIG_STAY_STAT
{
    NET_TIME stuEnterTime; 
    NET_TIME stuExitTime;  
    char szReserved[208];  
} NET_PIG_STAY_STAT;
typedef struct tagNET_PASSED_SUBTOTAL_INFO
{
    int nTotal;              
    int nHour;               
    int nToday;              
    int nTotalInTimeSection; 
    char szReserved[112];    
} NET_PASSED_SUBTOTAL_INFO;
typedef struct tagNET_VIDEOSTAT_SUMMARY
{
    int nChannelID;                                               
    char szRuleName[32];                                          
    NET_TIME_EX stuTime;                                          
    NET_VIDEOSTAT_SUBTOTAL stuEnteredSubtotal;                    
    NET_VIDEOSTAT_SUBTOTAL stuExitedSubtotal;                     
    UINT nInsidePeopleNum;                                        
    EM_RULE_TYPE emRuleType;                                      
    int nRetExitManNum;                                           
    NET_EXITMAN_STAY_STAT stuExitManStayInfo[MAX_EXIT_MAN_NUM];   
    UINT nPlanID;                                                 
    UINT nAreaID;                                                 
    UINT nCurrentDayInsidePeopleNum;                              
    UINT nInsideTotalNonMotor;                                    
    UINT nInsideTodayNonMotor;                                    
    int nRetNonMotorNum;                                          
    NET_NONMOTOR_STAY_STAT stuNonMotorStayStat[MAX_EXIT_MAN_NUM]; 
    UINT nInsideTotalPig;                                         
    int nPigStayStatCount;                                        
    NET_PIG_STAY_STAT stuPigStayStatInfo[32];                     
    UINT nInsideTodayPig;                                         
    char szReserved[4];                                           
    NET_PASSED_SUBTOTAL_INFO stuPassedSubtotal;                   
    BYTE reserved[884];                                           
} NET_VIDEOSTAT_SUMMARY;
typedef void(CALLBACK* fVideoStatSumCallBack)(LLONG lAttachHandle, NET_VIDEOSTAT_SUMMARY* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VIDEOSTAT_SUM
{
    DWORD dwSize;
    int nChannel;                         
    fVideoStatSumCallBack cbVideoStatSum; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_VIDEOSTAT_SUM;
typedef struct tagNET_OUT_ATTACH_VIDEOSTAT_SUM
{
    DWORD dwSize;
} NET_OUT_ATTACH_VIDEOSTAT_SUM;
typedef enum tagEM_HEATMAP_TYPE
{
    EM_HEATMAP_UNKNOWN,         
    EM_HEATMAP_AVERAGESTAYTIME, 
    EM_HEATMAP_HUMANSTATISTICS, 
    EM_HEATMAP_HUMANTRACK,      
} EM_HEATMAP_TYPE;
typedef struct tagNET_IN_GET_VIDEOSTAT_HEATMAP
{
    DWORD dwSize;                  
    int nPlanID;                   
    NET_TIME stuStartTime;         
    NET_TIME stuEndTime;           
    EM_HEATMAP_TYPE emHeatMapType; 
} NET_IN_GET_VIDEOSTAT_HEATMAP;
typedef struct tagNET_OUT_GET_VIDEOSTAT_HEATMAP
{
    DWORD dwSize; 
    UINT nToken;  
} NET_OUT_GET_VIDEOSTAT_HEATMAP;
typedef struct tagNET_CB_VIDEOSTAT_HEATMAP
{
    UINT nToken;
    EM_HEATMAP_TYPE emHeatMapType; 
    BYTE byReserved[1024];         
} NET_CB_VIDEOSTAT_HEATMAP;
typedef void(CALLBACK* fVideoStatHeatMapCallBack)(LLONG lAttachHandle, NET_CB_VIDEOSTAT_HEATMAP* pBuf, const char* pBinData, DWORD dwBinDataLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VIDEOSTAT_HEATMAP
{
    DWORD dwSize;                                 
    int nChannel;                                 
    fVideoStatHeatMapCallBack cbVideoStatHeatMap; 
    LDWORD dwUser;                                
} NET_IN_ATTACH_VIDEOSTAT_HEATMAP;
typedef struct tagNET_OUT_ATTACH_VIDEOSTAT_HEATMAP
{
    DWORD dwSize; 
} NET_OUT_ATTACH_VIDEOSTAT_HEATMAP;
typedef enum tagEM_STAT_GRANULARITY
{
    EM_STAT_GRANULARITY_UNKNOWN, 
    EM_STAT_GRANULARITY_MINUTE,  
} EM_STAT_GRANULARITY;
typedef struct tagNET_INSIDE_SUB_TOTAL_INFO
{
    int nTotal;                        
    int nTotalStayTime;                
    int nManStaySummaryValidNum;       
    int nManStaySummary[8];            
    int nTotalStayTimeSummaryValidNum; 
    int nTotalStayTimeSummary[8];      
} NET_INSIDE_SUB_TOTAL_INFO;
typedef struct tagNET_CB_VIDEOSTAT_STREAM
{
    int nChannel;                                
    int nPtzPresetId;                            
    char szRuleNanme[128];                       
    char szStartTime[20];                        
    char szRuleType[32];                         
    EM_STAT_GRANULARITY emStatGranularity;       
    unsigned short nCycle;                       
    unsigned short nAreaID;                      
    UINT nEnteredSubtotal;                       
    UINT nExitedSubtotal;                        
    UINT nPassedSubtotal;                        
    NET_INSIDE_SUB_TOTAL_INFO stuInsideSubtotal; 
    char szReserved[940];                        
} NET_CB_VIDEOSTAT_STREAM;
typedef void(CALLBACK* fVideoStatStreamCallBack)(LLONG lAttachHandle, NET_CB_VIDEOSTAT_STREAM* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VIDEOSTAT_STREAM
{
    DWORD dwSize;                               
    int nVideoChannel;                          
    EM_STAT_GRANULARITY emGranularity;          
    char szReserved1[4];                        
    char szRuleType[32];                        
    char szStartTime[20];                       
    fVideoStatStreamCallBack cbVideoStatStream; 
    LDWORD dwUser;                              
    unsigned short nCycle;                      
    char szReserved2[2];                        
    int nSendMinStayTimeValidNum;               
    int nMinStayTime[8];                        
} NET_IN_ATTACH_VIDEOSTAT_STREAM;
typedef struct tagNET_OUT_ATTACH_VIDEOSTAT_STREAM
{
    DWORD dwSize; 
} NET_OUT_ATTACH_VIDEOSTAT_STREAM;
typedef struct tagNET_IN_GET_PARKINGSPACE_STATUS
{
    DWORD dwSize;     
    DWORD dwWaitTime; 
    int nChannelID;   
    int* pLaneID;     
    int nLaneCount;   
} NET_IN_GET_PARKINGSPACE_STATUS;
typedef struct tagNET_LANE_PARKINGSPACE_STATUS
{
    DWORD dwSize;                                   
    int nLaneID;                                    
    unsigned int nPictureId;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
} NET_LANE_PARKINGSPACE_STATUS;
typedef struct tagNET_OUT_GET_PARKINGSPACE_STATUS
{
    DWORD dwSize;                          
    NET_LANE_PARKINGSPACE_STATUS* pStatus; 
    int nMaxStatus;                        
    int nRetStatus;                        
} NET_OUT_GET_PARKINGSPACE_STATUS;
typedef struct tagNET_CB_PARKINGSPACE_DATA
{
    DWORD dwSize;            
    void* pPicBuffer;        
    unsigned int nPicLength; 
} NET_CB_PARKINGSPACE_DATA;
typedef int(CALLBACK* fNotifySnapData)(LLONG lParkingHandle, NET_CB_PARKINGSPACE_DATA* pDiagnosisInfo, void* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_PARKINGSPACE
{
    DWORD dwSize;            
    DWORD dwWaitTime;        
    int nChannelID;          
    unsigned int nPictureId; 
    fNotifySnapData cbNotifySnapData; 
    LDWORD dwUser;                    
} NET_IN_ATTACH_PARKINGSPACE;
typedef struct tagNET_CB_FINGERPRINT_INFO
{
    UINT nIndex;                                   
    char szFingerprintData[DH_COMMON_STRING_2048]; 
    BYTE bReserved[256];                           
} NET_CB_FINGERPRINT_INFO;
typedef struct tagNET_CB_PERSON_INFO
{
    UINT nSID;                                                       
    UINT nPicLength;                                                 
    char szUserID[DH_MAX_USERID_LEN];                                
    UINT nRetFaceDataNum;                                            
    char szFaceData[MAX_FACE_DATA_NUM][MAX_FACE_DATA_LEN];           
    char szPassword[DH_COMMON_STRING_64];                            
    char szCardNo[DH_MAX_CARDNO_LEN];                                
    char szCardName[DH_COMMON_STRING_32];                            
    UINT nFingerPrintNum;                                            
    NET_CB_FINGERPRINT_INFO stuFingerPrintInfo[MAX_FINGERPRINT_NUM]; 
    BYTE bReserved[2048];                                            
} NET_CB_PERSON_INFO;
typedef int(CALLBACK* fNotifyPersonInfo)(LLONG lLoginID, LLONG lPersonHandle, NET_CB_PERSON_INFO* pstuPersonInfo, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser, void* reserved);
typedef struct tagNET_IN_ATTACH_PERSONINFOCOLLECT
{
    DWORD dwSize;                         
    DWORD dwWaitTime;                     
    fNotifyPersonInfo cbNotifyPersonInfo; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_PERSONINFOCOLLECT;
typedef struct tagNET_OUT_ATTACH_PERSONINFOCOLLECT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_PERSONINFOCOLLECT;
typedef struct tagNET_IN_DETACH_PERSONINFOCOLLECT
{
    DWORD dwSize;        
    DWORD dwWaitTime;    
    LLONG lPersonHandle; 
} NET_IN_DETACH_PERSONINFOCOLLECT;
typedef struct tagNET_OUT_DETACH_PERSONINFOCOLLECT
{
    DWORD dwSize; 
} NET_OUT_DETACH_PERSONINFOCOLLECT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPersonInfoCollect(LLONG lLoginID, NET_IN_ATTACH_PERSONINFOCOLLECT* pstuInParam, NET_OUT_ATTACH_PERSONINFOCOLLECT* pstuOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPersonInfoColloect(NET_IN_DETACH_PERSONINFOCOLLECT* pstuInParam, NET_OUT_DETACH_PERSONINFOCOLLECT* pstuOutParam);
typedef enum tagNET_CAR_SIZE
{
    CAR_SIZE_UNKNOWN = 0, 
    CAR_SIZE_SAMLL,       
    CAR_SIZE_BIG,         
} NET_CAR_SIZE;
typedef enum tagNET_CAR_ACTION
{
    CAR_ACTION_UNKNOWN = 0,
    CAR_ACTION_ENTER, 
    CAR_ACTION_LEAVE, 
} NET_CAR_ACTION;
typedef struct tagNET_CAR_PASS_INFO
{
    DWORD dwSize;
    DWORD nID;                  
    DWORD nLaneNumber;          
    DWORD nRoadwayNumber;       
    DWORD nSpeed;               
    NET_CAR_SIZE emCarSize;     
    NET_CAR_ACTION emCarAction; 
    NET_TIME_EX stuTime;        
} NET_CAR_PASS_INFO;
typedef int(CALLBACK* fNotifyCarPassInfo)(LLONG lCarPassHandle, NET_CAR_PASS_INFO* pstuCarPassInfos, int nInfoNum, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CAR_PASS_INFO
{
    DWORD dwSize;   
    int nChannelID; 
    fNotifyCarPassInfo cbNotifyCarPassInfo; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_CAR_PASS_INFO;
typedef struct tagNET_OUT_ATTACH_CAR_PASS_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_CAR_PASS_INFO;
typedef struct tagNET_OUT_ATTACH_PARKINGSPACE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_PARKINGSPACE;
typedef struct tagNET_IN_DETACH_PARKINGSPACE
{
    DWORD dwSize;         
    DWORD dwWaitTime;     
    LLONG lParkingHandle; 
} NET_IN_DETACH_PARKINGSPACE;
typedef struct tagNET_OUT_DETACH_PARKINGSPACE
{
    DWORD dwSize; 
} NET_OUT_DETACH_PARKINGSPACE;
typedef struct tagNET_IN_GET_PARKINGLOCK_STATE_INFO
{
    DWORD dwSize; 
} NET_IN_GET_PARKINGLOCK_STATE_INFO;
typedef enum tagEM_STATE_TYPE
{
    EM_STATE_TYPE_UNKNOW,    
    EM_STATE_TYPE_LOCKRISE,  
    EM_STATE_TYPE_LOCKDOWN,  
    EM_STATE_TYPE_LOCKERROR, 
} EM_STATE_TYPE;
typedef struct tagNET_STATE_LIST_INFO
{
    unsigned int nLane;    
    EM_STATE_TYPE emState; 
    BYTE byReserved[256];  
} NET_STATE_LIST_INFO;
typedef struct tagNET_OUT_GET_PARKINGLOCK_STATE_INFO
{
    DWORD dwSize;                                                
    int nStateListNum;                                           
    NET_STATE_LIST_INFO stuStateList[MAX_PARKINGLOCK_STATE_NUM]; 
} NET_OUT_GET_PARKINGLOCK_STATE_INFO;
typedef struct tagNET_IN_SET_PARKINGLOCK_STATE_INFO
{
    DWORD dwSize;                                                
    int nStateListNum;                                           
    NET_STATE_LIST_INFO stuStateList[MAX_PARKINGLOCK_STATE_NUM]; 
    int nControlType;                                            
} NET_IN_SET_PARKINGLOCK_STATE_INFO;
typedef struct tagNET_OUT_SET_PARKINGLOCK_STATE_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_PARKINGLOCK_STATE_INFO;
typedef struct tagNET_IN_SET_PARKINGRULE_INFO
{
    DWORD dwSize;               
    UINT nParkingTimeThreshold; 
} NET_IN_SET_PARKINGRULE_INFO;
typedef struct tagNET_OUT_SET_PARKINGRULE_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_PARKINGRULE_INFO;
typedef enum tagEM_PARKINGSPACE_STATE
{
    EM_PARKINGSPACE_STATE_UNKNOWN = -1, 
    EM_PARKINGSPACE_STATE_NOPARKING,    
    EM_PARKINGSPACE_STATE_PARKING       
} EM_PARKINGSPACE_STATE;
typedef struct tagNET_IN_SET_PARKINGSPACE_STATE_INFO
{
    DWORD dwSize;                  
    int nChannel;                  
    char szPlateNumber[64];        
    char szParkingNo[32];          
    EM_PARKINGSPACE_STATE emState; 
    BOOL bUnNeedPic;               
} NET_IN_SET_PARKINGSPACE_STATE_INFO;
typedef struct tagNET_OUT_SET_PARKINGSPACE_STATE_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_PARKINGSPACE_STATE_INFO;
typedef struct tagNET_IN_SET_PARKING_REMAIN_INFO
{
    DWORD dwSize;      
    UINT nRemainSpace; 
} NET_IN_SET_PARKING_REMAIN_INFO;
typedef struct tagNET_OUT_SET_PARKING_REMAIN_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_PARKING_REMAIN_INFO;
typedef struct tagNET_PARKINGRECORD_INFO
{
    int nChannel;           
    char szPlateNumber[64]; 
    char szParkingNo[32];   
    BYTE byReserverd[512];  
} NET_PARKINGRECORD_INFO;
typedef struct tagNET_IN_MODIFY_PARKINGRECORD_INFO
{
    DWORD dwSize;                  
    NET_PARKINGRECORD_INFO stuOld; 
    NET_PARKINGRECORD_INFO stuNew; 
} NET_IN_MODIFY_PARKINGRECORD_INFO;
typedef struct tagNET_OUT_MODIFY_PARKINGRECORD_INFO
{
    DWORD dwSize; 
} NET_OUT_MODIFY_PARKINGRECORD_INFO;
typedef void(CALLBACK* fMultiFileDownLoadPosCB)(LLONG lDownLoadHandle, DWORD dwID, DWORD dwFileTotalSize, DWORD dwDownLoadSize, int nError, LDWORD dwUser, void* pReserved);
typedef struct tagNET_DOWNLOADFILE_RESERVED_INFO
{
    DWORD dwSize;
    BYTE* pPieceBuff; 
    UINT nPieceLen;   
} NET_DOWNLOADFILE_RESERVED_INFO;
typedef enum tagEM_DOWNLOAD_FILE_TYPE
{
    EM_DOWNLOAD_BY_FILENAME = 0, 
    EM_DOWNLOAD_BY_CONDITION,    
} EM_DOWNLOAD_FILE_TYPE;
typedef enum tagEM_DOWNLOAD_TIME_TYPE
{
    EM_DOWNLOAD_TIME_SNAP = 0, 
    EM_DOWNLOAD_TIME_STORAGE,  
} EM_DOWNLOAD_TIME_TYPE;
typedef enum tagEM_DOWNLOAD_DATA_TYPE
{
    EM_DOWNLOAD_DATA_RECORD = 0, 
    EM_DOWNLOAD_DATA_PICTURE,    
} EM_DOWNLOAD_DATA_TYPE;
typedef struct tagNET_DOWNLOADFILE_INFO
{
    DWORD dwSize;
    DWORD dwFileID;                  
    int nFileSize;                   
    char szSourceFilePath[MAX_PATH]; 
    char szSavedFileName[MAX_PATH];  
} NET_DOWNLOADFILE_INFO;
typedef struct tagNET_DOWNLOAD_CONDITION_INFO
{
    DWORD dwSize;
    DWORD dwConditionID;              
    int nChannel;                     
    NET_TIME stuStartTime;            
    NET_TIME stuEndTime;              
    EM_DOWNLOAD_TIME_TYPE emTimeType; 
    EM_DOWNLOAD_DATA_TYPE emDataType; 
    char szSavedFileName[MAX_PATH];   
} NET_DOWNLOAD_CONDITION_INFO;
typedef struct tagNET_DOWNLOADFILE_OPTIONS_INFO
{
    int nChannel;         
    BYTE byReserved[508]; 
} NET_DOWNLOADFILE_OPTIONS_INFO;
typedef struct tagNET_IN_DOWNLOAD_MULTI_FILE
{
    DWORD dwSize;
    int nFileCount;                        
    NET_DOWNLOADFILE_INFO* pFileInfos;     
    fMultiFileDownLoadPosCB cbPosCallBack; 
    LDWORD dwUserData;                     
    EM_DOWNLOAD_FILE_TYPE emDownloadType;  
    int nConditionCount;                          
    NET_DOWNLOAD_CONDITION_INFO* pConditionInfos; 
    EM_SUBCLASSID_TYPE emSubClass;                
    NET_DOWNLOADFILE_OPTIONS_INFO* pFileOptions;  
} NET_IN_DOWNLOAD_MULTI_FILE;
typedef struct tagNET_OUT_DOWNLOAD_MULTI_FILE
{
    DWORD dwSize;
    LLONG lDownLoadHandle; 
} NET_OUT_DOWNLOAD_MULTI_FILE;
typedef struct __NET_VIDEOANALYSE_STATE
{
    DWORD dwSize;
    DWORD dwProgress;                       
    char szState[DH_COMMON_STRING_64];      
    char szFailedCode[DH_COMMON_STRING_64]; 
} NET_VIDEOANALYSE_STATE;
typedef int(CALLBACK* fVideoAnalyseState)(LLONG lAttachHandle, NET_VIDEOANALYSE_STATE* pAnalyseStateInfos, LDWORD dwUser, void* pReserved);
typedef struct __NET_IN_ATTACH_VIDEOANALYSE_STATE
{
    DWORD dwSize;
    int nChannleId;                         
    fVideoAnalyseState cbVideoAnalyseState; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_VIDEOANALYSE_STATE;
typedef struct __NET_OUT_ATTACH_VIDEOANALYSE_STATE
{
    DWORD dwSize;
    LLONG lAttachHandle; 
} NET_OUT_ATTACH_VIDEOANALYSE_STATE;
typedef enum tagEM_TRACK_OBJECT_TYPE
{
    EM_TRACK_OBJECT_TYPE_UNKNOWN = -1, 
    EM_TRACK_OBJECT_TYPE_FACE,         
    EM_TRACK_OBJECT_TYPE_HUMAN,        
    EM_TRACK_OBJECT_TYPE_VECHILE,      
    EM_TRACK_OBJECT_TYPE_NOMOTOR,      
} EM_TRACK_OBJECT_TYPE;
typedef struct tagNET_VIDEO_TRACK_OBJECT_INFO
{
    char szObjectUUID[128];                
    EM_TRACK_OBJECT_TYPE emObjectType[32]; 
    int nObjectTypeNum;                    
    NET_RECT stuBoundingBox;               
} NET_VIDEO_TRACK_OBJECT_INFO;
typedef struct tagNET_VIDEO_ANALYSE_TRACK_PROC
{
    DWORD dwSize;                                    
    int nChannelId;                                  
    NET_VIDEO_TRACK_OBJECT_INFO stuTrackObject[128]; 
    int nTrackObjectNum;                             
    char szReserved[256];                            
} NET_VIDEO_ANALYSE_TRACK_PROC;
typedef void(CALLBACK* fVideoAnalyseTrackProc)(LLONG lAttachHandle, NET_VIDEO_ANALYSE_TRACK_PROC* pstuVideoAnalyseTrackProc, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VIDEO_ANALYSE_TRACK_PROC
{
    DWORD dwSize;                                   
    int nChannelId;                                 
    fVideoAnalyseTrackProc cbVideoAnalyseTrackProc; 
    LDWORD dwUser;                                  
} NET_IN_ATTACH_VIDEO_ANALYSE_TRACK_PROC;
typedef struct tagNET_OUT_ATTACH_VIDEO_ANALYSE_TRACK_PROC
{
    DWORD dwSize; 
} NET_OUT_ATTACH_VIDEO_ANALYSE_TRACK_PROC;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVideoAnalyseTrackProc(LLONG lLoginID, NET_IN_ATTACH_VIDEO_ANALYSE_TRACK_PROC* pstInParam, NET_OUT_ATTACH_VIDEO_ANALYSE_TRACK_PROC* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVideoAnalyseTrackProc(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_WATER_LEVELINFO_BY_EVENT
{
    DWORD dwSize;  
    UINT nChannel; 
    int nPresetId; 
} NET_IN_GET_WATER_LEVELINFO_BY_EVENT;
typedef struct tagNET_OUT_GET_WATER_LEVELINFO_BY_EVENT
{
    DWORD dwSize; 
} NET_OUT_GET_WATER_LEVELINFO_BY_EVENT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetWaterLevelInfobyEvent(LLONG lLoginID, NET_IN_GET_WATER_LEVELINFO_BY_EVENT* pstInParam, NET_OUT_GET_WATER_LEVELINFO_BY_EVENT* pstOutParam, int nWaitTime);
typedef enum tagEM_TALK_STATE
{
    EM_TALK_STATE_UNKNOWN,  
    EM_TALK_STATE_INVITING, 
    EM_TALK_STATE_RINGING,  
    EM_TALK_STATE_ANSWER,   
    EM_TALK_STATE_REFUSE,   
    EM_TALK_STATE_HANGUP,   
    EM_TALK_STATE_BUSYING,  
    EM_TALK_STATE_CANCEL,   
} EM_TALK_STATE;
#define NET_CALL_NUM_MAX 128 
typedef struct tagNET_TALK_STATE
{
    DWORD dwSize;
    char szCallID[DH_COMMON_STRING_64];                    
    int nAudioPort;                                        
    int nVideoPort;                                        
    char szMediaAddr[DH_MAX_IPADDR_LEN];                   
    EM_TALK_STATE emState;                                 
    int nNumberCount;                                      
    char szNumbers[NET_CALL_NUM_MAX][DH_COMMON_STRING_32]; 
} NET_TALK_STATE;
typedef void(CALLBACK* fNotifyTalkState)(LLONG lAttachHandle, NET_TALK_STATE* pstuState, int nLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_TALK_STATE
{
    DWORD dwSize;                
    int nChnId;                  
    fNotifyTalkState cbCallBack; 
    LDWORD dwUser;               
} NET_IN_ATTACH_TALK_STATE;
typedef struct tagNET_OUT_ATTACH_TALK_STATE
{
    DWORD dwSize;                       
    char szCallID[DH_COMMON_STRING_64]; 
} NET_OUT_ATTACH_TALK_STATE;
#define NET_DIAGNOSIS_DITHER "VideoDitherDetection"                         
#define NET_DIAGNOSIS_STRIATION "VideoStriationDetection"                   
#define NET_DIAGNOSIS_LOSS "VideoLossDetection"                             
#define NET_DIAGNOSIS_COVER "VideoCoverDetection"                           
#define NET_DIAGNOSIS_FROZEN "VideoFrozenDetection"                         
#define NET_DIAGNOSIS_BRIGHTNESS "VideoBrightnessDetection"                 
#define NET_DIAGNOSIS_CONTRAST "VideoContrastDetection"                     
#define NET_DIAGNOSIS_UNBALANCE "VideoUnbalanceDetection"                   
#define NET_DIAGNOSIS_NOISE "VideoNoiseDetection"                           
#define NET_DIAGNOSIS_BLUR "VideoBlurDetection"                             
#define NET_DIAGNOSIS_SCENECHANGE "VideoSceneChangeDetection"               
#define NET_DIAGNOSIS_VIDEO_DELAY "VideoDelay"                              
#define NET_DIAGNOSIS_PTZ_MOVING "PTZMoving"                                
#define NET_DIAGNOSIS_BLACK_WHITE "VideoBlackAndWhite"                      
#define NET_DIAGNOSIS_DRAMATIC_CHANGE "VideoDramaticChange"                 
#define NET_DIAGNOSIS_VIDEO_AVAILABILITY "VideoAvailability"                
#define NET_DIAGNOSIS_SNOWFLAKE "SnowflakeDetection"                        
#define NET_DIAGNOSIS_VIDEO_ALGORITHMTYPE "VideoAlgorithmType"              
#define NET_DIAGNOSIS_VIDEO_FILCKERING_DETECTION "VideoFilckeringDetection" 
#define NET_DIAGNOSIS_VIDEO_LOSS_FRAME_DETECTION "VideoLossFrameDetection"  
typedef enum tagNET_STATE_TYPE
{
    NET_EM_STATE_ERR,      
    NET_EM_STATE_NORMAL,   
    NET_EM_STATE_WARNING,  
    NET_EM_STATE_ABNORMAL, 
} NET_STATE_TYPE;
typedef enum tagNET_VIDEODIAGNOSIS_RESULT_TYPE
{
    NET_EM_ROTATION,  
    NET_EM_REAL,      
    NET_EM_NR_UNKNOW, 
} NET_VIDEODIAGNOSIS_RESULT_TYPE;
typedef enum tagNET_VIDEODIAGNOSIS_FAIL_TYPE
{
    NET_EM_NO_ERROR,              
    NET_EM_DISCONNECT,            
    NET_EM_CH_NOT_EXIST,          
    NET_EM_LOGIN_OVER_TIME,       
    NET_EM_NO_VIDEO,              
    NET_EM_NO_RIGHT,              
    NET_EM_PLATFROM_LOGIN_FAILED, 
    NET_EM_PLATFROM_DISCONNECT,   
    NET_EM_GET_STREAM_OVER_TIME,  
    NET_EM_GET_NO_ENOUGH_STREAM,  
    NET_EM_DECODE_STREAM_FAILED,  
    NET_EM_GET_OFF_LINE,          
    NET_EM_NF_UNKNOW,             
    NET_EM_NOT_SD,                
    NET_EM_RTSP_PROCESS_FAILED, 
    NET_EM_PLAY_FAILED,         
    NET_EM_SNAP_FAILED,         
    NET_EM_FULL_CHANNEL_LINKS,  
    NET_EM_LICENSE_ERROR,       
    NET_EM_AUTHORIZATION_ERROR, 
} NET_VIDEODIAGNOSIS_FAIL_TYPE;
typedef struct tagNET_ARRAY
{
    DWORD dwSize;     
    char* pArray;     
    DWORD dwArrayLen; 
} NET_ARRAY;
#define MAX_BACKPIC_COUNT 8 
typedef struct tagNET_VIDEODIAGNOSIS_COMMON_INFO
{
    DWORD dwSize;                                                   
    int nDiagnosisID;                                               
    NET_ARRAY stProject;                                            
    NET_ARRAY stTask;                                               
    NET_ARRAY stProfile;                                            
    NET_ARRAY stDeviceID;                                           
    NET_TIME stStartTime;                                           
    NET_TIME stEndTime;                                             
    int nVideoChannelID;                                            
    NET_STREAM_TYPE emVideoStream;                                  
    NET_VIDEODIAGNOSIS_RESULT_TYPE emResultType;                    
    BOOL bCollectivityState;                                        
    NET_VIDEODIAGNOSIS_FAIL_TYPE emFailedCause;                     
    char szFailedCode[DH_COMMON_STRING_64];                         
    char szResultAddress[DH_COMMON_STRING_128];                     
    int nFrameRate;                                                 
    int nFrameWidth;                                                
    int nFrameHeight;                                               
    int nBackPic;                                                   
    char szBackPicAddress[MAX_BACKPIC_COUNT][DH_COMMON_STRING_128]; 
    char szResultAddressEx[DH_COMMON_STRING_256];                   
    NET_TIME stStreamStartTime;                                     
    NET_TIME stStreamEndTime;                                       
} NET_VIDEODIAGNOSIS_COMMON_INFO;
typedef struct tagNET_VIDEO_DITHER_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_DITHER_DETECTIONRESULT;
typedef struct tagNET_VIDEO_STRIATION_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_STRIATION_DETECTIONRESULT;
typedef struct tagNET_VIDEO_LOSS_DETECTIONRESULT
{
    DWORD dwSize;           
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_LOSS_DETECTIONRESULT;
typedef struct tagNET_VIDEO_COVER_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_COVER_DETECTIONRESULT;
typedef struct tagNET_VIDEO_FROZEN_DETECTIONRESULT
{
    DWORD dwSize;           
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_FROZEN_DETECTIONRESULT;
typedef struct tagNET_VIDEO_BRIGHTNESS_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_BRIGHTNESS_DETECTIONRESULT;
typedef struct tagNET_VIDEO_CONTRAST_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_CONTRAST_DETECTIONRESULT;
typedef struct tagNET_VIDEO_UNBALANCE_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_UNBALANCE_DETECTIONRESULT;
typedef struct tagNET_VIDEO_NOISE_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_NOISE_DETECTIONRESULT;
typedef struct tagNET_VIDEO_BLUR_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_BLUR_DETECTIONRESULT;
typedef struct tagNET_VIDEO_SCENECHANGE_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_SCENECHANGE_DETECTIONRESULT;
typedef enum tagEM_PTZ_MOVING_RESULT_TYPE
{
    EM_PTZ_MOVING_UNKNOWN,   
    EM_PTZ_MOVING_NORMAL,    
    EM_PTZ_MOVING_NOTOBEY,   
    EM_PTZ_MOVING_NOTMOVE,   
    EM_PTZ_MOVING_NOTDETECT, 
} EM_PTZ_MOVING_RESULT_TYPE;
typedef struct tagNET_PTZ_MOVING_DETECTIONRESULT
{
    DWORD dwSize;                                  
    EM_PTZ_MOVING_RESULT_TYPE emPTZMovingUp;       
    EM_PTZ_MOVING_RESULT_TYPE emPTZMovingDown;     
    EM_PTZ_MOVING_RESULT_TYPE emPTZMovingLeft;     
    EM_PTZ_MOVING_RESULT_TYPE emPTZMovingRight;    
    EM_PTZ_MOVING_RESULT_TYPE emPTZMovingZoomWide; 
    EM_PTZ_MOVING_RESULT_TYPE emPTZMovingZoomTele; 
} NET_PTZ_MOVING_DETECTIONRESULT;
typedef struct tagNET_BLACK_WHITE_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_BLACK_WHITE_DETECTIONRESULT;
typedef struct tagNET_DIAGNOSIS_DRAMATIC_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_DIAGNOSIS_DRAMATIC_DETECTIONRESULT;
typedef struct tagNET_VIDEO_DELAY_DETECTIONRESUL
{
    DWORD dwSize;     
    int nSignalDelay; 
    int nStreamDelay; 
    int nIFrameDelay; 
} NET_VIDEO_DELAY_DETECTIONRESUL;
typedef struct tagNET_DIAGNOSIS_RESULT_HEADER
{
    DWORD dwSize; 
    char szDiagnosisType[MAX_PATH]; 
    int nDiagnosisTypeLen;          
} NET_DIAGNOSIS_RESULT_HEADER;
typedef struct tagNET_REAL_DIAGNOSIS_RESULT
{
    DWORD dwSize;                                           
    NET_VIDEODIAGNOSIS_COMMON_INFO* pstDiagnosisCommonInfo; 
    int nTypeCount;                                         
    void* pDiagnosisResult;                                 
    DWORD dwBufSize;                                        
} NET_REAL_DIAGNOSIS_RESULT;
typedef int(CALLBACK* fRealVideoDiagnosis)(LLONG lDiagnosisHandle, NET_REAL_DIAGNOSIS_RESULT* pDiagnosisInfo, void* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_VIDEODIAGNOSIS
{
    DWORD dwSize;                         
    int nDiagnosisID;                     
    DWORD dwWaitTime;                     
    fRealVideoDiagnosis cbVideoDiagnosis; 
    LDWORD dwUser;                        
} NET_IN_VIDEODIAGNOSIS;
typedef struct tagNET_OUT_ATTACH_REALDIAGNOSIS
{
    DWORD dwSize;           
    LLONG lDiagnosisHandle; 
} NET_OUT_VIDEODIAGNOSIS;
typedef enum tagEM_COLLECTIVITY_STATE
{
    EM_COLLECTIVITY_STATE_SUCCESSED, 
    EM_COLLECTIVITY_STATE_FAILED,    
} EM_COLLECTIVITY_STATE;
typedef struct tagNET_IN_FIND_DIAGNOSIS
{
    DWORD dwSize;                                 
    int nDiagnosisID;                             
    DWORD dwWaitTime;                             
    NET_ARRAY stuDeviceID;                        
    NET_TIME stuStartTime;                        
    NET_TIME stuEndTime;                          
    int nVideoChannel;                            
    int nTypeCount;                               
    NET_ARRAY* pstDiagnosisTypes;                 
    char szProjectName[MAX_PATH];                 
    int nCollectivityStateNum;                    
    EM_COLLECTIVITY_STATE emCollectivityState[2]; 
} NET_IN_FIND_DIAGNOSIS;
typedef struct tagNET_OUT_FIND_DIAGNOSIS
{
    DWORD dwSize;       
    LLONG lFindHandle;  
    DWORD dwTotalCount; 
} NET_OUT_FIND_DIAGNOSIS;
typedef struct tagNET_IN_DIAGNOSIS_INFO
{
    DWORD dwSize;     
    int nDiagnosisID; 
    DWORD dwWaitTime; 
    int nFindCount;   
    int nBeginNumber; 
} NET_IN_DIAGNOSIS_INFO;
typedef struct tagNET_IN_START_RT_PROJECT_INFO
{
    DWORD dwSize;         
    char* pszProjectInfo; 
} NET_IN_START_RT_PROJECT_INFO;
typedef struct tagNET_OUT_START_RT_PROJECT_INFO
{
    DWORD dwSize; 
} NET_OUT_START_RT_PROJECT_INFO;
typedef struct tagNET_IN_UPDATE_PROJECT_BCKGROUND_INFO
{
    DWORD dwSize;                 
    char szProjectName[MAX_PATH]; 
    char szTaskName[MAX_PATH];    
    char szDeviceID[MAX_PATH];    
    int nChannelID;               
} NET_IN_UPDATE_PROJECT_BACKGROUND_INFO;
typedef struct tagNET_OUT_UPDATE_PROJECT_BACKGROUND_INFO
{
    DWORD dwSize; 
} NET_OUT_UPDATE_PROJECT_BACKGROUND_INFO;
typedef struct tagNET_IN_STOP_RT_PROJECT_INFO
{
    DWORD dwSize;          
    char* pszProjectNames; 
} NET_IN_STOP_RT_PROJECT_INFO;
typedef struct tagNET_OUT_STOP_RT_PROJECT_INFO
{
    DWORD dwSize; 
} NET_OUT_STOP_RT_PROJECT_INFO;
#define MAX_VIDEODIAGNOSIS_PROJECT_NAME_LEN 260 
#define MAX_VIDEODIAGNOSIS_TASK_NAME_LEN 260    
typedef struct tagNET_IN_START_MANUAL_PROJECT_INFO
{
    DWORD dwSize;                                            
    char szProjectName[MAX_VIDEODIAGNOSIS_PROJECT_NAME_LEN]; 
    NET_TIME stuStartTime;                                   
    BOOL bIsCycle;                                           
    char szTaskName[MAX_VIDEODIAGNOSIS_TASK_NAME_LEN];       
} NET_IN_START_MANUAL_PROJECT_INFO;
typedef struct tagNET_OUT_START_MANUAL_PROJECT_INFO
{
    DWORD dwSize; 
} NET_OUT_START_MANUAL_PROJECT_INFO;
typedef struct tagNET_IN_STOP_MANUAL_PROJECT_INFO
{
    DWORD dwSize;                                            
    char szProjectName[MAX_VIDEODIAGNOSIS_PROJECT_NAME_LEN]; 
} NET_IN_STOP_MANUAL_PROJECT_INFO;
typedef struct tagNET_OUT_STOP_MANUAL_PROJECT_INFO
{
    DWORD dwSize; 
} NET_OUT_STOP_MANUAL_PROJECT_INFO;
typedef struct tagNET_CARPORTLIGHT_INFO
{
    DWORD dwSize;
    NET_CARPORTLIGHT_TYPE emType; 
    NET_CARPORTLIGHT_MODE emMode; 
} NET_CARPORTLIGHT_INFO;
typedef struct tagNET_CARPORTLIGHT_STATUS
{
    DWORD dwSize;                                             
    int nLightNum;                                            
    NET_CARPORTLIGHT_INFO stuLights[DH_MAX_CARPORTLIGHT_NUM]; 
    int nFiringTime;                                          
    int nHoldTime;                                            
} NET_CARPORTLIGHT_STATUS;
typedef struct tagNET_IN_GET_CARPORTLIGHT_STATUS
{
    DWORD dwSize;   
    int nChannelId; 
} NET_IN_GET_CARPORTLIGHT_STATUS;
typedef struct tagNET_OUT_GET_CARPORTLIGHT_STATUS
{
    DWORD dwSize;                           
    NET_CARPORTLIGHT_STATUS stuLightStatus; 
} NET_OUT_GET_CARPORTLIGHT_STATUS;
typedef struct tagNET_IN_SET_CARPORTLIGHT_STATUS
{
    DWORD dwSize; 
    int nChannelId;
    NET_CARPORTLIGHT_STATUS stuLightStatus; 
} NET_IN_SET_CARPORTLIGHT_STATUS;
typedef struct tagNET_OUT_SET_CARPORTLIGHT_STATUS
{
    DWORD dwSize; 
} NET_OUT_SET_CARPORTLIGHT_STATUS;
typedef struct tagNET_VIDEO_AVAILABILITY_DETECTIONRESULT
{
    DWORD dwSize;     
    int nSignalDelay; 
    int nStreamDelay; 
    int nIFrameDelay; 
} NET_VIDEO_AVAILABILITY_DETECTIONRESULT;
typedef struct tagNET_VIDEO_SNOWFLAKE_DETECTIONRESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_SNOWFLAKE_DETECTIONRESULT;
typedef struct tagNET_VIDEO_ALGORITHMTYPE_DETECTIONRESULT
{
    DWORD dwSize;                 
    BOOL bFaceAlgorithm;          
    int nFaceAlgorithmValue;      
    BOOL bHumanBodyAlgorithm;     
    int nHumanBodyAlgorithmValue; 
    BOOL bVehicleAlgorithm;       
    int nVehicleAlgorithmValue;   
    BOOL bPlateNumAlgorithm;      
    int nPlateNumAlgorithmValue;  
} NET_VIDEO_ALGORITHMTYPE_DETECTIONRESULT;
typedef struct tagNET_VIDEO_FILCKERING_DETECTION_RESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_FILCKERING_DETECTION_RESULT;
typedef struct tagNET_VIDEO_LOSS_FRAME_DETECTION_RESULT
{
    DWORD dwSize;           
    int nValue;             
    NET_STATE_TYPE emState; 
    int nDuration;          
    char szPicUrl[256];     
} NET_VIDEO_LOSS_FRAME_DETECTION_RESULT;
typedef struct tagNET_DEV_VIDEODIAGNOSIS_MULTI_INFO
{
    DWORD dwSize; 
    NET_VIDEODIAGNOSIS_COMMON_INFO* pstDiagnosisCommonInfo; 
    BOOL abDither;                                          
    NET_VIDEO_DITHER_DETECTIONRESULT* pstDither;            
    BOOL abStration;
    NET_VIDEO_STRIATION_DETECTIONRESULT* pstStration; 
    BOOL abLoss;
    NET_VIDEO_LOSS_DETECTIONRESULT* pstLoss; 
    BOOL abCover;
    NET_VIDEO_COVER_DETECTIONRESULT* pstCover; 
    BOOL abFrozen;
    NET_VIDEO_FROZEN_DETECTIONRESULT* pstFrozen; 
    BOOL abBrightness;
    NET_VIDEO_BRIGHTNESS_DETECTIONRESULT* pstBrightness; 
    BOOL abContrast;
    NET_VIDEO_CONTRAST_DETECTIONRESULT* pstContrast; 
    BOOL abUnbalance;
    NET_VIDEO_UNBALANCE_DETECTIONRESULT* pstUnbalance; 
    BOOL abNoise;
    NET_VIDEO_NOISE_DETECTIONRESULT* pstNoise; 
    BOOL abBlur;
    NET_VIDEO_BLUR_DETECTIONRESULT* pstBlur; 
    BOOL abSceneChange;
    NET_VIDEO_SCENECHANGE_DETECTIONRESULT* pstSceneChange; 
    BOOL abVideoDelay;
    NET_VIDEO_DELAY_DETECTIONRESUL* pstVideoDelay; 
    BOOL abPTZMoving;
    NET_PTZ_MOVING_DETECTIONRESULT* pstPTZMoving; 
    BOOL abBlackAndWhite;
    NET_BLACK_WHITE_DETECTIONRESULT* pstBlackAndWhite; 
    BOOL abDramaticChange;
    NET_DIAGNOSIS_DRAMATIC_DETECTIONRESULT* pstDramaticChange; 
    BOOL abVideoAvailability;                                     
    NET_VIDEO_AVAILABILITY_DETECTIONRESULT* pstVideoAvailability; 
    BOOL abSnowflake;                                  
    NET_VIDEO_SNOWFLAKE_DETECTIONRESULT* pstSnowflake; 
    BOOL abAlgorithmType;                                      
    NET_VIDEO_ALGORITHMTYPE_DETECTIONRESULT* pstAlgorithmType; 
    BOOL abVideoFilckering;                                    
    NET_VIDEO_FILCKERING_DETECTION_RESULT* pstVideoFilckering; 
    BOOL abVideoLossFrame;                                    
    NET_VIDEO_LOSS_FRAME_DETECTION_RESULT* pstVideoLossFrame; 
} NET_VIDEODIAGNOSIS_RESULT_INFO;
typedef struct tagNET_OUT_DIAGNOSIS_INFO
{
    DWORD dwSize; 
    int nInputNum;                                      
    int nReturnNum;                                     
    NET_VIDEODIAGNOSIS_RESULT_INFO* pstDiagnosisResult; 
} NET_OUT_DIAGNOSIS_INFO;
#define MASTERSLAVE_CMD_START "masterSlaveTracker.start"                           
#define MASTERSLAVE_CMD_STOP "masterSlaveTracker.stop"                             
#define MASTERSLAVE_CMD_MANUALTRACK "masterSlaveTracker.manualSelectObjectTrack"   
#define MASTERSLAVE_CMD_POINTTRACK "masterSlaveTracker.selectPointTrack"           
#define MASTERSLAVE_CMD_GETCALIBPOINTS "masterSlaveTracker.getCalibratePoints"     
#define MASTERSLAVE_CMD_CALIBRATE "masterSlaveTracker.calibrate"                   
#define MASTERSLAVE_CMD_ADDCALIBPOINT "masterSlaveTracker.addCalibratePoint"       
#define MASTERSLAVE_CMD_REMOVECALIBPOINT "masterSlaveTracker.removeCalibratePoint" 
#define MASTERSLAVE_CMD_MARKMAXZOOM "masterSlaveTracker.markSceneMaxZoom"          
typedef struct __NET_MS_PAIRPOINTS
{
    int nStructSize;
    DH_POINT stMasterPoint; 
    DH_POINT stSlavePoint;  
} NET_MS_PAIRPOINTS;
typedef struct __NET_IN_MS_START
{
    int nStructSize;
} NET_IN_MS_START;
typedef struct __NET_OUT_MS_START
{
    int nStructSize;
} NET_OUT_MS_START;
typedef struct __NET_IN_MS_STOP
{
    int nStructSize;
} NET_IN_MS_STOP;
typedef struct __NET_OUT_MS_STOP
{
    int nStructSize;
} NET_OUT_MS_STOP;
typedef struct __NET_IN_MS_MANUALTRACK
{
    int nStructSize;
    DWORD dwObject; 
} NET_IN_MS_MANUALTRACK;
typedef struct __NET_OUT_MS_MANUALTRACK
{
    int nStructSize;
} NET_OUT_MS_MANUALTRACK;
typedef struct __NET_IN_MS_POINTTRACK
{
    int nStructSize;
    DH_POINT stTrackerPoint; 
} NET_IN_MS_POINTTRACK;
typedef struct __NET_OUT_MS_POINTTRACK
{
    int nStructSize;
} NET_OUT_MS_POINTTRACK;
typedef struct __NET_IN_MS_GETCALIBPOINTS
{
    int nStructSize;
} NET_IN_MS_GETCALIBPOINTS;
typedef struct __NET_OUT_MS_GETCALIBPOINTS
{
    int nStructSize;
    int nPointsNum;                                      
    NET_MS_PAIRPOINTS stPairPoints[MAX_CALIBPOINTS_NUM]; 
} NET_OUT_MS_GETCALIBPOINTS;
typedef struct __NET_IN_MS_CALIBRATE
{
    int nStructSize;
} NET_IN_MS_CALIBRATE;
typedef struct __NET_OUT_MS_CALIBRATE
{
    int nStructSize;
} NET_OUT_MS_CALIBRATE;
typedef struct __NET_IN_MS_ADDCALIBPOINT
{
    int nStructSize;
    BOOL bSlavePointEn;             
    NET_MS_PAIRPOINTS stPairPoints; 
} NET_IN_MS_ADDCALIBPOINT;
typedef struct __NET_OUT_MS_ADDCALIBPOINT
{
    int nStructSize;
    DH_POINT stPoint; 
} NET_OUT_MS_ADDCALIBPOINT;
typedef struct __NET_IN_MS_REMOVECALIBPOINT
{
    int nStructSize;
    DH_POINT stPoint; 
} NET_IN_MS_REMOVECALIBPOINT;
typedef struct __NET_OUT_MS_REMOVECALIBPOINT
{
    int nStructSize;
} NET_OUT_MS_REMOVECALIBPOINT;
typedef struct __NET_IN_MS_MARKMAXZOOM
{
    int nStructSize;
} NET_IN_MS_MARKMAXZOOM;
typedef struct __NET_OUT_MS_MARKMAXZOOM
{
    int nStructSize;
} NET_OUT_MS_MARKMAXZOOM;
#define COMMDEV_GET_EXTERNLDATA "devComm.getExternalData" 
#define MAX_EXTERN_DATA_LEN 2048
typedef struct __COMMDEV_IN_GET_EXTERNDATA
{
    DWORD dwSize;
} COMMDEV_IN_GET_EXTERNDATA;
typedef struct __COMMDEV_OUT_GET_EXTERNDATA
{
    DWORD dwSize;
    char szGetData[MAX_EXTERN_DATA_LEN]; 
} COMMDEV_OUT_GET_EXTERNDATA;
#define NET_SET_MODULESTATE "devVideoAnalyse.setModuleState"                       
#define NET_TEST_WITH_SCREENPOINTS "devVideoAnalyse.testCalibrateWithScreenPoints" 
#define NET_TEST_WITH_METRICLENGTH "devVideoAnalyse.testCalibrateWithMetricLength" 
#define NET_GET_INTERNALOPTIONS "devVideoAnalyse.getInternalOptions"               
#define NET_TUNE_INTERNALOPTIONS "devVideoAnalyse.tuneInternalOptions"             
#define NET_RESET_INTERNALOPTIONS "devVideoAnalyse.resetInternalOptions"           
#define NET_SET_PTZ_PRESET_STATUS "devVideoAnalyse.setPtzPresetStatus"             
typedef enum tagNET_EM_LINETYPE
{
    NET_EM_HORIZONTAL,
    NET_EM_VERTICAL,
} NET_EM_LINETYPE;
typedef enum tagEM_DH_PTZ_PRESET_STATUS
{
    EM_DH_PTZ_PRESET_STATUS_UNKNOWN, 
    EM_DH_PTZ_PRESET_STATUS_REACH,   
    EM_DH_PTZ_PRESET_STATUS_UNREACH, 
} EM_DH_PTZ_PRESET_STATUS;
typedef enum tagEM_DH_PTZ_PAN_TILT_STATUS
{
    EM_DH_PTZ_PAN_TILT_STATUS_UNKNOWN, 
    EM_DH_PTZ_PAN_TILT_STATUS_IDLE,    
    EM_DH_PTZ_PAN_TILT_STATUS_MOVING,  
} EM_DH_PTZ_PAN_TILT_STATUS;
typedef struct
{
    int nChannelID;                            
    int nPTZPan;                               
    int nPTZTilt;                              
    int nPTZZoom;                              
    BYTE bState;                               
    BYTE bAction;                              
    BYTE bFocusState;                          
    BYTE bEffectiveInTimeSection;              
    int nPtzActionID;                          
    DWORD dwPresetID;                          
    float fFocusPosition;                      
    BYTE bZoomState;                           
    BYTE bReserved[3];                         
    DWORD dwSequence;                          
    DWORD dwUTC;                               
    EM_DH_PTZ_PRESET_STATUS emPresetStatus;    
    int nZoomValue;                            
    NET_PTZSPACE_UNNORMALIZED stuAbsPosition;  
    int nFocusMapValue;                        
    int nZoomMapValue;                         
    EM_DH_PTZ_PAN_TILT_STATUS emPanTiltStatus; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;      
    char reserved[696];                        
} DH_PTZ_LOCATION_INFO;
typedef struct __NET_IN_PTZ_PRESET_STATUS
{
    DWORD dwSize;
    DH_PTZ_LOCATION_INFO stPTZStatus;
} NET_IN_PTZ_PRESET_STATUS;
typedef struct __NET_OUT_PTZ_PRESET_STATUS
{
    DWORD dwSize;
} NET_OUT_PTZ_PRESET_STATUS;
typedef struct __NET_IN_CALIBRATE_BY_POINTS
{
    DWORD dwSize; 
    DH_POINT stStartPoint;  
    DH_POINT stEndPoint;    
    NET_EM_LINETYPE emType; 
} NET_IN_CALIBRATE_BY_POINTS;
typedef struct __NET_OUT_CALIBRATE_BY_POINTS
{
    DWORD dwSize; 
    double dlength; 
} NET_OUT_CALIBRATE_BY_POINTS;
typedef struct __NET_IN_CALIBRATE_BY_LENGTH
{
    DWORD dwSize; 
    double nLength;         
    DH_POINT stStartPoint;  
    DH_POINT stDirection;   
    NET_EM_LINETYPE emType; 
} NET_IN_CALIBRATE_BY_LENGTH;
typedef struct __NET_OUT_CALIBRATE_BY_LENGTH
{
    DWORD dwSize; 
    DH_POINT stEndPoint; 
} NET_OUT_CALIBRATE_BY_LENGTH;
typedef struct __NET_INTERNAL_OPTION
{
    DWORD dwSize; 
    int nIndex;      
    NET_ARRAY stKey; 
    int nValue;      
    int nMinValue;   
    int nMaxValue;   
} NET_INTERNAL_OPTION;
typedef struct __NET_IN_GETINTERNAL_OPTIONS
{
    DWORD dwSize; 
} NET_IN_GETINTERNAL_OPTIONS;
typedef struct __NET_OUT_GETINTERNAL_OPTIONS
{
    DWORD dwSize; 
    int nTotalOptionNum;                    
    int nReturnOptionNum;                   
    NET_INTERNAL_OPTION* pstInternalOption; 
} NET_OUT_GETINTERNAL_OPTIONS;
typedef struct __NET_IN_TUNEINTERNAL_OPTION
{
    DWORD dwSize;                           
    int nOptionCount;                       
    NET_INTERNAL_OPTION* pstInternalOption; 
} NET_IN_TUNEINTERNAL_OPTION;
typedef struct __NET_OUT_TUNEINTERNAL_OPTION
{
    DWORD dwSize; 
} NET_OUT_TUNEINTERNAL_OPTION;
typedef struct __NET_IN_RESETINTERNAL_OPTION
{
    DWORD dwSize; 
} NET_IN_RESETINTERNAL_OPTION;
typedef struct __NET_OUT_RESETINTERNAL_OPTION
{
    DWORD dwSize; 
} NET_OUT_RESETINTERNAL_OPTION;
typedef enum tagNET_EM_MODULESTATE
{
    NET_EM_MODULESTATE_OK,
    NET_EM_MODULESTATE_PAUSE,
} NET_EM_MODULESTATE;
typedef struct __NET_IN_SETMODULESTATE
{
    DWORD dwSize;               
    NET_EM_MODULESTATE emState; 
    int nIndex;                 
} NET_IN_SETMODULESTATE;
typedef struct __NET_OUT_SETMODULESTATE
{
    DWORD dwSize; 
} NET_OUT_SETMODULESTATE;
typedef enum tagNET_EM_CONFIGOPTION
{
    NET_EM_CONFIGOPTION_OK,
    NET_EM_CONFIGOPTION_NEEDRESTART,
    NET_EM_CONFIGOPTION_NEEDREBOOT = 2,
    NET_EM_CONFIGOPTION_WRITEFILEERROR = 4,
    NET_EM_CONFIGOPTION_CAPSNOTSUPPORT = 8,
    NET_EM_CONFIGOPTION_VALIDATEFAILED = 16,
} NET_EM_CONFIGOPTION;
typedef struct tagNET_IN_DELETECFG
{
    DWORD dwSize;    
    char* szCommand; 
} NET_IN_DELETECFG;
typedef struct tagNET_OUT_DELETECFG
{
    DWORD dwSize;       
    int nError;         
    int nRestart;       
    DWORD dwOptionMask; 
} NET_OUT_DELETECFG;
typedef struct tagNET_IN_MEMBERNAME
{
    DWORD dwSize;    
    char* szCommand; 
} NET_IN_MEMBERNAME;
typedef struct tagNET_OUT_MEMBERNAME
{
    DWORD dwSize;        
    int nError;          
    int nRestart;        
    int nTotalNameCount; 
    int nRetNameCount;   
    NET_ARRAY* pstNames; 
} NET_OUT_MEMBERNAME;
typedef enum tagNET_EM_STAFF_TYPE
{
    NET_EM_STAFF_TYPE_ERR,
    NET_EM_STAFF_TYPE_HORIZONTAL, 
    NET_EM_STAFF_TYPE_VERTICAL,   
    NET_EM_STAFF_TYPE_ANY,        
    NET_EM_STAFF_TYPE_CROSS,      
} NET_EM_STAFF_TYPE;
typedef enum tagNET_EM_CALIBRATEAREA_TYPE
{
    NET_EM_CALIBRATEAREA_TYPE_ERR,
    NET_EM_CALIBRATEAREA_TYPE_GROUD,      
    NET_EM_CALIBRATEAREA_TYPE_HORIZONTAL, 
    NET_EM_CALIBRATEAREA_TYPE_VERTICAL,   
    NET_EM_CALIBRATEAREA_TYPE_ANY,        
} NET_EM_CALIBRATEAREA_TYPE;
typedef enum tagNET_EM_OUTPUT_SUB_TYPE
{
    NET_EM_OUTPUT_SUB_TYPE_ERR,
    NET_EM_OUTPUT_SUB_TYPE_NORMAL,   
    NET_EM_OUTPUT_SUB_TYPE_SYNOPSIS, 
} NET_EM_OUTPUT_SUB_TYPE;
typedef struct tagNET_STAFF_INFO
{
    DH_POINT stuStartLocation; 
    DH_POINT stuEndLocation;   
    float nLenth;              
    NET_EM_STAFF_TYPE emType;  
} NET_STAFF_INFO;
typedef struct tagNET_CALIBRATEAREA_INFO
{
    int nLinePoint;                             
    DH_POINT stuLine[DH_MAX_POLYLINE_NUM];      
    float fLenth;                               
    DH_POLY_POINTS stuArea;                     
    int nStaffNum;                              
    NET_STAFF_INFO stuStaffs[DH_MAX_STAFF_NUM]; 
    NET_EM_CALIBRATEAREA_TYPE emType;           
} NET_CALIBRATEAREA_INFO;
typedef struct tagNET_LOCALFILE_INFO
{
    DWORD dwSize;
    char szFilePath[MAX_PATH]; 
    NET_TIME stuStartTime;     
    NET_TIME stuEndTime;       
    UINT nFileLength;          
} NET_LOCALFILE_INFO;
typedef struct tagNET_REMOTEFILE_INFO
{
    DWORD dwSize;
    char szIP[MAX_PATH];              
    unsigned int nPort;               
    char szName[DH_MAX_NAME_LEN];     
    char szPassword[DH_MAX_NAME_LEN]; 
    BYTE byProtocolType;              
    BYTE byReserved[3];               
    char szFilePath[MAX_PATH];        
    int nStartCluster;                
    int nDriverNo;                    
    NET_TIME stuStartTime;            
    NET_TIME stuEndTime;              
    int nChannel;                     
    NET_STREAM_TYPE emStreamType;     
} NET_REMOTEFILE_INFO;
typedef struct tagNET_FILEPATH_INFO
{
    DWORD dwSize;
    BOOL bFileType;                    
    NET_LOCALFILE_INFO stuLocalFile;   
    NET_REMOTEFILE_INFO stuRemoteFile; 
} NET_FILEPATH_INFO;
typedef struct tagNET_GLOBAL_INFO
{
    DWORD dwSize;
    char szSceneType[DH_MAX_NAME_LEN];                                
    int nStaffNum;                                                    
    NET_STAFF_INFO stuStaffs[DH_MAX_STAFF_NUM];                       
    int nCalibrateAreaNum;                                            
    NET_CALIBRATEAREA_INFO stuCalibrateArea[DH_MAX_CALIBRATEBOX_NUM]; 
    int nJitter;                                                      
    BOOL bDejitter;                                                   
    BOOL bSceneTypeEx;                                                
    char szSceneTypeEx[128];                                          
} NET_GLOBAL_INFO;
typedef struct tagNET_MODULE_INFO
{
    DWORD dwSize;      
    BYTE bSensitivity; 
    BYTE bReserved[3];
    int nDetectRegionPoint;                                    
    DH_POINT stuDetectRegion[DH_MAX_POLYGON_NUM];              
    int nExcludeRegionNum;                                     
    DH_POLY_POINTS stuExcludeRegion[DH_MAX_EXCLUDEREGION_NUM]; 
} NET_MODULE_INFO;
typedef struct tagNET_OBJFILTER_INFO
{
    DWORD dwSize;                             
    NET_TIME stuStartTime;                    
    NET_TIME stuEndTime;                      
    char szObjectType[DH_MAX_NAME_LEN];       
    char szObjectSubType[64];                 
    DWORD dwRGBMainColor[DH_MAX_COLOR_NUM];   
    DWORD dwLowerBodyColor[DH_MAX_COLOR_NUM]; 
    int nMinSize;                             
    int nMaxSize;                             
    int nMinSpeed;                            
    int nMaxSpeed;                            
    DWORD dwRGBMainColorNum;                  
    DWORD dwLowerBodyColorNum;                
    BOOL bRGBMainColor;                       
} NET_OBJFILTER_INFO;
typedef struct tagNET_VIDEOSYNOPSISRULE_INFO
{
    DWORD dwSize;             
    BYTE byOutputType;        
    BYTE byDensity;           
    bool bShowTime;           
    bool bShowBox;            
    bool bEnableRecordResult; 
    BYTE byTime;              
    BYTE byReserved[2];
    NET_OBJFILTER_INFO stuFilter[MAX_OBJFILTER_NUM]; 
    DWORD dwObjFilterNum;                            
    char* szAnalyseRuleInfo;                
    int nBufferLen;                         
    BOOL bCustomResolution;                 
    CAPTURE_SIZE emResolution;              
    BOOL bEnableMaxUsedCPU;                 
    BOOL bEnableSmoothBorder;               
    NET_EM_OUTPUT_SUB_TYPE emOutputSubType; 
    int nExtractFrameRate;                  
    int nSynopsisSpeed;                
    int nSynopsisSize;                 
    BOOL bEnableDirection;             
    DH_POINT stuSynopsisStartLocation; 
    DH_POINT stuSynopsisEndLocation;   
} NET_VIDEOSYNOPSISRULE_INFO;
typedef struct tagNET_IN_ADD_VIDEOSYNOPSIS
{
    DWORD dwSize;                           
    NET_FILEPATH_INFO* pFilePathInfo;       
    DWORD dwFileCount;                      
    NET_GLOBAL_INFO stuGlobalInfo;          
    NET_MODULE_INFO stuModuleInfo;          
    NET_VIDEOSYNOPSISRULE_INFO stuRuleInfo; 
    unsigned int nWaitTime;                 
} NET_IN_ADD_VIDEOSYNOPSIS;
typedef struct tagNET_OUT_ADD_VIDEOSYNOPSIS
{
    DWORD dwSize;       
    DWORD* pnTaskID;    
    DWORD nTaskIDCount; 
} NET_OUT_ADD_VIDEOSYNOPSIS;
typedef struct tagNET_IN_PRE_HANDLE_VIDEOSYNOPSIS
{
    DWORD dwSize;                         
    NET_FILEPATH_INFO* pFilePathInfo;     
    DWORD dwFileCount;                    
    unsigned int nWaitTime;               
    char szTaskName[DH_COMMON_STRING_64]; 
} NET_IN_PRE_HANDLE_VIDEOSYNOPSIS;
typedef struct tagNET_OUT_PRE_HANDLE_VIDEOSYNOPSIS
{
    DWORD dwSize;       
    DWORD* pnTaskID;    
    DWORD nTaskIDCount; 
} NET_OUT_PRE_HANDLE_VIDEOSYNOPSIS;
typedef struct tagNET_IN_PRETASK_BYCHANNEL
{
    DWORD dwSize;
    int nChannelCount;                
    int nChannel[DH_PRETASK_CHANNEL]; 
    NET_TIME stuStartTime;            
    NET_TIME stuEndTime;              
    unsigned int nWaitTime;           
} NET_IN_PRETASK_BYCHANNEL;
typedef struct tagNET_OUT_PRETASK_BYCHANNEL
{
    DWORD dwSize;
    int nTaskCount;  
    int nRealCount;  
    DWORD* pnTaskID; 
} NET_OUT_PRETASK_BYCHANNEL;
typedef struct tagNET_IN_GET_VIDEOSYNOPSIS_STATE
{
    DWORD dwSize;
    unsigned int nTaskID;   
    unsigned int nWaitTime; 
} NET_IN_GET_VIDEOSYNOPSIS_STATE;
typedef enum tagEM_VIDEOSYNOPSIS_STATE
{
    EM_VIDEOSYNOPSIS_STATE_UNKNOWN,  
    EM_VIDEOSYNOPSIS_STATE_SUCESSED, 
    EM_VIDEOSYNOPSIS_STATE_FAILED,   
    EM_VIDEOSYNOPSIS_STATE_PRETASK,  
    EM_VIDEOSYNOPSIS_STATE_SYNO      
} EM_VIDEOSYNOPSIS_STATE;
typedef struct tagNET_OUT_GET_VIDEOSYNOPSIS_STATE
{
    DWORD dwSize;
    int nProcess;                   
    EM_VIDEOSYNOPSIS_STATE emState; 
} NET_OUT_GET_VIDEOSYNOPSIS_STATE;
typedef struct tagNET_IN_VIDEOSYNOPSIS_STARTFIND
{
    DWORD dwSize;
    int nChannelCount;      
    int* pnChannel;         
    NET_TIME stuStartTime;  
    NET_TIME stuEndTime;    
    unsigned int nWaitTime; 
} NET_IN_VIDEOSYNOPSIS_STARTFIND;
typedef struct tagNET_OUT_VIDEOSYNOPSIS_STARTFIND
{
    DWORD dwSize;
    int nToken;      
    int nTotalCount; 
} NET_OUT_VIDEOSYNOPSIS_STARTFIND;
typedef struct tagNET_IN_VIDEOSYNOPSIS_DOFIND
{
    DWORD dwSize;
    int nToken;             
    int nBeginNumber;       
    int nCount;             
    unsigned int nWaitTime; 
} NET_IN_VIDEOSYNOPSIS_DOFIND;
typedef struct tagNET_VIDEOSYNOPSIS_DOFIND_INFO
{
    int nChannel;               
    NET_TIME stuStartTime;      
    NET_TIME stuEndTime;        
    int nDisk;                  
    int nPartition;             
    int nCluster;               
    int nFileLength;            
    int nFileSize;              
    BOOL bLocked;               
    NET_TIME stuBeginWriteTime; 
    NET_TIME stuEndWriteTime;   
    BYTE byReserved[976];       
} NET_VIDEOSYNOPSIS_DOFIND_INFO;
typedef struct tagNET_OUT_VIDEOSYNOPSIS_DOFIND
{
    DWORD dwSize;
    int nMaxFind;                                
    int nRealFound;                              
    NET_VIDEOSYNOPSIS_DOFIND_INFO* pstuFindInfo; 
} NET_OUT_VIDEOSYNOPSIS_DOFIND;
typedef struct tagNET_IN_VIDEOSYNOPSIS_STOPFIND
{
    DWORD dwSize;
    int nToken;             
    unsigned int nWaitTime; 
} NET_IN_VIDEOSYNOPSIS_STOPFIND;
typedef struct tagNET_OUT_VIDEOSYNOPSIS_STOPFIND
{
    DWORD dwSize;
} NET_OUT_VIDEOSYNOPSIS_STOPFIND;
typedef struct tagNET_IN_RUN_VIDEOSYNOPSIS_TASK
{
    DWORD dwSize;                           
    DWORD nTaskID;                          
    NET_GLOBAL_INFO stuGlobalInfo;          
    NET_MODULE_INFO stuModuleInfo;          
    NET_VIDEOSYNOPSISRULE_INFO stuRuleInfo; 
    unsigned int nWaitTime;                 
} NET_IN_RUN_VIDEOSYNOPSIS_TASK;
typedef struct tagNET_OUT_RUN_VIDEOSYNOPSIS_TASK
{
    DWORD dwSize;  
    DWORD nPlayID; 
    DWORD nTime;   
} NET_OUT_RUN_VIDEOSYNOPSIS_TASK;
typedef struct tagNET_IN_PAUSE_VIDEOSYNOPSIS
{
    DWORD dwSize;       
    BOOL bPause;        
    DWORD* pnTaskID;    
    DWORD nTaskIDCount; 
    DWORD nWaitTime;    
} NET_IN_PAUSE_VIDEOSYNOPSIS;
typedef enum tagNET_SYNOPSIS_REMOVE_TYPE
{
    EM_SYNOPSIS_REMOVE_UNKNOW = 0, 
    EM_SYNOPSIS_REMOVE_PRETASK,    
    EM_SYNOPSIS_REMOVE_SYNO,       
} NET_SYNOPSIS_REMOVE_TYPE;
typedef struct tagNET_IN_REMOVE_VIDEOSYNOPSIS
{
    DWORD dwSize;                          
    DWORD* pnTaskID;                       
    DWORD nTaskIDCount;                    
    DWORD nWaitTime;                       
    NET_SYNOPSIS_REMOVE_TYPE emRemoveType; 
} NET_IN_REMOVE_VIDEOSYNOPSIS;
typedef struct tagNET_REAL_SYNOPSIS_OBJECT_INFO
{
    DWORD dwSize;
    DWORD dwTaskID;                  
    DH_MSG_OBJECT_EX2 stuObjectInfo; 
} NET_REAL_SYNOPSIS_OBJECT_INFO;
typedef struct tagNET_REAL_SYNOPSIS_STATE_INFO
{
    DWORD dwSize;
    DWORD dwTaskID;                           
    int nObjectNum;                           
    int nTaolProgress;                        
    char szState[DH_MAX_SYNOPSIS_STATE_NAME]; 
    int nProgressOfCurrentState;              
    char szFailedCode[DH_MAX_STRING_LEN];     
    char szPicPath[DH_COMMON_STRING_512];   
    int nMaxTime;                           
    int nMinTime;                           
    char szVideoPath[DH_COMMON_STRING_512]; 
} NET_REAL_SYNOPSIS_STATE_INFO;
typedef int(CALLBACK* fVideoSynopsisObjData)(LLONG lRealLoadHandle, NET_REAL_SYNOPSIS_OBJECT_INFO* pSynopsisObjectInfo, void* pBuf, int nBufLen, LDWORD dwUser, void* pReserved);
typedef int(CALLBACK* fVideoSynopsisState)(LLONG lRealLoadHandle, NET_REAL_SYNOPSIS_STATE_INFO* pSynopsisStateInfos, int nInfoCount, LDWORD dwUser, void* pReserved);
typedef struct tagNET_IN_REALLOAD_OBJECTDATA
{
    DWORD dwSize;                                 
    int nTaskIDNum;                               
    DWORD* pTaskIDs;                              
    BOOL bNeedPicFile;                            
    int nWaitTime;                                
    fVideoSynopsisObjData cbVideoSynopsisObjData; 
    LDWORD dwUser;
} NET_IN_REALLOAD_OBJECTDATA;
typedef struct tagNET_OUT_REALLOAD_OBJECTDATA
{
    DWORD dwSize;          
    LLONG lRealLoadHandle; 
} NET_OUT_REALLOAD_OBJECTDATA;
typedef struct tagNET_IN_STOPLOAD_OBJECTDATA
{
    DWORD dwSize;
    int nTackIDNum;  
    DWORD* pTaskIDs; 
} NET_IN_STOPLOAD_OBJECTDATA;
typedef struct tagNET_IN_REALLAOD_SYNOPSISSTATE
{
    DWORD dwSize;                             
    int nTaskIDNum;                           
    DWORD* pTaskIDs;                          
    int nWaitTime;                            
    fVideoSynopsisState cbVideoSynopsisState; 
    LDWORD dwUser;
} NET_IN_REALLAOD_SYNOPSISSTATE;
typedef struct tagNET_OUT_REALLOAD_SYNOPSISSTATE
{
    DWORD dwSize;          
    LLONG lRealLoadHandle; 
} NET_OUT_REALLOAD_SYNOPSISSTATE;
typedef struct tagNET_IN_STOPLOAD_SYNOPSISSTATE
{
    DWORD dwSize;
    int nTackIDNum;  
    DWORD* pTaskIDs; 
} NET_IN_STOPLOAD_SYNOPSISSTATE;
typedef enum tagEM_VIDEOSYNOPSIS_QUERY_TYPE
{
    EM_VIDEOSYNOPSIS_TASK, 
    EM_VIDEOSYNOPSIS_OBJ,  
} EM_VIDEOSYNOPSIS_QUERY_TYPE;
typedef struct tagNET_QUERY_VSTASK_INFO
{
    DWORD dwSize;   
    DWORD dwTaskID; 
} NET_QUERY_VSTASK_INFO;
typedef struct tagNET_VSO_COLORSIMILAR_INFO
{
    int nRed;             
    int nYellow;          
    int nGreen;           
    int nCyan;            
    int nBlue;            
    int nPurple;          
    int nBlack;           
    int nWhite;           
    BYTE byReserved[512]; 
} NET_VSO_COLORSIMILAR_INFO;
typedef struct tagNET_QUERY_VSOBJECT_INFO
{
    DWORD dwSize;                                  
    DWORD* pdwTaskID;                              
    DWORD dwTaskIDCount;                           
    DH_MSG_OBJECT stuObjInfo;                      
    int nSpeed;                                    
    int nDirection;                                
    NET_TIME_EX stuStartTime;                      
    NET_TIME_EX stuEndTime;                        
    NET_VSO_COLORSIMILAR_INFO stuColorSimilarInfo; 
} NET_QUERY_VSOBJECT_INFO;
typedef struct tagNET_IN_QUERY_VIDEOSYNOPSIS
{
    DWORD dwSize;                            
    EM_VIDEOSYNOPSIS_QUERY_TYPE emQueryType; 
    DWORD dwCount;                           
    DWORD dwBeginNumber;                     
    void* pQueryInfo;                        
    DWORD dwWaitTime; 
} NET_IN_QUERY_VIDEOSYNOPSIS;
typedef struct tagNET_VSTASK_INFO
{
    DWORD dwSize;                                 
    DWORD dwTaskID;                               
    NET_MODULE_INFO stuModuleInfo;                
    NET_VIDEOSYNOPSISRULE_INFO stuRuleInfo;       
    NET_GLOBAL_INFO stuGlobalInfo;                
    NET_TIME stuCreateTime;                       
    char szCurrState[DH_MAX_SYNOPSIS_STATE_NAME]; 
    char szCreateUser[DH_MAX_NAME_LEN];           
    int nProgressOfCurrentState;                  
    char szLocalFilePath[MAX_PATH];               
    int nObjectNum;                               
    NET_FILEPATH_INFO stuVideoSourceFilePath;     
    NET_FILEPATH_INFO stuSynopsisVideoFilePath;   
    char szFailedCode[DH_MAX_STRING_LEN];         
    char szTaskName[DH_COMMON_STRING_64];         
} NET_VSTASK_INFO;
typedef struct tagNET_VSOBJECT_INFO
{
    DWORD dwSize;                      
    DWORD dwTaskID;                    
    DH_MSG_OBJECT stuObjInfo;          
    NET_FILEPATH_INFO stuFilePathInfo; 
    DWORD dwFileLength;                
    int nDirection;                    
    DH_MSG_OBJECT_EX2 stuObjInfoEx;    
} NET_VSOBJECT_INFO;
typedef struct tagNET_OUT_QUERY_VIDEOSYNOPSIS
{
    DWORD dwSize;       
    DWORD dwTotalCount; 
    DWORD dwFoundCount; 
    void* pResult;      
    DWORD dwMaxCount;   
} NET_OUT_QUERY_VIDEOSYNOPSIS;
typedef enum tagNET_EM_QUERY_SYNOPSIS_FILE
{
    DH_FILE_QUERY_VIDEO,         
    DH_FILE_QUERY_SYNOPSISVIDEO, 
} NET_EM_QUERY_SYNOPSIS_FILE;
typedef struct __NET_SYNOPSIS_QUERY_VIDEO_PARAM
{
    DWORD dwSize;
    DWORD dwQueryMask;                                           
    NET_TIME stuStartTime;                                       
    NET_TIME stuEndTime;                                         
    char szFilePath[DH_MAX_SYNOPSIS_QUERY_FILE_COUNT][MAX_PATH]; 
    DWORD dwFileCount;                                           
} NET_SYNOPSIS_QUERY_VIDEO_PARAM;
typedef struct
{
    DWORD dwSize;
    int nTaskId;                                     
    DWORD dwOutPutTypeMask;                          
    char szCurrentState[DH_MAX_SYNOPSIS_STATE_NAME]; 
} NET_VIDEOSYNOPSIS_TASK_INFO;
typedef struct
{
    DWORD dwSize;
    unsigned int nchannelId;                     
    char szFilePath[MAX_PATH];                   
    unsigned int nFileLenth;                     
    NET_TIME stuStarttime;                       
    NET_TIME stuEndtime;                         
    unsigned int nWorkDirSN;                     
    unsigned int nCluster;                       
    BYTE bHint;                                  
    BYTE bDriveNo;                               
    BYTE bReserved[18];                          
    int nTaskInfoNum;                            
    NET_VIDEOSYNOPSIS_TASK_INFO stuTaskInfo[16]; 
    char szSynopsisPicPath[DH_COMMON_STRING_512]; 
    int nSynopsisMaxTime;                         
    int nSynopsisMinTime;                         
    INT64 nFileLengthEx;                          
} NET_SYNOPSISFILE_VIDEO_INFO;
typedef struct __NET_QUERY_SYNOPSISVIDEO_PARAM
{
    DWORD dwSize;
    int nTaskID; 
} NET_QUERY_SYNOPSISVIDEO_PARAM;
typedef struct __NET_QUERY_SYNOPSISVIDEO_INFO
{
    DWORD dwSize;
    char szFilePath[MAX_PATH]; 
    unsigned int nFileLenth;   
    int nDurationTime;         
    INT64 nFileLengthEx;       
} NET_QUERY_SYNOPSISVIDEO_INFO;
typedef struct tagNET_IN_FIND_SYNOPSISFILE
{
    DWORD dwSize;
    NET_EM_QUERY_SYNOPSIS_FILE emQueryType; 
    void* pQueryCondition;                  
    int nWaitTime;                          
} NET_IN_FIND_SYNOPSISFILE;
typedef struct tagNET_OUT_FIND_SYNOPSISFILE
{
    DWORD dwSize;
    LLONG lFindHandle; 
} NET_OUT_FIND_SYNOPSISFILE;
typedef struct tagNET_IN_FINDNEXT_SYNOPSISFILE
{
    DWORD dwSize;
    int nFileCount;                         
    NET_EM_QUERY_SYNOPSIS_FILE emQueryType; 
    void* pSynopsisFileInfo;                
    int nMaxlen;                            
    int nWaitTime;                          
} NET_IN_FINDNEXT_SYNOPSISFILE;
typedef struct tagNET_OUT_FINDNEXT_SYNOPSISFILE
{
    DWORD dwSize;
    int nRetFileCount; 
} NET_OUT_FINDNEXT_SYNOPSISFILE;
typedef void(CALLBACK* fSynopsisFileDownLoadPosCB)(LLONG lDownLoadHandle, DWORD dwFileID, DWORD dwFileTotalSize, DWORD dwDownLoadSize, int nError, LDWORD dwUser, void* pReserved);
typedef NET_DOWNLOADFILE_INFO NET_SYNOPSIS_DOWNLOADFILE_INFO;
typedef struct tagNET_IN_DOWNLOAD_SYNOPSISFILE
{
    DWORD dwSize;
    int nFileCount;                             
    NET_SYNOPSIS_DOWNLOADFILE_INFO* pFileInfos; 
    fSynopsisFileDownLoadPosCB cbPosCallBack;   
    LDWORD dwUserData;                          
    int nWaitTime;                              
} NET_IN_DOWNLOAD_SYNOPSISFILE;
typedef struct tagNET_OUT_DOWNLOAD_SYNOPSISFILE
{
    DWORD dwSize;
    LLONG lDownLoadHandle; 
} NET_OUT_DOWNLOAD_SYNOPSISFILE;
typedef struct tagNET_SET_FILEPATH_INFO
{
    DWORD dwSize;
    char szFilePath[MAX_PATH]; 
} NET_SET_FILEPATH_INFO;
typedef struct tagNET_IN_SET_FILEPATHINFO
{
    DWORD dwSize;
    DWORD dwCount;       
    void* pFilePathInfo; 
    DWORD dwWaitTime;    
} NET_IN_SET_FILEPATHINFO;
typedef struct tagNET_CB_ADDFILESTATE
{
    DWORD dwSize;
    const char* szFileName; 
    const char* szState;    
} NET_CB_ADDFILESTATE;
typedef void(CALLBACK* fAddFileStateCB)(LLONG lLoginID, LLONG lAttachHandle, NET_CB_ADDFILESTATE* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ADDFILE_STATE
{
    DWORD dwSize;
    fAddFileStateCB cbAttachState; 
    LDWORD dwUser;                 
} NET_IN_ADDFILE_STATE;
typedef struct tagNET_OUT_ADDFILE_STATE
{
    DWORD dwSize;
} NET_OUT_ADDFILE_STATE;
typedef struct tagNET_UID_CHAR
{
    char szUID[DH_MAX_PERSON_ID_LEN]; 
} NET_UID_CHAR;
typedef struct tagNET_UUID_CHAR
{
    char szUUID[DH_MAX_PERSON_ID_LEN]; 
} NET_UUID_CHAR;
typedef struct __NET_IN_OPERATE_FACERECONGNITIONDB
{
    DWORD dwSize;
    EM_OPERATE_FACERECONGNITIONDB_TYPE emOperateType; 
    FACERECOGNITION_PERSON_INFO stPersonInfo;         
    DWORD nUIDNum;         
    NET_UID_CHAR* stuUIDs; 
    char* pBuffer;  
    int nBufferLen; 
    BOOL bUsePersonInfoEx;                        
    FACERECOGNITION_PERSON_INFOEX stPersonInfoEx; 
    DWORD nUUIDNum;          
    NET_UUID_CHAR* stuUUIDs; 
} NET_IN_OPERATE_FACERECONGNITIONDB;
typedef enum tagEM_ERRORCODE_TYPE
{
    EM_ERRORCODE_TYPE_UNKNOWN = -1,     
    EM_ERRORCODE_TYPE_SUCCESS,          
    EM_ERRORCODE_TYPE_PERSON_NOT_EXIST, 
    EM_ERRORCODE_TYPE_DATABASE_ERROR,   
} EM_ERRORCODE_TYPE;
typedef struct __NET_OUT_OPERATE_FACERECONGNITIONDB
{
    DWORD dwSize;
    char szUID[DH_MAX_PERSON_ID_LEN]; 
    int nErrorCodeNum;                                 
    EM_ERRORCODE_TYPE emErrorCodes[MAX_ERRORCODE_NUM]; 
} NET_OUT_OPERATE_FACERECONGNITIONDB;
typedef enum tagEM_FACE_APPEND_STATE
{
    EM_FACE_APPEND_STATE_UNKNOWN, 
    EM_FACE_APPEND_STATE_START,   
    EM_FACE_APPEND_STATE_RUN,     
    EM_FACE_APPEND_STATE_STOP,    
    EM_FACE_APPEND_STATE_CANCLE,  
} EM_FACE_APPEND_STATE;
typedef struct tagNET_MULTI_APPEND_EXTENDED_INFO
{
    UINT nToken;                  
    EM_FACE_APPEND_STATE emState; 
    char szResvered[248];         
} NET_MULTI_APPEND_EXTENDED_INFO;
typedef struct tagNET_IN_BATCH_APPEND_FACERECONGNITION
{
    DWORD dwSize;                                 
    UINT nPersonNum;                              
    FACERECOGNITION_PERSON_INFOEX* pstPersonInfo; 
    char* pBuffer;                          
    UINT nBufferLen;                        
    BYTE bReserved[4];                      
    NET_MULTI_APPEND_EXTENDED_INFO stuInfo; 
} NET_IN_BATCH_APPEND_FACERECONGNITION;
typedef struct tagNET_BATCH_APPEND_PERSON_RESULT
{
    UINT nUID;           
    DWORD dwErrorCode;   
    char szUID2[64];     
    BYTE bReserved[448]; 
} NET_BATCH_APPEND_PERSON_RESULT;
typedef struct tagNET_OUT_BATCH_APPEND_FACERECONGNITION
{
    DWORD dwSize;                                  
    UINT nResultNum;                               
    NET_BATCH_APPEND_PERSON_RESULT* pstResultInfo; 
    UINT nUIDType;                                 
} NET_OUT_BATCH_APPEND_FACERECONGNITION;
typedef enum tagEM_FINDPIC_QUERY_MODE
{
    EM_FINDPIC_QUERY_UNKNOWN, 
    EM_FINDPIC_QUERY_PASSIVE, 
    EM_FINDPIC_QUERY_ACTIVE,  
} EM_FINDPIC_QUERY_MODE;
typedef enum tagEM_FINDPIC_QUERY_ORDERED
{
    EM_FINDPIC_QUERY_BY_SIMILARITY,   
    EM_FINDPIC_QUERY_BY_TIME_FORWARD, 
    EM_FINDPIC_QUERY_BY_TIME_REVERSE, 
} EM_FINDPIC_QUERY_ORDERED;
typedef struct __NET_FACE_MATCH_OPTIONS
{
    DWORD dwSize;
    unsigned int nMatchImportant;                 
    EM_FACE_COMPARE_MODE emMode;                  
    int nAreaNum;                                 
    EM_FACE_AREA_TYPE szAreas[MAX_FACE_AREA_NUM]; 
    int nAccuracy;                                
    int nSimilarity;                              
    int nMaxCandidate;                            
    EM_FINDPIC_QUERY_MODE emQueryMode;            
    EM_FINDPIC_QUERY_ORDERED emOrdered;           
} NET_FACE_MATCH_OPTIONS;
typedef struct __NET_FACE_FILTER_CONDTION
{
    DWORD dwSize;
    NET_TIME stStartTime;                                            
    NET_TIME stEndTime;                                              
    char szMachineAddress[MAX_PATH];                                 
    int nRangeNum;                                                   
    BYTE szRange[MAX_FACE_DB_NUM];                                   
    EM_FACERECOGNITION_FACE_TYPE emFaceType;                         
    int nGroupIdNum;                                                 
    char szGroupId[MAX_GOURP_NUM][DH_COMMON_STRING_64];              
    NET_TIME stBirthdayRangeStart;                                   
    NET_TIME stBirthdayRangeEnd;                                     
    BYTE byAge[MAX_AGE_NUM];                                         
    BYTE byReserved[2];                                              
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion[MAX_EMOTION_NUM]; 
    int nEmotionNum;                                                 
    int nUIDNum;                                                     
    char szUIDs[64][32];                                             
    int nUUIDNum;                                                    
    char szUUIDs[64][32];                                            
} NET_FACE_FILTER_CONDTION;
#define MAX_SMALLPIC_NUM 32 
typedef struct __NET_IN_STARTFIND_FACERECONGNITION
{
    DWORD dwSize;
    BOOL bPersonEnable;                    
    FACERECOGNITION_PERSON_INFO stPerson;  
    NET_FACE_MATCH_OPTIONS stMatchOptions; 
    NET_FACE_FILTER_CONDTION stFilterInfo; 
    char* pBuffer;  
    int nBufferLen; 
    int nChannelID; 
    BOOL bPersonExEnable;                         
    FACERECOGNITION_PERSON_INFOEX stPersonInfoEx; 
    int nSmallPicIDNum;                           
    int nSmallPicID[MAX_SMALLPIC_NUM];            
    EM_OBJECT_TYPE emObjectType;                  
    char szChannel[DH_COMMON_STRING_32];          
} NET_IN_STARTFIND_FACERECONGNITION;
typedef struct __NET_OUT_STARTFIND_FACERECONGNITION
{
    DWORD dwSize;
    int nTotalCount; 
    LLONG lFindHandle; 
    int nToken;        
} NET_OUT_STARTFIND_FACERECONGNITION;
typedef struct tagNET_IN_STARTMULTIFIND_FACERECONGNITION
{
    DWORD dwSize;
    int* pChannelID;                       
    int nChannelCount;                     
    BOOL bPersonEnable;                    
    FACERECOGNITION_PERSON_INFO stPerson;  
    NET_FACE_MATCH_OPTIONS stMatchOptions; 
    NET_FACE_FILTER_CONDTION stFilterInfo; 
    char* pBuffer;  
    int nBufferLen; 
    BOOL bPersonExEnable;                         
    FACERECOGNITION_PERSON_INFOEX stPersonInfoEx; 
    EM_OBJECT_TYPE emObjectType;                  
    int nChannelNum;                              
    char szChannelString[512][32];                
    int nProcessType;                             
} NET_IN_STARTMULTIFIND_FACERECONGNITION;
typedef struct tagNET_OUT_STARTMULTIFIND_FACERECONGNITION
{
    DWORD dwSize;
    int nTotalCount; 
    LLONG lFindHandle; 
    int nToken;        
} NET_OUT_STARTMULTIFIND_FACERECONGNITION;
typedef struct tagNET_IN_STARTMULTIPERSONFIND_FACER
{
    DWORD dwSize;                           
    NET_FACE_FILTER_CONDTION stFilterInfo;  
    int* pChannelID;                        
    int nChannelCount;                      
    int nTaskIdCount;                       
    int* pTaskId;                           
    FACERECOGNITION_PERSON_INFOEX stPerson; 
    NET_FACE_MATCH_OPTIONS stMatchOptions;  
    int nSmallPicIDNum;                     
    int nSmallPicID[32];                    
    EM_OBJECT_TYPE emObjectType;            
    int nBufferLen; 
    char* pBuffer;  
} NET_IN_STARTMULTIPERSONFIND_FACER;
typedef struct tagNET_OUT_STARTMULTIPERSONFIND_FACER
{
    DWORD dwSize;    
    int nTotalCount; 
    LLONG lFindHandle; 
    UINT nToken;       
} NET_OUT_STARTMULTIPERSONFIND_FACER;
typedef struct tagNET_IN_FACERSERVER_GETDETEVTTOKEN
{
    DWORD dwSize; 
} NET_IN_FACERSERVER_GETDETEVTTOKEN;
typedef struct tagNET_OUT_FACERSERVER_GETDETEVTTOKEN
{
    DWORD dwSize; 
    UINT nToken;  
} NET_OUT_FACERSERVER_GETDETEVTTOKEN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRServerGetDetectToken(LLONG lLoginID, NET_IN_FACERSERVER_GETDETEVTTOKEN* pInParam, NET_OUT_FACERSERVER_GETDETEVTTOKEN* pOutParam, int nWaitTime);
typedef struct tagNET_IN_STARTMULTIFIND_FACERECONGNITIONRECORD
{
    DWORD dwSize; 
    NET_TIME stStartTime;                               
    NET_TIME stEndTime;                                 
    char szMachineAddress[MAX_PATH];                    
    int nAlarmType;                                     
    BOOL abPersonInfo;                                  
    FACERECOGNITION_PERSON_INFO stPersonInfo;           
    int* pChannelID;                                    
    int nChannelCount;                                  
    int nGroupIdNum;                                    
    char szGroupId[MAX_GOURP_NUM][DH_COMMON_STRING_64]; 
    BOOL abPersonExInfo;                          
    FACERECOGNITION_PERSON_INFOEX stPersonInfoEx; 
} NET_IN_STARTMULTIFIND_FACERECONGNITIONRECORD;
typedef struct tagNET_OUT_STARTMULTIFIND_FACERECONGNITIONRECORD
{
    DWORD dwSize;
    int nTotalCount;   
    LLONG lFindHandle; 
    int nToken;        
} NET_OUT_STARTMULTIFIND_FACERECONGNITIONRECORD;
typedef struct tagNET_IN_DOFIND_FACERECONGNITIONRECORD
{
    DWORD dwSize;
    int nTotalCount;   
    LLONG lFindHandle; 
    int nBeginNumber;  
} NET_IN_DOFIND_FACERECONGNITIONRECORD;
typedef struct tagNET_DOFIND_FACERECONGNITIONRECORD_INFO
{
    BOOL bGlobalScenePic;                                             
    NET_PIC_INFO stGlobalScenePic;                                    
    DH_MSG_OBJECT stuObject;                                          
    NET_PIC_INFO stObjectPic;                                         
    int nCandidateNum;                                                
    CANDIDATE_INFO stuCandidates[DH_MAX_CANDIDATE_NUM];               
    NET_CANDIDAT_PIC_PATHS_EX stuCandidatesPic[DH_MAX_CANDIDATE_NUM]; 
    NET_TIME stTime;                                                  
    char szAddress[MAX_PATH];                                         
    int nChannelId;                                                   
    BYTE bReserved[256];                                              
} NET_DOFIND_FACERECONGNITIONRECORD_INFO;
typedef struct tagNET_OUT_DOFIND_FACERECONGNITIONRECORD
{
    DWORD dwSize;
    NET_DOFIND_FACERECONGNITIONRECORD_INFO* stuResults; 
    int nResultNum;                                     
    int nTotalCount;                                    
} NET_OUT_DOFIND_FACERECONGNITIONRECORD;
typedef struct tagNET_IN_DOFIND_FACERECONGNITIONRECORD_EX
{
    DWORD dwSize;
    int nTotalCount;   
    LLONG lFindHandle; 
    int nBeginNumber;  
} NET_IN_DOFIND_FACERECONGNITIONRECORD_EX;
typedef struct tagNET_DOFIND_FACERECONGNITIONRECORD_INFO_EX
{
    BOOL bGlobalScenePic;                                             
    NET_PIC_INFO stGlobalScenePic;                                    
    DH_MSG_OBJECT stuObject;                                          
    NET_PIC_INFO stObjectPic;                                         
    int nCandidateNum;                                                
    CANDIDATE_INFOEX stuCandidates[DH_MAX_CANDIDATE_NUM];             
    NET_CANDIDAT_PIC_PATHS_EX stuCandidatesPic[DH_MAX_CANDIDATE_NUM]; 
    NET_TIME stTime;                                                  
    char szAddress[MAX_PATH];                                         
    int nChannelId;                                                   
    BYTE bReserved[1024];                                             
} NET_DOFIND_FACERECONGNITIONRECORD_INFO_EX;
typedef struct tagNET_OUT_DOFIND_FACERECONGNITIONRECORD_EX
{
    DWORD dwSize;
    NET_DOFIND_FACERECONGNITIONRECORD_INFO_EX* pstResults; 
    int nMaxResultNum;                                     
    int nRetResultNum;                                     
} NET_OUT_DOFIND_FACERECONGNITIONRECORD_EX;
#define MAX_FIND_COUNT 20
typedef enum tagEM_NEEDED_PIC_RETURN_TYPE
{
    EM_NEEDED_PIC_TYPE_UNKOWN,          
    EM_NEEDED_PIC_TYPE_HTTP_URL,        
    EM_NEEDED_PIC_TYPE_BINARY_DATA,     
    EM_NEEDED_PIC_TYPE_HTTP_AND_BINARY, 
} EM_NEEDED_PIC_RETURN_TYPE;
typedef struct __NET_IN_DOFIND_FACERECONGNITION
{
    DWORD dwSize;
    LLONG lFindHandle;                    
    int nBeginNum;                        
    int nCount;                           
    EM_NEEDED_PIC_RETURN_TYPE emDataType; 
} NET_IN_DOFIND_FACERECONGNITION;
typedef struct __NET_OUT_FINDNEXT_FACERECONGNITION
{
    DWORD dwSize;
    int nCadidateNum;                              
    CANDIDATE_INFO stCadidateInfo[MAX_FIND_COUNT]; 
    char* pBuffer;  
    int nBufferLen; 
    BOOL bUseCandidatesEx;                            
    int nCadidateExNum;                               
    CANDIDATE_INFOEX stuCandidatesEx[MAX_FIND_COUNT]; 
} NET_OUT_DOFIND_FACERECONGNITION;
typedef enum tagEM_GLASSES_STATE
{
    EM_GLASSES_STATE_UNKNOWN, 
    EM_GLASSES_STATE_NO,      
    EM_GLASSES_STATE_WEAR,    
} EM_GLASSES_STATE;
typedef struct tagNET_HISTORY_PERSON_INFO
{
    char szUID[DH_MAX_PERSON_ID_LEN];               
    EM_SEX_TYPE emSexType;                          
    UINT nAge;                                      
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion; 
    EM_GLASSES_STATE emGlassesState;                
    EM_GLASSES_TYPE emGlassesType;                  
    char szReserved1[4];
    EM_EYE_STATE_TYPE emEye;                                     
    EM_MOUTH_STATE_TYPE emMouth;                                 
    EM_MASK_STATE_TYPE emMask;                                   
    EM_BEARD_STATE_TYPE emBeard;                                 
    int nAttractive;                                             
    UINT nFacePicNum;                                            
    NET_FACE_IMAGE_INFO stuFacePicInfo[DH_MAX_PERSON_IMAGE_NUM]; 
    BYTE bReserved[2048];                                        
} NET_HISTORY_PERSON_INFO;
typedef struct tagNET_HISTORY_ACTIVE_CANDIDATE
{
    UINT nSimilarity;                         
    int nChannelID;                           
    NET_HISTORY_PERSON_INFO stuHistoryPerson; 
    NET_TIME stuTime;                         
    NET_FACE_IMAGE_INFO stuSceneImage;        
    char szChannelString[32];                 
    BYTE bReserved[1204];                     
} NET_HISTORY_ACTIVE_CANDIDATE;
#define MAX_CANDIDATE_NUM 50 
typedef struct tagNET_RESULT_OF_FINDHISTORY_BYPIC
{
    UINT nSmallPicID;                                                 
    UINT nPictureID;                                                  
    UINT nCandidateNum;                                               
    NET_HISTORY_ACTIVE_CANDIDATE stuCandidateInfo[MAX_CANDIDATE_NUM]; 
    BYTE bReserved[1024];                                             
} NET_RESULT_OF_FINDHISTORY_BYPIC;
#define MAX_FINDPERSON_RESULT_NUM 32 
typedef struct tagNET_CB_RESULT_OF_FIND_HISTORY_BYPIC
{
    UINT nToken;                                                                 
    UINT nProgress;                                                              
    UINT nTotalCount;                                                            
    int nHistoryResultNum;                                                       
    NET_RESULT_OF_FINDHISTORY_BYPIC stuHistoryResult[MAX_FINDPERSON_RESULT_NUM]; 
    BYTE bReserved[1024];                                                        
} NET_CB_RESULT_OF_FIND_HISTORY_BYPIC;
typedef void(CALLBACK* fResultOfFindHistory)(LLONG lAttachHandle, NET_CB_RESULT_OF_FIND_HISTORY_BYPIC* pstesult, const char* pBinBuf, int nBinBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RESULT_FINDHISTORY_BYPIC
{
    DWORD dwSize;                               
    UINT nToken;                                
    fResultOfFindHistory cbResultOfFindHistory; 
    LDWORD dwUser;                              
} NET_IN_ATTACH_RESULT_FINDHISTORY_BYPIC;
typedef struct tagNET_OUT_ATTACH_RESULT_FINDHISTORY_BYPIC
{
    DWORD dwSize; 
} NET_OUT_ATTACH_RESULT_FINDHISTORY_BYPIC;
typedef struct tagNET_HUMANHISTORY_CANDIDATE
{
    UINT nSimilarity;                       
    int nChannelID;                         
    NET_HISTORY_HUMAN_INFO stuHistoryHuman; 
    NET_TIME stuTime;                       
    NET_FACE_IMAGE_INFO stuSceneImage;      
    BYTE bReserved[748];                    
} NET_HUMANHISTORY_CANDIDATE;
typedef struct tagNET_RESULT_OF_HUMANHISTORY_BYPIC
{
    UINT nSmallPicID;                                
    UINT nPictureID;                                 
    NET_HUMANHISTORY_CANDIDATE stuCandidateInfo[50]; 
    UINT nCandidateNum;                              
    BYTE bReserved[1028];                            
} NET_RESULT_OF_HUMANHISTORY_BYPIC;
typedef struct tagNET_CB_RESULT_OF_HUMAN_HISTORY_BYPIC
{
    UINT nToken;                                           
    UINT nProgress;                                        
    UINT nTotalCount;                                      
    int nHistoryResultNum;                                 
    NET_RESULT_OF_HUMANHISTORY_BYPIC stuHistoryResult[32]; 
    BYTE bReserved[1024];                                  
} NET_CB_RESULT_OF_HUMAN_HISTORY_BYPIC;
typedef void(CALLBACK* fResultOfHumanHistory)(LLONG lAttachHandle, NET_CB_RESULT_OF_HUMAN_HISTORY_BYPIC* pstesult, const char* pBinBuf, int nBinBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RESULT_HUMAN_HISTORY_BYPIC
{
    DWORD dwSize;                                 
    UINT nToken;                                  
    fResultOfHumanHistory cbResultOfHumanHistory; 
    LDWORD dwUser;                                
} NET_IN_ATTACH_RESULT_HUMAN_HISTORY_BYPIC;
typedef struct tagNET_OUT_ATTACH_RESULT_HUMAN_HISTORY_BYPIC
{
    DWORD dwSize; 
} NET_OUT_ATTACH_RESULT_HUMAN_HISTORY_BYPIC;
typedef struct tagNET_HISTORY_TRAFFIC_CAR_INFO
{
    char szUID[64];                       
    NET_RECT stuBoundingBox;              
    char szPlateNumber[32];               
    char szPlateType[32];                 
    char szPlateColor[32];                
    char szVehicleColor[32];              
    char szCategory[32];                  
    char szSpecialCar[32];                
    char szVehicleSign[64];               
    UINT nSubBrand;                       
    UINT nBrandYear;                      
    UINT nFurnitureCount;                 
    UINT nPendantCount;                   
    UINT nAnnualInspectionCount;          
    int nAnnualInspectionShape;           
    NET_SUNSHADE_STATE emSunShade;        
    NET_SUNSHADE_STATE emSubSeatSunShade; 
    UINT nCardCount;                      
    NET_SAFEBELT_STATE emSafeBelt;        
    int nCalling;                         
    int nPlayPhone;                       
    int nSmoking;                         
    int nSubSeatPeople;                   
    NET_SAFEBELT_STATE emSubSeatSafeBelt; 
    int nHoldBaby;                        
    int nSunroof;                         
    int nLuggageRack;                     
    int nVehicleCollision;                
    int nVehiclePrint;                    
    int nBackupTire;                      
    int nTrunk;                           
    int nPlateAttribute;                  
    int nMuskHide;                        
    NET_PIC_INFO_EX stuImage;             
    int nPressParkingStatus;              
    char szReserved[256];                 
} NET_HISTORY_TRAFFIC_CAR_INFO;
typedef struct tagNET_VEHICLEHISTORY_CANDIDATE
{
    UINT nSimilarity;                                  
    int nChannelID;                                    
    NET_HISTORY_TRAFFIC_CAR_INFO stuHistoryTrafficCar; 
    NET_TIME stuTime;                                  
    NET_FACE_IMAGE_INFO stuSceneImage;                 
    char szReserved[748];                              
} NET_VEHICLEHISTORY_CANDIDATE;
typedef struct tagNET_RESULT_OF_VEHICLEHISTORY_BYPIC
{
    UINT nSmallPicID;                                  
    UINT nPictureID;                                   
    NET_VEHICLEHISTORY_CANDIDATE stuCandidateInfo[50]; 
    UINT nCandidateNum;                                
    char szReserved[1028];                             
} NET_RESULT_OF_VEHICLEHISTORY_BYPIC;
typedef struct tagNET_CB_RESULT_OF_VEHICLE_HISTORY_BYPIC
{
    UINT nToken;                                             
    UINT nProgress;                                          
    UINT nTotalCount;                                        
    int nHistoryResultNum;                                   
    NET_RESULT_OF_VEHICLEHISTORY_BYPIC stuHistoryResult[32]; 
    char szReserved[1024];                                   
} NET_CB_RESULT_OF_VEHICLE_HISTORY_BYPIC;
typedef void(CALLBACK* fResultOfVehicleHistory)(LLONG lAttachHandle, NET_CB_RESULT_OF_VEHICLE_HISTORY_BYPIC* pstuResult, const char* pBinBuf, int nBinBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RESULT_VEHICLE_HISTORY_BYPIC
{
    DWORD dwSize;                                     
    UINT nToken;                                      
    fResultOfVehicleHistory cbResultOfVehicleHistory; 
    LDWORD dwUser;                                    
} NET_IN_ATTACH_RESULT_VEHICLE_HISTORY_BYPIC;
typedef struct tagNET_OUT_ATTACH_RESULT_VEHICLE_HISTORY_BYPIC
{
    DWORD dwSize; 
} NET_OUT_ATTACH_RESULT_VEHICLE_HISTORY_BYPIC;
typedef struct __NET_IN_DETECT_FACE
{
    DWORD dwSize;
    DH_PIC_INFO stPicInfo; 
    char* pBuffer;  
    int nBufferLen; 
} NET_IN_DETECT_FACE;
typedef struct __NET_OUT_DETECT_FACE
{
    DWORD dwSize;
    DH_PIC_INFO* pPicInfo; 
    int nMaxPicNum;        
    int nRetPicNum;        
    char* pBuffer;  
    int nBufferLen; 
} NET_OUT_DETECT_FACE;
typedef enum tagEM_OPERATE_FACERECONGNITION_GROUP_TYPE
{
    NET_FACERECONGNITION_GROUP_UNKOWN,
    NET_FACERECONGNITION_GROUP_ADD,    
    NET_FACERECONGNITION_GROUP_MODIFY, 
    NET_FACERECONGNITION_GROUP_DELETE, 
} EM_OPERATE_FACERECONGNITION_GROUP_TYPE;
typedef enum tagEM_PASSERBY_DB_OVERWRITE_TYPE
{
    EM_OVERWRITE_TYPE_UNKNOWN = -1,  
    EM_OVERWRITE_TYPE_FULL_STOP,     
    EM_OVERWRITE_TYPE_FULL_COVERAGE, 
} EM_PASSERBY_DB_OVERWRITE_TYPE;
typedef enum tagEM_PASSERBY_DB_DUPLICATE_REMOVE_TYPE
{
    EM_DUPLICATE_REMOVE_TYPE_UNKNOWN = -1, 
    EM_DUPLICATE_REMOVE_TYPE_ALL,          
    EM_DUPLICATE_REMOVE_TYPE_TIME,         
    EM_DUPLICATE_REMOVE_TYPE_TIME_SLOT,    
} EM_PASSERBY_DB_DUPLICATE_REMOVE_TYPE;
typedef struct tagPASSERBY_DB_DUPLICATE_REMOVE_CONFIG_INFO
{
    BOOL bEnable;                                               
    EM_PASSERBY_DB_DUPLICATE_REMOVE_TYPE emDuplicateRemoveType; 
    DH_TSECT stuTimeSection[8][6];                              
    DWORD dwInterval;                                           
    BYTE byReserved1[4];                                        
    BYTE byReserved[256];                                       
} PASSERBY_DB_DUPLICATE_REMOVE_CONFIG_INFO;
typedef struct tagNET_PASSERBY_DB_CONFIG_INFO
{
    DWORD dwCapacity;                                                      
    EM_PASSERBY_DB_OVERWRITE_TYPE emOverWriteType;                         
    PASSERBY_DB_DUPLICATE_REMOVE_CONFIG_INFO stuDuplicateRemoveConfigInfo; 
    DWORD dwFileHoldTime;                                                  
    BYTE byReserved1[4];                                                   
    BYTE byReserved[256];                                                  
} NET_PASSERBY_DB_CONFIG_INFO;
typedef struct tagNET_FACERECONGNITION_GROUP_INFO
{
    DWORD dwSize;
    EM_FACE_DB_TYPE emFaceDBType;                    
    char szGroupId[DH_COMMON_STRING_64];             
    char szGroupName[DH_COMMON_STRING_128];          
    char szGroupRemarks[DH_COMMON_STRING_256];       
    int nGroupSize;                                  
    int nRetSimilarityCount;                         
    int nSimilarity[MAX_SIMILARITY_COUNT];           
    int nRetChnCount;                                
    int nChannel[DH_MAX_CAMERA_CHANNEL_NUM];         
    UINT nFeatureState[MAX_FEATURESTATE_NUM];        
    EM_REGISTER_DB_TYPE emRegisterDbType;            
    BYTE byReserved1[4];                             
    NET_PASSERBY_DB_CONFIG_INFO stuPasserbyDBConfig; 
    UINT nGroupSimilarity;                           
    UINT nMaskSimilarity;                            
} NET_FACERECONGNITION_GROUP_INFO;
typedef struct tagNET_ADD_FACERECONGNITION_GROUP_INFO
{
    DWORD dwSize;
    NET_FACERECONGNITION_GROUP_INFO stuGroupInfo; 
} NET_ADD_FACERECONGNITION_GROUP_INFO;
typedef struct tagNET_DELETE_FACERECONGNITION_GROUP_INFO
{
    DWORD dwSize;
    char szGroupId[DH_COMMON_STRING_64]; 
} NET_DELETE_FACERECONGNITION_GROUP_INFO;
typedef struct tagNET_MODIFY_FACERECONGNITION_GROUP_INFO
{
    DWORD dwSize;
    NET_FACERECONGNITION_GROUP_INFO stuGroupInfo; 
} NET_MODIFY_FACERECONGNITION_GROUP_INFO;
typedef struct tagNET_IN_OPERATE_FACERECONGNITION_GROUP
{
    DWORD dwSize;
    EM_OPERATE_FACERECONGNITION_GROUP_TYPE emOperateType; 
    void* pOPerateInfo;                                   
} NET_IN_OPERATE_FACERECONGNITION_GROUP;
typedef struct tagNET_OUT_OPERATE_FACERECONGNITION_GROUP
{
    DWORD dwSize;
    char szGroupId[DH_COMMON_STRING_64]; 
} NET_OUT_OPERATE_FACERECONGNITION_GROUP;
#define MAX_FACE_RECOGNITION_SERVER_PERSON_TYPE 64
typedef struct tagNET_IN_GET_FACERECOGNITION_PERSON_TYPE
{
    DWORD dwSize; 
} NET_IN_GET_FACERECOGNITION_PERSON_TYPE;
typedef struct tagNET_OUT_GET_FACERECOGNITION_PERSON_TYPE
{
    DWORD dwSize;                                                                    
    char szPersonType[MAX_FACE_RECOGNITION_SERVER_PERSON_TYPE][DH_COMMON_STRING_16]; 
    int nPersonTypeNum;                                                              
    BYTE byDefault[DH_COMMON_STRING_16];                                             
    int nDefaultNum;                                                                 
} NET_OUT_GET_FACERECOGNITION_PERSON_TYPE;
typedef struct tagNET_IN_FACERECOGNITIONSERVER_CAPSBILITYQUERY
{
    DWORD dwSize; 
} NET_IN_FACERECOGNITIONSERVER_CAPSBILITYQUERY;
typedef struct tagNET_FACEBOXCOLOR_CAPS
{
    BOOL bSupport;                  
    NET_COLOR_RGBA stuDefaultColor; 
    BYTE byReserved[1024];          
} NET_FACEBOXCOLOR_CAPS;
typedef enum tagEM_SUPPORT_SEARCH_BY_PIC
{
    EM_SUPPORT_SEARCH_BY_PIC_UNKNOWN,   
    EM_SUPPORT_SEARCH_BY_PIC_UNSUPPORT, 
    EM_SUPPORT_SEARCH_BY_PIC_SUPPORT,   
} EM_SUPPORT_SEARCH_BY_PIC;
typedef struct tagNET_OUT_FACERECOGNITIONSERVER_CAPSBILITYQUERY
{
    DWORD dwSize;                                  
    BOOL bmultiFind;                               
    UINT nmaxFaceType;                             
    NET_FACEBOXCOLOR_CAPS stuFaceBoxColor;         
    BOOL bAsynPush;                                
    UINT nMaxGroupNum;                             
    UINT nMaxPersonNum;                            
    UINT nMultiAppendPicLength;                    
    EM_SUPPORT_SEARCH_BY_PIC emSupportSearchByPic; 
    DWORD dwSearchTypeMask;                        
    UINT nSinglePicMaxLength;                      
    BOOL bPersonWithMultiFace;                     
    BOOL bSupportIDFromServer;                     
    UINT nSupportSMDPicSearchMask;                 
} NET_OUT_FACERECOGNITIONSERVER_CAPSBILITYQUERY;
typedef enum tagEM_OPERATE_FACERECOGNITION_PERSON_TYPE
{
    NET_PERSON_TYPE_UNKOWN, 
    NET_PERSON_TYPE_ADD,    
    NET_PERSON_TYPE_MODIFY, 
    NET_PERSON_TYPE_DELETE, 
} EM_OPERATE_FACERECOGNITION_PERSON_TYPE;
typedef struct tagNET_ADD_FACERECOGNITION_PERSON_TYPE_INFO
{
    DWORD dwSize;                     
    char szType[DH_COMMON_STRING_16]; 
} NET_ADD_FACERECOGNITION_PERSON_TYPE_INFO;
typedef struct tagNET_MODIFY_FACERECOGNITION_PERSON_TYPE_INFO
{
    DWORD dwSize;                        
    char szType[DH_COMMON_STRING_16];    
    char szNewType[DH_COMMON_STRING_16]; 
} NET_MODIFY_FACERECOGNITION_PERSON_TYPE_INFO;
typedef struct tagNET_DELETE_FACERECOGNITION_PERSON_TYPE_INFO
{
    DWORD dwSize;                     
    char szType[DH_COMMON_STRING_16]; 
} NET_DELETE_FACERECOGNITION_PERSON_TYPE_INFO;
typedef struct tagNET_IN_OPERATE_FACERECOGNITION_PERSON_TYPE
{
    DWORD dwSize;                                         
    EM_OPERATE_FACERECOGNITION_PERSON_TYPE emOperateType; 
    void* pOPerateInfo;                                   
} NET_IN_OPERATE_FACERECOGNITION_PERSON_TYPE;
typedef struct tagNET_OUT_OPERATE_FACERECOGNITION_PERSON_TYPE
{
    DWORD dwSize;                           
    char szFailedCode[DH_COMMON_STRING_16]; 
} NET_OUT_OPERATE_FACERECOGNITION_PERSON_TYPE;
typedef struct tagNET_IN_FIND_GROUP_INFO
{
    DWORD dwSize;
    char szGroupId[DH_COMMON_STRING_64]; 
} NET_IN_FIND_GROUP_INFO;
typedef struct tagNET_OUT_FIND_GROUP_INFO
{
    DWORD dwSize;
    NET_FACERECONGNITION_GROUP_INFO* pGroupInfos; 
    int nMaxGroupNum;                             
    int nRetGroupNum;                             
} NET_OUT_FIND_GROUP_INFO;
typedef struct tagNET_IN_SET_GROUPINFO_FOR_CHANNEL
{
    DWORD dwSize;
    int nChannelID;                                     
    int nGroupIdNum;                                    
    char szGroupId[MAX_GOURP_NUM][DH_COMMON_STRING_64]; 
    int nSimilaryNum;                                   
    int nSimilary[MAX_GOURP_NUM];                       
} NET_IN_SET_GROUPINFO_FOR_CHANNEL;
typedef struct tagNET_OUT_SET_GROUPINFO_FOR_CHANNEL
{
    DWORD dwSize;
} NET_OUT_SET_GROUPINFO_FOR_CHANNEL;
typedef struct tagNET_IN_GET_GROUPINFO_FOR_CHANNEL
{
    DWORD dwSize;
    int nChannelID; 
} NET_IN_GET_GROUPINFO_FOR_CHANNEL;
typedef struct tagNET_OUT_GET_GROUPINFO_FOR_CHANNEL
{
    DWORD dwSize;
    int nGroupIdNum;                                    
    char szGroupId[MAX_GOURP_NUM][DH_COMMON_STRING_64]; 
    int nSimilaryNum;                                   
    int nSimilary[MAX_GOURP_NUM];                       
} NET_OUT_GET_GROUPINFO_FOR_CHANNEL;
typedef struct tagNET_CB_FACE_FIND_STATE
{
    DWORD dwSize;
    int nToken;        
    int nProgress;     
    int nCurrentCount; 
} NET_CB_FACE_FIND_STATE;
typedef void(CALLBACK* fFaceFindState)(LLONG lLoginID, LLONG lAttachHandle, NET_CB_FACE_FIND_STATE* pstStates, int nStateNum, LDWORD dwUser);
typedef struct tagNET_IN_FACE_FIND_STATE
{
    DWORD dwSize; 
    int nTokenNum;                  
    int* nTokens;                   
    fFaceFindState cbFaceFindState; 
    LDWORD dwUser;                  
} NET_IN_FACE_FIND_STATE;
typedef struct tagNET_OUT_FACE_FIND_STATE
{
    DWORD dwSize;
} NET_OUT_FACE_FIND_STATE;
typedef struct tagNET_IN_FACE_RECOGNITION_SET_SEARCH_IMAGE_INFO
{
    DWORD dwSize;
    int nChannel;                          
    char szFilePath[DH_COMMON_STRING_256]; 
} NET_IN_FACE_RECOGNITION_SET_SEARCH_IMAGE_INFO;
typedef struct tagNET_OUT_FACE_RECOGNITION_SET_SEARCH_IMAGE_INFO
{
    DWORD dwSize;
} NET_OUT_FACE_RECOGNITION_SET_SEARCH_IMAGE_INFO;
typedef struct tagNET_DISPOSITION_CHANNEL_INFO
{
    int nChannelID;         
    int nSimilary;          
    char szChannelCode[64]; 
    BYTE bReserved[192];    
} NET_DISPOSITION_CHANNEL_INFO;
typedef struct tagNET_IN_FACE_RECOGNITION_PUT_DISPOSITION_INFO
{
    DWORD dwSize;
    char szGroupId[DH_COMMON_STRING_64];                                           
    int nDispositionChnNum;                                                        
    NET_DISPOSITION_CHANNEL_INFO stuDispositionChnInfo[DH_MAX_CAMERA_CHANNEL_NUM]; 
} NET_IN_FACE_RECOGNITION_PUT_DISPOSITION_INFO;
typedef struct tagNET_OUT_FACE_RECOGNITION_PUT_DISPOSITION_INFO
{
    DWORD dwSize;
    int nReportCnt;                          
    BOOL bReport[DH_MAX_CAMERA_CHANNEL_NUM]; 
} NET_OUT_FACE_RECOGNITION_PUT_DISPOSITION_INFO;
typedef struct tagNET_IN_FACE_RECOGNITION_DEL_DISPOSITION_INFO
{
    DWORD dwSize;
    char szGroupId[DH_COMMON_STRING_64];            
    int nDispositionChnNum;                         
    int nDispositionChn[DH_MAX_CAMERA_CHANNEL_NUM]; 
} NET_IN_FACE_RECOGNITION_DEL_DISPOSITION_INFO;
typedef struct tagNET_OUT_FACE_RECOGNITION_DEL_DISPOSITION_INFO
{
    DWORD dwSize;
    int nReportCnt;                          
    BOOL bReport[DH_MAX_CAMERA_CHANNEL_NUM]; 
} NET_OUT_FACE_RECOGNITION_DEL_DISPOSITION_INFO;
#define MAX_BIG_PIC_NUM 50 
#define MAX_TOKEN_NUM 128  
typedef enum tagEM_DETECT_OBJECT_TYPE
{
    EM_DETECT_OBJECT_TYPE_UNKNOWN = 0, 
    EM_DETECT_OBJECT_TYPE_FACE,        
    EM_DETECT_OBJECT_TYPE_VEHICLE,     
    EM_DETECT_OBJECT_TYPE_STRUCTLIZE,  
} EM_DETECT_OBJECT_TYPE;
typedef enum tagEM_DETECT_PROCESS_TYPE
{
    EM_DETECT_PROCESS_TYPE_UNKNOWN = 0, 
    EM_DETECT_PROCESS_TYPE_FEATURE,     
    EM_DETECT_PROCESS_TYPE_ATTRIBUTE,   
    EM_DETECT_PROCESS_TYPE_DETECT,      
} EM_DETECT_PROCESS_TYPE;
typedef enum tagEM_COORDINATE_TYPE
{
    EM_COORDINATE_TYPE_UNKNOWN = 0, 
    EM_COORDINATE_TYPE_ABSOLUTE,    
    EM_COORDINATE_TYPE_8192,        
} EM_COORDINATE_TYPE;
typedef struct tagNET_DETECT_BIG_PIC_INFO
{
    int nPicID;                                          
    DWORD dwOffSet;                                      
    DWORD dwFileLenth;                                   
    DWORD dwWidth;                                       
    DWORD dwHeight;                                      
    int nDetectRegionNum;                                
    NET_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    BYTE bReserved[44];                                  
} NET_DETECT_BIG_PIC_INFO;
typedef struct tagNET_DETECT_BIG_PIC_INFO_EX
{
    int nPicID;                                          
    DWORD dwOffSet;                                      
    DWORD dwFileLenth;                                   
    DWORD dwWidth;                                       
    DWORD dwHeight;                                      
    int nDetectRegionNum;                                
    NET_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    char szRequestID[64];                                
    char szPath[256];                                    
    EM_COORDINATE_TYPE emCoordinateType;                 
    EM_DETECT_OBJECT_TYPE emObjectType;                  
    UINT nTargetType;                                    
    int nProcessTypeNum;                                 
    EM_DETECT_PROCESS_TYPE emProcessType[8];             
    char* szData;                                        
    int nDataLen;                                        
    BYTE bReserved[1016];                                
} NET_DETECT_BIG_PIC_INFO_EX;
typedef struct tagNET_IN_FACE_RECOGNITION_DETECT_MULTI_FACE_INFO
{
    DWORD dwSize;                                           
    int nBigPicNum;                                         
    NET_DETECT_BIG_PIC_INFO stuBigPicInfo[MAX_BIG_PIC_NUM]; 
    char* pBuffer;                                               
    int nBufferLen;                                              
    EM_OBJECT_TYPE emDetectObjType;                              
    BOOL bBigPicInfoExEnable;                                    
    int nBigPicNumEx;                                            
    NET_DETECT_BIG_PIC_INFO_EX stuBigPicInfoEx[MAX_BIG_PIC_NUM]; 
    UINT nToken;                                                 
} NET_IN_FACE_RECOGNITION_DETECT_MULTI_FACE_INFO;
typedef struct tagNET_OUT_FACE_RECOGNITION_DETECT_MULTI_FACE_INFO
{
    DWORD dwSize; 
} NET_OUT_FACE_RECOGNITION_DETECT_MULTI_FACE_INFO;
typedef struct tagNET_SMALL_PIC_INFO
{
    int nSmallPicId;                
    NET_RECT stuRect;               
    EM_OBJECT_TYPE emDetectObjType; 
    BYTE bReserved[124];            
} NET_SMALL_PIC_INFO;
typedef enum tagEM_MULTIFACE_DETECT_ERRCODE
{
    EM_MULTIFACE_DETECT_UNKNOWN = -1, 
    EM_MULTIFACE_DETECT_SUCCESS,      
    EM_MULTIFACE_DETECT_DECODE_FAIL,  
    EM_MULTIFACE_DETECT_NO_OBJECT,    
} EM_MULTIFACE_DETECT_ERRCODE;
typedef struct tagNET_IMAGE_RELATION
{
    int nBigPicId;                                        
    int nSmallPicNum;                                     
    NET_SMALL_PIC_INFO stuSmallPicInfo[MAX_SMALLPIC_NUM]; 
    EM_MULTIFACE_DETECT_ERRCODE emDetectErrCode;          
    BYTE bReserved[124];                                  
} NET_IMAGE_RELATION;
typedef struct tagNET_CB_MULTIFACE_DETECT_STATE
{
    int nProgress;                       
    NET_IMAGE_RELATION stuImageRelation; 
    BYTE byReserved[512];                
} NET_CB_MULTIFACE_DETECT_STATE;
typedef void(CALLBACK* fMultiFaceDetectState)(LLONG lAttachHandle, NET_CB_MULTIFACE_DETECT_STATE* pstStates, LDWORD dwUser);
typedef struct tagNET_IMAGE_RELATION_LIST
{
    char* pszFeature;                                  
    int nFeatureLen;                                   
    char szFeatureID[64];                              
    NET_FACE_DATA stuFaceData;                         
    HUMAN_ATTRIBUTES_INFO stuHumanAttributes;          
    VA_OBJECT_NONMOTOR stuNonMotor;                    
    char szAlgorithmVersion[32];                       
    char szVendor[32];                                 
    EM_OBJECT_TYPE emObjectType;                       
    DH_POINT stuRectPoint[2];                          
    NET_HISTORY_TRAFFIC_CAR_INFO stuHistoryTrafficCar; 
    BYTE bReserved[1024];                              
} NET_IMAGE_RELATION_LIST;
typedef struct tagNET_IMAGE_RELATION_EX_IMAGEINFO
{
    int nOffset;         
    int nLength;         
    char szReserved[16]; 
} NET_IMAGE_RELATION_EX_IMAGEINFO;
typedef struct tagNET_IMAGE_RELATION_EX
{
    char szRequestID[64];                                 
    int nBigPicId;                                        
    int nSmallPicNum;                                     
    NET_SMALL_PIC_INFO stuSmallPicInfo[MAX_SMALLPIC_NUM]; 
    EM_MULTIFACE_DETECT_ERRCODE emDetectErrCode;          
    NET_IMAGE_RELATION_LIST stuImageRelation[32];         
    int nstuImageRelationNum;                             
    UINT nToken;                                          
    NET_IMAGE_RELATION_EX_IMAGEINFO stuImageInfo[32];     
    int nImageNum;                                        
    char* pData;                                          
    BYTE bReserved[248];                                  
} NET_IMAGE_RELATION_EX;
typedef struct tagNET_CB_MULTIFACE_DETECT_STATE_EX
{
    int nProgress;                          
    NET_IMAGE_RELATION_EX stuImageRelation; 
    BYTE byReserved[512];                   
} NET_CB_MULTIFACE_DETECT_STATE_EX;
typedef void(CALLBACK* fMultiFaceDetectStateEx)(LLONG lAttachHandle, NET_CB_MULTIFACE_DETECT_STATE_EX* pstStates, LDWORD dwUser);
typedef struct tagNET_IN_MULTIFACE_DETECT_STATE
{
    DWORD dwSize;                                     
    BYTE bReserved[4];                                
    fMultiFaceDetectState cbMultiFaceDetectState;     
    LDWORD dwUser;                                    
    fMultiFaceDetectStateEx cbMultiFaceDetectStateEx; 
    UINT nTokens[10];                                 
    int nTokensNum;                                   
} NET_IN_MULTIFACE_DETECT_STATE;
typedef struct tagNET_OUT_MULTIFACE_DETECT_STATE
{
    DWORD dwSize; 
} NET_OUT_MULTIFACE_DETECT_STATE;
typedef struct tagNET_REABSTRACT_PERSON_INFO
{
    char szUID[DH_MAX_PERSON_ID_LEN]; 
    BYTE bReserved[1024];
} NET_REABSTRACT_PERSON_INFO;
typedef struct tagNET_IN_FACE_RECOGNITION_REABSTRACT_INFO
{
    DWORD dwSize;                                        
    int nPersonNum;                                      
    NET_REABSTRACT_PERSON_INFO* pstReAbstractPersonInfo; 
} NET_IN_FACE_RECOGNITION_REABSTRACT_INFO;
typedef struct tagNET_OUT_FACE_RECOGNITION_REABSTRACT_INFO
{
    DWORD dwSize; 
} NET_OUT_FACE_RECOGNITION_REABSTRACT_INFO;
typedef struct tagNET_IN_FACE_RECOGNITION_GROUP_REABSTRACT_INFO
{
    DWORD dwSize;                                       
    int nGroupNum;                                      
    char szGroupId[MAX_GOURP_NUM][DH_COMMON_STRING_64]; 
} NET_IN_FACE_RECOGNITION_GROUP_REABSTRACT_INFO;
typedef struct tagNET_OUT_FACE_RECOGNITION_GROUP_REABSTRACT_INFO
{
    DWORD dwSize; 
    UINT nToken;  
} NET_OUT_FACE_RECOGNITION_GROUP_REABSTRACT_INFO;
typedef struct tagNET_IN_FACE_RECOGNITION_STOP_GROUP_REABSTRACT_INFO
{
    DWORD dwSize; 
    UINT nToken;  
} NET_IN_FACE_RECOGNITION_STOP_GROUP_REABSTRACT_INFO;
typedef struct tagNET_OUT_FACE_RECOGNITION_STOP_GROUP_REABSTRACT_INFO
{
    DWORD dwSize; 
} NET_OUT_FACE_RECOGNITION_STOP_GROUP_REABSTRACT_INFO;
typedef struct tagNET_IN_GET_FACE_PARAM
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_FACE_PARAM;
typedef struct tagNET_OUT_GET_FACE_PARAM
{
    DWORD dwSize;               
    int nRegMinQuality;         
    UINT nMinFaceSize;          
    unsigned short nConfidence; 
    unsigned short nAlignScore; 
    short nRoll;                
    short nPitch;               
    short nYaw;                 
    BYTE reserved[2];           
} NET_OUT_GET_FACE_PARAM;
typedef struct tagNET_IN_SET_FACE_PARAM
{
    DWORD dwSize;               
    int nChannel;               
    int nRegMinQuality;         
    UINT nMinFaceSize;          
    unsigned short nConfidence; 
    unsigned short nAlignScore; 
    short nRoll;                
    short nPitch;               
    short nYaw;                 
    BYTE reserved[6];           
} NET_IN_SET_FACE_PARAM;
typedef struct tagNET_OUT_SET_FACE_PARAM
{
    DWORD dwSize; 
} NET_OUT_SET_FACE_PARAM;
typedef struct tagNET_PER_GROUP_INFO
{
    UINT nPerGroupID;                                             
    char szName[128];                                             
    DH_TSECT stuTimeSection[DH_N_SCHEDULE_TSECT][DH_N_REC_TSECT]; 
    int nChannelCount;                                            
    UINT nPerChannel[600];                                        
    char szComment[256];                                          
    BYTE byReserved[256];                                         
} NET_PER_GROUP_INFO;
typedef enum tagNET_EM_OPERATE_ERROR_CODE
{
    NET_EM_OPERATE_ERROR_CODE_UNKNOWN = -1,        
    NET_EM_OPERATE_ERROR_CODE_SUCCESS = 0,         
    NET_EM_OPERATE_ERROR_CODE_GROUP_NOT_EXIST = 1, 
} NET_EM_OPERATE_ERROR_CODE;
typedef enum tagNET_EM_MODIFY_ERROR_CODE
{
    NET_EM_MODIFY_ERROR_CODE_UNKNOWN = -1,        
    NET_EM_MODIFY_ERROR_CODE_SUCCESS = 0,         
    NET_EM_MODIFY_ERROR_CODE_GROUP_NOT_EXIST = 1, 
    NET_EM_MODIFY_ERROR_CODE_UID_NOT_EXIST = 2,   
} NET_EM_MODIFY_ERROR_CODE;
typedef enum tagNET_EM_PERMISSSION_OPERATE_TYPE
{
    NET_EM_OPERATE_TYPE_UNKNOWN = -1, 
    NET_EM_OPERATE_TYPE_ADD = 0,      
    NET_EM_OPERATE_TYPE_MODIFY = 1,   
    NET_EM_OPERATE_TYPE_DELETE = 2,   
} NET_EM_PERMISSSION_OPERATE_TYPE;
typedef struct tagNET_IN_OPERATE_PER_GROUP
{
    DWORD dwSize;                                  
    int nGroupCount;                               
    NET_PER_GROUP_INFO stuGroupInfo[100];          
    NET_EM_PERMISSSION_OPERATE_TYPE emOperateType; 
} NET_IN_OPERATE_PER_GROUP;
typedef struct tagNET_OUT_OPERATE_PER_GROUP
{
    DWORD dwSize;                             
    int nGroupCount;                          
    int nPerGroupID[100];                     
    int nErrCodeCount;                        
    NET_EM_OPERATE_ERROR_CODE emErrCode[100]; 
} NET_OUT_OPERATE_PER_GROUP;
typedef struct tagNET_PERMISSION_PERSON_INFO
{
    UINT nUID;            
    int nGroupCount;      
    int nPerGroupID[100]; 
    BYTE byReserved[128]; 
} NET_PERMISSION_PERSON_INFO;
typedef struct tagNET_IN_MODIFY_PERMISSION
{
    DWORD dwSize;                                  
    int nPersonCount;                              
    NET_PERMISSION_PERSON_INFO stuPersonInfo[300]; 
} NET_IN_MODIFY_PERMISSION;
typedef struct tagNET_OUT_MODIFY_PERMISSION
{
    DWORD dwSize;                            
    int nUIDCount;                           
    int nUID[300];                           
    int nErrCodeCount;                       
    NET_EM_MODIFY_ERROR_CODE emErrCode[300]; 
} NET_OUT_MODIFY_PERMISSION;
typedef struct tagNET_STARTFIND_PERMISSION_CONDITION
{
    UINT nUIDCount;        
    UINT nUIDs[1024];      
    UINT nGroupIDCount;    
    UINT nGroupID[128];    
    char szReserved[2048]; 
} NET_STARTFIND_PERMISSION_CONDITION;
typedef struct tagNET_IN_STARTFIND_PERMISSION
{
    DWORD dwSize;                                              
    char szReserved[4];                                        
    NET_STARTFIND_PERMISSION_CONDITION stuPermissionCondition; 
} NET_IN_STARTFIND_PERMISSION;
typedef struct tagNET_OUT_STARTFIND_PERMISSION
{
    DWORD dwSize;    
    int nTotalCount; 
} NET_OUT_STARTFIND_PERMISSION;
typedef struct tagNET_DOFIND_PERMISSION_CONDITION
{
    UINT nBeginNumber;    
    int nCount;           
    char szReserved[128]; 
} NET_DOFIND_PERMISSION_CONDITION;
typedef struct tagNET_IN_DOFIND_PERMISSION
{
    DWORD dwSize;                                           
    char szReserved[4];                                     
    NET_DOFIND_PERMISSION_CONDITION stuPermissionCondition; 
} NET_IN_DOFIND_PERMISSION;
typedef struct tagNET_PERMISSION_CANDIDATES_INFO
{
    UINT nUID;             
    int nPerGroupIDCount;  
    UINT nPerGroupID[100]; 
    char szReserved[1024]; 
} NET_PERMISSION_CANDIDATES_INFO;
typedef struct tagNET_OUT_DOFIND_PERMISSION
{
    DWORD dwSize;                                  
    int nCadidatesFound;                           
    NET_PERMISSION_CANDIDATES_INFO* pstCandidates; 
    int nMaxNum;                                   
    char szReserved[4];                            
} NET_OUT_DOFIND_PERMISSION;
typedef struct tagNET_IN_GET_FACE_RECOGNITION_APPEND_TOKEN
{
    DWORD dwSize; 
} NET_IN_GET_FACE_RECOGNITION_APPEND_TOKEN;
typedef struct tagNET_OUT_GET_FACE_RECOGNITION_APPEND_TOKEN
{
    DWORD dwSize; 
    UINT nToken;  
} NET_OUT_GET_FACE_RECOGNITION_APPEND_TOKEN;
typedef struct tagNET_CB_BURN_CHECK_STATE
{
    DWORD dwSize;
    const char* szType; 
    BOOL bCheckResult;  
    BYTE byProgress;    
    BYTE reserved[3];
} NET_CB_BURN_CHECK_STATE;
typedef void(CALLBACK* fBurnCheckCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_CB_BURN_CHECK_STATE* pstState, void* reserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_BURN_CHECK
{
    DWORD dwSize;
    fBurnCheckCallBack cbBurnCheck; 
    LDWORD dwUser;                  
} NET_IN_ATTACH_BURN_CHECK;
typedef struct tagNET_OUT_ATTACH_BURN_CHECK
{
    DWORD dwSize;
} NET_OUT_ATTACH_BURN_CHECK;
typedef struct tagNET_CB_CAMERASTATE
{
    DWORD dwSize;
    int nChannel;                 
    CONNECT_STATE emConnectState; 
} NET_CB_CAMERASTATE;
typedef void(CALLBACK* fCameraStateCallBack)(LLONG lLoginID, LLONG lAttachHandle, const NET_CB_CAMERASTATE* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_CAMERASTATE
{
    DWORD dwSize;
    int* pChannels;                
    int nChannels;                 
    fCameraStateCallBack cbCamera; 
    LDWORD dwUser;                 
} NET_IN_CAMERASTATE;
typedef struct tagNET_OUT_CAMERASTATE
{
    DWORD dwSize;
    int nObjectID; 
} NET_OUT_CAMERASTATE;
typedef struct __NET_SNAP_COMMANDINFO
{
    char szCardInfo[16]; 
    char reserved[64];   
} NET_SNAP_COMMANDINFO, LPNET_SNAP_COMMANDINFO;
typedef struct
{
    int nChannelNum;    
    char szUseType[32]; 
    DWORD dwStreamSize; 
    char reserved[32];  
} DHDEV_USE_CHANNEL_STATE;
typedef struct
{
    char szUserName[32];   
    char szUserGroup[32];  
    NET_TIME time;         
    int nOpenedChannelNum; 
    DHDEV_USE_CHANNEL_STATE channelInfo[DH_MAX_CHANNUM];
    char szIpAddress[DH_MAX_IPADDR_LEN_EX]; 
    char reserved[24];
} DHDEV_USER_NET_INFO;
typedef struct
{
    int nUserCount; 
    DHDEV_USER_NET_INFO stuUserInfo[32];
    char reserved[256];
} DHDEV_TOTAL_NET_STATE;
typedef struct
{
    char szIpAddress[DH_MAX_IPADDR_LEN]; 
    char szUserGroup[32];                
    char szUserName[32];                 
    char reserved[64];
} DHDEV_USER_REJECT_INFO;
typedef struct
{
    int nUserCount; 
    DHDEV_USER_REJECT_INFO stuUserInfo[10];
    char reserved[256];
} DHDEV_REJECT_USER;
typedef struct
{
    char szIpAddress[DH_MAX_IPADDR_LEN]; 
    char szUserGroup[32];                
    char szUserName[32];                 
    int nForbiddenTime;                  
    char reserved[64];
} DHDEV_USER_SHIELD_INFO;
typedef struct
{
    int nUserCount; 
    DHDEV_USER_SHIELD_INFO stuUserInfo[10];
    char reserved[256];
} DHDEV_SHIELD_USER;
typedef struct
{                       
    char chPreLogi;     
    char chPreLati;     
    BYTE reserved[6];   
    double dbLongitude; 
    double dbLatitude;  
} DHDEV_LONGI_LATI;
typedef struct
{
    char szPhoneNum[DH_MAX_PHONE_NO_LEN]; 
    NET_TIME stMsgTime;                   
    char szMsgType[DH_MAX_MSGTYPE_LEN];   
    char szSmsContext[DH_MAX_MSG_LEN];    
    DHDEV_LONGI_LATI stLogiLati;          
    unsigned int uFlag;                   
    char szNavigationType[16];            
    char szAddress[32];                   
    char szNavigationMode[32];            
    DHDEV_LONGI_LATI stPassLogiLati[5];   
    DHDEV_LONGI_LATI stNoPassLogiLati[5]; 
    BYTE reserved[256];
} DHDEV_NAVIGATION_SMSS;
typedef struct __DHDEV_WATERMAKE_CFG
{
    DWORD dwSize;
    int nEnable;                                
    int nStream;                                
    int nKey;                                   
    char szLetterData[DH_MAX_WATERMAKE_LETTER]; 
    char szData[DH_MAX_WATERMAKE_DATA];         
    BYTE bReserved[512];                        
} DHDEV_WATERMAKE_CFG;
typedef struct
{
    DWORD dwSize;
    DWORD dwLocalMask;                 
    DWORD dwMobileMask;                
    int RemoteType;                    
    DWORD dwRemoteMask;                
    DWORD dwRemoteSecondSelLocal;      
    DWORD dwRemoteSecondSelMobile;     
    char SubRemotePath[MAX_PATH_STOR]; 
    DWORD dwFunctionMask;              
    DWORD dwAutoSyncMask;              
    BYTE bAutoSyncRange;               
    char reserved[119];
} DH_STORAGE_STATION_CFG;
#define MAX_ALARM_DECODER_NUM 16
typedef struct
{
    DWORD dwAlarmDecoder; 
    BYTE bDecoderIndex;   
    BYTE bReserved[3];
} ALARM_DECODER;
typedef struct
{
    int nAlarmDecoderNum;
    ALARM_DECODER stuAlarmDecoder[MAX_ALARM_DECODER_NUM];
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE bReserved[32];
} ALARM_DECODER_ALARM;
typedef struct
{
    BOOL bError;       
    DWORD dwErrorMask; 
    DWORD dwDecChnnelMask;                
    DWORD dwDecChnnelMask1;               
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE bReserved[24];
} DSP_ALARM;
typedef struct
{
    int nFDDINum;
    BYTE bAlarm[256];
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_FDDI_ALARM;
#define ALARM_PTZ_LOCATION_INFO DH_PTZ_LOCATION_INFO
typedef struct
{
    BOOL bEnable;   
    int Volume_min; 
    int Volume_max; 
    char reserved[128];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];
    DH_MSG_HANDLE struHandle; 
} DH_AUDIO_DETECT_INFO;
typedef struct
{
    DWORD dwSize;
    int AlarmNum;
    DH_AUDIO_DETECT_INFO AudioDetectAlarm[DH_MAX_AUDIO_IN_NUM];
    char reserved[256];
} DH_AUDIO_DETECT_CFG;
typedef struct
{
    BOOL bTourEnable;    
    int nTourPeriod;     
    DWORD dwChannelMask; 
    char reserved[64];
} DH_VIDEOGROUP_CFG;
typedef struct
{
    DWORD dwSize;
    int nMatrixNum; 
    DH_VIDEOGROUP_CFG struVideoGroup[DH_MATRIX_MAXOUT];
    char reserved[32];
} DHDEV_VIDEO_MATRIX_CFG;
typedef struct
{
    DWORD dwSize;
    BOOL bSnapEnable;                 
    int iSnapInterval;                
    char szHostIp[DH_MAX_IPADDR_LEN]; 
    WORD wHostPort;
    int iMsgInterval;                
    char szUrlState[DH_MAX_URL_LEN]; 
    char szUrlImage[DH_MAX_URL_LEN]; 
    char szDevId[DH_MAX_DEV_ID_LEN]; 
    BYTE byReserved[2];
} DHDEV_URL_CFG;
typedef struct
{
    char szVendor[DH_MAX_STRING_LEN];
    char szType[DH_MAX_STRING_LEN];
    char reserved[128];
} DHDEV_OEM_INFO;
typedef struct
{
    DWORD rgbaFrontground; 
    DWORD rgbaBackground;  
    RECT rcRelativePos;    
    BOOL bPreviewBlend;    
    BOOL bEncodeBlend;     
    BYTE bReserved[4];     
} DH_DVR_VIDEO_WIDGET;
typedef struct
{
    DH_DVR_VIDEO_WIDGET StOSD_POS;          
    char SzOSD_Name[DH_VIDEO_OSD_NAME_NUM]; 
} DH_DVR_VIDEOITEM;
typedef struct
{
    DWORD dwSize;
    DH_DVR_VIDEOITEM StOSDTitleOpt[DH_VIDEO_CUSTOM_OSD_NUM]; 
    BYTE bReserved[16];                                      
} DH_DVR_VIDEOOSD_CFG;
typedef struct
{
    BYTE bEnable; 
    BYTE bBeginHour;
    BYTE bBeginMin;
    BYTE bBeginSec;
    BYTE bEndHour;
    BYTE bEndMin;
    BYTE bEndSec;
    BYTE bReserved; 
} DH_3G_TIMESECT, *LPDH_3G_TIMESECT;
typedef struct
{
    DWORD dwSize;
    BOOL bEnable;         
    DWORD dwTypeMask;     
    DWORD dwNetType;      
    char szAPN[128];      
    char szDialNum[128];  
    char szUserName[128]; 
    char szPWD[128];      
    BOOL iAccessStat;      
    char szDevIP[16];      
    char szSubNetMask[16]; 
    char szGateWay[16];    
    int iKeepLive;                                 
    DH_3G_TIMESECT stSect[DH_N_WEEKS][DH_N_TSECT]; 
    BYTE byActivate;                               
    BYTE bySimStat;       
    char szIdentify[128]; 
    bool bPPPEnable;      
    BYTE bPPPState;       
    BYTE bNetCardState;   
    char szPhyCardNo[32]; 
    char Reserved[4];     
    BYTE byPinShow;       
    BYTE byPinEnable;     
    BYTE byPinCount;      
    char szPinNo[16]; 
} DHDEV_CDMAGPRS_CFG;
typedef struct
{
    DWORD dwSize;
    int nType;          
    int nValue;         
    char Reserved[128]; 
} DHDEV_RECORD_PACKET_CFG;
typedef struct __DEV_AUTOREGISTER_INFO
{
    LONG lConnectionID;                 
    char szServerIp[DH_MAX_IPADDR_LEN]; 
    int nPort;                          
    int nState;                         
    char reserved[16];
} DEV_AUTOREGISTER_INFO;
typedef struct __DEV_SERVER_AUTOREGISTER
{
    DWORD dwSize;
    int nRegisterSeverCount;                                                     
    DEV_AUTOREGISTER_INFO stuDevRegisterSeverInfo[DH_CONTROL_AUTO_REGISTER_NUM]; 
    char reserved[256];
} DEV_SERVER_AUTOREGISTER, *LPDEV_SERVER_AUTOREGISTER;
typedef struct
{
    DWORD dwSize;
    char szSourFile[MAX_PATH_STOR]; 
    int nFileSize;                  
    char szBurnFile[MAX_PATH_STOR]; 
    BYTE bReserved[64];
} DHDEV_BURNFILE_TRANS_CFG;
typedef struct
{
    char szFile[MAX_PATH_STOR]; 
    int nFileSize;              
    BYTE byChannelId;           
    BYTE byManufactryType;      
    BYTE byReserved[126];       
} DHDEV_UPGRADE_FILE_INFO;
typedef struct
{
    char szFile[MAX_PATH_STOR]; 
    int nFileSize;              
    BYTE byFileType;            
    BYTE byAction;              
    BYTE byReserved[126];       
} DHDEV_BLACKWHITE_LIST_INFO;
typedef struct
{
    char szFile[MAX_PATH_STOR]; 
    BYTE byFileType;            
    BYTE byReserved[127];       
} DHDEV_LOAD_BLACKWHITE_LIST_INFO;
typedef struct
{
    BOOL bEnable; 
    int nPort;    
    BYTE bReserved[64];
} DHDEV_OSD_ENABLE_CFG;
typedef struct
{
    BOOL bAutoBootEnable;             
    DWORD dwAutoBootTime;             
    BOOL bAutoShutDownEnable;         
    DWORD dwAutoShutDownTime;         
    DWORD dwShutDownDelayTime;        
    BYTE bEventNoDisk;                
    BYTE bWifiEnable;                 
    BYTE bUpperSpeedEnable;           
    BYTE bLowerSpeedEnable;           
    DWORD dwUpperSpeedValue;          
    DWORD dwLowerSpeedValue;          
    DWORD dwUpperSpeedDelayTime;      
    DWORD dwLowerSpeedDelayTime;      
    DWORD dwAlarmMaskEnable;          
    BOOL bSpeedOverAlarmRecordEnable; 
    BOOL bSpeedLowAlarmRecordEnable;  
    BYTE bReserved[480];              
} DHDEV_ABOUT_VEHICLE_CFG;
typedef struct
{
    DWORD dwDataSource;      
    char szProtocol[32][33]; 
    BYTE bReserved[256];
} DHDEV_ATM_OVERLAY_GENERAL;
typedef struct
{
    DWORD dwDataSource;  
    char szProtocol[33]; 
    BYTE bReserved_1[3];
    DWORD dwChannelMask; 
    BYTE bMode;          
    BYTE bLocation;      
    BYTE bReserved_3[2];
    int nLatchTime; 
    BYTE bReserved_4[3];
    BYTE bRecordSrcKeyNum; 
    int nRecordSrcKey[32]; 
    BYTE bReserved_2[120];
} DHDEV_ATM_OVERLAY_CONFIG;
typedef struct
{
    DWORD dwSize;        
    DWORD dwDataSource;  
    char szProtocol[33]; 
    BYTE bReserved_1[3];
    DWORD dwChannelMask[8]; 
    BYTE bMode;             
    BYTE bLocation;         
    BYTE bReserved_3[2];
    int nLatchTime; 
    BYTE bReserved_4[3];
    BYTE bRecordSrcKeyNum;  
    int nRecordSrcKey[256]; 
} DHDEV_ATM_OVERLAY_CONFIG_EX;
typedef struct tagNET_RADAR_CARSPEED_INFO
{
    int nTriggerLower; 
    int nTriggerUpper; 
    int nLimitLower;   
    int nLimitUpper;   
} NET_RADAR_CARSPEED_INFO;
typedef struct tagDEV_DAHUA_RADAR_CONFIG
{
    int nAngle;                                
    BOOL bLowSpeed;                            
    BOOL bSpeedForSize;                        
    NET_RADAR_CARSPEED_INFO stuSmallCarSpeed;  
    NET_RADAR_CARSPEED_INFO stuMediumCarSpeed; 
    NET_RADAR_CARSPEED_INFO stuBigCarSpeed;    
    char szName[256];                          
    int nSensitivity;                          
    int nDetectMode;                           
    BYTE bReserved[1024];
} DEV_DAHUA_RADAR_CONFIG;
typedef struct tagNET_STJ77D5_RADAR_CONFIG
{
    UINT nLaneNumber;                 
    UINT nDetectMode;                 
    double dbHeight;                  
    double dbHorizonShift;            
    UINT nLaneCount;                  
    double dbLaneWidth[4];            
    double dbStopLine;                
    UINT nSceneMode;                  
    double dbShiftAngle;              
    double dbLengthwayShiftDistance;  
    double dbSensitive;               
    UINT nIDset;                      
    UINT nWorkMode;                   
    UINT nRadarFlowTime;              
    UINT nRadarFlowSwitch;            
    UINT nNonMotorDiscern;            
    int nVehicleDistinguish;          
    UINT nStopTargetDisappearTime;    
    UINT nStartLane;                  
    UINT nRadarLanNumber;             
    UINT nVirtualCoilTriggerCount;    
    UINT nVirtualCoilTrigger[4];      
    UINT nVirtualCoilDistanceCount;   
    double dbVirtualCoilDistance[4];  
    UINT nVirtualCoilLengthCount;     
    double dbVirtualCoilLength[4];    
    double dbCameraToRoadEndDistance; 
    double dbCameraToStopLane;        
    UINT nLaneDirection[4];           
    UINT nLaneDirectionCount;         
    BYTE bReserved[1020];
} NET_STJ77D5_RADAR_CONFIG;
typedef struct tagDEV_RADAR_CONFIG
{
    DWORD dwSize;
    BOOL bEnable;                                   
    int nPort;                                      
    DH_COMM_PROP stuCommAttr;                       
    int nAddress;                                   
    int nPreSpeedWait;                              
    int nDelaySpeedWait;                            
    BOOL bDahuaRadarEnable;                         
    DEV_DAHUA_RADAR_CONFIG stuDhRadarConfig;        
    BOOL bSTJ77D5RadarEnable;                       
    NET_STJ77D5_RADAR_CONFIG stuSTJ77D5RadarConfig; 
} DEV_RADAR_CONFIG;
typedef struct tagNET_RADAR_RFIDCARD_CONFIG
{
    char szCardID[24];    
    UINT nValidTime;      
    UINT nInvalidTime;    
    char byReserved[256]; 
} NET_RADAR_RFIDCARD_CONFIG;
typedef struct tagNET_CFG_RADAR_RFIDCARD_INFO
{
    DWORD dwSize;                               
    int nCardNum;                               
    NET_RADAR_RFIDCARD_CONFIG stuCardInfo[256]; 
} NET_CFG_RADAR_RFIDCARD_INFO;
typedef struct tagNET_REMOTE_CARD_INFO
{
    BOOL bEnable;         
    char szCardID[24];    
    char szName[128];     
    char szReserved[868]; 
} NET_REMOTE_CARD_INFO;
typedef struct tagNET_CFG_RADAR_REMOTE_CARD_INFO
{
    DWORD dwSize;                           
    UINT nMode;                             
    int nCardNum;                           
    NET_REMOTE_CARD_INFO stuCardInfo[1024]; 
} NET_CFG_RADAR_REMOTE_CARD_INFO;
typedef struct tagNET_CFG_RADAR_RFID_READ_DISTANCE_INFO
{
    DWORD dwSize;  
    BOOL bEnable;  
    int nDistance; 
    int nWidth;    
} NET_CFG_RADAR_RFID_READ_DISTANCE_INFO;
typedef struct tagNET_CFG_RADAR_STATIC_BACKGROUND_INFO
{
    DWORD dwSize; 
    int nValue;   
} NET_CFG_RADAR_STATIC_BACKGROUND_INFO;
#define DH_MAX_BACKUPDEV_NUM 16
#define DH_MAX_BACKUP_NAME 32
typedef struct
{
    int nBackupDevNum;                                               
    char szBackupDevNames[DH_MAX_BACKUPDEV_NUM][DH_MAX_BACKUP_NAME]; 
} DHDEV_BACKUP_LIST, *LPDHDEV_BACKUP_LIST;
typedef enum __BACKUP_TYPE
{
    BT_DHFS = 0, 
    BT_DISK,     
    BT_CDRW      
} DHDEV_BACKUP_TYPE;
typedef enum __BACKUP_BUS
{
    BB_USB = 0, 
    BB_1394,    
    BB_IDE,     
    BB_ESATA,   
} DHDEV_BACKUP_BUS;
typedef struct
{
    char szName[32];       
    BYTE byType;           
    BYTE byBus;            
    UINT nCapability;      
    UINT nRemain;          
    char szDirectory[128]; 
} DHDEV_BACKUP_INFO, *LPDHDEV_BACKUP_INFO;
typedef struct
{
    char szName[32];  
    UINT nCapability; 
    UINT nRemain;     
} DHDEV_BACKUP_FEEDBACK, *LPDHDEV_BACKUP_FEEDBACK;
#define DH_MAX_BACKUPRECORD_NUM 1024
typedef struct
{
    char szDeviceName[DH_MAX_BACKUP_NAME];                      
    int nRecordNum;                                             
    NET_RECORDFILE_INFO stuRecordInfo[DH_MAX_BACKUPRECORD_NUM]; 
} BACKUP_RECORD, *LPBACKUP_RECORD;
typedef struct
{
    int iChannelID;               
    DH_RealPlayType realplayType; 
    char reserve[32];
} DHDEV_IN_MULTIPLAY_PARAM;
typedef struct
{
    int iChannelID;    
    LLONG lRealHandle; 
    char reserve[32];
} DHDEV_OUT_MULTIPLAY_PARAM;
typedef struct
{
    BOOL bChnEn;
    char szChnId[DH_INTERVIDEO_UCOM_CHANID];
} DH_INTERVIDEO_UCOM_CHN_CFG;
typedef struct
{
    DWORD dwSize;
    BOOL bFuncEnable;                          
    BOOL bAliveEnable;                         
    DWORD dwAlivePeriod;                       
    char szServerIp[DH_MAX_IPADDR_LEN];        
    WORD wServerPort;                          
    char szRegPwd[DH_INTERVIDEO_UCOM_REGPSW];  
    char szDeviceId[DH_INTERVIDEO_UCOM_DEVID]; 
    char szUserName[DH_INTERVIDEO_UCOM_USERNAME];
    char szPassWord[DH_INTERVIDEO_UCOM_USERPSW];
    DH_INTERVIDEO_UCOM_CHN_CFG struChnInfo[DH_MAX_CHANNUM]; 
} DHDEV_INTERVIDEO_UCOM_CFG;
typedef struct
{
    DWORD dwSize;
    unsigned short usCompanyID[2];     
    char szDeviceNO[32];               
    char szVSName[32];                 
    char szVapPath[32];                
    unsigned short usTcpPort;          
    unsigned short usUdpPort;          
    bool bCsEnable[4];                 
    char szCsIP[16];                   
    unsigned short usCsPort[2];        
    bool bHsEnable[4];                 
    char szHsIP[16];                   
    unsigned short usHsPort[2];        
    int iHsIntervalTime;               
    bool bRsEnable[4];                 
    char szRsIP[16];                   
    unsigned short usRsPort[2];        
    int iRsAgedTime;                   
    char szAuthorizeServerIp[16];      
    unsigned short usAuthorizePort[2]; 
    char szAuthorizeUsername[32];      
    char szAuthorizePassword[36];      
    char szIpACS[16];             
    unsigned short usPortACS[2];  
    char szUsernameACS[32];       
    char szPasswordACS[36];       
    bool bVideoMonitorEnabled[4]; 
    int iVideoMonitorInterval;    
    char szCoordinateGPS[64]; 
    char szPosition[32];      
    char szConnPass[36];      
} DHDEV_INTERVIDEO_BELL_CFG;
typedef struct
{
    DWORD dwSize;
    unsigned short nSevPort;                    
    char szSevIp[DH_INTERVIDEO_NSS_IP];         
    char szDevSerial[DH_INTERVIDEO_NSS_SERIAL]; 
    char szUserName[DH_INTERVIDEO_NSS_USER];
    char szPwd[DH_INTERVIDEO_NSS_PWD];
} DHDEV_INTERVIDEO_NSS_CFG;
typedef struct
{
    char szDevSerial[DH_INTERVIDEO_AMP_DEVICESERIAL]; 
    char szDevName[DH_INTERVIDEO_AMP_DEVICENAME];     
    char szRegUserName[DH_INTERVIDEO_AMP_USER];       
    char szRegPwd[DH_INTERVIDEO_AMP_PWD];             
    BYTE bReserved[128];
} DHDEV_INTERVIDEO_AMP_CFG;
typedef struct
{
    DWORD dwActionMask;                         
    DWORD dwActionFlag;                         
    BYTE byRelAlarmOut[DH_MAX_ALARMOUT_NUM_EX]; 
    DWORD dwDuration;                           
    BYTE byRecordChannel[DH_MAX_VIDEO_IN_NUM_EX]; 
    DWORD dwRecLatch;                             
    BYTE bySnap[DH_MAX_VIDEO_IN_NUM_EX]; 
    BYTE byTour[DH_MAX_VIDEO_IN_NUM_EX]; 
    DH_PTZ_LINK struPtzLink[DH_MAX_VIDEO_IN_NUM_EX];
    DWORD dwEventLatch;                           
    BYTE byRelWIAlarmOut[DH_MAX_ALARMOUT_NUM_EX]; 
    BYTE bMessageToNet;
    BYTE bMMSEn;                          
    BYTE bySnapshotTimes;                 
    BYTE bMatrixEn;                       
    DWORD dwMatrix;                       
    BYTE bLog;                            
    BYTE bSnapshotPeriod;                 
    BYTE byTour2[DH_MAX_VIDEO_IN_NUM_EX]; 
    BYTE byEmailType;                     
    BYTE byEmailMaxLength;                
    BYTE byEmailMaxTime;                  
    BYTE byReserved[475];
} DH_MSG_HANDLE_EX;
typedef struct
{
    BYTE byAlarmType; 
    BYTE byAlarmEn;   
    BYTE byReserved[2];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE_EX struHandle;                 
} DH_ALARMIN_CFG_EX, *LPDHDEV_ALARMIN_CFG_EX;
typedef struct
{
    BYTE byMotionEn; 
    BYTE byReserved;
    WORD wSenseLevel;                              
    WORD wMotionRow;                               
    WORD wMotionCol;                               
    BYTE byDetected[DH_MOTION_ROW][DH_MOTION_COL]; 
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];   
    DH_MSG_HANDLE_EX struHandle;                   
} DH_MOTION_DETECT_CFG_EX;
typedef struct
{
    BOOL byFireEn;               
    DH_MSG_HANDLE_EX struHandle; 
    BYTE byReserved[128];
} DHDEV_FIRE_ALARM_CFG;
typedef struct
{
    BYTE byStaticEn;                               
    BYTE byLatch;                                  
    WORD wSenseLevel;                              
    WORD wStaticRow;                               
    WORD wStaticCol;                               
    BYTE byDetected[DH_STATIC_ROW][DH_STATIC_COL]; 
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT];   
    DH_MSG_HANDLE_EX struHandle;                   
    int nLatch;                                    
    BYTE bReserved[64];                            
} DH_STATIC_DETECT_CFG_EX;
typedef struct _DHDEV_ACC_POWEROFF_CFG
{
    BOOL bEnable;                
    int nDelayTime;              
    DH_MSG_HANDLE_EX struHandle; 
    BYTE Reserved[128];          
} DHDEV_ACC_POWEROFF_CFG;
typedef struct _DHDEV_EXPLOSION_PROOF_CFG
{
    BOOL bEnable;                
    DH_MSG_HANDLE_EX struHandle; 
    BYTE Reserved[128];          
} DHDEV_EXPLOSION_PROOF_CFG;
typedef struct _DHDEV_RAID_EVENT_CFG
{
    BOOL bEnable;                
    DH_MSG_HANDLE_EX struHandle; 
    BYTE Reserved[128];          
} DHDEV_RAID_EVENT_CFG;
typedef struct
{
    BYTE byAlarmEn; 
    BYTE byReserved[3];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE_EX struHandle;                 
} DH_VIDEO_LOST_CFG_EX;
typedef struct
{
    BYTE byBlindEnable; 
    BYTE byBlindLevel;  
    BYTE byReserved[2];
    DH_TSECT stSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE_EX struHandle;                 
} DH_BLIND_CFG_EX;
typedef struct
{
    BYTE byNoDiskEn; 
    BYTE byReserved_1[3];
    DH_TSECT stNDSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE_EX struNDHandle;                 
    BYTE byLowCapEn;                               
    BYTE byLowerLimit;                             
    BYTE byReserved_2[2];
    DH_TSECT stLCSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE_EX struLCHandle;                 
    BYTE byDiskErrEn;                              
    BYTE bDiskNum;
    BYTE byReserved_3[2];
    DH_TSECT stEDSect[DH_N_WEEKS][DH_N_REC_TSECT]; 
    DH_MSG_HANDLE_EX struEDHandle;                 
} DH_DISK_ALARM_CFG_EX;
typedef struct
{
    BYTE byEnable;
    BYTE byReserved[3];
    DH_MSG_HANDLE_EX struHandle;
} DH_NETBROKEN_ALARM_CFG_EX;
typedef struct __DEV_ENCODER_CFG
{
    int nChannels;                   
    DEV_ENCODER_INFO stuDevInfo[32]; 
    BYTE byHDAbility;                
    BYTE bTVAdjust;                  
    BYTE bDecodeTour;                
    BYTE bRemotePTZCtl;              
    char reserved[12];
} DEV_ENCODER_CFG, *LPDEV_ENCODER_CFG;
typedef struct __DEV_ENCODER_CFG_EX
{
    int nChannels;                    
    DEV_ENCODER_INFO stuDevInfo[128]; 
    BYTE byHDAbility;                 
    BYTE bTVAdjust;     
    BYTE bDecodeTour;   
    BYTE bRemotePTZCtl; 
    char reserved[256];
} DEV_ENCODER_CFG_EX, *LPDEV_ENCODER_CFG_EX;
typedef struct __DEV_ENCODER_CFG_EX2
{
    int nChannels;                 
    int nDevInfoMaxNum;            
    DEV_ENCODER_INFO* pstuDevInfo; 
    BYTE byHDAbility;              
    BYTE bTVAdjust;     
    BYTE bDecodeTour;   
    BYTE bRemotePTZCtl; 
    char reserved[256];
} DEV_ENCODER_CFG_EX2, *LPDEV_ENCODER_CFG_EX2;
typedef struct tagDHCONFIG_CONTROLER
{
    DH_COMM_PROP struComm;              
    BYTE bLightGroup[DH_MAX_LIGHT_NUM]; 
    BYTE bDeviceAddr;                   
    BYTE bComPortType;                  
    BYTE bReserved[6];                  
} DH_CONFIG_CONTROLER;
typedef struct __DHDEV_LIGHTCONTROL_CFG
{
    DH_CONFIG_CONTROLER struControlers[DH_MAX_CONTROLER_NUM]; 
    BYTE bControlerNum;                                       
    BYTE bReserved[1023];                                     
} DHDEV_LIGHTCONTROL_CFG, *LPDHDEV_LIGHTCONTROL_CFG;
typedef struct
{
    int nStrategy;     
    int nUpLimit;      
    int nreserved[22]; 
} DHDEV_3GFLOW_INFO_CFG;
typedef struct
{
    char szLinkAddr[44];   
    char szHostIP[40];     
    DWORD dwPreFix;        
    char szGateWay[40];    
    BOOL bAutoGet;         
    char szPrimaryDns[40]; 
    char szSecondDns[40];  
    char cReserved[256];   
} DHDEV_IPV6_CFG;
typedef struct __DEV_URGENCY_RECORD_CFG
{
    DWORD dwSize;         
    BOOL bEnable;         
    UINT nMaxRecordTime;  
    char szClientMac[64]; 
} DHDEV_URGENCY_RECORD_CFG;
typedef struct __DEV_ELEVATOR_ATTRI_CFG
{
    DWORD dwSize;         
    UINT nMAXFloorNum;    
    UINT nFloorDelayTime; 
    UINT nIntervalTime;   
} DHDEV_ELEVATOR_ATTRI_CFG;
typedef struct tagDHDEV_VIRTUALCAMERA_STATE_INFO
{
    DWORD nStructSize;                
    int nChannelID;                   
    CONNECT_STATE emConnectState;     
    UINT uiPOEPort;                   
    char szDeviceName[64];            
    char szDeviceType[128];           
    char szSystemType[128];           
    char szSerialNo[DH_SERIALNO_LEN]; 
    int nVideoInput;                  
    int nAudioInput;                  
    int nAlarmOutput;                 
} DHDEV_VIRTUALCAMERA_STATE_INFO;
typedef struct tagDHDEV_TRAFFICWORKSTATE_INFO
{
    DWORD nStructSize;               
    int nChannelID;                  
    DH_TRAFFIC_SNAP_MODE emSnapMode; 
} DHDEV_TRAFFICWORKSTATE_INFO;
typedef enum tagEM_NET_DEFENCE_AREA_TYPE
{
    EM_NET_DEFENCE_AREA_TYPE_UNKNOW,        
    EM_NET_DEFENCE_AREA_TYPE_INTIME,        
    EM_NET_DEFENCE_AREA_TYPE_DELAY,         
    EM_NET_DEFENCE_AREA_TYPE_FULLDAY,       
    EM_NET_DEFENCE_AREA_TYPE_Follow,        
    EM_NET_DEFENCE_AREA_TYPE_MEDICAL,       
    EM_NET_DEFENCE_AREA_TYPE_PANIC,         
    EM_NET_DEFENCE_AREA_TYPE_FIRE,          
    EM_NET_DEFENCE_AREA_TYPE_FULLDAYSOUND,  
    EM_NET_DEFENCE_AREA_TYPE_FULLDATSLIENT, 
    EM_NET_DEFENCE_AREA_TYPE_ENTRANCE1,     
    EM_NET_DEFENCE_AREA_TYPE_ENTRANCE2,     
    EM_NET_DEFENCE_AREA_TYPE_INSIDE,        
    EM_NET_DEFENCE_AREA_TYPE_OUTSIDE,       
    EN_NET_DEFENCE_AREA_TYPE_PEOPLEDETECT,  
    EM_NET_DEFENCE_AREA_TYPE_ROBBERY,       
} EM_NET_DEFENCE_AREA_TYPE;
typedef struct tagALARM_ALARM_INFO_EX2
{
    DWORD dwSize;
    int nChannelID;                             
    int nAction;                                
    NET_TIME stuTime;                           
    NET_SENSE_METHOD emSenseType;               
    DH_MSG_HANDLE_EX stuEventHandler;           
    EM_NET_DEFENCE_AREA_TYPE emDefenceAreaType; 
    UINT nEventID;                              
    char szName[DH_COMMON_STRING_32];           
    int nCount;                                 
    NET_GPS_STATUS_INFO stuGPS;                 
    char szUserID[32];                          
    char szUserName[128];                       
    char szSN[32];                              
    BOOL bExAlarmIn;                            
    int nAreaNums;                              
    int nAreas[64];                             
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE byReserved[568];                       
} ALARM_ALARM_INFO_EX2;
typedef struct tagDEV_EVENT_ALARM_IPC_INFO
{
    int nChannelID;        
    char szName[128];      
    char bReserved1[4];    
    double PTS;            
    NET_TIME_EX UTC;       
    int nEventID;          
    int nAction;           
    BYTE byReserved[1024]; 
} DEV_EVENT_ALARM_IPC_INFO;
typedef struct RESERVED_DATA_INTEL_BOX
{
    DWORD dwEventCount;    
    DWORD* dwPtrEventType; 
    DWORD dwInternalTime;  
    BYTE bReserved[1020];  
} ReservedDataIntelBox;
#define RESERVED_TYPE_FOR_INTEL_BOX 0x00000001
typedef struct RESERVED_PARA
{
    DWORD dwType; 
    void* pData; 
} ReservedPara;
#define RESERVED_TYPE_FOR_PATH 0x00000100
typedef enum tagNET_PICTURE_PATH_TYPE
{
    NET_PATH_LOCAL_PATH, 
    NET_PATH_FTP_PATH,   
    NET_PATH_VIDEO_PATH, 
} NET_PICTURE_PATH_TYPE;
#define MAX_PIC_PATH_NUM 16
typedef struct tagNET_RESERVED_PATH
{
    int nMaxPathNum;                                        
    NET_PICTURE_PATH_TYPE emPictruePaths[MAX_PIC_PATH_NUM]; 
} NET_RESERVED_PATH;
#define RESERVED_TYPE_FOR_COMMON 0x00000010
typedef struct tagNET_OFFLINE_PARAM
{
    char szClientID[20];  
    BYTE byReserved[108]; 
} NET_OFFLINE_PARAM;
typedef enum tagEM_PATH_MODE
{
    EM_PATH_MODE_UNKNOWN = -1, 
    EM_PATH_MODE_ASYNC,        
    EM_PATH_MODE_SYNC,         
} EM_PATH_MODE;
typedef enum tagNET_FILTER_IMAGE_TYPE
{
    EM_FILTER_IMAGE_UNKNOWN, 
    EM_FILTER_IMAGE_OBJECT,  
    EM_FILTER_IMAGE_SCENE,   
} EM_FILTER_IMAGE_TYPE;
typedef enum tagNET_EVENT_TYPE_DESCEIBEINFO
{
    EM_EVENT_NORMAL = 0, 
    EM_EVENT_EMAIL,      
} EM_EVENT_TYPE_DESCEIBEINFO;
typedef enum tagEM_EVENT_ORDER
{
    EM_EVENT_ORDER_UNKNOWN, 
    EM_EVENT_ORDER_ASCENT,  
    EM_EVENT_ORDER_DESCENT, 
} EM_EVENT_ORDER;
typedef struct tagNET_RESERVED_COMMON
{
    DWORD dwStructSize;
    ReservedDataIntelBox* pIntelBox;     
    DWORD dwSnapFlagMask;                
    NET_OFFLINE_PARAM* pstuOfflineParam; 
    NET_RESERVED_PATH* pstuPath;         
    EM_PATH_MODE emPathMode;             
    EM_FILTER_IMAGE_TYPE* pImageType;    
    int nImageTypeNum;                   
    BOOL bFlagCustomInfo;                
    char szCustomInfo[512];              
    BOOL bSetEventsType;                 
    char szRserved[4];                   
    EM_EVENT_ORDER emOrder;              
} NET_RESERVED_COMMON;
typedef struct
{
    DWORD dwSize;
    int nScene; 
} DHDEV_INTELLI_SCENE_INFO;
typedef struct
{
    DWORD dwSize;
    int nScene; 
    int nType;  
} DHDEV_INTELLI_SCENELIMIT_INFO;
typedef struct
{
    DWORD dwSize;
    int nObjectID;      
    RECT stuBound;      
    int nTrackTimeOut;  
    int nStaticTimeOut; 
} DHDEV_INTELLI_TRACKOBJECT_INFO;
typedef enum __TRACKCONTROL_TYPE
{
    DH_TRACK_MARKSCENE,        
    DH_TRACK_GOTOSCENE,        
    DH_TRACK_MARKSCENELIMIT,   
    DH_TRACK_GOTOSCENELIMIT,   
    DH_TRACK_MARKSCENEMAXZOOM, 
    DH_TRACK_OBJECT,           
    DH_TRACK_START,            
    DH_TRACK_STOP,             
    DH_TRACK_TYPE_NUM,
} DH_TRACKCONTROL_TYPE;
typedef struct tagNET_IN_CONTROL_INTELLITRACKER
{
    DWORD dwSize;
    int nChannelID;                  
    DH_TRACKCONTROL_TYPE emCtrlType; 
    void* pCtrlInfo;                 
    int nMaxLen;                     
    int nWaittime;                   
} NET_IN_CONTROL_INTELLITRACKER;
typedef struct tagNET_OUT_CONTROL_INTELLITRACKER
{
    DWORD dwSize;
} NET_OUT_CONTROL_INTELLITRACKER;
typedef struct tagNET_IN_GET_LAST_EVENT_INFO
{
    DWORD dwSize;              
    int nChannelID;            
    EM_CLASS_TYPE emClassType; 
    DWORD dwAlarmType;         
    BOOL bOnlySendFrame;       
} NET_IN_GET_LAST_EVENT_INFO;
typedef struct tagNET_OUT_GET_LAST_EVENT_INFO
{
    DWORD dwSize;          
    int nState;            
    LPVOID pEventInfo;     
    LDWORD dwBufferSize;   
    DWORD dwOutBufferSize; 
} NET_OUT_GET_LAST_EVENT_INFO;
#define MAX_TEMPLATEIMAGE_NUM 32 
typedef struct tagNET_IN_VIDEOANALYSE_GETTEMPLATEIMAGE
{
    DWORD dwSize;
    int nChannelID;                    
    char szRule[DH_COMMON_STRING_128]; 
} NET_IN_VIDEOANALYSE_GETTEMPLATEIMAGE;
typedef struct tagNET_OUT_VIDEOANALYSE_GETTEMPLATEIMAGE
{
    DWORD dwSize;
    unsigned int nImageNum;                          
    DH_PIC_INFO_EX2 stuImage[MAX_TEMPLATEIMAGE_NUM]; 
    char* pBuffer;                                   
    int nBufLen;                                     
    int nRetLen;                                     
} NET_OUT_VIDEOANALYSE_GETTEMPLATEIMAGE;
typedef struct tagNET_IN_VIDEOANALYSE_SETTEMPLATEIMAGE
{
    DWORD dwSize;
    int nChannelID;                                  
    char szRule[DH_COMMON_STRING_128];               
    unsigned int nImageNum;                          
    DH_PIC_INFO_EX2 stuImage[MAX_TEMPLATEIMAGE_NUM]; 
    char* pBuffer;                                   
    int nBufLen;                                     
} NET_IN_VIDEOANALYSE_SETTEMPLATEIMAGE;
typedef struct tagNET_OUT_VIDEOANALYSE_SETTEMPLATEIMAGE
{
    DWORD dwSize;
} NET_OUT_VIDEOANALYSE_SETTEMPLATEIMAGE;
typedef struct
{
    BYTE byRecordStatic;   
    BYTE bySignalStatic;   
    BYTE byHardwareStatic; 
    char reserve;
    DWORD dwBitRate;               
    DWORD dwLinkNum;               
    DWORD dwClientIP[DH_MAX_LINK]; 
} NET_DEV_CHANNELSTATE, *LPNET_DEV_CHANNELSTATE;
typedef struct
{
    DWORD dwDeviceStatic; 
    NET_DEV_DISKSTATE stHardDiskStatic[DH_MAX_DISKNUM];
    NET_DEV_CHANNELSTATE stChanStatic[DH_MAX_CHANNUM]; 
    BYTE byAlarmInStatic[DH_MAX_ALARMIN];              
    BYTE byAlarmOutStatic[DH_MAX_ALARMOUT];            
    DWORD dwLocalDisplay;                              
} NET_DEV_WORKSTATE, *LPNET_DEV_WORKSTATE;
typedef struct
{
    char protocolname[12];  
    unsigned int baudbase;  
    unsigned char databits; 
    unsigned char stopbits; 
    unsigned char parity;   
    unsigned char reserve;
} PROTOCOL_INFO, *LPPROTOCOL_INFO;
typedef struct
{
    BYTE byInFormatTag;      
    BYTE byInChannels;       
    WORD wInBitsPerSample;   
    DWORD dwInSamplesPerSec; 
    BYTE byOutFormatTag;      
    BYTE byOutChannels;       
    WORD wOutBitsPerSample;   
    DWORD dwOutSamplesPerSec; 
} DHDEV_TALK_CFG, *LPDHDEV_TALK_CFG;
#define DH_MATRIX_INTERFACE_LEN 16      
#define DH_MATRIX_MAX_CARDS 128         
#define DH_SPLIT_PIP_BASE 1000          
#define DH_MAX_SPLIT_MODE_NUM 64        
#define DH_MATRIX_MAX_CHANNEL_IN 1500   
#define DH_MATRIX_MAX_CHANNEL_OUT 256   
#define DH_DEVICE_NAME_LEN 64           
#define DH_MAX_CPU_NUM 16               
#define DH_MAX_FAN_NUM 16               
#define DH_MAX_POWER_NUM 16             
#define DH_MAX_BATTERY_NUM 16           
#define DH_MAX_TEMPERATURE_NUM 256      
#define DH_MAX_ISCSI_NAME_LEN 128       
#define DH_VERSION_LEN 64               
#define DH_MAX_STORAGE_PARTITION_NUM 32 
#define DH_STORAGE_MOUNT_LEN 64         
#define DH_STORAGE_FILE_SYSTEM_LEN 16   
#define DH_MAX_MEMBER_PER_RAID 32       
#define DH_DEV_ID_LEN_EX 128            
#define DH_MAX_BLOCK_NUM 32             
#define DH_MAX_SPLIT_WINDOW 128         
#define DH_FILE_TYPE_LEN 64             
#define DH_DEV_ID_LEN 128               
#define DH_DEV_NAME_LEN 128             
#define DH_TSCHE_DAY_NUM 8              
#define DH_TSCHE_SEC_NUM 6              
#define DH_SPLIT_INPUT_NUM 256          
#define DH_TSCHE_SEC_NUM_EX 36          
#define DH_DEVICE_ID_LOCAL "Local"   
#define DH_DEVICE_ID_REMOTE "Remote" 
#define DH_DEVICE_ID_UNIQUE "Unique" 
typedef enum tagDH_SPLIT_MODE
{
    DH_SPLIT_1 = 1,                                   
    DH_SPLIT_2 = 2,                                   
    DH_SPLIT_4 = 4,                                   
    DH_SPLIT_5 = 5,                                   
    DH_SPLIT_6 = 6,                                   
    DH_SPLIT_8 = 8,                                   
    DH_SPLIT_9 = 9,                                   
    DH_SPLIT_12 = 12,                                 
    DH_SPLIT_16 = 16,                                 
    DH_SPLIT_20 = 20,                                 
    DH_SPLIT_25 = 25,                                 
    DH_SPLIT_36 = 36,                                 
    DH_SPLIT_64 = 64,                                 
    DH_SPLIT_144 = 144,                               
    DH_PIP_1 = DH_SPLIT_PIP_BASE + 1,                 
    DH_PIP_3 = DH_SPLIT_PIP_BASE + 3,                 
    DH_SPLIT_FREE = DH_SPLIT_PIP_BASE * 2,            
    DH_COMPOSITE_SPLIT_1 = DH_SPLIT_PIP_BASE * 3 + 1, 
    DH_COMPOSITE_SPLIT_4 = DH_SPLIT_PIP_BASE * 3 + 4, 
    DH_SPLIT_3 = 10,                                  
    DH_SPLIT_3B = 11,                                 
    DH_SPLIT_4A = DH_SPLIT_PIP_BASE * 4 + 1,          
} DH_SPLIT_MODE;
#define DH_PROTOCOL_DAHUA2 DH_PROTOCOL_PRIVATE2
#define DH_PROTOCOL_DAHUA3 DH_PROTOCOL_PRIVATE3
typedef enum tagDH_DEVICE_PROTOCOL
{
    DH_PROTOCOL_PRIVATE2, 
    DH_PROTOCOL_PRIVATE3, 
    DH_PROTOCOL_ONVIF,    
    DH_PROTOCOL_VNC,      
    DH_PROTOCOL_TS,       
    DH_PROTOCOL_ECLOUD,   
    DH_PROTOCOL_GENERAL,  
    DH_PROTOCOL_PRIVATE = 100, 
    DH_PROTOCOL_AEBELL,        
    DH_PROTOCOL_PANASONIC,     
    DH_PROTOCOL_SONY,          
    DH_PROTOCOL_DYNACOLOR,     
    DH_PROTOCOL_TCWS,          
    DH_PROTOCOL_SAMSUNG,       
    DH_PROTOCOL_YOKO,          
    DH_PROTOCOL_AXIS,          
    DH_PROTOCOL_SANYO,         
    DH_PROTOCOL_BOSH,          
    DH_PROTOCOL_PECLO,         
    DH_PROTOCOL_PROVIDEO,      
    DH_PROTOCOL_ACTI,          
    DH_PROTOCOL_VIVOTEK,       
    DH_PROTOCOL_ARECONT,       
    DH_PROTOCOL_PRIVATEEH,     
    DH_PROTOCOL_IMATEK,        
    DH_PROTOCOL_SHANY,         
    DH_PROTOCOL_VIDEOTREC,     
    DH_PROTOCOL_URA,           
    DH_PROTOCOL_BITICINO,      
    DH_PROTOCOL_ONVIF2,        
    DH_PROTOCOL_SHEPHERD,      
    DH_PROTOCOL_YAAN,          
    DH_PROTOCOL_AIRPOINT,      
    DH_PROTOCOL_TYCO,          
    DH_PROTOCOL_XUNMEI,        
    DH_PROTOCOL_HIKVISION,     
    DH_PROTOCOL_LG,            
    DH_PROTOCOL_AOQIMAN,       
    DH_PROTOCOL_BAOKANG,       
    DH_PROTOCOL_WATCHNET,      
    DH_PROTOCOL_XVISION,       
    DH_PROTOCOL_FUSITSU,       
    DH_PROTOCOL_CANON,         
    DH_PROTOCOL_GE,            
    DH_PROTOCOL_Basler,        
    DH_PROTOCOL_Patro,         
    DH_PROTOCOL_CPKNC,         
    DH_PROTOCOL_CPRNC,         
    DH_PROTOCOL_CPUNC,         
    DH_PROTOCOL_CPPLUS,        
    DH_PROTOCOL_XunmeiS,       
    DH_PROTOCOL_GDDW,          
    DH_PROTOCOL_PSIA,          
    DH_PROTOCOL_GB2818,        
    DH_PROTOCOL_GDYX,          
    DH_PROTOCOL_OTHER,         
    DH_PROTOCOL_MULTICAST = 179,   
    DH_PROTOCOL_MULTICASTTS = 185, 
} DH_DEVICE_PROTOCOL;
typedef struct tagDH_SPLIT_MODE_INFO
{
    DWORD dwSize;
    DH_SPLIT_MODE emSplitMode; 
    int nGroupID;              
    DWORD dwDisplayType;       
} DH_SPLIT_MODE_INFO;
typedef struct tagDH_SPLIT_CAPS
{
    DWORD dwSize;
    int nModeCount;                                      
    DH_SPLIT_MODE emSplitMode[DH_MAX_SPLIT_MODE_NUM];    
    int nMaxSourceCount;                                 
    int nFreeWindowCount;                                
    BOOL bCollectionSupported;                           
    DWORD dwDisplayType;                                 
    int nPIPModeCount;                                   
    DH_SPLIT_MODE emPIPSplitMode[DH_MAX_SPLIT_MODE_NUM]; 
    int nInputChannels[DH_SPLIT_INPUT_NUM];              
    int nInputChannelCount;                              
    int nBootModeCount;                                  
    DH_SPLIT_MODE emBootMode[DH_MAX_SPLIT_MODE_NUM];     
} DH_SPLIT_CAPS;
typedef struct tagDH_CASCADE_AUTHENTICATOR
{
    DWORD dwSize;
    char szUser[DH_NEW_USER_NAME_LENGTH]; 
    char szPwd[DH_NEW_USER_PSW_LENGTH];   
    char szSerialNo[DH_SERIALNO_LEN];     
} DH_CASCADE_AUTHENTICATOR;
typedef enum tagEM_SRC_PUSHSTREAM_TYPE
{
    EM_SRC_PUSHSTREAM_AUTO,      
    EM_SRC_PUSHSTREAM_HIKVISION, 
    EM_SRC_PUSHSTREAM_PS,        
    EM_SRC_PUSHSTREAM_TS,        
    EM_SRC_PUSHSTREAM_SVAC,      
} EM_SRC_PUSHSTREAM_TYPE;
typedef enum tagEM_ENCRYPT_LEVEL
{
    EM_ENCRYPT_LEVEL_UNKNOWN,      
    EM_ENCRYPT_LEVEL_NONE,         
    EM_ENCRYPT_LEVEL_IFRAME256,    
    EM_ENCRYPT_LEVEL_IFRAME_WHOLE, 
    EM_ENCRYPT_LEVEL_IAXFRAME,     
} EM_ENCRYPT_LEVEL;
typedef enum tagEM_ENCRYPT_ALGORITHM_TYPE
{
    EM_ENCRYPT_ALGORITHM_UNKNOWN, 
    EM_ENCRYPT_ALGORITHM_AES,     
    EM_ENCRYPT_ALGORITHM_DES,     
    EM_ENCRYPT_ALGORITHM_3DES,    
} EM_ENCRYPT_ALGORITHM_TYPE;
typedef enum tagEM_KEY_EXCHANGE_TYPE
{
    EM_KEY_EXCHANGE_UNKNOWN, 
    EM_KEY_EXCHANGE_MIKEY,   
    EM_KEY_EXCHANGE_PSK,     
    EM_KEY_EXCHANGE_PK,      
    EM_KEY_EXCHANGE_DH,      
} EM_KEY_EXCHANGE_TYPE;
typedef struct tagNET_SOURCE_STREAM_ENCRYPT
{
    EM_ENCRYPT_LEVEL emEncryptLevel;       
    EM_ENCRYPT_ALGORITHM_TYPE emAlgorithm; 
    EM_KEY_EXCHANGE_TYPE emExchange;       
    BOOL bUnvarnished;                     
    char szPSK[1032];                      
    BYTE byReserved[1024];                 
} NET_SOURCE_STREAM_ENCRYPT;
typedef struct tagDH_SPLIT_SOURCE
{
    DWORD dwSize;
    BOOL bEnable;                       
    char szIp[DH_MAX_IPADDR_LEN];       
    char szUser[DH_USER_NAME_LENGTH];   
    char szPwd[DH_USER_PSW_LENGTH];     
    int nPort;                          
    int nChannelID;                     
    int nStreamType;                    
    int nDefinition;                    
    DH_DEVICE_PROTOCOL emProtocol;      
    char szDevName[DH_DEVICE_NAME_LEN]; 
    int nVideoChannel;                  
    int nAudioChannel;                  
    BOOL bDecoder;                               
    BYTE byConnType;                             
    BYTE byWorkMode;                             
    WORD wListenPort;                            
    char szDevIpEx[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    BYTE bySnapMode;                             
    BYTE byManuFactory;                          
    BYTE byDeviceType;                           
    BYTE byDecodePolicy;                         
    DWORD dwHttpPort;                                            
    DWORD dwRtspPort;                                            
    char szChnName[DH_DEVICE_NAME_LEN];                          
    char szMcastIP[DH_MAX_IPADDR_LEN];                           
    char szDeviceID[DH_DEV_ID_LEN_EX];                           
    BOOL bRemoteChannel;                                         
    unsigned int nRemoteChannelID;                               
    char szDevClass[DH_DEV_TYPE_LEN];                            
    char szDevType[DH_DEV_TYPE_LEN];                             
    char szMainStreamUrl[MAX_PATH];                              
    char szExtraStreamUrl[MAX_PATH];                             
    int nUniqueChannel;                                          
    DH_CASCADE_AUTHENTICATOR stuCascadeAuth;                     
    int nHint;                                                   
    int nOptionalMainUrlCount;                                   
    char szOptionalMainUrls[DH_MAX_OPTIONAL_URL_NUM][MAX_PATH];  
    int nOptionalExtraUrlCount;                                  
    char szOptionalExtraUrls[DH_MAX_OPTIONAL_URL_NUM][MAX_PATH]; 
    int nInterval;                                    
    char szUserEx[DH_NEW_USER_NAME_LENGTH];           
    char szPwdEx[DH_NEW_USER_PSW_LENGTH];             
    EM_SRC_PUSHSTREAM_TYPE emPushStream;              
    NET_RECT stuSRect;                                
    NET_SOURCE_STREAM_ENCRYPT stuSourceStreamEncrypt; 
    char szSerialNo[DH_SERIALNO_LEN];                 
    char szCaption[128];                              
    BOOL bUserStreamUrlEx;                            
    char szMainStreamUrlEx[1024];                     
    char szExtraStreamUrlEx[1024];                    
} DH_SPLIT_SOURCE;
typedef struct tagDH_VIDEO_OUT_CAPS
{
    DWORD dwSize;
    BOOL bColor;              
    BOOL bMargin;             
    int nLayers;              
    BOOL bPowerMode;          
    int bSplitMode;           
    unsigned int nBackground; 
    BOOL bBindOutput;         
    BOOL bAudioSupport;       
    DWORD dwAudioMode;        
} DH_VIDEO_OUT_CAPS;
typedef struct tagDH_COLOR_BCSH
{
    int nBirghtness; 
    int nContrast;   
    int nSaturation; 
    int nHue;        
} DH_COLOR_BCSH;
typedef struct tagDH_SIZE
{
    int nWidth;  
    int nHeight; 
} DH_SIZE;
typedef struct tagDH_HOT_PLUG_MODE
{
    DWORD dwSize;
    int nMode; 
} DH_HOT_PLUG_MODE;
typedef struct tagDH_VIDEO_OUT_OPT
{
    DWORD dwSize;
    DH_RECT* pstuMargin;               
    DH_COLOR_BCSH* pstuColor;          
    DH_COLOR_RGBA* pstuBackground;     
    DH_SIZE* pstuSize;                 
    DH_HOT_PLUG_MODE* pstuHotPlugMode; 
} DH_VIDEO_OUT_OPT;
#define NET_VIDEOANALYSE_SCENES (32)
#define NET_VIDEOANALYSE_RULES (64)
typedef struct tagNET_PD_VIDEOANALYSE
{
    BOOL bSupport;                                                      
    char szSupportScenes[NET_VIDEOANALYSE_SCENES][DH_COMMON_STRING_64]; 
    char SupportRules[NET_VIDEOANALYSE_RULES][DH_COMMON_STRING_64];     
} NET_PD_VIDEOANALYSE;
typedef enum tagEM_AUDIO_CHANNEL_TYPE
{
    EM_AUDIO_CHANNEL_SINGLE, 
    EM_AUDIO_CHANNEL_DOUBLE, 
} EM_AUDIO_CHANNEL_TYPE;
typedef enum tagEM_WLAN_SCAN_AND_CONFIG_TYPE
{
    EM_WLAN_SCAN_AND_CONFIG_UNKNOWN, 
    EM_WLAN_SCAN_AND_CONFIG_V2,      
    EM_WLAN_SCAN_AND_CONFIG_V3,      
} EM_WLAN_SCAN_AND_CONFIG_TYPE;
typedef struct tagDH_PRODUCTION_DEFNITION
{
    DWORD dwSize;
    int nVideoInChannel;                 
    int nVideoOutChannel;                
    int nRemoteDecChannel;               
    char szDevType[DH_DEV_TYPE_LEN];     
    char szVendor[DH_MAX_NAME_LEN];      
    int nOEMVersion;                     
    int nMajorVerion;                    
    int nMinorVersion;                   
    int nRevision;                       
    char szWebVerion[DH_MAX_NAME_LEN];   
    char szDefLanguage[DH_MAX_NAME_LEN]; 
    NET_TIME stuBuildDateTime;           
    int nAudioInChannel;                 
    int nAudioOutChannel;                
    BOOL bGeneralRecord;                 
    BOOL bLocalStore;                    
    BOOL bRemoteStore;                   
    BOOL bLocalurgentStore;              
    BOOL bRealtimeCompress;              
    DWORD dwVideoStandards;              
    int nDefVideoStandard;               
    int nMaxExtraStream;                 
    int nRemoteRecordChannel;            
    int nRemoteSnapChannel;              
    int nRemoteVideoAnalyseChannel;      
    int nRemoteTransmitChannel;          
    int nRemoteTransmitFileChannel;      
    int nStreamTransmitChannel;          
    int nStreamReadChannel;              
    int nMaxStreamSendBitrate;           
    int nMaxStreamRecvBitrate;           
    BOOL bCompressOldFile;               
    BOOL bRaid;                          
    int nMaxPreRecordTime;               
    BOOL bPtzAlarm;                      
    BOOL bPtz;                           
    BOOL bATM;                           
    BOOL b3G;                            
    BOOL bNumericKey;                    
    BOOL bShiftKey;                      
    BOOL bCorrectKeyMap;                 
    BOOL bNewATM;                        
    BOOL bDecoder;                       
    DEV_DECODER_INFO stuDecoderInfo;     
    int nVideoOutputCompositeChannels;   
    BOOL bSupportedWPS;                  
    int nVGAVideoOutputChannels;         
    int nTVVideoOutputChannels;          
    int nMaxRemoteInputChannels;         
    int nMaxMatrixInputChannels;         
    int nMaxRoadWays;                    
    int nMaxParkingSpaceScreen;          
    int nPtzHorizontalAngleMin;                              
    int nPtzHorizontalAngleMax;                              
    int nPtzVerticalAngleMin;                                
    int nPtzVerticalAngleMax;                                
    BOOL bPtzFunctionMenu;                                   
    BOOL bLightingControl;                                   
    DWORD dwLightingControlMode;                             
    int nNearLightNumber;                                    
    int nFarLightNumber;                                     
    BOOL bFocus;                                             
    BOOL bIris;                                              
    char szPtzProtocolList[DH_COMMON_STRING_1024];           
    BOOL bRainBrushControl;                                  
    int nBrushNumber;                                        
    int nLowerMatrixInputChannels[DH_MAX_LOWER_MITRIX_NUM];  
    int nLowerMatrixOutputChannels[DH_MAX_LOWER_MITRIX_NUM]; 
    BOOL bSupportVideoAnalyse;                               
    BOOL bSupportIntelliTracker;                             
    DWORD nSupportBreaking; 
    DWORD nSupportBreaking1;             
    NET_PD_VIDEOANALYSE stuVideoAnalyse; 
    BOOL bTalkTransfer;                  
    BOOL bCameraAttribute;               
    BOOL bPTZFunctionViaApp;             
    BOOL bAudioProperties;               
    BOOL bIsCameraIDOsd;                 
    BOOL bIsPlaceOsd;                    
    unsigned int nMaxGeographyTitleLine;     
    EM_AUDIO_CHANNEL_TYPE emAudioChannel;    
    char szVendorAbbr[DH_COMMON_STRING_32];  
    char szTypeVersion[DH_COMMON_STRING_32]; 
    BOOL bIsVideoNexus;
    EM_WLAN_SCAN_AND_CONFIG_TYPE emWlanScanAndConfig; 
    BOOL bSupportLensMasking;                         
} DH_PRODUCTION_DEFNITION;
#define NET_LIGHTING_CTRL_ON_OFF 0x01            
#define NET_LIGHTING_CTRL_ADJUST_BRIGHTNESS 0x02 
#define NET_LIGHTING_CTRL_ZOOM_PRIO 0x04         
#define DH_MATRIX_CARD_MAIN 0x10000000        
#define DH_MATRIX_CARD_INPUT 0x00000001       
#define DH_MATRIX_CARD_OUTPUT 0x00000002      
#define DH_MATRIX_CARD_ENCODE 0x00000004      
#define DH_MATRIX_CARD_DECODE 0x00000008      
#define DH_MATRIX_CARD_CASCADE 0x00000010     
#define DH_MATRIX_CARD_INTELLIGENT 0x00000020 
#define DH_MATRIX_CARD_ALARM 0x00000040       
#define DH_MATRIX_CARD_RAID 0x00000080        
#define DH_MATRIX_CARD_NET_DECODE 0x00000100  
typedef struct tagDH_MATRIX_CARD
{
    DWORD dwSize;
    BOOL bEnable;                                
    DWORD dwCardType;                            
    char szInterface[DH_MATRIX_INTERFACE_LEN];   
    char szAddress[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    int nPort;                                   
    int nDefinition;                             
    int nVideoInChn;                             
    int nAudioInChn;                             
    int nVideoOutChn;                            
    int nAudioOutChn;                            
    int nVideoEncChn;                            
    int nAudioEncChn;                            
    int nVideoDecChn;                            
    int nAudioDecChn;                            
    int nStauts;                                 
    int nCommPorts;                              
    int nVideoInChnMin;                          
    int nVideoInChnMax;                          
    int nAudioInChnMin;                          
    int nAudioInChnMax;                          
    int nVideoOutChnMin;                         
    int nVideoOutChnMax;                         
    int nAudioOutChnMin;                         
    int nAudioOutChnMax;                         
    int nVideoEncChnMin;                         
    int nVideoEncChnMax;                         
    int nAudioEncChnMin;                         
    int nAudioEncChnMax;                         
    int nVideoDecChnMin;                         
    int nVideoDecChnMax;                         
    int nAudioDecChnMin;                         
    int nAudioDecChnMax;                         
    int nCascadeChannels;                        
    int nCascadeChannelBitrate;                  
    int nAlarmInChnCount;                        
    int nAlarmInChnMin;                          
    int nAlarmInChnMax;                          
    int nAlarmOutChnCount;                       
    int nAlarmOutChnMin;                         
    int nAlarmOutChnMax;                         
    int nVideoAnalyseChnCount;                   
    int nVideoAnalyseChnMin;                     
    int nVideoAnalyseChnMax;                     
    int nCommPortMin;                            
    int nCommPortMax;                            
    char szVersion[DH_COMMON_STRING_32];         
    NET_TIME stuBuildTime;                       
    char szBIOSVersion[DH_COMMON_STRING_64];     
    char szMAC[DH_MACADDR_LEN];                  
} DH_MATRIX_CARD;
typedef struct tagDH_MATRIX_CARD_LIST
{
    DWORD dwSize;
    int nCount;                                   
    DH_MATRIX_CARD stuCards[DH_MATRIX_MAX_CARDS]; 
} DH_MATRIX_CARD_LIST;
typedef struct tagDH_VIDEO_OUT_WINDOW
{
    DWORD dwSize;
    int nBackboardID; 
    int nScreenID;    
    int nWindowID;    
} DH_VIDEO_OUT_WINDOW;
typedef struct tagNET_IN_SETBACKUP_SOURCES_INFO
{
    DWORD dwSize;
    int nSetSourcesNum;       
    DH_SPLIT_SOURCE* pSource; 
} NET_IN_SETBACKUP_SOURCES_INFO;
typedef struct tagNET_OUT_SETBACKUP_SOURCES_INFO
{
    DWORD dwSize;
} NET_OUT_SETBACKUP_SOURCES_INFO;
typedef struct tagDH_IN_ISCSI_TARGETS
{
    DWORD dwSize;
    const char* pszAddress; 
    int nPort;              
    const char* pszUser;    
    const char* pszPwd;     
} DH_IN_ISCSI_TARGETS;
typedef struct tagDH_ISCSI_TARGET
{
    DWORD dwSize;
    char szName[DH_MAX_ISCSI_NAME_LEN];          
    char szAddress[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    char szUser[DH_NEW_USER_NAME_LENGTH];        
    int nPort;                                   
    UINT nStatus;                                
} DH_ISCSI_TARGET;
typedef struct tagDH_OUT_ISCSI_TARGETS
{
    DWORD dwSize;
    DH_ISCSI_TARGET* pstuTargets; 
    int nMaxCount;                
    int nRetCount;                
} DH_OUT_ISCSI_TARGETS;
typedef enum tagDH_BITMAP_ACCURACY
{
    BA_DAY,  
    BA_HOUR, 
    BA_5MIN, 
} DH_BITMAP_ACCURACY;
#define DH_MAX_BITMAPS 256 
#define DH_MAX_CHN_NUM 256 
typedef struct tagDH_IN_BITMAP
{
    DWORD dwSize;
    NET_TIME stuStartTime;         
    NET_TIME stuEndTime;           
    int nChnList[DH_MAX_CHN_NUM];  
    DH_BITMAP_ACCURACY emAccuracy; 
    BOOL bOnlySupportRealUTC;      
    NET_TIME stuStartTimeRealUTC;  
    NET_TIME stuEndTimeRealUTC;    
} DH_IN_BITMAP;
typedef struct tagDH_BITMAP_INFO
{
    DWORD dwSize;
    int nChnID;                   
    BYTE bBitmap[DH_MAX_BITMAPS]; 
    int nBitNum; 
} DH_BITMAP_INFO;
typedef struct tagDH_OUT_BITMAP
{
    DWORD dwSize;
    DH_BITMAP_INFO* pstBitmapInfos; 
    int nGetBitmapInfo;
    int nMaxBitmapInfo;
} DH_OUT_BITMAP;
typedef struct tagDH_STORAGE_DEVICE_NAME
{
    DWORD dwSize;
    char szName[DH_STORAGE_NAME_LEN];
} DH_STORAGE_DEVICE_NAME;
#define DH_RAID_STATE_ACTIVE 0x00000001
#define DH_RAID_STATE_INACTIVE 0x00000002
#define DH_RAID_STATE_CLEAN 0x00000004
#define DH_RAID_STATE_FAILED 0x00000008
#define DH_RAID_STATE_DEGRADED 0x00000010
#define DH_RAID_STATE_RECOVERING 0x00000020
#define DH_RAID_STATE_RESYNCING 0x00000040
#define DH_RAID_STATE_RESHAPING 0x00000080
#define DH_RAID_STATE_CHECKING 0x00000100
#define DH_RAID_STATE_NOTSTARTED 0x00000200
typedef struct tagNET_RAID_MEMBER_INFO
{
    DWORD dwSize;
    DWORD dwID;  
    BOOL bSpare; 
} NET_RAID_MEMBER_INFO;
typedef struct tagDH_STORAGE_RAID
{
    DWORD dwSize;
    int nLevel;                                                  
    int nState;                                                  
    int nMemberNum;                                              
    char szMembers[DH_MAX_MEMBER_PER_RAID][DH_STORAGE_NAME_LEN]; 
    float fRecoverPercent;                                       
    float fRecoverMBps;                                          
    float fRecoverTimeRemain;                                    
    NET_RAID_MEMBER_INFO stuMemberInfos[DH_MAX_MEMBER_PER_RAID]; 
    int nRaidDevices;                                            
    int nTotalDevices;                                           
    int nActiveDevices;                                          
    int nWorkingDevices;                                         
    int nFailedDevices;                                          
    int nSpareDevices;                                           
    char szAliasName[DH_COMMON_STRING_24]; 
} DH_STORAGE_RAID;
typedef struct tagDH_STORAGE_PARTITION
{
    DWORD dwSize;
    char szName[DH_STORAGE_NAME_LEN];              
    INT64 nTotalSpace;                             
    INT64 nFreeSpace;                              
    char szMountOn[DH_STORAGE_MOUNT_LEN];          
    char szFileSystem[DH_STORAGE_FILE_SYSTEM_LEN]; 
    int nStatus;                                   
    BOOL bIsSupportFs;                             
} DH_STORAGE_PARTITION;
typedef struct tagDH_STORAGE_TANK
{
    DWORD dwSize;
    int nLevel;  
    int nTankNo; 
    int nSlot;   
} DH_STORAGE_TANK;
#define NET_STORAGE_DEV_OFFLINE 0             
#define NET_STORAGE_DEV_RUNNING 1             
#define NET_STORAGE_DEV_ACTIVE 2              
#define NET_STORAGE_DEV_SYNC 3                
#define NET_STORAGE_DEV_SPARE 4               
#define NET_STORAGE_DEV_FAULTY 5              
#define NET_STORAGE_DEV_REBUILDING 6          
#define NET_STORAGE_DEV_REMOVED 7             
#define NET_STORAGE_DEV_WRITE_ERROR 8         
#define NET_STORAGE_DEV_WANT_REPLACEMENT 9    
#define NET_STORAGE_DEV_REPLACEMENT 10        
#define NET_STORAGE_DEV_GLOBAL_SPARE 11       
#define NET_STORAGE_DEV_ERROR 12              
#define NET_STORAGE_DEV_RAIDSUB 13            
#define NET_STORAGE_DEV_FATAL 14              
#define NET_STORAGE_DEV_SNAPSHOT_PARENT 15    
#define NET_STORAGE_DEV_SNAPSHOT_CHILD 16     
#define NET_STORAGE_DEV_VOLUMECLONE_PARENT 17 
#define NET_STORAGE_DEV_VOLUMECLONE_CHILD 18  
typedef enum tagEM_STORAGE_DISK_POWERMODE
{
    EM_STORAGE_DISK_POWERMODE_UNKNOWN, 
    EM_STORAGE_DISK_POWERMODE_NONE,    
    EM_STORAGE_DISK_POWERMODE_ACTIVE,  
    EM_STORAGE_DISK_POWERMODE_STANDBY, 
    EM_STORAGE_DISK_POWERMODE_IDLE,    
} EM_STORAGE_DISK_POWERMODE;
typedef enum tagEM_STORAGE_DISK_PREDISKCHECK
{
    EM_STORAGE_DISK_PREDISKCHECK_UNKNOWN,   
    EM_STORAGE_DISK_PREDISKCHECK_GOOD,      
    EM_STORAGE_DISK_PREDISKCHECK_WARN,      
    EM_STORAGE_DISK_PREDISKCHECK_ERROR,     
    EM_STORAGE_DISK_PREDISKCHECK_WILLFAIL,  
    EM_STORAGE_DISK_PREDISKCHECK_FAIL,      
    EM_STORAGE_DISK_PREDISKCHECK_NONE,      
    EM_STORAGE_DISK_PREDISKCHECK_BECHECK,   
    EM_STORAGE_DISK_PREDISKCHECK_CHECKFAIL, 
} EM_STORAGE_DISK_PREDISKCHECK;
typedef struct tagDH_STORAGE_DEVICE
{
    DWORD dwSize;
    char szName[DH_STORAGE_NAME_LEN];                                 
    INT64 nTotalSpace;                                                
    INT64 nFreeSpace;                                                 
    BYTE byMedia;                                                     
    BYTE byBUS;                                                       
    BYTE byVolume;                                                    
    BYTE byState;                                                     
    int nPhysicNo;                                                    
    int nLogicNo;                                                     
    char szParent[DH_STORAGE_NAME_LEN];                               
    char szModule[DH_STORAGE_NAME_LEN];                               
    char szSerial[DH_SERIALNO_LEN];                                   
    char szFirmware[DH_VERSION_LEN];                                  
    int nPartitionNum;                                                
    DH_STORAGE_PARTITION stuPartitions[DH_MAX_STORAGE_PARTITION_NUM]; 
    DH_STORAGE_RAID stuRaid;                                          
    DH_ISCSI_TARGET stuISCSI;                                         
    BOOL abTank;                                                      
    DH_STORAGE_TANK stuTank;                                          
    EM_STORAGE_DISK_POWERMODE emPowerMode;       
    EM_STORAGE_DISK_PREDISKCHECK emPreDiskCheck; 
    int nOpState;                                
} DH_STORAGE_DEVICE;
typedef struct tagNET_SPLIT_OSD
{
    DWORD dwSize;
    BOOL bEnable;                         
    DH_COLOR_RGBA stuFrontColor;          
    DH_COLOR_RGBA stuBackColor;           
    DH_RECT stuFrontRect;                 
    DH_RECT stuBackRect;                  
    BOOL bRoll;                           
    BYTE byRollMode;                      
    BYTE byRoolSpeed;                     
    BYTE byFontSize;                      
    BYTE byTextAlign;                     
    BYTE byType;                          
    BYTE Reserved[3];                     
    char szContent[MAX_PATH];             
    float fPitch;                         
    char szFontType[DH_COMMON_STRING_64]; 
    char szPattern[8];                    
    char szContentEx[1024];               
} NET_SPLIT_OSD;
typedef struct tagDH_IN_SPLIT_GET_OSD
{
    DWORD dwSize;
    int nChannel; 
    int nWindow;  
} DH_IN_SPLIT_GET_OSD;
typedef struct tagDH_OUT_SPLIT_GET_OSD
{
    DWORD dwSize;
    int nOSDNum;                                   
    NET_SPLIT_OSD stuOSD[DH_VIDEO_CUSTOM_OSD_NUM]; 
} DH_OUT_SPLIT_GET_OSD;
typedef struct tagDH_IN_SPLIT_SET_OSD
{
    DWORD dwSize;
    int nChannel;                                  
    int nWindow;                                   
    int nOSDNum;                                   
    NET_SPLIT_OSD stuOSD[DH_VIDEO_CUSTOM_OSD_NUM]; 
} DH_IN_SPLIT_SET_OSD;
typedef struct tagDH_OUT_SPLIT_SET_OSD
{
    DWORD dwSize;
} DH_OUT_SPLIT_SET_OSD;
typedef struct tagNET_IN_SPLIT_GET_OSD_EX
{
    DWORD dwSize;
    int nChannel; 
    int nWindow;  
} NET_IN_SPLIT_GET_OSD_EX;
typedef struct tagNET_OUT_SPLIT_GET_OSD_EX
{
    DWORD dwSize;
    int nOSDNum;                                      
    NET_SPLIT_OSD stuOSD[DH_VIDEO_CUSTOM_OSD_NUM_EX]; 
} NET_OUT_SPLIT_GET_OSD_EX;
typedef struct tagNET_IN_SPLIT_SET_OSD_EX
{
    DWORD dwSize;
    int nChannel;                                     
    int nWindow;                                      
    int nOSDNum;                                      
    NET_SPLIT_OSD stuOSD[DH_VIDEO_CUSTOM_OSD_NUM_EX]; 
} NET_IN_SPLIT_SET_OSD_EX;
typedef struct tagNET_OUT_SPLIT_SET_OSD_EX
{
    DWORD dwSize;
} NET_OUT_SPLIT_SET_OSD_EX;
typedef enum
{
    EM_VIDEO_OUT_CTRL_CHANNEL,      
    EM_VIDEO_OUT_CTRL_COMPOSITE_ID, 
} EM_VIDEO_OUT_CTRL_TYPE;
typedef struct tagNET_IN_SET_SPLIT_SOURCE
{
    DWORD dwSize;
    EM_VIDEO_OUT_CTRL_TYPE emCtrlType; 
    int nChannel;                      
    const char* pszCompositeID;        
    int nWindow;                       
    DH_SPLIT_SOURCE* pstuSources;      
    int nSourceCount;                  
} NET_IN_SET_SPLIT_SOURCE;
typedef struct tagNET_SET_SPLIT_SOURCE_RESULT
{
    DWORD dwSize;
    int nPushPort; 
} NET_SET_SPLIT_SOURCE_RESULT;
typedef struct tagNET_OUT_SET_SPLIT_SOURCE
{
    DWORD dwSize;
    NET_SET_SPLIT_SOURCE_RESULT* pstuResults; 
    int nMaxResultCount;                      
    int nRetCount;                            
} NET_OUT_SET_SPLIT_SOURCE;
typedef struct tagNET_IN_SPLIT_EXCHANGE_SOURCE
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindowID1;             
    int nWindowID2;             
} NET_IN_SPLIT_EXCHANGE_SOURCE;
typedef struct tagNET_OUT_SPLIT_EXCHANGE_SOURCE
{
    DWORD dwSize;
} NET_OUT_SPLIT_EXCHANGE_SOURCE;
typedef enum tagNET_VOLUME_TYPE
{
    VOLUME_TYPE_ALL = 0,       
    VOLUME_TYPE_PHYSICAL,      
    VOLUME_TYPE_RAID,          
    VOLUME_TYPE_VOLUME_GROUP,  
    VOLUME_TYPE_ISCSI,         
    VOLUME_TYPE_INVIDUAL_PHY,  
    VOLUME_TYPE_GLOBAL_SPARE,  
    VOLUME_TYPE_NAS,           
    VOLUME_TYPE_INVIDUAL_RAID, 
    VOLUME_TYPE_MAX,
} NET_VOLUME_TYPE;
#define MAX_DEVICE_VOLUME_NUMS 128 
typedef struct tagNET_IN_STORAGE_DEV_NAMES
{
    DWORD dwSize;
    NET_VOLUME_TYPE emVolumeType; 
} NET_IN_STORAGE_DEV_NAMES;
typedef struct tagNET_OUT_STORAGE_DEV_NAMES
{
    DWORD dwSize;
    int nDevNamesNum;                                                    
    char szStoregeDevNames[MAX_DEVICE_VOLUME_NUMS][DH_STORAGE_NAME_LEN]; 
} NET_OUT_STORAGE_DEV_NAMES;
typedef struct tagNET_IN_STORAGE_DEV_INFOS
{
    DWORD dwSize;
    NET_VOLUME_TYPE emVolumeType; 
} NET_IN_STORAGE_DEV_INFOS;
typedef struct tagNET_OUT_STORAGE_DEV_INFOS
{
    DWORD dwSize;
    int nDevInfosNum;                                             
    DH_STORAGE_DEVICE stuStoregeDevInfos[MAX_DEVICE_VOLUME_NUMS]; 
} NET_OUT_STORAGE_DEV_INFOS;
typedef enum tagNET_RECENCY_CAR_INFO
{
    RECENCY_CAR_INFO_UNKNOW = 0,
    RECENCY_CAR_INFOO_NEWEST, 
    RECENCY_CAR_INFO_ODLEST,  
    RECENCY_CAR_INFO_MAX,
} NET_RECENCY_CAR_INFO;
typedef struct tagNET_IN_GET_RECENCY_JUNCTION_CAR_INFO
{
    DWORD dwSize;
    int nChannel;                       
    NET_RECENCY_CAR_INFO emRecencyType; 
    DWORD nIndex;                       
} NET_IN_GET_RECENCY_JUNCTION_CAR_INFO;
typedef struct tagNET_OUT_GET_RECENCY_JUNCTION_CAR_INFO
{
    DWORD dwSize;
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
} NET_OUT_GET_RECENCY_JUNCTION_CAR_INFO;
#define NET_MAX_FISHEYE_WINDOW_NUM 8 
typedef struct tagNET_FISHEYE_WINDOW_INFO
{
    DWORD dwSize;
    DWORD dwWindowID;     
    int nFocusX;          
    int nFocusY;          
    int nHorizontalAngle; 
    int nVerticalAngle;   
} NET_FISHEYE_WINDOW_INFO;
typedef struct tagNET_IN_FISHEYE_WININFO
{
    DWORD dwSize;
    int nChannelId;                           
    int nWindowNum;                           
    int nWindows[NET_MAX_FISHEYE_WINDOW_NUM]; 
} NET_IN_FISHEYE_WININFO;
typedef struct tagNET_OUT_FISHEYE_WININFO
{
    DWORD dwSize;
    int nWindowNum;                                                 
    NET_FISHEYE_WINDOW_INFO stuWindows[NET_MAX_FISHEYE_WINDOW_NUM]; 
} NET_OUT_FISHEYE_WININFO;
typedef struct tagNET_IN_GET_LANES_STATE
{
    DWORD dwSize;
    int nLaneNumber; 
} NET_IN_GET_LANES_STATE;
typedef enum tagNET_TRAFFIC_LIGHT_STATUS
{
    LIGHT_STATUS_UNKNOWN = 0, 
    LIGHT_STATUS_RED,         
    LIGHT_STATUS_GREEN,       
    LIGHT_STATUS_YELLOW,      
} NET_TRAFFIC_LIGHT_STATUS;
typedef struct tatNET_TRAFFIC_LIGHT_INFO
{
    DWORD dwSize;
    NET_TRAFFIC_LIGHT_STATUS emStraightLightInfo; 
    NET_TRAFFIC_LIGHT_STATUS emLeftLightInfo;     
    NET_TRAFFIC_LIGHT_STATUS emRightLightInfo;    
    NET_TRAFFIC_LIGHT_STATUS emUTurnLightInfo;    
} NET_TRAFFIC_LIGHT_INFO;
typedef enum tagNET_TRAFFIC_DIRECTION
{
    DIRECTION_UNKNOW = 0, 
    DIRECTION_STRAIGHT,   
    DIRECTION_LEFT,       
    DIRECTION_RIGHT,      
    DIRECTION_UTURN,      
} NET_TRAFFIC_DIRECTION;
typedef struct tagNET_TRAFFIC_LANE_INFO
{
    DWORD dwSize;
    UINT nLaneNumber;                                                  
    UINT nSupportDirectionNum;                                         
    NET_TRAFFIC_DIRECTION emTrafficDirections[MAX_LANE_DIRECTION_NUM]; 
    NET_TRAFFIC_JAM_STATUS emJamState;                                 
    UINT nLargeVehicleNum;  
    UINT nMediumVehicleNum; 
    UINT nSmallVehicleNum;  
    UINT nMotoNum;          
} NET_TRAFFIC_LANE_INFO;
typedef struct tagNET_OUT_GET_LANES_STATE
{
    DWORD dwSize;
    int nGetLaneInfoNum;                                  
    NET_TRAFFIC_LANE_INFO stLaneInfos[MAX_LANE_INFO_NUM]; 
    NET_TRAFFIC_LIGHT_INFO stLightInfo;                   
} NET_OUT_GET_LANES_STATE;
typedef struct tagNET_IN_SYSTEM_INFO
{
    DWORD dwSize;
} NET_IN_SYSTEM_INFO;
typedef struct tagNET_OUT_SYSTEM_INFO
{
    DWORD dwSize;
    BOOL bHasRTC;                                       
    int nRetMCUNum;                                     
    char szMCUVersion[MAX_MCU_NUM][DH_MAX_VERSION_LEN]; 
} NET_OUT_SYSTEM_INFO;
typedef struct tagNET_IN_REGDEV_NET_INFO
{
    DWORD dwSize;
    char szDevSerial[DH_DEV_SERIALNO_LEN]; 
} NET_IN_REGDEV_NET_INFO;
typedef enum tagNET_CELLUAR_NET_TYPE
{
    EM_CELLUAR_NET_UNKNOW = -1,          
    EM_CELLUAR_NET_PRIVATE_3G_4G = 0,    
    EM_CELLUAR_NET_COMMERCIAL_3G_4G = 1, 
    EM_CELLUAR_NET_MAX,
} NET_CELLUAR_NET_TYPE;
typedef struct tagNET_OUT_REGDEV_NET_INFO
{
    DWORD dwSize;
    NET_CELLUAR_NET_TYPE emCelluarNetType; 
} NET_OUT_REGDEV_NET_INFO;
typedef enum tagNET_VIDEO_CHANNEL_TYPE
{
    NET_VIDEO_CHANNEL_TYPE_ALL,    
    NET_VIDEO_CHANNEL_TYPE_INPUT,  
    NET_VIDEO_CHANNEL_TYPE_OUTPUT, 
} NET_VIDEO_CHANNEL_TYPE;
typedef struct tagNET_IN_GET_VIDEOCHANNELSINFO
{
    DWORD dwSize;
    NET_VIDEO_CHANNEL_TYPE emType; 
} NET_IN_GET_VIDEOCHANNELSINFO;
typedef struct tagNET_VIDEOCHANNELS_INPUT
{
    int nThermographyCount; 
    int nThermography[64];  
    int nMultiPreviewCount; 
    int nMultiPreview[4];   
    int nPIPCount;          
    int nPIP[4];            
    int nCompressPlayCount; 
    int nCompressPlay[4];   
    int nSDCount;           
    int nSD[64];            
    int nPTZCount;          
    short nPTZ[64];         
    int nFuseRadarCount;    
    int nFuseRadar[64];     
    int nPureRadarCount;    
    int nPureRadar[64];     
    BOOL bIsPTZValid;       
    char reserved[4092];
} NET_VIDEOCHANNELS_INPUT;
typedef struct tagNET_VIDEOCHANNELS_INPUT_EX
{
    int nSDCount;              
    unsigned short nSD[1024];  
    int nPTZCount;             
    unsigned short nPTZ[1024]; 
    BOOL bIsPTZValid;          
    char reserved[1020];       
} NET_VIDEOCHANNELS_INPUT_EX;
typedef struct tagNET_VIDEOCHANNELS_OUTPUT
{
    int nVGACount; 
    int nVGA[128]; 
    int nTVCount;  
    int nTV[128];  
    char reserved[512];
} NET_VIDEOCHANNELS_OUTPUT;
typedef struct tagNET_OUT_GET_VIDEOCHANNELSINFO
{
    DWORD dwSize;
    NET_VIDEOCHANNELS_INPUT stInputChannels;      
    NET_VIDEOCHANNELS_OUTPUT stOutputChannels;    
    NET_VIDEOCHANNELS_INPUT_EX stInputChannelsEx; 
} NET_OUT_GET_VIDEOCHANNELSINFO;
typedef struct tagNET_IN_WORKGROUP_NAMES
{
    DWORD dwSize;
} NET_IN_WORKGROUP_NAMES;
#define WORKGROUP_NAME_LEN 32
typedef struct tagNET_OUT_WORKGROUP_NAMES
{
    DWORD dwSize;
    int nCount;                          
    char szName[64][WORKGROUP_NAME_LEN]; 
} NET_OUT_WORKGROUP_NAMES;
typedef struct tagNET_IN_WORKGROUP_INFO
{
    DWORD dwSize;
    char szName[WORKGROUP_NAME_LEN]; 
} NET_IN_WORKGROUP_INFO;
typedef struct tagNET_OUT_WORKGROUP_INFO
{
    DWORD dwSize;
    int nState;      
    int nTotalSpace; 
    int nFreeSpace;  
} NET_OUT_WORKGROUP_INFO;
typedef struct tagNET_IN_WLAN_ACCESSPOINT
{
    DWORD dwSize;
    char szSSID[DH_MAX_SSID_LEN];      
    char szName[MAX_COMMON_STRING_32]; 
} NET_IN_WLAN_ACCESSPOINT;
typedef struct tagNET_WLAN_ACCESSPOINT_INFO
{
    char szSSID[DH_MAX_SSID_LEN]; 
    int nStrength;                
    int nAuthMode;                
    int nEncrAlgr;                
    char reserved[1016];
} NET_WLAN_ACCESSPOINT_INFO;
typedef struct tagNET_OUT_WLAN_ACCESSPOINT
{
    DWORD dwSize;
    int nCount;                             
    NET_WLAN_ACCESSPOINT_INFO stuInfo[128]; 
} NET_OUT_WLAN_ACCESSPOINT;
typedef struct tagNET_IN_TRAFFICRADAR_VERSION
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_TRAFFICRADAR_VERSION;
typedef struct tagNET_OUT_TRAFFICRADAR_VERSION
{
    DWORD dwSize;
    char szVersion[DH_MAX_VERSION_LEN]; 
} NET_OUT_TRAFFICRADAR_VERSION;
typedef NET_OUT_GET_LANES_STATE NET_CB_LANES_STATE;
typedef void(CALLBACK* fNotifyLanesState)(LLONG lLanesStateHandle, NET_CB_LANES_STATE* pLanesStateInfo, LDWORD dwUser, void* reserved);
typedef struct tagNET_IN_ATTACH_LANES_STATE
{
    DWORD dwSize;    
    int nChannelID;  
    int nLaneNumber; 
    fNotifyLanesState cbNotifyLanesState; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_LANES_STATE;
typedef struct tagNET_OUT_ATTACH_LANES_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_LANES_STATE;
typedef struct tagNET_IN_MATRIX_SWITCH
{
    DWORD dwSize;
    DH_SPLIT_MODE emSplitMode; 
    int* pnOutputChannels;     
    int nOutputChannelCount;   
    int* pnInputChannels;      
    int nInputChannelCount;    
} NET_IN_MATRIX_SWITCH;
typedef struct tagNET_OUT_MATRIX_SWITCH
{
    DWORD dwSize;
} NET_OUT_MATRIX_SWITCH;
typedef struct tagNET_IN_SPLIT_SET_MULTI_SOURCE
{
    DWORD dwSize;
    EM_VIDEO_OUT_CTRL_TYPE emCtrlType; 
    int nChannel;                      
    const char* pszCompositeID;        
    BOOL bSplitModeEnable;             
    DH_SPLIT_MODE emSplitMode;         
    int nGroupID;                      
    int* pnWindows;                    
    int nWindowCount;                  
    DH_SPLIT_SOURCE* pstuSources;      
} NET_IN_SPLIT_SET_MULTI_SOURCE;
typedef struct tagNET_OUT_SPLIT_SET_MULTI_SOURCE
{
    DWORD dwSize;
} NET_OUT_SPLIT_SET_MULTI_SOURCE;
typedef enum tagNET_SPLIT_OPERATE_TYPE
{
    NET_SPLIT_OPERATE_SET_BACKGROUND,  
    NET_SPLIT_OPERATE_GET_BACKGROUND,  
    NET_SPLIT_OPERATE_SET_PREPULLSRC,  
    NET_SPLIT_OPERATE_SET_HIGHLIGHT,   
    NET_SPLIT_OPERATE_SET_ZORDER,      
    NET_SPLIT_OPERATE_SET_TOUR,        
    NET_SPLIT_OPERATE_GET_TOUR_STATUS, 
    NET_SPLIT_OPERATE_GET_SCENE,       
    NET_SPLIT_OPERATE_OPEN_WINDOWS,    
    NET_SPLIT_OPERATE_SET_WORK_MODE,   
    NET_SPLIT_OPERATE_GET_PLAYER,      
    NET_WM_OPERATE_SET_WORK_MODE,      
    NET_WM_OPERATE_GET_WORK_MODE,      
    NET_SPLIT_OPERATE_CLOSE_WINDOWS,   
    NET_WM_OPERATE_SET_FISH_EYE_PARAM, 
    NET_WM_OPERATE_SET_CORRIDOR_MODE,  
    NET_WM_OPERATE_GET_CORRIDOR_MODE,  
    NET_WM_OPERATE_SET_VOLUME_COLUMN,  
    NET_WM_OPERATE_GET_VOLUME_COLUMN,  
    NET_WM_OPERATE_SET_BACKGROUND,     
    NET_WM_OPERATE_GET_BACKGROUND,     
    NET_WM_OPERATE_SET_ROTATE_MODE,    
    NET_WM_OPERATE_SET_MEETING_MODE,         
    NET_WM_OPERATE_SET_LOCK_POSITION,        
    NET_WM_OPERATE_SET_COLLECTION_CTRL_ID,   
    NET_SPLIT_OPERATES_SET_SOURCE_ATTRIBUTE, 
    NET_SPLIT_OPERATES_SET_DOCK_CONTROL,     
    NET_WM_OPERATE_SET_MODE,                 
} NET_SPLIT_OPERATE_TYPE;
typedef struct tagNET_IN_SPLIT_SET_HIGHLIGHT
{
    DWORD dwSize;
    int nChannel;           
    int nWindow;            
    BOOL bHighLightEn;      
    DH_COLOR_RGBA stuColor; 
    int nBlinkTimes;        
    int nBlinkInterval;     
} NET_IN_SPLIT_SET_HIGHLIGHT;
typedef struct tagNET_OUT_SPLIT_SET_HIGHLIGHT
{
    DWORD dwSize;
} NET_OUT_SPLIT_SET_HIGHLIGHT;
typedef struct tagNET_IN_SPLIT_SET_PREPULLSRC
{
    DWORD dwSize;
    int nChannel;              
    int nWindow;               
    int nSrcCount;             
    DH_SPLIT_SOURCE* pSources; 
} NET_IN_SPLIT_SET_PREPULLSRC;
typedef struct tagNET_SPLIT_SET_PREPULLSRC_RESULT
{
    DWORD dwSize;
    BOOL bResult;      
    DWORD dwErrorCode; 
} NET_SPLIT_SET_PREPULLSRC_RESULT;
typedef struct tagNET_OUT_SPLIT_SET_PREPULLSRC
{
    DWORD dwSize;
    int nResultCount;                          
    NET_SPLIT_SET_PREPULLSRC_RESULT* pResults; 
} NET_OUT_SPLIT_SET_PREPULLSRC;
typedef struct tagNET_IN_SPLIT_SET_BACKGROUND
{
    DWORD dwSize;
    int nChannel;            
    BOOL bEnable;            
    const char* pszFileName; 
} NET_IN_SPLIT_SET_BACKGROUND;
typedef struct tagNET_OUT_SPLIT_SET_BACKGROUND
{
    DWORD dwSize;
} NET_OUT_SPLIT_SET_BACKGROUND;
typedef struct tagNET_IN_SPLIT_GET_BACKGROUND
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_SPLIT_GET_BACKGROUND;
typedef struct tagNET_OUT_SPLIT_GET_BACKGROUND
{
    DWORD dwSize;
    BOOL bEnable;                          
    char szFileName[DH_COMMON_STRING_256]; 
} NET_OUT_SPLIT_GET_BACKGROUND;
typedef struct tagNET_IN_WM_SET_BACKGROUND
{
    DWORD dwSize;
    int nChannel;                          
    char* pszCompositeID;                  
    int nWindowID;                         
    BOOL bEnable;                          
    char szFileName[DH_COMMON_STRING_128]; 
} NET_IN_WM_SET_BACKGROUND;
typedef struct tagNET_OUT_WM_SET_BACKGROUND
{
    DWORD dwSize;
} NET_OUT_WM_SET_BACKGROUND;
typedef struct tagNET_IN_WM_GET_BACKGROUND
{
    DWORD dwSize;
    int nChannel;         
    char* pszCompositeID; 
    int nWindowID;        
} NET_IN_WM_GET_BACKGROUND;
typedef struct tagNET_OUT_WM_GET_BACKGROUND
{
    DWORD dwSize;
    BOOL bEnable;                          
    char szFileName[DH_COMMON_STRING_128]; 
} NET_OUT_WM_GET_BACKGROUND;
typedef enum tagNET_WINDOW_ZORDER
{
    NET_WINDOW_ZORDER_TOP,    
    NET_WINDOW_ZORDER_BOTTOM, 
    NET_WINDOW_ZORDER_UP,     
    NET_WINDOW_ZORDER_DOWN,   
} NET_WINDOW_ZORDER;
typedef struct tagDH_WND_ZORDER
{
    DWORD dwSize;
    unsigned int nWindowID; 
    unsigned int nZOrder;   
} DH_WND_ZORDER;
typedef struct tagNET_IN_SPLIT_SET_ZORDER
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindow;                
    NET_WINDOW_ZORDER emZOrder; 
} NET_IN_SPLIT_SET_ZORDER;
typedef struct tagNET_OUT_SPLIT_SET_ZORDER
{
    DWORD dwSize;
    DH_WND_ZORDER* pZOders; 
    int nMaxWndCount;       
    int nWndCount;          
} NET_OUT_SPLIT_SET_ZORDER;
typedef enum tagEM_NET_WINDOW_TOUR_ACTION
{
    EM_NET_WND_TOUR_ACTION_START, 
    EM_NET_WND_TOUR_ACTION_STOP,  
} EM_NET_WINDOW_TOUR_ACTION;
typedef struct tagNET_IN_SPLIT_SET_TOUR
{
    DWORD dwSize;
    int nChannel;                       
    const char* pszCompositeID;         
    int nWindow;                        
    EM_NET_WINDOW_TOUR_ACTION emAction; 
} NET_IN_SPLIT_SET_TOUR;
typedef struct tagNET_OUT_SPLIT_SET_TOUR
{
    DWORD dwSize;
} NET_OUT_SPLIT_SET_TOUR;
typedef struct tagNET_IN_SPLIT_GET_TOUR_STATUS
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindow;                
} NET_IN_SPLIT_GET_TOUR_STATUS;
typedef enum tagNET_TOUR_STATUS
{
    NET_TOUR_UNKNOWN, 
    NET_TOUR_START,   
    NET_TOUR_STOP,    
} NET_TOUR_STATUS;
typedef struct tagNET_WINDOW_TOUR_STATUS_INFO
{
    DWORD dwSize;
    int nWindow;              
    NET_TOUR_STATUS emStatus; 
} NET_WINDOW_TOUR_STATUS_INFO;
typedef struct tagNET_OUT_SPLIT_GET_TOUR_STATUS
{
    DWORD dwSize;
    NET_WINDOW_TOUR_STATUS_INFO* pstuStatus; 
    int nMaxStatusCount;                     
    int nRetStatusCount;                     
} NET_OUT_SPLIT_GET_TOUR_STATUS;
typedef struct tagNET_IN_SPLIT_OPEN_WINDOWS
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindowNum;             
    NET_RECT* pstuWindowRects;  
    BOOL bDirectable;           
} NET_IN_SPLIT_OPEN_WINDOWS;
typedef struct tagNET_SPLIT_WINDOW_INFO
{
    DWORD dwSize;
    int nWindowID;                   
    int nZOrder;                     
    char szControlID[DH_DEV_ID_LEN]; 
} NET_SPLIT_WINDOW_INFO;
typedef struct tagNET_OUT_SPLIT_OPEN_WINDOWS
{
    DWORD dwSize;
    NET_SPLIT_WINDOW_INFO* pstuWindows; 
    int nMaxWindowCount;                
    int nRetWindowCount;                
} NET_OUT_SPLIT_OPEN_WINDOWS;
typedef enum tagNET_SPLIT_WORK_MODE
{
    NET_SPLIT_WORK_MODE_UNKNOWN, 
    NET_SPLIT_WORK_MODE_LOCAL,   
    NET_SPLIT_WORK_MODE_REPLAY,  
} NET_SPLIT_WORK_MODE;
typedef struct tagNET_IN_SPLIT_SET_WORK_MODE
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    NET_SPLIT_WORK_MODE emMode; 
} NET_IN_SPLIT_SET_WORK_MODE;
typedef struct tagNET_OUT_SPLIT_SET_WORK_MODE
{
    DWORD dwSize;
} NET_OUT_SPLIT_SET_WORK_MODE;
typedef enum tagNET_SPLIT_PLAYER_TYPE
{
    NET_SPLIT_PLAYER_TYPE_UNKNOWN,   
    NET_SPLIT_PLAYER_TYPE_FILE_LIST, 
    NET_SPLIT_PLAYER_TYPE_FILE,      
} NET_SPLIT_PLAYER_TYPE;
typedef struct tagNET_IN_SPLIT_GET_PLAYER
{
    DWORD dwSize;
    int nChannel;                 
    const char* pszCompositeID;   
    NET_SPLIT_PLAYER_TYPE emType; 
    int nWindow;                  
} NET_IN_SPLIT_GET_PLAYER;
typedef struct tagNET_OUT_SPLIT_GET_PLAYER
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_OUT_SPLIT_GET_PLAYER;
typedef enum tagNET_WM_WORK_MODE
{
    NET_WM_WORK_MODE_UNKNOWN, 
    NET_WM_WORK_MODE_DISPLAY, 
    NET_WM_WORK_MODE_REPLAY,  
} NET_WM_WORK_MODE;
typedef struct tagNET_IN_WM_SET_WORK_MODE
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindow;                
    NET_WM_WORK_MODE emMode;    
} NET_IN_WM_SET_WORK_MODE;
typedef struct tagNET_OUT_WM_SET_WORK_MODE
{
    DWORD dwSize;
} NET_OUT_WM_SET_WORK_MODE;
typedef struct tagNET_IN_WM_GET_WORK_MODE
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindow;                
} NET_IN_WM_GET_WORK_MODE;
typedef struct tagNET_OUT_WM_GET_WORK_MODE
{
    DWORD dwSize;
    NET_WM_WORK_MODE emMode; 
} NET_OUT_WM_GET_WORK_MODE;
typedef struct tagNET_IN_WM_SET_CORRIDOR_MODE
{
    DWORD dwSize;               
    int nChannel;               
    const char* pszCompositeID; 
    int nWindow;                
    BOOL bIsCorridor;           
} NET_IN_WM_SET_CORRIDOR_MODE;
typedef struct tagNET_OUT_WM_SET_CORRIDOR_MODE
{
    DWORD dwSize; 
} NET_OUT_WM_SET_CORRIDOR_MODE;
typedef struct tagNET_IN_WM_GET_CORRIDOR_MODE
{
    DWORD dwSize;               
    int nChannel;               
    const char* pszCompositeID; 
    int nWindow;                
} NET_IN_WM_GET_CORRIDOR_MODE;
typedef struct tagNET_OUT_WM_GET_CORRIDOR_MODE
{
    DWORD dwSize;     
    BOOL bIsCorridor; 
} NET_OUT_WM_GET_CORRIDOR_MODE;
typedef struct tagNET_IN_WM_SET_VOLUME_COLUMN
{
    DWORD dwSize;               
    int nChannel;               
    const char* pszCompositeID; 
    BOOL bIsEnable;             
} NET_IN_WM_SET_VOLUME_COLUMN;
typedef struct tagNET_OUT_WM_SET_VOLUME_COLUMN
{
    DWORD dwSize; 
} NET_OUT_WM_SET_VOLUME_COLUMN;
typedef struct tagNET_IN_WM_GET_VOLUME_COLUMN
{
    DWORD dwSize;               
    int nChannel;               
    const char* pszCompositeID; 
} NET_IN_WM_GET_VOLUME_COLUMN;
typedef struct tagNET_OUT_WM_GET_VOLUME_COLUMN
{
    DWORD dwSize;   
    BOOL bIsEnable; 
} NET_OUT_WM_GET_VOLUME_COLUMN;
typedef struct tagNET_IN_SPLIT_CLOSE_WINDOWS
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int* pnWindows;             
    int nWindowCount;           
} NET_IN_SPLIT_CLOSE_WINDOWS;
typedef struct tagNET_SPLIT_CLOSE_WINDOW_RESULT
{
    BOOL bResult;       
    char reserved[256]; 
} NET_SPLIT_CLOSE_WINDOW_RESULT;
typedef struct tagNET_OUT_SPLIT_CLOSE_WINDOWS
{
    DWORD dwSize;
    NET_SPLIT_CLOSE_WINDOW_RESULT* pstuResults; 
    int nMaxResultCount;                        
    int nRetResultCount;                        
} NET_OUT_SPLIT_CLOSE_WINDOWS;
typedef enum tagNET_WM_FISHEYE_CALIBRATE_MODE
{
    NET_WM_FISHEYE_CALIBRATE_MODE_UNKOWN,          
    NET_WM_FISHEYE_CALIBRATE_MODE_CLOSE,           
    NET_WM_FISHEYE_CALIBRATE_MODE_ORIGINAL,        
    NET_WM_FISHEYE_CALIBRATE_MODE_PANORAMA,        
    NET_WM_FISHEYE_CALIBRATE_MODE_PAN_PLUS_ONE,    
    NET_WM_FISHEYE_CALIBRATE_MODE_DOUBLE_PANORAMA, 
    NET_WM_FISHEYE_CALIBRATE_MODE_ORI_DOUBLE_PAN,  
    NET_WM_FISHEYE_CALIBRATE_MODE_ORI_PLUS_THREEE, 
    NET_WM_FISHEYE_CALIBRATE_MODE_PAN_PLUS_THREEE, 
    NET_WM_FISHEYE_CALIBRATE_MODE_ORI_PLUS_TWO,    
    NET_WM_FISHEYE_CALIBRATE_MODE_ORI_PLUS_FOUR,   
    NET_WM_FISHEYE_CALIBRATE_MODE_PAN_PLUS_FOUR,   
    NET_WM_FISHEYE_CALIBRATE_MODE_PAN_PLUS_SIX,    
    NET_WM_FISHEYE_CALIBRATE_MODE_ORI_PLUS_EIGHT,  
    NET_WM_FISHEYE_CALIBRATE_MODE_PAN_PLUS_EIGHT,  
} NET_WM_FISHEYE_CALIBRATE_MODE;
typedef struct tagNET_WM_FISH_EYE_REGION_PARAM
{
    int nCoordinateX;   
    int nCoordinateY;   
    int nAngleH;        
    int nAngleV;        
    int nAvailable;     
    BYTE Reserved[124]; 
} NET_WM_FISH_EYE_REGION_PARAM;
#define MAX_FISH_EYE_REGION_NUM 9
typedef struct tagNET_WM_SET_FISHEYE_INIT_PARAM
{
    BOOL bUseRegion;                                                        
    int nCircular;                                                          
    int nPanorama;                                                          
    int nFishEyeRegionNum;                                                  
    NET_WM_FISH_EYE_REGION_PARAM stFishEyeRegions[MAX_FISH_EYE_REGION_NUM]; 
    BYTE Reserved[1024];                                                    
} NET_WM_SET_FISHEYE_INIT_PARAM;
typedef struct tagNET_WM_SET_FISHEYE_EPTZ_PARAM
{
    int nOptWayType;    
    int nOptWinNum;     
    int nOptWayData;    
    BYTE Reserved[512]; 
} NET_WM_SET_FISHEYE_EPTZ_PARAM;
typedef struct tagNET_IN_WM_SET_FISH_EYE_PARAM
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindowID;              
    NET_FISHEYE_MOUNT_MODE emMount;            
    NET_WM_FISHEYE_CALIBRATE_MODE emCalibrate; 
    NET_WM_SET_FISHEYE_INIT_PARAM stInitParam; 
    NET_WM_SET_FISHEYE_EPTZ_PARAM stEPtzParam; 
} NET_IN_WM_SET_FISH_EYE_PARAM;
typedef struct tagNET_OUT_WM_SET_FISH_EYE_PARAM
{
    DWORD dwSize;
} NET_OUT_WM_SET_FISH_EYE_PARAM;
typedef enum tagEM_WM_ROTATE_TYPE
{
    EM_WM_ROTATE_TYPE_NO_ROTATE,  
    EM_WM_ROTATE_TYPE_90_ROTATE,  
    EM_WM_ROTATE_TYPE_180_ROTATE, 
    EM_WM_ROTATE_TYPE_270_ROTATE, 
} EM_WM_ROTATE_TYPE;
typedef struct tagNET_IN_WM_SET_ROTATE_MODE
{
    DWORD dwSize;
    int nChannel;                   
    const char* pszCompositeID;     
    int nWindowID;                  
    EM_WM_ROTATE_TYPE emRotateType; 
} NET_IN_WM_SET_ROTATE_MODE;
typedef struct tagNET_OUT_WM_SET_ROTATE_MODE
{
    DWORD dwSize;
} NET_OUT_WM_SET_ROTATE_MODE;
typedef struct tagNET_SOURCE_ATTRIBUTE_INFO
{
    unsigned char ucBrightness; 
    unsigned char ucContrast;   
    unsigned char ucSaturation; 
    unsigned char ucEQ;         
    BYTE byReserver1[4];        
    int nMargin[4];             
    BYTE byReserver[512];       
} NET_SOURCE_ATTRIBUTE_INFO;
typedef struct tagNET_IN_SPLIT_SET_SOURCE_ATTRIBUTE
{
    DWORD dwSize;                           
    char szCompositeID[64];                 
    int nChannel;                           
    int nWindow;                            
    NET_SOURCE_ATTRIBUTE_INFO stuAttribute; 
} NET_IN_SPLIT_SET_SOURCE_ATTRIBUTE;
typedef struct tagNET_OUT_SPLIT_SET_SOURCE_ATTRIBUTE
{
    DWORD dwSize; 
} NET_OUT_SPLIT_SET_SOURCE_ATTRIBUTE;
typedef struct tagNET_IN_SPLIT_SET_DOCK_CONTROL
{
    DWORD dwSize;           
    char szCompositeID[64]; 
    int nChannel;           
    int nWindow;            
    BOOL bDock;             
} NET_IN_SPLIT_SET_DOCK_CONTROL;
typedef struct tagNET_OUT_SPLIT_SET_DOCK_CONTROL
{
    DWORD dwSize; 
} NET_OUT_SPLIT_SET_DOCK_CONTROL;
typedef struct tagNET_IN_WM_SET_MEETING_MODE
{
    DWORD dwSize;         
    char szComposite[64]; 
    int nChannel;         
    int nWindow;          
    BOOL bEnable;         
} NET_IN_WM_SET_MEETING_MODE;
typedef struct tagNET_OUT_WM_SET_MEETING_MODE
{
    DWORD dwSize; 
} NET_OUT_WM_SET_MEETING_MODE;
typedef struct tagNET_IN_WM_SET_LOCK_POSITION
{
    DWORD dwSize;         
    char szComposite[64]; 
    int nChannel;         
    int nWindow;          
    BOOL bLock;           
} NET_IN_WM_SET_LOCK_POSITION;
typedef struct tagNET_OUT_WM_SET_LOCK_POSITION
{
    DWORD dwSize; 
} NET_OUT_WM_SET_LOCK_POSITION;
typedef struct tagNET_IN_WM_SET_COLLECTION_CTRL_ID
{
    DWORD dwSize;         
    int nChannel;         
    char szComposite[64]; 
    char szName[128];     
    char szControlID[8];  
} NET_IN_WM_SET_COLLECTION_CTRL_ID;
typedef struct tagNET_OUT_WM_SET_COLLECTION_CTRL_ID
{
    DWORD dwSize; 
} NET_OUT_WM_SET_COLLECTION_CTRL_ID;
typedef struct tagNET_IN_WM_SET_MODE
{
    DWORD dwSize;              
    int nChannel;              
    int nWindow;               
    DH_SPLIT_MODE emSplitMode; 
} NET_IN_WM_SET_MODE;
typedef struct tagNET_SPLITED_WINDOW_INFO
{
    NET_RECT stuRect;     
    int nWindow;          
    int nZOrder;          
    char szControlID[32]; 
    BYTE byReserver[512]; 
} NET_SPLITED_WINDOW_INFO;
typedef struct tagNET_OUT_WM_SET_MODE
{
    DWORD dwSize;                                  
    UINT nSplitedWindowNum;                        
    NET_SPLITED_WINDOW_INFO stuSplitedWindow[144]; 
} NET_OUT_WM_SET_MODE;
typedef struct tagDH_CPU_INFO
{
    DWORD dwSize;
    int nUsage; 
} DH_CPU_INFO;
typedef struct tagDH_CPU_STATUS
{
    DWORD dwSize;
    BOOL bEnable;                        
    int nCount;                          
    DH_CPU_INFO stuCPUs[DH_MAX_CPU_NUM]; 
} DH_CPU_STATUS;
typedef struct tagDH_MEMORY_INFO
{
    DWORD dwSize;
    DWORD dwTotal; 
    DWORD dwFree;  
} DH_MEMORY_INFO;
typedef struct tagDH_MEMORY_STATUS
{
    DWORD dwSize;
    BOOL bEnable;             
    DH_MEMORY_INFO stuMemory; 
} DH_MEMORY_STATUS;
typedef struct tagDH_FAN_INFO
{
    DWORD dwSize;
    char szName[DH_DEVICE_NAME_LEN]; 
    DWORD nSpeed;                    
} DH_FAN_INFO;
typedef struct tagDH_FAN_STATUS
{
    DWORD dwSize;
    BOOL bEnable;                        
    int nCount;                          
    DH_FAN_INFO stuFans[DH_MAX_FAN_NUM]; 
} DH_FAN_STATUS;
typedef enum __EM_CURRENT_STATE_TYPE
{
    EM_CURRENT_STATE_UNKNOWN = 0,
    EM_CURRENT_STATE_OVER_CURRENT,  
    EM_CURRENT_STATE_NORMAL,        
    EM_CURRENT_STATE_UNDER_CURRENT, 
} EM_CURRENT_STATE_TYPE;
typedef enum tagEM_VOLTAGE_STATE_TYPE
{
    EM_VOLTAGE_STATE_UNKNOWN, 
    EM_VOLTAGE_STATE_OVER,    
    EM_VOLTAGE_STATE_NORMAL,  
    EM_VOLTAGE_STATE_UNDER,   
} EM_VOLTAGE_STATE_TYPE;
typedef struct tagDH_POWER_INFO
{
    DWORD dwSize;
    BOOL bPowerOn;                        
    EM_CURRENT_STATE_TYPE emCurrentState; 
    EM_VOLTAGE_STATE_TYPE emVoltageState; 
} DH_POWER_INFO;
typedef enum __EM_BATTERY_EXIST_STATE
{
    EM_BATTERY_EXIST_STATE_UNKNOWN = 0,
    EM_BATTERY_EXIST_STATE_EXIST,   
    EM_BATTERY_EXIST_STATE_MISSING, 
} EM_BATTERY_EXIST_STATE;
typedef enum __EM_BATTERY_STATE
{
    EM_BATTERY_STATE_UNKNOWN = 0,
    EM_BATTERY_STATE_NORMAL, 
    EM_BATTERY_STATE_LOW,    
} EM_BATTERY_STATE;
typedef enum tagEM_BATTERY_TEMPER_STATE
{
    EM_BATTERY_TEMPER_STATE_UNKNOWN,         
    EM_BATTERY_TEMPER_STATE_LOW_TEMPER,      
    EM_BATTERY_TEMPER_STATE_NORMAL_TEMPER,   
    EM_BATTERY_TEMPER_STATE_HIGH_TEMPER,     
    EM_BATTERY_TEMPER_STATE_OVER_TEMPER,     
    EM_BATTERY_TEMPER_STATE_ABNORMAL_TEMPER, 
} EM_BATTERY_TEMPER_STATE;
typedef struct tagDH_BATTERY_INFO
{
    DWORD dwSize;
    int nPercent;                          
    BOOL bCharging;                        
    EM_BATTERY_EXIST_STATE emExistState;   
    EM_BATTERY_STATE emState;              
    float fVoltage;                        
    EM_BATTERY_TEMPER_STATE emTemperState; 
} DH_BATTERY_INFO;
typedef struct tagDH_POWER_STATUS
{
    DWORD dwSize;
    BOOL bEnable;                                     
    int nCount;                                       
    DH_POWER_INFO stuPowers[DH_MAX_POWER_NUM];        
    int nBatteryNum;                                  
    DH_BATTERY_INFO stuBatteries[DH_MAX_BATTERY_NUM]; 
} DH_POWER_STATUS;
typedef struct tagDH_TEMPERATURE_INFO
{
    DWORD dwSize;
    char szName[DH_DEVICE_NAME_LEN]; 
    float fTemperature;              
} DH_TEMPERATURE_INFO;
typedef struct tagDH_TEMPERATURE_STATUS
{
    DWORD dwSize;
    BOOL bEnable;                                         
    int nCount;                                           
    DH_TEMPERATURE_INFO stuTemps[DH_MAX_TEMPERATURE_NUM]; 
} DH_TEMPERATURE_STATUS;
typedef struct tagDH_SYSTEM_STATUS
{
    DWORD dwSize;
    DH_CPU_STATUS* pstuCPU;          
    DH_MEMORY_STATUS* pstuMemory;    
    DH_FAN_STATUS* pstuFan;          
    DH_POWER_STATUS* pstuPower;      
    DH_TEMPERATURE_STATUS* pstuTemp; 
} DH_SYSTEM_STATUS;
typedef enum tagNET_ALARM_CHANNEL_TYPE
{
    NET_ALARM_CHANNEL_TYPE_ALL,        
    NET_ALARM_CHANNEL_TYPE_ALARMIN,    
    NET_ALARM_CHANNEL_TYPE_ALARMOUT,   
    NET_ALARM_CHANNEL_TYPE_ALARMBELL,  
    NET_ALARM_CHANNEL_TYPE_EXALARMIN,  
    NET_ALARM_CHANNEL_TYPE_EXALARMOUT, 
} NET_ALARM_CHANNEL_TYPE;
typedef struct tagNET_CLIENT_ALARM_CHANNELS_STATE
{
    DWORD dwSize;
    NET_ALARM_CHANNEL_TYPE emType; 
    int nAlarmInCount;             
    int nAlarmInRetCount;          
    BOOL* pbAlarmInState;          
    int nAlarmOutCount;            
    int nAlarmOutRetCount;         
    BOOL* pbAlarmOutState;         
    int nAlarmBellCount;           
    int nAlarmBellRetCount;        
    BOOL* pbAlarmBellState;        
    int nExAlarmInCount;           
    int nExAlarmInRetCount;        
    BOOL* pbExAlarmInState;        
    int* pnExAlarmInDestionation;  
    int nExAlarmOutCount;          
    int nExAlarmOutRetCount;       
    BOOL* pbExAlarmOutState;       
    int* pnExAlarmOutDestionation; 
} NET_CLIENT_ALARM_CHANNELS_STATE;
typedef struct tagNET_ALARMKEYBOARD_COUNT
{
    DWORD dwSize;
    int nAlarmKeyboardCount; 
} NET_ALARMKEYBOARD_COUNT;
typedef enum tagEM_COM_PORT_DEVICE_TYPE
{
    EM_COM_PORT_DEVICE_TYPE_UNKNOWN,       
    EM_COM_PORT_DEVICE_TYPE_PTZ,           
    EM_COM_PORT_DEVICE_TYPE_GPS,           
    EM_COM_PORT_DEVICE_TYPE_ALARMKEYBOARD, 
    EM_COM_PORT_DEVICE_TYPE_EXALARMBOX,    
} EM_COM_PORT_DEVICE_TYPE;
typedef struct tagNET_IN_GET_COM_PORT_DEVICE_CHANNEL_INFO
{
    DWORD dwSize;
    EM_COM_PORT_DEVICE_TYPE emDeviceType; 
} NET_IN_GET_COM_PORT_DEVICE_CHANNEL_INFO;
typedef struct tagNET_OUT_GET_COM_PORT_DEVICE_CHANNEL_INFO
{
    DWORD dwSize;
    int nDeviceCount;          
    int nMaxOnlineDeviceCount; 
    int nRetOnlineDeviceCount; 
    int* pOnlineChannel;       
} NET_OUT_GET_COM_PORT_DEVICE_CHANNEL_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetComPortDeviceChannelInfo(LLONG lLoginID, const NET_IN_GET_COM_PORT_DEVICE_CHANNEL_INFO* pInParam, NET_OUT_GET_COM_PORT_DEVICE_CHANNEL_INFO* pOutParam, int nWaitTime);
typedef struct tagDH_IN_SPLIT_OPEN_WINDOW
{
    DWORD dwSize;
    int nChannel;     
    DH_RECT stuRect;  
    BOOL bDirectable; 
} DH_IN_SPLIT_OPEN_WINDOW;
typedef struct tagDH_OUT_SPLIT_OPEN_WINDOW
{
    DWORD dwSize;
    unsigned int nWindowID; 
    unsigned int nZOrder;   
} DH_OUT_SPLIT_OPEN_WINDOW;
typedef struct tagDH_IN_SPLIT_CLOSE_WINDOW
{
    DWORD dwSize;
    int nChannel;               
    UINT nWindowID;             
    const char* pszCompositeID; 
} DH_IN_SPLIT_CLOSE_WINDOW;
typedef struct tagDH_OUT_SPLIT_CLOSE_WINDOW
{
    DWORD dwSize;
} DH_OUT_SPLIT_CLOSE_WINDOW;
typedef struct tagDH_IN_SPLIT_SET_RECT
{
    DWORD dwSize;
    int nChannel;     
    UINT nWindowID;   
    DH_RECT stuRect;  
    BOOL bDirectable; 
} DH_IN_SPLIT_SET_RECT;
typedef struct tagDH_OUT_SPLIT_SET_RECT
{
    DWORD dwSize;
} DH_OUT_SPLIT_SET_RECT;
typedef struct tagDH_IN_SPLIT_GET_RECT
{
    DWORD dwSize;
    int nChannel;   
    UINT nWindowID; 
} DH_IN_SPLIT_GET_RECT;
typedef struct tagDH_OUT_SPLIT_GET_RECT
{
    DWORD dwSize;
    DH_RECT stuRect; 
} DH_OUT_SPLIT_GET_RECT;
typedef struct tagDH_IN_SPLIT_SET_TOP_WINDOW
{
    DWORD dwSize;
    int nChannel;  
    int nWindowID; 
} DH_IN_SPLIT_SET_TOP_WINDOW;
typedef struct tagDH_OUT_SPLIT_SET_TOP_WINDOW
{
    DWORD dwSize;
    DH_WND_ZORDER* pZOders; 
    int nMaxWndCount;       
    int nWndCount;          
} DH_OUT_SPLIT_SET_TOP_WINDOW;
typedef struct tagDH_IN_WM_SET_DISPLAY_MODE
{
    DWORD dwSize;
    int nMonitorWallID;     
    const char* pszBlockID; 
    int nTVID;              
    UINT nDisplayMode;      
} DH_IN_WM_SET_DISPLAY_MODE;
typedef struct tagDH_OUT_WM_SET_DISPLAY_MODE
{
    DWORD dwSize;
} DH_OUT_WM_SET_DISPLAY_MODE;
typedef struct tagDH_BLOCK_DISPLAY_MODE
{
    DWORD dwSize;
    int* pTVModes;   
    int nMaxTVCount; 
    int nRetTVCount; 
} DH_BLOCK_DISPLAY_MODE;
typedef struct tagDH_IN_WM_GET_DISPLAY_MODE
{
    DWORD dwSize;
    int nMonitorWallID;     
    const char* pszBlockID; 
    int nTVID;              
} DH_IN_WM_GET_DISPLAY_MODE;
typedef struct tagDH_OUT_WM_GET_DISPLAY_MODE
{
    DWORD dwSize;
    DH_BLOCK_DISPLAY_MODE* pBlockModes; 
    int nMaxBlockCount;                 
    int nRetBlockCount;                 
} DH_OUT_WM_GET_DISPLAY_MODE;
typedef struct tagDH_IN_WM_POWER_CTRL
{
    DWORD dwSize;
    int nMonitorWallID;     
    const char* pszBlockID; 
    int nTVID;              
    BOOL bPowerOn;          
} DH_IN_WM_POWER_CTRL;
typedef struct tagDH_OUT_WM_POWER_CTRL
{
    DWORD dwSize;
} DH_OUT_WM_POWER_CTRL;
typedef struct tagDH_IN_WM_LOAD_COLLECTION
{
    DWORD dwSize;
    int nMonitorWallID;  
    const char* pszName; 
} DH_IN_WM_LOAD_COLLECTION;
typedef struct tagDH_OUT_WM_LOAD_COLLECTION
{
    DWORD dwSize;
} DH_OUT_WM_LOAD_COLLECTION;
typedef enum tagEM_SAVE_COLLECTION_TYPE
{
    EM_SAVE_COLLECTION_UNKNOWN,    
    EM_SAVE_COLLECTION_VIDEO,      
    EM_SAVE_COLLECTION_ADDITIONAL, 
} EM_SAVE_COLLECTION_TYPE;
typedef struct tagDH_IN_WM_SAVE_COLLECTION
{
    DWORD dwSize;
    int nMonitorWallID;             
    const char* pszName;            
    const char* pszControlID;       
    BYTE bReserverd[4];             
    EM_SAVE_COLLECTION_TYPE emType; 
} DH_IN_WM_SAVE_COLLECTION;
typedef struct tagDH_OUT_WM_SAVE_COLLECTION
{
    DWORD dwSize;
} DH_OUT_WM_SAVE_COLLECTION;
typedef struct tagDH_IN_WM_RENAME_COLLECTION
{
    DWORD dwSize;
    int nMonitorWallID;     
    const char* pszOldName; 
    const char* pszNewName; 
} DH_IN_WM_RENAME_COLLECTION;
typedef struct tagDH_OUT_WM_RENAME_COLLECTION
{
    DWORD dwSize;
} DH_OUT_WM_RENAME_COLLECTION;
typedef struct tagNET_MONITOR_WALL_DEVICE_INFO
{
    char szName[64];       
    char szPassword[64];   
    char szUserName[64];   
    UINT nPort;            
    char byReserverd[256]; 
} NET_MONITOR_WALL_DEVICE_INFO;
typedef struct tagDH_WINDOW_COLLECTION
{
    DWORD dwSize;
    int nWindowID;                              
    BOOL bWndEnable;                            
    DH_RECT stuRect;                            
    BOOL bDirectable;                           
    int nZOrder;                                
    BOOL bSrcEnable;                            
    char szDeviceID[DH_DEV_ID_LEN_EX];          
    int nVideoChannel;                          
    int nVideoStream;                           
    int nAudioChannel;                          
    int nAudioStream;                           
    int nUniqueChannel;                         
    NET_MONITOR_WALL_DEVICE_INFO stuDeviceInfo; 
    int nInterval;                              
} DH_WINDOW_COLLECTION;
typedef struct tagNET_SCREEEN_BACKGROUD
{
    BOOL bEnable;         
    char szName[130];     
    BYTE byReserved[130]; 
} NET_SCREEEN_BACKGROUD;
typedef struct tagDH_BLOCK_COLLECTION
{
    DWORD dwSize;
    DH_SPLIT_MODE emSplitMode;                         
    DH_WINDOW_COLLECTION stuWnds[DH_MAX_SPLIT_WINDOW]; 
    int nWndsCount;                                    
    char szName[DH_DEVICE_NAME_LEN];                   
    int nScreen;                                       
    char szCompositeID[DH_DEV_ID_LEN_EX];              
    DH_WINDOW_COLLECTION* pstuWndsEx;                  
    int nMaxWndsCountEx;                               
    int nRetWndsCountEx;                               
    int nSplitOsdCount;                        
    NET_SPLIT_OSD stuSplitOsd[20];             
    NET_SCREEEN_BACKGROUD stuScreenBackground; 
} DH_BLOCK_COLLECTION;
typedef struct tagNET_MONITOR_WALL_OUT_MODE_INFO
{
    int nWidth;           
    int nHeight;          
    BYTE byReserved[256]; 
} NET_MONITOR_WALL_OUT_MODE_INFO;
typedef struct tagDH_MONITORWALL_OUTPUT
{
    DWORD dwSize;
    char szDeviceID[DH_DEV_ID_LEN];            
    int nChannel;                              
    char szName[DH_DEV_NAME_LEN];              
    BOOL bIsVirtual;                           
    char szAddress[40];                        
    NET_MONITOR_WALL_OUT_MODE_INFO stuOutMode; 
} DH_MONITORWALL_OUTPUT;
typedef struct tagDH_MONITORWALL_BLOCK
{
    DWORD dwSize;
    char szName[DH_DEV_NAME_LEN];                                  
    char szCompositeID[DH_DEV_ID_LEN];                             
    char szControlID[DH_DEV_ID_LEN];                               
    int nSingleOutputWidth;                                        
    int nSingleOutputHeight;                                       
    DH_RECT stuRect;                                               
    DH_TSECT stuPowerSchedule[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
    DH_MONITORWALL_OUTPUT* pstuOutputs;                            
    int nMaxOutputCount;                                           
    int nRetOutputCount;                                           
    char szBlockType[DH_COMMON_STRING_32];                         
    int nOutputDelay;                                              
} DH_MONITORWALL_BLOCK;
typedef struct tagDH_MONITORWALL
{
    DWORD dwSize;
    char szName[DH_DEV_NAME_LEN];      
    int nGridLine;                     
    int nGridColume;                   
    DH_MONITORWALL_BLOCK* pstuBlocks;  
    int nMaxBlockCount;                
    int nRetBlockCount;                
    BOOL bDisable;                     
    char szDesc[DH_COMMON_STRING_256]; 
} DH_MONITORWALL;
typedef struct tagDH_MONITORWALL_COLLECTION
{
    DWORD dwSize;
    char szName[DH_DEVICE_NAME_LEN];                 
    DH_BLOCK_COLLECTION stuBlocks[DH_MAX_BLOCK_NUM]; 
    int nBlocksCount;                                
    char szControlID[DH_DEV_ID_LEN_EX];              
    DH_MONITORWALL stuMonitorWall;                   
    EM_SAVE_COLLECTION_TYPE emType;                  
    BYTE byReserved[4];                              
} DH_MONITORWALL_COLLECTION;
typedef struct tagDH_IN_WM_GET_COLLECTIONS
{
    DWORD dwSize;
    int nMonitorWallID; 
} DH_IN_WM_GET_COLLECTIONS;
typedef struct tagDH_OUT_WM_GET_COLLECTIONS
{
    DWORD dwSize;
    DH_MONITORWALL_COLLECTION* pCollections; 
    int nMaxCollectionsCount;                
    int nCollectionsCount;                   
} DH_OUT_WM_GET_COLLECTIONS;
typedef struct tagDH_IN_SPLIT_GET_WINDOWS
{
    DWORD dwSize;
    int nChannel; 
} DH_IN_SPLIT_GET_WINDOWS;
typedef struct tagDH_OUT_SPLIT_GET_WINDOWS
{
    DWORD dwSize;
    DH_BLOCK_COLLECTION stuWindows; 
} DH_OUT_SPLIT_GET_WINDOWS;
typedef struct tagDH_IN_SPLIT_LOAD_COLLECTION
{
    DWORD dwSize;
    int nChannel;        
    const char* pszName; 
} DH_IN_SPLIT_LOAD_COLLECTION;
typedef struct tagDH_OUT_SPLIT_LOAD_COLLECTION
{
    DWORD dwSize;
} DH_OUT_SPLIT_LOAD_COLLECTION;
typedef struct tagDH_IN_SPLIT_SAVE_COLLECTION
{
    DWORD dwSize;
    int nChannel;        
    const char* pszName; 
} DH_IN_SPLIT_SAVE_COLLECTION;
typedef struct tagDH_OUT_SPLIT_SAVE_COLLECTION
{
    DWORD dwSize;
} DH_OUT_SPLIT_SAVE_COLLECTION;
typedef struct tagDH_IN_SPLIT_RENAME_COLLECTION
{
    DWORD dwSize;
    int nChannel;           
    const char* pszOldName; 
    const char* pszNewName; 
} DH_IN_SPLIT_RENAME_COLLECTION;
typedef struct tagDH_OUT_SPLIT_RENAME_COLLECTION
{
    DWORD dwSize;
} DH_OUT_SPLIT_RENAME_COLLECTION;
typedef struct tagDH_IN_SPLIT_GET_COLLECTIONS
{
    DWORD dwSize;
    int nChannel; 
} DH_IN_SPLIT_GET_COLLECTIONS;
typedef struct tagDH_OUT_SPLIT_GET_COLLECTIONS
{
    DWORD dwSize;
    DH_BLOCK_COLLECTION* pCollections; 
    int nMaxCollectionsCount;          
    int nCollectionsCount;             
} DH_OUT_SPLIT_GET_COLLECTIONS;
typedef struct tagDH_IN_SPLIT_DELETE_COLLECTION
{
    DWORD dwSize;
    int nChannel;           
    const char** ppszNames; 
    int nNameCount;         
} DH_IN_SPLIT_DELETE_COLLECTION;
typedef struct tagDH_OUT_SPLIT_DELETE_COLLECTION
{
    DWORD dwSize;
} DH_OUT_SPLIT_DELETE_COLLECTION;
typedef struct tagDH_COMPOSITE_CHANNEL
{
    DWORD dwSize;
    char szMonitorWallName[DH_DEVICE_NAME_LEN]; 
    char szCompositeID[DH_DEV_ID_LEN_EX];       
    int nVirtualChannel;                        
} DH_COMPOSITE_CHANNEL;
typedef struct tagDHDEV_TOUR_ENABLE
{
    DWORD dwSize;
    BOOL bEnable; 
    BOOL bStart;  
} DHDEV_TOUR_ENABLE_CFG;
typedef struct tagDH_IN_SET_DEC_POLICY
{
    DWORD dwSize;
    int nChannel;     
    int nWindow;      
    int nPolicyLevel; 
} DH_IN_SET_DEC_POLICY;
typedef struct tagDH_OUT_SET_DEC_POLICY
{
    DWORD dwSize;
} DH_OUT_SET_DEC_POLICY;
typedef struct tagDH_IN_GET_DEC_POLICY
{
    DWORD dwSize;
    int nChannel; 
    int nWindow;  
} DH_IN_GET_DEC_POLICY;
typedef struct tagDH_OUT_GET_DEC_POLICY
{
    DWORD dwSize;
    int nPolicyLevel; 
} DH_OUT_GET_DEC_POLICY;
typedef enum
{
    DH_AUDIO_AUTO,        
    DH_AUDIO_DISABLE,     
    DH_AUDIO_FORCE,       
    DH_AUDIO_ENABLE_ONE,  
    DH_AUDIO_DISABLE_ONE, 
    DH_AUDIO_MULTI,       
} DH_AUDIO_OUTPUT_MODE;
typedef struct tagDH_IN_SET_AUDIO_OUTPUT
{
    DWORD dwSize;
    int nChannel;                
    DH_AUDIO_OUTPUT_MODE emMode; 
    int nWindow;                 
} DH_IN_SET_AUDIO_OUTPUT;
typedef struct tagDH_OUT_SET_AUDIO_OUTPUT
{
    DWORD dwSize;
} DH_OUT_SET_AUDIO_OUTPUT;
typedef struct tagDH_IN_GET_AUDIO_OUTPUT
{
    DWORD dwSize;
    int nChannel; 
} DH_IN_GET_AUDIO_OUTPUT;
typedef struct tagDH_OUT_GET_AUDIO_OUTPUT
{
    DWORD dwSize;
    DH_AUDIO_OUTPUT_MODE emMode; 
    int nWindow;                 
    int* pMultiWindows;          
    int nMaxMultiWindowCount;    
    int nRetMultiWindowCount;    
} DH_OUT_GET_AUDIO_OUTPUT;
typedef struct tagDH_IN_GET_ENCODE_PLAN
{
    DWORD dwSize;
    unsigned int nChannel;    
    unsigned int nExpectTime; 
    unsigned int nCapacity;   
} DH_IN_GET_ENCODE_PLAN;
typedef struct tagDH_OUT_GET_ENCODE_PLAN
{
    DWORD dwSize;
    int nResolutionType;                                     
    CAPTURE_SIZE emResolutionTypes[DH_MAX_CAPTURE_SIZE_NUM]; 
    CAPTURE_SIZE emResolution;                               
    unsigned int nBitRate;                                   
} DH_OUT_GET_ENCODE_PLAN;
typedef struct tagNET_IN_GET_ENCODEPLANE_BY_RESOLUTION
{
    DWORD dwSize;
    unsigned int nChannel;     
    CAPTURE_SIZE emResolution; 
    unsigned int nBitRate;     
    unsigned int nCapacity;    
} NET_IN_GET_ENCODEPLANE_BY_RESOLUTION;
typedef struct tagNET_OUT_GET_ENCODEPLANE_BY_RESOLUTION
{
    DWORD dwSize;
    unsigned int nExpectTime; 
} NET_OUT_GET_ENCODEPLANE_BY_RESOLUTION;
typedef struct tagDH_ORGANIZATION_NODE_LOGIC_OBJECT
{
    DWORD dwSize;
    char szName[DH_NODE_NAME_LEN];      
    char szType[DH_DEV_TYPE_LEN];       
    char szDevID[DH_DEV_ID_LEN_EX];     
    char szControlID[DH_DEV_ID_LEN_EX]; 
    int nChannel;                       
} DH_ORGANIZATION_NODE_LOGIC_OBJECT;
typedef struct tagDH_ORGANIZATION_NODE_DIRECTORY
{
    DWORD dwSize;
    char szName[DH_NODE_NAME_LEN];      
    char szControlID[DH_DEV_ID_LEN_EX]; 
} DH_ORGANIZATION_NODE_DIRECTORY;
typedef struct tagDH_ORGANIZATION_NODE
{
    DWORD dwSize;
    int nNodeType;                                    
    DH_ORGANIZATION_NODE_LOGIC_OBJECT stuLogicObject; 
    DH_ORGANIZATION_NODE_DIRECTORY stuDirectory;      
} DH_ORGANIZATION_NODE;
typedef struct tagDH_ORGANIZATION_ADD_NODE_PARAM
{
    DWORD dwSize;
    int nPosition;                
    DH_ORGANIZATION_NODE stuNode; 
} DH_ORGANIZATION_ADD_NODE_PARAM;
typedef struct tagDH_IN_ORGANIZATION_ADD_NODES
{
    DWORD dwSize;
    char* pszPath;                             
    DH_ORGANIZATION_ADD_NODE_PARAM* pstuNodes; 
    int nNodeCount;                            
} DH_IN_ORGANIZATION_ADD_NODES;
typedef struct tagDH_ORGANIZATION_ADD_NODE_RESULT
{
    DWORD dwSize;
    BOOL bResult;          
    char szPath[MAX_PATH]; 
} DH_ORGANIZATION_ADD_NODE_RESULT;
typedef struct tagDH_OUT_ORGANIZATION_ADD_NODES
{
    DWORD dwSize;
    DH_ORGANIZATION_ADD_NODE_RESULT* pstuResults; 
    int nMaxResultCount;                          
    int nRetResultCount;                          
} DH_OUT_ORGANIZATION_ADD_NODES;
typedef struct tagDH_ORGANIZATION_NODE_PATH
{
    DWORD dwSize;
    char szPath[MAX_PATH]; 
} DH_ORGANIZATION_NODE_PATH;
typedef struct tagDH_IN_ORGANIZATION_DELETE_NODES
{
    DWORD dwSize;
    DH_ORGANIZATION_NODE_PATH* pstuPath; 
    int nPathCount;                      
} DH_IN_ORGANIZATION_DELETE_NODES;
typedef struct tagDH_OUT_ORGANIZATION_DELETE_NODES
{
    DWORD dwSize;
} DH_OUT_ORGANIZATION_DELETE_NODES;
typedef struct tagDH_IN_ORGANIZATION_GET_NODES
{
    DWORD dwSize;
    char* pszPath; 
    int nLevel;    
} DH_IN_ORGANIZATION_GET_NODES;
typedef struct tagDH_OUT_ORGANIZATION_GET_NODES
{
    DWORD dwSize;
    DH_ORGANIZATION_NODE* pstuNodes; 
    int nMaxNodeCount;               
    int nRetNodeCount;               
} DH_OUT_ORGANIZATION_GET_NODES;
typedef struct tagDH_IN_ORGANIZATION_SET_NODE
{
    DWORD dwSize;
    char* pszPath;                
    DH_ORGANIZATION_NODE stuNode; 
} DH_IN_ORGANIZATION_SET_NODE;
typedef struct tagDH_OUT_ORGANIZATION_SET_NODE
{
    DWORD dwSize;
} DH_OUT_ORGANIZATION_SET_NODE;
typedef enum tagEM_STREAM_TRANSMISSION_SERVICE_TYPE
{
    EM_STREAM_TRANSMISSION_SERVICE_TYPE_UNKNOWN, 
    EM_STREAM_TRANSMISSION_SERVICE_TYPE_TCP,     
    EM_STREAM_TRANSMISSION_SERVICE_TYPE_UDP,     
    EM_STREAM_TRANSMISSION_SERVICE_TYPE_MCAST,   
    EM_STREAM_TRANSMISSION_SERVICE_TYPE_AUTO,    
} EM_STREAM_TRANSMISSION_SERVICE_TYPE;
typedef struct tagDH_VIDEO_INPUTS
{
    DWORD dwSize;
    char szChnName[DH_DEVICE_NAME_LEN];                          
    BOOL bEnable;                                                
    char szControlID[DH_DEV_ID_LEN_EX];                          
    char szMainStreamUrl[MAX_PATH];                              
    char szExtraStreamUrl[MAX_PATH];                             
    int nOptionalMainUrlCount;                                   
    char szOptionalMainUrls[DH_MAX_OPTIONAL_URL_NUM][MAX_PATH];  
    int nOptionalExtraUrlCount;                                  
    char szOptionalExtraUrls[DH_MAX_OPTIONAL_URL_NUM][MAX_PATH]; 
    char szCaption[32];                                          
    EM_STREAM_TRANSMISSION_SERVICE_TYPE emServiceType;           
    NET_SOURCE_STREAM_ENCRYPT stuSourceStreamEncrypt;            
} DH_VIDEO_INPUTS;
typedef struct tagNET_REMOTE_DEVICE_EX
{
    char szPwdEx2[128];   
    BOOL bUsePwdEx2;      
    char szIpEx[64];      
    BOOL bUseIpEx;        
    char szReserved[952]; 
} NET_REMOTE_DEVICE_EX;
typedef struct tagDH_REMOTE_DEVICE
{
    DWORD dwSize;
    BOOL bEnable;                                
    char szIp[DH_MAX_IPADDR_LEN];                
    char szUser[DH_USER_NAME_LENGTH];            
    char szPwd[DH_USER_PSW_LENGTH];              
    int nPort;                                   
    int nDefinition;                             
    DH_DEVICE_PROTOCOL emProtocol;               
    char szDevName[DH_DEVICE_NAME_LEN];          
    int nVideoInputChannels;                     
    int nAudioInputChannels;                     
    char szDevClass[DH_DEV_TYPE_LEN];            
    char szDevType[DH_DEV_TYPE_LEN];             
    int nHttpPort;                               
    int nMaxVideoInputCount;                     
    int nRetVideoInputCount;                     
    DH_VIDEO_INPUTS* pstuVideoInputs;            
    char szMachineAddress[DH_MAX_CARD_INFO_LEN]; 
    char szSerialNo[DH_SERIALNO_LEN];            
    int nRtspPort;                               
    char szUserEx[DH_USER_NAME_LEN_EX]; 
    char szPwdEx[DH_USER_PSW_LEN_EX];   
    char szVendorAbbr[DH_COMMON_STRING_32];      
    char szSoftwareVersion[DH_COMMON_STRING_64]; 
    NET_TIME stuActivationTime;                  
    char szMac[20];                              
    int nHttpsPort;                              
    BYTE byReserved[4];                          
    NET_REMOTE_DEVICE_EX* pstuRemoteDevEx;       
} DH_REMOTE_DEVICE;
typedef enum tagNET_LOGIC_CHANNEL_TYPE
{
    LOGIC_CHN_UNKNOWN, 
    LOGIC_CHN_LOCAL,   
    LOGIC_CHN_REMOTE,  
    LOGIC_CHN_COMPOSE, 
    LOGIC_CHN_MATRIX,  
    LOGIC_CHN_CASCADE, 
} NET_LOGIC_CHN_TYPE;
typedef enum tagEM_VIDEO_STREAM
{
    EM_VIDEO_STREAM_UNKNOWN,             
    EM_VIDEO_STREAM_MAIN,                
    EM_VIDEO_STREAM_EXTRA1,              
    EM_VIDEO_STREAM_EXTRA2,              
    EM_VIDEO_STREAM_EXTRA3,              
    EM_VIDEO_STREAM_AUTO,                
    EM_VIDEO_STREAM_PREVIEW,             
    EM_VIDEO_STREAM_NO_VIDEO_JUST_AUDIO, 
} EM_VIDEO_STREAM;
typedef struct tagDH_MATRIX_CAMERA_INFO
{
    DWORD dwSize;
    char szName[DH_DEV_ID_LEN_EX];      
    char szDevID[DH_DEV_ID_LEN_EX];     
    char szControlID[DH_DEV_ID_LEN_EX]; 
    int nChannelID;                     
    int nUniqueChannel;                 
    BOOL bRemoteDevice;                 
    DH_REMOTE_DEVICE stuRemoteDevice;   
    NET_STREAM_TYPE emStreamType;       
    NET_LOGIC_CHN_TYPE emChannelType;   
    BOOL bEnable;                       
    EM_VIDEO_STREAM emVideoStream;      
} DH_MATRIX_CAMERA_INFO;
typedef struct tagDH_IN_MATRIX_GET_CAMERAS
{
    DWORD dwSize;
} DH_IN_MATRIX_GET_CAMERAS;
typedef struct tagDH_OUT_MATRIX_GET_CAMERAS
{
    DWORD dwSize;
    DH_MATRIX_CAMERA_INFO* pstuCameras; 
    int nMaxCameraCount;                
    int nRetCameraCount;                
} DH_OUT_MATRIX_GET_CAMERAS;
typedef struct tagNET_IN_GET_DEVICE_INFO
{
    DWORD dwSize;                    
    char szDevice[DH_DEV_ID_LEN_EX]; 
    char szAttributeIP[DH_COMMON_STRING_32];            
    int nAttributePort;                                 
    char szAttributeUsername[DH_COMMON_STRING_128];     
    char szAttributePassword[DH_COMMON_STRING_128];     
    char szAttributeManufacturer[DH_COMMON_STRING_128]; 
} NET_IN_GET_DEVICE_INFO;
typedef struct tagNET_OUT_GET_DEVICE_INFO
{
    DWORD dwSize;             
    DH_REMOTE_DEVICE stuInfo; 
} NET_OUT_GET_DEVICE_INFO;
typedef struct tagDH_IN_MATRIX_SET_CAMERAS
{
    DWORD dwSize;
    DH_MATRIX_CAMERA_INFO* pstuCameras; 
    int nCameraCount;                   
} DH_IN_MATRIX_SET_CAMERAS;
typedef struct tagDH_OUT_MATRIX_SET_CAMERAS
{
    DWORD dwSize;
} DH_OUT_MATRIX_SET_CAMERAS;
typedef struct tagDH_SPLIT_WND_SOURCE
{
    DWORD dwSize;
    BOOL bEnable;                     
    char szDeviceID[DH_DEV_ID_LEN];   
    char szControlID[DH_DEV_ID_LEN];  
    int nVideoChannel;                
    int nVideoStream;                 
    int nAudioChannel;                
    int nAudioStream;                 
    int nUniqueChannel;               
    BOOL bRemoteDevice;               
    DH_REMOTE_DEVICE stuRemoteDevice; 
    NET_RECT stuSRect;                
    int nInterval;                    
} DH_SPLIT_WND_SOURCE;
typedef struct tagDH_SPLIT_WINDOW
{
    DWORD dwSize;
    BOOL bEnable;                                     
    int nWindowID;                                    
    char szControlID[DH_DEV_ID_LEN];                  
    DH_RECT stuRect;                                  
    BOOL bDirectable;                                 
    int nZOrder;                                      
    DH_SPLIT_WND_SOURCE stuSource;                    
    UINT nOSDNum;                                     
    NET_SPLIT_OSD stuOSD[DH_VIDEO_CUSTOM_OSD_NUM_EX]; 
    BOOL bLock;                                       
    BOOL bDock;                                       
    BOOL bMeetingMode;                                
    BOOL bAudioEnable;                                
    BOOL bTourEnable;                                 
} DH_SPLIT_WINDOW;
typedef struct tagDH_SPLIT_SCENE
{
    DWORD dwSize;
    char szCompositeID[DH_DEV_ID_LEN]; 
    char szControlID[DH_DEV_ID_LEN];   
    DH_SPLIT_MODE emSplitMode;         
    DH_SPLIT_WINDOW* pstuWnds;         
    int nMaxWndCount;                  
    int nRetWndCount;                  
} DH_SPLIT_SCENE;
typedef struct tagDH_MONITORWALL_SCENE
{
    DWORD dwSize;
    char szName[DH_DEV_NAME_LEN];    
    char szControlID[DH_DEV_ID_LEN]; 
    DH_MONITORWALL stuMonitorWall;   
    DH_SPLIT_SCENE* pstuSplitScene;  
    int nMaxSplitSceneCount;         
    int nRetSplitSceneCount;         
} DH_MONITORWALL_SCENE;
typedef struct tagDH_IN_MONITORWALL_GET_SCENE
{
    DWORD dwSize;
    int nMonitorWallID; 
} DH_IN_MONITORWALL_GET_SCENE;
typedef struct tagDH_OUT_MONITORWALL_GET_SCENE
{
    DWORD dwSize;
    char szName[DH_DEV_NAME_LEN];  
    DH_MONITORWALL_SCENE stuScene; 
} DH_OUT_MONITORWALL_GET_SCENE;
typedef struct tagDH_IN_MONITORWALL_SET_SCENE
{
    DWORD dwSize;
    int nMonitorWallID;            
    DH_MONITORWALL_SCENE stuScene; 
} DH_IN_MONITORWALL_SET_SCENE;
typedef struct tagDH_OUT_MONITORWALL_SET_SCENE
{
    DWORD dwSize;
} DH_OUT_MONITORWALL_SET_SCENE;
typedef struct tagNET_IN_NETAPP_NET_DATA_STAT
{
    DWORD dwSize;
    char szEthName[DH_MAX_ETH_NAME]; 
} NET_IN_NETAPP_NET_DATA_STAT;
typedef struct tagNET_NETAPP_RECEIVE_STAT
{
    DWORD dwSize;
    DWORD dwPackets;
    DWORD dwBytes;
    DWORD dwErrors;
    DWORD dwDroped;
    DWORD dwOverruns;
    DWORD dwFrame;
    DWORD dwSpeed; 
} NET_NETAPP_RECEIVE_STAT;
typedef struct tagNET_NETAPP_TRANSMIT_STAT
{
    DWORD dwSize;
    DWORD dwPackets;
    DWORD dwBytes;
    DWORD dwErrors;
    DWORD dwDroped;
    DWORD dwOverruns;
    DWORD dwCarrier;
    DWORD dwCollisions;
    DWORD dwTxQueue;
    DWORD dwSpeed; 
} NET_NETAPP_TRANSMIT_STAT;
typedef struct tagNET_OUT_NETAPP_NET_DATA_STAT
{
    DWORD dwSize;
    NET_NETAPP_RECEIVE_STAT stuReceiveStat;   
    NET_NETAPP_TRANSMIT_STAT stuTransmitStat; 
    int nSpeed;                               
} NET_OUT_NETAPP_NET_DATA_STAT;
typedef struct tagNET_IN_NETAPP_LINK_STATUS
{
    DWORD dwSize;
    char szEthName[DH_MAX_ETH_NAME]; 
} NET_IN_NETAPP_LINK_STATUS;
typedef struct tagNET_OUT_NETAPP_LINK_STATUS
{
    DWORD dwSize;
    BOOL bWorking;    
    BOOL bIPConflict; 
} NET_OUT_NETAPP_LINK_STATUS;
#define DH_VIDEO_SIGNAL_CVBS 0x0001
#define DH_VIDEO_SIGNAL_SDI 0x0002
#define DH_VIDEO_SIGNAL_VGA 0x0004
#define DH_VIDEO_SIGNAL_DVI 0x0008
#define DH_VIDEO_SIGNAL_HDMI 0x0010
#define DH_VIDEO_SIGNAL_YPBPR 0x0020
#define DH_VIDEO_SIGNAL_SFP 0x0040
#define DH_VIDEO_SIGNAL_HDCVI 0x0080
#define DH_VIDEO_SIGNAL_DUAL_LINK 0x0100
typedef struct tagDH_VIDEO_IN_CAPS
{
    DWORD dwSize;
    DWORD dwSignalType;                  
    BOOL bAutoFocusPeak;                 
    BOOL bElectricFocus;                 
    BOOL bSyncFocus;                     
    BOOL bSetColor;                      
    BOOL bGain;                          
    BOOL bPhase;                         
    int nSubChannel;                     
    DH_RECT stuRect[MAX_SUBCHANNEL_NUM]; 
} DH_VIDEO_IN_CAPS;
typedef struct tagDH_IN_GET_VIDEO_IN_CAPS
{
    DWORD dwSize;
    int nChannel; 
} DH_IN_GET_VIDEO_IN_CAPS;
typedef struct tagDH_OUT_GET_VIDEO_IN_CAPS
{
    DWORD dwSize;
    DH_VIDEO_IN_CAPS stuCaps; 
} DH_OUT_GET_VIDEO_IN_CAPS;
typedef struct tagDH_VIDEO_OUT_MODE
{
    DWORD dwSize;
    int nWidth;        
    int nHeight;       
    int nBPP;          
    int nFormat;       
    int nRefreshRate;  
    int nPhysicalPort; 
    int nScanFormat;   
} DH_VIDEO_OUT_MODE;
typedef struct tagDH_IN_ENUM_VIDEO_OUT_MODES
{
    DWORD dwSize;
    int nChannel;
} DH_IN_ENUM_VIDEO_OUT_MODES;
typedef struct tagDH_OUT_ENUM_VIDEO_OUT_MODES
{
    DWORD dwSize;
    DH_VIDEO_OUT_MODE* pstuModes; 
    int nMaxModeCount;            
    int nRetModeCount;            
} DH_OUT_ENUM_VIDEO_OUT_MODES;
typedef enum tagDH_OUTPUT_ATTRIBUTE_TYPE
{
    DH_OUTPUT_ATTRIBUTE_VIDEO,
    DH_OUTPUT_ATTRIBUTE_YPBPR,
    DH_OUTPUT_ATTRIBUTE_VGA,
    DH_OUTPUT_ATTRIBUTE_DVI,
    DH_OUTPUT_ATTRIBUTE_MENU,
} DH_OUTPUT_ATTRIBUTE_TYPE;
#define DH_ATTR_VIDEO_BRIGHTNESS 0X00000001
#define DH_ATTR_VIDEO_CONTRAST 0X00000002
#define DH_ATTR_VIDEO_SATURATION 0X00000004
#define DH_ATTR_VIDEO_SHAPENESS 0X00000008
#define DH_ATTR_VIDEO_DENOISE 0X00000010
#define DH_ATTR_YPBPR_BRIGHTNESS 0X00000001
#define DH_ATTR_YPBPR_CONTRAST 0X00000002
#define DH_ATTR_YPBPR_SATURATION 0X00000004
#define DH_ATTR_YPBPR_SHAPENESS 0X00000008
#define DH_ATTR_YPBPR_DENOISE 0X00000010
#define DH_ATTR_VGA_BRIGHTNESS 0X00000001
#define DH_ATTR_VGA_CONTRAST 0X00000002
#define DH_ATTR_VGA_HORPOSITION 0X00000004
#define DH_ATTR_VGA_VERPOSITION 0X00000008
#define DH_ATTR_VGA_CLOCK 0X00000010
#define DH_ATTR_DVI_BRIGHTNESS 0X00000001
#define DH_ATTR_DVI_CONTRAST 0X00000002
#define DH_ATTR_DVI_HORPOSITION 0X00000004
#define DH_ATTR_DVI_VERPOSITION 0X00000008
#define DH_ATTR_DVI_CLOCK 0X00000010
#define DH_ATTR_MENU_MENU 0X00000001
#define DH_ATTR_MENU_UP 0X00000002
#define DH_ATTR_MENU_DOWN 0X00000004
#define DH_ATTR_MENU_LEFT 0X00000008
#define DH_ATTR_MENU_RIGHT 0X00000010
#define DH_ATTR_MENU_FACTORYMENU 0X00000020
typedef struct tagDH_OUTPUT_ATTRIBUTE_CAPS
{
    DWORD dwSize;
    BOOL abVideo;  
    DWORD dwVideo; 
    BOOL abYPbPr;  
    DWORD dwYPbPr; 
    BOOL abVGA;    
    DWORD dwVGA;   
    BOOL abDVI;    
    DWORD dwDVI;   
    BOOL abMenu;   
    DWORD dwMemu;  
} DH_OUTPUT_ATTRIBUTE_CAPS;
typedef struct tagDH_IN_MONITORWALL_GET_ARRT_CAPS
{
    DWORD dwSize;
    int nMonitorWallID;         
    const char* pszCompositeID; 
    int nOutputID;              
} DH_IN_MONITORWALL_GET_ARRT_CAPS;
typedef struct tagDH_OUT_MONITORWALL_GET_ARRT_CAPS
{
    DWORD dwSize;
    DH_OUTPUT_ATTRIBUTE_CAPS stuCaps; 
} DH_OUT_MONITORWALL_GET_ARRT_CAPS;
typedef struct tagDH_IN_MONITORWALL_AUTO_ADJUST
{
    DWORD dwSize;
    int nMonitorWallID;         
    const char* pszCompositeID; 
    int* pOutputs;              
    int nOutputCount;           
} DH_IN_MONITORWALL_AUTO_ADJUST;
typedef struct tagDH_OUT_MONITORWALL_AUTO_ADJUST
{
    DWORD dwSize;
} DH_OUT_MONITORWALL_AUTO_ADJUST;
typedef struct tagDH_ATTR_PAIR
{
    DWORD dwKey; 
    int nValue;  
} DH_ATTR_PAIR;
typedef struct tagDH_IN_MONITORWALL_SET_ATTR
{
    DWORD dwSize;
    int nMonitorWallID;                     
    const char* pszCompositeID;             
    int nOutputID;                          
    DH_OUTPUT_ATTRIBUTE_TYPE emAttrType;    
    DH_ATTR_PAIR stuAttrs[DH_MAX_ATTR_NUM]; 
} DH_IN_MONITORWALL_SET_ATTR;
typedef struct tagDH_OUT_MONITORWALL_SET_ATTR
{
    DWORD dwSize;
} DH_OUT_MONITORWALL_SET_ATTR;
typedef struct tagDH_IN_MONITORWALL_SET_BACK_LIGHT
{
    DWORD dwSize;
    int nMonitorWallID;         
    const char* pszCompositeID; 
    int nOutputID;              
    int nMode;                  
} DH_IN_MONITORWALL_SET_BACK_LIGHT;
typedef struct tagDH_OUT_MONITORWALL_SET_BACK_LIGHT
{
    DWORD dwSize;
} DH_OUT_MONITORWALL_SET_BACK_LIGHT;
typedef struct tagNET_IN_WM_GET_POWER_SCHEDULE
{
    DWORD dwSize;
    int nMonitorWallID;         
    const char* pszCompositeID; 
} NET_IN_MW_GET_POWER_SCHEDULE;
typedef struct tagNET_OUT_MW_GET_POWER_SCHEDULE
{
    DWORD dwSize;
    DH_TSECT stuPowerSchedule[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
} NET_OUT_MW_GET_POWER_SCHEDULE;
typedef struct tagNET_IN_MW_SET_POWER_SCHEDULE
{
    DWORD dwSize;
    int nMonitorWallID;                                            
    const char* pszCompositeID;                                    
    DH_TSECT stuPowerSchedule[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
} NET_IN_MW_SET_POWER_SCHEDULE;
typedef struct tagNET_OUT_MW_SET_POWER_SCHEDULE
{
    DWORD dwSize;
} NET_OUT_MW_SET_POWER_SCHEDULE;
typedef struct tagNET_IN_MW_GET_SCRN_CTRL_PARAM
{
    DWORD dwSize;
    int nMonitorWallID;         
    const char* pszCompositeID; 
} NET_IN_MW_GET_SCRN_CTRL_PARAM;
#define DH_MAX_SCREEN_PORT_NUM 16      
#define DH_MAX_COMPSITE_SCREEN_NUM 256 
typedef struct tagNET_SCREEN_PORT_INFO
{
    DWORD dwSize;
    char szType[DH_COMMON_STRING_16];    
    char szAddress[DH_COMMON_STRING_16]; 
    char szDeviceID[DH_DEV_ID_LEN_EX];   
    int nOutputChannel;                  
} NET_SCREEN_PORT_INFO;
typedef struct tagNET_SCREEN_PORT_GROUP
{
    DWORD dwSize;
    int nPortNum;                                          
    NET_SCREEN_PORT_INFO stuPorts[DH_MAX_SCREEN_PORT_NUM]; 
} NET_SCREEN_PORT_GROUP;
typedef struct tagNET_WM_SCRN_CTRL_PARAM
{
    DWORD dwSize;
    int nCommPort;                                                      
    DH_COMM_PROP stuCommProp;                                           
    char szProtocol[DH_COMMON_STRING_32];                               
    int nResolutionNum;                                                 
    CAPTURE_SIZE emResolutions[DH_MAX_CAPTURE_SIZE_NUM];                
    int nScreenCodeNum;                                                 
    char szScreenCode[DH_MAX_COMPSITE_SCREEN_NUM][DH_COMMON_STRING_16]; 
    int nScreenPortsNum;                                                
    NET_SCREEN_PORT_GROUP stuScreenPorts[DH_MAX_COMPSITE_SCREEN_NUM];   
} NET_WM_SCRN_CTRL_PARAM;
typedef struct tagNET_OUT_MW_GET_SCRN_CTRL_PARAM
{
    DWORD dwSize;
    NET_WM_SCRN_CTRL_PARAM stuScrnCtrlParam; 
} NET_OUT_MW_GET_SCRN_CTRL_PARAM;
typedef struct tagNET_IN_MW_SET_SCRN_CTRL_PARAM
{
    DWORD dwSize;
    int nMonitorWallID;                      
    const char* pszCompositeID;              
    NET_WM_SCRN_CTRL_PARAM stuScrnCtrlParam; 
} NET_IN_MW_SET_SCRN_CTRL_PARAM;
typedef struct tagNET_OUT_MW_SET_SCRN_CTRL_PARAM
{
    DWORD dwSize;
} NET_OUT_MW_SET_SCRN_CTRL_PARAM;
typedef struct tagNET_IN_MW_GET_BACKGROUDND_COLOR
{
    DWORD dwSize;
    int nMonitorWallID; 
} NET_IN_MW_GET_BACKGROUDND_COLOR;
typedef struct tagNET_OUT_MW_GET_BACKGROUDND_COLOR
{
    DWORD dwSize;
    DH_COLOR_RGBA stuScreenColor; 
    DH_COLOR_RGBA stuWindowColor; 
} NET_OUT_MW_GET_BACKGROUDND_COLOR;
typedef struct tagNET_IN_MW_SET_BACKGROUD_COLOR
{
    DWORD dwSize;
    int nMonitorWallID;           
    DH_COLOR_RGBA stuScreenColor; 
    DH_COLOR_RGBA stuWindowColor; 
} NET_IN_MW_SET_BACKGROUD_COLOR;
typedef struct tagNET_OUT_MW_SET_BACKGROUD_COLOR
{
    DWORD dwSize;
} NET_OUT_MW_SET_BACKGROUD_COLOR;
typedef enum tagEM_SIGNAL_TYPE
{
    EM_SIGNAL_TYPE_UNKNOWN, 
    EM_SIGNAL_TYPE_VIDEO,   
    EM_SIGNAL_TYPE_VGA,     
    EM_SIGNAL_TYPE_YPBPR,   
    EM_SIGNAL_TYPE_HDMI,    
    EM_SIGNAL_TYPE_DVI,     
    EM_SIGNAL_TYPE_SDI,     
    EM_SIGNAL_TYPE_CVBS,    
} EM_SIGNAL_TYPE;
typedef struct tagNET_IN_MW_SWITCH_DISPLAY_SIGNAL
{
    DWORD dwSize;                
    int nMonitorWallID;          
    char* pszCompositeID;        
    int nOutputID;               
    EM_SIGNAL_TYPE emSignalType; 
    int nIndex;                  
} NET_IN_MW_SWITCH_DISPLAY_SIGNAL;
typedef struct tagNET_OUT_MW_SWITCH_DISPLAY_SIGNAL
{
    DWORD dwSize; 
} NET_OUT_MW_SWITCH_DISPLAY_SIGNAL;
typedef enum tagNET_MONITORWALL_OPERATE_TYPE
{
    NET_MONITORWALL_OPERATE_ADD,               
    NET_MONITORWALL_OPERATE_CTRL_TOUR,         
    NET_MONITORWALL_OPERATE_GET_STATUS,        
    NET_MONITORWALL_OPERATE_SET_COLL_SCHD,     
    NET_MONITORWALL_OPERATE_GET_COLL_SCHD,     
    NET_MONITORWALL_OPERATE_REMOVE,            
    NET_MONITORWALL_OPERATE_SET_ENABLE,        
    NET_MONITORWALL_OPERATE_GET_ENABLE,        
    NET_MONITORWALL_OPERATE_NAME_EXIST,        
    NET_MONITORWALL_OPERATE_RENAME,            
    NET_MONITORWALL_OPERATE_UPDATE_SOURCE_URL, 
    NET_MONITORWALL_OPERATE_GET_LOCK_STATUS, 
    NET_MONITORWALL_OPERATE_LOCK,            
    NET_MONITORWALL_OPERATE_SET_VSYNC,       
} NET_MONITORWALL_OPERATE_TYPE;
typedef struct tagNET_IN_MONITORWALL_ADD
{
    DWORD dwSize;
    DH_MONITORWALL stuMonitorWall; 
} NET_IN_MONITORWALL_ADD;
typedef struct tagNET_OUT_MONITORWALL_ADD
{
    DWORD dwSize;
    unsigned int nMonitorWallID; 
} NET_OUT_MONITORWALL_ADD;
typedef struct tagNET_IN_CTRL_COLLECTIONTOUR
{
    DWORD dwSize;
    int nChannel; 
    int nAction;  
} NET_IN_CTRL_COLLECTIONTOUR;
typedef struct tagNET_OUT_CTRL_COLLECTIONTOUR
{
    DWORD dwSize;
} NET_OUT_CTRL_COLLECTIONTOUR;
typedef enum tagNET_MATRIX_STATUS
{
    MATRIX_STATUS_UNKNOWN, 
    MATRIX_STATUS_TOUR,    
    MATRIX_STATUS_NORMAL,  
} NET_MATRIX_STATUS;
#define DH_MAX_COLLECTION_NUM 64 
typedef struct tagNET_MONITORWALL_STATUS_INFO
{
    DWORD dwSize;
    int nInterval;                                                 
    int nCollectionNum;                                            
    char szCollections[DH_MAX_COLLECTION_NUM][DH_DEVICE_NAME_LEN]; 
    char szName[DH_DEVICE_NAME_LEN];                               
} NET_MONITORWALL_STATUS_INFO;
typedef struct tagNET_IN_MONITORWALL_GET_STATUS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_MONITORWALL_GET_STATUS;
typedef struct tagNET_OUT_MONITORWALL_GET_STATUS
{
    DWORD dwSize;
    NET_MATRIX_STATUS emMatrixStatus;          
    NET_MONITORWALL_STATUS_INFO stuStatusInfo; 
} NET_OUT_MONITORWALL_GET_STATUS;
typedef struct tagMONITORWALL_COLLECTION_SCHEDULE
{
    DWORD dwSize;
    char szName[DH_DEVICE_NAME_LEN];                          
    DH_TSECT stuSchedule[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
} MONITORWALL_COLLECTION_SCHEDULE;
typedef struct tagNET_IN_MONITORWALL_SET_COLL_SCHD
{
    DWORD dwSize;
    int nCollectionNum;                                                    
    MONITORWALL_COLLECTION_SCHEDULE stuCollShedule[DH_MAX_COLLECTION_NUM]; 
    int nMonitorWallID;                                                    
} NET_IN_MONITORWALL_SET_COLL_SCHD;
typedef struct tagNET_OUT_MONITORWALL_SET_COLL_SCHD
{
    DWORD dwSize;
} NET_OUT_MONITORWALL_SET_COLL_SCHD;
typedef struct tagNET_IN_MONITORWALL_GET_COLL_SCHD
{
    DWORD dwSize;
    BOOL bAllCollections;                                          
    int nCollectionNum;                                            
    char szCollections[DH_MAX_COLLECTION_NUM][DH_DEVICE_NAME_LEN]; 
    int nMonitorWallID;                                            
} NET_IN_MONITORWALL_GET_COLL_SCHD;
typedef struct tagNET_OUT_MONITORWALL_GET_COLL_SCHD
{
    DWORD dwSize;
    int nCollectionNum;                                                    
    MONITORWALL_COLLECTION_SCHEDULE stuCollShedule[DH_MAX_COLLECTION_NUM]; 
} NET_OUT_MONITORWALL_GET_COLL_SCHD;
typedef struct tagNET_IN_MONITORWALL_REMOVE
{
    DWORD dwSize;
    int nMonitorWallNum;                                        
    char szNames[DH_MAX_MONITORWALL_NUM][DH_COMMON_STRING_128]; 
} NET_IN_MONITORWALL_REMOVE;
typedef struct tagNET_OUT_MONITORWALL_REMOVE
{
    DWORD dwSize;
} NET_OUT_MONITORWALL_REMOVE;
typedef struct tagNET_MONITORWALL_ENABLE_INFO
{
    DWORD dwSize;
    BOOL bEanble;                      
    char szName[DH_COMMON_STRING_128]; 
} NET_MONITORWALL_ENABLE_INFO;
typedef struct tagNET_IN_MONITORWALL_SET_ENABLE
{
    DWORD dwSize;
    int nMonitorWallNum;                                           
    NET_MONITORWALL_ENABLE_INFO stuEnable[DH_MAX_MONITORWALL_NUM]; 
} NET_IN_MONITORWALL_SET_ENABLE;
typedef struct tagNET_OUT_MONITORWALL_SET_ENABLE
{
    DWORD dwSize;
} NET_OUT_MONITORWALL_SET_ENABLE;
typedef struct tagNET_IN_MONITORWALL_GET_ENABLE
{
    DWORD dwSize;
    int nMonitorWallNum;                                        
    char szNames[DH_MAX_MONITORWALL_NUM][DH_COMMON_STRING_128]; 
} NET_IN_MONITORWALL_GET_ENABLE;
typedef struct tagNET_OUT_MONITORWALL_GET_ENABLE
{
    DWORD dwSize;
    int nMonitorWallNum;                                           
    NET_MONITORWALL_ENABLE_INFO stuEnable[DH_MAX_MONITORWALL_NUM]; 
} NET_OUT_MONITORWALL_GET_ENABLE;
typedef struct tagNET_IN_MONITORWALL_NAME_EXIST
{
    DWORD dwSize;
    const char* pszName; 
} NET_IN_MONITORWALL_NAME_EXIST;
typedef struct tagNET_OUT_MONITORWALL_NAME_EXIST
{
    DWORD dwSize;
    BOOL bExist; 
} NET_OUT_MONITORWALL_NAME_EXIST;
typedef struct tagNET_IN_MONITORWALL_RENAME
{
    DWORD dwSize;
    unsigned int unMonitorWallID;             
    char szNewName[MAX_MONITORWALL_NAME_LEN]; 
} NET_IN_MONITORWALL_RENAME;
typedef struct tagNET_OUT_MONITORWALL_RENAME
{
    DWORD dwSize;
} NET_OUT_MONITORWALL_RENAME;
typedef struct tagNET_IN_MONITORWALL_GET_LOCK_STATUS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_MONITORWALL_GET_LOCK_STATUS;
typedef struct tagNET_OUT_MONITORWALL_GET_LOCK_STATUS
{
    DWORD dwSize;
    BOOL bLock; 
} NET_OUT_MONITORWALL_GET_LOCK_STATUS;
typedef struct tagNET_IN_MONITORWALL_LOCK
{
    DWORD dwSize;
    int nChannel;       
    BOOL bLock;         
    BYTE byReserved[4]; 
} NET_IN_MONITORWALL_LOCK;
typedef struct tagNET_OUT_MONITORWALL_LOCK
{
    DWORD dwSize;
} NET_OUT_MONITORWALL_LOCK;
typedef struct tagNET_IN_MONITORWALL_SET_VSYNC
{
    DWORD dwSize;           
    int nChannel;           
    char szCompositeID[64]; 
} NET_IN_MONITORWALL_SET_VSYNC;
typedef struct tagNET_OUT_MONITORWALL_SET_VSYNC
{
    DWORD dwSize; 
} NET_OUT_MONITORWALL_SET_VSYNC;
typedef struct tagNET_UPDATE_URL_INFO
{
    char szOldURL[512];   
    char szNewURL[512];   
    BYTE bReserved[1024]; 
} NET_UPDATE_URL_INFO;
typedef struct tagNET_IN_MONITORWALL_UPDATE_SOURCE_URL
{
    DWORD dwSize;                       
    UINT nUpdateURLNum;                 
    NET_UPDATE_URL_INFO* pstuUpdateURL; 
} NET_IN_MONITORWALL_UPDATE_SOURCE_URL;
typedef struct tagNET_OUT_MONITORWALL_UPDATE_SOURCE_URL
{
    DWORD dwSize; 
} NET_OUT_MONITORWALL_UPDATE_SOURCE_URL;
typedef enum tagEM_SNIFFER_FILTER_PROTOCOL
{
    EM_SNIFFER_FILTER_PROTOCOL_UNKNOWN, 
    EM_SNIFFER_FILTER_PROTOCOL_TCP,     
    EM_SNIFFER_FILTER_PROTOCOL_UDP,     
} EM_SNIFFER_FILTER_PROTOCOL;
typedef struct tagNET_SNIFFER_FILTER_ELEMENT
{
    char szSrcIP[64];                      
    char szDstIP[64];                      
    int nSrcPort;                          
    int nDstPort;                          
    EM_SNIFFER_FILTER_PROTOCOL emProtocol; 
    BYTE byReserved[60];                   
} NET_SNIFFER_FILTER_ELEMENT;
typedef struct tagNET_SNIFFER_FILTER
{
    int nMaxElemet;                           
    NET_SNIFFER_FILTER_ELEMENT stuElemets[8]; 
    int nFilterType;                          
    BYTE byReserved[256];                     
} NET_SNIFFER_FILTER;
typedef struct tagDH_IN_START_SNIFFER
{
    DWORD dwSize;
    const char* pszNetInterface;    
    const char* pszPath;            
    int nSaveType;                  
    const char* pszFilter;          
    int nCaptureTime;               
    unsigned int nCurrentFileSize;  
    BOOL bFilterEx;                 
    NET_SNIFFER_FILTER stuFilterEx; 
} DH_IN_START_SNIFFER;
typedef struct tagDH_OUT_START_SNIFFER
{
    DWORD dwSize;
} DH_OUT_START_SNIFFER;
typedef struct tagDH_SNIFFER_INFO
{
    DWORD dwSize;
    DWORD nSnifferID;       
    char szPath[256];       
    char szPathEx[10][256]; 
    int nRetPathEx;         
    UINT nFileSize[10];     
} DH_SNIFFER_INFO;
typedef struct tagDH_IN_GET_SNIFFER_INFO
{
    DWORD dwSize;
    const char* pszNetInterface;
} DH_IN_GET_SNIFFER_INFO;
typedef struct tagDH_OUT_GET_SNIFFER_INFO
{
    DWORD dwSize;
    DH_SNIFFER_INFO* pstuSniffers; 
    int nMaxSnifferCount;          
    int nRetSnifferCount;          
} DH_OUT_GET_SNIFFER_INFO;
typedef void(CALLBACK* fAttachSniffer)(LLONG lAttchHandle, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SNIFFER
{
    DWORD dwSize;
    fAttachSniffer cbSniffer; 
    LDWORD dwUser;            
} NET_IN_ATTACH_SNIFFER;
typedef struct tagNET_OUT_ATTACH_SNIFFER
{
    DWORD dwSize;
} NET_OUT_ATTACH_SNIFFER;
typedef struct tagNET_IN_GET_SNIFFER_CAP
{
    DWORD dwSize;
} NET_IN_GET_SNIFFER_CAP;
typedef struct tagNET_OUT_GET_SNIFFER_CAP
{
    DWORD dwSize;
    BOOL bRemoteCap; 
} NET_OUT_GET_SNIFFER_CAP;
typedef struct tagDH_FORMAT_PATITION
{
    DWORD dwSize;
    const char* pszStorageName;  
    const char* pszPatitionName; 
    const char* pszFileSystem;   
} DH_FORMAT_PATITION;
typedef struct tagDH_IN_CREATE_REMOTE_FILE
{
    DWORD dwSize;
    const char* pszPath; 
    BOOL bDirectory;     
} DH_IN_CREATE_REMOTE_FILE;
typedef struct tagDH_OUT_CREATE_REMOTE_FILE
{
    DWORD dwSize;
} DH_OUT_CREATE_REMOTE_FILE;
typedef struct tagDH_IN_REMOVE_REMOTE_FILES
{
    DWORD dwSize;
    const char** pszPath; 
    int nFileCount;       
} DH_IN_REMOVE_REMOTE_FILES;
typedef struct tagDH_OUT_REMOVE_REMOTE_FILES
{
    DWORD dwSize;
} DH_OUT_REMOVE_REMOTE_FILES;
typedef struct tagDH_IN_RENAME_REMOTE_FILE
{
    DWORD dwSize;
    const char* pszOldPath; 
    const char* pszNewPath; 
} DH_IN_RENAME_REMOTE_FILE;
typedef struct tagDH_OUT_RENAME_REMOTE_FILE
{
    DWORD dwSize;
} DH_OUT_RENAME_REMOTE_FILE;
typedef struct tagDH_REMOTE_FILE_INFO
{
    DWORD dwSize;
    BOOL bDirectory;                   
    char szPath[MAX_PATH];             
    NET_TIME stuCreateTime;            
    NET_TIME stuModifyTime;            
    INT64 nFileSize;                   
    char szFileType[DH_FILE_TYPE_LEN]; 
} DH_REMOTE_FILE_INFO;
typedef enum tagDH_REMOTE_FILE_COND
{
    DH_REMOTE_FILE_COND_NONE,  
    DH_REMOTE_FILE_COND_VOICE, 
} DH_REMOTE_FILE_COND;
typedef struct tagDH_IN_LIST_REMOTE_FILE
{
    DWORD dwSize;
    const char* pszPath;             
    BOOL bFileNameOnly;              
    DH_REMOTE_FILE_COND emCondition; 
} DH_IN_LIST_REMOTE_FILE;
typedef struct tagDH_OUT_LIST_REMOTE_FILE
{
    DWORD dwSize;
    DH_REMOTE_FILE_INFO* pstuFiles; 
    int nMaxFileCount;              
    int nRetFileCount;              
} DH_OUT_LIST_REMOTE_FILE;
typedef enum tagNET_SET_FILEATTR_ACTION
{
    EM_SET_FILEATTR_ACTION_UNKNOWN = 0, 
    EM_SET_FILEATTR_ACTION_MARK,        
} NET_SET_FILEATTR_ACTION;
typedef struct tagDH_IN_SET_FILEATTRIBUTE
{
    DWORD dwSize;
    unsigned int nDriveNo;             
    unsigned int nPartition;           
    unsigned int nCluster;             
    NET_SET_FILEATTR_ACTION emAction;  
    char szValue[DH_COMMON_STRING_64]; 
} DH_IN_SET_FILEATTRIBUTE;
typedef struct tagDH_OUT_SET_FILEATTRIBUTE
{
    DWORD dwSize;
} DH_OUT_SET_FILEATTRIBUTE;
typedef struct tagDH_EJECT_STORAGE_DEVICE
{
    DWORD dwSize;
    const char* pszStorageName; 
} DH_EJECT_STORAGE_DEVICE;
typedef struct tagDH_LOAD_STORAGE_DEVICE
{
    DWORD dwSize;
    const char* pszStorageName; 
} DH_LOAD_STORAGE_DEVICE;
typedef struct tagDH_IN_UPLOAD_REMOTE_FILE
{
    DWORD dwSize;
    const char* pszFileSrc;   
    const char* pszFileDst;   
    const char* pszFolderDst; 
    unsigned int nPacketLen;  
    unsigned int nTimeOut;    
} DH_IN_UPLOAD_REMOTE_FILE;
typedef struct tagDH_OUT_UPLOAD_REMOTE_FILE
{
    DWORD dwSize;
} DH_OUT_UPLOAD_REMOTE_FILE;
typedef struct tagDH_IN_DOWNLOAD_REMOTE_FILE
{
    DWORD dwSize;
    const char* pszFileName; 
    const char* pszFileDst;  
} DH_IN_DOWNLOAD_REMOTE_FILE;
typedef struct tagDH_OUT_DOWNLOAD_REMOTE_FILE
{
    DWORD dwSize;
    DWORD dwMaxFileBufLen; 
    char* pstFileBuf;      
    DWORD dwRetFileBufLen; 
    BYTE byReserved[4];    
} DH_OUT_DOWNLOAD_REMOTE_FILE;
typedef struct tagNET_IN_DOWNLOAD_PIECE_FILE
{
    DWORD dwSize;
    char szFileName[MAX_PATH]; 
    UINT nOffSet;              
    UINT nNeedLength;          
} NET_IN_DOWNLOAD_PIECE_FILE;
typedef struct tagNET_OUT_DOWNLOAD_PIECE_FILE
{
    DWORD dwSize;
    UINT nFileLength;   
    UINT nPacketLength; 
    char* szBuffer;     
    UINT nBufferLen;    
} NET_OUT_DOWNLOAD_PIECE_FILE;
typedef struct tagNET_IN_GET_NEDIA_FILE_INFO
{
    DWORD dwSize;         
    BYTE byReserved[4];   
    char szFilePath[640]; 
} NET_IN_GET_NEDIA_FILE_INFO;
typedef struct tagNET_MEDIA_FILE_INFO
{
    UINT nDuration;        
    BYTE byReserved[2044]; 
} NET_MEDIA_FILE_INFO;
typedef struct tagNET_OUT_GET_NEDIA_FILE_INFO
{
    DWORD dwSize;                         
    NET_MEDIA_FILE_INFO stuMediaFileInfo; 
} NET_OUT_GET_NEDIA_FILE_INFO;
typedef struct tagNET_IN_START_LIST_FILE_INFO
{
    DWORD dwSize;         
    BYTE byReserved[4];   
    char szFilePath[600]; 
} NET_IN_START_LIST_FILE_INFO;
typedef struct tagNET_OUT_START_LIST_FILE_INFO
{
    DWORD dwSize; 
} NET_OUT_START_LIST_FILE_INFO;
typedef struct tagNET_IN_DO_LIST_FILE_INFO
{
    DWORD dwSize; 
    UINT nCount;  
} NET_IN_DO_LIST_FILE_INFO;
typedef enum tagEM_LIST_ELEMENT_TYPE
{
    EM_LIST_ELEMENT_TYPE_UNKNOWN,   
    EM_LIST_ELEMENT_TYPE_FILE,      
    EM_LIST_ELEMENT_TYPE_DIRECTORY, 
} EM_LIST_ELEMENT_TYPE;
typedef struct tagNET_FILE_ELEMENT_INFO
{
    NET_TIME stuCreateTime; 
    NET_TIME stuModifyTime; 
    TP_U64 nFileSize;       
    char szPath[600];       
    char szFileType[32];    
    BYTE byReserved[2048];  
} NET_FILE_ELEMENT_INFO;
typedef struct tagNET_DIRECTORY_ELEMENT_INFO
{
    NET_TIME stuCreateTime; 
    char szPath[600];       
    BYTE byReserved[2048];  
} NET_DIRECTORY_ELEMENT_INFO;
typedef struct tagNET_LIST_ELEMENT_INFO
{
    NET_FILE_ELEMENT_INFO stuFileInfo;           
    NET_DIRECTORY_ELEMENT_INFO stuDirectoryInfo; 
    EM_LIST_ELEMENT_TYPE emElementType;          
    BYTE byReserved[2044];                       
} NET_LIST_ELEMENT_INFO;
typedef struct tagNET_OUT_DO_LIST_FILE_INFO
{
    DWORD dwSize;                              
    UINT nMaxListElementNum;                   
    UINT nRetListElementNum;                   
    NET_LIST_ELEMENT_INFO* pstListElementInfo; 
} NET_OUT_DO_LIST_FILE_INFO;
typedef enum tagEM_STATE_MODE
{
    EM_STATE_MODE_UNKNOWN,   
    EM_STATE_MODE_PREPARING, 
    EM_STATE_MODE_LOADING,   
    EM_STATE_MODE_SUCCEEDED, 
    EM_STATE_MODE_FAILED,    
    EM_STATE_MODE_CANCELLED, 
} EM_STATE_MODE;
typedef struct tagNET_IN_NOTIFY_FILE_UPLOAD_PROGRESS_INFO
{
    DWORD dwSize; 
    UINT nProgress; 
    char szFileName[256];  
    char szUniqueID[128];  
    char szFilePath[256];  
    EM_STATE_MODE emState; 
    UINT nErrorCode;       
    char szReserved[1784]; 
} NET_IN_NOTIFY_FILE_UPLOAD_PROGRESS_INFO;
typedef struct tagNET_OUT_NOTIFY_FILE_UPLOAD_PROGRESS_INFO
{
    DWORD dwSize; 
} NET_OUT_NOTIFY_FILE_UPLOAD_PROGRESS_INFO;
typedef struct tagNET_REMOVE_MEDIA_FILE_INFO
{
    char szFileName[128]; 
    UINT nPicId;          
    int nChannelsNum;     
    int nChannels[256];   
    char szReserved[128]; 
} NET_REMOVE_MEDIA_FILE_INFO;
typedef struct tagNET_IN_REMOVE_MEDIA_FILES_INFO
{
    DWORD dwSize;                                
    int nFileInfoNum;                            
    NET_REMOVE_MEDIA_FILE_INFO stuFileInfo[256]; 
    NET_TIME stuStartTime;                       
    NET_TIME stuEndTime;                         
} NET_IN_REMOVE_MEDIA_FILES_INFO;
typedef struct tagNET_BEING_STORED_VIDEO
{
    char szVideoFileName[128]; 
    char szReserved[128];      
} NET_BEING_STORED_VIDEO;
typedef struct tagNET_OUT_REMOVE_MEDIA_FILES_INFO
{
    DWORD dwSize;                                    
    int nBeingStoredVideoNum;                        
    NET_BEING_STORED_VIDEO stuBeingStoredVideo[128]; 
} NET_OUT_REMOVE_MEDIA_FILES_INFO;
typedef struct tagDH_IN_SEARCH_CONDITON
{
    DWORD dwSize;
    const char* pMachineName; 
    const char* pMachineAddr; 
    const char* pSerialNo;    
    const char* pChannelName; 
} DH_MATRIX_SEARCH_CONDITON;
typedef struct tagDH_IN_MATIRX_SEARCH
{
    DWORD dwSize;
    const char* pSerialNo;                  
    DH_MATRIX_SEARCH_CONDITON stuCondition; 
} DH_IN_MATRIX_SEARCH;
typedef struct tagDH_OUT_MATRIX_SEARCH
{
    DWORD dwSize;
    DH_REMOTE_DEVICE* pstuRemoteDevices; 
    int nMaxDeviceCount;                 
    int nRetDeviceCount;                 
} DH_OUT_MATRIX_SEARCH;
typedef struct tagDH_IN_GET_MATRIX_TREE
{
    DWORD dwSize;
    const char* pSerialNo; 
    int nLevel;            
} DH_IN_GET_MATRIX_TREE;
typedef struct tagDH_CASCADE_DEVICE_INFO
{
    DWORD dwSize;
    int nLevel;                     
    char szPath[MAX_PATH];          
    DH_REMOTE_DEVICE stuDeviceInfo; 
} DH_CASCADE_DEVICE_INFO;
typedef struct tagDH_OUT_GET_MATRIX_TREE
{
    DWORD dwSize;
    DH_CASCADE_DEVICE_INFO* pstuRemoteDevices; 
    int nMaxDeviceCount;                       
    int nRetDeviceCount;                       
} DH_OUT_GET_MATRIX_TREE;
typedef struct tagDH_IN_GET_SUPERIOR_MATRIX_LIST
{
    DWORD dwSize;
} DH_IN_GET_SUPERIOR_MATRIX_LIST;
typedef struct tagDH_OUT_GET_SUPERIOR_MATRIX_LIST
{
    DWORD dwSize;
    DH_REMOTE_DEVICE* pstuRemoteDevices; 
    int nMaxDeviceCount;                 
    int nRetDeviceCount;                 
} DH_OUT_GET_SUPERIOR_MATRIX_LIST;
typedef enum tagENUM_RECORDBACKUP_FILE_PROGRESS_TYPE
{
    ENUM_RECORDBACKUP_FILE_PROGRESS_UNKNOWN,        
    ENUM_RECORDBACKUP_FILE_PROGRESS_HEADER_PACKAGE, 
    ENUM_RECORDBACKUP_FILE_PROGRESS_INDEX_PACKAGE,  
    ENUM_RECORDBACKUP_FILE_PROGRESS_STREAM_PACKET,  
    ENUM_RECORDBACKUP_FILE_PROGRESS_EMPTY_PACKET,   
} ENUM_RECORDBACKUP_FILE_PROGRESS_TYPE;
typedef struct tagNET_RECORD_BACKUP_PROGRESS
{
    char szFilePath[256];                        
    ENUM_RECORDBACKUP_FILE_PROGRESS_TYPE emType; 
    int nPosition;                               
    UINT nPercent;                               
    int nRemainingTime;                          
    char szReserved[512];                        
} NET_RECORD_BACKUP_PROGRESS;
typedef enum tagEM_RECORD_BACKUP_FAIL_REASON
{
    EM_RECORD_BACKUP_FAIL_REASON_UNKNOW,                   
    EM_RECORD_BACKUP_FAIL_REASON_LOGIN_FAIL,               
    EM_RECORD_BACKUP_FAIL_REASON_NO_FILES,                 
    EM_RECORD_BACKUP_FAIL_REASON_DOWNLOAD_NET_ERROR,       
    EM_RECORD_BACKUP_FAIL_REASON_UNKNOW_ERROR,             
    EM_RECORD_BACKUP_FAIL_REASON_USER_NAME_NOT_VALID,      
    EM_RECORD_BACKUP_FAIL_REASON_PASSWORD_NOT_VALID,       
    EM_RECORD_BACKUP_FAIL_REASON_PEER_HAS_BEEN_BLOCKED,    
    EM_RECORD_BACKUP_FAIL_REASON_PEER_IN_BLOCK_LIST,       
    EM_RECORD_BACKUP_FAIL_REASON_TOO_MANY_CONNECTIONS,     
    EM_RECORD_BACKUP_FAIL_REASON_ACCOUNT_HAS_BEEN_BLOCKED, 
    EM_RECORD_BACKUP_FAIL_REASON_LOGIN_CONNECT_FAILED,     
    EM_RECORD_BACKUP_FAIL_REASON_USER_OR_PWD_NOT_VALID,    
    EM_RECORD_BACKUP_FAIL_REASON_LOGIN_CONNECT_TIMEOUT,    
} EM_RECORD_BACKUP_FAIL_REASON;
typedef struct tagDH_RECORD_BACKUP_RESTORE_TASK
{
    DWORD dwSize;
    unsigned int nTaskID;                      
    char szDeviceID[DH_DEV_ID_LEN_EX];         
    int nChannelID;                            
    NET_TIME stuStartTime;                     
    NET_TIME stuEndTime;                       
    int nState;                                
    NET_RECORD_BACKUP_PROGRESS stuProgress;    
    EM_RECORD_BACKUP_FAIL_REASON emFailReason; 
    NET_TIME stuTaskStartTime;                 
    NET_TIME stuTaskEndTime;                   
    int nRemoteChannel;                        
} DH_REC_BAK_RST_TASK;
typedef struct tagDH_IN_ADD_RECORD_BACKUP_RESTORE_TASK
{
    DWORD dwSize;
    const char* pszDeviceID; 
    int* pnChannels;         
    int nChannelCount;       
    NET_TIME stuStartTime;   
    NET_TIME stuEndTime;     
    char szUrl[256];         
} DH_IN_ADD_REC_BAK_RST_TASK;
typedef enum tagENUM_RECORDBACKUP_FILE_TYPE
{
    ENUM_RECORDBACKUP_FILE_COMMON,       
    ENUM_RECORDBACKUP_FILE_ALARM,        
    ENUM_RECORDBACKUP_FILE_MOTIONDETECT, 
} ENUM_RECORDBACKUP_FILE_TYPE;
typedef struct tagNET_RECORDBACKUP_REMOTE_TASK
{
    UINT nChannelCount;        
    UINT nChannels[512];       
    UINT nRemoteChannels[512]; 
    char szDeviceIP[64];                    
    UINT nPort;                             
    char szUserName[64];                    
    char szPassword[64];                    
    NET_TIME stuStartTime;                  
    NET_TIME stuEndTime;                    
    ENUM_RECORDBACKUP_FILE_TYPE emFileType; 
    NET_STREAM_TYPE emStreamType;           
    BYTE byReserved[512];                   
} NET_RECORDBACKUP_REMOTE_TASK;
typedef struct tagNET_RECORDBACKUP_TASKID_INFO
{
    UINT nTaskIDs[512];    
    UINT nTaskIDCount;     
    BYTE byReserved[1024]; 
} NET_RECORDBACKUP_TASKID_INFO;
typedef struct tagNET_IN_ADD_RECORDBACKUP_REMOTE_TASK
{
    DWORD dwSize;
    int nTaskCount;                         
    NET_RECORDBACKUP_REMOTE_TASK* pstuTask; 
} DH_IN_ADD_REC_BAK_RST_REMOTE_TASK;
typedef struct tagNET_OUT_ADD_RECORDBACKUP_REMOTE_TASK
{
    DWORD dwSize;
    NET_RECORDBACKUP_TASKID_INFO* pstuID; 
} DH_OUT_ADD_REC_BAK_RST_REMOTE_TASK;
typedef struct tagDH_IN_REMOVE_RECORD_BACKUP_RESTORE_TASK
{
    DWORD dwSize;
    unsigned int* pnTaskIDs; 
    int nTaskCount;          
} DH_IN_REMOVE_REC_BAK_RST_TASK;
typedef struct tagDH_IN_QUERY_RECORD_BACKUP_RESTORE_TASK
{
    DWORD dwSize;
} DH_IN_QUERY_REC_BAK_RST_TASK;
typedef struct tagDH_OUT_QUERY_RECORD_BACKUP_RESTORE_TASK
{
    DWORD dwSize;
    DH_REC_BAK_RST_TASK* pTasks; 
    int nMaxCount;               
    int nReturnCount;            
} DH_OUT_QUERY_REC_BAK_RST_TASK;
typedef enum tagEM_RECORD_BACKUP_FIND_TYPE
{
    EM_RECORD_BACKUP_FIND_TYPE_UNKNOWN,         
    EM_RECORD_BACKUP_FIND_TYPE_BY_TASKID,       
    EM_RECORD_BACKUP_FIND_TYPE_BY_CHN_AND_TIME, 
    EM_RECORD_BACKUP_FIND_TYPE_BY_DEVICE_ID,    
} EM_RECORD_BACKUP_FIND_TYPE;
typedef struct tagNET_IN_FIND_REC_BAK_RST_TASK
{
    DWORD dwSize;
    EM_RECORD_BACKUP_FIND_TYPE emFindType; 
    DWORD dwTaskID;                        
    int nLocalChannelID;                   
    NET_TIME stuStartTime;                 
    NET_TIME stuEndTime;                   
    char szDeviceID[128];                  
} NET_IN_FIND_REC_BAK_RST_TASK;
typedef struct tagNET_OUT_FIND_REC_BAK_RST_TASK
{
    DWORD dwSize;
    DH_REC_BAK_RST_TASK* pTasks; 
    int nMaxCount;               
    int nRetCount;               
} NET_OUT_FIND_REC_BAK_RST_TASK;
typedef struct tagDH_LOGIC_DEVICE_ADD_CAMERA_PARAM
{
    DWORD dwSize;
    const char* pszDeviceID; 
    int nChannel;            
} DH_LOGIC_DEVICE_ADD_CAMERA_PARAM;
typedef struct tagDH_LOGIC_DEVICE_ADD_CAMERA_RESULT
{
    DWORD dwSize;
    char szDeviceID[DH_DEV_ID_LEN]; 
    int nChannel;                   
    int nUniqueChannel;             
    int nFailedCode;                
} DH_LOGIC_DEVICE_ADD_CAMERA_RESULT;
typedef struct tagDH_IN_ADD_LOGIC_DEVICE_CAMERA
{
    DWORD dwSize;
    DH_LOGIC_DEVICE_ADD_CAMERA_PARAM* pCameras; 
    int nCameraCount;                           
} DH_IN_ADD_LOGIC_DEVICE_CAMERA;
typedef struct tagDH_OUT_ADD_LOGIC_DEVICE_CAMERA
{
    DWORD dwSize;
    DH_LOGIC_DEVICE_ADD_CAMERA_RESULT* pResults; 
    int nMaxResultCount;                         
    int nRetResultCount;                         
} DH_OUT_ADD_LOGIC_DEVICE_CAMERA;
typedef struct tagDH_LOGIC_BYDEVICE_ADD_CAMERA_PARAM
{
    DWORD dwSize;
    int nUniqueChannel; 
    int nChannel;       
} DH_LOGIC_BYDEVICE_ADD_CAMERA_PARAM;
typedef struct tagDH_LOGIC_BYDEVICE_ADD_CAMERA_RESULT
{
    DWORD dwSize;
    int nUniqueChannel; 
    int nFailedCode;    
} DH_LOGIC_BYDEVICE_ADD_CAMERA_RESULT;
typedef struct tagDH_IN_ADD_LOGIC_BYDEVICE_CAMERA
{
    DWORD dwSize;
    char pszDeviceID[DH_DEV_ID_LEN];              
    DH_REMOTE_DEVICE stuRemoteDevice;             
    int nCameraCount;                             
    DH_LOGIC_BYDEVICE_ADD_CAMERA_PARAM* pCameras; 
} DH_IN_ADD_LOGIC_BYDEVICE_CAMERA;
typedef struct tagDH_OUT_ADD_LOGIC_BYDEVICE_CAMERA
{
    DWORD dwSize;
    char szDeviceID[DH_DEV_ID_LEN];                
    int nMaxResultCount;                           
    int nRetResultCount;                           
    DH_LOGIC_BYDEVICE_ADD_CAMERA_RESULT* pResults; 
} DH_OUT_ADD_LOGIC_BYDEVICE_CAMERA;
typedef enum tagEM_CAMERA_CHANNEL_TYPE
{
    EM_CAMERA_CHANNEL_TYPE_UNKNOWN,    
    EM_CAMERA_CHANNEL_TYPE_LOCAL,      
    EM_CAMERA_CHANNEL_TYPE_REMOTE,     
    EM_CAMERA_CHANNEL_TYPE_RESERVED32, 
    EM_CAMERA_CHANNEL_TYPE_OUTPUT,     
    EM_CAMERA_CHANNEL_TYPE_MATRIX,     
    EM_CAMERA_CHANNEL_TYPE_COMPOSE,    
    EM_CAMERA_CHANNEL_TYPE_CASCADE,    
} EM_CAMERA_CHANNEL_TYPE;
typedef struct tagNET_CAMERA_INFO
{
    int nUniqueChannel;                   
    unsigned int nChannel;                
    char szControlID[128];                
    BOOL bEnable;                         
    char szName[128];                     
    char szDeviceID[128];                 
    EM_CAMERA_CHANNEL_TYPE emChannelType; 
    EM_VIDEO_STREAM emVideoStream;        
    BYTE reserved[128];                   
} NET_CAMERA_INFO;
typedef struct tagNET_CAMERA_GROUP_INFO
{
    char szDeviceID[DH_DEV_ID_LEN];   
    int nCameraCount;                 
    NET_CAMERA_INFO* pCameras;        
    DH_REMOTE_DEVICE stuRemoteDevice; 
    BYTE reserved[1024];              
} NET_CAMERA_GROUP_INFO;
typedef struct tagNET_IN_ADD_LOGIC_BYGROUP_CAMERA
{
    DWORD dwSize;
    int nCameraGroup;                          
    NET_CAMERA_GROUP_INFO* pstCameraGroupInfo; 
} NET_IN_ADD_LOGIC_BYGROUP_CAMERA;
typedef struct tagNET_ADD_BYGROUP_RESULT_CAMERA
{
    unsigned int nUniqueChannel; 
    unsigned int nFailedCode;    
    BYTE reserved[128];          
} NET_ADD_BYGROUP_RESULT_CAMERA;
typedef struct tagNET_ADD_BYGROUP_RESULT
{
    char szDeviceID[DH_DEV_ID_LEN];                 
    int nResultCam;                                 
    NET_ADD_BYGROUP_RESULT_CAMERA* pstResultCamera; 
    BYTE reserved[1024];                            
} NET_ADD_BYGROUP_RESULT;
typedef struct tagNET_OUT_ADD_LOGIC_BYGROUP_CAMERA
{
    DWORD dwSize;
    int nGroupCount;                             
    NET_ADD_BYGROUP_RESULT* pstAddByGroupResult; 
} NET_OUT_ADD_LOGIC_BYGROUP_CAMERA;
typedef struct tagNET_IN_GET_CAMERA_ALL_BY_GROUP
{
    DWORD dwSize;                         
    EM_CAMERA_CHANNEL_TYPE emChannelType; 
} NET_IN_GET_CAMERA_ALL_BY_GROUP;
typedef struct tagNET_OUT_GET_CAMERA_ALL_BY_GROUP
{
    DWORD dwSize;                              
    int nMaxCameraGroup;                       
    int nCameraGroup;                          
    NET_CAMERA_GROUP_INFO* pstCameraGroupInfo; 
} NET_OUT_GET_CAMERA_ALL_BY_GROUP;
typedef struct tagNET_DELETE_CAMERA_GROUP_INFO
{
    char szDeviceID[DH_DEV_ID_LEN]; 
    int nUniqueChannelNum;          
    int szUniqueChannels[1024];     
} NET_DELETE_CAMERA_GROUP_INFO;
typedef struct tagNET_IN_DELETE_CAMERA_BY_GROUP
{
    DWORD dwSize;                                     
    int nCameraGroup;                                 
    NET_DELETE_CAMERA_GROUP_INFO* pstCameraGroupInfo; 
} NET_IN_DELETE_CAMERA_BY_GROUP;
typedef struct tagNET_OUT_DELETE_CAMERA_BY_GROUP
{
    DWORD dwSize; 
} NET_OUT_DELETE_CAMERA_BY_GROUP;
typedef enum tagEM_GET_VIDEO_INPUT_TYPE
{
    EM_GET_VIDEO_INPUT_TYPE_UNKNOWN,   
    EM_GET_VIDEO_INPUT_TYPE_BANDWIDTH, 
} EM_GET_VIDEO_INPUT_TYPE;
typedef struct tagNET_IN_GET_VIDEO_INPUT_INFO
{
    DWORD dwSize;                   
    EM_GET_VIDEO_INPUT_TYPE emType; 
} NET_IN_GET_VIDEO_INPUT_INFO;
typedef struct tagNET_VIDEO_INPUT_BANDWIDTH_INFO
{
    double dbBandWidthLimit; 
    double dbBandWidthLeft;  
    BYTE byReserved[256];    
} NET_VIDEO_INPUT_BANDWIDTH_INFO;
typedef struct tagNET_OUT_GET_VIDEO_INPUT_INFO
{
    DWORD dwSize; 
    void* pInfo;  
} NET_OUT_GET_VIDEO_INPUT_INFO;
#define MAX_ORDER_NUMBER 6 
typedef enum tagEM_RECORD_ORDER_TYPE
{
    EM_RECORD_ORDER_TYPE_UNKNOWN, 
    EM_RECORD_ORDER_TYPE_ASCENT,  
    EM_RECORD_ORDER_TYPE_DESCENT  
} EM_RECORD_ORDER_TYPE;
typedef struct tagNET_AUTHORITY_TYPE
{
    DWORD dwSize;
    EM_NET_AUTHORITY_TYPE emAuthorityType; 
    BOOL bAuthorityEnable;                 
} NET_AUTHORITY_TYPE;
typedef struct tagNET_TRAFFIC_LIST_RECORD
{
    DWORD dwSize;
    int nRecordNo;                                                 
    char szMasterOfCar[DH_MAX_NAME_LEN];                           
    char szPlateNumber[DH_MAX_PLATE_NUMBER_LEN];                   
    EM_NET_PLATE_TYPE emPlateType;                                 
    EM_NET_PLATE_COLOR_TYPE emPlateColor;                          
    EM_NET_VEHICLE_TYPE emVehicleType;                             
    EM_NET_VEHICLE_COLOR_TYPE emVehicleColor;                      
    NET_TIME stBeginTime;                                          
    NET_TIME stCancelTime;                                         
    int nAuthrityNum;                                              
    NET_AUTHORITY_TYPE stAuthrityTypes[DH_MAX_AUTHORITY_LIST_NUM]; 
    EM_NET_TRAFFIC_CAR_CONTROL_TYPE emControlType;                 
    UINT nControlledRouteID;                                       
} NET_TRAFFIC_LIST_RECORD;
typedef struct
{
    DWORD dwSize;
    char szPlateNumber[DH_MAX_PLATE_NUMBER_LEN];      
    char szPlateNumberVague[DH_MAX_PLATE_NUMBER_LEN]; 
    int nQueryResultBegin;                            
    BOOL bRapidQuery;                                 
} FIND_RECORD_TRAFFICREDLIST_CONDITION;
typedef struct tagALARM_TRAFFIC_SUSPICIOUSCAR_INFO
{
    DWORD dwSize;
    int nAction;                        
    DH_MSG_OBJECT stuVehicle;           
    NET_TRAFFIC_LIST_RECORD stuCarInfo; 
    EVENT_COMM_INFO stCommInfo;         
} ALARM_TRAFFIC_SUSPICIOUSCAR_INFO;
typedef struct
{
    DWORD dwSize;
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
} FIND_RECORD_BURN_CASE_CONDITION;
typedef struct tagFIND_RECORD_ACCESSCTLCARD_CONDITION
{
    DWORD dwSize;
    char szCardNo[DH_MAX_CARDNO_LEN]; 
    char szUserID[DH_MAX_USERID_LEN]; 
    BOOL bIsValid;                    
    BOOL abCardNo;                    
    BOOL abUserID;                    
    BOOL abIsValid;                   
} FIND_RECORD_ACCESSCTLCARD_CONDITION;
typedef struct tagFIND_RECORD_ACCESSCTLPWD_CONDITION
{
    DWORD dwSize;
    char szUserID[DH_MAX_USERID_LEN]; 
} FIND_RECORD_ACCESSCTLPWD_CONDITION;
typedef enum tagEM_RECORD_ACCESSCTLCARDREC_ORDER_FIELD
{
    EM_RECORD_ACCESSCTLCARDREC_ORDER_FIELD_UNKNOWN = 0, 
    EM_RECORD_ACCESSCTLCARDREC_ORDER_FIELD_RECNO,       
    EM_RECORD_ACCESSCTLCARDREC_ORDER_FIELD_CREATETIME,  
} EM_RECORD_ACCESSCTLCARDREC_ORDER_FIELD;
typedef struct tagFIND_RECORD_ACCESSCTLCARDREC_ORDER
{
    EM_RECORD_ACCESSCTLCARDREC_ORDER_FIELD emField; 
    EM_RECORD_ORDER_TYPE emOrderType;               
    char byReverse[64];                             
} FIND_RECORD_ACCESSCTLCARDREC_ORDER;
typedef struct tagFIND_RECORD_ACCESSCTLCARDREC_CONDITION
{
    DWORD dwSize;
    char szCardNo[DH_MAX_CARDNO_LEN]; 
    NET_TIME stStartTime;             
    NET_TIME stEndTime;               
} FIND_RECORD_ACCESSCTLCARDREC_CONDITION;
typedef struct tagFIND_RECORD_ACCESSCTLCARDREC_CONDITION_EX
{
    DWORD dwSize;
    BOOL bCardNoEnable;                                             
    char szCardNo[DH_MAX_CARDNO_LEN];                               
    BOOL bTimeEnable;                                               
    NET_TIME stStartTime;                                           
    NET_TIME stEndTime;                                             
    int nOrderNum;                                                  
    FIND_RECORD_ACCESSCTLCARDREC_ORDER stuOrders[MAX_ORDER_NUMBER]; 
    BOOL bRealUTCTimeEnable;                                        
    NET_TIME stuStartRealUTCTime;                                   
    NET_TIME stuEndRealUTCTime;                                     
} FIND_RECORD_ACCESSCTLCARDREC_CONDITION_EX;
typedef struct tagFIND_RECORD_SENSORRECORD_CONDITION
{
    DWORD dwSize;
    NET_TIME stStartTime; 
    NET_TIME stEndTime;   
    UINT uDeviceID;       
    BOOL bDeviceIDEnable; 
    BOOL bStatusEnable;   
    BYTE byStatus;        
    BYTE byReserved[3];   
} FIND_RECORD_SENSORRECORD_CONDITION;
typedef struct tagFIND_RECORD_ACCESSCTLHOLIDAY_CONDITION
{
    DWORD dwSize;
    char szHolidayNo[DH_COMMON_STRING_32]; 
} FIND_RECORD_ACCESSCTLHOLIDAY_CONDITION;
typedef struct tagFIND_RECORD_ELECTRONICSTAG_CONDITION
{
    DWORD dwSize;
    NET_TIME stStartTime;                        
    NET_TIME stEndTime;                          
    BOOL abDevId;                                
    UINT unDevID;                                
    BOOL abMatchPic;                             
    BOOL bMatch;                                 
    BOOL abPlateNumber;                          
    char szPlateNumber[DH_MAX_PLATE_NUMBER_LEN]; 
} FIND_RECORD_ELECTRONICSTAG_CONDITION;
typedef struct tagFIND_RECORD_RESIDENT_CONDTION
{
    DWORD dwSize;
    char szICNum[DH_MAX_IC_LEN]; 
} FIND_RECORD_RESIDENT_CONDTION;
typedef struct tagFIND_RECORD_TRAFFICFLOW_CONDITION
{
    DWORD dwSize;
    BOOL abChannelId;     
    int nChannelId;       
    BOOL abLane;          
    int nLane;            
    BOOL bStartTime;      
    NET_TIME stStartTime; 
    BOOL bEndTime;        
    NET_TIME stEndTime;   
    BOOL bStatisticsTime; 
} FIND_RECORD_TRAFFICFLOW_CONDITION;
#define DH_MAX_CALLTYPE_LIST_NUM 16 
#define DH_MAX_ENDSTATE_LIST_NUM 16 
typedef struct tagFIND_RECORD_VIDEO_TALK_LOG_CONDITION
{
    DWORD dwSize;
    BOOL bCallTypeEnable;                                                
    int nCallTypeListNum;                                                
    EM_VIDEO_TALK_LOG_CALLTYPE emCallTypeList[DH_MAX_CALLTYPE_LIST_NUM]; 
    BOOL bEndStateEnable;                                                
    int nEndStateListNum;                                                
    EM_VIDEO_TALK_LOG_ENDSTATE emEndStateList[DH_MAX_ENDSTATE_LIST_NUM]; 
    BOOL bTimeEnable;                                                    
    NET_TIME stStartTime;                                                
    NET_TIME stEndTime;                                                  
} FIND_RECORD_VIDEO_TALK_LOG_CONDITION;
typedef struct tagFIND_RECORD_REGISTER_USER_STATE_CONDITION
{
    DWORD dwSize;
    BOOL bUserIDEnable;                    
    char szUserID[DH_MAX_USERID_LEN];      
    BOOL bOnlineEnable;                    
    int nOnline;                           
    BOOL bVideoTalkingEnable;              
    EM_REGISTER_USER_STATE emVideoTalking; 
} FIND_RECORD_REGISTER_USER_STATE_CONDITION;
typedef struct tagFIND_RECORD_VIDEO_TALK_CONTACT_CONDITION
{
    DWORD dwSize;
    BOOL bVTShortNumberEnable;                 
    char szVTShortNumber[DH_COMMON_STRING_32]; 
    BOOL bVTLongNumberEnable;                  
    char szVTLongNumber[DH_COMMON_STRING_64];  
} FIND_RECORD_VIDEO_TALK_CONTACT_CONDITION;
typedef struct tagFIND_RECORD_HOSPITAL_USER_CONDITION
{
    DWORD dwSize;
    char szID[32]; 
} FIND_RECORD_HOSPITAL_USER_CONDITION;
typedef struct tagFIND_RECORD_HOSPITAL_DEVICE_CONDITION
{
    DWORD dwSize;
    char szDeviceCode[64]; 
} FIND_RECORD_HOSPITAL_DEVICE_CONDITION;
typedef struct tagFIND_RECORD_COMMODITY_NOTICE_CONDITION
{
    DWORD dwSize;
    BOOL bIDEnable;                 
    char szID[DH_COMMON_STRING_64]; 
} FIND_RECORD_COMMODITY_NOTICE_CONDITION;
typedef struct tagFIND_RECORD_HEALTH_CARE_NOTICE_CONDITION
{
    DWORD dwSize;
    BOOL bIDEnable;                 
    char szID[DH_COMMON_STRING_64]; 
} FIND_RECORD_HEALTH_CARE_NOTICE_CONDITION;
typedef struct tagNET_RECORD_TRAFFIC_FLOW_STATE
{
    DWORD dwSize;
    int nRecordNum;          
    int nChannel;            
    int nLane;               
    int nVehicles;           
    float fAverageSpeed;     
    float fTimeOccupyRatio;  
    float fSpaceOccupyRatio; 
    float fSpaceHeadway;     
    float fTimeHeadway;      
    int nLargeVehicles;      
    int nMediumVehicles;     
    int nSmallVehicles;      
    float fBackOfQueue;      
    int nPasserby;           
} NET_RECORD_TRAFFIC_FLOW_STATE;
typedef struct _NET_IN_FIND_RECORD_PARAM
{
    DWORD dwSize;              
    EM_NET_RECORD_TYPE emType; 
    void* pQueryCondition;     
} NET_IN_FIND_RECORD_PARAM;
typedef struct _NET_OUT_FIND_RECORD_PARAM
{
    DWORD dwSize;       
    LLONG lFindeHandle; 
} NET_OUT_FIND_RECORD_PARAM;
typedef struct _NET_IN_FIND_NEXT_RECORD_PARAM
{
    DWORD dwSize;       
    LLONG lFindeHandle; 
    int nFileCount;     
} NET_IN_FIND_NEXT_RECORD_PARAM;
typedef struct _NET_OUT_FIND_NEXT_RECORD_PARAM
{
    DWORD dwSize;      
    void* pRecordList; 
    int nMaxRecordNum; 
    int nRetRecordNum; 
} NET_OUT_FIND_NEXT_RECORD_PARAM;
typedef struct tagNET_INSERT_RECORD_INFO
{
    DWORD dwSize;
    NET_TRAFFIC_LIST_RECORD* pRecordInfo; 
} NET_INSERT_RECORD_INFO;
typedef struct tagNET_UPDATE_RECORD_INFO
{
    DWORD dwSize;
    NET_TRAFFIC_LIST_RECORD* pRecordInfo; 
} NET_UPDATE_RECORD_INFO;
typedef struct tagNET_REMOVE_RECORD_INFO
{
    DWORD dwSize;
    int nRecordNo; 
} NET_REMOVE_RECORD_INFO;
typedef struct tagNET_IN_OPERATE_TRAFFIC_LIST_RECORD
{
    DWORD dwSize;
    EM_RECORD_OPERATE_TYPE emOperateType; 
    EM_NET_RECORD_TYPE emRecordType;      
    void* pstOpreateInfo;                 
} NET_IN_OPERATE_TRAFFIC_LIST_RECORD;
typedef struct tagNET_OUT_OPERATE_TRAFFIC_LIST_RECORD
{
    DWORD dwSize;
    int nRecordNo; 
} NET_OUT_OPERATE_TRAFFIC_LIST_RECORD;
typedef struct tagPTZ_Control_Continuously
{
    PTZ_SPEED_UNIT stuSpeed; 
    int nTimeOut;            
    char szReserve[64];      
} PTZ_CONTROL_CONTINUOUSLY;
typedef struct tagPTZ_Control_Absolutely
{
    PTZ_SPACE_UNIT stuPosition; 
    PTZ_SPEED_UNIT stuSpeed;    
    char szReserve[64];         
} PTZ_CONTROL_ABSOLUTELY;
typedef struct tagPTZ_LOCATION_SPACE_UNIT
{
    int nPositionX;     
    int nPositionY;     
    int nZoom;          
    char szReserve[32]; 
} PTZ_LOCATION_SPACE_UNIT;
typedef struct tagPTZ_LOCATION_SPEED_UNIT
{
    int nSpeedX;        
    int nSpeedY;        
    char szReserve[32]; 
} PTZ_LOCATION_SPEED_UNIT;
typedef struct tagPTZ_CONTROL_INTELLI_TRACKMOVE
{
    DWORD dwSize;
    int nChannelID; 
    int nFlag;      
    PTZ_LOCATION_SPACE_UNIT stuPosition; 
    PTZ_LOCATION_SPEED_UNIT stuSpeed;    
} PTZ_CONTROL_INTELLI_TRACKMOVE;
typedef struct tagPTZ_CONTROL_INTELLI_SETLENSWISDOMSTATE
{
    DWORD dwSize;   
    int nChannelID; 
    int nMode;      
} PTZ_CONTROL_INTELLI_SETLENSWISDOMSTATE;
typedef struct tagPTZ_CONTROL_INTELLI_SETFOCUSAREA
{
    DWORD dwSize;     
    int nChannelID;   
    int nState;       
    NET_RECT stuRect; 
} PTZ_CONTROL_INTELLI_SETFOCUSAREA;
typedef struct tagPTZ_CONTROL_AUXILIARY
{
    DWORD dwSize;
    char szFunctionName[DH_COMMON_STRING_32]; 
} PTZ_CONTROL_AUXILIARY;
typedef struct tagNET_ALARM_IN_CHANNEL
{
    DWORD dwSize;
    BOOL bValid;                    
    int nChannel;                   
    char szDeviceID[DH_DEV_ID_LEN]; 
    char szName[DH_DEV_NAME_LEN];   
} NET_ALARM_IN_CHANNEL;
typedef struct tagNET_ALARM_CHANNEL_COUNT
{
    DWORD dwSize;
    int nLocalAlarmIn;   
    int nLocalAlarmOut;  
    int nRemoteAlarmIn;  
    int nRemoteAlarmOut; 
} NET_ALARM_CHANNEL_COUNT;
typedef struct tagPTZ_Control_GotoPreset
{
    int nPresetIndex;        
    PTZ_SPEED_UNIT stuSpeed; 
    char szReserve[64];      
} PTZ_CONTROL_GOTOPRESET;
typedef struct tagPTZ_Control_RemovePreset
{
    int nPresetIndex;   
    char szReserve[64]; 
} PTZ_CONTROL_REMOVEPRESET;
typedef struct tagPTZ_Control_GotoPresetSnap
{
    int nPresetIndex;        
    int nChannel;            
    PTZ_SPEED_UNIT stuSpeed; 
    char szReserve[64];      
} PTZ_CONTROL_GOTOPRESETSNAP;
typedef struct tagNET_IN_SET_TOUR_SOURCE
{
    DWORD dwSize;
    int nChannel;              
    int nWindow;               
    DH_SPLIT_SOURCE* pstuSrcs; 
    int nSrcCount;             
} NET_IN_SET_TOUR_SOURCE;
typedef struct tagNET_OUT_SET_TOUR_SOURCE
{
    DWORD dwSize;
} NET_OUT_SET_TOUR_SOURCE;
typedef struct tagNET_IN_GET_TOUR_SOURCE
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
    int nWindow;                
} NET_IN_GET_TOUR_SOURCE;
typedef struct tagNET_SPLIT_TOUR_SOURCE
{
    DWORD dwSize;
    DH_SPLIT_SOURCE* pstuSrcs; 
    int nMaxSrcCount;          
    int nRetSrcCount;          
} NET_SPLIT_TOUR_SOURCE;
typedef struct tagNET_OUT_GET_TOUR_SOURCE
{
    DWORD dwSize;
    NET_SPLIT_TOUR_SOURCE* pstuWndSrcs; 
    int nMaxWndCount;                   
    int nRetWndCount;                   
} NET_OUT_GET_TOUR_SOURCE;
typedef struct tagNET_SPLIT_TOUR_STATUS_INFO
{
    DWORD dwSize;
    int nWindow;                   
    NET_TOUR_STATUS emStatus;      
    DH_SPLIT_WND_SOURCE stuSource; 
} NET_SPLIT_TOUR_STATUS_INFO;
typedef void(CALLBACK* fTourStatusCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_SPLIT_TOUR_STATUS_INFO* pstStatus, void* reserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SPLIT_TOUR
{
    DWORD dwSize;
    int nChannel;                 
    const char* pszCompositeID;   
    fTourStatusCallBack cbStatus; 
    LDWORD dwUser;                
} NET_IN_ATTACH_SPLIT_TOUR;
typedef struct tagNET_OUT_ATTACH_SPLIT_TOUR
{
    DWORD dwSize;
} NET_OUT_ATTACH_SPLIT_TOUR;
typedef enum tagEM_WINDOW_WORKMODE
{
    EM_WINDOW_DISPLAY, 
    EM_WINDOW_REPLAY,  
} EM_WINDOW_WORKMODE;
typedef struct tagNET_SOURCE_INFO
{
    int nWindowID;                 
    int nCaremaChannel;            
    NET_TIME stuStartTime;         
    EM_WINDOW_WORKMODE emWorkMode; 
    BYTE bReserved[128];           
} NET_SOURCE_INFO;
typedef struct tagNET_WINDOW_SOURCE_INFO
{
    DWORD dwSize;
    int nRetSrcCount;               
    NET_SOURCE_INFO* pstSourceInfo; 
} NET_WINDOW_SOURCE_INFO;
typedef void(CALLBACK* fWindowSourceCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_WINDOW_SOURCE_INFO* pstWindowSource, void* reserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_WINDOW_SOURCE
{
    DWORD dwSize;
    int nWindowID;                        
    int nChannel;                         
    const char* pszCompositeID;           
    fWindowSourceCallBack cbWindowSource; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_WINDOW_SOURCE;
typedef struct tagNET_OUT_ATTACH_WINDOW_SOURCE
{
    DWORD dwSize;
} NET_OUT_ATTACH_WINDOW_SOURCE;
typedef struct tagNET_IN_WINDOW_REGION_ENLARGE
{
    DWORD dwSize;
    int nChannel;     
    int nWindowID;    
    NET_RECT stuRect; 
} NET_IN_WINDOW_REGION_ENLARGE;
typedef struct tagNET_OUT_WINDOW_REGION_ENLARGE
{
    DWORD dwSize;
} NET_OUT_WINDOW_REGION_ENLARGE;
typedef struct tagNET_IN_WINDOW_ENLARGE_REDUCTION
{
    DWORD dwSize;
    int nChannel;  
    int nWindowID; 
} NET_IN_WINDOW_ENLARGE_REDUCTION;
typedef struct tagNET_OUT_WINDOW_ENLARGE_REDUCTION
{
    DWORD dwSize;
} NET_OUT_WINDOW_ENLARGE_REDUCTION;
typedef enum tagEM_MOUSE_OPREATE_TYPE
{
    EM_MOUSE_OPREATE_LEFT_PRESS = 1, 
    EM_MOUSE_OPREATE_LEFT_RELEASE,   
    EM_MOUSE_OPREATE_RIGHT_PRESS,    
    EM_MOUSE_OPREATE_RIGHT_RELEASE,  
    EM_MOUSE_OPREATE_MOUSE_MOVE,     
    EM_MOUSE_OPREATE_MOUSE_SCROLL,   
} EM_MOUSE_OPREATE_TYPE;
typedef enum tagEM_MOUSE_FLAG_TYPE
{
    EM_MOUSE_FLAG_LEFT = 0, 
    EM_MOUSE_FLAG_RIGHT,    
} EM_MOUSE_FLAG_TYPE;
typedef struct tagNET_IN_WINDOW_ONBUTTON_ACTION
{
    DWORD dwSize;
    int nChannel;                        
    int nWindowID;                       
    EM_MOUSE_OPREATE_TYPE emOpreateType; 
    EM_MOUSE_FLAG_TYPE emMouseFlag;      
    int nZDelta;                         
    DH_POINT stuMousePoint;              
} NET_IN_WINDOW_ONBUTTON_ACTION;
typedef struct tagNET_OUT_WINDOW_ONBUTTON_ACTION
{
    DWORD dwSize;
} NET_OUT_WINDOW_ONBUTTON_ACTION;
typedef enum tagEM_WINDOW_ANNOTATION_STATE_TYPE
{
    EM_ANNOTATION_STATE_TYPE_UNKNOWN,  
    EM_ANNOTATION_STATE_TYPE_START,    
    EM_ANNOTATION_STATE_TYPE_CONTINUE, 
    EM_ANNOTATION_STATE_TYPE_END,      
} EM_WINDOWS_ANNOTATION_STATE_TYPE;
typedef struct tagNET_IN_WINIDOW_SET_ANNOTATION
{
    DWORD dwSize;                                       
    int nChannel;                                       
    int nWindowID;                                      
    NET_POINT stuAnnotationPoint;                       
    EM_WINDOWS_ANNOTATION_STATE_TYPE emAnnotationState; 
    int nAnnotationThickness;                           
    NET_COLOR_RGBA stuAnnotationColor;                  
} NET_IN_WINDOW_SET_ANNOTATION;
typedef struct tagNET_OUT_WINDOW_SET_ANNOTATION
{
    DWORD dwSize; 
} NET_OUT_WINDOW_SET_ANNOTATION;
typedef struct tagNET_IN_WINDOW_CLEAR_ANNOTATION
{
    DWORD dwSize;       
    int nChannel;       
    int nWindowID;      
    BYTE byReserved[4]; 
} NET_IN_WINDOW_CLEAR_ANNOTATION;
typedef struct tagNET_OUT_WINDOW_CLEAR_ANNOTATION
{
    DWORD dwSize; 
} NET_OUT_WINDOW_CLEAR_ANNOTATION;
typedef struct tagNET_CB_RECORD_INFO
{
    DWORD dwSize;
    int nChannel;              
    char szFileName[MAX_PATH]; 
    DWORD dwType;              
    DWORD dwState;             
} NET_CB_RECORD_INFO;
typedef void(CALLBACK* fAttachRecordInfoCB)(LLONG lLoginID, LLONG lAttachHandle, NET_CB_RECORD_INFO* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RECORD_INFO
{
    DWORD dwSize;
    int nInterval;                          
    int nDelay;                             
    fAttachRecordInfoCB cbAttachRecordInfo; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_RECORD_INFO;
typedef struct tagNET_OUT_ATTACH_RECORD_INFO
{
    DWORD dwSize;
} NET_OUT_ATTACH_RECORD_INFO;
typedef void(CALLBACK* fPTZStatusProcCallBack)(LLONG lLoginID, LLONG lAttachHandle, void* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_PTZ_STATUS_PROC
{
    DWORD dwSize;
    int nChannel;                           
    fPTZStatusProcCallBack cbPTZStatusProc; 
    LDWORD dwUser;                          
} NET_IN_PTZ_STATUS_PROC;
typedef struct tagNET_OUT_PTZ_STATUS_PROC
{
    DWORD dwSize;
} NET_OUT_PTZ_STATUS_PROC;
typedef struct tagDH_OUT_PTZ_VIEW_RANGE_STATUS
{
    DWORD dwSize;
    double dbDistance; 
    int nAngelH;       
    int nAzimuthH;     
    int nInclinationH; 
    int nAngelV;       
    int nAzimuthV;     
} DH_OUT_PTZ_VIEW_RANGE_STATUS;
typedef void(CALLBACK* fViewRangeStateCallBack)(LLONG lLoginID, LLONG lAttachHandle, DH_OUT_PTZ_VIEW_RANGE_STATUS* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_VIEW_RANGE_STATE
{
    DWORD dwSize;
    int nChannel;                        
    fViewRangeStateCallBack cbViewRange; 
    LDWORD dwUser;                       
} NET_IN_VIEW_RANGE_STATE;
typedef struct tagNET_OUT_VIEW_RANGE_STATE
{
    DWORD dwSize;
} NET_OUT_VIEW_RANGE_STATE;
typedef struct tagNET_WEATHER_INFO
{
    float fWindSpeed;      
    float fTemperature;    
    float fHumidity;       
    unsigned int nLight;   
    float fWindDirection;  
    float fAirPressure;    
    int nRainfall;         
    BYTE byReserved[2044]; 
} NET_WEATHER_INFO;
typedef void(CALLBACK* fWeatherInfoCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_WEATHER_INFO* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_WEATHER_INFO
{
    DWORD dwSize;
    int nChannel;                       
    fWeatherInfoCallBack cbWeatherInfo; 
    LDWORD dwUser;                      
} NET_IN_WEATHER_INFO;
typedef struct tagNET_OUT_WEATHER_INFO
{
    DWORD dwSize;
} NET_OUT_WEATHER_INFO;
typedef struct tagNET_IN_SET_VIEW_RANGE_BY_OBJECT
{
    DWORD dwSize;
    int nChannel;     
    int nDistance;    
    int nWidth;       
    int nScreenRatio; 
} NET_IN_SET_VIEW_RANGE_BY_OBJECT;
typedef struct tagNET_OUT_SET_VIEW_RANGE_BY_OBJECT
{
    DWORD dwSize;
} NET_OUT_SET_VIEW_RANGE_BY_OBJECT;
typedef struct tagNET_IN_SET_VIEW_RANGE_BY_GPS
{
    DWORD dwSize;
    int nChannel;      
    double dLongitude; 
    double dLatitude;  
} NET_IN_SET_VIEW_RANGE_BY_GPS;
typedef struct tagNET_OUT_SET_VIEW_RANGE_BY_GPS
{
    DWORD dwSize;
} NET_OUT_SET_VIEW_RANGE_BY_GPS;
typedef struct tagPTZ_VIEW_RANGE_INFO
{
    int nStructSize;
    int nAzimuthH; 
} PTZ_VIEW_RANGE_INFO;
typedef struct tagDH_OUT_PTZ_ZOOM_INFO
{
    int dwSize;
    int nZoomValue; 
} DH_OUT_PTZ_ZOOM_INFO;
typedef enum tagEM_TRACKSTATUS_TYPE
{
    EM_TRACKSTATUS_TYPE_UNKNOWN = -1, 
    EM_TRACKSTATUS_TYPE_FREE,         
    EM_TRACKSTATUS_TYPE_TRACKING,     
    EM_TRACKSTATUS_TYPE_TRACKINGEND,  
} EM_TRACKSTATUS_TYPE;
typedef struct tagPTZ_GET_TRACKMOVESTATUS_INFO
{
    DWORD dwSize;                      
    char szControlSource[64];          
    EM_TRACKSTATUS_TYPE emTrackStatus; 
} PTZ_GET_TRACKMOVESTATUS_INFO;
typedef struct tagNET_CHN_COUNT_INFO
{
    DWORD dwSize;
    int nMaxTotal;  
    int nCurTotal;  
    int nMaxLocal;  
    int nCurLocal;  
    int nMaxRemote; 
    int nCurRemote; 
} NET_CHN_COUNT_INFO;
typedef struct tagNET_DEV_CHN_COUNT_INFO
{
    DWORD dwSize;
    NET_CHN_COUNT_INFO stuVideoIn;  
    NET_CHN_COUNT_INFO stuVideoOut; 
} NET_DEV_CHN_COUNT_INFO;
typedef struct tagNET_RECORD_STATE_DETAIL
{
    DWORD dwSize;
    BOOL bMainStream;   
    BOOL bExtraStream1; 
    BOOL bExtraStream2; 
    BOOL bExtraStream3; 
} NET_RECORD_STATE_DETAIL;
typedef struct tagPTZ_Focus_Absolutely
{
    DWORD dwValue;      
    DWORD dwSpeed;      
    char szReserve[64]; 
} PTZ_FOCUS_ABSOLUTELY;
typedef struct tagNET_IN_PLAY_AUDIO_FILE
{
    DWORD dwSize;
    const char* pszFilePath; 
    DWORD dwOutput;          
} NET_IN_PLAY_AUDIO_FILE;
typedef struct tagNET_OUT_PLAY_FILE_STREAM
{
    DWORD dwSize;
} NET_OUT_PLAY_AUDIO_FILE;
typedef struct tagNET_DEV_RTSPURL_LIST
{
    DWORD dwSize;
    int nChannelID;                                 
    int nUrlNum;                                    
    char szURLList[DH_MAX_URL_NUM][DH_MAX_URL_LEN]; 
} NET_DEV_RTSPURL_LIST;
typedef struct tagPTZ_Control_SectorScan
{
    int nBeginAngle;    
    int nEndAngle;      
    int nSpeed;         
    char szReserve[64]; 
} PTZ_CONTROL_SECTORSCAN;
typedef struct tagPTZ_CONTROL_SET_FISHEYE_EPTZ
{
    DWORD dwSize;     
    DWORD dwWindowID; 
    DWORD dwCommand;  
    DWORD dwParam1;   
    DWORD dwParam2;   
    DWORD dwParam3;   
    DWORD dwParam4;   
} PTZ_CONTROL_SET_FISHEYE_EPTZ;
typedef struct tagPTZ_CONTROL_SET_TRACK_CONTROL
{
    DWORD dwSize;      
    DWORD dwChannelID; 
    DWORD dwCommand;   
    DWORD dwParam1;    
    DWORD dwParam2;    
    DWORD dwParam3;    
} PTZ_CONTROL_SET_TRACK_CONTROL;
typedef enum tagNET_AREASCAN_EPTZ_CMD
{
    NET_AREASCAN_EPTZ_CMD_SET,   
    NET_AREASCAN_EPTZ_CMD_DEL,   
    NET_AREASCAN_EPTZ_CMD_GET,   
    NET_AREASCAN_EPTZ_CMD_START, 
    NET_AREASCAN_EPTZ_CMD_STOP,  
} NET_AREASCAN_EPTZ_CMD;
typedef struct tagPTZ_CONTROL_SET_AREA_SCAN_LIMIT
{
    DWORD dwSize;         
    int nChannelID;       
    int nIndex;           
    char szLimitMode[16]; 
    int nZoom;            
} PTZ_CONTROL_SET_AREA_SCAN_LIMIT;
typedef struct tagPTZ_CONTROL_DEL_AREA_SCAN
{
    DWORD dwSize;   
    int nChannelID; 
    int nIndex;     
} PTZ_CONTROL_DEL_AREA_SCAN;
typedef struct tagPTZ_CONTROL_GET_AREA_SCAN_IN
{
    DWORD dwSize;   
    int nChannelID; 
    int nSize;      
} PTZ_CONTROL_GET_AREA_SCAN_IN;
typedef struct tagNET_AREASCAN_STATE
{
    BOOL bValid;        
    BYTE Reserved[128]; 
} NET_AREASCAN_STATE;
typedef struct tagPTZ_CONTROL_GET_AREA_SCAN_OUT
{
    DWORD dwSize;                                         
    UINT nValidNum;                                       
    NET_AREASCAN_STATE stuStateInfo[DH_COMMON_STRING_32]; 
} PTZ_CONTROL_GET_AREA_SCAN_OUT;
typedef struct tagPTZ_CONTROL_START_AREA_SCAN
{
    DWORD dwSize;    
    int nChannelID;  
    int nIndex;      
    int nSpeed;      
    int nTitleAngle; 
} PTZ_CONTROL_START_AREA_SCAN;
typedef struct tagPTZ_CONTROL_STOP_AREA_SCAN
{
    DWORD dwSize;   
    int nChannelID; 
    int nIndex;     
} PTZ_CONTROL_STOP_AREA_SCAN;
typedef enum tagEM_NET_FOCUS_REGION_MODE
{
    EM_NET_FOCUS_REGION_MODE_GLOBAL,       
    EM_NET_FOCUS_REGION_MODE_AUTO,         
    EM_NET_FOCUS_REGION_MODE_INROIREGION,  
    EM_NET_FOCUS_REGION_MODE_OUTROIREGION, 
} EM_NET_FOCUS_REGION_MODE;
typedef struct tagPTZ_CONTROL_SET_FOCUS_REGION
{
    DWORD dwSize;                    
    EM_NET_FOCUS_REGION_MODE emMode; 
    NET_RECT stuRect;                
} PTZ_CONTROL_SET_FOCUS_REGION;
typedef struct tagNET_TRANSMIT_EXT_INFO
{
    DWORD dwSize;
    unsigned char* pInBinBuf; 
    DWORD dwInBinBufSize;     
    int nJsonDataLen;         
    int nBinDataLen;          
} NET_TRANSMIT_EXT_INFO;
typedef struct tagNET_CB_CANDATA
{
    DWORD dwSize;
    int nDataLength;             
    unsigned char* pDataContent; 
} NET_CB_CANDATA;
typedef void(CALLBACK* fAttachCANCB)(LLONG lLoginID, LLONG lAttachHandle, NET_CB_CANDATA* pBuf, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CAN
{
    DWORD dwSize;
    int nChannel;             
    fAttachCANCB cbAttachCAN; 
    LDWORD dwUser;            
} NET_IN_ATTACH_CAN;
typedef struct tagNET_OUT_ATTACH_CAN
{
    DWORD dwSize;
} NET_OUT_ATTACH_CAN;
typedef struct tagNET_IN_SEND_CAN
{
    DWORD dwSize;
    int nChannel;             
    int nSendDataLength;      
    unsigned char* pSendData; 
} NET_IN_SEND_CAN;
typedef struct tagNET_OUT_SEND_CAN
{
    DWORD dwSize;
} NET_OUT_SEND_CAN;
typedef struct tagNET_CB_DEVCOMMDATA
{
    DWORD dwSize;
    int nDataLength;             
    unsigned char* pDataContent; 
} NET_CB_DEVCOMMDATA;
typedef void(CALLBACK* fAttachDevCommCB)(LLONG lLoginID, LLONG lAttachHandle, NET_CB_DEVCOMMDATA* pBuf, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_DEVCOMM
{
    DWORD dwSize;
    int nChannel;                     
    fAttachDevCommCB cbAttachDevComm; 
    LDWORD dwUser;                    
} NET_IN_ATTACH_DEVCOMM;
typedef struct tagNET_OUT_ATTACH_DEVCOMM
{
    DWORD dwSize;
} NET_OUT_ATTACH_DEVCOMM;
typedef struct tagNET_GET_COMM_COUNT
{
    DWORD dwSize;
    int nChannelCout; 
} NET_GET_COMM_COUNT;
typedef struct tagNET_IN_EXCHANGEDATA
{
    DWORD dwSize;
    int nChannel;             
    BOOL bFlag;               
    int nCollectTime;         
    int nSendDataLength;      
    unsigned char* pSendData; 
} NET_IN_EXCHANGEDATA;
typedef struct tagNET_OUT_EXCHANGEDATA
{
    DWORD dwSize;
} NET_OUT_EXCHANGEDATA;
typedef struct tagNET_PTZ_PRESET
{
    int nIndex;                       
    char szName[PTZ_PRESET_NAME_LEN]; 
    int nPosition[3];                 
    BOOL bSetNameEx;                  
    char szNameEx[256];               
    char szReserve[52];               
} NET_PTZ_PRESET;
typedef struct tagNET_PTZ_PRESET_LIST
{
    DWORD dwSize;
    DWORD dwMaxPresetNum;              
    DWORD dwRetPresetNum;              
    NET_PTZ_PRESET* pstuPtzPorsetList; 
} NET_PTZ_PRESET_LIST;
typedef struct tagDEV_EVENT_TRAFFIC_RESTRICTED_PLATE
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    int nLane;                                       
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nMark;                                       
    int nFrameSequence;                              
    int nSource;                                     
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    NET_GPS_INFO stuGPSInfo;                         
    BYTE byReserved[984];                            
    EVENT_COMM_INFO stCommInfo;                      
} DEV_EVENT_TRAFFIC_RESTRICTED_PLATE;
typedef struct tagDEV_EVENT_TRAFFIC_OVERSTOPLINE
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    int nLane;                                       
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nMark;                                       
    int nFrameSequence;                              
    int nSource;                                     
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    int nSpeed;                                      
    NET_GPS_INFO stuGPSInfo;                         
    BYTE byReserved[984];                            
    EVENT_COMM_INFO stCommInfo;                      
    BOOL bHasNonMotor;                               
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_TRAFFIC_OVERSTOPLINE;
typedef struct tagDEV_EVENT_TRAFFIC_WITHOUT_SAFEBELT
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nLane;                                       
    int nMark;                                       
    int nFrameSequence;                              
    int nSource;                                     
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    int nSpeed;                                      
    NET_SAFEBELT_STATE emMainSeat;                   
    NET_SAFEBELT_STATE emSlaveSeat;                  
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    NET_GPS_INFO stuGPSInfo;                         
    BYTE byReserved[728];                            
    EVENT_COMM_INFO stCommInfo;                      
    char szVideoPath[256];                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} DEV_EVENT_TRAFFIC_WITHOUT_SAFEBELT;
typedef struct tagDEV_EVENT_TRAFFIC_DRIVER_SMOKING
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    DH_EVENT_FILE_INFO stuFileInfo;                   
    int nLane;                                        
    int nMark;                                        
    int nFrameSequence;                               
    int nSource;                                      
    DH_MSG_OBJECT stuObject;                          
    DH_MSG_OBJECT stuVehicle;                         
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar;  
    int nSpeed;                                       
    DWORD dwSnapFlagMask;                             
    DH_RESOLUTION_INFO stuResolution;                 
    EVENT_COMM_INFO stCommInfo;                       
    NET_GPS_INFO stuGPSInfo;                          
    char szDriverID[32];                              
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    BYTE byReserved[952];                             
} DEV_EVENT_TRAFFIC_DRIVER_SMOKING;
typedef struct tagDEV_EVENT_TRAFFIC_DRIVER_CALLING
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    DH_EVENT_FILE_INFO stuFileInfo;                   
    int nLane;                                        
    int nMark;                                        
    int nFrameSequence;                               
    int nSource;                                      
    DH_MSG_OBJECT stuObject;                          
    DH_MSG_OBJECT stuVehicle;                         
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar;  
    int nSpeed;                                       
    DWORD dwSnapFlagMask;                             
    DH_RESOLUTION_INFO stuResolution;                 
    EVENT_COMM_INFO stCommInfo;                       
    NET_GPS_INFO stuGPSInfo;                          
    char szDriverID[32];                              
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    BYTE byReserved[952];                             
} DEV_EVENT_TRAFFIC_DRIVER_CALLING;
typedef struct tagDEV_EVENT_TRAFFIC_OBJECT_DETECTION
{
    int nChannelID;                 
    char szName[128];               
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];             
    BYTE byImageIndex;              
    DWORD dwSnapFlagMask;           
    int nSourceIndex;               
    char szSourceDevice[MAX_PATH];  
    unsigned int nOccurrenceCount;  
    int nObjectNum;                             
    DH_MSG_OBJECT_EX* pstObjectInfo;            
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    BYTE byReserved2[892];                      
} DEV_EVENT_TRAFFIC_OBJECT_DETECTION;
typedef struct tagALARM_POWER_ABNORMAL_INFO
{
    DWORD dwSize;
    int nChannelID;                       
    NET_TIME stuTime;                     
    DWORD dwAction;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_POWER_ABNORMAL_INFO;
typedef enum tagNET_THREE_STATE_ENABLE
{
    EM_STATE_ENABLE_INVALID = 0, 
    EM_STATE_ENABLE_OFF,         
    EM_STATE_ENABLE_ON,          
} NET_THREE_STATE_ENABLE;
typedef struct tagCONFIG_ENABLE_CHANGE_INFO
{
    DWORD dwSize;
    int nChannelID;                        
    NET_THREE_STATE_ENABLE emMotionDetect; 
    NET_THREE_STATE_ENABLE emLossDetect;   
    NET_THREE_STATE_ENABLE emBlindDetect;  
    NET_THREE_STATE_ENABLE emAlarmLocal;   
    NET_EVENT_INFO_EXTEND stuEventInfoEx;  
} ALARM_CONFIG_ENABLE_CHANGE_INFO;
typedef enum tagEM_ITC_HWS000_IT_TYPE
{
    EM_ITC_HWS000_IT_TYPE_UNKNOWN,    
    EM_ITC_HWS000_IT_TYPE_HIGH_SPEED, 
    EM_ITC_HWS000_IT_TYPE_LOW_SPEED,  
} EM_ITC_HWS000_IT_TYPE;
typedef enum tagEM_ITC_HWS000_RS_TYPE
{
    EM_ITC_HWS000_RS_TYPE_UNKNOWN, 
    EM_ITC_HWS000_RS_TYPE_ONLINE,  
    EM_ITC_HWS000_RS_TYPE_OFFLINE, 
} EM_ITC_HWS000_RS_TYPE;
typedef enum tagEM_ITC_HWS000_FS_TYPE
{
    EM_ITC_HWS000_FS_TYPE_UNKNOWN, 
    EM_ITC_HWS000_FS_TYPE_ONLINE,  
    EM_ITC_HWS000_FS_TYPE_OFFLINE, 
} EM_ITC_HWS000_FS_TYPE;
typedef struct tagALARM_ITC_HWS000
{
    DWORD dwSize;
    EM_ITC_HWS000_IT_TYPE emItType;       
    EM_ITC_HWS000_RS_TYPE emRsType;       
    EM_ITC_HWS000_FS_TYPE emFsType;       
    int nOcNum;                           
    int nLcNum;                           
    int nAcNum;                           
    int nFcNum;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_ITC_HWS000;
typedef enum tagEM_CAR_COME_STATUS
{
    EM_CAR_COME_STATUS_UNKNOWN,  
    EM_CAR_COME_STATUS_COME_IN,  
    EM_CAR_COME_STATUS_COME_OUT, 
} EM_CAR_COME_STATUS;
typedef struct tagALARM_TELEPHONE_CHECK_INFO
{
    DWORD dwSize;
    EM_CAR_COME_STATUS emCarStatus; 
    char szTelephoneNum[32];        
} ALARM_TELEPHONE_CHECK_INFO;
#define UPDATE_VERSION_LEN 64
typedef struct tagDHDEV_UPGRADE_STATE_INFO
{
    int nState; 
    char szOldVersion[UPDATE_VERSION_LEN]; 
    char szNewVersion[UPDATE_VERSION_LEN]; 
    DWORD dwProgress;                      
    int reserved[256];                     
} DHDEV_UPGRADE_STATE_INFO;
typedef enum tagNET_CROSSLINE_DIRECTION_INFO
{
    EM_CROSSLINE_DIRECTION_UNKNOW = 0,
    EM_CROSSLINE_DIRECTION_LEFT2RIGHT, 
    EM_CROSSLINE_DIRECTION_RIGHT2LEFT, 
    EM_CROSSLINE_DIRECTION_ANY,
} NET_CROSSLINE_DIRECTION_INFO;
typedef struct tagALARM_EVENT_CROSSLINE_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    NET_CROSSLINE_DIRECTION_INFO emCrossDirection;   
    int nOccurrenceCount;                            
    int nLevel;                                      
    BOOL bIsObjectInfo;                              
    DH_MSG_OBJECT stuObject;                         
    int nRetObjectNum;                               
    DH_MSG_OBJECT stuObjects[MAX_TARGET_OBJECT_NUM]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
} ALARM_EVENT_CROSSLINE_INFO;
typedef struct tagALARM_MOVE_DETECTION_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nCount;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_MOVE_DETECTION_INFO;
typedef struct tagALARM_WANDERDETECTION_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nCount;                           
    int nLevel;                           
    short nPreserID;                      
    char szPresetName[64];                
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[958];                 
} ALARM_WANDERDETECTION_INFO;
typedef struct tagALARM_CROSSFENCEDETECTION_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_CROSSLINE_DIRECTION_INFO emCrossDirection; 
    int nCount;                                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx;          
    BYTE byReserved[1024];                         
} ALARM_CROSSFENCEDETECTION_INFO;
typedef struct tagALARM_TRAFFIC_PEDESTRIAN_RUN_REDLIGHT_DETECTION_INFO
{
    int nAction;           
    int nChannelID;        
    double dbPTS;          
    NET_TIME_EX stuTime;   
    int nEventID;          
    BYTE byReserved[1024]; 
} ALARM_TRAFFIC_PEDESTRIAN_RUN_REDLIGHT_DETECTION_INFO;
typedef struct tagNET_ALARM_FIGHTDETECTION
{
    int nAction;                          
    int nChannelID;                       
    double dbPTS;                         
    NET_TIME_EX stuTime;                  
    NET_EXTENSION_INFO stuExtensionInfo;  
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[892];                 
} NET_ALARM_FIGHTDETECTION;
#define VTO_BUILDING_LEN 8
#define VTO_UNIT_LEN 8
typedef struct tagNET_ALARM_ACCESSIDENTIFY_INFO
{
    NET_TIME_EX stuTime;                  
    char szVTOBuilding[VTO_BUILDING_LEN]; 
    char szVTOUnit[VTO_UNIT_LEN];         
    BYTE byReserved[1024];                
} NET_ALARM_ACCESSIDENTIFY_INFO;
typedef struct tagNET_ALARM_CALL_NO_ANSWERED_INFO
{
    NET_TIME_EX stuTime;            
    char szCallID[MAX_CALL_ID_LEN]; 
    int nAction;                    
    int nChannelID;                 
    BYTE byReserved[1016];          
} NET_ALARM_CALL_NO_ANSWERED_INFO;
typedef struct tagALARM_PARKINGDETECTION_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nCount;                   
    char szCustomParkNo[64];      
    DH_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;         
    BYTE byReserved[876];         
} ALARM_PARKINGDETECTION_INFO;
typedef struct tagALARM_RIOTERDETECTION_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nCount;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_RIOTERDETECTION_INFO;
typedef struct tagALARM_TRAFFIC_PARKING_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    int nLane;                            
    BYTE byReserved[1020];                
} ALARM_TRAFFIC_PARKING_INFO;
typedef struct tagALARM_TRAFFIC_JAM_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} ALARM_TRAFFIC_JAM_INFO;
typedef struct tagALARM_TRAFFIC_PEDESTRAIN_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} ALARM_TRAFFIC_PEDESTRAIN_INFO;
typedef struct tagALARM_TRAFFIC_THROW_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    BYTE byReserved[1024]; 
} ALARM_TRAFFIC_THROW_INFO;
typedef struct tagALARM_TRAFFIC_RETROGRADE_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} ALARM_TRAFFIC_RETROGRADE_INFO;
typedef struct tagALARM_TRAFFIC_OVERSPEED_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nSpeed;                           
    int nSpeedUpperLimit;                 
    int nSpeedLowerLimit;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    int nLane;                            
    BYTE byReserved[1020];                
} ALARM_TRAFFIC_OVERSPEED_INFO;
typedef struct tagALARM_TRAFFIC_UNDERSPEED_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nSpeed;            
    int nSpeedUpperLimit;  
    int nSpeedLowerLimit;  
    int nLane;             
    BYTE byReserved[1020]; 
} ALARM_TRAFFIC_UNDERSPEED_INFO;
typedef struct tagNET_ALARM_TRAFFIC_ROADALERT_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_ROADALERT_INFO;
typedef struct tagNET_ALARM_TRAFFIC_CROSSLANE_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_CROSSLANE_INFO;
typedef struct tagNET_ALARM_TRAFFIC_OVERYELLOWLINE_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_OVERYELLOWLINE_INFO;
typedef struct tagNET_ALARM_TRAFFIC_ACCIDENT_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    unsigned int nLane;  
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_ACCIDENT_INFO;
typedef struct tagNET_ALARM_TRAFFIC_ROADBLOCK_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    unsigned int nLane;  
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_ROADBLOCK_INFO;
typedef struct tagNET_ALARM_TRAFFIC_ROADCONSTRUCTION_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    unsigned int nLane;  
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_ROADCONSTRUCTION_INFO;
typedef struct tagNET_ALARM_TRAFFIC_CARDISTANCESHORT_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_CARDISTANCESHORT_INFO;
typedef struct tagNET_ALARM_TRAFFIC_VEHICLERACING_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nLane;           
    BYTE byReserved[1020]; 
} NET_ALARM_TRAFFIC_VEHICLERACING_INFO;
typedef struct tagNET_ALARM_STORAGE_OVERLOAD_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    char szName[32];       
    char szGroup[128][32]; 
    int nGroupNum;         
    char byReserved[1020]; 
} NET_ALARM_STORAGE_OVERLOAD_INFO;
typedef struct tagALARM_RETROGRADE_DETECTION_INFO
{
    int nAction;                          
    int nChannelID;                       
    double dbPTS;                         
    NET_TIME_EX stuTime;                  
    int nEventID;                         
    int nCount;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_RETROGRADE_DETECTION_INFO;
typedef struct tagALARM_AIO_APP_CONFIG_EVENT_INFO
{
    NET_TIME_EX stuTime;               
    char szAddress[DH_MAX_IPADDR_LEN]; 
    BYTE byReserved[1024];             
} ALARM_AIO_APP_CONFIG_EVENT_INFO;
typedef struct tagALARM_BOX_INFO
{
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nAlarmBoxIndex;    
    int nAlarmIndex;       
    BYTE byReserved[1024]; 
} ALARM_BOX_INFO;
typedef struct tagALARM_UNDER_VOLTAGE_INFO
{
    int nAction;                          
    int nChannelID;                       
    double dbPTS;                         
    NET_TIME_EX stuTime;                  
    int nEventID;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[512];                 
} ALARM_UNDER_VOLTAGE_INFO;
typedef struct tagALARM_OVER_VOLTAGE_INFO
{
    int nAction;          
    int nChannelID;       
    double dbPTS;         
    NET_TIME_EX stuTime;  
    int nEventID;         
    BYTE byReserved[512]; 
} ALARM_OVER_VOLTAGE_INFO;
typedef struct tagALARM_TIRED_PHYSIOLOGICAL
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[512];             
} ALARM_TIRED_PHYSIOLOGICAL;
typedef struct tagALARM_CALLING_WHEN_DRIVING
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[512];             
} ALARM_CALLING_WHEN_DRIVING;
typedef struct tagALARM_TRAFFIC_DRIVER_SMOKING
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[512];             
} ALARM_TRAFFIC_DRIVER_SMOKING;
typedef struct tagALARM_TRAFFIC_DRIVER_LOWER_HEAD
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[512];             
} ALARM_TRAFFIC_DRIVER_LOWER_HEAD;
typedef struct tagALARM_TRAFFIC_DRIVER_LOOK_AROUND
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[512];             
} ALARM_TRAFFIC_DRIVER_LOOK_AROUND;
typedef struct tagALARM_TRAFFIC_DRIVER_LEAVE_POST
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[512];             
} ALARM_TRAFFIC_DRIVER_LEAVE_POST;
typedef struct tagALARM_TRAFFIC_DRIVER_YAWN
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[512];             
} ALARM_TRAFFIC_DRIVER_YAWN;
typedef enum tagEM_VEHICLE_HEAD_DIRECTION
{
    EM_VEHICLE_HEAD_DIRECTION_UNKNOWN, 
    EM_VEHICLE_HEAD_DIRECTION_LEFT,    
    EM_VEHICLE_HEAD_DIRECTION_MIDDLE,  
    EM_VEHICLE_HEAD_DIRECTION_RIGHT,   
} EM_VEHICLE_HEAD_DIRECTION;
typedef enum tagEM_VEHICLE_POSITION
{
    EM_VEHICLE_POSITION_UNKNOWN, 
    EM_VEHICLE_POSITION_HEAD,    
    EM_VEHICLE_POSITION_TAIL,    
} EM_VEHICLE_POSITION;
typedef enum tagEM_VEHICLE_DRIVING_DIRECTION
{
    EM_VEHICLE_DRIVING_DIRECTION_UNKNOWN, 
    EM_VEHICLE_DRIVING_DIRECTION_OBVERSE, 
    EM_VEHICLE_DRIVING_DIRECTION_REVERSE, 
} EM_VEHICLE_DRIVING_DIRECTION;
typedef struct tagALARM_TRAFFIC_VEHICLE_POSITION
{
    int nAction;                                      
    char szEventName[DH_COMMON_STRING_128];           
    unsigned int nObjectID;                           
    char szPlateNumber[DH_COMMON_STRING_128];         
    int nPosition;                                    
    BYTE byOpenStrobeState;                           
    UINT nPlateConfidence;                            
    char szPlateColor[32];                            
    char szPlateType[32];                             
    UINT nVehicleConfidence;                          
    EM_VEHICLE_HEAD_DIRECTION emVehicleHeadDirection; 
    EM_VEHICLE_POSITION emVehiclePosition;            
    EM_VEHICLE_DRIVING_DIRECTION emDrivingDirection;  
    BYTE byReserved[427];                             
} ALARM_TRAFFIC_VEHICLE_POSITION;
typedef struct tagALARM_MPTBASE_CONNECT
{
    int nAction;          
    BYTE byReserved[512]; 
} ALARM_MPTBASE_CONNECT;
typedef enum tagEM_SHUTDOWN_REASON_TYPE
{
    EM_SHUTDOWN_REASON_UNKNOWN,    
    EM_SHUTDOWN_REASON_LOWERPOWER, 
    EM_SHUTDOWN_REASON_LOSTPOWER,  
    EM_SHUTDOWN_REASON_CRASH,      
} EM_SHUTDOWN_REASON_TYPE;
typedef struct tagALARM_CGIRECORD
{
    int nAction;              
    int nChannelID;           
    double dbPTS;             
    NET_TIME_EX stuTime;      
    int nEventID;             
    NET_TIME_EX stuStartTime; 
    NET_TIME_EX stuStopTime;  
    BYTE byReserved[512];     
} ALARM_CGIRECORD;
typedef struct tagALARM_BATTERY_TEMPERATURE_INFO
{
    int nBatteryIndex;     
    NET_TIME_EX stuTime;   
    float fTemperature;    
    BYTE byReserved[1024]; 
} ALARM_BATTERY_TEMPERATURE_INFO;
typedef struct tagALARM_TIRE_PRESSURE_INFO
{
    int nAction;         
    int nEventID;        
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nTireIndex;         
    int nAlarmType;         
    float fUpperLimit;      
    float fLowerLimit;      
    float fCurrentPressure; 
    BYTE byReserved[512];   
} ALARM_TIRE_PRESSURE_INFO;
typedef struct tagALARM_ACCESS_CTL_BLACKLIST
{
    int nChannel;                           
    char szAccessName[DH_COMMON_STRING_64]; 
    char szUserID[DH_COMMON_STRING_32];     
    char szCardNo[DH_COMMON_STRING_64];     
    char szCitizenIDNo[20];                 
    NET_TIME_EX UTC;                        
    BOOL bRealUTC;                          
    NET_TIME_EX RealUTC;                    
    BYTE byReserved[416];                   
} ALARM_ACCESS_CTL_BLACKLIST;
typedef struct tagALARM_ACCESS_CTL_UNAUTHORIZED_MALICIOUSWIP
{
    int nChannel;                         
    char szDoorName[DH_MAX_DOORNAME_LEN]; 
    char szUserID[MAX_COMMON_STRING_16];  
    char szCardNo[DH_COMMON_STRING_64];   
    NET_TIME_EX stuTime;                  
    BYTE byReserved[476];
} ALARM_ACCESS_CTL_UNAUTHORIZED_MALICIOUSWIP;
typedef struct tagALARM_USERLOCK_INFO
{
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    char szUserName[MAX_USER_NAME_LEN];              
    char szGroup[MAX_GROUP_LEN];                     
    char szIllegalLoginIP[MAX_ILLEGAL_LOGIN_IP_LEN]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE byReserved[1024];                           
} ALARM_USERLOCK_INFO;
typedef struct tagALARM_DOWNLOAD_REMOTE_FILE_INFO
{
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    char szURL[DH_COMMON_STRING_256]; 
    UINT nProgress;                   
    UINT nVelocity;                   
    BYTE byReserved[1016];            
} ALARM_DOWNLOAD_REMOTE_FILE_INFO;
typedef struct tagNET_CONFLICT_INFO
{
    char szSlaveMac[DH_COMMON_STRING_32]; 
    int nSlaveID;                         
    int nSlavePort;                       
    BYTE byReserved[64];                  
} NET_CONFLICT_INFO;
#define MAX_COUNT_CONFLICT 16
typedef struct tagALARM_VTH_CONFLICT_INFO
{
    int nAction;         
    int nEventID;        
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nConflictNum;                                     
    NET_CONFLICT_INFO stConflictInfo[MAX_COUNT_CONFLICT]; 
    char szVTNCNum[DH_COMMON_STRING_32];                  
    char szVTHNum[DH_COMMON_STRING_32];                   
    BYTE byReserved[512];                                 
} ALARM_VTH_CONFLICT_INFO;
typedef struct tagALARM_LATEST_SHUTDOWN
{
    EM_SHUTDOWN_REASON_TYPE emShutdownReason; 
    BYTE byReserved[512];                     
} ALARM_LATEST_SHUTDOWN;
typedef struct tagNET_EMERGENCY_FILE_INFO
{
    char szUniqueID[128];                   
    char szOriginalDeviceID[128];           
    EM_MOBILE_ENFORCE_FORMAT emFormat;      
    EM_MOBILE_ENFORCE_FILE_TYPE emFileType; 
    char szFileName[260];                   
    char szFilePath[260];                   
    NET_TIME stStartTime;                   
    NET_TIME stEndTime;                     
    UINT nLength;                           
    NET_TIME stuStartTimeRealUTC;           
    NET_TIME stuEndTimeRealUTC;             
    BYTE byReserved[448];                   
} NET_EMERGENCY_FILE_INFO;
typedef struct tagALARM_EMERGENCY_FILE_UPLOAD
{
    NET_EMERGENCY_FILE_INFO stFileInfo[50];
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[512];                 
} ALARM_EMERGENCY_FILE_UPLOAD;
typedef struct tagNET_EMERGENCY_CANCEL_FILE_INFO
{
    char szUniqueID[128]; 
    char byReserved[512]; 
} NET_EMERGENCY_CANCEL_FILE_INFO;
typedef struct tagALARM_EMERGENCY_FILE_UPLOAD_CANCEL_INFO
{
    int nAction;         
    int nEventID;        
    double dbPTS;        
    NET_TIME_EX stuTime; 
    UINT nFileNum;                                  
    NET_EMERGENCY_CANCEL_FILE_INFO stuFileList[50]; 
    char byReserved[1024];                          
} ALARM_EMERGENCY_FILE_UPLOAD_CANCEL_INFO;
typedef enum tagEM_RECORD_BACKUP_FAILURE_TYPE
{
    EM_RECORD_BACKUP_FAILURE_UNKNOWN,         
    EM_RECORD_BACKUP_FAILURE_RECORD_NO_EXIST, 
    EM_RECORD_BACKUP_FAILURE_LOGIN_FAILED,    
    EM_RECORD_BACKUP_FAILURE_DOWNLOAD_FAILED, 
    EM_RECORD_BACKUP_FAILURE_STORAGE_FAILED,  
    EM_RECORD_BACKUP_FAILURE_DISCONNETED,     
} EM_RECORD_BACKUP_FAILURE_TYPE;
typedef struct tagALARM_RECORD_BACKUP_FAILURE_INFO
{
    NET_TIME_EX stuTime;                    
    UINT nTaskId;                           
    char szDeviceIP[64];                    
    UINT nPort;                             
    UINT nChannel;                          
    UINT nRemoteChannel;                    
    NET_TIME stuBackupStartTime;            
    NET_TIME stuBackupEndTime;              
    ENUM_RECORDBACKUP_FILE_TYPE emFileType; 
    NET_STREAM_TYPE emStreamType;           
    EM_RECORD_BACKUP_FAILURE_TYPE emResson; 
    char reserved[256];                     
} ALARM_RECORD_BACKUP_FAILURE_INFO;
typedef struct tagALARM_COAXIAL_HIGH_TEMPERATURE_INFO
{
    int nChannelID;      
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nAlarmChannel;     
    char szName[128];      
    float fValue;          
    BYTE byReserved[1024]; 
} ALARM_COAXIAL_HIGH_TEMPERATURE_INFO;
typedef struct tagALARM_COAXIAL_LOW_TEMPERATURE_INFO
{
    int nChannelID;      
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nAlarmChannel;     
    char szName[128];      
    float fValue;          
    BYTE byReserved[1024]; 
} ALARM_COAXIAL_LOW_TEMPERATURE_INFO;
typedef struct tagALARM_CHANNEL_RECSHORTAGE_INFO
{
    int nChannelID;        
    int nAction;           
    int nDays;             
    DWORD dwTime;          
    char byReserved[1024]; 
} ALARM_CHANNEL_RECSHORTAGE_INFO;
typedef struct tagALARM_SECURITY_INSPECTOR_OVERTIME_ON_DUTY_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuUTC;    
    char szUserName[128];  
    char szReserved[1024]; 
} ALARM_SECURITY_INSPECTOR_OVERTIME_ON_DUTY_INFO;
typedef struct tagALARM_SECURITY_INSPECTOR_NOT_CONFIRM_PACKAGE_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuUTC;    
    char szUserName[128];  
    char szReserved[1024]; 
} ALARM_SECURITY_INSPECTOR_NOT_CONFIRM_PACKAGE_INFO;
typedef struct tagNET_ALARM_SMOKING_DETECT_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                     
    char szClass[16];                     
    double dbPTS;                         
    NET_TIME_EX stuUTC;                   
    int nEventID;                         
    int nGroupID;                         
    int nCountInGroup;                    
    int nIndexInGroup;                    
    int nDetectRegionNum;                 
    NET_POINT_EX stuDetectRegion[20];     
    DH_MSG_OBJECT stuObject;              
    SCENE_IMAGE_INFO stuSceneImageInfo;   
    char szUserName[32];                  
    UINT nPresetID;                       
    char szReserved[1020];                
} NET_ALARM_SMOKING_DETECT_INFO;
typedef struct tagNET_ALARM_SITE_OVERTIME_ALARM_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    int nDepartureID;         
    int nTerminusID;          
    NET_TIME stuStartTimeUTC; 
    NET_TIME stuEndTimeUTC;   
    UINT nTimeLimit;          
    UINT nDriveTime;          
    char szReserved[1024];    
} NET_ALARM_SITE_OVERTIME_ALARM_INFO;
typedef struct tagNET_ALARM_SMART_SOUND_DETECT_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    UINT nACK;                            
    int nGroupID;                         
    NET_TIME stuStartTime;                
    UINT nEventID;                        
    NET_TIME_EX stuUTC;                   
    double dbPTS;                         
    EM_AUDIO_MUTATION_ALARM_TYPE emType;  
    int nAlarmChannel;                    
    char szName[32];                      
    char szReserved[1024];                
} NET_ALARM_SMART_SOUND_DETECT_INFO;
typedef struct tagNET_ALARM_REQ_WORK_TIME_CALC_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    char szUserID[32];                    
    char szUserName[128];                 
    int nType;                            
    float fOverTime;                      
    NET_TIME stuCurrentTime;              
    NET_TIME stuWorkStartTime;            
    char szReserved[976];                 
} NET_ALARM_REQ_WORK_TIME_CALC_INFO;
typedef struct tagNET_ALARM_XRAY_EMERGENCY_ALARM_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    char szReserved[1024];                
} NET_ALARM_XRAY_EMERGENCY_ALARM_INFO;
typedef struct tagALARM_XRAY_PIP_COMMUNICATION_ABNORMITY_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_XRAY_PIP_COMMUNICATION_ABNORMITY_INFO;
typedef struct tagALARM_XRAY_ACQUISITION_SYSTEM_ABNORMITY_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_XRAY_ACQUISITION_SYSTEM_ABNORMITY_INFO;
typedef struct tagALARM_XRAY_EMERGENCY_STOP_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_XRAY_EMERGENCY_STOP_INFO;
typedef struct tagALARM_XRAY_DETECTOR_PROTECTION_OPEN_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_XRAY_DETECTOR_PROTECTION_OPEN_INFO;
typedef enum tagEM_XRAY_SHELL_OPEN_POSITION
{
    EM_XRAY_SHELL_OPEN_POSITION_UNKNWON = -1, 
    EM_XRAY_SHELL_OPEN_POSITION_INSENSITIVE,  
    EM_XRAY_SHELL_OPEN_POSITION_A_LEFT,       
    EM_XRAY_SHELL_OPEN_POSITION_A_RIGHT,      
    EM_XRAY_SHELL_OPEN_POSITION_B_LEFT,       
    EM_XRAY_SHELL_OPEN_POSITION_B_RIGHT       
} EM_XRAY_SHELL_OPEN_POSITION;
typedef struct tagALARM_XRAY_MACHINE_SHELL_OPEN_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    EM_XRAY_SHELL_OPEN_POSITION nPosition[32]; 
    int nPositionCnt;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;      
    char szReserved[1020];                     
} ALARM_XRAY_MACHINE_SHELL_OPEN_INFO;
typedef struct tagALARM_XRAY_KEYBOARD_ABNORMITY_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} ALARM_XRAY_KEYBOARD_ABNORMITY_INFO;
typedef struct tagALARM_XRAY_TRANSMISSION_BELT_ABNORMITY_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    char szReserved[1024]; 
} ALARM_XRAY_TRANSMISSION_BELT_ABNORMITY_INFO;
typedef struct tagALARM_POWER_GROUND_DETECTION_ABNORMAL_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    char szReserved[1024]; 
} ALARM_POWER_GROUND_DETECTION_ABNORMAL_INFO;
typedef enum tagEM_XRAY_COMM_ABNORMITY_TYPE
{
    EM_XRAY_COMM_ABNORMITY_TYPE_UNKNWON = -1,                  
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_SUPERVISION_FAILURE,    
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_INTERLOCK_FAILURE,      
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_HIGH_NEGATIVE_PRESSURE, 
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_HIGH_POSITIVE_PRESSURE, 
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_HIGH_TEMPERATURE,       
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_ARC_FAULT,              
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_OVERCURRENT,            
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_POWER_LIMIT,            
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_HIGH_VOLTAGE,           
    EM_XRAY_COMM_ABNORMITY_TYPE_COMMUNICATION_ERROR1,          
    EM_XRAY_COMM_ABNORMITY_TYPE_COMMUNICATION_ERROR2,          
    EM_XRAY_COMM_ABNORMITY_TYPE_COMMUNICATION_ERROR3,          
    EM_XRAY_COMM_ABNORMITY_TYPE_SENSOR1_A_BLOCKED,             
    EM_XRAY_COMM_ABNORMITY_TYPE_SENSOR1_B_BLOCKED,             
    EM_XRAY_COMM_ABNORMITY_TYPE_SENSOR2_A_BLOCKED,             
    EM_XRAY_COMM_ABNORMITY_TYPE_SENSOR2_B_BLOCKED,             
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_UNDERVOLTAGE,           
    EM_XRAY_COMM_ABNORMITY_TYPE_SOURCE_UNDERCURRENT,           
    EM_XRAY_COMM_ABNORMITY_TYPE_MOTOR_OVERHEATED               
} EM_XRAY_COMM_ABNORMITY_TYPE;
typedef struct tagALARM_XRAY_SOURCE_ABNORMITY_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuTime;   
    unsigned int nEventID; 
    double dbPTS;          
    char szName[128];      
    EM_XRAY_COMM_ABNORMITY_TYPE nAbnormalDetail[32]; 
    int nAbnormalDetailCnt;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    char szReserved[1020];                           
} ALARM_XRAY_SOURCE_ABNORMITY_INFO;
typedef struct tagRELATED_IMAGE
{
    UINT nImageType;      
    UINT nOffset;         
    UINT nLength;         
    char szReserved[128]; 
} RELATED_IMAGE;
typedef struct tagIDENTITY_INFO
{
    char szCitizenName[128]; 
    EM_SEX_TYPE emSex;       
    char szCitizenIDNo[20];  
    UINT nAge;               
    char szReserved[512];    
} IDENTITY_INFO;
typedef enum tagEM_PROCESS_MODE
{
    EM_PROCESS_MODE_UNKNOWN = -1,         
    EM_PROCESS_MODE_ABANDON_ONESELF,      
    EM_PROCESS_MODE_RELEASE,              
    EM_PROCESS_MODE_STORAGE_OF_ARTICLES,  
    EM_PROCESS_MODE_TRANSFER_TO_SECURITY, 
    EM_PROCESS_MODE_DISCRETION,           
    EM_PROCESS_MODE_FALSE_ALARM,          
} EM_PROCESS_MODE;
typedef struct tagNET_XRAY_INSIDE_ONJECT_TYPE
{
    char szObjType[32];   
    char byReserved[256]; 
} NET_XRAY_INSIDE_ONJECT_TYPE;
typedef struct tagUNPACKING_CHECK_INFO
{
    UINT nUTC;                                          
    UINT nUTCMS;                                        
    char szPackageTag[32];                              
    RELATED_IMAGE stuRelatedImage[64];                  
    int nRelatedImageRetNum;                            
    UINT nAlarmTime;                                    
    IDENTITY_INFO stuIdentityInfo;                      
    char szContrabandClass[16][32];                     
    int nContrabandRetNum;                              
    EM_PROCESS_MODE emProcessMode;                      
    char szChecker[128];                                
    char szAlarmLocation[256];                          
    EM_INSIDE_OBJECT_TYPE emContrabandClass[64];        
    char szPlaceOfDeparture[256];                       
    char szDestination[256];                            
    NET_XRAY_INSIDE_ONJECT_TYPE stuContrabandClass[64]; 
    char szReserved[256];                               
} UNPACKING_CHECK_INFO;
typedef struct tagDEV_EVENT_XRAY_UNPACKING_CHECK_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[DH_EVENT_NAME_LEN];    
    char szClass[16];                  
    double dbPTS;                      
    UNPACKING_CHECK_INFO stuCheckInfo; 
    int nEventID;                      
    char szReserved[1024];             
} DEV_EVENT_XRAY_UNPACKING_CHECK_INFO;
typedef struct tagNET_BLIND_SPOT_DETECTION_OBJECT_INFO
{
    float fLateralDistance;  
    DH_MSG_OBJECT stuObject; 
    char szReserved[256];    
} NET_BLIND_SPOT_DETECTION_OBJECT_INFO;
typedef struct tagDEV_EVENT_BLIND_SPOT_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    UINT nAlarmLevel;                                       
    int nObjectNum;                                         
    NET_BLIND_SPOT_DETECTION_OBJECT_INFO stuObjectInfo[32]; 
    char szVideoPath[256];                                  
    NET_GPS_STATUS_INFO stuGPS;                             
    char szReserved[768];                                   
} DEV_EVENT_BLIND_SPOT_DETECTION_INFO;
typedef enum tagEM_WORKSUIT_ABSTRACT_ERRCODE
{
    EM_WORKSUIT_ABSTRACT_ERRCODE_UNKNWON,    
    EM_WORKSUIT_ABSTRACT_ERRCODE_FAILED,     
    EM_WORKSUIT_ABSTRACT_ERRCODE_SYSERR,     
    EM_WORKSUIT_ABSTRACT_ERRCODE_DB_ERROR,   
    EM_WORKSUIT_ABSTRACT_ERRCODE_OVER_NUM,   
    EM_WORKSUIT_ABSTRACT_ERRCODE_NO_STORAGE, 
} EM_WORKSUIT_ABSTRACT_ERRCODE;
typedef struct tagNET_WORKSUIT_ABSTRACT_INFO
{
    char szGroupID[64];                          
    UINT nProcess;                               
    UINT nToken;                                 
    UINT nSucceedCnt;                            
    UINT nFailedCnt;                             
    UINT nFailedSourceFileNamesNum;              
    UINT nFailedSourceUIDNum;                    
    char szFailedSourceFileNames[200][64];       
    char szFailedSourceUID[200][64];             
    char szReserved1[4];                         
    UINT nErrCodeNum;                            
    EM_WORKSUIT_ABSTRACT_ERRCODE emErrCode[200]; 
    char szReserved[1024];                       
} NET_WORKSUIT_ABSTRACT_INFO;
typedef struct tagALARM_WORKSUIT_FEATURE_ABSTRACT_INFO
{
    int nAction;         
    int nEventID;        
    double dbPTS;        
    NET_TIME_EX stuTime; 
    UINT nAbstractInfoNum;                          
    NET_WORKSUIT_ABSTRACT_INFO stuAbstractInfo[20]; 
    char szReserved[1024];                          
} ALARM_WORKSUIT_FEATURE_ABSTRACT_INFO;
typedef struct tagALARM_RUN_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    double dbPTS;                         
    char szName[128];                     
    NET_TIME_EX stuTime;                  
    UINT UTCMS;                           
    EM_CLASS_TYPE emClassType;            
    UINT nEventID;                        
    UINT nPresetID;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char byReserved[1020];                
} ALARM_RUN_DETECTION_INFO;
typedef struct tagALARM_NONMOTOR_ENTRYING_INFO
{
    int nChannelID;      
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    UINT nSequence;                   
    int nObjectNum;                   
    VA_OBJECT_NONMOTOR stuObjects[8]; 
    BYTE byReserved[1024];            
} ALARM_NONMOTOR_ENTRYING_INFO;
typedef struct tagALARM_DISTANCE_DETECTION_INFO
{
    int nAction;                          
    int nEventID;                         
    double dbPTS;                         
    int nChannel;                         
    NET_TIME_EX stuTime;                  
    int nPresetID;                        
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[508];                 
} ALARM_DISTANCE_DETECTION_INFO;
typedef struct tagALARM_STAY_DETECTION_INFO
{
    int nAction;                          
    int nEventID;                         
    double dbPTS;                         
    int nChannel;                         
    NET_TIME_EX stuTime;                  
    int nGroupId;                         
    int nCountInGroup;                    
    int nIndexInGroup;                    
    int nCount;                           
    int nPresetID;                        
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[508];                 
} ALARM_STAY_DETECTION_INFO;
typedef struct tagALARM_AUTO_INSPECTION
{
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_TIME_EX stuStartTime;             
    BOOL bCheckResult;                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_AUTO_INSPECTION;
typedef enum tagEM_FACE_VERIFICATION_ACCESS_SNAP_TYPE
{
    EM_FACE_VERIFICATION_ACCESS_SNAP_TYPE_UNKNOWN, 
    EM_FACE_VERIFICATION_ACCESS_SNAP_TYPE_ENTRY,   
    EM_FACE_VERIFICATION_ACCESS_SNAP_TYPE_EXIT,    
} EM_FACE_VERIFICATION_ACCESS_SNAP_TYPE;
typedef struct tagNET_PERSON_INFO
{
    BOOL bCheckResult;                
    char szName[MAX_NAME_LENGTH];     
    char szSnapURL[MAX_SNAP_URL_LEN]; 
    BYTE byReserved[512];             
} NET_PERSON_INFO;
typedef struct tagNET_GOOD_INFO
{
    char szCode[MAX_CODE_LEN];        
    char szSnapURL[MAX_SNAP_URL_LEN]; 
    BYTE byReserved[512];             
} NET_GOOD_INFO;
typedef enum tagEM_OPERATION_TYPE
{
    EM_OPERATION_TYPE_UNKNOWN,  
    EM_OPERATION_TYPE_FETCH,    
    EM_OPERATION_TYPE_STORE,    
    EM_OPERATION_TYPE_EXCHANGE, 
    EM_OPERATION_TYPE_CHECK,    
} EM_OPERATION_TYPE;
typedef struct tagALARM_FACE_VERIFICATION_ACCESS_SNAP_INFO
{
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    int nRecNo;                                         
    EM_FACE_VERIFICATION_ACCESS_SNAP_TYPE emEventType;  
    NET_PERSON_INFO stuPersonInfo[MAX_PERSON_INFO_NUM]; 
    int nRetPersonInfoNum;                              
    NET_GOOD_INFO stuGoodInfo[MAX_GOOD_INFO_NUM];       
    int nRetGoodInfoNum;                                
    EM_OPERATION_TYPE emOperation;                      
    BYTE byReserved[1020];                              
} ALARM_FACE_VERIFICATION_ACCESS_SNAP_INFO;
typedef struct tagALARM_VIDEO_BLIND_INFO
{
    int nAction;                          
    int nChannelID;                       
    double dbPTS;                         
    NET_TIME_EX stuTime;                  
    int nEventID;                         
    NET_TIME_EX stuStartTime;             
    NET_GPS_STATUS_INFO stuGPS;           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_VIDEO_BLIND_INFO;
typedef struct tagALARM_DRIVER_NOTCONFIRM_INFO
{
    int nAction;          
    NET_TIME_EX stuTime;  
    double dbPTS;         
    BYTE byReserved[512]; 
} ALARM_DRIVER_NOTCONFIRM_INFO;
typedef struct tagALARM_VIOLATE_NO_FLY_TIME_INFO
{
    int nAction;         
    NET_TIME_EX stuTime; 
    double dbPTS;        
    BYTE byReserved[512]; 
} ALARM_VIOLATE_NO_FLY_TIME_INFO;
typedef struct tagALARM_BOX_ALARM_INFO
{
    int nAction;                                  
    int nChannelID;                               
    double dbPTS;                                 
    NET_TIME_EX stuTime;                          
    int nEventID;                                 
    char szAlarmChannelName[DH_COMMON_STRING_64]; 
    int nAlarmBoxIndex;                           
    int nAlarmIndex;                              
    BYTE byReserved[1016];                        
} ALARM_BOX_ALARM_INFO;
typedef struct tagALARM_SOSALERT_INFO
{
    int nChannelID;      
    int nEventID;        
    double dbPTS;        
    NET_TIME_EX stuTime; 
    char szPlateNumber[DH_COMMON_STRING_128]; 
    NET_GPS_STATUS_INFO stGPSStatusInfo;      
    BYTE byReserved[1024];                    
} ALARM_SOSALERT_INFO;
typedef struct tagALARM_GYROABNORMALATTITUDE_INFO
{
    int nAction;         
    int nChannelID;      
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    double dbGyroCurRoll;  
    double dbGyroCurPitch; 
    double dbGyroCurAccel; 
    BYTE byReserved[1024]; 
} ALARM_GYROABNORMALATTITUDE_INFO;
typedef struct tagALARM_ALARMOUTPUT_INFO
{
    int nAction;         
    NET_TIME_EX UTC;     
    int nChannel;        
    BOOL bRealUTC;       
    NET_TIME_EX RealUTC; 
} ALARM_ALARMOUTPUT_INFO;
typedef struct tagALARM_PSTNREPORTFAILURE_INFO
{
    NET_TIME_EX UTC; 
} ALARM_PSTNREPORTFAILURE_INFO;
typedef enum tagGSMFIELD_FAULT_TYPE
{
    GSMFIELD_FAULT_UNKNOWN,   
    GSMFIELD_FAULT_GSMModule, 
    GSMFIELD_FAULT_SIMCard,   
} GSMFIELD_FAULT_TYPE;
typedef struct tagALARM_NOGSMFIELD_INFO
{
    int nAction;                          
    NET_TIME_EX UTC;                      
    GSMFIELD_FAULT_TYPE emFaultType;      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_NOGSMFIELD_INFO;
typedef struct tagALARM_MOTION_RECORD_INFO
{
    int nAction;          
    int nChannel;         
    BOOL bMotionIsOpen;   
    BOOL bRecordIsOpen;   
    BYTE byReserved[512]; 
} ALARM_MOTION_RECORD_INFO;
typedef struct tagALARM_FACEINFO_COLLECT_INFO
{
    int nAction;                      
    NET_TIME_EX stuTime;              
    double dbPTS;                     
    char szUserID[DH_MAX_USERID_LEN]; 
    BYTE byReserved[512];             
} ALARM_FACEINFO_COLLECT_INFO;
typedef struct tagALARM_HIGH_SPEED_INFO
{
    int nAction;                         
    NET_TIME_EX stuTime;                 
    double dbPTS;                        
    NET_GPS_STATUS_INFO stGPSStatusInfo; 
    int nSpeedLimit;                     
    int nCurSpeed;                       
    int nMaxSpeed;                       
    NET_TIME_EX stuStartTime;            
    BYTE byReserved[472];                
} ALARM_HIGH_SPEED_INFO;
typedef enum tagEM_NET_VIFORMAT_TYPE
{
    EM_NET_VIFORMAT_TYPE_UNKNOWN = -1,  
    EM_NET_VIFORMAT_TYPE_NORMAL,        
    EM_NET_VIFORMAT_TYPE_UNSUPPORT,     
    EM_NET_VIFORMAT_TYPE_NOT_CONNECTED, 
} EM_NET_VIFORMAT_TYPE;
typedef struct tagALARM_VIDEO_LOSS_INFO
{
    int nAction;                          
    int nChannelID;                       
    double dbPTS;                         
    BYTE byReserved1[4];                  
    NET_TIME_EX stuTime;                  
    NET_TIME_EX stuStartTime;             
    NET_GPS_STATUS_INFO stuGPS;           
    EM_NET_VIFORMAT_TYPE emViFormat;      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1020];                
} ALARM_VIDEO_LOSS_INFO;
typedef struct tagALARM_SMARTHOME_GET_AUTHORIZED
{
    int nAction;           
    NET_TIME_EX UTC;       
    BOOL bIsTest;          
    char byReserved[1020]; 
} ALARM_SMARTHOME_GET_AUTHORIZED;
typedef struct tagALARM_SMARTHOME_UPDATE_SCENE
{
    int nAction;           
    NET_TIME_EX UTC;       
    char byReserved[1024]; 
} ALARM_SMARTHOME_UPDATE_SCENE;
typedef enum tagEM_ASG_ALARM_TYPE
{
    EM_ASG_ALARM_BREAK_UNKNOWN,             
    EM_ASG_ALARM_BREAK_DOWN,                
    EM_ASG_ALARM_ANTI_DEMOLITION,           
    EM_ASG_ALARM_FOLLOW,                    
    EM_ASG_ALARM_TIMEOUT,                   
    EM_ASG_ALARM_STAY,                      
    EM_ASG_ALARM_FORCIBLY_OPEN,             
    EM_ASG_ALARM_MISTAKENLY_ENTER,          
    EM_ASG_ALARM_REVERSE_ENTER,             
    EM_ASG_ALARM_CLIMB,                     
    EM_ASG_ALARM_TWO_WAY_CONFLICT,          
    EM_ASG_ALARM_POWER_ON_SELF_TEST_FAILED, 
} EM_ASG_ALARM_TYPE;
typedef struct tagALARM_ASG_INFO
{
    int nAction;                   
    int nChannelID;                
    NET_TIME_EX UTC;               
    EM_ASG_ALARM_TYPE emAlarmType; 
    char byReserved[1024];         
} ALARM_ASG_INFO;
typedef struct tagALARM_ASGSTAY_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX UTC;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char byReserved[1020];                
} ALARM_ASGSTAY_INFO;
typedef struct tagALARM_ASGFOLLOWING_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX UTC;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char byReserved[1020];                
} ALARM_ASGFOLLOWING_INFO;
typedef struct tagALARM_ASGCLIMBOVER_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX UTC;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char byReserved[1020];                
} ALARM_ASGCLIMBOVER_INFO;
typedef enum tagEM_ASGBREAKDOWN_ALARM_TYPE
{
    EM_ASGBREAKDOWN_ALARM_TYPE_UNKNOWN,       
    EM_ASGBREAKDOWN_ALARM_TYPE_INFRARED,      
    EM_ASGBREAKDOWN_ALARM_TYPE_COMMUNICATION, 
    EM_ASGBREAKDOWN_ALARM_TYPE_DOOR_WING,     
} EM_ASGBREAKDOWN_ALARM_TYPE;
typedef struct tagALARM_ASGBREAKDOWN_INFO
{
    int nAction;                            
    int nChannelID;                         
    NET_TIME_EX UTC;                        
    EM_ASGBREAKDOWN_ALARM_TYPE emAlarmType; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
    char byReserved[1016];                  
} ALARM_ASGBREAKDOWN_INFO;
typedef struct tagALARM_PARKING_OVERLOAD_INFO
{
    int nChannelID;   
    int nAction;      
    NET_TIME_EX UTC;  
    int nEventID;     
    char szName[128]; 
    UINT nParkingCapacity;                        
    UINT nTotalParkingCount;                      
    DEV_OCCUPIED_WARNING_INFO stuParkingInfo[64]; 
    BYTE byReserved[2048];                        
} ALARM_PARKING_OVERLOAD_INFO;
typedef struct tagALARM_LIFTCONTROL_REQUEST_INFO
{
    int nAction;                                 
    int nChannelID;                              
    NET_TIME_EX UTC;                             
    NET_ACCESS_DOOROPEN_METHOD emDoorOpenMethod; 
    char szUserID[32];                           
    char szSrcAddr[64];                          
    char byReserved[1024];                       
} ALARM_LIFTCONTROL_REQUEST_INFO;
typedef struct tagALARM_REMOTE_DEVICE_GPS_INFO
{
    int nAction;                     
    int nChannelID;                  
    NET_GPS_STATUS_INFO stGPSStatus; 
    char byReserved[1024];           
} ALARM_REMOTE_DEVICE_GPS_INFO;
typedef enum tagEM_ENTRANCE_STAT_DEVICE_TYPE
{
    EM_ENTRANCE_STAT_DEVICE_TYPE_UNKNOWN, 
    EM_ENTRANCE_STAT_DEVICE_TYPE_RADAR,   
    EM_ENTRANCE_STAT_DEVICE_TYPE_STROBE,  
    EM_ENTRANCE_STAT_DEVICE_TYPE_CAMERA,  
} EM_ENTRANCE_STAT_DEVICE_TYPE;
typedef struct tagALARM_ENTRANCE_CAR_STAT_INFO
{
    int nAction;                                   
    int nChannelID;                                
    char szName[128];                              
    NET_TIME stuBeginTime;                         
    NET_TIME stuEndTime;                           
    UINT nCarCount;                                
    EM_ENTRANCE_STAT_DEVICE_TYPE emStatDeviceType; 
    char byReserved[1024];                         
} ALARM_ENTRANCE_CAR_STAT_INFO;
typedef enum tagEM_ASG_ROLE_TYPE
{
    EM_ASG_ROLE_TYPE_UNKNOWN, 
    EM_ASG_ROLE_TYPE_MASTER,  
    EM_ASG_ROLE_TYPE_SLAVE,   
} EM_ASG_ROLE_TYPE;
typedef struct tagALARM_ASG_INTRUDED_INFO
{
    int nAction;                          
    NET_TIME_EX UTC;                      
    int nASGChannel;                      
    EM_ASG_ROLE_TYPE emASGRole;           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char byReserved[1024];                
} ALARM_ASG_INTRUDED_INFO;
typedef struct tagALARM_ASG_ANTIPINCH_INFO
{
    int nAction;           
    int nChannelID;        
    NET_TIME_EX UTC;       
    char byReserved[1024]; 
} ALARM_ASG_ANTIPINCH_INFO;
typedef struct tagALARM_IDCARDINFO_CHECK_INFO
{
    int nChannel;               
    int nAction;                
    NET_TIME_EX UTC;            
    BYTE byReserved1[4];        
    char szCitizenID[64];       
    char szCitizenName[64];     
    char szIssueAuthority[128]; 
    char szCitizenAddress[128]; 
    NET_TIME stuBirthDay;       
    NET_TIME stuBeginValidTime; 
    NET_TIME stuEndValidTime;   
    char szLatestAddress[128];  
    EM_CITIZENIDCARD_EC_TYPE emMZ;
    EM_CITIZENIDCARD_SEX_TYPE emSex; 
    char byReserved[1024];           
} ALARM_IDCARDINFO_CHECK_INFO;
typedef struct tagNET_SIP_REGISTER_USER_INFO
{
    char szID[32];        
    char szIpAddr[32];    
    UINT nPort;           
    BOOL bOnline;         
    char szDevType[32];   
    char szVtoType[32];   
    char szUserAgent[32]; 
    char szGroupNbr[32];  
    char szReserved[512]; 
} NET_SIP_REGISTER_USER_INFO;
typedef struct tagALARM_SIP_REGISTER_RESULT_INFO
{
    int nChannelID;                         
    int nAction;                            
    NET_TIME_EX UTC;                        
    BOOL bSuccess;                          
    char szDate[32];                        
    NET_SIP_REGISTER_USER_INFO stuUserInfo; 
    char szReserved[1024];                  
} ALARM_SIP_REGISTER_RESULT_INFO;
typedef struct tagNET_GESTURE_INFO
{
    char szType[32];      
    UINT nCount;          
    char szReserved[256]; 
} NET_GESTURE_INFO;
typedef struct tagALARM_GESTURE_DETECTION_INFO
{
    int nChannelID;                  
    int nAction;                     
    char szName[128];                
    char szClass[16];                
    double dbPTS;                    
    NET_TIME_EX stuUTC;              
    UINT nUTCMS;                     
    UINT nEventID;                   
    NET_GESTURE_INFO stuGestureInfo; 
    int nGroupID;                    
    int nCountInGroup;               
    int nIndexInGroup;               
    char szReserved[1024];           
} ALARM_GESTURE_DETECTION_INFO;
typedef struct tagALARM_ABNORMAL_RESTART_INFO
{
    int nChannelID;        
    int nAction;           
    UINT uAlarmCode;       
    NET_TIME_EX stuUTC;    
    char szReserved[1024]; 
} ALARM_ABNORMAL_RESTART_INFO;
typedef enum tagEM_DEFENSE_STATE
{
    EM_DEFENSE_STATE_UNKNOWN,   
    EM_DEFENSE_STATE_ARMING,    
    EM_DEFENSE_STATE_DISARMING, 
} EM_DEFENSE_STATE;
typedef struct tagNET_DEFENSE_STATE
{
    EM_DEFENSE_STATE emState; 
    int nDefenseID;           
    char szReserved[256];     
} NET_DEFENSE_STATE;
typedef struct tagALARM_DEFENSE_CHANGE_INFO
{
    int nChannelID;                        
    int nAction;                           
    char szName[128];                      
    char szClass[16];                      
    double dbPTS;                          
    NET_TIME_EX stuUTC;                    
    UINT nEventID;                         
    int nDefenseStateNum;                  
    NET_DEFENSE_STATE stuDefenseState[10]; 
    int nSourceFlag;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx;  
    char szReserved[1020];                 
} ALARM_DEFENSE_CHANGE_INFO;
typedef enum tagNET_COURSE_RECORD_UPLOAD_PROCESS_STATUS
{
    NET_COURSE_RECORD_UPLOAD_PROCESS_STATUS_UNKNOW,    
    NET_COURSE_RECORD_UPLOAD_PROCESS_STATUS_UPLOADING, 
    NET_COURSE_RECORD_UPLOAD_PROCESS_STATUS_COMPLETE,  
    NET_COURSE_RECORD_UPLOAD_PROCESS_STATUS_FAILED     
} NET_COURSE_RECORD_UPLOAD_PROCESS_STATUS;
typedef enum tagNET_COURSE_RECORD_UPLOAD_ERROR_CODE
{
    NET_COURSE_RECORD_UPLOAD_ERROR_CODE_UNKNOW = -1,   
    NET_COURSE_RECORD_UPLOAD_NORMAL,                   
    NET_COURSE_RECORD_UPLOAD_FAIL_OBTAIN_PUBLIC_KEY,   
    NET_COURSE_RECORD_UPLOAD_FAIL_OBTAIN_TOKEN,        
    NET_COURSE_RECORD_UPLOAD_FAIL_OBTAIN_OSS_ADDRESS,  
    NET_COURSE_RECORD_UPLOAD_FAIL_CONNECT_OSS_ADDRESS, 
    NET_COURSE_RECORD_UPLOAD_FAILED,                   
    NET_COURSE_RECORD_UPLOAD_RETURN_VALUE_ERROR        
} NET_COURSE_RECORD_UPLOAD_ERROR_CODE;
typedef struct tagCOURSE_RECORD_UPLOAD_FILE_INFO
{
    char szFilePath[256];                             
    TP_U64 nFileTime;                                 
    TP_U64 nFileLength;                               
    int nIndex;                                       
    int nFileUploadProcess;                           
    NET_COURSE_RECORD_UPLOAD_PROCESS_STATUS emStatus; 
    NET_COURSE_RECORD_UPLOAD_ERROR_CODE emErrorCode;  
    char byReserved[1008];                            
} COURSE_RECORD_UPLOAD_FILE_INFO;
typedef enum tagEM_COURSE_RECORD_UPLOAD_RECORD_TYPE
{
    EM_COURSE_RECORD_UPLOAD_RECORD_TYPE_UNKNOWN,               
    EM_COURSE_RECORD_UPLOAD_RECORD_TYPE_ORDINARY_RECORDING,    
    EM_COURSE_RECORD_UPLOAD_RECORD_TYPE_INTERACTIVE_RECORDING, 
    EM_COURSE_RECORD_UPLOAD_RECORD_TYPE_DEMONSTRATION,         
} EM_COURSE_RECORD_UPLOAD_RECORD_TYPE;
typedef struct tagALARM_COURSE_RECORD_UPLOAD_INFO
{
    int nAction;     
    NET_TIME_EX UTC; 
    BOOL bUploadResult;                               
    int nFileNum;                                     
    COURSE_RECORD_UPLOAD_FILE_INFO stuFileInfo[64];   
    UINT nId;                                         
    NET_TIME stuFileStartTime;                        
    NET_TIME stuFileEndTime;                          
    NET_COURSE_RECORD_UPLOAD_PROCESS_STATUS emStatus; 
    UINT nFileId;                                     
    int nChannel;                                     
    char szCallID[64];                                
    EM_COURSE_RECORD_UPLOAD_RECORD_TYPE emRecordType; 
    char byReserved[892];                             
} ALARM_COURSE_RECORD_UPLOAD_INFO;
typedef enum tagEM_APPOINTMENT_PROOF_TYPE
{
    EM_APPOINTMENT_PROOF_TYPE_UNKNOWN,     
    EM_APPOINTMENT_PROOF_TYPE_CITIZENID,   
    EM_APPOINTMENT_PROOF_TYPE_APPOINTCODE, 
} EM_APPOINTMENT_PROOF_TYPE;
typedef struct tagALARM_REQUEST_APPOINTMENT_INFO
{
    int nAction;                           
    int nChannelID;                        
    NET_TIME_EX UTC;                       
    EM_APPOINTMENT_PROOF_TYPE emProofType; 
    char szProofInfo[64];                  
    UINT nUniqueID;                        
} ALARM_REQUEST_APPOINTMENT_INFO;
typedef enum tagEM_VIDEO_COLLECT_MODE
{
    EM_VIDEO_COLLECT_MODE_UNKNOWN,      
    EM_VIDEO_COLLECT_MODE_NON,          
    EM_VIDEO_COLLECT_MODE_SINGLE,       
    EM_VIDEO_COLLECT_MODE_INTERVAL,     
    EM_VIDEO_COLLECT_MODE_CONTINUOUSLY, 
} EM_VIDEO_COLLECT_MODE;
typedef struct tagALARM_REQUEST_RECORD_INFO
{
    int nAction;                         
    int nChannelID;                      
    NET_TIME_EX UTC;                     
    UINT nEventID;                       
    EM_VIDEO_COLLECT_MODE emCollectMode; 
    int nCollectInterval;                
    int nCollectDuration;                
    BYTE byReserved[1020];               
} ALARM_REQUEST_RECORD_INFO;
typedef enum tagEM_PICTURE_COLLECT_MODE
{
    EM_PICTURE_COLLECT_MODE_UNKNOWN,  
    EM_PICTURE_COLLECT_MODE_NON,      
    EM_PICTURE_COLLECT_MODE_SINGLE,   
    EM_PICTURE_COLLECT_MODE_INTERVAL, 
} EM_PICTURE_COLLECT_MODE;
typedef struct tagALARM_REQUEST_SNAP_INFO
{
    int nAction;                           
    int nChannelID;                        
    NET_TIME_EX UTC;                       
    UINT nEventID;                         
    EM_PICTURE_COLLECT_MODE emCollectMode; 
    int nCollectInterval;                  
    BYTE byReserved[1024];                 
} ALARM_REQUEST_SNAP_INFO;
typedef enum tagEM_PTZ_ABNORMAL_PRE_ACTION_TYPE
{
    EM_PTZ_ABNORMAL_PRE_ACTION_TYPE_UNKNOWN,                  
    EM_PTZ_ABNORMAL_PRE_ACTION_TYPE_NONE,                     
    EM_PTZ_ABNORMAL_PRE_ACTION_TYPE_PATROL_TRACK,             
    EM_PTZ_ABNORMAL_PRE_ACTION_TYPE_HORIZONTAL_LINE_SCANNING, 
    EM_PTZ_ABNORMAL_PRE_ACTION_TYPE_CRUISE_GROUP,             
    EM_PTZ_ABNORMAL_PRE_ACTION_TYPE_HORIZONTAL_ROTATION,      
} EM_PTZ_ABNORMAL_PRE_ACTION_TYPE;
typedef enum tagEM_PTZ_ABNORMAL_REASON_TYPE
{
    EM_PTZ_ABNORMAL_REASON_TYPE_UNKNOWN,       
    EM_PTZ_ABNORMAL_REASON_TYPE_COMMUNICATION, 
    EM_PTZ_ABNORMAL_REASON_TYPE_STOP,          
    EM_PTZ_ABNORMAL_REASON_TYPE_OUT_OF_STEP,   
} EM_PTZ_ABNORMAL_REASON_TYPE;
typedef struct tagALARM_PTZ_ABNORMAL_INFO
{
    int nAction;                                            
    int nChannelID;                                         
    NET_TIME_EX UTC;                                        
    EM_PTZ_ABNORMAL_PRE_ACTION_TYPE emPtzAbnormalPreAction; 
    EM_PTZ_ABNORMAL_REASON_TYPE emPtzAbnormalReason;        
    BYTE byReserved[1024];                                  
} ALARM_PTZ_ABNORMAL_INFO;
typedef struct tagALARM_STORAGEFORMAT_INFO
{
    int nAction;           
    NET_TIME_EX UTC;       
    char szDeviceName[64]; 
    char szPath[256];      
    int nResult;           
    BYTE byReserved[260];  
} ALARM_STORAGEFORMAT_INFO;
typedef enum tagEM_CMD_TO_APP_TYPE
{
    EM_CMD_TO_APP_TYPE_UNKNOWN,      
    EM_CMD_TO_APP_TYPE_UPGRADECUSTOM 
} EM_CMD_TO_APP_TYPE;
typedef enum tagEM_APP_UPGRADE_STATE
{
    EM_APP_UPGRADE_STATE_UNKNOWN,           
    EM_APP_UPGRADE_STATE_PREPARING,         
    EM_APP_UPGRADE_STATE_DOWNLOADING,       
    EM_APP_UPGRADE_STATE_UPGRADING,         
    EM_APP_UPGRADE_STATE_INVALID,           
    EM_APP_UPGRADE_STATE_FAILED,            
    EM_APP_UPGRADE_STATE_SUCCEEDED,         
    EM_APP_UPGRADE_STATE_CANCELLED,         
    EM_APP_UPGRADE_STATE_NOT_ENOUGH_MEMORY, 
    EM_APP_UPGRADE_STATE_FILE_UNMATCH,      
    EM_APP_UPGRADE_STATE_OEM_NOT_COMPARE,   
    EM_APP_UPGRADE_STATE_UNMATCH_VERSION,   
    EM_APP_UPGRADE_STATE_PART_UPGRADED,     
    EM_APP_UPGRADE_STATE_SETURL,            
} EM_APP_UPGRADE_STATE;
typedef struct tagALARM_APPCMDSTATE_INFO
{
    int nAction;                  
    NET_TIME_EX UTC;              
    char szUUID[64];              
    EM_CMD_TO_APP_TYPE emCmdType; 
    EM_APP_UPGRADE_STATE emState; 
    int nProgress;                
    BYTE byReserved[508];         
} ALARM_APPCMDSTATE_INFO;
typedef struct tagALARM_BLUE_TOOTH_HEADSET_ALARM_INFO
{
    int nAction;      
    int nChannelID;   
    NET_TIME_EX UTC;  
    int nEventID;     
    char szName[128]; 
    char szDeviceSerialNum[32]; 
    BYTE byReserved[256];       
} ALARM_BLUE_TOOTH_HEADSET_ALARM_INFO;
typedef struct tagSOLARCELL_BATTERY_INFO
{
    int nElectricityQuantityPercent; 
    float fVoltage;                  
    float fTemperature;              
    float fControllerTemper;         
    BYTE byReserved[256];            
} SOLARCELL_BATTERY_INFO;
typedef struct tagSOLARCELL_PANEL_INFO
{
    float fVoltage;         
    float fElectricCurrent; 
    float fChargingPower;   
    BYTE byReserved[252];   
} SOLARCELL_PANEL_INFO;
typedef struct tagSOLARCELL_SYSTEM_HISTORY_INFO
{
    int nSystemTotalRunDay;         
    int nBatteryOverDischargeCount; 
    int nBatteryTotalChargeCount;   
    BYTE byReserved[252];           
} SOLARCELL_SYSTEM_HISTORY_INFO;
typedef enum tagEM_SOLARCELL_SYSTEM_FAULT_TYPE
{
    EM_SOLARCELL_FAULT_UNKNOWN,                           
    EM_SOLARCELL_FAULT_BATTERY_OVER_DISCHARGE,            
    EM_SOLARCELL_FAULT_BATTERY_PRESSURE,                  
    EM_SOLARCELL_FAULT_UNDERVOLTAGE_WARNING,              
    EM_SOLARCELL_FAULT_LOAD_SHORT_CIRCUIT,                
    EM_SOLARCELL_FAULT_EXCESSIVE_LOAD_ABNORMAL,           
    EM_SOLARCELL_FAULT_CONTROLLER_TEMPERATURE_HIGH,       
    EM_SOLARCELL_FAULT_HIGH_EXTERNAL_TEMPERATURE,         
    EM_SOLARCELL_FAULT_EXCESSIVE_INPUT_POWER,             
    EM_SOLARCELL_FAULT_INPUT_SHORT_CIRCUIT,               
    EM_SOLARCELL_FAULT_INPUT_TERMINAL_OVERPRESSURE,       
    EM_SOLARCELL_FAULT_SOLAR_PLATE_COUNTERCURRENT,        
    EM_SOLARCELL_FAULT_SOLAR_PLATE_OVERPRESSURE,          
    EM_SOLARCELL_FAULT_REVERSE_CONNECTION_OF_SOLAR_PANEL, 
    EM_SOLARCELL_FAULT_ANTI_REVERSE_MOS_SHORT,            
    EM_SOLARCELL_FAULT_CIRCUIT_CHARGE_MOS_SHORT_CIRCUI,   
} EM_SOLARCELL_SYSTEM_FAULT_TYPE;
typedef struct tagALARM_SOLARCELL_SYSTEM_INFO
{
    int nAction;                                      
    NET_TIME_EX UTC;                                  
    double PTS;                                       
    SOLARCELL_BATTERY_INFO stuBatteryInfo;            
    SOLARCELL_PANEL_INFO stuSolarPanel;               
    SOLARCELL_SYSTEM_HISTORY_INFO stuHistoryInfo;     
    EM_SOLARCELL_SYSTEM_FAULT_TYPE emSystemFault[32]; 
    int nSystemFault;                                 
    BYTE byReserved[1020];                            
} ALARM_SOLARCELL_SYSTEM_INFO;
typedef struct tagALARM_REGION_PARKING_TIMEOUT_INFO
{
    int nAction;                        
    int nChannelID;                     
    NET_TIME_EX UTC;                    
    NET_TIME_EX stuCarInParkingLotTime; 
    char szPlateNumber[64];             
    char szInParkRegionInfo[128];       
    BYTE byReserved[1024];              
} ALARM_REGION_PARKING_TIMEOUT_INFO;
typedef struct tagALARM_REGION_PARKING_NO_ENTRY_RECORD_INFO
{
    int nAction;                           
    int nChannelID;                        
    NET_TIME_EX UTC;                       
    NET_TIME_EX stuCarOutParkingSpaceTime; 
    char szPlateNumber[64];                
    char szInParkRegionInfo[128];          
    BYTE byReserved[1024];                 
} ALARM_REGION_PARKING_NO_ENTRY_RECORD_INFO;
typedef struct tagALARM_OVER_LOAD_INFO
{
    int nAction;           
    int nChannelID;        
    NET_TIME_EX UTC;       
    UINT nEnteredTotal;    
    UINT nExitedTotal;     
    UINT nInsideTotal;     
    BYTE byReserved[1024]; 
} ALARM_OVER_LOAD_INFO;
typedef enum tagEM_WIRELESS_DATA_TYPE
{
    EM_WIRELESS_DATA_TYPE_UNKNOWN, 
    EM_WIRELESS_DATA_TYPE_BINARY,  
    EM_WIRELESS_DATA_TYPE_LOG,     
} EM_WIRELESS_DATA_TYPE;
typedef struct tagALARM_WIRELESS_LOG_INFO
{
    int nAction;                      
    int nChannelID;                   
    NET_TIME_EX UTC;                  
    EM_WIRELESS_DATA_TYPE emDataType; 
    char szBinaryData[1024];          
    char szLogInfo[2048];             
} ALARM_WIRELESS_LOG_INFO;
typedef struct tagALARM_TIME_TO_POWEROFF_INFO
{
    int nAction;     
    int nChannelID;  
    NET_TIME_EX UTC; 
    UINT nCountdown; 
} ALARM_TIME_TO_POWEROFF_INFO;
typedef enum tagEM_FAULT_DETECT_SOURCE_TYPE
{
    EM_FAULT_DETECT_SOURCE_TYPE_UNKNOWN, 
    EM_FAULT_DETECT_SOURCE_TYPE_COIL,    
    EM_FAULT_DETECT_SOURCE_TYPE_VIDEO,   
} EM_FAULT_DETECT_SOURCE_TYPE;
typedef struct tagALARM_TRAFFIC_LIGHT_FAULT_INFO
{
    int nAction;                                
    int nChannelID;                             
    char szName[128];                           
    double PTS;                                 
    NET_TIME_EX UTC;                            
    EM_FAULT_DETECT_SOURCE_TYPE emDetectSource; 
    UINT nStraightLightMask[3];                 
    UINT nTurnLeftLightMask[3];                 
    UINT nTurnRightLightMask[3];                
    UINT nUTurnLightMask[3];                    
    EVENT_COMM_INFO stCommInfo;                 
    BYTE byReserved[1024];                      
} ALARM_TRAFFIC_LIGHT_FAULT_INFO;
typedef enum tagEM_VEHICLE_PERIPHERAL_TYPE
{
    EM_VEHICLE_PERIPHERAL_TYPE_UNKNOWN, 
    EM_VEHICLE_PERIPHERAL_TYPE_CAN,     
} EM_VEHICLE_PERIPHERAL_TYPE;
typedef enum tagEM_VEHICLE_PERIPHERAL_ALARM
{
    EM_VEHICLE_PERIPHERAL_ALARM_UNKNOWN,                 
    EM_VEHICLE_PERIPHERAL_ISD_COLLISION_WARNING,         
    EM_VEHICLE_PERIPHERAL_ISD_TURTLE_SPEED_OVERSPEED,    
    EM_VEHICLE_PERIPHERAL_ISD_SNAIL_SPEED_OVERSPEED,     
    EM_VEHICLE_PERIPHERAL_ISD_COLLISION_SQUEEZE_WARNING, 
    EM_VEHICLE_PERIPHERAL_ISD_FAILURE,                   
    EM_VEHICLE_PERIPHERAL_ISD_CANCELLED_INSIDE,          
    EM_VEHICLE_PERIPHERAL_ISD_CANCELLED_OUTSIDE          
} EM_VEHICLE_PERIPHERAL_ALARM;
typedef struct tagALARM_VEHICLE_PERIPHERAL_INFO
{
    int nAction;                                 
    char szName[128];                            
    double PTS;                                  
    NET_TIME_EX UTC;                             
    NET_GPS_STATUS_INFO stuGPSStatus;            
    EM_VEHICLE_PERIPHERAL_TYPE emPeripheralType; 
    EM_VEHICLE_PERIPHERAL_ALARM emAlarm;         
    double dbSpeed;                              
    double dbDistance;                           
    BYTE byReserved[1024];                       
} ALARM_VEHICLE_PERIPHERAL_INFO;
typedef struct tagALARM_FIRE_LANE_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    char szName[128];                     
    double PTS;                           
    EM_CLASS_TYPE emClassType;            
    NET_TIME_EX UTC;                      
    DH_MSG_OBJECT stuObjects[32];         
    UINT nObjectNum;                      
    int nEventID;                         
    int nRuleID;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE bReserved[1020];                 
} ALARM_FIRE_LANE_DETECTION_INFO;
typedef struct tagALARM_FIRE_LINE_DETECTION_INFO
{
    int nChannelID;               
    int nAction;                  
    char szName[128];             
    double PTS;                   
    EM_CLASS_TYPE emClassType;    
    NET_TIME_EX UTC;              
    UINT nEventID;                
    UINT nRuleID;                 
    DH_MSG_OBJECT stuObjects[32]; 
    int nObjectNum;               
    BYTE byReserved[1020];        
} ALARM_FIRE_LINE_DETECTION_INFO;
typedef enum tagEM_DISK_ERROR_TYPE
{
    EM_DISK_ERROR_TYPE_UNKNOWN,        
    EM_DISK_ERROR_TYPE_TEMPERATURE,    
    EM_DISK_ERROR_TYPE_VIBRATION,      
    EM_DISK_ERROR_TYPE_PHYSICAL_SHOCK, 
    EM_DISK_ERROR_TYPE_HARD_DRIVER,    
    EM_DISK_ERROR_TYPE_HOST_RESET,     
    EM_DISK_ERROR_TYPE_OTHER,          
} EM_DISK_ERROR_TYPE;
typedef enum tagEM_STORAGE_MEDIA_TYPE
{
    EM_STORAGE_MEDIA_TYPE_UNKNOWN, 
    EM_STORAGE_MEDIA_TYPE_CDROM,   
    EM_STORAGE_MEDIA_TYPE_DISK,    
    EM_STORAGE_MEDIA_TYPE_FLASH,   
    EM_STORAGE_MEDIA_TYPE_FROCK,   
} EM_STORAGE_MEDIA_TYPE;
typedef enum tagEM_DISK_MANU_FACTORY
{
    EM_DISK_MANU_FACTORY_UNKNOWN, 
    EM_DISK_MANU_FACTORY_WD,      
    EM_DISK_MANU_FACTORY_SG,      
} EM_DISK_MANU_FACTORY;
typedef struct tagALARM_DISK_HEALTH_FAILURE_INFO
{
    int nChannelID;                            
    int nAction;                               
    char szEventName[128];                     
    char szGroup[32];                          
    char szDeviceName[64];                     
    EM_STORAGE_DISK_PREDISKCHECK emDiskStatus; 
    EM_DISK_ERROR_TYPE emDiskError;            
    NET_TIME_EX UTC;                           
    int nPhysicNo;                             
    EM_DISK_MANU_FACTORY emDiskManuFactory;    
    EM_STORAGE_MEDIA_TYPE emStrobeMedia;       
    char szSerialNo[32];                       
    UINT nCmdErrMask;                          
    BYTE byReserved[1020];                     
} ALARM_DISK_HEALTH_FAILURE_INFO;
typedef enum tagEM_DETECT_SENSOR_TYPE
{
    EM_DETECT_SENSOR_TYPE_UNKNOWN, 
    EM_DETECT_SENSOR_TYPE_COIL,    
    EM_DETECT_SENSOR_TYPE_VIDEO,   
    EM_DETECT_SENSOR_TYPE_RADAR,   
    EM_DETECT_SENSOR_TYPE_5G,      
    EM_DETECT_SENSOR_TYPE_FUSION   
} EM_DETECT_SENSOR_TYPE;
typedef struct tagALARM_REFRIGE_SHUT_DOWN_INFO
{
    int nChannelID;        
    int nAction;           
    UINT nLeftTime;        
    BYTE byReserved[1020]; 
} ALARM_REFRIGE_SHUT_DOWN_INFO;
typedef enum tagEM_WIRELESS_APN_TYPE
{
    EM_WIRELESS_APN_UNKNOWN = -1, 
    EM_WIRELESS_APN_CUSTOMIZED,   
    EM_WIRELESS_APN_CTNET,        
    EM_WIRELESS_APN_CMNET,        
    EM_WIRELESS_APN_UNINET,       
} EM_WIRELESS_APN_TYPE;
typedef struct tagALARM_AROUD_4G_PROBE_SEARCH_INFO
{
    int nChannelID;             
    int nAction;                
    char szIMSI[20];            
    char szIMEI[20];            
    EM_WIRELESS_APN_TYPE emAPN; 
    int nStrength;              
    NET_TIME stuTime;           
    BYTE byReserved[1020];      
} ALARM_AROUD_4G_PROBE_SEARCH_INFO;
typedef enum tagEM_VEHICLEINOUT_CAR_TYPE
{
    EM_VEHICLEINOUT_CAR_TYPE_UNKNOWN,  
    EM_VEHICLEINOUT_CAR_TYPE_CAR,      
    EM_VEHICLEINOUT_CAR_TYPE_VAN,      
    EM_VEHICLEINOUT_CAR_TYPE_TRUCK,    
    EM_VEHICLEINOUT_CAR_TYPE_BUS,      
    EM_VEHICLEINOUT_CAR_TYPE_LORRY,    
    EM_VEHICLEINOUT_CAR_TYPE_CART,     
    EM_VEHICLEINOUT_CAR_TYPE_NONMOTOR, 
    EM_VEHICLEINOUT_CAR_TYPE_HUMAN,    
    EM_VEHICLEINOUT_CAR_TYPE_SPECAIL,  
} EM_VEHICLEINOUT_CAR_TYPE;
typedef struct tagNET_VEHICLE_OBJECT
{
    UINT nObjectID;                                
    UINT nSpeed;                                   
    char szObjectType[16];                         
    EM_CATEGORY_TYPE emSubObject;                  
    UINT nLane;                                    
    UINT nRoadwayNumber;                           
    EM_DETECT_SENSOR_TYPE emSensorType;            
    UINT nObjectRVID;                              
    UINT nObjectRID;                               
    char szDrivingDirection[3][32];                
    char szPlateNumber[32];                        
    char szPlateColor[16];                         
    double dbLongitude;                            
    double dbLatitude;                             
    char szCarColor[16];                           
    EM_VEHICLEINOUT_CAR_TYPE emCarType;            
    NET_FLOWSTAT_DIRECTION emVirtualCoilDirection; 
    double dbDistanceToStop;                       
    double dbCarX;                                 
    double dbCarY;                                 
    double dbCarAngle;                             
    UINT nObjectInVideoLane;                       
    int nDirection;                                
    float fSpeedX;                                 
    float fSpeedY;                                 
    double dbHeadingAngle;                         
    NET_RECT stuCarBoundingBox;                    
    BYTE byReserverd[216];                         
} NET_VEHICLE_OBJECT;
typedef enum tagEM_TRAFFIC_FLOW_STATUS
{
    EM_TRAFFIC_FLOW_STATUS_UNKNOWN,    
    EM_TRAFFIC_FLOW_STATUS_CONGESTION, 
    EM_TRAFFIC_FLOW_STATUS_SMOOTH      
} EM_TRAFFIC_FLOW_STATUS;
typedef enum tagEM_VIRTUAL_COIL_OCCUPANCY_STATUS
{
    EM_VIRTUAL_COIL_OCCUPANCY_STATUS_UNKNOWN = -1, 
    EM_VIRTUAL_COIL_OCCUPANCY_STATUS_UNOCCUPY,     
    EM_VIRTUAL_COIL_OCCUPANCY_STATUS_OCCUPY,       
} EM_VIRTUAL_COIL_OCCUPANCY_STATUS;
typedef struct tagNET_TRAFFIC_FLOW_STAT
{
    UINT nLane;                                  
    UINT nRoadwayNumber;                         
    EM_TRAFFIC_FLOW_STATUS emStatus;             
    EM_VIRTUAL_COIL_OCCUPANCY_STATUS emHeadCoil; 
    EM_VIRTUAL_COIL_OCCUPANCY_STATUS emTailCoil; 
    UINT nSpeed;                                 
    UINT nQueueLen;                              
    UINT nCarsInQueue;                           
    EM_DETECT_SENSOR_TYPE emSensorType;          
    double dbSpaceHeadway;                       
    double dbTimeHeadWay;                        
    double dbSpaceOccRatio;                      
    UINT nCarVehicles;                           
    BYTE byReserverd[228];                       
} NET_TRAFFIC_FLOW_STAT;
typedef struct tagALARM_VEHICLE_INOUT_INFO
{
    int nAction;                       
    int nChannel;                      
    char szName[128];                  
    NET_TIME_EX UTC;                   
    int nEventID;                      
    NET_VEHICLE_OBJECT* pstObjets;     
    int nObjectNum;                    
    int nStatNum;                      
    NET_TRAFFIC_FLOW_STAT stuStats[8]; 
    double dbRadarInstallAngle;        
    BYTE byReserverd[1016];            
} ALARM_VEHICLE_INOUT_INFO;
typedef struct tagALARM_DISS_ASSEMBLY_INFO
{
    int nAction;                          
    NET_TIME_EX UTC;                      
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
} ALARM_DISS_ASSEMBLY_INFO;
typedef enum tagEM_DEVICE_STATUS
{
    EM_DEVICE_STATUS_UNKNOWN,  
    EM_DEVICE_STATUS_WORKING,  
    EM_DEVICE_STATUS_SLEEPING, 
} EM_DEVICE_STATUS;
typedef enum tagEM_SLEEP_TRIGGER_MODE
{
    EM_SLEEP_TRIGGER_MODE_UNKNOWN,
    EM_SLEEP_TRIGGER_MODE_TIMING,        
    EM_SLEEP_TRIGGER_MODE_SHORT_MESSAGE, 
    EM_SLEEP_TRIGGER_MODE_TIME_PERIOD,   
    EM_SLEEP_TRIGGER_MODE_MOVECTRL       
} EM_SLEEP_TRIGGER_MODE;
typedef struct tagALARM_SLEEP_CONTROL_STATUS_INFO
{
    int nChannelID;               
    int nAction;                  
    NET_TIME_EX UTC;              
    EM_DEVICE_STATUS emStatus;    
    EM_SLEEP_TRIGGER_MODE emMode; 
} ALARM_SLEEP_CONTROL_STATUS_INFO;
typedef struct tagALARM_REMOTE_DISASSEMBLY_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX UTC;                      
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    BYTE bReserved[512];                  
} ALARM_REMOTE_DISASSEMBLY_INFO;
typedef enum tagEM_SCREENSAVER_STATUS
{
    EM_SCREENSAVER_STATUS_UNKNOWN, 
    EM_SCREENSAVER_STATUS_OPEN,    
    EM_SCREENSAVER_STATUS_CLOSE,   
} EM_SCREENSAVER_STATUS;
typedef struct tagALARM_SCREENSAVER_INFO
{
    int nAction;                    
    EM_SCREENSAVER_STATUS emStatus; 
    BOOL bClosePage;                
    BOOL bScreenOff;                
    BYTE bReserved[128];            
} ALARM_SCREENSAVER_INFO;
typedef struct tagALARM_ABN_POST_DETECTION_INFO
{
    int nChannelID;  
    int nAction;     
    UINT nEventID;   
    NET_TIME_EX UTC; 
    UINT UTCMS;      
    double dbPTS;    
} ALARM_ABN_POST_DETECTION_INFO;
typedef enum tagEM_VIDEO_ABNORMAL_DETECT_TYPE
{
    EM_VIDEO_ABNORMAL_DETECT_UNKNOWN,        
    EM_VIDEO_ABNORMAL_DETECT_LOSS,           
    EM_VIDEO_ABNORMAL_DETECT_COVER,          
    EM_VIDEO_ABNORMAL_DETECT_FROZEN,         
    EM_VIDEO_ABNORMAL_DETECT_LIGHT,          
    EM_VIDEO_ABNORMAL_DETECT_DARK,           
    EM_VIDEO_ABNORMAL_DETECT_SCENECHANGE,    
    EM_VIDEO_ABNORMAL_DETECT_STRIATION,      
    EM_VIDEO_ABNORMAL_DETECT_NOISE,          
    EM_VIDEO_ABNORMAL_DETECT_UNBALANCE,      
    EM_VIDEO_ABNORMAL_DETECT_BLUR,           
    EM_VIDEO_ABNORMAL_DETECT_CONTRAST,       
    EM_VIDEO_ABNORMAL_DETECT_MOTION,         
    EM_VIDEO_ABNORMAL_DETECT_FILCKERING,     
    EM_VIDEO_ABNORMAL_DETECT_COLOR,          
    EM_VIDEO_ABNORMAL_DETECT_UNFOCUS,        
    EM_VIDEO_ABNORMAL_DETECT_OVEREXPOSURE,   
    EM_VIDEO_ABNORMAL_DETECT_DRAMATICCHANGE, 
    EM_VIDEO_ABNORMAL_DETECT_BLACKWHITE,     
    EM_VIDEO_ABNORMAL_DETECT_SNOWNOISE,      
} EM_VIDEO_ABNORMAL_DETECT_TYPE;
typedef struct tagDEV_EVENT_VIDEO_NORMAL_DETECTION_INFO
{
    int nChannelID;                             
    int nAction;                                
    UINT nEventID;                              
    NET_TIME_EX UTC;                            
    double dbPTS;                               
    EM_VIDEO_ABNORMAL_DETECT_TYPE emDetectType; 
    BYTE bReserved[260];                        
} DEV_EVENT_VIDEO_NORMAL_DETECTION_INFO;
typedef enum tagEM_BUSINESS_STATUS
{
    EM_BUSINESS_STATUS_UNKNOWN = -1, 
    EM_BUSINESS_STATUS_NOSTART,      
    EM_BUSINESS_STATUS_START,        
    EM_BUSINESS_STATUS_NORAML,       
    EM_BUSINESS_STATUS_AUTOCLOSE,    
    EM_BUSINESS_STATUS_ABMONALCLOSE, 
} EM_BUSINESS_STATUS;
typedef enum tagEM_INTERLOCK_SCENE
{
    EM_INTERLOCK_SCENE_UNKNOWN = -1, 
    EM_INTERLOCK_SCENE_NORMAL,       
    EM_INTERLOCK_SCENE_ALLOPEN,      
    EM_INTERLOCK_SCENE_ALLCLOSE,     
} EM_INTERLOCK_SCENE;
typedef struct tagALARM_DOUBLEDOOR_INFO
{
    int nAction;                         
    EM_INTERLOCK_SCENE emInterLockScene; 
    BOOL bRealUTC;                       
    char szReserved1[4];                 
    NET_TIME_EX RealUTC;                 
    NET_TIME_EX UTC;                     
    char szReserverd[128];               
} ALARM_DOUBLEDOOR_INFO;
typedef struct tagALARM_OPENOUT_TIMESECTION_INFO
{
    int nAction;           
    BOOL bRealUTC;         
    NET_TIME_EX UTC;       
    NET_TIME_EX RealUTC;   
    char szReserverd[128]; 
} ALARM_OPENOUT_TIMESECTION_INFO;
typedef struct tagALARM_SERVICESTART_INFO
{
    int nAction;                         
    EM_BUSINESS_STATUS emBusinessStatus; 
    BOOL bRealUTC;                       
    char szReserved1[4];                 
    NET_TIME_EX UTC;                     
    NET_TIME_EX RealUTC;                 
    char szReserverd[128];               
} ALARM_SERVICESTART_INFO;
typedef struct tagALARM_WIRELESSDEV_POWERLESS_INFO
{
    int nAction;                          
    int nIndex;                           
    NET_TIME_EX stuLoacalTime;            
    char szModel[32];                     
    char szName[32];                      
    char szSN[32];                        
    char szAreaName[32];                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserverd[128];                
} ALARM_WIRELESSDEV_POWERLESS_INFO;
typedef struct tagALARM_PUBLISHINFO_CONFIRM_INFO
{
    int nAction;                
    BOOL bRealUTC;              
    NET_TIME_EX UTC;            
    NET_TIME_EX RealUTC;        
    char szDeviceIP[64];        
    char szDeviceUserID[64];    
    char szReadInfoID[256][32]; 
    int nReadInfoIDNum;         
    char szReserverd[508];      
} ALARM_PUBLISHINFO_CONFIRM_INFO;
typedef enum tagEM_FUNCTION_TYPE
{
    EM_FUNCTION_TYPE_UNKNOWN,      
    EM_FUNCTION_TYPE_WIGHT_LIGHT,  
    EM_FUNCTION_TYPE_SIREN,        
    EM_FUNCTION_TYPE_LENS_MASK,    
    EM_FUNCTION_TYPE_SUPPER_LIGHT, 
    EM_FUNCTION_TYPE_VLOG_STATE,   
} EM_FUNCTION_TYPE;
typedef struct tagALARM_LEFUNCTION_STATUS_SYNC_INFO
{
    int nAction;                 
    int nChannel;                
    char szName[128];            
    NET_TIME_EX stuUTC;          
    EM_FUNCTION_TYPE emFunction; 
    BOOL bStatus;                
    char szReserverd[1024];      
} ALARM_LEFUNCTION_STATUS_SYNC_INFO;
typedef struct tagTRAFFIC_QUEUE_INFO
{
    UINT nLane;                             
    UINT nQueueLen;                         
    UINT nQueueStartPos;                    
    UINT nQueueVehNum;                      
    UINT nQueueVehSpeed;                    
    UINT nOccTime;                          
    NET_EM_OVER_FLOW_STATE emOverflowState; 
    char szReserverd[252];                  
} TRAFFIC_QUEUE_INFO;
typedef struct tagTRAFFIC_FLOW_QUEUE_INFO
{
    UINT nDecStatus;                     
    UINT nAreaNo;                        
    UINT nJunNo;                         
    UINT nDirNo;                         
    UINT nLaneDirType;                   
    int nQueueInfoNum;                   
    TRAFFIC_QUEUE_INFO stuQueueInfo[32]; 
    char szReserverd[256];               
} TRAFFIC_FLOW_QUEUE_INFO;
typedef struct tagALARM_TRAFFIC_FLOW_QUEUE_INFO
{
    int nAction;                              
    int nChannel;                             
    char szName[128];                         
    NET_TIME_EX stuUTC;                       
    UINT nUTCMS;                              
    int nSequence;                            
    TRAFFIC_FLOW_QUEUE_INFO stuFlowQueueInfo; 
    char szReserverd[1024];                   
} ALARM_TRAFFIC_FLOW_QUEUE_INFO;
typedef struct tagTRAFFIC_FLOW_JUNTION_INFO
{
    UINT nAreaNo;          
    UINT nJunNo;           
    UINT nDirNo;           
    UINT nLaneDirType;     
    UINT nSecNo;           
    UINT nLaneNo;          
    UINT nVehType;         
    UINT nVehSpeed;        
    UINT nOccTime;         
    char szReserverd[252]; 
} TRAFFIC_FLOW_JUNTION_INFO;
typedef struct tagALARM_TRAFFIC_FLOW_JUNTION_INFO
{
    int nAction;                               
    int nChannel;                              
    char szName[128];                          
    NET_TIME_EX stuUTC;                        
    UINT nUTCMS;                               
    int nSequence;                             
    TRAFFIC_FLOW_JUNTION_INFO stuFlowJunction; 
    char szReserverd[1024];                    
} ALARM_TRAFFIC_FLOW_JUNTION_INFO;
typedef struct tagTRAFFIC_FLOW_VEHICLE_STOP_INFO
{
    UINT nAreaNo;          
    UINT nJunNo;           
    UINT nDirNo;           
    UINT nLaneDirType;     
    UINT nLaneNo;          
    UINT nStopPos;         
    UINT nStopTimes;       
    UINT nStopOccTime;     
    char szReserverd[256]; 
} TRAFFIC_FLOW_VEHICLE_STOP_INFO;
typedef struct tagALARM_TRAFFIC_FLOW_VEHICLE_STOP_INFO
{
    int nAction;                                       
    int nChannel;                                      
    char szName[128];                                  
    NET_TIME_EX stuUTC;                                
    UINT nUTCMS;                                       
    int nSequence;                                     
    TRAFFIC_FLOW_VEHICLE_STOP_INFO stuFlowVehicleStop; 
    char szReserverd[1024];                            
} ALARM_TRAFFIC_FLOW_VEHICLE_STOP_INFO;
typedef struct tagALARM_TRAFFIC_FLOW_STAT_INFO
{
    int nAction;                         
    int nChannelID;                      
    char szName[128];                    
    DWORD PTS;                           
    int nEventID;                        
    NET_TIME_EX stuUTC;                  
    int nSequence;                       
    int nStateNum;                       
    NET_TRAFFIC_FLOW_STATE stuStates[8]; 
    int nStopVehiclenum;                 
    int nDetectionAreaVehicleNum;        
    char szReserverd[1024];              
} ALARM_TRAFFIC_FLOW_STAT_INFO;
typedef struct tagTRAFFIC_FLOW_LANE_INFO
{
    UINT nFlow;            
    UINT nAveSpeed;        
    UINT nOccupancy;       
    char szReserverd[252]; 
} TRAFFIC_FLOW_LANE_INFO;
typedef struct tagTRAFFIC_FLOW_STAT_EX_INFO
{
    UINT nAreaNo;                           
    UINT nJunNo;                            
    UINT nDirNo;                            
    UINT nSecNo;                            
    TRAFFIC_FLOW_LANE_INFO stuLaneInfo[32]; 
    int nLaneInfoNum;                       
    char szReserverd[252];                  
} TRAFFIC_FLOW_STAT_EX_INFO;
typedef struct tagALARM_TRAFFIC_FLOW_STAT_EX_INFO
{
    int nAction;                             
    int nChannel;                            
    char szName[128];                        
    NET_TIME_EX stuUTC;                      
    UINT nUTCMS;                             
    int nSequence;                           
    TRAFFIC_FLOW_STAT_EX_INFO stuFlowStatEx; 
    char szReserverd[1024];                  
} ALARM_TRAFFIC_FLOW_STAT_EX_INFO;
typedef struct tagALARM_SCREEN_DISPLAY_ALARM_INFO
{
    int nAction;           
    BOOL bHdmiStatus;      
    NET_TIME_EX stuUTC;    
    BYTE byReserved[1020]; 
} ALARM_SCREEN_DISPLAY_ALARM_INFO;
typedef enum tagEM_HUMAN_ANIMAL_ALARM_TYPE
{
    EM_HUMAN_ANIMAL_ALARM_TYPE_UNKNOWN,            
    EM_HUMAN_ANIMAL_ALARM_TYPE_NORMAL_TO_ABNORMAL, 
    EM_HUMAN_ANIMAL_ALARM_TYPE_ABNORMAL_TO_NORMAL, 
} EM_HUMAN_ANIMAL_ALARM_TYPE;
typedef enum tagEM_DETECTION_SCENE_TYPE
{
    EM_DETECTION_SCENE_TYPE_UNKNOWN, 
    EM_DETECTION_SCENE_TYPE_ANIMAL,  
    EM_DETECTION_SCENE_TYPE_BIRD,    
    EM_DETECTION_SCENE_TYPE_PIG,     
} EM_DETECTION_SCENE_TYPE;
typedef struct tagALARM_HUMAN_ANIMAL_COEXISTENCE_INFO
{
    int nChannelID;                  
    int nAction;                     
    char szName[128];                
    double dbPTS;                    
    NET_TIME_EX stuUTC;              
    int nUTCMS;                      
    EM_SCENE_CLASS_TYPE emClassType; 
    UINT nRuleID;                    
    int nGroupID;                                 
    int nCountInGroup;                            
    int nIndexInGroup;                            
    UINT nEventID;                                
    int nPresetID;                                
    EM_HUMAN_ANIMAL_ALARM_TYPE emAlarmType;       
    EM_DETECTION_SCENE_TYPE emDetectionSceneType; 
    char szReserved[1020];                        
} ALARM_HUMAN_ANIMAL_COEXISTENCE_INFO;
typedef struct tagNET_ALARM_MINIINDOOR_RADAR_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[128];  
    UINT nEventID;      
    NET_TIME_EX stuUTC; 
    double dbPTS;       
    UINT nUTCMS;        
    BOOL bBreatheAbnormal;   
    BOOL bHeartBeatAbnormal; 
    BOOL bAFBStatusAbnormal; 
    BOOL bFallAlarm;         
    BOOL bNumAbnormal;       
    char szReserved[1024];   
} NET_ALARM_MINIINDOOR_RADAR_ALARM_INFO;
typedef struct tagNET_ALARM_MEMORY_OVER_LOAD_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    double dbTotal;        
    double dbFree;         
    UINT nUsage;           
    char szReserved[1024]; 
} NET_ALARM_MEMORY_OVER_LOAD_INFO;
typedef struct tagNET_ALARM_CPU_OVER_LOAD_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    UINT nUsage;           
    char szReserved[1024]; 
} NET_ALARM_CPU_OVER_LOAD_INFO;
typedef struct tagNET_ALARM_EAS_ANTITHEFT
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szAlarmChannelName[128];         
    UINT nAlarmChannel;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1020];                
} NET_ALARM_EAS_ANTITHEFT;
typedef struct tagNET_ALARM_EAS_TRANSMIT_COIL
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szAlarmChannelName[128];         
    UINT nAlarmChannel;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1020];                
} NET_ALARM_EAS_TRANSMIT_COIL;
typedef struct tagNET_ALARM_EAS_RECEIVE_COIL
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szAlarmChannelName[128];         
    UINT nAlarmChannel;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1020];                
} NET_ALARM_EAS_RECEIVE_COIL;
typedef struct tagNET_ALARM_EAS_TAG_RESIDENT
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szAlarmChannelName[128];         
    UINT nAlarmChannel;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1020];                
} NET_ALARM_EAS_TAG_RESIDENT;
typedef struct tagNET_ALARM_EAS_ANTENNA_POWER_FAULT
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} NET_ALARM_EAS_ANTENNA_POWER_FAULT;
typedef struct tagNET_ALARM_PARKING_SPACE_DETECTOR_STATE_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    int nTriggerSource;              
    UINT nLane;                      
    char szDetectionEquipmentID[32]; 
    char szCustomParkNo[32];         
    int nParkingState;               
    char szReserved[1024];           
} NET_ALARM_PARKING_SPACE_DETECTOR_STATE_INFO;
typedef enum tagEM_EXCEPTION_TYPE
{
    EM_EXCEPTION_KNOWN,                      
    EM_EXCEPTION_NOTALLOWED_IPLOGIN,         
    EM_EXCEPTION_NOTALLOWED_TIMELOGIN,       
    EM_EXCEPTION_URLERROR_OVERLIMIT,         
    EM_EXCEPTION_SESSIONNUM_OVERLIMIT,       
    EM_EXCEPTION_SESSIONID_ERROR_OVERLIMIT,  
    EM_EXCEPTION_FDEXHAUSTION,               
    EM_EXCEPTION_EXCEPTIONPROGRAMRUN,        
    EM_EXCEPTION_ACCOUNTORPWDERROROVERLIMIT, 
    EM_EXCEPTION_ROOTKIT_DETECTION,          
    EM_EXCEPTION_HIDE_PROCESS_DETECTION,     
} EM_EXCEPTION_TYPE;
typedef struct tagNET_ALARM_SAFETY_ABNORMAL_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    EM_EXCEPTION_TYPE emExceptionType; 
    char szAddress[64];                
    NET_TIME stuAbnormalTime;          
    char szUser[128];                  
    char szReserved[1024]; 
} NET_ALARM_SAFETY_ABNORMAL_INFO;
typedef struct tagNET_ALARM_REQUEST_IDLE_MODE
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    NET_TIME_EX stuUTC; 
    char szReserved[1024]; 
} NET_ALARM_REQUEST_IDLE_MODE;
typedef struct tagNET_ALARM_FORCE_INTO_IDLE_MODE
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    NET_TIME_EX stuUTC; 
    char szReserved[1024]; 
} NET_ALARM_FORCE_INTO_IDLE_MODE;
typedef struct tagNET_ALARM_REMOTE_APPROVAL_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    int nApprovalNo;         
    int nType;               
    int nCabinIndex;         
    char szAccessorID[64];   
    char szAccessorName[64]; 
    char szReviewerID[64];   
    char szReviewerName[64]; 
    int nCabinListNum;       
    int nCabinList[32];      
    char szReserved[888];    
} NET_ALARM_REMOTE_APPROVAL_INFO;
typedef struct tagNET_ALARM_DYNAMIC_PWDLOCK_FOR_INIT_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    char szID[32];         
    char szReserved[1024]; 
} NET_ALARM_DYNAMIC_PWDLOCK_FOR_INIT_INFO;
typedef struct tagNET_ALARM_DYNAMIC_LOCK_UPLOAD_RANDOMCODE_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    char szID[32];         
    char szRandCode[512];  
    char szOpenKeyVer[64]; 
    char szReserved[1024]; 
} NET_ALARM_DYNAMIC_LOCK_UPLOAD_RANDOMCODE_INFO;
typedef struct tagNET_ALARM_DYNAMIC_PWDLOCK_FOR_OPEN_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    char szID[32];         
    char szReserved[1024]; 
} NET_ALARM_DYNAMIC_PWDLOCK_FOR_OPEN_INFO;
typedef struct tagNET_ALARM_DYNAMIC_PWDLOCK_CLOSE_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    char szID[32];         
    char szCloseCode[512]; 
    char szReserved[576];  
} NET_ALARM_DYNAMIC_PWDLOCK_CLOSE_INFO;
typedef enum tagEM_SYNCUSER_TYPE
{
    EM_SYNCUSER_TYPE_UNKNOWN = -1, 
    EM_SYNCUSER_TYPE_ADD,          
    EM_SYNCUSER_TYPE_UPDATE,       
    EM_SYNCUSER_TYPE_REMOVE,       
} EM_SYNCUSER_TYPE;
typedef struct tagNET_ALARM_SYNCUSER_INFO
{
    int nChannelID;          
    int nAction;             
    NET_TIME_EX stuUTC;      
    UINT nUTCMS;             
    char szUserID[32];       
    EM_SYNCUSER_TYPE emType; 
    char szReserved[1020];   
} NET_ALARM_SYNCUSER_INFO;
typedef struct tagNET_ALARM_ABNORMALLOGIN_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    char szReserved[1024]; 
} NET_ALARM_ABNORMALLOGIN_INFO;
typedef struct tagNET_ALARM_INTELLITRACK_EVENT_INFO
{
    int nChannelID;                           
    int nAction;                              
    NET_TIME_EX stuUTC;                       
    UINT nUTCMS;                              
    UINT nEventID;                            
    UINT nTrackStatus;                        
    NET_PTZSPACE_UNNORMALIZED stuAbsPosition; 
    char szObjectType[32];                    
    char szReserved[1024]; 
} NET_ALARM_INTELLITRACK_EVENT_INFO;
typedef struct tagNET_ALARM_GAS_TANK_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[128];  
    UINT nRuleID;       
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    char byReserved[4]; 
    UINT nUTCMS;        
    UINT nEventID;      
    DH_MSG_OBJECT_EX2 stuObject;          
    DH_MSG_OBJECT_EX2 stuObjects[100];    
    int nObjectNum;                       
    int nDetectRegionNum;                 
    NET_POINT stuDetectRegion[20];        
    int nCount;                           
    EM_EVENT_LEVEL emEventLevel;          
    UINT nPresetID;                       
    char szPresetName[64];                
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    char szReserved[1024];                
} NET_ALARM_GAS_TANK_DETECTION_INFO;
typedef struct tagNET_ALARM_LOSS_FRAME_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szGroup[32];      
    char szReserved[1024]; 
} NET_ALARM_LOSS_FRAME_ALARM_INFO;
typedef struct tagNET_ALARM_INTELLI_MODULE_HIGH_TEMP_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szChip[16];       
    int nCPUTemperature;   
    int nGPUTemperature;   
    char szReserved[1024]; 
} NET_ALARM_INTELLI_MODULE_HIGH_TEMP_INFO;
typedef struct tagNET_ALARM_INTELLI_MODULE_OFFLINE_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szChip[16];       
    char szReserved[1024]; 
} NET_ALARM_INTELLI_MODULE_OFFLINE_INFO;
typedef enum tagEM_SSD_ERROR_TYPE
{
    EM_SSD_ERROR_TYPE_UNKNOWN,
    EM_SSD_ERROR_TYPE_SSD_REMAIN_LIFE_FAILURE, 
} EM_SSD_ERROR_TYPE;
typedef struct tagNET_ALARM_SSD_HEALTH_FAILURE_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szName[128];          
    char szDevice[64];         
    EM_SSD_ERROR_TYPE emError; 
    char szReserved[1024];     
} NET_ALARM_SSD_HEALTH_FAILURE_INFO;
typedef struct tagALARM_YE_BAO_ALARM_INFO
{
    int nAction;            
    int nChannel;           
    char szName[128];       
    int nEventID;           
    NET_TIME_EX stuRealUTC; 
    char szDeviceID[64];      
    int nFileType;            
    char szFileUrl[2][256];   
    NET_TIME_EX stuAlarmTime; 
    UINT nSignalStrength;     
    UINT nPower;              
    UINT nSDTotal;            
    UINT nSDFree;             
    double dbTemperature;     
    double dbLongitude;       
    double dbLatitude;        
    char szReserved[1024];    
} ALARM_YE_BAO_ALARM_INFO;
typedef enum tagEM_AI_PICKUP_WORK_STATE
{
    EM_AI_PICKUP_WORK_STATE_UNKNOWN, 
    EM_AI_PICKUP_WORK_STATE_WORKING, 
    EM_AI_PICKUP_WORK_STATE_OFFLINE, 
    EM_AI_PICKUP_WORK_STATE_ERROR,   
} EM_AI_PICKUP_WORK_STATE;
typedef struct tagALARM_AI_PICKUP_WORK_STATE_INFO
{
    int nAction;        
    int nChannel;       
    char szName[128];   
    int nEventID;       
    NET_TIME_EX stuUTC; 
    EM_AI_PICKUP_WORK_STATE emState; 
    char szReserved[1020];           
} ALARM_AI_PICKUP_WORK_STATE_INFO;
typedef struct tagALARM_INTELLI_TYPE_CHANGE_INFO
{
    int nAction;      
    int nChannel;     
    char szName[128]; 
    int nTypeListAfterChangeCount;                  
    int nTypeListBeforeChangeCount;                 
    EM_SCENE_CLASS_TYPE emTypeListAfterChange[16];  
    EM_SCENE_CLASS_TYPE emTypeListBeforeChange[16]; 
    NET_TIME_EX stuUTC;                             
    NET_TIME_EX stuLocaleTime;                      
    char szReserved[1024];                          
} ALARM_INTELLI_TYPE_CHANGE_INFO;
typedef enum tagEM_CAR_PASSING_MOVE_STATE
{
    EM_CAR_PASSING_MOVE_STATE_UNKNOWN, 
    EM_CAR_PASSING_MOVE_STATE_ENTER,   
    EM_CAR_PASSING_MOVE_STATE_LEAVE,   
} EM_CAR_PASSING_MOVE_STATE;
typedef struct tagNET_CAR_PASSING_INFO
{
    UINT nCarId;                           
    UINT nLane;                            
    char szPlateNumber[32];                
    char szPlateColor[32];                 
    int nSpeed;                            
    UINT nCarSize;                         
    EM_CAR_PASSING_MOVE_STATE emMoveState; 
    NET_TIME_EX stuTime;                   
    UINT nRoadwayNumber;                   
    UINT nCoilID;                          
    double dbCarX;                         
    double dbCarY;                         
    double dbCarAngle;                     
    char szReserved[128];                  
} NET_CAR_PASSING_INFO;
typedef struct tagALARM_TRAFFIC_CAR_PASSING_INFO
{
    int nAction;                            
    int nChannel;                           
    char szName[128];                       
    int nEventID;                           
    NET_TIME_EX stuUTC;                     
    UINT nUTCMS;                            
    UINT nTimeZone;                         
    UINT nFrameSequence;                    
    int nCarPassingCount;                   
    NET_CAR_PASSING_INFO stuCarPassing[16]; 
    char szReserved[1024];                  
} ALARM_TRAFFIC_CAR_PASSING_INFO;
typedef enum tagEM_SMELLY_LEVEL
{
    EM_SMELLY_LEVEL_UNKNOWN, 
    EM_SMELLY_LEVEL_NORMAL,  
    EM_SMELLY_LEVEL_LIGHT,   
    EM_SMELLY_LEVEL_HEAVY,   
} EM_SMELLY_LEVEL;
typedef struct tagNET_WATER_DETECTION_UPLOAD_INFO
{
    float fPH;                     
    float fNTU;                    
    float fNH3_N;                  
    float fTN;                     
    float fSD;                     
    float fCOD;                    
    float fNN;                     
    float fDO;                     
    float fChl_a;                  
    float fTP;                     
    float fCODMn;                  
    float fSS;                     
    float fBOD_5;                  
    float fNO3_N;                  
    float fTSI;                    
    EM_SMELLY_LEVEL emSmellyLevel; 
    char szReserved[512];          
} NET_WATER_DETECTION_UPLOAD_INFO;
typedef enum tagEM_WATER_DETECTION_ALARM_TYPE
{
    EM_WATER_DETECTION_ALARM_TYPE_UNKNOWN,      
    EM_WATER_DETECTION_ALARM_TYPE_QUALITY,      
    EM_WATER_DETECTION_ALARM_TYPE_PH,           
    EM_WATER_DETECTION_ALARM_TYPE_NTU,          
    EM_WATER_DETECTION_ALARM_TYPE_NH3_N,        
    EM_WATER_DETECTION_ALARM_TYPE_TN,           
    EM_WATER_DETECTION_ALARM_TYPE_SD,           
    EM_WATER_DETECTION_ALARM_TYPE_COD,          
    EM_WATER_DETECTION_ALARM_TYPE_NN,           
    EM_WATER_DETECTION_ALARM_TYPE_DO,           
    EM_WATER_DETECTION_ALARM_TYPE_CHL_A,        
    EM_WATER_DETECTION_ALARM_TYPE_TP,           
    EM_WATER_DETECTION_ALARM_TYPE_CODMN,        
    EM_WATER_DETECTION_ALARM_TYPE_SS,           
    EM_WATER_DETECTION_ALARM_TYPE_BOD_5,        
    EM_WATER_DETECTION_ALARM_TYPE_NO3_N,        
    EM_WATER_DETECTION_ALARM_TYPE_TSI,          
    EM_WATER_DETECTION_ALARM_TYPE_SMELLY_LEVEL, 
} EM_WATER_DETECTION_ALARM_TYPE;
typedef struct tagALARM_WATER_QUALITY_DETECTION_INFO
{
    int nChannelID;                                
    int nAction;                                   
    char szName[128];                              
    char szClass[16];                              
    NET_TIME_EX stuUTC;                            
    NET_WATER_DETECTION_UPLOAD_INFO stuUploadInfo; 
    EM_WATER_DETECTION_ALARM_TYPE emAlarmType[32]; 
    int nAlarmTypeNum;                             
    char szReserved[1024];                         
} ALARM_WATER_QUALITY_DETECTION_INFO;
#define VTS_STATE_LONGNUMBER_LEN 24
typedef enum tagVTS_STATE
{
    EM_VTS_STATE_UNKNOWN = 0,
    EM_VTS_STATE_BUSY, 
    EM_VTS_STATE_IDLE, 
} VTS_STATE;
typedef struct tagALARM_VTSTATE_UPDATE_INFO
{
    int nChannelID;                           
    NET_TIME stuTime;                         
    VTS_STATE emState;                        
    char szLongNum[VTS_STATE_LONGNUMBER_LEN]; 
    BYTE byReserved[1024];                    
} ALARM_VTSTATE_UPDATE_INFO;
typedef struct tagALARM_VIDEO_TALK_PATH_INFO
{
    int nAction;                           
    int nChannelID;                        
    double dbPTS;                          
    NET_TIME_EX stuTime;                   
    char szSrcDevID[DH_COMMON_STRING_128]; 
    char szDstDevID[DH_COMMON_STRING_128]; 
    BYTE byReserved[1024];                 
} ALARM_VIDEO_TALK_PATH_INFO;
typedef struct tagALARM_EVENT_CROSSREGION_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    NET_CROSSREGION_DIRECTION_INFO emDirection;      
    NET_CROSSREGION_ACTION_INFO emActionType;        
    int nOccurrenceCount;                            
    int nLevel;                                      
    char szName[DH_COMMON_STRING_128];               
    BOOL bIsObjectInfo;                              
    DH_MSG_OBJECT stuObject;                         
    int nRetObjectNum;                               
    DH_MSG_OBJECT stuObjects[MAX_TARGET_OBJECT_NUM]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    char szMac[32];                                  
    char szReserved[1024];                           
} ALARM_EVENT_CROSSREGION_INFO;
typedef struct tagALARM_EVENT_LEFT_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    int nOccurrenceCount;                 
    int nLevel;                           
    short nPreserID;                      
    char szPresetName[64];                
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_EVENT_LEFT_INFO;
typedef struct tagNET_EVENT_WHOLE_FACE_INFO
{
    NET_EULER_ANGLE stuFaceCaptureAngle; 
    NET_ANGEL_RANGE stuAngelRange[3];    
    BYTE byReserved[256];                
} NET_EVENT_WHOLE_FACE_INFO;
typedef struct tagALARM_EVENT_FACE_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    int nFaceCount;                         
    NET_EVENT_WHOLE_FACE_INFO stuFaces[10]; 
    UINT nPresetID;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
} ALARM_EVENT_FACE_INFO;
typedef struct tagALARM_IPC_INFO
{
    DWORD dwSize;
    int nChannelID;                          
    int nEventAction;                        
    NET_TIME_EX UTC;                         
    char szName[MAX_ALARM_CHANNEL_NAME_LEN]; 
    int nAlarmChannel;                       
} ALARM_IPC_INFO;
typedef enum tagNASFILE_STATUS_TYPE
{
    EM_NASFILE_STATUS_TYPE_UNKNOW,
    EM_NASFILE_STATUS_TYPE_COPY, 
    EM_NASFILE_STATUS_TYPE_MOVE, 
} NASFILE_STATUS_TYPE;
typedef enum tagNASFILE_STATUS_STATE
{
    EM_NASFILE_STATUS_STATE_UNKNOW,
    EM_NASFILE_STATUS_STATE_FAILED,    
    EM_NASFILE_STATUS_STATE_SUCCESSED, 
} NASFILE_STATUS_STATE;
typedef struct tagALARM_NASFILE_STATUS_INFO
{
    double dbPTS;                                          
    NET_TIME_EX stuTime;                                   
    NASFILE_STATUS_STATE emTaskState;                      
    char szTaskID[DH_COMMON_STRING_128];                   
    NASFILE_STATUS_TYPE emTaskType;                        
    int nSrcNum;                                           
    char szSrcList[MAX_NASFILE_NUM][DH_COMMON_STRING_128]; 
    char szDstPath[DH_COMMON_STRING_128];                  
    int nProgress;                                         
    BYTE byReserved[1028];                                 
} ALARM_NASFILE_STATUS_INFO;
typedef struct tagALARM_TALKING_CANCELCALL_INFO
{
    NET_TIME_EX stuTime;                
    char szCallID[DH_COMMON_STRING_32]; 
} ALARM_TALKING_CANCELCALL_INFO;
typedef struct tagALARM_CROWD_DETECTION_INFO
{
    int nChannelID;                                          
    int nEventID;                                            
    double PTS;                                              
    NET_TIME_EX UTC;                                         
    int nEventAction;                                        
    EM_ALARM_TYPE emAlarmType;                               
    char szName[MAX_CROWD_DETECTION_NAME_LEN];               
    int nCrowdListNum;                                       
    int nRegionListNum;                                      
    NET_CROWD_LIST_INFO stuCrowdList[MAX_CROWD_LIST_NUM];    
    NET_REGION_LIST_INFO stuRegionList[MAX_REGION_LIST_NUM]; 
    NET_EXTENSION_INFO stuExtensionInfo;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                    
    BYTE byReserved[896];                                    
} ALARM_CROWD_DETECTION_INFO;
typedef enum tagEM_VTS_CALLING_STATE
{
    EM_VTS_CALLING_STATE_UNKNOWN, 
    EM_VTS_CALLING_STATE_ANSWER,  
    EM_VTS_CALLING_STATE_HANGUP,  
    EM_VTS_CALLING_STATE_MISSED,  
} EM_VTS_CALLING_STATE;
typedef struct tagALARM_VTS_CALLING_STATE_INFO
{
    char szName[128];                    
    int nChannelID;                      
    int nAction;                         
    double PTS;                          
    NET_TIME_EX UTC;                     
    EM_VTS_CALLING_STATE emCallingState; 
    char szDevID[32];                    
    char szDevIp[64];                    
    BYTE byReserved[896];                
} ALARM_VTS_CALLING_STATE_INFO;
typedef enum tagEM_DETECT_SAFE_GRADE
{
    EM_DETECT_SAFE_GRADE_UNKNOWN, 
    EM_DETECT_SAFE_GRADE_SAFE,    
    EM_DETECT_SAFE_GRADE_DANGER,  
} EM_DETECT_SAFE_GRADE;
typedef struct tagITEM_INFO_ARRAY
{
    char szName[128];    
    UINT nConcentration; 
    BYTE bReserved[892]; 
} NET_ITEM_INFO;
typedef struct tagALARM_DRUG_EXPLOSIVE_DETECTION_INFO
{
    DWORD dwSize;                           
    int nChannelID;                         
    int nAction;                            
    NET_TIME_EX UTC;                        
    char szUserName[128];                   
    EM_DETECT_SAFE_GRADE emDetectSafeGrade; 
    NET_ITEM_INFO stuObjectInfo[16];        
    int nObjectNum;                         
} ALARM_DRUG_EXPLOSIVE_DETECTION_INFO;
typedef enum tagEM_METAL_CONTAINER
{
    EM_METAL_CONTAINER_UNKNOWN, 
    EM_METAL_CONTAINER_NOMETAL, 
    EM_METAL_CONTAINER_METAL,   
} EM_METAL_CONTAINER_TYPE;
typedef struct tagITEM_LIQUID_INFO_ARRY
{
    EM_METAL_CONTAINER_TYPE emMetalcontainer; 
    EM_DETECT_SAFE_GRADE emItemGrade;         
    BYTE bReserved[892];                      
} NET_LIQUID_ITEM_INFO;
typedef struct tagALARM_LIQUID_DETECTION_INFO
{
    DWORD dwSize;                                 
    int nChannelID;                               
    int nAction;                                  
    NET_TIME_EX UTC;                              
    EM_DETECT_SAFE_GRADE emDetectSafeGrade;       
    NET_LIQUID_ITEM_INFO stuLiquidObjectInfo[16]; 
    int nObjectNum;                               
} ALARM_LIQUID_DETECTION_INFO;
typedef enum tagEM_ABSTRACT_STATE
{
    EM_ABSTRACT_UNKNOWN, 
    EM_ABSTRACT_SUCCESS, 
    EM_ABSTRACT_FALSE,   
    EM_ABSTRACT_PROCESS, 
} EM_ABSTRACT_STATE;
typedef enum tagEM_FEATURE_ERROR_CODE
{
    EM_FEATURE_ERROR_SUCCESS,                            
    EM_FEATURE_ERROR_UNKNOWN,                            
    EM_FEATURE_ERROR_IMAGE_FORMAT_ERROR,                 
    EM_FEATURE_ERROR_NOFACE_OR_NOTCLEAR,                 
    EM_FEATURE_ERROR_MULT_FACES,                         
    EM_FEATURE_ERROR_IMAGH_DECODE_FAILED,                
    EM_FEATURE_ERROR_NOT_SUGGEST_STORAGE,                
    EM_FEATURE_ERROR_DATABASE_OPERATE_FAILED,            
    EM_FEATURE_ERROR_GET_IMAGE_FAILED,                   
    EM_FEATURE_ERROR_SYSTEM_EXCEPTION,                   
    EM_FEATURE_ERROR_UNDERSIZED_WIDTH,                   
    EM_FEATURE_ERROR_UNDERSIZED_INTERPUPILLARY_DISTANCE, 
    EM_FEATURE_ERROR_FACE_ALIGNMENT_SCORE_LOW,           
    EM_FEATURE_ERROR_OVERSIZED_FACE_PITCH_ANGLE,         
    EM_FEATURE_ERROR_OVERSIZED_FACE_YAW_ANGLE,           
    EM_FEATURE_ERROR_OVERSIZED_FACE_ROLL_ANGLE,          
    EM_FEATURE_ERROR_FACE_QUALITY_LOW,                   
    EM_FEATURE_ERROR_FACE_DEFINITION_LOW,                
    EM_FEATURE_ERROR_EYE_OCCLUSION,                      
    EM_FEATURE_ERROR_FOREHEAD_OCCLUSION,                 
    EM_FEATURE_ERROR_MOUTH_OCCLUSION,                    
    EM_FEATURE_ERROR_INCOMPLETE_FACE,                    
    EM_FEATURE_ERROR_ABNORMAL_FACE_EXPOSURE,             
    EM_FEATURE_ERROR_FACE_SATURATION_LOW,                
    EM_FEATURE_ERROR_FACE_AREA_OVER_PROPORTION,          
    EM_FEATURE_ERROR_FACE_DETECTION_FAILED               
} EM_FEATURE_ERROR_CODE;
typedef struct tagFACE_FEATURE_ABSTRACT_INFO
{
    EM_ABSTRACT_STATE emAbstractState;    
    int nProcess;                         
    char szUID[DH_MAX_PERSON_ID_LEN];     
    char szGroupId[DH_COMMON_STRING_64];  
    UINT nSucceedCnt;                     
    UINT nFailedCnt;                      
    EM_FEATURE_ERROR_CODE emFeatureError; 
    UINT nToken;                          
    BYTE byReserved[496];                 
} FACE_FEATURE_ABSTRACT_INFO;
typedef struct tagALARM_FACE_FEATURE_ABSTRACT_INFO
{
    int nEventID;                                                      
    NET_TIME_EX UTC;                                                   
    double PTS;                                                        
    BYTE byReserved1[4];                                               
    int nRetAbstractInfo;                                              
    FACE_FEATURE_ABSTRACT_INFO stuAbstractInfo[MAX_ABSTRACT_INFO_NUM]; 
    BYTE byReserved[512];                                              
} ALARM_FACE_FEATURE_ABSTRACT_INFO;
typedef struct tagALARM_RECORD_SCHEDULE_CHANGE_INFO
{
    int nChannelID;      
    int nEventID;        
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventAction;    
    char szUser[DH_COMMON_STRING_128]; 
    BYTE byReserved[1024];             
} ALARM_RECORD_SCHEDULE_CHANGE_INFO;
typedef struct tagALARM_NTP_CHANGE_INFO
{
    int nEventID;                      
    int nEventAction;                  
    double dbPTS;                      
    NET_TIME_EX stuTime;               
    char szUser[DH_COMMON_STRING_128]; 
    BYTE byReserved[1028];             
} ALARM_NTP_CHANGE_INFO;
typedef enum tagEM_RAID_SYNC_STATE
{
    EM_RAID_SYNC_STATE_UNKNOWN = -1,     
    EM_RAID_SYNC_STATE_SELFADAPTION,     
    EM_RAID_SYNC_STATE_SYNCPRIORITY,     
    EM_RAID_SYNC_STATE_BUSINESSPRIORITY, 
    EM_RAID_SYNC_STATE_EQUILIBRIUM,      
} EM_RAID_SYNC_STATE;
typedef struct tagNET_HDDSMART_INFO
{
    int nID;                          
    int nCurrent;                     
    char szName[DH_COMMON_STRING_64]; 
    int nWorst;                       
    int nThreshold;                   
    char szRaw[DH_COMMON_STRING_32];  
    int nPredict;                     
    EM_RAID_SYNC_STATE emSync;        
    BYTE byReserved[512];             
} NET_HDDSMART_INFO;
typedef struct tagALARM_HDD_TEMPERATUREALARM_INFO
{
    int nAction;                         
    int nTemperature;                    
    NET_TIME_EX stuTime;                 
    char szHDDName[DH_COMMON_STRING_64]; 
    NET_HDDSMART_INFO stuHDDSmartInfo;   
    BYTE byReserved[512];                
} ALARM_HDD_TEMPERATUREALARM_INFO;
typedef struct tagALARM_HDD_SHAKEALARM_INFO
{
    int nAction;                         
    NET_TIME_EX stuTime;                 
    char szHDDName[DH_COMMON_STRING_64]; 
    NET_HDDSMART_INFO stuHDDSmartInfo;   
    BYTE byReserved[512];                
} ALARM_HDD_SHAKEALARM_INFO;
typedef enum tagEM_PATROL_STATUS
{
    EM_PATROL_STATUS_UNKNOWN, 
    EM_PATROL_STATUS_START,   
    EM_PATROL_STATUS_END,     
    EM_PATROL_STATUS_FAIL,    
} EM_PATROL_STATUS;
typedef struct tagALARM_PATROL_STATUS_INFO
{
    NET_TIME_EX stuTime;             
    EM_PATROL_STATUS emPatrolStatus; 
    BYTE byReserved[512];            
} ALARM_PATROL_STATUS_INFO;
typedef enum tagEM_AREAARM_TRIGGERMODE
{
    EM_AREAARM_TRIGGERMODE_UNKNOWN,       
    EM_AREAARM_TRIGGERMODE_KEYPAD,        
    EM_AREAARM_TRIGGERMODE_REMOTECONTROL, 
    EM_AREAARM_TRIGGERMODE_USER,          
    EM_AREAARM_TRIGGERMODE_LOCAL,         
    EM_AREAARM_TRIGGERMODE_TIMER,         
    EM_AREAARM_TRIGGERMODE_KEY,           
    EM_AREAARM_TRIGGERMODE_REMOTE,        
    EM_AREAARM_TRIGGERMODE_DSS,           
    EM_AREAARM_TRIGGERMODE_DSSPRO,        
    EM_AREAARM_TRIGGERMODE_DMSS,          
    EM_AREAARM_TRIGGERMODE_PLATFORM,      
} EM_AREAARM_TRIGGERMODE;
typedef enum tagEM_AREAARM_USER
{
    EM_AREAARM_USER_UNKNOWN, 
    EM_AREAARM_USER_SUPERVISOR,
    EM_AREAARM_USER_MANAGER,   
    EM_AREAARM_USER_MASTER,    
    EM_AREAARM_USER_USER,      
    EM_AREAARM_USER_TEMPORARY, 
    EM_AREAARM_USER_DURESS,    
    EM_AREAARM_USER_PATROL,    
} EM_AREAARM_USER;
typedef enum tagEM_ARM_STATE
{
    EM_ARM_STATE_UNKNOWN,                  
    EM_ARM_STATE_TOTAL_ARMING,             
    EM_ARM_STATE_PARTIAL1_ARMING,          
    EM_ARM_STATE_PARTIAL2_ARMING,          
    EM_ARM_STATE_PARTIAL1_PARTIAL2_ARMING, 
    EM_ARM_STATE_FORCEARMING,              
    EM_ARM_STATE_DISARMING,                
} EM_ARM_STATE;
typedef struct tagALARM_AREAARM_MODECHANGE_INFO
{
    int nAreaIndex;                       
    int nEventID;                         
    NET_TIME_EX UTC;                      
    EM_AREAARM_TRIGGERMODE emTriggerMode; 
    EM_AREAARM_USER emUser;               
    UINT nID;                             
    EM_ARM_STATE emArmState;              
    BYTE byReserved[1024];                
} ALARM_AREAARM_MODECHANGE_INFO;
typedef struct tagNET_ALARM_ZONE_MODE_CHANGE_STATUS
{
    int nIndex;          
    int nAreasCount;     
    int nAreas[64];      
    char szMode[32];     
    char szReserved[64]; 
} NET_ALARM_ZONE_MODE_CHANGE_STATUS;
typedef struct tagNET_ALARM_ZONE_MODE_CHANGE_INFO
{
    int nAction;         
    int nChannelID;      
    NET_TIME_EX stuTime; 
    EM_AREAARM_TRIGGERMODE emTriggerMode;             
    char szUser[16];                                  
    UINT nID;                                         
    UINT nUserCode;                                   
    int nStatusCount;                                 
    NET_ALARM_ZONE_MODE_CHANGE_STATUS stuStatus[256]; 
    char szReserved[1024];                            
} NET_ALARM_ZONE_MODE_CHANGE_INFO;
typedef struct tagNET_ALARM_PSTN_PERIODIC_TEST_INFO
{
    int nAction;         
    int nChannelID;      
    NET_TIME_EX stuTime; 
    char szReserved[1024]; 
} NET_ALARM_PSTN_PERIODIC_TEST_INFO;
typedef enum tagEM_LOSTMODULE_TYPE
{
    EM_LOSTMODULE_TYPE_UNKNOWN,  
    EM_LOSTMODULE_TYPE_WIRED,    
    EM_LOSTMODULE_TYPE_WIRELESS, 
} EM_LOSTMODULE_TYPE;
#define MAX_ZONE_NUMBER 72     
#define MAX_ZONE_NUMBER_EX 256 
typedef struct tagALARM_ZONEMODULE_LOST_INFO
{
    EM_LOSTMODULE_TYPE emType;     
    int nEventID;                  
    NET_TIME_EX UTC;               
    int nZones;                    
    int arrZones[MAX_ZONE_NUMBER]; 
    bool bOnLine;                  
    BYTE byReserved1[3];           
    BYTE byReserved[1024];         
} ALARM_ZONEMODULE_LOST_INFO;
typedef enum tagEM_DEFENCE_AREA_TYPE
{
    EM_DEFENCE_AREA_TYPE_UNKNOWN, 
    EM_DEFENCE_AREA_TYPE_INTIME,  
    EM_DEFENCE_AREA_TYPE_DELAY,   
    EM_DEFENCE_AREA_TYPE_DELAY2,  
    EM_DEFENCE_AREA_TYPE_FOLLOW,  
    EM_DEFENCE_AREA_TYPE_EXITEND, 
    EM_DEFENCE_AREA_TYPE_FULLDAY, 
    EM_DEFENCE_AREA_TYPE_FIRE,    
    EM_DEFENCE_AREA_TYPE_PANIC,   
    EM_DEFENCE_AREA_TYPE_ROBBERY, 
    EM_DEFENCE_AREA_TYPE_MEDICAL, 
    EM_DEFENCE_AREA_TYPE_KEY,     
} EM_DEFENCE_AREA_TYPE;
typedef enum tagEM_AREAALARM_TRIGGER_TYPE
{
    EM_AREAALARM_TRIGGER_TYPE_UNKNOWN, 
    EM_AREAALARM_TRIGGER_TYPE_ALARM,   
    EM_AREAALARM_TRIGGER_TYPE_TAMPER,  
    EM_AREAALARM_TRIGGER_TYPE_MASK,    
    EM_AREAALARM_TRIGGER_TYPE_SHORT,   
} EM_AREAALARM_TRIGGER_TYPE;
typedef struct tagALARM_AREAALARM_INFO
{
    int nAreaIndex;                         
    int nEventID;                           
    NET_TIME_EX UTC;                        
    char szName[128];                       
    EM_DEFENCE_AREA_TYPE emDefenceAreaType; 
    int nIndex;                             
    EM_AREAALARM_TRIGGER_TYPE emTrigerType; 
    BYTE byReserved[1024];                  
} ALARM_AREAALARM_INFO;
#define MAX_AREA_NUMBER 8     
#define MAX_AREA_NUMBER_EX 64 
typedef struct tagALARM_ZONEOPEN_INFO
{
    int nAction;                   
    int nEventID;                  
    NET_TIME_EX UTC;               
    char szName[128];              
    int nAreaNum;                  
    int arrAreas[MAX_AREA_NUMBER]; 
    int nChannelID;                
    BYTE byReserved[1024];         
} ALARM_ZONEOPEN_INFO;
typedef struct tagALARM_SYSTEMTAMPER_INFO
{
    int nAction;           
    int nEventID;          
    NET_TIME_EX UTC;       
    BYTE byReserved[1024]; 
} ALARM_SYSTEMTAMPER_INFO;
typedef struct tagALARM_CITIZEN_PICTURE_COMPARE_INFO
{
    int nChannelID;                         
    int nEventID;                           
    NET_TIME_EX stuTime;                    
    BOOL bCompareResult;                    
    BYTE nSimilarity;                       
    BYTE nThreshold;                        
    BYTE byReserved1[2];                    
    EM_CITIZENIDCARD_SEX_TYPE emSex;        
    int nECType;                            
    char szCitizen[DH_COMMON_STRING_64];    
    char szAddress[DH_COMMON_STRING_256];   
    char szNumber[DH_COMMON_STRING_64];     
    char szAuthority[DH_COMMON_STRING_256]; 
    NET_TIME stuBirth;                      
    NET_TIME stuValidityStart;              
    BOOL bLongTimeValidFlag;                
    NET_TIME stuValidityEnd;                
    char szCardNo[DH_COMMON_STRING_32];     
    char szCellPhone[DH_COMMON_STRING_32];  
    UINT nEventType;                        
    char szUserID[32];                      
    UINT nFaceIndex;                        
    EM_MASK_STATE_TYPE emMask;              
    int nScore;                             
    char szIDPhysicalNumber[20];            
    BYTE byReserved[956];                   
} ALARM_CITIZEN_PICTURE_COMPARE_INFO;
typedef struct tagALARM_HDD_HEALTHALARM_INFO
{
    int nAction;                         
    NET_TIME_EX stuTime;                 
    char szHDDName[DH_COMMON_STRING_64]; 
    NET_HDDSMART_INFO stuHDDSmartInfo;   
    BYTE byReserved[512];                
} ALARM_HDD_HEALTHALARM_INFO;
typedef struct tagALARM_STORAGE_WORKDIRECTORY_SWITCH_INFO
{
    NET_TIME_EX stuTime;               
    char szGroup[DH_COMMON_STRING_64]; 
} ALARM_STORAGE_WORKDIRECTORY_SWITCH_INFO;
typedef struct tagHOMESCENE_STATE_INFO
{
    char szName[128];     
    BOOL bOnline;         
    BYTE byReserved[512]; 
} HOMESCENE_STATE_INFO;
typedef struct tagALARM_HOMESCENE_CHANGE_INFO
{
    char szSceneID[32];            
    HOMESCENE_STATE_INFO stuState; 
    BYTE byReserved[512];          
} ALARM_HOMESCENE_CHANGE_INFO;
typedef enum tagEM_BOARDHOTPLUG_ACTION
{
    EM_BOARDHOTPLUG_ACTION_UNKNOWN, 
    EM_BOARDHOTPLUG_ACTION_ADD,     
    EM_BOARDHOTPLUG_ACTION_REMOVE,  
} EM_BOARDHOTPLUG_ACTION;
typedef struct tagALARM_DEVBOARDHOTPLUG_INFO
{
    NET_TIME_EX stuTime;                  
    EM_BOARDHOTPLUG_ACTION emBoardAction; 
    int nBoardSlot;                       
    BYTE byReserved[512];                 
} ALARM_DEVBOARDHOTPLUG_INFO;
typedef struct tagALARM_TRAFFIC_LINKAGEALARM_INFO
{
    NET_TIME_EX stuTime;              
    char szCode[DH_COMMON_STRING_32]; 
    BYTE byReserved[1024];            
} ALARM_TRAFFIC_LINKAGEALARM_INFO;
typedef struct tagALARM_COAXIAL_ALARM_LOCAL_INFO
{
    int nAction;     
    NET_TIME_EX UTC; 
    int nAlarmChannel;                    
    NET_SENSE_METHOD emSenseMethod;       
    char szName[MAX_COMMON_STRING_64];    
    int nChannelID;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1020];                
} ALARM_COAXIAL_ALARM_LOCAL_INFO;
typedef struct tagALARM_NAS_FILE_REMOVE_STATUS_INFO
{
    int nEventID;        
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    NASFILE_STATUS_STATE emStatus;    
    char szID[MAX_COMMON_STRING_128]; 
    UINT nProgress;                   
    BYTE byReserved[1028];            
} ALARM_NAS_FILE_REMOVE_STATUS_INFO;
typedef struct tagALARM_NAS_APK_INSTALL_REQUEST_INFO
{
    DWORD dwSize;
    char szApkPath[MAX_COMMON_STRING_128]; 
} ALARM_NAS_APK_INSTALL_REQUEST_INFO;
typedef enum tagEM_NAS_APK_INSTALL_STATUS
{
    EM_NAS_APK_INSTALL_STATUS_UNKNOWN,    
    EM_NAS_APK_INSTALL_STATUS_FAILED,     
    EM_NAS_APK_INSTALL_STATUS_SUCCEED,    
    EM_NAS_APK_INSTALL_STATUS_INSTALLING, 
} EM_NAS_APK_INSTALL_STATUS;
typedef struct tagALARM_NAS_APK_INSTALL_STATUS_INFO
{
    int nEventID;        
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    EM_NAS_APK_INSTALL_STATUS emStatus;    
    char szApkPath[MAX_COMMON_STRING_128]; 
    UINT nProgress;                        
    BYTE byReserved[1028];                 
} ALARM_NAS_APK_INSTALL_STATUS_INFO;
typedef enum tagEM_FILE_COMPRESS_TYPE
{
    EM_FILE_COMPRESS_TYPE_UNKNOWN,    
    EM_FILE_COMPRESS_TYPE_COMPRESS,   
    EM_FILE_COMPRESS_TYPE_DECOMPRESS, 
} EM_FILE_COMPRESS_TYPE;
typedef enum tagEM_FILE_COMPRESS_STATUS
{
    EM_FILE_COMPRESS_STATUS_UNKNOWN,   
    EM_FILE_COMPRESS_STATUS_FAILED,    
    EM_FILE_COMPRESS_STATUS_SUCCEED,   
    EM_FILE_COMPRESS_STATUS_NEED_PWD,  
    EM_FILE_COMPRESS_STATUS_WRONG_PWD, 
    EM_FILE_COMPRESS_STATUS_NO_FILE,   
} EM_FILE_COMPRESS_STATUS;
typedef struct tagALARM_FILE_COMPRESS_STATUS_INFO
{
    int nEventID;        
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    char szID[MAX_COMMON_STRING_128];                       
    EM_FILE_COMPRESS_TYPE emType;                           
    int nSrcNum;                                            
    char szSrcList[MAX_NASFILE_NUM][MAX_COMMON_STRING_128]; 
    char szDstPath[MAX_COMMON_STRING_128];                  
    EM_FILE_COMPRESS_STATUS emStatus;                       
    UINT nProgress;                                         
    BYTE byReserved[1024];                                  
} ALARM_FILE_COMPRESS_STATUS_INFO;
typedef struct tagALARM_STRANGER_ALARM_INFO
{
    int nChannelID;        
    int nEventID;          
    int nAction;           
    NET_TIME_EX UTC;       
    BYTE byReserved[1024]; 
} ALARM_STRANGER_ALARM_INFO;
typedef struct tagALARM_QR_CODE_CHECK_INFO
{
    int nEventID;          
    NET_TIME_EX UTC;       
    double dbPTS;          
    char szQRCode[256];    
    int nChannelID;        
    BYTE byReserved[1020]; 
} ALARM_QR_CODE_CHECK_INFO;
typedef enum tagEM_LOCK_MODE
{
    EM_MODE_UNKNOWN = -1,    
    EM_MODE_NORMAL = 0,      
    EM_MODE_CHANNEL = 1,     
    EM_MODE_UNDISTURBED = 2, 
} EM_LOCK_MODE;
typedef struct tagALARM_ACCESS_CTL_LOCK_MODE_INFO
{
    int nEventID;            
    NET_TIME_EX UTC;         
    double dbPTS;            
    char szSN[32];           
    EM_LOCK_MODE emLockMode; 
    BYTE byReserved[1020];   
} ALARM_ACCESS_CTL_LOCK_MODE_INFO;
typedef struct tagALARM_LOCK_ROOM_NUM_BIND_INFO
{
    int nEventID;         
    NET_TIME_EX UTC;      
    double dbPTS;         
    char szSN[32];        
    char szName[64];      
    UINT nTaskID;         
    char szRoomNo[64];    
    BYTE byReserved[956]; 
} ALARM_LOCK_ROOM_NUM_BIND_INFO;
typedef struct tagALARM_LEAVE_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX UTC;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_LEAVE_DETECTION_INFO;
typedef struct tagALARM_LANE_INFO
{
    UINT nQueueLen;              
    UINT nLane;                  
    UINT nUserDefinedLaneNumber; 
    BYTE byReserved[256];        
} ALARM_LANE_INFO;
typedef struct tagALARM_TRAFFICGZJJ_QUEUE_LEN_INFO
{
    int nChannelID;  
    int nAction;     
    double dbPTS;    
    NET_TIME_EX UTC; 
    int nEventID;    
    UINT nPeriodByMs;                
    ALARM_LANE_INFO stuAlarmLane[5]; 
    BYTE byReserved[1024];           
} ALARM_TRAFFICGZJJ_QUEUE_LEN_INFO;
typedef enum _EM_NET_CARTYPE
{
    NET_CARTYPE_UNKNOW = 0,             
    NET_CARTYPE_PASSENGERCAR,           
    NET_CARTYPE_LARGETRUCK,             
    NET_CARTYPE_MIDTRUCK,               
    NET_CARTYPE_SALOONCAR,              
    NET_CARTYPE_MICROBUS,               
    NET_CARTYPE_MICROTRUCK,             
    NET_CARTYPE_TRICYCLE,               
    NET_CARTYPE_MOTOR,                  
    NET_CARTYPE_PASSERBY,               
    NET_CARTYPE_SUVMPV,                 
    NET_CARTYPE_MIDPASSENGERCAR,        
    NET_CARTYPE_TANKCAR,                
    NET_CARTYPE_SUV,                    
    NET_CARTYPE_MPV,                    
    NET_CARTYPE_BUS,                    
    NET_CARTYPE_PICKUP,                 
    NET_CARTYPE_MINICARRIAGE,           
    NET_CARTYPE_OILTANKTRUCK,           
    NET_CARTYPE_SLOTTANKCAR,            
    NET_CARTYPE_RESERVED1,              
    NET_CARTYPE_DREGSCAR,               
    NET_CARTYPE_CONCRETEMIXERTRUCK,     
    NET_CARTYPE_TAXI,                   
    NET_CARTYPE_POLICE,                 
    NET_CARTYPE_AMBULANCE,              
    NET_CARTYPE_GENERAL,                
    NET_CARTYPE_WATERINGCAR,            
    NET_CARTYPE_RESERVED2,              
    NET_CARTYPE_FIREENGINE,             
    NET_CARTYPE_TRACTOR,                
    NET_CARTYPE_MACHINESHOPTRUCK,       
    NET_CARTYPE_POWERLOTVEHICLE,        
    NET_CARTYPE_SUCTIONSEWAGETRUCK,     
    NET_CARTYPE_NORMALVEHICLETANKTRUCK, 
    NET_CARTYPE_TWOCYCLE,               
} EM_NET_CARTYPE;
typedef struct tagCOILS_INFO
{
    UINT nCarId;              
    char PlateNum[64];        
    EM_NET_CARTYPE emCarType; 
    UINT nDirection;          
    BYTE byReserved[1020];    
} COILS_INFO;
typedef struct tagLANE_INFO
{
    UINT nLane;                     
    int nLaneType;                  
    double dbLaneOcc;               
    UINT nRoadwayNumber;            
    int nCurrentLaneVehicleNum;     
    int nVehicleNum;                
    UINT nCarId;                    
    double dbCarEnterTime;          
    double dbCarLeaveTime;          
    UINT nCarDistance;              
    int nQueueLen;                  
    double dbCarSpeed;              
    int nCoilsInfoNum;              
    COILS_INFO stuCoilsInfo[70][2]; 
    int nRetSolidLanNum;            
    int nSolidLaneNum[6];           
    int nVehicleNumByTypeNum;       
    UINT nVehicleNumByType[64];     
    int nEndLen;                    
    BYTE byReserved[1024];          
} LANE_INFO;
typedef struct tagALARM_TRAFFIC_XINKONG_INFO
{
    int nChannelID;  
    int nAction;     
    double dbPTS;    
    NET_TIME_EX UTC; 
    int nEventID;    
    char szName[128];          
    BYTE byReserved1[4];       
    int nLaneInfoNum;          
    LANE_INFO stuLaneInfo[6];  
    UINT nVirtualCoilHeight;   
    UINT nVirtualCoilNumber;   
    int nRangeTime;            
    int nCurrentAllVehicleNum; 
    int nPedestrationNum;      
    int nNonMotorNum;          
    BYTE byReserved[1000];     
} ALARM_TRAFFIC_XINKONG_INFO;
typedef enum tagEM_PERIPHERAL_EXCEPTION_TYPE
{
    EM_PERIPHERAL_EXCEPTION_TYPE_UNKNOWN = 0,       
    EM_PERIPHERAL_EXCEPTION_TYPE_RFID_OFFLINE,      
    EM_PERIPHERAL_EXCEPTION_TYPE_RFID_OUTAGE,       
    EM_PERIPHERAL_EXCEPTION_TYPE_LIDAR_OFFLINE,     
    EM_PERIPHERAL_EXCEPTION_TYPE_LIDAR_OUTAGE,      
    EM_PERIPHERAL_EXCEPTION_TYPE_SCREEN_OUTAGE,     
    EM_PERIPHERAL_EXCEPTION_TYPE_TRUMPET_OUTAGE,    
    EM_PERIPHERAL_EXCEPTION_TYPE_ALARMLIGHT_OUTAGE, 
} EM_PERIPHERAL_EXCEPTION_TYPE;
typedef enum tagEM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE
{
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_UNKNOWN = 0,          
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_RFID_OFFLINE,         
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_RFID_OUTAGE,          
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_LIDAR_OFFLINE,        
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_LIDAR_OUTAGE,         
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_SCREEN_OUTAGE,        
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_TRUMPET_OUTAGE,       
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_ALARMLIGHT_OUTAGE,    
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_CAMERA_OFFLINE,       
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_RCD_OFFLINE,          
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_RADAR_OFFLINE,        
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_FLASHLAMP_OFFLINE,    
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_STROBOLAMP_OFFLINE,   
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE_FLASHLAMELIF_WARNING, 
} EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE;
typedef struct tagALARM_DEVICE_ABNORMAL_INFO
{
    int nIndex;         
    int nAction;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szName[128];   
    EM_PERIPHERAL_EXCEPTION_TYPE emPeripheralType;               
    EM_ABNORMAL_PERIPHERAL_EXCEPTION_TYPE emAbnormalTypeList[4]; 
    unsigned int nAbnormalTypeListRealLen;                       
    BYTE byReserved[1000];                                       
} ALARM_DEVICE_ABNORMAL_INFO;
typedef enum tagEM_JABLOTRON_ALARM_TYPE
{
    EM_JABLOTRON_ALARM_TYPE_UNKNOWN,   
    EM_JABLOTRON_ALARM_TYPE_INTRUSION, 
    EM_JABLOTRON_ALARM_TYPE_FIRE,      
    EM_JABLOTRON_ALARM_TYPE_PANIC,     
    EM_JABLOTRON_ALARM_TYPE_ARMED,     
    EM_JABLOTRON_ALARM_TYPE_DISARMED,  
    EM_JABLOTRON_ALARM_TYPE_PG,        
} EM_JABLOTRON_ALARM_TYPE;
typedef struct tagHMS_TIME
{
    DWORD dwHour;   
    DWORD dwMinute; 
    DWORD dwSecond; 
} HMS_TIME;
typedef struct tagALARM_JABLOTRONALARM_INFO
{
    int nChannelID;                      
    int nAction;                         
    char szName[128];                    
    EM_JABLOTRON_ALARM_TYPE emAlarmType; 
    unsigned int nDefenceZone;           
    HMS_TIME stuTime;                    
    BYTE byReserved[1024];               
} ALARM_JABLOTRONALARM_INFO;
typedef struct tagNET_CFG_FACE_BOX_COLOR
{
    int nFaceID;             
    NET_COLOR_RGBA stuColor; 
    BYTE byReserved[108];    
} NET_CFG_FACE_BOX_COLOR;
typedef struct tagALARM_FACE_RECOGNITION_INFO
{
    int nChannelID;                         
    int nAction;                            
    NET_TIME_EX UTC;                        
    NET_CFG_FACE_BOX_COLOR stuFaceBoxColor; 
    BYTE byReserved[4096];                  
} ALARM_FACE_RECOGNITION_INFO;
typedef struct tagALARM_VEHICLE_OILLEVEL_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX UTC;       
    float fOilLevel;       
    BYTE byReserved[1024]; 
} ALARM_VEHICLE_OILLEVEL_INFO;
typedef struct tagALARM_VEHICLE_LOAD_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX UTC;       
    UINT nADValue;         
    float fLoad;           
    BYTE byReserved[1024]; 
} ALARM_VEHICLE_LOAD_INFO;
typedef enum tagEM_ENGINE_FAILURE_STATUS
{
    EM_ENGINE_FAILURE_UNKNOWN = 0,  
    EM_ENGINE_FAILURE_NOTACTIVE,    
    EM_ENGINE_FAILURE_ACTIVE,       
    EM_ENGINE_FAILURE_BLINK,        
    EM_ENGINE_FAILURE_NOTAVAILABLE, 
} EM_ENGINE_FAILURE_STATUS;
typedef struct tagALARM_ENGINE_FAILURE_STATUS_INFO
{
    int nChannelID;                    
    int nAction;                       
    NET_TIME_EX UTC;                   
    EM_ENGINE_FAILURE_STATUS emStatus; 
    NET_GPS_STATUS_INFO stuGPS;        
    BYTE byReserved[1024];             
} ALARM_ENGINE_FAILURE_STATUS_INFO;
typedef enum tagEM_VEHICLE_STATE
{
    EM_VEHICLE_STATE_UNKNOWN = 0,
    EM_VEHICLE_STATE_PARK,   
    EM_VEHICLE_STATE_MOTION, 
    EM_VEHICLE_STATE_SPORT,  
} EM_VEHICLE_STATE;
typedef enum tagEM_VEHICLE_GEARS_TYPE
{
    EM_VEHICLE_GEARS_UNKNOWN = -1,
    EM_VEHICLE_GEARS_P, 
    EM_VEHICLE_GEARS_R, 
    EM_VEHICLE_GEARS_N, 
    EM_VEHICLE_GEARS_D, 
    EM_VEHICLE_GEARS_S, 
} EM_VEHICLE_GEARS_TYPE;
typedef enum tagEM_COVER_STATUS
{
    EM_COVER_STATUS_UNKNOWN = 0, 
    EM_COVER_STATUS_NOT_COVER,   
    EM_COVER_STATUS_COVER,       
} EM_COVER_STATUS;
typedef enum tagEM_LIFT_STATUS
{
    EM_LIFT_STATUS_UNKNOWN = 0, 
    EM_LIFT_STATUS_NOT_LIFT,    
    EM_LIFT_STATUS_LIFT,        
} EM_LIFT_STATUS;
typedef enum tagEM_LOAD_STATUS
{
    EM_LOAD_STATUS_UNKNOWN = 0, 
    EM_LOAD_STATUS_NOT_LOAD,    
    EM_LOAD_STATUS_LOAD,        
} EM_LOAD_STATUS;
typedef struct tagALARM_VEHICLE_STATE_INFO
{
    int nChannelID;  
    int nAction;     
    NET_TIME_EX UTC; 
    EM_VEHICLE_STATE emVehicleState;     
    UINT nOilTankage;                    
    UINT nCurrentFuel;                   
    UINT nConsumptionOil;                
    UINT nTotalUsedFuel;                 
    UINT nTotalDistance;                 
    int nServiceDistance;                
    EM_VEHICLE_GEARS_TYPE emCurrentGear; 
    UINT nSpeed;                         
    char szTaskID[64];                   
    NET_GPS_STATUS_INFO stuGPS;          
    int nAlarmFlag;                      
    EM_COVER_STATUS emCoverStatus;       
    EM_LIFT_STATUS emLiftStatus;         
    EM_LOAD_STATUS emLoadStatus;         
    BYTE byReserved[1008];               
} ALARM_VEHICLE_STATE_INFO;
typedef struct tagALARM_IMSI_CHECK_INFO
{
    int nIndex;      
    int nAction;     
    NET_TIME_EX UTC; 
    char szIMSI[32];       
    BYTE byReserved[1024]; 
} ALARM_IMSI_CHECK_INFO;
typedef struct tagALARM_BLIND_ALARM_INFO
{
    int nChannelID;  
    int nAction;     
    NET_TIME_EX UTC; 
    NET_GPS_STATUS_INFO stuGPS; 
    BYTE byReserved[1024];      
} ALARM_BLIND_ALARM_INFO;
typedef struct tagALARM_VEHICLE_MAINTAINCE_INFO
{
    int nIndex;      
    int nAction;     
    NET_TIME_EX UTC; 
    char szMaintainer[32];   
    char szMaintainerID[32]; 
    char szInfo[256];        
    BYTE byReserved[1024];   
} ALARM_VEHICLE_MAINTAINCE_INFO;
typedef struct tagALARM_FIRE_DETECTION_INFO
{
    int nChannelID;  
    int nAction;     
    NET_TIME_EX UTC; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_FIRE_DETECTION_INFO;
typedef enum tagEM_PARKINGLOCK_STATE
{
    EM_PARKINGLOCK_STATE_UNKNOWN = 0, 
    EM_PARKINGLOCK_STATE_LOCKRISE,    
    EM_PARKINGLOCK_STATE_LOCKDOWN,    
    EM_PARKINGLOCK_STATE_LOCKERROR,   
} EM_PARKINGLOCK_STATE;
typedef enum tagEM_TRIGGER_SOURCE
{
    EM_TRIGGER_SOURCE_UNKNOWN = 0,    
    EM_TRIGGER_SOURCE_SWING_ARM,      
    EM_TRIGGER_SOURCE_BLUETOOTH,      
    EM_TRIGGER_SOURCE_RS485,          
    EM_TRIGGER_SOURCE_ULTRASOUND,     
    EM_TRIGGER_SOURCE_REMOTE_CONTROL, 
} EM_TRIGGER_SOURCE;
typedef struct tagALARM_PARKINGLOCK_STATE_INFO
{
    int nIndex;      
    int nAction;     
    NET_TIME_EX UTC; 
    UINT nLane;                        
    EM_PARKINGLOCK_STATE emState;      
    EM_TRIGGER_SOURCE emTriggerSource; 
    BYTE byReserved[1024];             
} ALARM_PARKINGLOCK_STATE_INFO;
typedef enum tagEM_SERVERNAME
{
    EM_SERVERNAME_UNKNOWN, 
    EM_SERVERNAME_NFS,     
    EM_SERVERNAME_FTP,     
    EM_SERVERNAME_SAMBA,   
    EM_SERVERNAME_ISCSI,   
} EM_SERVERNAME;
typedef struct tagALARM_NAS_SERVER_STATE_INFO
{
    int nAction;                          
    NET_TIME_EX UTC;                      
    EM_SERVERNAME emServerNames[4];       
    int nRetServerNamesNum;               
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_NAS_SERVER_STATE_INFO;
typedef struct tagALARM_VOLUME_GROUP_FAULT_INFO
{
    int nAction;                          
    NET_TIME_EX UTC;                      
    char szName[32];                      
    char szMembers[512][32];              
    int nRetMembersNum;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_VOLUME_GROUP_FAULT_INFO;
typedef struct tagALARM_DISK_CHECK_INFO
{
    int nAction;                          
    NET_TIME_EX UTC;                      
    char szName[128];                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_DISK_CHECK_INFO;
typedef struct tagALARM_CITY_MOTORPARKING_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    EM_CLASS_TYPE emClassType;                   
    int nObjectNum;                              
    DH_MSG_OBJECT stuObjects[64];                
    char szPresetName[64];                       
    UINT nPresetID;                              
    int nDetectRegionNum;                        
    DH_POINT DetectRegion[20];                   
    char szSourceID[32];                         
    UINT nParkingDuration;                       
    BOOL bPtzPosition;                           
    PTZ_NORMALIZED_POSITION_UNIT stuPtzPosition; 
    EM_CITYMOTOR_STATUS emMotorStatus;           
    NET_EVENT_INFO_EXTEND stuEventInfoEx;        
    BYTE byReserved[2028];                       
} ALARM_CITY_MOTORPARKING_INFO;
typedef struct tagNET_IN_START_BURN_SESSION
{
    DWORD dwSize;
    unsigned int nSessionID; 
} NET_IN_START_BURN_SESSION;
typedef struct tagNET_OUT_START_BURN_SESSION
{
    DWORD dwSize;
} NET_OUT_START_BURN_SESSION;
typedef enum tagNET_BURN_MODE
{
    BURN_MODE_SYNC,  
    BURN_MODE_TURN,  
    BURN_MODE_CYCLE, 
} NET_BURN_MODE;
typedef enum tagNET_BURN_EXTMODE
{
    BURN_EXTMODE_UNKNOWN,    
    BURN_EXTMODE_NORMAL = 1, 
    BURN_EXTMODE_NODISK,     
} NET_BURN_EXTMODE;
typedef enum tagNET_BURN_RECORD_PACK
{
    BURN_PACK_DHAV, 
    BURN_PACK_PS,   
    BURN_PACK_ASF,  
    BURN_PACK_MP4,  
    BURN_PACK_TS,   
} NET_BURN_RECORD_PACK;
typedef struct tagNET_IN_START_BURN
{
    DWORD dwSize;
    DWORD dwDevMask;                        
    int nChannels[DH_MAX_BURN_CHANNEL_NUM]; 
    int nChannelCount;                      
    NET_BURN_MODE emMode;                   
    NET_BURN_RECORD_PACK emPack;            
    NET_BURN_EXTMODE emExtMode;             
} NET_IN_START_BURN;
typedef struct tagNET_OUT_START_BURN
{
    DWORD dwSize;
} NET_OUT_START_BURN;
typedef struct tagNET_IN_BURN_MAAK_TAG
{
    DWORD dwSize;
    const char* pszDescInfo; 
} NET_IN_BURN_MARK_TAG;
typedef struct tagNET_OUT_BURN_MAAK_TAG
{
    DWORD dwSize;
} NET_OUT_BURN_MARK_TAG;
typedef struct tagNET_IN_BURN_CHANGE_DISK
{
    DWORD dwSize;
    BOOL nAction; 
} NET_IN_BURN_CHANGE_DISK;
typedef struct tagNET_OUT_BURN_CHANGE_DISK
{
    DWORD dwSize;
} NET_OUT_BURN_CHANGE_DISK;
typedef enum tagNET_BURN_STATE
{
    BURN_STATE_STOP,               
    BURN_STATE_STOPING,            
    BURN_STATE_INIT,               
    BURN_STATE_BURNING,            
    BURN_STATE_PAUSE,              
    BURN_STATE_CHANGE_DISK,        
    BURN_STATE_PREPARE_EXTRA_FILE, 
    BURN_STATE_WAIT_EXTRA_FILE,    
    BURN_STATE_UPLOAD_FILE_START,  
    BURN_STATE_CHECKING_DISK,      
    BURN_STATE_DISK_READY,         
} NET_BURN_STATE;
typedef enum tagNET_BURN_ERROR_CODE
{
    BURN_CODE_NORMAL,        
    BURN_CODE_UNKNOWN_ERROR, 
    BURN_CODE_SPACE_FULL,    
    BURN_CODE_START_ERROR,   
    BURN_CODE_STOP_ERROR,    
    BURN_CODE_WRITE_ERROR,   
    BURN_CODE_UNKNOWN,       
} NET_BURN_ERROR_CODE;
typedef struct tagNET_IN_BURN_GET_STATE
{
    DWORD dwSize;
} NET_IN_BURN_GET_STATE;
typedef enum tagEM_NET_BURN_DEV_USED_STATE
{
    EM_NET_BURN_DEV_USED_STATE_UNKNOWN, 
    EM_NET_BURN_DEV_USED_STATE_STOP,    
    EM_NET_BURN_DEV_USED_STATE_BURNING, 
} EM_NET_BURN_DEV_USED_STATE;
typedef enum tagEM_DISK_STATE
{
    EM_DISK_STATE_UNKNOWN,     
    EM_DISK_STATE_EXIST,       
    EM_DISK_STATE_NO_EXIST,    
    EM_DISK_STATE_NEED_CHANGE, 
} EM_DISK_STATE;
typedef struct tagNET_BURN_DEV_STATE
{
    DWORD dwSize;
    int nDeviceID;                          
    char szDevName[DH_BURNING_DEV_NAMELEN]; 
    DWORD dwTotalSpace;                     
    DWORD dwRemainSpace;                    
    EM_NET_BURN_DEV_USED_STATE emUsedType;  
    NET_BURN_ERROR_CODE emError;            
    EM_DISK_STATE emDiskState;              
} NET_BURN_DEV_STATE;
typedef struct tagNET_OUT_BURN_GET_STATE
{
    DWORD dwSize;
    NET_BURN_STATE emState;                                 
    NET_BURN_ERROR_CODE emErrorCode;                        
    DWORD dwDevMask;                                        
    int nChannels[DH_MAX_BURN_CHANNEL_NUM];                 
    int nChannelCount;                                      
    NET_BURN_MODE emMode;                                   
    NET_BURN_RECORD_PACK emPack;                            
    int nFileIndex;                                         
    NET_TIME stuStartTime;                                  
    NET_BURN_DEV_STATE stuDevState[DH_MAX_BURNING_DEV_NUM]; 
    int nRemainTime;                                        
    NET_BURN_EXTMODE emExtMode;                             
} NET_OUT_BURN_GET_STATE;
typedef struct tagNET_CB_BURNSTATE
{
    DWORD dwSize;
    const char* szState;        
    const char* szFileName;     
    unsigned int dwTotalSpace;  
    unsigned int dwRemainSpace; 
    const char* szDeviceName;   
    int nRemainTime;            
} NET_CB_BURNSTATE;
typedef void(CALLBACK* fAttachBurnStateCB)(LLONG lLoginID, LLONG lAttachHandle, NET_CB_BURNSTATE* pBuf, int nBufLen, LDWORD dwUser);
typedef void(CALLBACK* fAttachBurnStateCBEx)(LLONG lLoginID, LLONG lAttachHandle, NET_OUT_BURN_GET_STATE* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_STATE
{
    DWORD dwSize;
    const char* szDeviceName;             
    fAttachBurnStateCB cbAttachState;     
    LDWORD dwUser;                        
    LLONG lBurnSession;                   
    fAttachBurnStateCBEx cbAttachStateEx; 
    LDWORD dwUserEx;                      
} NET_IN_ATTACH_STATE;
typedef struct tagNET_OUT_ATTACH_STATE
{
    DWORD dwSize;
} NET_OUT_ATTACH_STATE;
typedef void(CALLBACK* fBurnFileCallBack)(LLONG lLoginID, LLONG lUploadHandle, int nTotalSize, int nSendSize, LDWORD dwUser);
typedef struct tagNET_IN_FILEBURNED_START
{
    DWORD dwSize;
    const char* szMode;          
    const char* szDeviceName;    
    const char* szFilename;      
    fBurnFileCallBack cbBurnPos; 
    LDWORD dwUser;               
    LLONG lBurnSession;          
} NET_IN_FILEBURNED_START;
typedef struct tagNET_OUT_FILEBURNED_START
{
    DWORD dwSize;
    char szState[DH_MAX_NAME_LEN]; 
} NET_OUT_FILEBURNED_START;
typedef struct tagNET_BURN_CASE_INFO
{
    DWORD dwSize;
    int nChannel;                                                     
    NET_TIME stuStartTime;                                            
    NET_TIME stuEndTime;                                              
    int nIndex;                                                       
    int nCode;                                                        
    int nDiscNum;                                                     
    char szName[DH_COMMON_STRING_128];                                
    char szPlace[DH_COMMON_STRING_128];                               
    char szInvestigator[DH_MAX_CASE_PERSON_NUM][DH_COMMON_STRING_32]; 
    char szXyfs[DH_MAX_CASE_PERSON_NUM][DH_COMMON_STRING_32];         
    char szMemo[DH_COMMON_STRING_256];                                
    char szVideoName[DH_COMMON_STRING_128];                           
    char szRecorder[DH_COMMON_STRING_32];                             
} NET_BURN_CASE_INFO;
typedef void(CALLBACK* fBurnCaseCallBack)(LLONG lAttachHandle, NET_BURN_CASE_INFO* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_BURN_CASE
{
    DWORD dwSize;
    fBurnCaseCallBack cbBurnCase; 
    LDWORD dwUser;                
} NET_IN_ATTACH_BURN_CASE;
typedef struct tagNET_OUT_ATTACH_BURN_CASE
{
    DWORD dwSize;
} NET_OUT_ATTACH_BURN_CASE;
typedef enum tagEM_NET_BURN_DEV_BUS_TYPE
{
    EM_NET_BURN_DEV_BUS_TYPE_UNKNOWN, 
    EM_NET_BURN_DEV_BUS_TYPE_IDE,     
    EM_NET_BURN_DEV_BUS_TYPE_USB,     
    EM_NET_BURN_DEV_BUS_TYPE_1394,    
    EM_NET_BURN_DEV_BUS_TYPE_SATA,    
    EM_NET_BURN_DEV_BUS_TYPE_ESATA,   
} EM_NET_BURN_DEV_BUS_TYPE;
typedef enum tagEM_NET_BURN_DEV_BK_TYPE
{
    EM_NET_BURN_DEV_BK_TYPE_UNKNOWN, 
    EM_NET_BURN_DEV_BK_TYPE_DHFS,    
    EM_NET_BURN_DEV_BK_TYPE_DISK,    
    EM_NET_BURN_DEV_BK_TYPE_CDRW,    
} EM_NET_BURN_DEV_BK_TYPE;
typedef struct tagNET_BURN_DEV_STATE_INFO
{
    char szName[DH_COMMON_STRING_256];          
    unsigned int nTotalSpace;                   
    unsigned int nFreeSpace;                    
    EM_NET_BURN_DEV_TRAY_TYPE emTrayType;       
    EM_NET_BURN_DEV_OPERATE_TYPE emOperateType; 
    EM_NET_BURN_DEV_BUS_TYPE emBusType;         
    EM_NET_BURN_DEV_BK_TYPE emBkType;           
} NET_BURN_DEV_STATE_INFO;
typedef struct tagNET_BURN_DEV_STATE_INFO_LIST
{
    unsigned int nListCount;                          
    NET_BURN_DEV_STATE_INFO* pstuNetBurnDevStateInfo; 
} NET_BURN_DEV_STATE_INFO_LIST;
typedef void(CALLBACK* fBurnDevStateCallBack)(LLONG lAttachHandle, const NET_BURN_DEV_STATE_INFO_LIST* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_BURN_DEV_STATE
{
    DWORD dwSize;
    fBurnDevStateCallBack cbBurnDevState; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_BURN_DEV_STATE;
typedef struct tagNET_OUT_ATTACH_BURN_DEV_STATE
{
    DWORD dwSize;
} NET_OUT_ATTACH_BURN_DEV_STATE;
#define CASE_BACK_UP_CHANNEL_MAX_NUM 32     
#define CASE_BACK_UP_FILE_TYPE_MAX_NUM 8    
#define CASE_BACK_UP_INQUEST_INFO_MAX_NUM 8 
#define CASE_BACK_UP_DEVICE_MAX_NUM 8       
typedef enum tagEM_CASE_BACK_UP_FILE_TYPE
{
    EM_CASE_BACK_UP_FILE_TYPE_UNKNOWN, 
    EM_CASE_BACK_UP_FILE_TYPE_DAV,     
    EM_CASE_BACK_UP_FILE_TYPE_JPG,     
    EM_CASE_BACK_UP_FILE_TYPE_TXT,     
} EM_CASE_BACK_UP_FILE_TYPE;
typedef enum tagEM_CASE_BACK_UP_MODE_TYPE
{
    EM_CASE_BACK_UP_MODE_TYPE_UNKNOWN, 
    EM_CASE_BACK_UP_MODE_TYPE_SYNC,    
    EM_CASE_BACK_UP_MODE_TYPE_CYCLE,   
} EM_CASE_BACK_UP_MODE_TYPE;
typedef enum tagEM_CASE_BACK_UP_PACK_TYPE
{
    EM_CASE_BACK_UP_PACK_TYPE_UNKNOWN, 
    EM_CASE_BACK_UP_PACK_TYPE_DHAV,    
    EM_CASE_BACK_UP_PACK_TYPE_MP4,     
    EM_CASE_BACK_UP_PACK_TYPE_PS,      
} EM_CASE_BACK_UP_PACK_TYPE;
typedef struct tagNET_CASE_BACK_UP_INQUEST_INFO
{
    char szTitle[128];    
    char szText[128];     
    BYTE byReserved[512]; 
} NET_CASE_BACK_UP_INQUEST_INFO;
typedef struct tagNET_CASE_BACK_UP_QUERY_CONDITION
{
    int nChannelNum;                                                                 
    int nChannels[CASE_BACK_UP_CHANNEL_MAX_NUM];                                     
    NET_TIME stuStartTime;                                                           
    NET_TIME stuEndTime;                                                             
    int nFileTypeNum;                                                                
    EM_CASE_BACK_UP_FILE_TYPE emFileTypes[CASE_BACK_UP_FILE_TYPE_MAX_NUM];           
    char szCaseNumber[256];                                                          
    int nInquestInfoNum;                                                             
    NET_CASE_BACK_UP_INQUEST_INFO stuInquestInfo[CASE_BACK_UP_INQUEST_INFO_MAX_NUM]; 
    BYTE byReserved[1024];                                                           
} NET_CASE_BACK_UP_QUERY_CONDITION;
typedef struct tagNET_CASE_BACK_UP_MODE
{
    EM_CASE_BACK_UP_MODE_TYPE emBackupMode;              
    int nDeviceNum;                                      
    char szDeviceName[CASE_BACK_UP_DEVICE_MAX_NUM][256]; 
    EM_CASE_BACK_UP_PACK_TYPE emPackType;                
    BOOL bExtraFile;                                     
    BOOL bDataCheck;                                     
    BYTE byReserved[1024];                               
} NET_CASE_BACK_UP_MODE;
typedef struct tagNET_IN_START_CASE_BACK_UP
{
    DWORD dwSize;                                  
    NET_CASE_BACK_UP_QUERY_CONDITION stuCondition; 
    NET_CASE_BACK_UP_MODE stuMode;                 
} NET_IN_START_CASE_BACK_UP;
typedef enum tagEM_CASE_BACK_UP_START_ERROR_CODE
{
    EM_CASE_BACK_UP_START_ERROR_CODE_UNKNOWN,                 
    EM_CASE_BACK_UP_START_ERROR_CODE_NORMAL,                  
    EM_CASE_BACK_UP_START_ERROR_CODE_BACKUPING,               
    EM_CASE_BACK_UP_START_ERROR_CODE_NO_FINDFILE,             
    EM_CASE_BACK_UP_START_ERROR_CODE_DEVICE_BUSY,             
    EM_CASE_BACK_UP_START_ERROR_CODE_NO_SUPPORT_MEDIA_FORMAT, 
    EM_CASE_BACK_UP_START_ERROR_CODE_DEVICE_ERROR,            
    EM_CASE_BACK_UP_START_ERROR_CODE_BACKUP_FILE_OVER_LIMIT,  
    EM_CASE_BACK_UP_START_ERROR_CODE_OTHER_ERROR,             
} EM_CASE_BACK_UP_START_ERROR_CODE;
typedef struct tagNET_OUT_START_CASE_BACK_UP
{
    DWORD dwSize;                                 
    EM_CASE_BACK_UP_START_ERROR_CODE emErrorCode; 
} NET_OUT_START_CASE_BACK_UP;
typedef struct tagNET_IN_STOP_CASE_BACK_UP
{
    DWORD dwSize; 
} NET_IN_STOP_CASE_BACK_UP;
typedef struct tagNET_OUT_STOP_CASE_BACK_UP
{
    DWORD dwSize; 
} NET_OUT_STOP_CASE_BACK_UP;
typedef enum tagEM_CASE_BACK_UP_STATE_TYPE
{
    EM_CASE_BACK_UP_STATE_TYPE_UNKNOWN,            
    EM_CASE_BACK_UP_STATE_TYPE_INIT,               
    EM_CASE_BACK_UP_STATE_TYPE_STOP,               
    EM_CASE_BACK_UP_STATE_TYPE_STOPPING,           
    EM_CASE_BACK_UP_STATE_TYPE_BACKUPING,          
    EM_CASE_BACK_UP_STATE_TYPE_CHANGE_DISK,        
    EM_CASE_BACK_UP_STATE_TYPE_PREPARE_EXTRA_FILE, 
    EM_CASE_BACK_UP_STATE_TYPE_WAIT_EXTRA_FILE,    
    EM_CASE_BACK_UP_STATE_TYPE_UPLOAD_FILE_START,  
} EM_CASE_BACK_UP_STATE_TYPE;
typedef enum tagEM_CASE_BACK_UP_ERROR_CODE
{
    EM_CASE_BACK_UP_ERROR_CODE_UNKNOWN,     
    EM_CASE_BACK_UP_ERROR_CODE_NORMAL,      
    EM_CASE_BACK_UP_ERROR_CODE_SPACE_FULL,  
    EM_CASE_BACK_UP_ERROR_CODE_START_ERROR, 
    EM_CASE_BACK_UP_ERROR_CODE_STOP_ERROR,  
    EM_CASE_BACK_UP_ERROR_CODE_WRITE_ERROR, 
    EM_CASE_BACK_UP_ERROR_CODE_OTHER_ERROR, 
} EM_CASE_BACK_UP_ERROR_CODE;
typedef struct tagNET_CASE_BACK_UP_STATE
{
    EM_CASE_BACK_UP_STATE_TYPE emBackUpState; 
    EM_CASE_BACK_UP_ERROR_CODE emErrorCode;   
    BYTE byReserved[512];                     
} NET_CASE_BACK_UP_STATE;
typedef struct tagNET_CASE_BACK_UP_FILE_INFO
{
    int nFileCount;                   
    int nCurFileIndex;                
    TP_U64 nFileTotalLength;          
    TP_U64 nCurBackupTotalLength;     
    TP_U64 nCurBackupFileTotalLength; 
    TP_U64 nCurBackupFileLength;      
    BYTE byReserved[512];             
} NET_CASE_BACK_UP_FILE_INFO;
typedef struct tagNET_CASE_BACK_UP_DEVICE_INFO
{
    int nDeviceID;                            
    char szDeviceName[256];                   
    int nTotalSpace;                          
    int nRemainSpace;                         
    EM_CASE_BACK_UP_STATE_TYPE emBackUpState; 
    EM_CASE_BACK_UP_ERROR_CODE emErrorCode;   
    BYTE byReserved[512];                     
} NET_CASE_BACK_UP_DEVICE_INFO;
typedef struct tagNET_OUT_CASE_BACK_UP_STATE
{
    DWORD dwSize;                                                            
    NET_CASE_BACK_UP_STATE stuBackUpState;                                   
    NET_CASE_BACK_UP_FILE_INFO stuFileInfo;                                  
    int nDeviceNum;                                                          
    NET_CASE_BACK_UP_DEVICE_INFO stuDeviceInfo[CASE_BACK_UP_DEVICE_MAX_NUM]; 
} NET_OUT_CASE_BACK_UP_STATE;
typedef void(CALLBACK* fAttachCaseBackUpState)(LLONG lLoginID, LLONG lAttachHandle, const NET_OUT_CASE_BACK_UP_STATE* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CASE_BACK_UP_STATE
{
    DWORD dwSize;                         
    fAttachCaseBackUpState cbAttachState; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_CASE_BACK_UP_STATE;
typedef struct tagNET_OUT_ATTACH_CASE_BACK_UP_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_CASE_BACK_UP_STATE;
typedef struct tagNET_IN_DETACH_CASE_BACK_UP_STATE
{
    DWORD dwSize; 
} NET_IN_DETACH_CASE_BACK_UP_STATE;
typedef struct tagNET_OUT_DETACH_CASE_BACK_UP_STATE
{
    DWORD dwSize; 
} NET_OUT_DETACH_CASE_BACK_UP_STATE;
typedef struct tagNET_IN_GET_CASE_BACK_UP_INFO
{
    DWORD dwSize; 
} NET_IN_GET_CASE_BACK_UP_INFO;
typedef struct tagNET_OUT_GET_CASE_BACK_UP_INFO
{
    DWORD dwSize;                                  
    NET_CASE_BACK_UP_QUERY_CONDITION stuCondition; 
    NET_CASE_BACK_UP_MODE stuMode;                 
} NET_OUT_GET_CASE_BACK_UP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartBackUpCase(LLONG lLoginID, const NET_IN_START_CASE_BACK_UP* pstInParam, NET_OUT_START_CASE_BACK_UP* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopBackUpCase(LLONG lLoginID, const NET_IN_STOP_CASE_BACK_UP* pstInParam, NET_OUT_STOP_CASE_BACK_UP* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBackUpCaseState(LLONG lLoginID, const NET_IN_ATTACH_CASE_BACK_UP_STATE* pstInParam, NET_OUT_ATTACH_CASE_BACK_UP_STATE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBackUpCaseState(LLONG lAttachHandle, const NET_IN_DETACH_CASE_BACK_UP_STATE* pstInParam, NET_OUT_DETACH_CASE_BACK_UP_STATE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCaseBackUpInfo(LLONG lLoginID, const NET_IN_GET_CASE_BACK_UP_INFO* pstInParam, NET_OUT_GET_CASE_BACK_UP_INFO* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
#define NET_COMPOSE_CHANNEL_MAX_SPLIT_WINDOW_NUM 36 
typedef struct tagNET_TEMP_SPLIT_WINDOW_INFO
{
    int nChannel;         
    BOOL bAudio;          
    DH_RECT stuPosition;  
    BYTE byReserved[128]; 
} NET_TEMP_SPLIT_WINDOW_INFO;
typedef struct tagNET_IN_GET_TEMP_SPLIT
{
    DWORD dwSize;        
    int nComposeChannel; 
} NET_IN_GET_TEMP_SPLIT;
typedef struct tagNET_OUT_GET_TEMP_SPLIT
{
    DWORD dwSize;                                                                       
    DH_SPLIT_MODE emSplitMode;                                                          
    int nSplitNum;                                                                      
    NET_TEMP_SPLIT_WINDOW_INFO stuWindowInfo[NET_COMPOSE_CHANNEL_MAX_SPLIT_WINDOW_NUM]; 
} NET_OUT_GET_TEMP_SPLIT;
typedef struct tagNET_IN_SET_TEMP_SPLIT
{
    DWORD dwSize;                                                                       
    int nComposeChannel;                                                                
    DH_SPLIT_MODE emSplitMode;                                                          
    int nSplitNum;                                                                      
    NET_TEMP_SPLIT_WINDOW_INFO stuWindowInfo[NET_COMPOSE_CHANNEL_MAX_SPLIT_WINDOW_NUM]; 
} NET_IN_SET_TEMP_SPLIT;
typedef struct tagNET_OUT_SET_TEMP_SPLIT
{
    DWORD dwSize; 
} NET_OUT_SET_TEMP_SPLIT;
typedef struct tagNET_TEMP_SOURCE_WINDOW_INFO
{
    int nWindowID;        
    int nUniqueChannel;   
    BYTE byReserved[128]; 
} NET_TEMP_SOURCE_WINDOW_INFO;
typedef struct tagNET_IN_SET_TEMP_SOURCE
{
    DWORD dwSize;                                                                        
    int nComposeChannel;                                                                 
    int nWindowNum;                                                                      
    NET_TEMP_SOURCE_WINDOW_INFO stuWindowInfo[NET_COMPOSE_CHANNEL_MAX_SPLIT_WINDOW_NUM]; 
} NET_IN_SET_TEMP_SOURCE;
typedef struct tagNET_OUT_SET_TEMP_SOURCE
{
    DWORD dwSize; 
} NET_OUT_SET_TEMP_SOURCE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetTempSplit(LLONG lLoginID, const NET_IN_SET_TEMP_SPLIT* pstInParam, NET_OUT_SET_TEMP_SPLIT* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTempSplit(LLONG lLoginID, const NET_IN_GET_TEMP_SPLIT* pstInParam, NET_OUT_GET_TEMP_SPLIT* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetTempSource(LLONG lLoginID, const NET_IN_SET_TEMP_SOURCE* pstInParam, NET_OUT_SET_TEMP_SOURCE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef enum tagNET_STORAGE_WRITE_STATE
{
    NS_WRITE_UNKNOWN,          
    NS_WRITE_OK,               
    NS_WRITE_DISK_IO_ERROR,    
    NS_WRITE_DISK_NOT_READY,   
    NS_WRITE_DISK_FAULT,       
    NS_WRITE_STREAM_NOT_EXIST, 
    NS_WRITE_MOUNT_DISK_ERROR, 
} NET_STORAGE_WRITE_STATE;
typedef struct tagNET_STORAGE_BLOCK
{
    DWORD dwSize;
    unsigned int nID;                     
    unsigned int nStreamID;               
    unsigned int nRecycleTimestamp;       
    unsigned int nBeginTimestamp;         
    unsigned int nEndTimestamp;           
    unsigned int nLockCount;              
    char szDiskUUID[DH_COMMON_STRING_64]; 
} NET_STORAGE_BLOCK;
typedef struct tagNET_STORAGE_WRITE_INFO
{
    DWORD dwSize;
    NET_STORAGE_WRITE_STATE emState;                            
    int nBlockCount;                                            
    NET_STORAGE_BLOCK stuBlocks[DH_MAX_NET_STRORAGE_BLOCK_NUM]; 
} NET_STORAGE_WRITE_INFO;
typedef void(CALLBACK* fNetStorageAttachWriteInfoCB)(LLONG lAttachHandle, NET_STORAGE_WRITE_INFO* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_STORAGE_ATTACH_WRITE_INFO
{
    DWORD dwSize;
    const char* pszName;                       
    fNetStorageAttachWriteInfoCB cbISCSIBlcok; 
    LDWORD dwUser;                             
} NET_IN_STORAGE_ATTACH_WRITE_INFO;
typedef struct tagNET_OUT_STORAGE_ATTACH_WRITE_INFO
{
    DWORD dwSize;
} NET_OUT_STORAGE_ATTACH_WRITE_INFO;
typedef struct tagNET_IN_STORAGE_GET_WRITE_INFO
{
    DWORD dwSize;
    const char* pszName; 
} NET_IN_STORAGE_GET_WRITE_INFO;
typedef struct tagNET_OUT_STORAGE_GET_WRITE_INFO
{
    DWORD dwSize;
    int nBlockCount;                                            
    NET_STORAGE_BLOCK stuBlocks[DH_MAX_NET_STRORAGE_BLOCK_NUM]; 
} NET_OUT_STORAGE_GET_WRITE_INFO;
typedef enum tagNET_RAID_OPERATE_TYPE
{
    NET_RAID_OPERATE_ADD,           
    NET_RAID_OPERATE_REMOVE,        
    NET_RAID_OPERATE_GET_SUBDEVICE, 
    NET_RAID_OPERATE_GET_SUBSMART,  
    NET_RAID_OPERATE_MODIFY,        
} NET_RAID_OPERATE_TYPE;
typedef struct tagNET_RAID_INFO
{
    DWORD dwSize;
    char szName[DH_COMMON_STRING_64];                            
    char szLevel[DH_COMMON_STRING_16];                           
    int nMemberNum;                                              
    char szMembers[DH_MAX_MEMBER_PER_RAID][DH_COMMON_STRING_64]; 
} NET_RAID_INFO;
typedef struct tagNET_RAID_ADD_RESULT
{
    DWORD dwSize;
    BOOL bResult;
    DWORD dwErrorCode;                
    char szName[DH_COMMON_STRING_64]; 
} NET_RAID_ADD_RESULT;
typedef struct tagNET_IN_RAID_ADD
{
    DWORD dwSize;
    int nRaidNun;                            
    NET_RAID_INFO stuRaids[DH_MAX_RAID_NUM]; 
} NET_IN_RAID_ADD;
typedef struct tagNET_OUT_RAID_ADD
{
    DWORD dwSize;
    int nResultNum;                                  
    NET_RAID_ADD_RESULT stuResults[DH_MAX_RAID_NUM]; 
} NET_OUT_RAID_ADD;
typedef struct tagNET_RAID_REMOVE_RESULT
{
    DWORD dwSize;
    BOOL bResult;
    DWORD dwErrorCode; 
} NET_RAID_REMOVE_RESULT;
typedef struct tagNET_IN_RAID_REMOVE
{
    DWORD dwSize;
    int nRaidNum;                                       
    char szRaids[DH_MAX_RAID_NUM][DH_COMMON_STRING_64]; 
} NET_IN_RAID_REMOVE;
typedef struct tagNET_OUT_RAID_REMOVE
{
    DWORD dwSize;
    int nResultNum;                                     
    NET_RAID_REMOVE_RESULT stuResults[DH_MAX_RAID_NUM]; 
} NET_OUT_RAID_REMOVE;
typedef struct tagNET_IN_RAID_GET_SUBDEVICE
{
    DWORD dwSize;
    const char* pszRaidName; 
} NET_IN_RAID_GET_SUBDEVICE;
typedef struct tagNET_OUT_RAID_GET_SUBDEVICE
{
    DWORD dwSize;
    int nSubDeviceNum;                                       
    DH_STORAGE_DEVICE stuSubDevices[DH_MAX_MEMBER_PER_RAID]; 
} NET_OUT_RAID_GET_SUBDEVICE;
typedef struct tagNET_RAID_SMART_INFO
{
    DWORD dwSize;
    unsigned int nID;                 
    char szName[DH_COMMON_STRING_64]; 
    int nCurrent;                     
    int nWorst;                       
    int nThreshold;                   
    int nPredict;                     
    char szRaw[DH_COMMON_STRING_16];  
} NET_RAID_SMART_INFO;
typedef struct tagNET_IN_RAID_GET_SUBSMART
{
    DWORD dwSize;
    const char* pszSubDevName; 
} NET_IN_RAID_GET_SUBSMART;
typedef struct tagNET_OUT_RAID_GET_SUBSMART
{
    DWORD dwSize;
    int nSmartNum;                                          
    NET_RAID_SMART_INFO stuSmartInfos[MAX_SMART_VALUE_NUM]; 
} NET_OUT_RAID_GET_SUBSMART;
typedef struct tagNET_RAID_MODIFY_RESULT
{
    DWORD dwSize;
    BOOL bResult;
    DWORD dwErrorCode; 
} NET_RAID_MODIFY_RESULT;
typedef struct tagNET_IN_RAID_MODIFY
{
    DWORD dwSize;
    int nRaidNun;                            
    NET_RAID_INFO stuRaids[DH_MAX_RAID_NUM]; 
} NET_IN_RAID_MODIFY;
typedef struct tagNET_OUT_RAID_MODIFY
{
    DWORD dwSize;
    int nResultNum;                                     
    NET_RAID_MODIFY_RESULT stuResults[DH_MAX_RAID_NUM]; 
} NET_OUT_RAID_MODIFY;
typedef enum tagEM_SYNC_MODE
{
    EM_SYNC_MODE_UNKNOWN = -1,   
    EM_SYNC_MODE_ADAPTIVE,       
    EM_SYNC_MODE_SYNC_FIRST,     
    EM_SYNC_MODE_BUSINESS_FIRST, 
    EM_SYNC_MODE_BALANCED,       
} EM_SYNC_MODE;
typedef enum tagEM_HOT_SPARE_POLICY
{
    EM_HOT_SPARE_POLICY_UNKNOWN, 
    EM_HOT_SPARE_POLICY_HIGH,    
    EM_HOT_SPARE_POLICY_NORMAL,  
    EM_HOT_SPARE_POLICY_LOWER,   
} EM_HOT_SPARE_POLICY;
typedef enum tagEM_RAID_TYPE
{
    EM_RAID_TYPE_UNKNOWN, 
    EM_RAID_TYPE_RAID5,   
    EM_RAID_TYPE_RAID6,   
} EM_RAID_TYPE;
typedef struct tagNET_RAIDJ_INFO
{
    UINT nCheckDiskNum;   
    char szReserved[256]; 
} NET_RAIDJ_INFO;
typedef struct tagNET_RAID20_INFO
{
    UINT nCheckDiskNum;                   
    UINT nDataDiskNums;                   
    EM_HOT_SPARE_POLICY emHotSparePolicy; 
    EM_RAID_TYPE emRaidType;              
    char szReserved[256];                 
} NET_RAID20_INFO;
typedef struct tagNET_RAID_CONFIG_INFO
{
    char szLevel[16];          
    EM_SYNC_MODE emSyncMode;   
    char szAlias[24];          
    NET_RAIDJ_INFO stuRaidJ;   
    BOOL bRaidJEnable;         
    NET_RAID20_INFO stuRaid20; 
    BOOL bRaid20Enable;        
    char szReserved[256];      
} NET_RAID_CONFIG_INFO;
typedef struct tagNET_IN_RAID_ADD_ASYN
{
    DWORD dwSize;
    int nMemberNums;                    
    char szMembers[128][16];            
    NET_RAID_CONFIG_INFO stuRaidConfig; 
} NET_IN_RAID_ADD_ASYN;
typedef struct tagNET_OUT_RAID_ADD_ASYN
{
    DWORD dwSize;
    UINT nId; 
} NET_OUT_RAID_ADD_ASYN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddRaidAsyn(LLONG lLoginID, const NET_IN_RAID_ADD_ASYN* pstInParam, NET_OUT_RAID_ADD_ASYN* pstOutParam, int nWaitTime);
typedef struct tagNET_RAID_OBJECT_INFO
{
    char szName[16];      
    char szAliasName[32]; 
    char szReserved[256]; 
} NET_RAID_OBJECT_INFO;
typedef enum tagEM_RAID_STATE
{
    EM_RAID_STATE_UNKNOWN = 0,         
    EM_RAID_STATE_CREATING_RAID,       
    EM_RAID_STATE_CREATE_RAID_SUCCESS, 
    EM_RAID_STATE_CREATE_RAID_FAIL,    
} EM_RAID_STATE;
typedef struct tagNET_CB_RAID_ADD_INFO
{
    DWORD dwSize;                 
    UINT nId;                     
    NET_RAID_OBJECT_INFO stuRaid; 
    EM_RAID_STATE emRaidState;    
    int nPercent;                 
} NET_CB_RAID_ADD_INFO;
typedef void(CALLBACK* fRaidAddCallBack)(LLONG lAttachHandle, NET_CB_RAID_ADD_INFO* pstuRaidAdd, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RAID_ADD
{
    DWORD dwSize;               
    fRaidAddCallBack cbRaidAdd; 
    LDWORD dwUser;              
} NET_IN_ATTACH_RAID_ADD;
typedef struct tagNET_OUT_ATTACH_RAID_ADD
{
    DWORD dwSize; 
} NET_OUT_ATTACH_RAID_ADD;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRaidAdd(LLONG lLoginID, NET_IN_ATTACH_RAID_ADD* pstInParam, NET_OUT_ATTACH_RAID_ADD* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRaidAdd(LLONG lAttachHandle);
typedef enum tagEM_FS_TYPE
{
    EM_FS_TYPE_UNKNWON, 
    EM_FS_TYPE_EXT3,
    EM_FS_TYPE_EXT4,
    EM_FS_TYPE_XFS,
    EM_FS_TYPE_VFAT,
    EM_FS_TYPE_DHFS,
    EM_FS_TYPE_CQFS,
    EM_FS_TYPE_NTFS,
} EM_FS_TYPE;
typedef struct tagNET_PART_FORMAT_INFO
{
    EM_FS_TYPE emFsType;    
    char szVolumeLabel[64]; 
    BYTE byReserved[2044];  
} NET_PART_FORMAT_INFO;
typedef struct tagNET_IN_DEVSTORAGE_FORMAT_PARTITION_ASYN
{
    DWORD dwSize;                           
    BYTE byReserved[4];                     
    char szPartName[32];                    
    NET_PART_FORMAT_INFO stuPartFormatInfo; 
} NET_IN_DEVSTORAGE_FORMAT_PARTITION_ASYN;
typedef struct tagNET_OUT_DEVSTORAGE_FORMAT_PARTITION_ASYN
{
    DWORD dwSize; 
} NET_OUT_DEVSTORAGE_FORMAT_PARTITION_ASYN;
typedef enum tagEM_STORAGE_FORMAT_STATE
{
    EM_STORAGE_FORMAT_UNKNOWN,    
    EM_STORAGE_FORMAT_FORMATTING, 
    EM_STORAGE_FORMAT_SUCCESS,    
    EM_STORAGE_FORMAT_FAILED,     
} EM_STORAGE_FORMAT_STATE;
typedef struct tafNET_DEVSTORAGE_INFO
{
    char szDevName[32];    
    char szAliasName[32];  
    UINT nPhysicNo;        
    BYTE byReserved[2044]; 
} NET_DEVSTORAGE_INFO;
typedef struct tagNET_CB_DEVSTORAGE_FORMAT_INFO
{
    NET_DEVSTORAGE_INFO stuDevStorageInfo;        
    EM_STORAGE_FORMAT_STATE emStorageFormatState; 
    UINT nPercent;                                
    BYTE byReserved[2048];                        
} NET_CB_DEVSTORAGE_FORMAT_INFO;
typedef int(CALLBACK* fDevStorageFormatCallBack)(LLONG lAttachHandle, NET_CB_DEVSTORAGE_FORMAT_INFO* pstDevStorageFormatInfo, LDWORD dwUser);
typedef struct tagNET_IN_DEVSTORAGE_ATTACH_DEV_FORMAT
{
    DWORD dwSize;                                     
    BYTE byReserved[4];                               
    fDevStorageFormatCallBack cbDevStorageFormatInfo; 
    LDWORD dwUser;                                    
} NET_IN_DEVSTORAGE_ATTACH_DEV_FORMAT;
typedef struct tagNET_DEVICE_OPERATE_INFO
{
    char szName[128];     
    char szAliasName[32]; 
    UINT nPhysicNo;       
    char szReserved[512]; 
} NET_DEVICE_OPERATE_INFO;
typedef struct tagNET_CB_DEVICE_OPERATE_INFO
{
    NET_DEVICE_OPERATE_INFO stuDevOpInfo; 
    UINT nState;                          
    char szReserved[512];                 
} NET_CB_DEVICE_OPERATE_INFO;
typedef void(CALLBACK* fDevStorageOpStateCallBack)(LLONG lAttachHandle, NET_CB_DEVICE_OPERATE_INFO* pstDeviceOperateInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_DEVSTORAGE_OP_STATE
{
    DWORD dwSize;                                       
    char szReserved[4];                                 
    fDevStorageOpStateCallBack cbDevStorageOpStateInfo; 
    LDWORD dwUser;                                      
} NET_IN_ATTACH_DEVSTORAGE_OP_STATE;
typedef struct tagNET_OUT_ATTACH_DEVSTORAGE_OP_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_DEVSTORAGE_OP_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachDevStorageOpState(LLONG lLoginID, const NET_IN_ATTACH_DEVSTORAGE_OP_STATE* pInParam, NET_OUT_ATTACH_DEVSTORAGE_OP_STATE* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachDevStorageOpState(LLONG lAttachHandle);
typedef enum tagNET_EM_CHANGE_TYPE
{
    NET_EM_CHANGE_TYPE_UNKOWN,  
    NET_EM_CHANGE_TYPE_LOGIN,   
    NET_EM_CHANGE_TYPE_LOGOUT,  
    NET_EM_CHANGE_TYPE_KICKOUT, 
    NET_EM_CHANGE_TYPE_BLOCK,   
} NET_EM_CHANGE_TYPE;
typedef enum tagNET_EM_LINK_TYPE
{
    NET_EM_LINK_TYPE_UNKOWN, 
    NET_EM_LINK_TYPE_TCP,    
    NET_EM_LINK_TYPE_UDP,    
    NET_EM_LINK_TYPE_HTTP,   
    NET_EM_LINK_TYPE_HTTPS,  
    NET_EM_LINK_TYPE_OTHERS, 
} NET_EM_LINK_TYPE;
typedef struct tagNET_CB_ACTIVE_USER_STATE_INFO
{
    DWORD dwSize;                    
    NET_EM_CHANGE_TYPE emChangeType; 
    UINT nId;                        
    char szName[128];                
    char szGroup[128];               
    char szClientType[16];           
    char szClientAddress[40];        
    char szLoginTime[20];            
    UINT nTimeSinceLogin;            
    char szClientMac[20];            
    NET_EM_LINK_TYPE emLinkType;     
    char szMemo[256];                
} NET_CB_ACTIVE_USER_STATE_INFO;
typedef void(CALLBACK* fActiveUserStateCallBack)(LLONG lAttachHandle, NET_CB_ACTIVE_USER_STATE_INFO* pstuActiveUserState, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_ACTIVE_USER_STATE
{
    DWORD dwSize;                               
    fActiveUserStateCallBack cbActiveUserState; 
    LDWORD dwUser;                              
} NET_IN_ATTACH_ACTIVE_USER_STATE;
typedef struct tagNET_OUT_ATTACH_ACTIVE_USER_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_ACTIVE_USER_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachActiveUserState(LLONG lLoginID, NET_IN_ATTACH_ACTIVE_USER_STATE* pstInParam, NET_OUT_ATTACH_ACTIVE_USER_STATE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachActiveUserState(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_TEMPORARY_TOKEN
{
    DWORD dwSize;        
    char szclientIP[48]; 
    int nkeepAliveTime;  
    BOOL bRemoteMode;    
    int nChannelID;      
} NET_IN_GET_TEMPORARY_TOKEN;
typedef struct tagNET_TEMP_USER_INFO
{
    char szUsername[128];  
    char szToken[128];     
    char szReserved[1024]; 
} NET_TEMP_USER_INFO;
typedef struct tagNET_OUT_GET_TEMPORARY_TOKEN
{
    DWORD dwSize;                       
    NET_TEMP_USER_INFO stuTempUserInfo; 
} NET_OUT_GET_TEMPORARY_TOKEN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTemporaryToken(LLONG lLoginID, const NET_IN_GET_TEMPORARY_TOKEN* pstuInParam, NET_OUT_GET_TEMPORARY_TOKEN* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_PWD_VALID_PERIOD
{
    DWORD dwSize;     
    char szBytes[4];  
    char szName[128]; 
} NET_IN_GET_PWD_VALID_PERIOD;
typedef struct tagNET_OUT_GET_PWD_VALID_PERIOD
{
    DWORD dwSize;    
    int nRemainDays; 
    UINT nTotalDays; 
    char szBytes[4]; 
} NET_OUT_GET_PWD_VALID_PERIOD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPwdValidPeriod(LLONG lLoginID, const NET_IN_GET_PWD_VALID_PERIOD* pstuInParam, NET_OUT_GET_PWD_VALID_PERIOD* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_USER_MANAGER_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_USER_MANAGER_CAPS;
typedef struct tagNET_OUT_GET_USER_MANAGER_CAPS
{
    DWORD dwSize;                
    BOOL bSupportTokenLoginType; 
} NET_OUT_GET_USER_MANAGER_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetUserManagerCaps(LLONG lLoginID, NET_IN_GET_USER_MANAGER_CAPS* pstuInParam, NET_OUT_GET_USER_MANAGER_CAPS* pstuOutParam, int nWaitTime);
typedef enum tagEM_STATE_MANAGER_STATE
{
    EM_STATE_MANAGER_STATE_UNKNOWN,          
    EM_STATE_MANAGER_STATE_SERIALDATAUPLOAD, 
} EM_STATE_MANAGER_STATE;
typedef enum tagEM_TEMP_HUM_STATE
{
    EM_TEMP_HUM_STATE_UNKNOWN = -1, 
    EM_TEMP_HUM_STATE_NORMAL,       
    EM_TEMP_HUM_STATE_HIGH,         
    EM_TEMP_HUM_STATE_LOW,          
} EM_TEMP_HUM_STATE;
typedef struct tagNET_SERIALDATAUPLOAD_INFO
{
    EM_TEMP_HUM_STATE emTempAlarmStatus; 
    EM_TEMP_HUM_STATE emHumAlarmStatus;  
    double dbTemperature;                
    double dbHumidity;                   
    NET_TIME_EX stuTime;                 
    char szReserved[252];                
} NET_SERIALDATAUPLOAD_INFO;
typedef struct tagNET_CB_STATE_MANAGER_INFO
{
    EM_STATE_MANAGER_STATE emCallBackStateName;         
    BYTE byReserved1[4];                                
    NET_SERIALDATAUPLOAD_INFO stuSerialDataUpLoadState; 
    BYTE byReserved[2048];                              
} NET_CB_STATE_MANAGER_INFO;
typedef void(CALLBACK* fStateManagerCallBack)(LLONG lAttachHandle, NET_CB_STATE_MANAGER_INFO* pstuStateManager, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_STATE_MANAGER
{
    DWORD dwSize;                         
    fStateManagerCallBack cbStateManager; 
    LDWORD dwUser;                        
    EM_STATE_MANAGER_STATE emStateName;   
} NET_IN_ATTACH_STATE_MANAGER;
typedef struct tagNET_OUT_ATTACH_STATE_MANAGER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_STATE_MANAGER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachStateManager(LLONG lLoginID, NET_IN_ATTACH_STATE_MANAGER* pstInParam, NET_OUT_ATTACH_STATE_MANAGER* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachStateManager(LLONG lAttachHandle);
typedef enum tagNET_EXT_DEV_TYPE
{
    EXT_DEV_UNKNOWN,        
    EXT_DEV_PROJECTOR,      
    EXT_DEV_SEQUENCE_POWER, 
} NET_EXT_DEV_TYPE;
typedef struct tagNET_EXTERNAL_DEVICE
{
    DWORD dwSize;
    NET_EXT_DEV_TYPE emType;          
    char szDevID[DH_DEV_ID_LEN_EX];   
    char szDevName[DH_DEV_ID_LEN_EX]; 
} NET_EXTERNAL_DEVICE;
typedef struct tagNET_CTRL_SEQPOWER_PARAM
{
    DWORD dwSize;
    const char* pszDeviceID; 
    int nChannel;            
} NET_CTRL_SEQPOWER_PARAM;
typedef struct tagNET_CTRL_PROJECTOR_PARAM
{
    DWORD dwSize;
    const char* pszDeviceID; 
} NET_CTRL_PROJECTOR_PARAM;
typedef struct tagNET_CTRL_INFRARED_KEY_PARAM
{
    DWORD dwSize;
    int nChannel;      
    unsigned int nKey; 
} NET_CTRL_INFRARED_KEY_PARAM;
typedef struct tagALARM_NO_DISK_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                     
    DWORD dwAction;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_NO_DISK_INFO;
typedef enum __EM_CAPSULE_STATE
{
    CAPSULE_STATE_UNKNOW,         
    CAPSULE_STATE_NORMAL,         
    CAPSULE_STATE_TIME_OUT,       
    CAPSULE_STATE_EMERGENCY_CALL, 
} EM_CAPSULE_STATE;
typedef struct tagALARM_PROTECTIVE_CAPSULE_INFO
{
    DWORD dwSize;
    EM_CAPSULE_STATE emCapsuleState;      
    DWORD nLock;                          
    DWORD nInfrared;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_PROTECTIVE_CAPSULE_INFO;
typedef struct tagNET_IN_VIDEOIN_FISHEYE_CAPS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_VIDEOIN_FISHEYE_CAPS;
typedef struct tagNET_OUT_VIDEOIN_FISHEYE_CAPS
{
    DWORD dwSize;
    int nMountModeNum;                                                              
    NET_FISHEYE_MOUNT_MODE emMountModes[NET_MAX_FISHEYE_MOUNTMODE_NUM];             
    int nCalibrateModeNum;                                                          
    NET_FISHEYE_CALIBRATE_MODE emCalibrateModes[NET_MAX_FISHEYE_CALIBRATEMODE_NUM]; 
    int nEPtzCmdNum;                                                                
    NET_FISHEYE_EPTZ_CMD emEPtzCmds[NET_MAX_FISHEYE_EPTZCMD_NUM];                   
    NET_FISHEYE_TYPE emType;                                                        
} NET_OUT_VIDEOIN_FISHEYE_CAPS;
typedef struct tagNET_IN_CAP_SEQPOWER
{
    DWORD dwSize;
    const char* pszDeviceID; 
} NET_IN_CAP_SEQPOWER;
typedef struct tagNET_OUT_CAP_SEQPOWER
{
    DWORD dwSize;
    int nChannelNum; 
} NET_OUT_CAP_SEQPOWER;
typedef struct tagNET_IN_ENCODE_CFG_CAPS
{
    DWORD dwSize;
    int nChannelId;      
    int nStreamType;     
    char* pchEncodeJson; 
} NET_IN_ENCODE_CFG_CAPS;
typedef struct tagNET_STREAM_CFG_CAPS
{
    DWORD dwSize;
    int nAudioCompressionTypes[DH_MAX_AUDIO_ENCODE_TYPE];                                              
    int nAudioCompressionTypeNum;                                                                      
    int dwEncodeModeMask;                                                                              
    DH_RESOLUTION_INFO stuResolutionTypes[DH_MAX_CAPTURE_SIZE_NUM];                                    
    int nResolutionFPSMax[DH_MAX_CAPTURE_SIZE_NUM];                                                    
    int nResolutionTypeNum;                                                                            
    int nMaxBitRateOptions;                                                                            
    int nMinBitRateOptions;                                                                            
    BYTE bH264ProfileRank[DH_PROFILE_HIGH];                                                            
    int nH264ProfileRankNum;                                                                           
    int nCifPFrameMaxSize;                                                                             
    int nCifPFrameMinSize;                                                                             
    int nFPSMax;                                                                                       
    DH_RESOLUTION_INFO stuIndivResolutionTypes[DH_MAX_COMPRESSION_TYPES_NUM][DH_MAX_CAPTURE_SIZE_NUM]; 
    BOOL abIndivResolution;                                                                            
    int nIndivResolutionNums[DH_MAX_COMPRESSION_TYPES_NUM];                                            
} NET_STREAM_CFG_CAPS;
typedef struct tagNET_OUT_ENCODE_CFG_CAPS
{
    DWORD dwSize;
    NET_STREAM_CFG_CAPS stuMainFormatCaps[DH_REC_TYPE_NUM];  
    NET_STREAM_CFG_CAPS stuExtraFormatCaps[DH_N_ENCODE_AUX]; 
    NET_STREAM_CFG_CAPS stuSnapFormatCaps[SNAP_TYP_NUM];     
    int nMainFormCaps;                                       
    int nExtraFormCaps;                                      
    int nSnapFormatCaps;                                     
} NET_OUT_ENCODE_CFG_CAPS;
typedef struct tagNET_IN_VIDEO_DETECT_CAPS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_VIDEO_DETECT_CAPS;
typedef enum tagNET_MEDIA_CAP_TYPE
{
    NET_MEDIA_CAP_TYPE_SENSORINFO, 
} NET_MEDIA_CAP_TYPE;
typedef struct tagNET_IN_MEDIAMANAGER_GETCAPS
{
    DWORD dwSize;
    NET_MEDIA_CAP_TYPE emType; 
} NET_IN_MEDIAMANAGER_GETCAPS;
typedef struct tagNET_IN_SNAP_CFG_CAPS
{
    int nChannelId;       
    BYTE bReserved[1024]; 
} NET_IN_SNAP_CFG_CAPS;
#define DH_MAX_FPS_NUM 128    
#define DH_MAX_QUALITY_NUM 32 
typedef struct tagNET_OUT_SNAP_CFG_CAPS
{
    int nResolutionTypeNum; 
    DH_RESOLUTION_INFO stuResolutionTypes[DH_MAX_CAPTURE_SIZE_NUM];
    DWORD dwFramesPerSecNum;                
    int nFramesPerSecList[DH_MAX_FPS_NUM];  
    DWORD dwQualityMun;                     
    DWORD nQualityList[DH_MAX_QUALITY_NUM]; 
    DWORD dwMode;                           
    DWORD dwFormat;                         
    BYTE bReserved[2048];                   
} NET_OUT_SNAP_CFG_CAPS;
typedef enum tagNET_CAMERA_SENSOR
{
    NET_CAMERA_SENSOR_NORMAL, 
    NET_CAMERA_SENSOR_LEPTON, 
    NET_CAMERA_SENSOR_TAU,    
} NET_CAMERA_SENSOR;
typedef struct tagNET_CAMERA_SENSORINFO
{
    NET_CAMERA_SENSOR emSensorType; 
    int nChannelsCount;             
    int nChannels[512];             
    char reserved[512];
} NET_CAMERA_SENSORINFO;
typedef struct tagNET_MEDIA_SENSORINFO
{
    BOOL bSupport;                       
    int nSensorTypeCount;                
    NET_CAMERA_SENSORINFO stuDetail[16]; 
    char reserved[1024];
} NET_MEDIA_SENSORINFO;
typedef struct tagNET_OUT_MEDIAMANAGER_GETCAPS
{
    DWORD dwSize;
    NET_MEDIA_SENSORINFO stuSensorInfo; 
} NET_OUT_MEDIAMANAGER_GETCAPS;
typedef enum tagNET_ENUM_VIDEOIN_CAP_TYPE
{
    NET_VIDEOIN_CAP_TYPE_CONFLICT, 
} NET_ENUM_VIDEOIN_CAP_TYPE;
typedef struct tagNET_IN_VIDEOIN_CAPS
{
    DWORD dwSize;
    int nChannel;                        
    NET_ENUM_VIDEOIN_CAP_TYPE emCapType; 
} NET_IN_VIDEOIN_CAPS;
typedef enum tagNET_ENUM_CONFLICT_TYPE
{
    NET_ENUM_CONFLICT_TYPE_UNKNOWN,   
    NET_ENUM_CONFLICT_TYPE_MAIN,      
    NET_ENUM_CONFLICT_TYPE_EXTRA1,    
    NET_ENUM_CONFLICT_TYPE_EXTRA2,    
    NET_ENUM_CONFLICT_TYPE_TVOUT,     
    NET_ENUM_CONFLICT_TYPE_DSP,       
    NET_ENUM_CONFLICT_TYPE_SMARTENC,  
    NET_ENUM_CONFLICT_TYPE_SETGOP,    
    NET_ENUM_CONFLICT_TYPE_ROI,       
    NET_ENUM_CONFLICT_TYPE_CBR,       
    NET_ENUM_CONFLICT_TYPE_SVC,       
    NET_ENUM_CONFLICT_TYPE_MJPEG,     
    NET_ENUM_CONFLICT_TYPE_ROTATE_90, 
} NET_ENUM_CONFLICT_TYPE;
typedef struct tagNET_CONFLICT_TYPE
{
    NET_ENUM_CONFLICT_TYPE emConflict1; 
    NET_ENUM_CONFLICT_TYPE emConflict2; 
    char reserved[64];
} NET_CONFLICT_TYPE;
typedef struct tagNET_VIDEOIN_CONFLICT_CAPS
{
    BOOL bConflict;                                          
    int nConflictNum;                                        
    NET_CONFLICT_TYPE stuConflict[MAX_VIDEOIN_CONFLICT_NUM]; 
} NET_VIDEOIN_CONFLICT_CAPS;
typedef struct tagNET_OUT_VIDEOIN_CAPS
{
    DWORD dwSize;
    NET_VIDEOIN_CONFLICT_CAPS stuConflictCap; 
} NET_OUT_VIDEOIN_CAPS;
typedef struct tagNET_IN_MEDIA_VIDEOMOSAIC_GETCAPS
{
    DWORD dwSize; 
} NET_IN_MEDIA_VIDEOMOSAIC_GETCAPS;
typedef struct tagNET_OUT_MEDIA_VIDEOMOSAIC_GETCAPS
{
    DWORD dwSize;                            
    int nSupportCount;                       
    short snSupport[MAX_MOSAIC_CHANNEL_NUM]; 
    int nMosaicCount;                        
    char szMosaic[MAX_MOSAIC_NUM];           
    DH_SIZE stuRectMax;                      
    DH_SIZE stuRectMin;                      
} NET_OUT_MEDIA_VIDEOMOSAIC_GETCAPS;
typedef struct tagNET_IN_FACEBOARD_CAPS
{
    DWORD dwSize; 
} NET_IN_FACEBOARD_CAPS;
typedef struct tagNET_IN_VIDEO_IMAGECONTROL_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEO_IMAGECONTROL_CAPS;
typedef enum tagNET_EM_STABLE_CAPS_TYPE
{
    EM_STABLE_UNSPPORT,          
    EM_STABLE_ELEC,              
    EM_STABLE_LIGHT,             
    EM_STAVLE_ELEC_AND_LIGHT,    
    EM_STABLE_CONTROL,           
    EM_STABLE_ELEC_AND_CONTROL,  
    EM_STABLE_LIGHT_AND_CONTROL, 
} NET_EM_STABLE_CAPS_TYPE;
typedef struct tagNET_OUT_VIDEO_IMAGECONTROL_CAPS
{
    DWORD dwSize;                     
    BOOL bSupport;                    
    BOOL bMirror;                     
    BOOL bFlip;                       
    BOOL bRotate90;                   
    BOOL bFreeze;                     
    NET_EM_STABLE_CAPS_TYPE emStable; 
} NET_OUT_VIDEO_IMAGECONTROL_CAPS;
typedef struct tagNET_IN_VIDEOIN_EXPOSURE_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_EXPOSURE_CAPS;
#define MAX_EXPOSURE_COUNT 8
typedef enum tagNET_EM_EXPOSURE_MODE
{
    NET_EM_EXPOSURE_AUTO,            
    NET_EM_EXPOSURE_LOWNICE,         
    NET_EM_EXPOSURE_ANTISHADOW,      
    NET_EM_EXPOSURE_MANUALRANGE = 4, 
    NET_EM_EXPOSURE_APERTUREFIRST,   
    NET_EM_EXPOSURE_MANUALFIXATION,  
    NET_EM_EXPOSURE_GIANFIRST,       
    NET_EM_EXPOSURE_SHUTTERFIRST,    
    NET_EM_EXPOSURE_FLASHMATCH,      
} NET_EM_EXPOSURE_MODE;
typedef enum tagNET_EM_ANTIFLICKER_MODE
{
    NET_EM_ANTIFLICKER_OUTDOOR, 
    NET_EM_ANTIFLICKER_50HZ,    
    NET_EM_ANTIFLICKER_60HZ,    
} NET_EM_ANTIFLICKER_MODE;
typedef struct tagNET_SPEED_CAPS
{
    int nRetManual;                        
    int nManual[DH_COMMON_STRING_16];      
    int nRetManual50Hz;                    
    int nManual50Hz[DH_COMMON_STRING_16];  
    int nRetManual60Hz;                    
    int nManual60Hz[DH_COMMON_STRING_16];  
    int nRetShutterPAL;                    
    int nShutterPAL[DH_COMMON_STRING_16];  
    int nRetShutterNTSC;                   
    int nShutterNTSC[DH_COMMON_STRING_16]; 
    BYTE bReserved[128];                   
} NET_SPEED_CAPS;
typedef struct tagNET_SLOW_SPEED_CAPS
{
    int nRetPal;
    int nPal[DH_COMMON_STRING_16];
    int nRetNtsc;
    int nNtsc[DH_COMMON_STRING_16];
    BYTE bReserved[128]; 
} NET_SLOW_SPEED_CAPS;
typedef struct tagNET_OUT_VIDEOIN_EXPOSURE_CAPS
{
    DWORD dwSize;                                                     
    BOOL bSupport;                                                    
    int nExposureMode;                                                
    NET_EM_EXPOSURE_MODE emExposureMode[MAX_EXPOSURE_COUNT];          
    BOOL bAntiFlicker;                                                
    int nAntiFlicker;                                                 
    NET_EM_ANTIFLICKER_MODE emAntiFlicker[MAX_ANTIFLICKERMODE_COUNT]; 
    int nMinCompensation;                                             
    int nMaxCompensation;                                             
    BOOL bGainUpperLimit;                                             
    int nMinGain;                                                     
    int nMaxGain;                                                     
    BOOL bSlowAutoExposure;                                           
    int nMinSlowAutoExposure;                                         
    int nMaxSlowAutoExposure;                                         
    BOOL bSlowShutter;                                                
    float fMinValueLow;                                               
    float fMaxValueLow;                                               
    float fMinValueUp;                                                
    float fMaxValueUp;                                                
    NET_SPEED_CAPS stuSpeedCaps;                                      
    NET_SLOW_SPEED_CAPS stuSlowSpeedCaps;                             
    BOOL bIrisAuto;                                                   
    int nIrisMin;                                                     
    int nIrisMax;                                                     
    BOOL bSupportIrisRange;                                           
    BOOL bDoubleExposure;                                             
    BOOL bRecoveryTime;                                               
} NET_OUT_VIDEOIN_EXPOSURE_CAPS;
typedef struct tagNET_IN_VIDEOIN_DENOISE_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_DENOISE_CAPS;
typedef enum tagNET_EM_3DSUPPORT_TYPE
{
    NET_EM_3DSUPPORT_UNKOWN, 
    NET_EM_3DSUPPORT_OFF,    
    NET_EM_3DSUPPORT_AUTO,   
    NET_EM_3DSUPPORT_MANUAL, 
} NET_EM_3DSUPPORT_TYPE;
typedef struct tagNET_3D_ALGORITHM_MODE
{
    DWORD dwSingleExposure;         
    DWORD dwDoubleExposureFullRate; 
    DWORD dwDoubleExposureHalfRate; 
    DWORD dsThreeExposure;          
    BYTE bReserved[128];            
} NET_3DALGORITHM_MODE;
#define MAX_3DTYPE_COUNT 8  
#define MAX_GROUP_COUNT 2   
#define MAX_PROGRAM_COUNT 8 
typedef struct tagNET_SUPPORT2D_CAPS
{
    BOOL bSupport2D;     
    int n2DLevelMin;     
    int n2DLevelMax;     
    int nMaxRAWLevel;    
    BYTE bReserved[128]; 
} NET_SUPPORT2D_CAPS;
typedef struct tagNET_DENOISEGROUP_PROGRAM
{
    int nProgramCount;               
    int nProgram[MAX_PROGRAM_COUNT]; 
} NET_DENOISEGROUP_PROGRAM;
typedef struct tagNET_SUPPORT3D_CAPS
{
    BOOL bSupport3D;                                           
    int n3DTypeCount;                                          
    NET_EM_3DSUPPORT_TYPE em3DSupportType[MAX_3DTYPE_COUNT];   
    int n3DLevelMin;                                           
    int n3DLevelMax;                                           
    int nAutoLevelMin;                                         
    int nAutoLevelMax;                                         
    NET_3DALGORITHM_MODE stuAlgorithmSDMode;                   
    int nGroupCount;                                           
    NET_DENOISEGROUP_PROGRAM stuDenoiseGroup[MAX_GROUP_COUNT]; 
    int nDenoiseScheme;                                        
    BYTE bReserved[128];                                       
} NET_SUPPORT3D_CAPS;
typedef struct tagNET_OUT_VIDEOIN_DENOISE_CAPS
{
    DWORD dwSize;                                         
    BOOL bSupport;                                        
    NET_SUPPORT2D_CAPS stu2DCaps;                         
    NET_SUPPORT3D_CAPS stu3DCaps;                         
    BOOL bSupportAlgorithm1;                              
    int nTnfLevelRangeMin;                                
    int nTnfLevelRangeMax;                                
    int nSnfLevelRangeMin;                                
    int nSnfLevelRangeMax;                                
    int nSeniotTypeCount;                                 
    NET_EM_3DSUPPORT_TYPE emSeniorType[MAX_3DTYPE_COUNT]; 
} NET_OUT_VIDEOIN_DENOISE_CAPS;
typedef struct tagNET_IN_VIDEOIN_BACKLIGHT_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_BACKLIGHT_CAPS;
typedef enum tagNET_EM_BACK_MODE
{
    NET_EM_BACKLIGHT_MODE_UNKNOW,          
    NET_EM_BACKLIGHT_MODE_OFF,             
    NET_EM_BACKLIGHT_MODE_BACKLIGHT,       
    NET_EM_BACKLIGHT_MODE_WIDEDYNAMIC,     
    NET_EM_BACKLIGHT_MODE_GLAREINHIBITION, 
    NET_EM_BACKLIGHT_MODE_SSA,             
} NET_EM_BACK_MODE;
typedef enum tagNET_EM_BLACKLIGHT_MODE
{
    NET_EM_BLACKLIGHT_UNKNOW,  
    NET_EM_BLACKLIGHT_DEFAULT, 
    NET_EM_BLACKLIGHT_REGION,  
} NET_EM_BLACKLIGHT_MODE;
typedef enum tagNET_EM_BACK_INTENSITY_MODE
{
    NET_EM_INTENSITY_UNKNOWN, 
    NET_EM_INTENSITY_OFF,     
    NET_EM_INTENSITY_AUTO,    
    NET_EM_INTENSITY_MANUAL,  
} NET_EM_BACK_INTENSITY_MODE;
typedef enum tagNET_EM_GLAREINHIBITION_MODE
{
    NET_EM_GLAREINHIBITION_UNKNOWN, 
    NET_EM_GLAREINHIBITION_DEFAULT, 
    NET_EM_GLAREINHIBITION_FPGA,    
} NET_EM_GLAREINHIBITION_MODE;
#define MAX_MODE_COUNT 8 
typedef struct tagNET_OUT_VIDEOIN_BACKLIGHT_CAPS
{
    DWORD dwSize;                                                  
    BOOL bSupport;                                                 
    int nBackModeCount;                                            
    NET_EM_BACK_MODE emBackMode[MAX_MODE_COUNT];                   
    int nBackLightModeCount;                                       
    NET_EM_BLACKLIGHT_MODE emBackLightMode[MAX_MODE_COUNT];        
    int nWideDynamicRange;                                         
    int nSSAIntensity;                                             
    NET_EM_BACK_INTENSITY_MODE emIntensityMode[MAX_MODE_COUNT];    
    NET_EM_GLAREINHIBITION_MODE emGlareInhibition[MAX_MODE_COUNT]; 
    UINT nGlareInhibition;                                         
} NET_OUT_VIDEOIN_BACKLIGHT_CAPS;
typedef struct tagNET_IN_VIDEOIN_WHITEBALANCE_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_WHITEBALANCE_CAPS;
typedef enum tagNET_EM_WHITEBALANCE_TYPE
{
    NET_EM_WHITEBALANCE_UNKNOW,           
    NET_EM_WHITEBALANCE_DISABLE,          
    NET_EM_WHITEBALANCE_AUTO,             
    NET_EM_WHITEBALANCE_SUNNY,            
    NET_EM_WHITEBALANCE_CLOUDY,           
    NET_EM_WHITEBALANCE_HOME,             
    NET_EM_WHITEBALANCE_OFFICE,           
    NET_EM_WHITEBALANCE_NIGHT,            
    NET_EM_WHITEBALANCE_CUSTOM,           
    NET_EM_WHITEBALANCE_HIGHCOLORTEMP,    
    NET_EM_WHITEBALANCE_LOWCOLORTEMP,     
    NET_EM_WHITEBALANCE_AUTOCOLORTEMP,    
    NET_EM_WHITEBALANCE_CUSTOMCOLORTEMP,  
    NET_EM_WHITEBALANCE_INDOOR,           
    NET_EM_WHITEBALANCE_OUTDOOR,          
    NET_EM_WHITEBALANCE_ATW,              
    NET_EM_WHITEBALANCE_MANUAL,           
    NET_EM_WHITEBALANCE_AUTOOUTDOOR,      
    NET_EM_WHITEBALANCE_SODIUMAUTO,       
    NET_EM_WHITEBALANCE_SODIUM,           
    NET_EM_WHITEBALANCE_MANUALDATUM,      
    NET_EM_WHITEBALANCE_PARTWHITEBALANCE, 
    NET_EM_WHITEBALANCE_NATURAL,          
    NET_EM_WHITEBALANCE_STREETLAMP,       
} NET_EM_WHITEBALANCE_TYPE;
#define MAX_BALANCEMODES_COUNT 16 
typedef struct tagNET_OUT_VIDEOIN_WHITEBALANCE_CAPS
{
    DWORD dwSize;                                                    
    BOOL bSupport;                                                   
    int nWhiteBalance;                                               
    NET_EM_WHITEBALANCE_TYPE emWhiteBalance[MAX_BALANCEMODES_COUNT]; 
} NET_OUT_VIDEOIN_WHITEBALANCE_CAPS;
typedef struct tagNET_IN_VIDEOIN_DAYNIGHT_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_DAYNIGHT_CAPS;
typedef enum tagNET_EM_ICR_TYPE
{
    NET_EM_ICR_UNKONOW,   
    NET_EM_ICR_ELECTRON,  
    NET_EM_ICR_MECHANISM, 
} NET_EM_ICR_TYPE;
typedef enum tagNET_EM_COLORBLACK_MODE
{
    NET_EM_COLORBLACK_UNKNOWN,       
    NET_EM_COLORBLACK_COLOR,         
    NET_EM_COLORBLACK_BRIGHTNESS,    
    NET_EM_COLORBLACK_BLACKWHITE,    
    NET_EM_COLORBLACK_PHOTORESISTOR, 
    NET_EM_COLORBLACK_GAIN,          
    NET_EM_COLORBLACK_ALARMINPUT,    
    NET_EM_COLORBLACK_IO,            
} NET_EM_COLORBLACK_MODE;
typedef struct tagNET_OUT_VIDEOIN_DAYNIGHT_CAPS
{
    DWORD dwSize;                                            
    BOOL bSupport;                                           
    int nICRType;                                            
    NET_EM_ICR_TYPE emICRType[MAX_MODE_COUNT];               
    int nColorBlackMode;                                     
    NET_EM_COLORBLACK_MODE emColorBlackMode[MAX_MODE_COUNT]; 
    int nSensitivityRangeMin;                                
    int nSensitivityRangeMax;                                
    int nDelayRangeMin;                                      
    int nDelayRangeMax;                                      
} NET_OUT_VIDEOIN_DAYNIGHT_CAPS;
typedef struct tagNET_IN_VIDEOIN_ZOOM_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_ZOOM_CAPS;
typedef struct tagNET_OUT_VIDEOIN_ZOOM_CAPS
{
    DWORD dwSize; 
    BOOL bSupport;            
    int nSpeedRangeMin;       
    int nSpeedRangeMax;       
    BOOL bDigitalZoomSupport; 
    int nZoomLimitRangeMin;   
    int nZoomLimitRangeMax;   
} NET_OUT_VIDEOIN_ZOOM_CAPS;
typedef struct tagNET_IN_VIDEOIN_FOCUS_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_FOCUS_CAPS;
typedef enum tagNET_EM_FOCUS_MODE
{
    NET_EM_FOCUS_OFF,       
    NET_EM_FOCUS_ASSIST,    
    NET_EM_FOCUS_AUTO,      
    NET_EM_FOCUS_SEMI_AUTO, 
    NET_EM_FOCUS_MANUAL,    
} NET_EM_FOCUS_MODE;
typedef enum tagNET_EM_FOCUS_LIMITSELECT_MODE
{
    NET_EM_FOCUS_LIMITSELECT_UNKNOW, 
    NET_EM_FOCUS_LIMITSELECT_MANUAL, 
    NET_EM_FOCUS_LIMITSELECT_AUTO,   
} NET_EM_FOCUS_LIMITSELECT_MODE;
typedef enum tagNET_EM_FOCUS_TYPE
{
    NET_EM_FOCUS_UNKNOWN,   
    NET_EM_FOCUS_AUTOTRACE, 
} NET_EM_FOCUS_TYPE;
typedef struct tagNET_OUT_VIDEOIN_FOCUS_CAPS
{
    DWORD dwSize;                                              
    BOOL bSupport;                                             
    int nFcousMode;                                            
    NET_EM_FOCUS_MODE emFocusMode[MAX_MODE_COUNT];             
    int nLimitMode;                                            
    NET_EM_FOCUS_LIMITSELECT_MODE emLimitMode[MAX_MODE_COUNT]; 
    BOOL bSupportFocusRegion;                                  
    BOOL bSensitivity;                                         
    BOOL bIRCorrection;                                        
    BOOL bFocusLimit;                                          
    int nFocusTypeCount;                                       
    NET_EM_FOCUS_TYPE emFocusType[MAX_MODE_COUNT];             
    int nFocusLimitRangeCount; 
    int nFocusLimitRange[16];  
} NET_OUT_VIDEOIN_FOCUS_CAPS;
typedef struct tagNET_IN_VIDEOIN_SHARPNESS_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_SHARPNESS_CAPS;
typedef enum tagNET_EM_SHARPNESS_MODE
{
    NET_EM_SHARPNESS_AUTO,   
    NET_EM_SHARPNESS_MANAUL, 
} NET_EM_SHARPNESS_MODE;
typedef struct tagNET_OUT_VIDEOIN_SHARPNESS_CAPS
{
    DWORD dwSize;                                          
    BOOL bSupport;                                         
    int nSharpnessMode;                                    
    NET_EM_SHARPNESS_MODE emSharpnessMode[MAX_MODE_COUNT]; 
    int nSharpnessMin;                                     
    int nSharpnessMax;                                     
    BOOL bSupportRestrain; 
    int nRestrainLevelMin; 
    int nRestrainLevelMax; 
} NET_OUT_VIDEOIN_SHARPNESS_CAPS;
typedef struct tagNET_IN_VIDEOIN_COLOR_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_COLOR_CAPS;
typedef enum tagNET_EM_STYLE_TYPE
{
    NET_EM_STYLE_UNKONWON,   
    NET_EM_STYLE_GENTLE,     
    NET_EM_STYLE_STANDARD,   
    NET_EM_STYLE_FLAMBOYANT, 
} NET_EM_STYLE_TYPE;
typedef struct tagNET_COLOR_STYLE_CAPS
{
    BOOL bSupport;                                 
    int nStyleType;                                
    NET_EM_STYLE_TYPE emStyleType[MAX_MODE_COUNT]; 
    BYTE bReserved[128];                           
} NET_COLOR_STYLE_CAPS;
#define MAX_GRAYVALUE_COUNT 8 
typedef struct tagNET_GRAY_SCALE_CAPS
{
    BOOL bSupport;                      
    int nValueCount;                    
    int nValue[MAX_GRAYVALUE_COUNT][2]; 
    BYTE bReserved[128];                
} NET_GRAY_SCALE_CAPS;
typedef struct tagNET_OUT_VIDEOIN_COLOR_CAPS
{
    DWORD dwSize;                       
    BOOL bSupport;                      
    BOOL bBrightness;                   
    BOOL bContrast;                     
    BOOL bSaturation;                   
    BOOL bHue;                          
    BOOL bGamma;                        
    BOOL bChromaSuppress;               
    NET_COLOR_STYLE_CAPS stuColorStype; 
    NET_GRAY_SCALE_CAPS stuGrayScale;   
} NET_OUT_VIDEOIN_COLOR_CAPS;
typedef struct tagNET_IN_VIDEOIN_RAWFRAME_CAPS
{
    DWORD dwSize;
} NET_IN_VIDEOIN_RAWFRAME_CAPS;
typedef struct tagNET_RAWFRAMETYPE_DATA
{
    int nListNum;                                         
    char szList[DH_COMMON_STRING_16][DH_COMMON_STRING_8]; 
    BYTE byReserved[1024];
} NET_RAWFRAMETYPE_DATA;
typedef struct tagNET_OUT_VIDEOIN_RAWFRAME_CAPS
{
    DWORD dwSize;
    NET_RAWFRAMETYPE_DATA stuFrameData;
} NET_OUT_VIDEOIN_RAWFRAME_CAPS;
#define MAX_UNIT_COUNT 8 
typedef struct tagNET_OUT_FACEBOARD_CAPS
{
    DWORD dwSize;                                          
    BOOL bHasBattery;                                      
    BOOL bSupportPowerVoltageDetect;                       
    BOOL bTemperatures;                                    
    BOOL bOSDTemperatureUnit;                              
    int nRetUnitCount;                                     
    EM_TEMPERATURE_UNIT emTempreatureUnit[MAX_UNIT_COUNT]; 
} NET_OUT_FACEBOARD_CAPS;
typedef struct tagNET_IN_GET_COAXIAL_CONTROL_IO_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_COAXIAL_CONTROL_IO_CAPS;
typedef struct tagNET_OUT_GET_COAXIAL_CONTROL_IO_CAPS
{
    DWORD dwSize;                       
    BOOL bSupportControlLight;          
    BOOL bSupportControlSpeaker;        
    BOOL bSupportControlFullcolorLight; 
    BOOL bSupportControlSuperLight;     
    BOOL bSupportControlIntelliLight;   
    BOOL bSupportControlIntelliSpeaker; 
    BOOL bSupportControlWhiteBlueLight; 
} NET_OUT_GET_COAXIAL_CONTROL_IO_CAPS;
typedef struct tagNET_IN_GET_FACEINFO_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_FACEINFO_CAPS;
typedef enum tagEM_RECOGNITIONALGORITHM_TYPE
{
    EM_RECOGNITIONALGORITHM_UNKNOWN,
    EM_RECOGNITIONALGORITHM_DAHUA,
    EM_RECOGNITIONALGORITHM_SHANGTANG,
    EM_RECOGNITIONALGORITHM_YITU,
    EM_RECOGNITIONALGORITHM_HANWANG,
    EM_RECOGNITIONALGORITHM_FIREEYE,
} EM_RECOGNITIONALGORITHM_TYPE;
typedef struct tagNET_OUT_GET_FACEINFO_CAPS
{
    DWORD dwSize;                                        
    int nRecognitionType;                                
    EM_RECOGNITIONALGORITHM_TYPE emRecognitionAlgorithm; 
    DWORD nRecognitionVersion;                           
    UINT nMaxFaces;                                      
    int nMaxPhotoSize;                                   
    UINT nMaxInsertRate;                                 
    BOOL bIsSupportGetPhoto;                             
    BOOL bIsSupportFaceEigen;                            
    BOOL bIsSupportMultiFace;                            
    BOOL bIsSupportOnlyImportFaceEigen;                  
} NET_OUT_GET_FACEINFO_CAPS;
typedef enum tagEM_DETECT_VERSION_TYPE
{
    EM_DETECT_VERSION_UNKNOW = 0,
    EM_DETECT_VERSION_V1_0, 
    EM_DETECT_VERSION_V3_0, 
} EM_DETECT_VERSION_TYPE;
#define MAX_DETECT_VERSION_NUM 64
typedef enum tagEM_BLIND_DETECT_VERSION_TYPE
{
    EM_BLIND_DETECT_VERSION_UNKNOW = 0,
    EM_BLIND_DETECT_VERSION_FULL_SCREEN,  
    EM_BLIND_DETECT_VERSION_MULTI_WINDOW, 
} EM_BLIND_DETECT_VERSION_TYPE;
#define MAX_BLIND_DETECT_VERSION_NUM 64
typedef enum tagEM_SMART_MOTION_TYPE
{
    EM_SMART_MOTION_UNKNOWN, 
    EM_SMART_MOTION_HUMAN,   
    EM_SMART_MOTION_VEHICLE, 
} EM_SMART_MOTION_TYPE;
typedef struct tagNET_SMART_MOTION_CAPS
{
    BOOL bSupport;                             
    UINT nSmartTypeNum;                        
    EM_SMART_MOTION_TYPE emSmartMotionType[8]; 
    BYTE byReserved[512];                      
} NET_SMART_MOTION_CAPS;
typedef struct tagNET_OUT_VIDEO_DETECT_CAPS
{
    DWORD dwSize;
    BOOL bSupportBlind;                                                               
    BOOL bSupportLoss;                                                                
    BOOL bSupportMotion;                                                              
    BOOL bMotionResult;                                                               
    DWORD nMotionColumns;                                                             
    DWORD nMotionRows;                                                                
    DWORD nMotionDetectWindow;                                                        
    DWORD nBlindColumns;                                                              
    DWORD nBlindRows;                                                                 
    DWORD nBlindDetectWindow;                                                         
    BOOL bPositionDetect;                                                             
    DWORD nDetectVersionNum;                                                          
    EM_DETECT_VERSION_TYPE emDetectVersions[MAX_DETECT_VERSION_NUM];                  
    DWORD nBlindDetectVersionNum;                                                     
    EM_BLIND_DETECT_VERSION_TYPE emBlindDetectVersions[MAX_BLIND_DETECT_VERSION_NUM]; 
    BOOL bMotionLinkPtzPreset;                                                        
    BOOL bMotionLinkPtzTour;                                                          
    BOOL bMotionLinkPtzPattern;                                                       
    BOOL bUnFocusDetect;                                                              
    BOOL bAlarmDetect;                                                                
    BOOL bSupportMoveDetect;                                                          
    NET_SMART_MOTION_CAPS stuSmartMotionCaps;                                         
} NET_OUT_VIDEO_DETECT_CAPS;
typedef struct tagALARM_FALLING_INFO
{
    DWORD dwStructSize;                   
    BYTE bEventAction;                    
    BYTE byRserved[3];                    
    char szUserID[32];                    
    char szUserName[128];                 
    NET_GPS_STATUS_INFO stuGPS;           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_FALLING_INFO;
typedef void(CALLBACK* fBusStateCallBack)(LLONG lAttachHandle, LONG lCommand, char* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef enum tagNET_DRIVER_CHECK_TYPE
{
    NET_DRIVER_CHECK_TYPE_UNKNOWN, 
    NET_DRIVER_CHECK_TYPE_SIGNIN,  
    NET_DRIVER_CHECK_TYPE_SIGNOUT, 
} NET_DRIVER_CHECK_TYPE;
typedef enum tagNET_DRIVER_CHECK_METHOD
{
    NET_DRIVER_CHECK_METHOD_UNKNOWN, 
    NET_DRIVER_CHECK_METHOD_POS,     
    NET_DRIVER_CHECK_METHOD_HAND,    
} NET_DRIVER_CHECK_METHOD;
typedef struct tagALARM_BUS_DRIVER_CHECK_INFO
{
    DWORD dwSize;
    char szCarNo[DH_MAX_PLATE_NUMBER_LEN];  
    char szDriverName[DH_COMMON_STRING_16]; 
    char szDriverID[DH_MAX_PERSON_ID_LEN];  
    char szOrganize[DH_COMMON_STRING_128];  
    NET_TIME_EX stUsefulLife;               
    NET_GPS_STATUS_INFO stGPSStatusInfo;    
    NET_TIME_EX stCheckTime;                
    NET_DRIVER_CHECK_METHOD emCheckMethod;  
    NET_DRIVER_CHECK_TYPE emCheckType;      
} ALARM_BUS_DRIVER_CHECK_INFO;
typedef struct tagALARM_DEVICE_MSG_NOTIFY_INFO
{
    DWORD dwSize;
    char szMsg[DH_COMMON_STRING_256];     
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
} ALARM_DEVICE_MSG_NOTIFY_INFO;
typedef enum tagEM_ENCLOSURE_STATUS
{
    EM_ENCLOSURE_STATUS_UNKNOWN, 
    EM_ENCLOSURE_STATUS_INSIDE,  
    EM_ENCLOSURE_STATUS_OUTSIDE, 
} EM_ENCLOSURE_STATUS;
typedef struct tagALARM_VEHICLE_STANDING_OVER_TIME_INFO
{
    DWORD dwSize;
    NET_GPS_STATUS_INFO stuGPSStatusInfo;  
    NET_TIME_EX stuTime;                   
    NET_TIME_EX stuUtc;                    
    DWORD dwUtc;                           
    BOOL bEventConfirm;                    
    UINT nParkingTime;                     
    char szDeviceID[32];                   
    EM_ENCLOSURE_STATUS emEnclosureStatus; 
} ALARM_VEHICLE_STANDING_OVER_TIME_INFO;
typedef enum tagNET_LINE_DIRECTION
{
    NET_LINE_DIRECTION_UNKNOWN,  
    NET_LINE_DIRECTION_POSTIVE,  
    NET_LINE_DIRECTION_NEGATIVE, 
    NET_LINE_DIRECTION_AROUND,   
    NET_LINE_DIRECTION_DISPERSE, 
} NET_LINE_DIRECTION;
typedef enum tagNET_BUS_STATE
{
    NET_BUS_STATE_UNKNOWN, 
    NET_BUS_STATE_ILLEGAL, 
    NET_BUS_STATE_LEGAL,   
} NET_BUS_STATE;
typedef enum tagNET_PORT_TYPE
{
    NET_PORT_TYPE_UNKOWN, 
    NET_PORT_TYPE_MANUAL, 
    NET_PORT_TYPE_GPS,    
} NET_PORT_TYPE;
typedef enum tagEM_VEHICLE_DATA_TYPE
{
    EM_VEHICLE_DOOR_OPEN_DATA_UNKNOWN = 0,
    EM_VEHICLE_DOOR_OPEN_DATA_REALTIME, 
    EM_VEHICLE_DOOR_OPEN_DATA_HISTORY,  
} EM_VEHICLE_DATA_TYPE;
typedef struct tagALARM_BUS_IMPORT_SITE_INFO
{
    DWORD dwSize;
    char szSiteID[DH_COMMON_STRING_64];      
    DWORD dwSiteNum;                         
    NET_LINE_DIRECTION emDirection;          
    char szLineID[DH_COMMON_STRING_64];      
    NET_TIME_EX stuTime;                     
    int nTime;                               
    NET_BUS_STATE emState;                   
    NET_PORT_TYPE emType;                    
    NET_GPS_STATUS_INFO stuGPSStatusInfo;    
    DWORD dwSiteCount;                       
    char szSiteName[DH_COMMON_STRING_64];    
    char szDesignation[DH_COMMON_STRING_64]; 
    EM_VEHICLE_DATA_TYPE emDataType;         
    BOOL bNeedConfirm;                       
    unsigned int nFromMileage;               
    unsigned int nTotalMileage;              
    unsigned int nFromCostTime;              
    unsigned int nTotalCostTime;             
    char szScheduleUniqueId[64];             
} ALARM_BUS_IMPORT_SITE_INFO;
typedef struct tagNET_SUBTOTAL
{
    unsigned int nDevNum; 
    unsigned int nInside; 
    unsigned int nExited; 
    BYTE byRserved[256];  
} NET_SUBTOTAL;
typedef struct tagALARM_BUS_EXPORT_SITE_INFO
{
    DWORD dwSize;
    char szSiteID[DH_COMMON_STRING_64];      
    DWORD dwSiteNum;                         
    NET_LINE_DIRECTION emDirection;          
    char szLineID[DH_COMMON_STRING_64];      
    NET_TIME_EX stuTime;                     
    int nTime;                               
    NET_BUS_STATE emState;                   
    NET_PORT_TYPE emType;                    
    NET_GPS_STATUS_INFO stuGPSStatusInfo;    
    DWORD dwSiteCount;                       
    char szSiteName[DH_COMMON_STRING_64];    
    char szDesignation[DH_COMMON_STRING_64]; 
    EM_VEHICLE_DATA_TYPE emDataType;         
    BOOL bNeedConfirm;                       
    unsigned int nFromMileage;               
    unsigned int nTotalMileage;              
    unsigned int nFromCostTime;              
    unsigned int nTotalCostTime;             
    int nCurrentPeople;                      
    unsigned int nTotalIn;                   
    unsigned int nTotalOut;                  
    unsigned int nSubtotalCount;             
    NET_SUBTOTAL stuSubtotal[32];            
    char szScheduleUniqueId[64];             
} ALARM_BUS_EXPORT_SITE_INFO;
typedef enum tagEM_ALARM_BUS_ABNORMAL_EVENT_TYPE
{
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_UNKNOWN,      
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_RUNNING,      
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_MEAL,         
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_BLOCK,        
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_CALL,         
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_BREAKDOWN,    
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_DISCONTINUED, 
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_ROBING,       
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_OVERLOAD,     
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_DISPUTE,      
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_ACCIDENT,     
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_OVERSPEED,    
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_RENTAL,       
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_MAINTENANCE,  
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_CLOSURE,      
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_PUBSECURITY,  
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_ENTER_PARK,   
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_LEAVE_PARK,   
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_REFUEL,       
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_FIRE,         
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE_HELP,         
} EM_ALARM_BUS_ABNORMAL_EVENT_TYPE;
typedef struct tagALARM_BUS_ABNORMAL_INFO
{
    DWORD dwSize;
    EM_ALARM_BUS_ABNORMAL_EVENT_TYPE emEventType; 
    char szCarNo[DH_MAX_PLATE_NUMBER_LEN];        
    char szLineID[DH_COMMON_STRING_64];           
    NET_LINE_DIRECTION emLineDirection;           
    NET_TIME_EX stuTime;                          
    NET_GPS_STATUS_INFO stuGPSStatusInfo;         
} ALARM_BUS_ABNORMAL_INFO;
typedef struct tagALARM_ENCLOSURE_ALARM_INFO
{
    DWORD dwSize;
    DWORD dwAlarmType;                    
    DWORD dwAlarmDetail;                  
    NET_BUS_STATE emState;                
    DWORD dwDriverNo;                     
    DWORD dwEnclosureID;                  
    DWORD dwLimitSpeed;                   
    DWORD dwCurrentSpeed;                 
    NET_TIME_EX stuTime;                  
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
} ALARM_ENCLOSURE_ALARM_INFO;
typedef NET_ACCESS_CTL_STATUS_TYPE NET_VEHICLE_DOOR_STATUS;
typedef struct tagALARM_VEHICLE_DOOR_OPEN_INFO
{
    DWORD dwSize;
    NET_VEHICLE_DOOR_STATUS emStatus;     
    int nDoor;                            
    NET_TIME stuTime;                     
    int nTime;                            
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    EM_VEHICLE_DATA_TYPE emDataType;      
    BOOL bNeedConfirm;                    
} ALARM_VEHICLE_DOOR_OPEN_INFO;
typedef struct tagALARM_BUS_CUR_MILEAGE_INFO
{
    DWORD dwSize;
    BOOL bNeedConfirm;                         
    int nTime;                                 
    EM_VEHICLE_DATA_TYPE emDataType;           
    NET_TIME stuTime;                          
    NET_GPS_STATUS_INFO stuGPSStatusInfo;      
    NET_TIME stuStartTime;                     
    NET_GPS_STATUS_INFO stuStartGPSStatusInfo; 
    unsigned int nMileage;                     
    char szDriverID[32];                       
} ALARM_BUS_CUR_MILEAGE_INFO;
typedef struct tagNET_SUB_OIL_LIST_INFO
{
    UINT nCurOilSub;      
    UINT nOilTankageSub;  
    int nOilChangeSub;    
    BYTE byReserved[252]; 
} NET_SUB_OIL_LIST_INFO;
typedef struct tagALARM_BUS_CUR_OIL_INFO
{
    DWORD dwSize;
    BOOL bNeedConfirm;                         
    int nTime;                                 
    EM_VEHICLE_DATA_TYPE emDataType;           
    NET_TIME stuTime;                          
    NET_GPS_STATUS_INFO stuGPSStatusInfo;      
    NET_TIME stuStartTime;                     
    NET_GPS_STATUS_INFO stuStartGPSStatusInfo; 
    unsigned int nCurOil;                      
    unsigned int nOilTankage;                  
    int nOilChange;                            
    char szCarNO[DH_MAX_PLATE_NUMBER_LEN];     
    NET_SUB_OIL_LIST_INFO stuSubOilList[10];   
    int nSubOilNum;                            
} ALARM_BUS_CUR_OIL_INFO;
typedef struct tagALARM_BUS_LOW_OIL_INFO
{
    DWORD dwSize;
    BOOL bNeedConfirm;                     
    int nTime;                             
    EM_VEHICLE_DATA_TYPE emDataType;       
    NET_TIME stuTime;                      
    NET_GPS_STATUS_INFO stuGPSStatusInfo;  
    unsigned int nCurOil;                  
    unsigned int nOilLine;                 
    unsigned int nOilTankage;              
    char szCarNO[DH_MAX_PLATE_NUMBER_LEN]; 
} ALARM_BUS_LOW_OIL_INFO;
typedef struct tagALARM_BUS_STEAL_OIL_INFO
{
    DWORD dwSize;
    BOOL bNeedConfirm;                     
    int nTime;                             
    EM_VEHICLE_DATA_TYPE emDataType;       
    NET_TIME stuTime;                      
    NET_GPS_STATUS_INFO stuGPSStatusInfo;  
    unsigned int nCurOil;                  
    unsigned int nOilTankage;              
    char szCarNO[DH_MAX_PLATE_NUMBER_LEN]; 
} ALARM_BUS_STEAL_OIL_INFO;
typedef enum tagEM_LINE_STATE
{
    EM_LINE_STATE_UNKNOWN, 
    EM_LINE_STATE_NORMAL,  
    EM_LINE_STATE_AWAY,    
} EM_LINE_STATE;
typedef struct tagALARM_BUS_CIRCUIT_SHIFT_INFO
{
    BOOL bNeedConfirm;                    
    unsigned int nTime;                   
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME stuTime;                     
    EM_LINE_STATE emLineState;            
    BOOL bShiftAndPark;                   
    BYTE byReserved[1016];                
} ALARM_BUS_CIRCUIT_SHIFT_INFO;
typedef struct tagALARM_BUS_ROUTE_OVERTIME_INFO
{
    BOOL bNeedConfirm;                    
    unsigned int nTime;                   
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME stuTime;                     
    BYTE byReserved[1024];                
} ALARM_BUS_ROUTE_OVERTIME_INFO;
typedef struct tagALARM_BUS_VEHICLE_CARRY_ALARM_INFO
{
    int nAction;                          
    BOOL bNeedConfirm;                    
    unsigned int nTime;                   
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME stuTime;                     
    BYTE byReserved[1024];                
} ALARM_BUS_VEHICLE_CARRY_ALARM_INFO;
typedef struct tagALARM_BUS_VEHICLE_PAULIN_ALARM_INFO
{
    int nAction;                          
    BOOL bNeedConfirm;                    
    unsigned int nTime;                   
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME stuTime;                     
    BYTE byReserved[1024];                
} ALARM_BUS_VEHICLE_PAULIN_ALARM_INFO;
typedef struct tagALARM_BUS_VEHICLE_LIFT_ALARM_INFO
{
    int nAction;                          
    BOOL bNeedConfirm;                    
    unsigned int nTime;                   
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME stuTime;                     
    BYTE byReserved[1024];                
} ALARM_BUS_VEHICLE_LIFT_ALARM_INFO;
typedef struct tagALARM_BUS_FIRE_PRESSURE_ALARM_INFO
{
    int nAction;                          
    unsigned int nTime;                   
    double dbFirePressureThreshold;       
    double dbFirePressureValue;           
    NET_TIME stuTime;                     
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    char byReserved[1024];                
} ALARM_BUS_FIRE_PRESSURE_ALARM_INFO;
typedef enum tagEM_EVENT_DATA_TYPE
{
    EM_EVENT_DATA_TYPE_UNKNOWN,  
    EM_EVENT_DATA_TYPE_REALTIME, 
    EM_EVENT_DATA_TYPE_HISTORY,  
} EM_EVENT_DATA_TYPE;
typedef struct tagNET_ALARM_BUS_ADD_OIL_INFO
{
    int nAction;                   
    BOOL bNeedConfirm;             
    unsigned int nTime;            
    NET_TIME stuTime;              
    EM_EVENT_DATA_TYPE emDataType; 
    char szCarNo[12];              
    UINT nAddOilVolume;            
    NET_TIME stuStartTime;         
    NET_TIME stuEndTime;           
    char szReserved[512];          
} NET_ALARM_BUS_ADD_OIL_INFO;
typedef struct tagNET_IN_BUS_ATTACH
{
    DWORD dwSize;
    fBusStateCallBack cbBusState; 
    LDWORD dwUser;                
} NET_IN_BUS_ATTACH;
typedef struct tagNET_OUT_BUS_ATTACH
{
    DWORD dwSize;
} NET_OUT_BUS_ATTACH;
typedef struct tagNET_EXALARMCHANNELS_INFO
{
    DWORD dwSize;
    int nExAlarmBoxNum;                                 
    int nChannelNum;                                    
    char szChannelName[DH_MAX_EXALARMCHANNEL_NAME_LEN]; 
} NET_EXALARMCHANNELS_INFO;
typedef struct tagNET_EXALARMCHANNELS
{
    DWORD dwSize;
    int nExAlarmInCount;                          
    int nRetExAlarmInCount;                       
    NET_EXALARMCHANNELS_INFO* pstuExAlarmInInfo;  
    int nExAlarmOutCount;                         
    int nRetExAlarmOutCount;                      
    NET_EXALARMCHANNELS_INFO* pstuExAlarmOutInfo; 
} NET_EXALARMCHANNELS;
typedef struct tagNET_ACTIVATEDDEFENCEAREA_INFO
{
    DWORD dwSize;
    int nChannel;               
    NET_TIME stuActivationTime; 
} NET_ACTIVATEDDEFENCEAREA_INFO;
typedef struct tagNET_ACTIVATEDEFENCEAREA
{
    DWORD dwSize;
    int nAlarmInCount;                                           
    int nRetAlarmInCount;                                        
    NET_ACTIVATEDDEFENCEAREA_INFO* pstuAlarmInDefenceAreaInfo;   
    int nExAlarmInCount;                                         
    int nRetExAlarmInCount;                                      
    NET_ACTIVATEDDEFENCEAREA_INFO* pstuExAlarmInDefenceAreaInfo; 
} NET_ACTIVATEDDEFENCEAREA;
typedef enum tagEM_NET_DOOR_STATUS_TYPE
{
    EM_NET_DOOR_STATUS_UNKNOWN,
    EM_NET_DOOR_STATUS_OPEN,        
    EM_NET_DOOR_STATUS_CLOSE,       
    EM_NET_DOOR_STATUS_BREAK,       
    EM_NET_DOOR_STATUS_CLOSEALWAYS, 
    EM_NET_DOOR_STATUS_OPENALWAYS,  
} EM_NET_DOOR_STATUS_TYPE;
typedef struct tagNET_DOOR_STATUS_INFO
{
    DWORD dwSize;
    int nChannel;                        
    EM_NET_DOOR_STATUS_TYPE emStateType; 
} NET_DOOR_STATUS_INFO;
typedef struct _NET_IN_QUEYT_RECORD_COUNT_PARAM
{
    DWORD dwSize;       
    LLONG lFindeHandle; 
} NET_IN_QUEYT_RECORD_COUNT_PARAM;
typedef struct _NET_OUT_QUEYT_RECORD_COUNT_PARAM
{
    DWORD dwSize;     
    int nRecordCount; 
} NET_OUT_QUEYT_RECORD_COUNT_PARAM;
typedef struct tagNET_ANALOGALARM_CHANNELS_INFO
{
    DWORD dwSize;
    int nSlot;                               
    int nLevel1;                             
    int nLevel2;                             
    char szName[DH_COMMON_STRING_128];       
    char szSenseMethod[DH_COMMON_STRING_32]; 
    BYTE byIsNull;                           
} NET_ANALOGALARM_CHANNELS_INFO;
typedef struct tagNET_ANALOGALARM_CHANNELS
{
    DWORD dwSize;
    int nMaxAnalogAlarmChannels;                    
    int nRetAnalogAlarmChannels;                    
    NET_ANALOGALARM_CHANNELS_INFO* pstuChannelInfo; 
    int nVideoChannel;                              
} NET_ANALOGALARM_CHANNELS;
typedef struct tagNET_ANALOGALARM_SENSE_INFO
{
    DWORD dwSize;
    int nChannelID;                  
    NET_SENSE_METHOD emSense;        
    float fData;                     
    NET_TIME stuTime;                
    int nStatus;                     
    NET_GPS_STATUS_INFO stuGpsSatus; 
    int nUint;                       
    int nVideoChannel;               
} NET_ANALOGALARM_SENSE_INFO;
typedef void(CALLBACK* fAnalogAlarmDataCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_ANALOGALARM_SENSE_INFO* pInfo, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ANALOGALARM_DATA
{
    DWORD dwSize;
    int nChannelId;                      
    fAnalogAlarmDataCallBack cbCallBack; 
    LDWORD dwUser;                       
} NET_IN_ANALOGALARM_DATA;
typedef struct tagNET_OUT_ANALOGALARM_DATA
{
    DWORD dwSize;
} NET_OUT_ANALOGALARM_DATA;
#define DH_MAX_RECORD_INSERT_NUM 128
#define DH_MAX_RECORD_DELETE_NUM 128
#define DH_MAX_RECORD_UPDATE_NUM 128
typedef struct tagNET_RECORDUPDATER_INFO
{
    DWORD dwSize;
    int nInsertNum;                                  
    int nInsertNumberList[DH_MAX_RECORD_INSERT_NUM]; 
    int nDeleteNum;                                  
    int nDeleteNumberList[DH_MAX_RECORD_DELETE_NUM]; 
    int nUpdateNum;                                  
    int nUpdateNumberList[DH_MAX_RECORD_UPDATE_NUM]; 
} NET_RECORDUPDATER_INFO;
typedef void(CALLBACK* fRecordUpdaterCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_RECORDUPDATER_INFO* pInfo, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_RECORDUPDATER_DATA
{
    DWORD dwSize;
    EM_NET_RECORD_TYPE emType;              
    fRecordUpdaterCallBack cbRecordUpdater; 
    LDWORD dwUser;                          
} NET_IN_RECORDUPDATER_DATA;
typedef struct tagNET_OUT_RECORDUPDATER_DATA
{
    DWORD dwSize;
} NET_OUT_RECORDUPDATER_DATA;
#define MAX_SUPPORT_SENSORTYPE_NUM 128 
typedef struct tagNET_SENSOR_LIST
{
    DWORD dwSize;
    int nSupportSensorNum; 
    char szSensorList[MAX_SUPPORT_SENSORTYPE_NUM][DH_COMMON_STRING_64];
} NET_SENSOR_LIST;
typedef struct tagNET_IN_GETCOUNT_LOG_PARAM
{
    DWORD dwSize;
    QUERY_DEVICE_LOG_PARAM stuQueryCondition; 
} NET_IN_GETCOUNT_LOG_PARAM;
typedef struct tagNET_OUT_GETCOUNT_LOG_PARAM
{
    DWORD dwSize;
    int nLogCount; 
} NET_OUT_GETCOUNT_LOG_PARAM;
typedef int(CALLBACK* fSDKLogCallBack)(const char* szLogBuffer, unsigned int nLogSize, LDWORD dwUser);
typedef struct tagLogSetPrintInfo
{
    DWORD dwSize;
    BOOL bSetFilePath;                    
    char szLogFilePath[MAX_LOG_PATH_LEN]; 
    BOOL bSetFileSize;                    
    unsigned int nFileSize;               
    BOOL bSetFileNum;                     
    unsigned int nFileNum;                
    BOOL bSetPrintStrategy;               
    unsigned int nPrintStrategy;          
    BYTE byReserved[4];                   
    fSDKLogCallBack cbSDKLogCallBack;     
    LDWORD dwUser;                        
} LOG_SET_PRINT_INFO;
typedef enum tagNET_WIRELESS_DEVICE_TYPE
{
    NET_WIRELESS_DEVICE_TYPE_UNKNOWN = 0,
    NET_WIRELESS_DEVICE_TYPE_KEYBOARD,      
    NET_WIRELESS_DEVICE_TYPE_DEFENCE,       
    NET_WIRELESS_DEVICE_TYPE_REMOTECONTROL, 
    NET_WIRELESS_DEVICE_TYPE_MAGNETOMER,    
    NET_WIRELESS_DEVICE_TYPE_ALARMBELL,     
    NET_WIRELESS_DEVICE_TYPE_SWITCHER,      
    NET_WIRELESS_DEVICE_TYPE_SMARTLOCK,     
    NET_WIRELESS_DEVICE_TYPE_REPEATER,      
} NET_WIRELESS_DEVICE_TYPE;
typedef enum tagEM_WIRELESS_DEVICE_MODE
{
    EM_WIRELESS_DEVICE_MODE_UNKNOWN = 0, 
    EM_WIRELESS_DEVICE_MODE_NORMAL,      
    EM_WIRELESS_DEVICE_MODE_POLLING,     
} EM_WIRELESS_DEVICE_MODE;
typedef enum tagEM_CODEID_SENSE_METHOD_TYPE
{
    EM_CODEID_SENSE_METHOD_TYPE_UNKOWN,         
    EM_CODEID_SENSE_METHOD_TYPE_DOOR_MAGNETISM, 
    EM_CODEID_SENSE_METHOD_TYPE_GAS_SENSOR,     
    EM_CODEID_SENSE_METHOD_TYPE_CURTAIN_SENSOR, 
    EM_CODEID_SENSE_METHOD_TYPE_MOBILE_SENSOR,  
    EM_CODEID_SENSE_METHOD_TYPE_PASSIVEINFRA,   
    EM_CODEID_SENSE_METHOD_TYPE_URGENCY_BUTTON, 
    EM_CODEID_SENSE_METHOD_TYPE_SMOKING_SENSOR, 
    EM_CODEID_SENSE_METHOD_TYPE_DOUBLEMETHOD,   
    EM_CODEID_SENSE_METHOD_TYPE_WATER_SENSOR,   
    EM_CODEID_SENSE_METHOD_TYPE_THREEMETHOD,    
} EM_CODEID_SENSE_METHOD_TYPE;
#define DH_WIRELESS_DEVICE_SERIAL_NUMBER_MAX_LEN 32 
typedef struct tagNET_CODEID_INFO
{
    DWORD dwSize;
    TP_U64 nWirelessId;                                            
    NET_WIRELESS_DEVICE_TYPE emType;                               
    char szName[DH_USER_NAME_LENGTH];                              
    BOOL bEnable;                                                  
    char szCustomName[DH_COMMON_STRING_64];                        
    int nChannel;                                                  
    EM_WIRELESS_DEVICE_MODE emMode;                                
    EM_CODEID_SENSE_METHOD_TYPE emSenseMethod;                     
    char szSerialNumber[DH_WIRELESS_DEVICE_SERIAL_NUMBER_MAX_LEN]; 
    UINT nTaskID;                                                  
    char szRoomNo[64];                                             
    DWORD nMaxFingerprints;                                        
    DWORD nMaxCards;                                               
    DWORD nMaxPwd;                                                 
    char szRandSalt[128];                                          
} NET_CODEID_INFO;
typedef enum tagNET_CODEID_ERROR_TYPE
{
    NET_CODEID_ERROR_TYPE_RIGHT = 0,    
    NET_CODEID_ERROR_TYPE_ALREADYEXIST, 
    NET_CODEID_ERROR_TYPE_OTHER,        
} NET_CODEID_ERROR_TYPE;
typedef void(CALLBACK* fAttachLowRateWPANCB)(LLONG lLoginID, LLONG lAttachHandle, NET_CODEID_INFO* stuBuf, NET_CODEID_ERROR_TYPE emError, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_LOWRATEWPAN
{
    DWORD dwSize;
    fAttachLowRateWPANCB cbAttachLowRateWPANCB; 
    LDWORD dwUser;                              
} NET_IN_ATTACH_LOWRATEWPAN;
typedef struct tagNET_OUT_ATTACH_LOWRATEWPAN
{
    DWORD dwSize;
} NET_OUT_ATTACH_LOWRATEWPAN;
typedef struct tagNET_CTRL_LOWRATEWPAN_REMOVE
{
    DWORD dwSize;
    TP_U64 nWirelessId;                                            
    char szSerialNumber[DH_WIRELESS_DEVICE_SERIAL_NUMBER_MAX_LEN]; 
} NET_CTRL_LOWRATEWPAN_REMOVE;
typedef struct tagNET_CTRL_LOWRATEWPAN_REMOVEALL
{
    DWORD dwSize;
} NET_CTRL_LOWRATEWPAN_REMOVEALL;
typedef struct tagNET_CTRL_LOWRATEWPAN_MODIFY
{
    DWORD dwSize;
    NET_CODEID_INFO stuCodeIDInfo; 
} NET_CTRL_LOWRATEWPAN_MODIFY;
typedef struct tagNET_IN_CTRL_LOWRATEWPAN_SETWORKMODE
{
    DWORD dwSize;
    int nMode; 
} NET_IN_CTRL_LOWRATEWPAN_SETWORKMODE;
typedef enum tagEM_CARPASS_STATUS
{
    EM_CARPASS_STATUS_UNKNOWN, 
    EM_CARPASS_STATUS_CARPASS, 
    EM_CARPASS_STATUS_NORMAL,  
} EM_CARPASS_STATUS;
typedef struct tagNET_CTRL_SET_PARK_INFO
{
    DWORD dwSize;
    char szPlateNumber[MAX_PLATE_NUMBER_LEN];  
    unsigned int nParkTime;                    
    char szMasterofCar[MAX_MASTER_OF_CAR_LEN]; 
    char szUserType[MAX_USER_TYPE_LEN];        
    unsigned int nRemainDay;                   
    char szParkCharge[MAX_PARK_CHARGE_LEN];    
    unsigned int nRemainSpace;                 
    unsigned int nPassEnable;                  
    NET_TIME stuInTime;                        
    NET_TIME stuOutTime;                       
    EM_CARPASS_STATUS emCarStatus;             
    char szCustom[MAX_CUSTOM_LEN];             
    char szSubUserType[MAX_SUB_USER_TYPE_LEN]; 
    char szRemarks[MAX_REMARKS_LEN];           
    char szResource[MAX_RESOURCE_LEN];         
    UINT nParkTimeout;                         
} NET_CTRL_SET_PARK_INFO;
typedef struct tagNET_CTRL_CLEAR_SECTION_STAT_INFO
{
    DWORD dwSize;
    int nChannel; 
} NET_CTRL_CLEAR_SECTION_STAT_INFO;
typedef struct tagNET_GET_CODEID_COUNT
{
    DWORD dwSize;
    int nCodeIDCount; 
} NET_GET_CODEID_COUNT;
typedef struct tagNET_GET_CODEID_LIST
{
    DWORD dwSize;
    int nStartIndex;                 
    int nQueryNum;                   
    int nRetCodeIDNum;               
    NET_CODEID_INFO* pstuCodeIDInfo; 
} NET_GET_CODEID_LIST;
typedef struct tagNET_DEVSIGNAL_INFO
{
    DWORD dwSize;  
    char szSN[32]; 
    UINT nSignal;  
} NET_DEVWIRELESSSIGNAL_INFO;
typedef struct tagNET_GET_DEVSIGNAL_LIST
{
    DWORD dwSize;
    int nStartIndex;                               
    int nQueryNum;                                 
    int nRetDevSignalNum;                          
    NET_DEVWIRELESSSIGNAL_INFO* pstuDevSignalInfo; 
} NET_GET_DEVWIRELESSSIGNAL_LIST;
typedef struct tagNET_CTRL_LOWRATEWPAN_ADD
{
    DWORD dwSize;
    NET_CODEID_INFO stuCodeIDInfo; 
} NET_CTRL_LOWRATEWPAN_ADD;
typedef enum tagEM_WIRELESS_DEVICE_ONLINE_STATE
{
    EM_WIRELESS_DEVICE_STATE_UNKNOWN = 0, 
    EM_WIRELESS_DEVICE_STATE_OUTLINE,     
    EM_WIRELESS_DEVICE_STATE_ONLINE,      
} EM_WIRELESS_DEVICE_ONLINE_STATE;
typedef enum tagEM_WIRELESS_DEVICE_POWER_STATE
{
    EM_WIRELESS_DEVICE_POWER_UNKNOWN = 0, 
    EM_WIRELESS_DEVICE_POWER_NORMAL,      
    EM_WIRELESS_DEVICE_POWER_LOW,         
} EM_WIRELESS_DEVICE_POWER_STATE;
typedef struct tagNET_WIRELESS_DEVICE_INFO
{
    char szSerialNumber[DH_WIRELESS_DEVICE_SERIAL_NUMBER_MAX_LEN]; 
    EM_WIRELESS_DEVICE_ONLINE_STATE emOnlineState;                 
    EM_WIRELESS_DEVICE_POWER_STATE emPowerState;                   
    BYTE byReserved[128];                                          
} NET_WIRELESS_DEVICE_INFO;
typedef struct tagNET_GET_WIRELESS_DEVICE_STATE
{
    DWORD dwSize;
    int nStartIndex;                          
    int nQueryNum;                            
    int nRetQueryNum;                         
    NET_WIRELESS_DEVICE_INFO* pstuDeviceInfo; 
} NET_GET_WIRELESS_DEVICE_STATE;
typedef enum tagEM_REDUNDANCE_POWER_STATE
{
    EM_REDUNDANCE_POWER_STATE_UNKNOWN = 0, 
    EM_REDUNDANCE_POWER_STATE_ON,          
    EM_REDUNDANCE_POWER_STATE_OFF,         
    EM_REDUNDANCE_POWER_STATE_ON_FAULT,    
} EM_REDUNDANCE_POWER_STATE;
#define MAX_REDUNDANCE_POWER_NUM 16 
typedef struct tagNET_GET_REDUNDANCE_POWER_INFO
{
    DWORD dwSize;                                                     
    int nPowerNum;                                                    
    EM_REDUNDANCE_POWER_STATE emPowerState[MAX_REDUNDANCE_POWER_NUM]; 
} NET_GET_REDUNDANCE_POWER_INFO;
typedef enum tagNET_EM_ACCESSORY_TAMPER_STATE
{
    NET_EM_ACCESSORY_TAMPER_UNKNOWN, 
    NET_EM_ACCESSORY_TAMPER_ON,      
    NET_EM_ACCESSORY_TAMPER_OFF,     
} NET_EM_ACCESSORY_TAMPER_STATE;
typedef enum tagNET_EM_DOOR_STATE
{
    NET_EM_DOOR_STATE_UNKNOWN, 
    NET_EM_DOOR_STATE_ON,      
    NET_EM_DOOR_STATE_OFF,     
} NET_EM_DOOR_STATE;
typedef enum tagNET_EM_ONLINE_STATE
{
    NET_EM_ONLINE_STATE_UNKNOWN, 
    NET_EM_ONLINE_STATE_OFFLINE, 
    NET_EM_ONLINE_STATE_ONLINE,  
} NET_EM_ONLINE_STATE;
typedef enum tagNET_EM_ALARM_STATE
{
    NET_EM_ALARM_STATE_UNKNOWN = -1, 
    NET_EM_ALARM_STATE_NORMAL,       
    NET_EM_ALARM_STATE_ALARM,        
} NET_EM_ALARM_STATE;
typedef struct tagNET_STATUS_INFO
{
    char szSN[MAX_COMMON_STRING_32];                      
    UINT nPercent;                                        
    float fVolt;                                          
    UINT nIntensity;                                      
    UINT nSignal;                                         
    NET_EM_ACCESSORY_TAMPER_STATE emAccessoryTamperState; 
    NET_EM_DOOR_STATE emDoorState;                        
    char szName[MAX_COMMON_STRING_32];                    
    NET_EM_ONLINE_STATE emOnlineState;                    
    NET_EM_ALARM_STATE emAlarmState;                      
    char szVersion[MAX_COMMON_STRING_16];                 
} NET_STATUS_INFO;
typedef struct tagNET_GET_ACCESSORY_STATUS
{
    DWORD dwSize;                        
    int nSNNum;                          
    char szSN[56][MAX_COMMON_STRING_32]; 
    int nStatusNum;                      
    NET_STATUS_INFO stStatusInfo[56];    
} NET_GET_ACCESSORY_STATUS;
typedef struct tagNET_PTZ_PRESET_POINT
{
    int nIndexNum;        
    int nDwellTime;       
    int nRotationalSpeed; 
    BYTE byReserved[44];  
} NET_PTZ_PRESET_POINT_INFO;
typedef struct tagNET_PTZ_TOURS_INFO
{
    int nCruiseNum;                               
    char szName[64];                              
    NET_PTZ_PRESET_POINT_INFO stuPresetPoint[64]; 
    int nPresetPointNum;                          
    BYTE byReserved[256];                         
} NET_PTZ_TOURS_INFO;
typedef struct tagNET_GET_PTZ_TOURS_INFO
{
    DWORD dwSize;                      
    int nMaxToursNum;                  
    NET_PTZ_TOURS_INFO* pstuToursInfo; 
    int nRetToursNum;                  
} NET_GET_PTZ_TOURS_INFO;
typedef enum tagEM_DETECTOR_STATUS_TYPE
{
    EM_DETECTOR_STATUS_UNKNOWN = -1,       
    EM_DETECTOR_STATUS_ALLFUNCT_ENABLE,    
    EM_DETECTOR_STATUS_ANTITAMPER_DISABLE, 
    EM_DETECTOR_STATUS_ALLFUNCT_DISABLE,   
} EM_DETECTOR_STATUS_TYPE;
typedef enum tagEM_ACCESSORY_VOLUME
{
    EM_ACCESSORY_VOLUME_UNKNOWN, 
    EM_ACCESSORY_VOLUME_LOW,     
    EM_ACCESSORY_VOLUME_MEDIUM,  
    EM_ACCESSORY_VOLUME_HIGH,    
} EM_ACCESSORY_VOLUME;
typedef enum tagEM_EXPOWER_STATE
{
    EM_EXPOWER_DISCONNECT = 0, 
    EM_EXPOWER_CONNECT = 1,    
    EM_EXPOWER_UNKNOWN = 2,    
} EM_EXPOWER_STATE;
typedef enum tagEM_RELAY_TYPE
{
    EM_RELAY_UNKNOWN = -1, 
    EM_RELAY_CLOSED,       
    EM_RELAY_MANUAL,       
    EM_RELAY_AUTO,         
} EM_RELAY_TYPE;
typedef struct tagNET_WPAN_RELAY_INFO
{
    EM_RELAY_TYPE emEnable; 
    int nRelayIndex;        
    BYTE byReserved[32];    
} NET_WPAN_RELAY_INFO;
typedef enum tagEM_ACCESSORY_SENSITIVITY
{
    EM_ACCESSORY_SENSITIVITY_UNKNOWN, 
    EM_ACCESSORY_SENSITIVITY_LOW,     
    EM_ACCESSORY_SENSITIVITY_MEDIUM,  
    EM_ACCESSORY_SENSITIVITY_HIGH,    
} EM_ACCESSORY_SENSITIVITY;
typedef enum tagEM_POWER_REGULATION_TYPE
{
    EM_POWER_REGULATION_UNKNOWN = -1, 
    EM_POWER_REGULATION_AUTO,         
    EM_POWER_REGULATION_LOW,          
    EM_POWER_REGULATION_MEDIUM,       
    EM_POWER_REGULATION_HIGH,         
} EM_POWER_REGULATION_TYPE;
typedef enum tagEM_ARMING_TYPE
{
    EM_ARMING_UNKNOWN = -1, 
    EM_ARMING_ATHOME,       
    EM_ARMING_OUT,          
} EM_ARMING_TYPE;
typedef struct tagNET_WPAN_ARMING_INFO
{
    EM_ARMING_TYPE emType; 
    BOOL bEnable;          
    BOOL bDelayEnable;     
    BYTE byReserved[32];   
} NET_WPAN_ARMING_INFO;
typedef struct tagNET_WPAN_HEARTBEAT_INFO
{
    UINT nInterval;      
    UINT nOfflineTimes;  
    BYTE byReserved[32]; 
} NET_WPAN_HEARTBEAT_INFO;
typedef enum tagEM_ONLINE_STATUS
{
    EM_ONLINE_UNKNOWN, 
    EM_ONLINE_OFF,     
    EM_ONLINE_ON,      
} EM_ONLINE_STATUS;
typedef enum tagEM_ACCESSORY_ALARM_TYPE
{
    EM_ACCESSORY_ALARM_UNKNOWN = -1, 
    EM_ACCESSORY_ALARM_INTRUSION,    
    EM_ACCESSORY_ALARM_FIRE,         
    EM_ACCESSORY_ALARM_MEDICAL,      
    EM_ACCESSORY_ALARM_PANIC,        
    EM_ACCESSORY_ALARM_GAS,          
    EM_ACCESSORY_ALARM_HOLDUP,       
} EM_ACCESSORY_ALARM_TYPE;
typedef enum tagEM_ACCESSORY_INPUT_TYPE
{
    EM_ACCESSORY_INPUT_UNKNOWN = -1, 
    EM_ACCESSORY_INPUT_TAMPER,       
    EM_ACCESSORY_INPUT_SENSOR,       
} EM_ACCESSORY_INPUT_TYPE;
typedef enum tagEM_LED_BRIGHTNESS_LEVEL
{
    EM_LED_BRIGHTNESS_UNKNOWN = -1, 
    EM_LED_BRIGHTNESS_CLOSED,       
    EM_LED_BRIGHTNESS_LOW,          
    EM_LED_BRIGHTNESS_MEDIUM,       
    EM_LED_BRIGHTNESS_HIGH,         
} EM_LED_BRIGHTNESS_LEVEL;
typedef enum tagEM_OPERATION_MODE
{
    EM_OPERATION_UNKNOWN = -1,    
    EM_OPERATION_PANIC,           
    EM_OPERATION_CONTROL,         
    EM_OPERATION_MUTE_FIRE_ALARM, 
} EM_OPERATION_MODE;
typedef enum tagEM_ANTI_MISPRESS_TYPE
{
    EM_ANTI_MISPRESS_UNKNOWN, 
    EM_ANTI_MISPRESS_OFF,     
    EM_ANTI_MISPRESS_LONG,    
    EM_ANTI_MISPRESS_DOUBLE,  
} EM_ANTI_MISPRESS_TYPE;
typedef enum tagEM_BUTTON_ALARM_TYPE
{
    EM_BUTTON_ALARM_UNKNOWN = -1, 
    EM_BUTTON_ALARM_FIRE,         
    EM_BUTTON_ALARM_EMERGENCY,    
    EM_BUTTON_ALARM_MEDICAL,      
} EM_BUTTON_ALARM_TYPE;
typedef struct tagNET_WPAN_ACCESSORY_CAPS_INFO
{
    BOOL bSupportAlarmTone;            
    BOOL bSupportCardReader;           
    BOOL bSupportChime;                
    BOOL bSupportOverTemperatureAlarm; 
    BOOL bSupportExternalWifi;         
    BOOL bSupportWifiInfo;             
    BYTE byreserve[32];                
} NET_WPAN_ACCESSORY_CAPS_INFO;
typedef struct tagNET_WPAN_ACCESSORY_BUTTON_INFO
{
    BOOL bEnable;                
    EM_BUTTON_ALARM_TYPE emType; 
    UINT nSirenLinkageNum;       
    int nSirenLinkage[64];       
    BYTE byReserved[32];         
} NET_WPAN_ACCESSORY_BUTTON_INFO;
typedef struct tagNET_WPAN_ACCESSORY_LOCK_INFO
{
    BOOL bLockLoginEnable;   
    UINT nLoginFailLockTime; 
    BYTE byLockLoginTimes;   
    BYTE byReserved[31];     
} NET_WPAN_ACCESSORY_LOCK_INFO;
typedef struct tagNET_WPAN_CARD_READER_INFO
{
    BOOL bEnable;        
    BYTE byEncryption;   
    BYTE byReserved[31]; 
} NET_WPAN_CARD_READER_INFO;
typedef struct tagNET_WPAN_ACCESSORY_IMAGE_INFO
{
    CAPTURE_SIZE emResolution; 
    int nSnapshotNumber;       
    int nSnapshotTimes;        
    BYTE byReserved[32];       
} NET_WPAN_ACCESSORY_IMAGE_INFO;
typedef enum tagEM_EXTERNAL_WIFI_PRIORITY
{
    EM_EXTERNAL_WIFI_UNKNOWN,     
    EM_EXTERNAL_WIFI_FIRST,       
    EM_EXTERNAL_WIFI_ALTERNATIVE, 
    EM_EXTERNAL_WIFI_USEONLY,     
} EM_EXTERNAL_WIFI_PRIORITY;
typedef struct tagNET_WPAN_EXTERNAL_WIFI_INFO
{
    BOOL bEnable;                         
    EM_EXTERNAL_WIFI_PRIORITY emPriority; 
    BYTE byReserved[32];                  
} NET_WPAN_EXTERNAL_WIFI_INFO;
typedef struct tagNET_WPAN_WIFI_INFO
{
    BOOL bSyncEnable;                      
    char szSSID[MAX_COMMON_STRING_128];    
    char szPassword[MAX_COMMON_STRING_64]; 
    BYTE byReserved[32];                   
} NET_WPAN_WIFI_INFO;
typedef struct tagNET_WPAN_OVER_TEMPERATURE_ALARM_INFO
{
    BOOL bEnable;        
    double dbLowerLimit; 
    double dbUpperLimit; 
    BYTE byReserved[32]; 
} NET_WPAN_OVER_TEMPERATURE_ALARM_INFO;
typedef struct tagNET_WPAN_ACCESSORY_INFO
{
    DWORD dwSize;                                                 
    BOOL bRecordEnable;                                           
    BOOL bExternalAlarmEnable;                                    
    BOOL bArmingWithoutPassword;                                  
    BYTE byAlarmLedIndication;                                    
    BYTE byExPowerCheck;                                          
    BYTE byTamper;                                                
    BYTE by24HDefenceStatus;                                      
    BYTE byAlarmStatus;                                           
    BYTE byExternalAlarmStatus;                                   
    BYTE byLedIndication;                                         
    BYTE byBeepIndication;                                        
    BYTE bySosStatus;                                             
    BYTE byViaTrace;                                              
    BYTE bySensorType;                                            
    BYTE byLockState;                                             
    BYTE bySensorFailure;                                         
    BYTE bySignalStrengthTest;                                    
    BYTE bySensitivityTest;                                       
    BYTE byVolumeTest;                                            
    BYTE bySnapshotTest;                                          
    BYTE byWifiTest;                                              
    BYTE byBlockState;                                            
    UINT nShortAddr;                                              
    UINT nPercent;                                                
    UINT nSignalLevel;                                            
    UINT nEntryDelay;                                             
    UINT nExitDelay;                                              
    UINT nAlarmDuring;                                            
    int nTriggerAlarmInterval;                                    
    EM_DETECTOR_STATUS_TYPE emState;                              
    EM_ACCESSORY_VOLUME emBeepVolume;                             
    EM_ACCESSORY_SENSITIVITY emSensentivity;                      
    EM_POWER_REGULATION_TYPE emPowerRegulation;                   
    EM_ONLINE_STATUS emOnline;                                    
    EM_ACCESSORY_ALARM_TYPE emAlarmType;                          
    EM_ACCESSORY_INPUT_TYPE emInputType;                          
    EM_LED_BRIGHTNESS_LEVEL emLedBrightnessLevel;                 
    EM_OPERATION_MODE emOperationMode;                            
    EM_ANTI_MISPRESS_TYPE emAntiMispress;                         
    EM_EXPOWER_STATE emExPowerState;                              
    EM_ACCESSORY_VOLUME emVolume;                                 
    float fAmbientTemperature;                                    
    char szSN[MAX_COMMON_STRING_32];                              
    char szName[MAX_COMMON_STRING_64];                            
    char szVersion[MAX_COMMON_STRING_64];                         
    char szModel[MAX_COMMON_STRING_64];                           
    char szAlarmTone[MAX_COMMON_STRING_128];                      
    NET_WPAN_RELAY_INFO stuRelayTran;                             
    NET_SENSE_METHOD emType;                                      
    NET_WPAN_HEARTBEAT_INFO stuHeartbeat;                         
    NET_WPAN_ACCESSORY_CAPS_INFO stuCaps;                         
    NET_WPAN_ACCESSORY_LOCK_INFO stuLockInfo;                     
    NET_WPAN_CARD_READER_INFO stuCardReader;                      
    NET_WPAN_ACCESSORY_IMAGE_INFO stuImageInfo;                   
    NET_WPAN_EXTERNAL_WIFI_INFO stuExternalWifi;                  
    NET_WPAN_WIFI_INFO stuWifiInfo;                               
    NET_WPAN_OVER_TEMPERATURE_ALARM_INFO stuOverTemperatureAlarm; 
    UINT nAreaNumberCnt;                                          
    int nAreaNumber[64];                                          
    UINT nControlAreaNumCnt;                                      
    int nControlAreaNum[64];                                      
    UINT nRecordChannelsNum;                                      
    int nRecordChannels[256];                                     
    UINT nSirenLinkageNum;                                        
    int nSirenLinkage[256];                                       
    UINT nArmingInfoNum;                                          
    NET_WPAN_ARMING_INFO stuArmingInfo[4];                        
    UINT nButtonNum;                                              
    NET_WPAN_ACCESSORY_BUTTON_INFO stuButton[16];                 
} NET_WPAN_ACCESSORY_INFO;
typedef struct tagNET_GET_ACCESSORY_INFO
{
    DWORD dwSize;                        
    UINT nSNNum;                         
    char szSN[56][MAX_COMMON_STRING_32]; 
    UINT nMaxInfoNum;                    
    NET_WPAN_ACCESSORY_INFO* pstuInfo;   
    UINT nInfoNum;                       
} NET_GET_ACCESSORY_INFO;
typedef enum tagEM_UPNP_STATUS_TYPE
{
    EM_UPNP_STATUS_UNKNOWN, 
    EM_UPNP_STATUS_SUCCESS, 
    EM_UPNP_STATUS_ERROR,   
} EM_UPNP_STATUS_TYPE;
typedef enum tagEM_PORTMAP_STATUS_TYPE
{
    EM_PORTMAP_STATUS_UNKNOWN, 
    EM_PORTMAP_STATUS_SUCCESS, 
    EM_PORTMAP_STATUS_FAILED,  
} EM_PORTMAP_STATUS_TYPE;
typedef struct tagNET_GET_UPNPSTATUS_INFO
{
    DWORD dwSize;                              
    BOOL bWorking;                             
    EM_UPNP_STATUS_TYPE emStatus;              
    char szInnerAddress[MAX_COMMON_STRING_64]; 
    char szOuterAddress[MAX_COMMON_STRING_64]; 
    UINT nMaxPortMapStatus;                    
    UINT nReturnNum;                           
    EM_PORTMAP_STATUS_TYPE* pemPortMapStatus;  
} NET_GET_UPNPSTATUS_INFO;
typedef struct tagNET_IN_TEST_MAIL
{
    DWORD dwSize;
} NET_IN_TEST_MAIL;
typedef struct tagNET_OUT_TEST_MAIL
{
    DWORD dwSize;
} NET_OUT_TEST_MAIL;
typedef struct tagNET_IN_CTRL_LOWRATEWPAN_ACCESSORY_PARAM
{
    DWORD dwSize;
    NET_WPAN_ACCESSORY_INFO stuInfo; 
} NET_IN_CTRL_LOWRATEWPAN_ACCESSORY_PARAM;
typedef struct tagNET_IN_CONTROL_SMART_SWITCH
{
    DWORD dwSize;
    char szSerialNumber[DH_WIRELESS_DEVICE_SERIAL_NUMBER_MAX_LEN]; 
    BOOL bEnable;                                                  
    int nDelayTime;                                                
} NET_IN_CONTROL_SMART_SWITCH;
typedef struct tagNET_OUT_CONTROL_SMART_SWITCH
{
    DWORD dwSize;
} NET_OUT_CONTROL_SMART_SWITCH;
typedef enum tagEM_COAXIAL_CONTROL_IO_TYPE
{
    EM_COAXIAL_CONTROL_IO_TYPE_UNKNOWN, 
    EM_COAXIAL_CONTROL_IO_TYPE_LIGHT,   
    EM_COAXIAL_CONTROL_IO_TYPE_SPEAKER, 
} EM_COAXIAL_CONTROL_IO_TYPE;
typedef enum tagEM_COAXIAL_CONTROL_IO_SWITCH
{
    EM_COAXIAL_CONTROL_IO_SWITCH_UNKNOWN, 
    EM_COAXIAL_CONTROL_IO_SWITCH_OPEN,    
    EM_COAXIAL_CONTROL_IO_SWITCH_CLOSE,   
} EM_COAXIAL_CONTROL_IO_SWITCH;
typedef enum tagEM_COAXIAL_CONTROL_IO_TRIGGER_MODE
{
    EM_COAXIAL_CONTROL_IO_TRIGGER_MODE_UNKNOWN,         
    EM_COAXIAL_CONTROL_IO_TRIGGER_MODE_LINKAGE_TRIGGER, 
    EM_COAXIAL_CONTROL_IO_TRIGGER_MODE_MANUAL_TRIGGER,  
} EM_COAXIAL_CONTROL_IO_TRIGGER_MODE;
typedef enum tagEM_COAXIAL_CONTROL_IO_LIGHT_MODE
{
    EM_COAXIAL_CONTROL_IO_LIGHT_MODE_UNKNOWN, 
    EM_COAXIAL_CONTROL_IO_LIGHT_MODE_BRIGHT,  
    EM_COAXIAL_CONTROL_IO_LIGHT_MODE_TWINKLE, 
} EM_COAXIAL_CONTROL_IO_LIGHT_MODE;
typedef struct tagNET_COAXIAL_CONTROL_IO_INFO
{
    EM_COAXIAL_CONTROL_IO_TYPE emType;            
    EM_COAXIAL_CONTROL_IO_SWITCH emSwicth;        
    EM_COAXIAL_CONTROL_IO_TRIGGER_MODE emMode;    
    EM_COAXIAL_CONTROL_IO_LIGHT_MODE emLightMode; 
    BYTE byReserved[124];                         
} NET_COAXIAL_CONTROL_IO_INFO;
#define MAX_COAXIAL_CONTROL_IO_COUNT 8
typedef struct tagNET_IN_CONTROL_COAXIAL_CONTROL_IO
{
    DWORD dwSize;                                                     
    int nChannel;                                                     
    int nInfoCount;                                                   
    NET_COAXIAL_CONTROL_IO_INFO stInfo[MAX_COAXIAL_CONTROL_IO_COUNT]; 
} NET_IN_CONTROL_COAXIAL_CONTROL_IO;
typedef struct tagNET_OUT_CONTROL_COAXIAL_CONTROL_IO
{
    DWORD dwSize; 
} NET_OUT_CONTROL_COAXIAL_CONTROL_IO;
typedef struct tagNET_GET_ANALOGALARM_DATA
{
    DWORD dwSize;
    int nChannelID;                     
    NET_ANALOGALARM_SENSE_INFO stuInfo; 
} NET_GET_ANALOGALARM_DATA;
typedef enum tagEM_NET_SCADA_DEV_TYPE
{
    EM_NET_SCADA_DEV_TYPE_UNKNOWN = 0, 
    EM_NET_SCADA_DEV_TYPE_ALL,         
    EM_NET_SCADA_DEV_TYPE_UPS,         
} EM_NET_SCADA_DEV_TYPE;
typedef struct tagNET_IN_SCADA_POINT_LIST_INFO
{
    DWORD dwSize;
    char szDevType[DH_COMMON_STRING_64]; 
} NET_IN_SCADA_POINT_LIST_INFO;
#define MAX_SCADA_POINT_LIST_INDEX 8 
typedef struct tagNET_SCADA_POINT_LIST
{
    DWORD dwSize;
    int nIndexValidNum;                     
    int nIndex[MAX_SCADA_POINT_LIST_INDEX]; 
    char szPath[DH_COMMON_STRING_256];      
} NET_SCADA_POINT_LIST;
#define MAX_SCADA_POINT_LIST_INFO_NUM 256       
#define MAX_SCADA_POINT_LIST_ALARM_INFO_NUM 256 
typedef struct tagNET_OUT_SCADA_POINT_LIST_INFO
{
    DWORD dwSize;
    int nList;                                                   
    NET_SCADA_POINT_LIST stuList[MAX_SCADA_POINT_LIST_INFO_NUM]; 
} NET_OUT_SCADA_POINT_LIST_INFO;
typedef struct tagNET_SCADA_POINT_LIST_INFO
{
    DWORD dwSize;
    NET_IN_SCADA_POINT_LIST_INFO stuIn;   
    NET_OUT_SCADA_POINT_LIST_INFO stuOut; 
} NET_SCADA_POINT_LIST_INFO;
typedef enum tagEM_NET_SCADA_POINT_TYPE
{
    EM_NET_SCADA_POINT_TYPE_UNKNOWN = 0, 
    EM_NET_SCADA_POINT_TYPE_ALL,         
    EM_NET_SCADA_POINT_TYPE_YC,          
    EM_NET_SCADA_POINT_TYPE_YX,          
    EM_NET_SCADA_POINT_TYPE_YT,          
    EM_NET_SCADA_POINT_TYPE_YK,          
} EM_NET_SCADA_POINT_TYPE;
typedef struct tagNET_IN_SCADA_INFO
{
    DWORD dwSize;
    EM_NET_SCADA_POINT_TYPE emPointType; 
} NET_IN_SCADA_INFO;
#define MAX_SCADA_YX_NUM 128       
#define MAX_SCADA_YC_NUM 128       
#define MAX_SCADA_POINT_INFO_NUM 8 
typedef struct tagNET_SCADA_POINT_INFO
{
    DWORD dwSize;
    char szDevName[DH_COMMON_STRING_64]; 
    int nYX;                             
    unsigned int anYX[MAX_SCADA_YX_NUM]; 
    int nYC;                             
    float afYC[MAX_SCADA_YC_NUM];        
} NET_SCADA_POINT_INFO;
typedef struct tagNET_OUT_SCADA_INFO
{
    DWORD dwSize;
    int nPointInfoNum;                                           
    NET_SCADA_POINT_INFO stuPointInfo[MAX_SCADA_POINT_INFO_NUM]; 
} NET_OUT_SCADA_INFO;
typedef struct tagNET_SCADA_INFO
{
    DWORD dwSize;
    NET_IN_SCADA_INFO stuIn;   
    NET_OUT_SCADA_INFO stuOut; 
} NET_SCADA_INFO;
typedef enum tagEM_NET_SCADA_CAPS_TYPE
{
    EM_NET_SCADA_CAPS_TYPE_UNKNOWN,
    EM_NET_SCADA_CAPS_TYPE_ALL, 
    EM_NET_SCADA_CAPS_TYPE_DEV, 
} EM_NET_SCADA_CAPS_TYPE;
typedef struct tagNET_IN_SCADA_CAPS
{
    DWORD dwSize;
    EM_NET_SCADA_CAPS_TYPE emType; 
} NET_IN_SCADA_CAPS;
#define MAX_NET_SCADA_CAPS_TYPE (16)
#define MAX_NET_SCADA_CAPS_NAME (16)
typedef struct tagNET_OUT_SCADA_CAPS_ITEM
{
    DWORD dwSize;
    char szDevType[DH_COMMON_STRING_32];                          
    int nValidName;                                               
    char szDevName[MAX_NET_SCADA_CAPS_NAME][DH_COMMON_STRING_32]; 
} NET_OUT_SCADA_CAPS_ITEM;
typedef struct tagNET_OUT_SCADA_CAPS
{
    DWORD dwSize;
    int nValidType;                                            
    NET_OUT_SCADA_CAPS_ITEM stuItems[MAX_NET_SCADA_CAPS_TYPE]; 
} NET_OUT_SCADA_CAPS;
typedef struct tagNET_SCADA_CAPS
{
    DWORD dwSize;
    NET_IN_SCADA_CAPS stuIn;   
    NET_OUT_SCADA_CAPS stuOut; 
} NET_SCADA_CAPS;
typedef struct tagNET_SCADA_POINT_BY_ID_INFO
{
    DWORD dwSize;
    EM_NET_SCADA_POINT_TYPE emType; 
    char szID[DH_COMMON_STRING_64]; 
    int nMeasuredVal;               
    float fMeasureVal;              
    int nSetupVal;                  
    float fSetupVal;                
    int nStatus;                    
    NET_TIME stuTime;               
    char szPointName[32];           
} NET_SCADA_POINT_BY_ID_INFO;
#define MAX_SCADA_ID_OF_SENSOR_NUM 128 
typedef struct tagNET_SCADA_INFO_BY_ID
{
    DWORD dwSize;
    char szSensorID[DH_COMMON_STRING_64];                        
    int nIDs;                                                    
    char szIDs[MAX_SCADA_ID_OF_SENSOR_NUM][DH_COMMON_STRING_64]; 
    BOOL bIsHandle;                                              
    int nMaxCount;                                               
    int nRetCount;                                               
    NET_SCADA_POINT_BY_ID_INFO* pstuInfo;                        
} NET_SCADA_INFO_BY_ID;
typedef struct tagNET_SCADA_DEVICE_ID_INFO
{
    char szDeviceID[DH_COMMON_STRING_64]; 
    char szDevName[DH_COMMON_STRING_64];  
    char szDevCode[64];                   
    int nSlot;                            
    int nLevel;                           
    BYTE reserve[952];
} NET_SCADA_DEVICE_ID_INFO;
typedef struct tagNET_SCADA_DEVICE_LIST
{
    DWORD dwSize;
    int nMax;                                   
    int nRet;                                   
    NET_SCADA_DEVICE_ID_INFO* pstuDeviceIDInfo; 
} NET_SCADA_DEVICE_LIST;
typedef struct tagNET_SCADA_NOTIFY_POINT_INFO
{
    DWORD dwSize;
    char szDevName[DH_COMMON_STRING_64];   
    EM_NET_SCADA_POINT_TYPE emPointType;   
    char szPointName[DH_COMMON_STRING_64]; 
    float fValue;                          
    int nValue;                            
    char szFSUID[DH_COMMON_STRING_64];     
    char szID[DH_COMMON_STRING_64];        
    char szSensorID[DH_COMMON_STRING_64];  
    NET_TIME_EX stuCollectTime;            
} NET_SCADA_NOTIFY_POINT_INFO;
typedef struct tagNET_SCADA_NOTIFY_POINT_INFO_LIST
{
    DWORD dwSize;
    int nList;                                                          
    NET_SCADA_NOTIFY_POINT_INFO stuList[MAX_SCADA_POINT_LIST_INFO_NUM]; 
} NET_SCADA_NOTIFY_POINT_INFO_LIST;
typedef void(CALLBACK* fSCADAAttachInfoCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_SCADA_NOTIFY_POINT_INFO_LIST* pInfo, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_SCADA_ATTACH_INFO
{
    DWORD dwSize;
    fSCADAAttachInfoCallBack cbCallBack; 
    EM_NET_SCADA_POINT_TYPE emPointType; 
    LDWORD dwUser;                       
} NET_IN_SCADA_ATTACH_INFO;
typedef struct tagNET_OUT_SCADA_ATTACH_INFO
{
    DWORD dwSize;
} NET_OUT_SCADA_ATTACH_INFO;
#define MAX_SCADA_ID_NUM 1024 
typedef struct tagNET_SCADA_ID_THRESHOLD_INFO
{
    DWORD dwSize;
    EM_NET_SCADA_POINT_TYPE emPointType; 
    char szID[DH_COMMON_STRING_32];      
    float fThreshold;                    
    float fAbsoluteValue;                
    float fRelativeValue;                
    int nStatus;                         
} NET_SCADA_ID_THRESHOLD_INFO;
typedef struct tagNET_IN_SCADA_GET_THRESHOLD
{
    DWORD dwSize;
    char szDeviceID[DH_COMMON_STRING_64];              
    int nIDs;                                          
    char szIDs[MAX_SCADA_ID_NUM][DH_COMMON_STRING_32]; 
} NET_IN_SCADA_GET_THRESHOLD;
typedef struct tagNET_OUT_SCADA_GET_THRESHOLD
{
    DWORD dwSize;
    int nMax;                                       
    int nRet;                                       
    NET_SCADA_ID_THRESHOLD_INFO* pstuThresholdInfo; 
} NET_OUT_SCADA_GET_THRESHOLD;
typedef struct tagNET_IN_SCADA_SET_THRESHOLD
{
    DWORD dwSize;
    char szDeviceID[DH_COMMON_STRING_64];           
    int nMax;                                       
    NET_SCADA_ID_THRESHOLD_INFO* pstuThresholdInfo; 
} NET_IN_SCADA_SET_THRESHOLD;
typedef struct tagNET_OUT_SCADA_SET_THRESHOLD
{
    DWORD dwSize;
    int nSuccess;                                            
    char szSuccessID[MAX_SCADA_ID_NUM][DH_COMMON_STRING_32]; 
    int nFail;                                               
    char szFailID[MAX_SCADA_ID_NUM][DH_COMMON_STRING_32];    
} NET_OUT_SCADA_SET_THRESHOLD;
typedef struct tagNET_IN_SCADA_START_FIND
{
    DWORD dwSize;
    NET_TIME stuStartTime;                
    BOOL bEndTime;                        
    NET_TIME stuEndTime;                  
    char szDeviceID[DH_COMMON_STRING_64]; 
    char szID[DH_COMMON_STRING_32];       
    int nIDsNum;                          
    char szIDs[32][DH_COMMON_STRING_32];  
} NET_IN_SCADA_START_FIND;
typedef struct tagNET_OUT_SCADA_START_FIND
{
    DWORD dwSize;
    DWORD dwTotalCount; 
} NET_OUT_SCADA_START_FIND;
typedef struct tagNET_IN_SCADA_DO_FIND
{
    DWORD dwSize;
    int nStartNo; 
    int nCount;   
} NET_IN_SCADA_DO_FIND;
typedef struct tagNET_OUT_SCADA_DO_FIND
{
    DWORD dwSize;
    int nRetNum;                          
    NET_SCADA_POINT_BY_ID_INFO* pstuInfo; 
    int nMaxNum;                          
} NET_OUT_SCADA_DO_FIND;
typedef struct tagNET_SCADA_NOTIFY_POINT_ALARM_INFO
{
    DWORD dwSize;
    char szDevID[DH_COMMON_STRING_16];      
    char szPointID[DH_COMMON_STRING_128];   
    BOOL bAlarmFlag;                        
    NET_TIME stuAlarmTime;                  
    int nAlarmLevel;                        
    int nSerialNo;                          
    char szAlarmDesc[DH_COMMON_STRING_128]; 
    char szSignalName[64];                  
} NET_SCADA_NOTIFY_POINT_ALARM_INFO;
typedef struct tagNET_SCADA_NOTIFY_POINT_ALARM_INFO_EX
{
    float fEventValue;     
    char szResvered[1020]; 
} NET_SCADA_NOTIFY_POINT_ALARM_INFO_EX;
typedef struct tagNET_SCADA_NOTIFY_POINT_ALARM_INFO_LIST
{
    DWORD dwSize;
    int nList;                                                                      
    NET_SCADA_NOTIFY_POINT_ALARM_INFO stuList[MAX_SCADA_POINT_LIST_ALARM_INFO_NUM]; 
    NET_SCADA_NOTIFY_POINT_ALARM_INFO_EX stuListEx[256];                            
} NET_SCADA_NOTIFY_POINT_ALARM_INFO_LIST;
typedef void(CALLBACK* fSCADAAlarmAttachInfoCallBack)(LLONG lAttachHandle, NET_SCADA_NOTIFY_POINT_ALARM_INFO_LIST* pInfo, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_SCADA_ALARM_ATTACH_INFO
{
    DWORD dwSize;
    fSCADAAlarmAttachInfoCallBack cbCallBack; 
    LDWORD dwUser;                            
} NET_IN_SCADA_ALARM_ATTACH_INFO;
typedef struct tagNET_OUT_SCADA_ALARM_ATTACH_INFO
{
    DWORD dwSize;
} NET_OUT_SCADA_ALARM_ATTACH_INFO;
typedef struct tagNET_SCADA_POINT_SET_INFO
{
    DWORD dwSize;
    EM_NET_SCADA_POINT_TYPE emType;      
    char szPointID[DH_COMMON_STRING_64]; 
    int nSetupVal;                       
    float fSetupVal;                     
} NET_SCADA_POINT_SET_INFO;
typedef struct tagNET_IN_SCADA_POINT_SET_INFO_LIST
{
    DWORD dwSize;
    char szDevID[DH_COMMON_STRING_32];                            
    int nPointNum;                                                
    NET_SCADA_POINT_SET_INFO stuList[MAX_SCADA_ID_OF_SENSOR_NUM]; 
} NET_IN_SCADA_POINT_SET_INFO_LIST;
typedef struct tagNET_OUT_SCADA_POINT_SET_INFO_LIST
{
    DWORD dwSize;
    int nSuccess;                                                      
    char szSuccessID[MAX_SCADA_ID_OF_SENSOR_NUM][DH_COMMON_STRING_32]; 
    int nFail;                                                         
    char szFailID[MAX_SCADA_ID_OF_SENSOR_NUM][DH_COMMON_STRING_32];    
} NET_OUT_SCADA_POINT_SET_INFO_LIST;
typedef struct tagNET_GET_ALARM_SUBSYSTEM_ACTIVATE_STATUES
{
    DWORD dwSize;
    int nChannelId; 
    BOOL bActive;   
} NET_GET_ALARM_SUBSYSTEM_ACTIVATE_STATUES;
typedef struct tagNET_CTRL_ALARM_SUBSYSTEM_SETACTIVE
{
    DWORD dwSize;
    int nChannelId; 
    BOOL bActive;   
} NET_CTRL_ALARM_SUBSYSTEM_SETACTIVE;
typedef struct tagNET_CTRL_FORBID_OPEN_STROBE
{
    DWORD dwSize;
    int nChannelID; 
    int nTime;      
} NET_CTRL_FORBID_OPEN_STROBE;
#define MAX_PLATENUMBER_LEN 64 
typedef enum tagEM_OPEN_STROBE_TYPE
{
    EM_OPEN_STROBE_TYPE_UNKNOWN, 
    EM_OPEN_STROBE_TYPE_NORMAL,  
    EM_OPEN_STROBE_TYPE_TEST,    
    EM_OPEN_STROBE_TYPE_MANUAL,  
} EM_OPEN_STROBE_TYPE;
typedef struct tagNET_CTRL_OPEN_STROBE
{
    DWORD dwSize;
    int nChannelId;                          
    char szPlateNumber[MAX_PLATENUMBER_LEN]; 
    EM_OPEN_STROBE_TYPE emOpenType;          
    int nLocation;                           
} NET_CTRL_OPEN_STROBE;
typedef void(CALLBACK* fOpenStrobeCallBack)(LLONG lLoginID, NET_CTRL_OPEN_STROBE stuOpenStrobe, int nError, LDWORD dwUser);
typedef struct tagNET_CTRL_OPEN_STROBE_ASYN
{
    DWORD dwSize;
    NET_CTRL_OPEN_STROBE stuOpenStrobe; 
    fOpenStrobeCallBack cbCallBack;     
    LDWORD dwUser;                      
    int nWaitTime;                      
} NET_CTRL_OPEN_STROBE_ASYN;
typedef struct tagNET_CTRL_CLOSE_STROBE
{
    DWORD dwSize;
    int nChannelId; 
    int nLocation;  
} NET_CTRL_CLOSE_STROBE;
typedef struct tagNET_CTRL_FORCE_BREAKING
{
    DWORD dwSize;
    int nChannelId;       
    int nLaneMask;        
    DWORD dwBreakingType; 
    BOOL bLastRecognized; 
} NET_CTRL_FORCE_BREAKING;
typedef struct tagNET_CTRL_TALKING_REFUSE
{
    DWORD dwSize;
    int nChannelID; 
} NET_CTRL_TALKING_REFUSE;
typedef enum tagEM_REMOTETALK_CTRL_STATE
{
    EM_REMOTETALK_CTRL_STATE_UNKNOWN = 0, 
    EM_REMOTETALK_CTRL_STATE_INVITE,      
} EM_REMOTETALK_CTRL_STATE;
typedef struct tagNET_CTRL_REMOTETALK_PARAM
{
    DWORD dwSize;                      
    EM_REMOTETALK_CTRL_STATE emAction; 
} NET_CTRL_REMOTETALK_PARAM;
typedef enum tagEM_NET_ORDER_STATE
{
    EM_NET_ORDER_STATE_UNKNOWN,
    EM_NET_ORDER_STATE_FREE,    
    EM_NET_ORDER_STATE_ORDERED, 
} EM_NET_ORDER_STATE;
typedef struct tagNET_ORDER_STATE_INFO
{
    DWORD dwSize;
    unsigned int nLane;              
    EM_NET_ORDER_STATE emOrderState; 
} NET_ORDER_STATE_INFO;
typedef struct tagNET_CTRL_SET_ORDER_STATE
{
    DWORD dwSize;
    NET_ORDER_STATE_INFO* pOrderStateInfo; 
    unsigned int nStateCount;              
} NET_CTRL_SET_ORDER_STATE;
typedef enum tagNET_ECK_LED_SPEED_TYPE
{
    NET_ECK_LED_SPEED_UNKNOWN = 0,
    NET_ECK_LED_SPEED_LOW,    
    NET_ECK_LED_SPEED_NORMAL, 
    NET_ECK_LED_SPEED_HIGH,   
} NET_ECK_LED_SPEED_TYPE;
typedef struct tagNET_CTRL_ECK_LED_SET_PARAM
{
    DWORD dwSize;
    NET_ECK_LED_SPEED_TYPE emLEDSpeed;       
    int nCount;                              
    char szCustomData[DH_COMMON_STRING_512]; 
} NET_CTRL_ECK_LED_SET_PARAM;
typedef enum tagEM_SCREEN_TEXT_TYPE
{
    EM_SCREEN_TEXT_TYPE_UNKNOWN = -1, 
    EM_SCREEN_TEXT_TYPE_ORDINARY,     
    EM_SCREEN_TEXT_TYPE_LOCAL_TIME,   
    EM_SCREEN_TEXT_TYPE_QR_CODE,      
    EM_SCREEN_TEXT_TYPE_RESOURCE,     
} EM_SCREEN_TEXT_TYPE;
typedef enum tagEM_SCREEN_TEXT_COLOR
{
    EM_SCREEN_TEXT_COLOR_UNKNOWN = -1, 
    EM_SCREEN_TEXT_COLOR_GREEN,        
    EM_SCREEN_TEXT_COLOR_RED,          
    EM_SCREEN_TEXT_COLOR_YELLOW,       
    EM_SCREEN_TEXT_COLOR_WHITE,        
} EM_SCREEN_TEXT_COLOR;
typedef enum tagEM_SCREEN_TEXT_ROLL_MODE
{
    EM_SCREEN_TEXT_ROLL_MODE_UNKNOWN = -1, 
    EM_SCREEN_TEXT_ROLL_MODE_NO,           
    EM_SCREEN_TEXT_ROLL_MODE_LEFT_RIGHT,   
    EM_SCREEN_TEXT_ROLL_MODE_UP_DOWN,      
    EM_SCREEN_TEXT_ROLL_MODE_CUT_OUT,      
} EM_SCREEN_TEXT_ROLL_MODE;
typedef enum tagEM_BROADCAST_TEXT_TYPE
{
    EM_BROADCAST_TEXT_TYPE_UNKNOWN = -1,  
    EM_BROADCAST_TEXT_TYPE_ORDINARY,      
    EM_BROADCAST_TEXT_TYPE_PLATE_NUMBER,  
    EM_BROADCAST_TEXT_TYPE_TIME,          
    EM_BROADCAST_TEXT_TYPE_NUMBER_STRING, 
} EM_BROADCAST_TEXT_TYPE;
typedef struct tagNET_SCREEN_SHOW_INFO
{
    UINT nScreenNo;                          
    char szText[256];                        
    EM_SCREEN_TEXT_TYPE emTextType;          
    EM_SCREEN_TEXT_COLOR emTextColor;        
    EM_SCREEN_TEXT_ROLL_MODE emTextRollMode; 
    UINT nRollSpeed;                         
    int nDisplayEffect;                      
    BYTE byReserved[248];                    
} NET_SCREEN_SHOW_INFO;
typedef struct tagNET_BROADCAST_INFO
{
    char szText[256];                  
    EM_BROADCAST_TEXT_TYPE emTextType; 
    BYTE byReserved[252];              
} NET_BROADCAST_INFO;
typedef struct tagNET_IN_SET_PARK_CONTROL_INFO
{
    DWORD dwSize;                               
    int nScreenShowInfoNum;                     
    NET_SCREEN_SHOW_INFO stuScreenShowInfo[16]; 
    BYTE byReserved[4];                         
    int nBroadcastInfoNum;                      
    NET_BROADCAST_INFO stuBroadcastInfo[16];    
} NET_IN_SET_PARK_CONTROL_INFO;
typedef struct tagNET_OUT_SET_PARK_CONTROL_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_PARK_CONTROL_INFO;
typedef struct tagNET_IN_CTRL_CHANGE_SUSTAIN
{
    DWORD dwSize; 
    int nSustain; 
} NET_IN_CTRL_CHANGE_SUSTAIN;
typedef struct tagNET_OUT_CTRL_CHANGE_SUSTAIN
{
    DWORD dwSize; 
} NET_OUT_CTRL_CHANGE_SUSTAIN;
typedef enum tagEM_DEVVIDEOINPUT_LIGHT_TYPE
{
    EM_DEVVIDEOINPUT_LIGHTN_TYPE_UNKNOWN,    
    EM_DEVVIDEOINPUT_LIGHTN_TYPE_WHITELIGHT, 
} EM_DEVVIDEOINPUT_LIGHT_TYPE;
typedef enum tagEM_DEVVIDEOINPUT_LIGHT_OPERATION_TYPE
{
    EM_DEVVIDEOINPUT_LIGHT_OPERATION_TYPE_UNKNOWN, 
    EM_DEVVIDEOINPUT_LIGHT_OPERATION_TYPE_ON,      
    EM_DEVVIDEOINPUT_LIGHT_OPERATION_TYPE_OFF,     
    EM_DEVVIDEOINPUT_LIGHT_OPERATION_TYPE_FLICK,   
} EM_DEVVIDEOINPUT_LIGHT_OPERATION_TYPE;
typedef struct tagNET_IN_CTRL_DEVVIDEOINPUT_LIGHT
{
    DWORD dwSize;                                        
    int nChannel;                                        
    EM_DEVVIDEOINPUT_LIGHT_TYPE emLightType;             
    EM_DEVVIDEOINPUT_LIGHT_OPERATION_TYPE emOperateType; 
} NET_IN_CTRL_DEVVIDEOINPUT_LIGHT;
typedef struct tagNET_OUT_CTRL_DEVVIDEOINPUT_LIGHT
{
    DWORD dwSize; 
} NET_OUT_CTRL_DEVVIDEOINPUT_LIGHT;
typedef struct tagNET_SNAP_TASK_REMOTE_STREAM
{
    char szIP[64];        
    UINT nPort;           
    char szUserName[64];  
    char szPassword[64];  
    char szProtocol[32];  
    char szUrl[256];      
    char szReserved[540]; 
} NET_SNAP_TASK_REMOTE_STREAM;
typedef struct tagNET_SNAP_TASK_SNAP_PARAM
{
    UINT nWidth;          
    UINT nHeight;         
    UINT nFormat;         
    char szReserved[244]; 
} NET_SNAP_TASK_SNAP_PARAM;
typedef struct tagNET_SNAP_TASK_INFO_LIST
{
    char szCameraID[64];                         
    NET_SNAP_TASK_REMOTE_STREAM stuRemoteStream; 
    NET_SNAP_TASK_SNAP_PARAM stuSnapParam;       
} NET_SNAP_TASK_INFO_LIST;
typedef struct tagNET_IN_CTRL_SNAP_TASK_ADD
{
    DWORD dwSize;                          
    int nTaskNum;                          
    NET_SNAP_TASK_INFO_LIST* pstuInfoList; 
} NET_IN_CTRL_SNAP_TASK_ADD;
typedef struct tagNET_OUT_CTRL_SNAP_TASK_ADD
{
    DWORD dwSize; 
    UINT nTaskId; 
} NET_OUT_CTRL_SNAP_TASK_ADD;
#define NET_MAX_ECK_PANEL_NUM 12 
typedef enum tagEM_NET_ECK_PANEL_TYPE
{
    EM_NET_ECK_PANEL_TYPE_INTCHAR, 
    EM_NET_ECK_PANEL_TYPE_IMAGE,   
    EM_NET_ECK_PANEL_TYPE_ARROWS,  
} EM_NET_ECK_PANEL_TYPE;
typedef enum tagEM_NET_ECK_PANEL_ISBOLD
{
    EM_NET_ECK_PANEL_ISBOLD_FALSE, 
    EM_NET_ECK_PANEL_ISBOLD_TRUE,  
} EM_NET_ECK_PANEL_ISBOLD;
typedef enum tagEM_NET_ECK_PANEL_COLOR
{
    EM_NET_ECK_PANEL_COLOR_UNKNOWN, 
    EM_NET_ECK_PANEL_COLOR_RED,     
    EM_NET_ECK_PANEL_COLOR_GREEN,   
    EM_NET_ECK_PANEL_COLOR_YELLOW,  
} EM_NET_ECK_PANEL_COLOR;
typedef enum tagEM_NET_ECK_PANEL_DIRECTION
{
    EM_NET_ECK_PANEL_DIRECTION_UNKNOWN, 
    EM_NET_ECK_PANEL_DIRECTION_LEFT,    
    EM_NET_ECK_PANEL_DIRECTION_UP,      
    EM_NET_ECK_PANEL_DIRECTION_RIGHT,   
} EM_NET_ECK_PANEL_DIRECTION;
typedef enum tagEM_NET_ECK_PANEL_ICON
{
    EM_NET_ECK_PANEL_ICON_UNKNOWN,     
    EM_NET_ECK_PANEL_ICON_CLOSE,       
    EM_NET_ECK_PANEL_ICON_CLOSECUSTOM, 
} EM_NET_ECK_PANEL_ICON;
typedef struct tagNET_ECK_PANEL_CONTENT
{
    EM_NET_ECK_PANEL_TYPE emType;           
    EM_NET_ECK_PANEL_ISBOLD emBold;         
    EM_NET_ECK_PANEL_COLOR emColor;         
    EM_NET_ECK_PANEL_DIRECTION emDirection; 
    EM_NET_ECK_PANEL_ICON emIcon;           
    WORD nText;                             
    BYTE byReserved[1022];                  
} NET_ECK_PANEL_CONTENT;
typedef struct tagNET_CTRL_ECK_GUIDINGPANEL_CONTENT
{
    DWORD dwSize;                                                
    int nPanelNum;                                               
    NET_ECK_PANEL_CONTENT stuContentInfo[NET_MAX_ECK_PANEL_NUM]; 
} NET_CTRL_ECK_GUIDINGPANEL_CONTENT;
typedef enum tagNET_ECK_IC_CARD_USER_TYPE
{
    NET_ECK_IC_CARD_USER_UNKNOWN,
    NET_ECK_IC_CARD_USER_ALL,        
    NET_ECK_IC_CARD_USER_TEMP,       
    NET_ECK_IC_CARD_USER_LONG,       
    NET_ECK_IC_CARD_USER_ADMIN,      
    NET_ECK_IC_CARD_USER_BLACK_LIST, 
} NET_ECK_IC_CARD_USER_TYPE;
typedef enum tagNET_ECK_CAR_PASS_FLAG
{
    NET_ECK_CAR_PASS_FLAG_NORMAL = 0,   
    NET_ECK_CAR_PASS_FLAG_ABNORMAL = 1, 
    NET_ECK_CAR_PASS_FLAG_ALL,          
} NET_ECK_CAR_PASS_FLAG;
typedef struct tagNET_ECK_IC_CARD
{
    DWORD dwSize;
    DWORD dwCard;                         
    NET_ECK_IC_CARD_USER_TYPE emUserType; 
} NET_ECK_IC_CARD;
#define NET_MAX_ECK_IC_CARD_IMPORT_NUM 50 
typedef struct tagNET_CTRL_ECK_IC_CARD_IMPORT_PARAM
{
    DWORD dwSize;
    int nCardNum;                                                
    NET_ECK_IC_CARD stuCardInfo[NET_MAX_ECK_IC_CARD_IMPORT_NUM]; 
} NET_CTRL_ECK_IC_CARD_IMPORT_PARAM;
typedef struct tagNET_CTRL_ECK_SYNC_IC_CARD_PARAM
{
    DWORD dwSize;
    int nCount; 
} NET_CTRL_ECK_SYNC_IC_CARD_PARAM;
#define ECK_SCREEN_NUM_MAX (8) 
typedef struct tagNET_CTRL_ECK_SET_PARK_INFO_PARAM
{
    DWORD dwSize;
    int nScreenNum;                       
    int nScreenIndex[ECK_SCREEN_NUM_MAX]; 
    int nFreeParkNum[ECK_SCREEN_NUM_MAX]; 
} NET_CTRL_ECK_SET_PARK_INFO_PARAM;
typedef struct tagNET_CTRL_CAPTURE_FINGER_PRINT
{
    DWORD dwSize;
    int nChannelID;                       
    char szReaderID[DH_COMMON_STRING_32]; 
    char szUserID[12];                    
} NET_CTRL_CAPTURE_FINGER_PRINT;
typedef enum tagEM_ACCESS_PASSWORD_TYPE
{
    EM_ACCESS_PASSWORD_OPENDOOR = 1, 
    EM_ACCESS_PASSWORD_ALARM,        
} EM_ACCESS_PASSWORD_TYPE;
typedef struct tagNET_CTRL_ACCESS_RESET_PASSWORD
{
    DWORD dwSize;                             
    int nChannelID;                           
    EM_ACCESS_PASSWORD_TYPE emType;           
    char szUserID[MAX_COMMON_STRING_32];      
    char szNewPassword[MAX_COMMON_STRING_32]; 
} NET_CTRL_ACCESS_RESET_PASSWORD;
typedef enum tagEM_CALLLIFT_CMD
{
    EM_CALLLIFT_CMD_UNKNOWN = -1,  
    EM_CALLLIFT_CMD_ANY_FLOOR = 0, 
    EM_CALLLIFT_CMD_DEST_FLOOR,    
    EM_CALLLIFT_CMD_CARD_UP,       
    EM_CALLLIFT_CMD_AUTO_FLOOR,    
    EM_CALLLIFT_CMD_CARD_DOWN,     
} EM_CALLLIFT_CMD;
typedef enum tagEM_CALLLIFT_ACTION
{
    EM_CALLLIFT_ACTION_UNKNOWN = -1,         
    EM_CALLLIFT_ACTION_USER_UNLOCK_CALL = 0, 
    EM_CALLLIFT_ACTION_USER_DIRECT_CALL,     
    EM_CALLLIFT_ACTION_USER_REDIRECT_CALL,   
    EM_CALLLIFT_ACTION_DIRECT_UNLOCK_CALL,   
} EM_CALLLIFT_ACTION;
typedef struct tagNET_CTRL_ACCESS_CALL_LIFT
{
    DWORD dwSize;
    int nChannelID;                         
    char szSrcFloor[MAX_COMMON_STRING_16];  
    char szDestFloor[MAX_COMMON_STRING_16]; 
    EM_CALLLIFT_CMD emCallLiftCmd;          
    EM_CALLLIFT_ACTION emCallLiftAction;    
    char szUserID[16];                      
    int nCallLiftCount;                     
    int nCallLiftNo[16];                    
    EM_LIFT_CALLER_TYPE emLiftCaller;       
} NET_CTRL_ACCESS_CALL_LIFT;
typedef struct tagNET_CTRL_ADJUST_BRIGHT
{
    DWORD dwSize; 
    int nLevel;   
} NET_CTRL_ADJUST_BRIGHT;
typedef struct tagNET_CTRL_CLEARLOG_EX
{
    DWORD dwSize; 
} NET_CTRL_CLEARLOG_EX;
typedef struct tagNET_CTRL_VTP_DISCONNECT
{
    DWORD dwSize;
    const char* szTargetID;              
    EM_NET_VTP_CALL_TYPE emCallType;     
    char szCallID[DH_COMMON_STRING_128]; 
} NET_CTRL_VTP_DISCONNECT;
typedef enum tagNET_EM_VTP_ACK
{
    NET_EM_VTP_OK,   
    NET_EM_VTP_BUSY, 
} NET_EM_VTP_ACK;
typedef struct tagNET_CTRL_VTP_DIVERTACK
{
    DWORD dwSize;
    EM_NET_VTP_CALL_TYPE emCallType; 
    const char* szCallID;            
    NET_EM_VTP_ACK emAck;            
} NET_CTRL_VTP_DIVERTACK;
typedef enum tagNET_EM_SPEAK_FILE_ACTION
{
    NET_EM_SPEAK_FILE_ACTION_UPDATE = 0, 
    NET_EM_SPEAK_FILE_ACTION_ADD,        
    NET_EM_SPEAK_FILE_ACTION_DEL,        
} NET_EM_SPEAK_FILE_ACTION;
typedef struct tagNET_SPEAK_FILE_INFO
{
    DWORD dwSize;
    char szFilePath[MAX_PATH];         
    NET_EM_SPEAK_FILE_ACTION emAction; 
    BOOL bSave;                        
} NET_SPEAK_FILE_INFO;
#define MAX_SPEAK_FILE_NUM 32 
typedef struct tagNET_CTRL_UPDATE_FILES
{
    DWORD dwSize;
    DWORD dwFileNum;                                     
    NET_SPEAK_FILE_INFO stuFileInfo[MAX_SPEAK_FILE_NUM]; 
} NET_CTRL_UPDATE_FILES;
typedef enum tagEM_SPEAK_AUDIO_TYPE
{
    EM_SPEAK_AUDIO_TYPE_UNKNOWN = 0, 
    EM_SPEAK_AUDIO_TYPE_PCM,         
    EM_SPEAK_AUDIO_TYPE_ADPCM,       
    EM_SPEAK_AUDIO_TYPE_G711A,       
    EM_SPEAK_AUDIO_TYPE_G711Mu,      
    EM_SPEAK_AUDIO_TYPE_G726,        
    EM_SPEAK_AUDIO_TYPE_G729,        
    EM_SPEAK_AUDIO_TYPE_MPEG2,       
    EM_SPEAK_AUDIO_TYPE_AMR,         
    EM_SPEAK_AUDIO_TYPE_AAC,         
} EM_SPEAK_AUDIO_TYPE;
typedef struct tagNET_SPEAK_AUDIO_FORMAT
{
    EM_SPEAK_AUDIO_TYPE emFormat; 
    BYTE byReserved[1020];        
} NET_SPEAK_AUDIO_FORMAT;
typedef struct tagNET_SPEAK_AUDIO_PLAY_PATH
{
    char szPath[256];       
    BOOL bSupportUpload;    
    int nMaxFileUploadNum;  
    int nMaxUploadFileSize; 
    BYTE byReserved[756];   
} NET_SPEAK_AUDIO_PLAY_PATH;
typedef struct tagNET_SPEAK_CAPS
{
    NET_SPEAK_AUDIO_FORMAT stuAudioFormats[32];     
    int nAudioFormatNum;                            
    int nAudioPlayPathNum;                          
    NET_SPEAK_AUDIO_PLAY_PATH stuAudioPlayPaths[8]; 
    BYTE byReserved[1024];                          
} NET_SPEAK_CAPS;
typedef struct tagNET_IN_REMOTE_SPEAK_CAPS
{
    DWORD dwSize;       
    int nChannelNum;    
    int nChannels[128]; 
} NET_IN_REMOTE_SPEAK_CAPS;
typedef struct tagNET_OUT_REMOTE_SPEAK_CAPS
{
    DWORD dwSize;             
    int nRetCapNum;           
    NET_SPEAK_CAPS* pstuCaps; 
    void* pReserved;          
    int nMaxCapNum;           
} NET_OUT_REMOTE_SPEAK_CAPS;
typedef enum tagEM_WIFI_CAPS_TYPE
{
    EM_CAPS_TYPE_UNKNOWN, 
    EM_CAPS_TYPE_CLIENT,  
    EM_CAPS_TYPE_AP,      
    EM_CAPS_TYPE_WPS,     
} EM_WIFI_CAPS_TYPE;
typedef struct tagNET_IN_WLAN_CAPS_INFO
{
    DWORD dwSize; 
} NET_IN_WLAN_CAPS_INFO;
typedef struct tagNET_OUT_WLAN_CAPS_INFO
{
    DWORD dwSize;                    
    BOOL bIgnoreNetCardToConn;       
    EM_WIFI_CAPS_TYPE emWifiCaps[8]; 
    int nRetWifiCapsNum;             
} NET_OUT_WLAN_CAPS_INFO;
typedef struct tagNET_IN_LOG_ONLINE_BACKUP_CAPS_INFO
{
    DWORD dwSize; 
} NET_IN_LOG_ONLINE_BACKUP_CAPS_INFO;
typedef struct tagNET_OUT_LOG_ONLINE_BACKUP_CAPS_INFO
{
    DWORD dwSize;                 
    BOOL bSupportLogOnlineBackUp; 
} NET_OUT_LOG_ONLINE_BACKUP_CAPS_INFO;
typedef struct tagNET_IN_RECEIPT_EVENT_CAPS_INFO
{
    DWORD dwSize; 
} NET_IN_RECEIPT_EVENT_CAPS_INFO;
typedef struct tagNET_OUT_RECEIPT_EVENT_CAPS_INFO
{
    DWORD dwSize;           
    BOOL bSupportReceiptEx; 
} NET_OUT_RECEIPT_EVENT_CAPS_INFO;
typedef enum tagEM_WLAN_ENCRYPTION_TYPE
{
    EM_ENCRYPTION_TYPE_UNKNOWN, 
    EM_ENCRYPTION_TYPE_AUTO,    
} EM_WLAN_ENCRYPTION_TYPE;
typedef struct tagNET_IN_WLAN_CONFIG_INFO
{
    DWORD dwSize;                         
    char szBSSID[18];                     
    BYTE byReserved[2];                   
    char szSSID[32];                      
    int nChannel;                         
    int nKeyID;                           
    EM_WLAN_ENCRYPTION_TYPE emEncryption; 
    char szKeys[4][128];                  
} NET_IN_WLAN_CONFIG_INFO;
typedef struct tagNET_OUT_WLAN_CONFIG_INFO
{
    DWORD dwSize; 
} NET_OUT_WLAN_CONFIG_INFO;
typedef struct tagNET_CTRL_RAINBRUSH_MOVEONCE
{
    DWORD dwSize;
    int nChannel; 
} NET_CTRL_RAINBRUSH_MOVEONCE;
typedef struct tagNET_CTRL_RAINBRUSH_MOVECONTINUOUSLY
{
    DWORD dwSize;
    int nChannel;           
    unsigned int nInterval; 
} NET_CTRL_RAINBRUSH_MOVECONTINUOUSLY;
typedef struct tagNET_CTRL_RAINBRUSH_STOPMOVE
{
    DWORD dwSize;
    int nChannel; 
} NET_CTRL_RAINBRUSH_STOPMOVE;
typedef struct tagNET_CTRL_ALARM_ACK
{
    DWORD dwSize;
    int nEventID; 
} NET_CTRL_ALARM_ACK;
typedef enum tagNET_EM_VTP_INVITEACK_TYPE
{
    NET_EM_VTP_INVITEACK_TYPE_UNKNOWN = 0, 
    NET_EM_VTP_INVITEACK_TYPE_BUSY         
} NET_EM_VTP_INVITEACK_TYPE;
typedef struct tagNET_CTRL_VTP_INVITEACK
{
    DWORD dwSize;
    int nChnId;                      
    NET_EM_VTP_INVITEACK_TYPE emAck; 
} NET_CTRL_VTP_INVITEACK;
typedef enum tagEM_VIDEOTALK_ACTION
{
    EM_VIDEOTALK_ACTION_INVITE, 
    EM_VIDEOTALK_ACTION_HANGUP, 
    EM_VIDEOTALK_ACTION_ANSWER, 
    EM_VIDEOTALK_ACTION_REFUSE, 
} EM_VIDEOTALK_ACTION;
typedef struct tagNET_IN_REMOTE_TALK_CONTROL
{
    DWORD dwSize;
    int nChnId;                   
    EM_VIDEOTALK_ACTION emAction; 
    char byReserved[4];           
    char szCallID[32];            
} NET_IN_REMOTE_TALK_CONTROL;
typedef struct tagNET_OUT_REMOTE_TALK_CONTROL
{
    DWORD dwSize;
} NET_OUT_REMOTE_TALK_CONTROL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlRemoteTalk(LLONG lLoginID, const NET_IN_REMOTE_TALK_CONTROL* pstInParam, NET_OUT_REMOTE_TALK_CONTROL* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_VIDEO_TALK_PEER_DEVICE_STATE
{
    DWORD dwSize;
    int nChnId;        
    char szCallID[32]; 
} NET_IN_GET_VIDEO_TALK_PEER_DEVICE_STATE;
typedef enum tagEM_VIDEOTALK_STATE
{
    EM_VIDEOTALK_STATE_UNKNOWN, 
    EM_VIDEOTALK_STATE_ONLINE,  
    EM_VIDEOTALK_STATE_OFFLINE, 
} EM_VIDEOTALK_STATE;
typedef struct tagNET_VIDEO_TALK_PEER_DEVICE_STATE
{
    EM_VIDEOTALK_STATE emState; 
    char szID[32];              
    char szIpAddr[32];          
    UINT nPort;                 
    char szReserved[128];       
} NET_VIDEO_TALK_PEER_DEVICE_STATE;
typedef struct tagNET_OUT_GET_VIDEO_TALK_PEER_DEVICE_STATE
{
    DWORD dwSize;
    int nDeviceStateNodeNum;                                  
    NET_VIDEO_TALK_PEER_DEVICE_STATE stuDeviceStateNode[200]; 
} NET_OUT_GET_VIDEO_TALK_PEER_DEVICE_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoTalkPeerDeviceState(LLONG lLoginID, const NET_IN_GET_VIDEO_TALK_PEER_DEVICE_STATE* pstInParam, NET_OUT_GET_VIDEO_TALK_PEER_DEVICE_STATE* pstOutParam, int nWaitTime);
typedef enum tagEM_MONITOR_TYPE
{
    EM_MONITOR_TYPE_UNKNOWN = -1, 
    EM_MONITOR_TYPE_VTO,          
    EM_MONITOR_TYPE_IPC,          
} EM_MONITOR_TYPE;
typedef struct tagNET_IN_START_VTH_MONITOR
{
    DWORD dwSize;
    UINT nIndex;            
    EM_MONITOR_TYPE emType; 
    char byReserved[4];     
} NET_IN_START_VTH_MONITOR;
typedef struct tagNET_OUT_START_VTH_MONITOR
{
    DWORD dwSize;
} NET_OUT_START_VTH_MONITOR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartVTHMonitor(LLONG lLoginID, const NET_IN_START_VTH_MONITOR* pstInParam, NET_OUT_START_VTH_MONITOR* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_STOP_VTH_MONITOR
{
    DWORD dwSize;
    UINT nIndex;            
    EM_MONITOR_TYPE emType; 
    char byReserved[4];     
} NET_IN_STOP_VTH_MONITOR;
typedef struct tagNET_OUT_STOP_VTH_MONITOR
{
    DWORD dwSize;
} NET_OUT_STOP_VTH_MONITOR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopVTHMonitor(LLONG lLoginID, const NET_IN_STOP_VTH_MONITOR* pstInParam, NET_OUT_STOP_VTH_MONITOR* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_START_REMOTE_SPEAK_PLAY
{
    DWORD dwSize;     
    UINT nChannel;    
    char szPath[256]; 
} NET_IN_START_REMOTE_SPEAK_PLAY;
typedef enum tagEM_REMOTE_SPEAK_PLAY_STATE
{
    EM_REMOTE_SPEAK_PLAY_STATE_UNKNOWN,       
    EM_REMOTE_SPEAK_PLAY_STATE_OK,            
    EM_REMOTE_SPEAK_PLAY_STATE_BUSY,          
    EM_REMOTE_SPEAK_PLAY_STATE_ERROR,         
    EM_REMOTE_SPEAK_PLAY_STATE_FTP_NOT_VALID, 
} EM_REMOTE_SPEAK_PLAY_STATE;
typedef struct tagNET_OUT_START_REMOTE_SPEAK_PLAY
{
    DWORD dwSize;                        
    EM_REMOTE_SPEAK_PLAY_STATE emStatus; 
} NET_OUT_START_REMOTE_SPEAK_PLAY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartRemoteSpeakPlay(LLONG lLoginID, const NET_IN_START_REMOTE_SPEAK_PLAY* pstuInParam, NET_OUT_START_REMOTE_SPEAK_PLAY* pstuOutParam, int nWaitTime);
typedef struct __NET_PARTITION_STATE
{
    DWORD dwSize;
    int nStatus;         
    double dbTotalSize;  
    double dbRemainSize; 
} NET_PARTITION_STATE;
typedef struct __NET_HDD_STATE
{
    DWORD dwSize;
    int nState;                                                      
    double dbTotalSize;                                              
    NET_PARTITION_STATE stuPartitions[DH_MAX_STORAGE_PARTITION_NUM]; 
    int nPartitionNum;                                               
} NET_HDD_STATE;
typedef struct __NET_CHANNLE_STATE
{
    DWORD dwSize;
    BYTE byRecState;     
    BYTE byVideoInState; 
    BYTE byReserved[2];  
} NET_CHANNLE_STATE;
typedef enum tagNET_PAD_CONNECT_STATE
{
    NET_PAD_CONNECT_STATE_UNKNOWN,     
    NET_PAD_CONNECT_STATE_UNCONNECTED, 
    NET_PAD_CONNECT_STATE_CONNECTED,   
} NET_PAD_CONNECT_STATE;
typedef enum tagNET_HOME_STATE
{
    NET_HOME_STATE_UNKNOWN,   
    NET_HOME_STATE_UNPRESSED, 
    NET_HOME_STATE_PRESSED,   
} NET_HOME_STATE;
typedef enum tagEM_EMERGENCYSTATUS_TYPE
{
    EM_EMERGENCYSTATUS_UNKNOWN = -1, 
    EM_EMERGENCYSTATUS_CLOSE,        
    EM_EMERGENCYSTATUS_OPEN,         
} EM_EMERGENCYSTATUS_TYPE;
typedef enum tagEM_TAMPERALTERSTATUS_TYPE
{
    EM_TAMPERALTERSTATUS_UNKNOWN = -1, 
    EM_TAMPERALTERSTATUS_CLOSE,        
    EM_TAMPERALTERSTATUS_OPEN,         
} EM_TAMPERALTERSTATUS_TYPE;
typedef enum tagEM_GPS_SIGNAL_STRENGTH_TYPE
{
    EM_GPS_SIGNAL_STRENGTH_UNKNWON = -1, 
    EM_GPS_SIGNAL_STRENGTH_WEAK,         
    EM_GPS_SIGNAL_STRENGTH_MIDDLE,       
    EM_GPS_SIGNAL_STRENGTH_STRONG,       
} EM_GPS_SIGNAL_STRENGTH_TYPE;
typedef enum tagEM_SELFCHECK_DATA_TYPE
{
    EM_SELFCHECK_DATA_TYPE_UNKNOWN,  
    EM_SELFCHECK_DATA_TYPE_REALTIME, 
    EM_SELFCHECK_DATA_TYPE_HISTORY,  
} EM_SELFCHECK_DATA_TYPE;
typedef struct __NET_SELFCHECK_INFO
{
    DWORD dwSize;
    int nAlarmIn;                            
    int nAlarmOut;                           
    NET_TIME stuTime;                        
    char szPlateNo[DH_MAX_PLATE_NUMBER_LEN]; 
    char szICCID[DH_MAX_SIM_LEN];            
    BYTE byOrientation;                      
    BYTE byACCState;                         
    BYTE byConstantElecState;                
    BYTE byAntennaState;                     
    BYTE byReportStation; 
    BYTE byControlScreen; 
    BYTE byPOS;           
    BYTE byCoinBox;       
    BOOL bTimerSnap;         
    BOOL bElectronEnclosure; 
    BOOL bTeleUpgrade;       
    NET_HDD_STATE stuHddStates[DH_MAX_DISKNUM]; 
    int nHddNum;                                
    NET_CHANNLE_STATE* pChannleState;             
    int nChannleNum;                              
    int nChannelMax;                              
    NET_PAD_CONNECT_STATE emConnState;            
    NET_HOME_STATE emHomeState;                   
    char szICCIDExInfo[DH_COMMON_STRING_256];     
    BYTE by3GState;                               
    BYTE byWifiState;                             
    BYTE byGpsState;                              
    BYTE byBlackBoxState;                         
    int nCpuUsage;                                
    int nTemperature;                             
    char szVendor[32];                            
    char szFirmwareVersion[128];                  
    char szSecurityBaseLineVersion[8];            
    NET_GPS_STATUS_INFO stuGPSStatusInfo;         
    char szNetworkOperName[32];                   
    EM_EMERGENCYSTATUS_TYPE emEmergencyStatus;    
    EM_TAMPERALTERSTATUS_TYPE emTamperAletStatus; 
    char szImei[16];                              
    UINT nGSMsignalStrength;                      
    UINT nMcc;                                    
    UINT nMnc;                                    
    UINT nLAC;                                    
    UINT nCi;                                     
    int nAlarmInStatusNum;                        
    int nAlarmInStatus[32];                       
    int nAlarmOutStatusNum;                       
    int nAlarmOutStatus[32];                      
    char szMasterSvrAddr[128];                    
    char szSlaveSvrAddr[128];                     
    char szSerialNo[48];                          
    EM_GPS_SIGNAL_STRENGTH_TYPE emSignalStrength; 
    EM_SELFCHECK_DATA_TYPE emDataType;            
} NET_SELFCHECK_INFO;
typedef void(CALLBACK* fMissionInfoCallBack)(LLONG lAttachHandle, DWORD dwType, void* pMissionInfo, void* pReserved, LDWORD dwUserData);
typedef enum EM_MISSION_TYPE
{
    NET_MISSION_TYPE_UNKOWN,    
    NET_MISSION_TYPE_SELFCHECK, 
} EM_MISSION_TYPE;
typedef struct __NET_IN_ATTACH_MISSION_PARAM
{
    DWORD dwSize;
    EM_MISSION_TYPE emMissionType;          
    fMissionInfoCallBack cbMissionInfofunc; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_MISSION_PARAM;
typedef struct NET_OUT_ATTACH_MISSION_PARAM
{
    DWORD dwSize;
    LLONG lAttachHandle; 
} NET_OUT_ATTACH_MISSION_PARAM;
#define MAX_EVENT_TO_CONFIRM_NUM 8 
typedef struct tagNET_EVENT_INFO_TO_CONFIRM
{
    DWORD dwSize;
    DWORD dwEventType; 
    NET_TIME stuTime;  
    LONG lTime;        
} NET_EVENT_INFO_TO_CONFIRM;
typedef struct tagNET_IN_BUS_CONFIRM_EVENT
{
    DWORD dwSize;
    int nEvent;                                                       
    NET_EVENT_INFO_TO_CONFIRM stuEventInfo[MAX_EVENT_TO_CONFIRM_NUM]; 
} NET_IN_BUS_CONFIRM_EVENT;
typedef struct tagNET_OUT_BUS_CONFIRM_EVENT
{
    DWORD dwSize;
} NET_OUT_BUS_CONFIRM_EVENT;
typedef struct tagNET_IN_SET_DEVICE_POSITION
{
    DWORD dwSize;                          
    char szPosition[DH_COMMON_STRING_512]; 
} NET_IN_SET_DEVICE_POSITION;
typedef struct tagNET_OUT_SET_DEVICE_POSITION
{
    DWORD dwSize; 
} NET_OUT_SET_DEVICE_POSITION;
typedef struct tagNET_IN_GET_DEVICE_POSITION
{
    DWORD dwSize; 
} NET_IN_GET_DEVICE_POSITION;
typedef struct tagNET_OUT_GET_DEVICE_POSITION
{
    DWORD dwSize;                          
    char szPosition[DH_COMMON_STRING_512]; 
} NET_OUT_GET_DEVICE_POSITION;
typedef struct tagNET_IN_SNAP_BY_EVENT
{
    DWORD dwSize;       
    int nChannel;       
    DWORD dwEventID;    
    char szSerial[128]; 
} NET_IN_SNAP_BY_EVENT;
typedef struct tagNET_OUT_SNAP_BY_EVENT
{
    DWORD dwSize; 
} NET_OUT_SNAP_BY_EVENT;
typedef struct tagNET_IN_START_QUERYLOG
{
    DWORD dwSize;
    DH_LOG_QUERY_TYPE emLogType;        
    NET_TIME stuStartTime;              
    NET_TIME stuEndTime;                
    BOOL bLogTypeExFlag;                
    int nLogTypeExNum;                  
    char szLogTypeEx[64][128];          
    EM_RESULT_ORDER_TYPE emResultOrder; 
    BOOL bSendByUTCTime;                
    NET_TIME stuStartTimeRealUTC;       
    NET_TIME stuEndTimeRealUTC;         
} NET_IN_START_QUERYLOG;
typedef struct tagNET_OUT_START_QUERYLOG
{
    DWORD dwSize;
} NET_OUT_START_QUERYLOG;
typedef struct tagNET_LOG_MESSAGE
{
    DWORD dwSize;
    char szLogMessage[DH_COMMON_STRING_1024]; 
} NET_LOG_MESSAGE;
typedef struct tagNET_LOG_INFO
{
    DWORD dwSize;
    NET_TIME stuTime;                     
    char szUserName[DH_COMMON_STRING_32]; 
    char szLogType[DH_COMMON_STRING_128]; 
    NET_LOG_MESSAGE stuLogMsg;            
    NET_TIME stuTimeRealUTC;              
} NET_LOG_INFO;
typedef struct tagNET_IN_QUERYNEXTLOG
{
    DWORD dwSize;
    int nGetCount; 
} NET_IN_QUERYNEXTLOG;
typedef struct tagNET_OUT_QUERYNEXTLOG
{
    DWORD dwSize;
    int nMaxCount;             
    NET_LOG_INFO* pstuLogInfo; 
    int nRetCount;             
} NET_OUT_QUERYNEXTLOG;
typedef void(CALLBACK* fHaveLogin)(LLONG lLoginID, char* pchDVRIP, LONG nDVRPort, BOOL bOnline, NET_DEVICEINFO_Ex stuDeviceInfo, int nError, LDWORD dwUser, void* reserved);
typedef struct tagNET_IN_STARTLOGINEX
{
    DWORD dwSize;
    const char* szIp;   
    DWORD dwPort;       
    const char* szName; 
    const char* szPwd;  
    fHaveLogin cbLogin; 
    LDWORD dwUser;      
} NET_IN_STARTLOGINEX;
typedef struct tagNET_OUT_STARTLOGINEX
{
    DWORD dwSize;
} NET_OUT_STARTLOGINEX;
typedef enum tagEM_DEV_PROTOCOL_TYPE
{
    EM_DEV_PROTOCOL_UNKNOWN,   
    EM_DEV_PROTOCOL_V2,        
    EM_DEV_PROTOCOL_V3,        
    EM_DEV_PROTOCOL_ONVIF,     
    EM_DEV_PROTOCOL_GENERAL,   
    EM_DEV_PROTOCOL_GB28181,   
    EM_DEV_PROTOCOL_EHOME,     
    EM_DEV_PROTOCOL_HIKVISION, 
    EM_DEV_PROTOCOL_BSCP,      
    EM_DEV_PROTOCOL_PRIVATE,   
    EM_DEV_PROTOCOL_RTSP,      
    EM_DEV_PROTOCOL_HBGK,      
    EM_DEV_PROTOCOL_LUAN,      
} EM_DEV_PROTOCOL_TYPE;
typedef enum tagNET_VIDEOJOIN_OPERATE_TYPE
{
    NET_VIDEOJOIN_GET_STATUS,           
    NET_VIDEOJOIN_GET_CALIBRATE_POINTS, 
    NET_VIDEOJOIN_CALIBRATE,            
} NET_VIDEOJOIN_OPERATE_TYPE;
typedef enum tagNET_VIDEOJOIN_STATUS
{
    NET_VIDEOJOIN_STATUS_UNKNOWN,  
    NET_VIDEOJOIN_STATUS_NOTSTART, 
    NET_VIDEOJOIN_STATUS_DOING,    
    NET_VIDEOJOIN_STATUS_FINISH,   
} NET_VIDEOJOIN_STATUS;
typedef enum tagNET_VIDEOJOIN_MODE
{
    NET_VIDEOJOIN_MODE_UNKNOWN, 
    NET_VIDEOJOIN_MODE_AUTO,    
    NET_VIDEOJOIN_MODE_MANUAL,  
} NET_VIDEOJOIN_MODE;
typedef struct tagNET_IN_VIDEOJOIN_GET_STATUS
{
    DWORD dwSize;
} NET_IN_VIDEOJOIN_GET_STATUS;
typedef struct tagNET_OUT_VIDEOJOIN_GET_STATUS
{
    DWORD dwSize;
    NET_VIDEOJOIN_STATUS emStatus; 
} NET_OUT_VIDEOJOIN_GET_STATUS;
typedef struct tagNET_POINT_PAIR
{
    DH_POINT stuPoints[POINT_NUM_IN_PAIR]; 
} NET_POINT_PAIR;
typedef struct tagNET_VIDEOJOIN_POINT_GROUP
{
    DWORD dwSize;
    int nPointPairNum;                                
    NET_POINT_PAIR stuPointPairs[MAX_POINT_PAIR_NUM]; 
    int nChannels[CHANNEL_NUM_IN_POINT_GROUP];        
} NET_VIDEOJOIN_POINT_GROUP;
typedef struct tagNET_IN_VIDEOJOIN_GET_CALIBRATE_POINTS
{
    DWORD dwSize;
} NET_IN_VIDEOJOIN_GET_CALIBRATE_POINTS;
typedef struct tagNET_OUT_VIDEOJOIN_GET_CALIBRATE_POINTS
{
    DWORD dwSize;
    NET_VIDEOJOIN_MODE emMode;                                     
    int nPointGroupNum;                                            
    NET_VIDEOJOIN_POINT_GROUP stuPointGroups[MAX_POINT_GROUP_NUM]; 
} NET_OUT_VIDEOJOIN_GET_CALIBRATE_POINTS;
typedef struct tagNET_IN_VIDEOJOIN_CALIBRATE
{
    DWORD dwSize;
    NET_VIDEOJOIN_MODE emMode;                                     
    int nPointGroupNum;                                            
    NET_VIDEOJOIN_POINT_GROUP stuPointGroups[MAX_POINT_GROUP_NUM]; 
} NET_IN_VIDEOJOIN_CALIBRATE;
typedef struct tagNET_OUT_VIDEOJOIN_CALIBRATE
{
    DWORD dwSize;
} NET_OUT_VIDEOJOIN_CALIBRATE;
typedef struct tagNET_IN_SPLIT_GET_SCENE
{
    DWORD dwSize;
    int nChannel;               
    const char* pszCompositeID; 
} NET_IN_SPLIT_GET_SCENE;
typedef struct tagNET_OUT_SPLIT_GET_SCENE
{
    DWORD dwSize;
    DH_SPLIT_SCENE stuScene; 
} NET_OUT_SPLIT_GET_SCENE;
typedef enum tagEM_NET_WM_TOUR_STATUS
{
    EM_NET_WM_TOUR_STATUS_UNKNOWN, 
    EM_NET_WM_TOUR_STATUS_START,   
    EM_NET_WM_TOUR_STATUS_STOP,    
} EM_NET_WM_TOUR_STATUS;
typedef struct tagNET_WM_TOUR_STATUS_INFO
{
    DWORD dwSize;
    EM_NET_WM_TOUR_STATUS emStatus; 
    DH_MONITORWALL_SCENE stuScene;  
} NET_WM_TOUR_STATUS_INFO;
typedef void(CALLBACK* fMonitorWallTourStatusCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_WM_TOUR_STATUS_INFO* pstStatus, void* reserved, LDWORD dwUser);
typedef struct tagNET_IN_WM_ATTACH_TOUR
{
    DWORD dwSize;
    int nMonitorWallID;                      
    fMonitorWallTourStatusCallBack cbStatus; 
    LDWORD dwUser;                           
} NET_IN_WM_ATTACH_TOUR;
typedef struct tagNET_OUT_WM_ATTACH_TOUR
{
    DWORD dwSize;
} NET_OUT_WM_ATTACH_TOUR;
typedef struct tagNET_IN_SNAP_MANAGER_CONFIRM_UPLOAD
{
    DWORD dwSize;
    char szFilePath[DH_COMMON_STRING_256]; 
    BOOL bResult;                          
} NET_IN_SNAP_MANAGER_CONFIRM_UPLOAD;
typedef struct tagNET_OUT_SNAP_MANAGER_CONFIRM_UPLOAD
{
    DWORD dwSize;
} NET_OUT_SNAP_MANAGER_CONFIRM_UPLOAD;
typedef struct tagNET_IN_SNAP_MANAGER_GET_CAPS
{
    DWORD dwSize;
} NET_IN_SNAP_MANAGER_GET_CAPS;
typedef struct tagNET_MANUAL_SNAPSHOT
{
    BOOL bDeviceSnapshot; 
    char szReserved[128]; 
} NET_MANUAL_SNAPSHOT;
typedef struct tagNET_TRANSFER_OFFLINE
{
    BOOL bEnable;         
    UINT nMaxOfflines;    
    char szReserved[128]; 
} NET_TRANSFER_OFFLINE;
typedef enum tagEM_ALGORITHM_LIST
{
    EM_ALGORITHM_LIST_UNKNOWN,    
    EM_ALGORITHM_LIST_AES256_OFB, 
    EM_ALGORITHM_LIST_SM1_OFB,    
    EM_ALGORITHM_LIST_SM4_OFB,    
} EM_ALGORITHM_LIST;
typedef struct tagNET_SUPPORT_ENCRYPT_NOTIFY
{
    BOOL bEnable;                         
    int nAlgorithmListNum;                
    EM_ALGORITHM_LIST emAlgorithmList[8]; 
    char szReserved[128];                 
} NET_SUPPORT_ENCRYPT_NOTIFY;
typedef struct tagNET_SNAP_MANAGER_CAPS_INFO
{
    BOOL bSupportSnapSchedule;                          
    BOOL bSupportFtpPathMode;                           
    BOOL bSupportFtpUpNoplate;                          
    BOOL bSupportPicLocalURL;                           
    NET_MANUAL_SNAPSHOT stuManualSnapshot;              
    NET_TRANSFER_OFFLINE stuTransferOffline;            
    NET_SUPPORT_ENCRYPT_NOTIFY stuSupportEncryptNotify; 
    char szReserved[128];                               
} NET_SNAP_MANAGER_CAPS_INFO;
typedef struct tagNET_OUT_SNAP_MANAGER_GET_CAPS
{
    DWORD dwSize;
    NET_SNAP_MANAGER_CAPS_INFO stuCaps; 
} NET_OUT_SNAP_MANAGER_GET_CAPS;
typedef struct tagNET_IN_SNAP_MANAGER_STORAGE_PICTURE
{
    DWORD dwSize;
    int nChannel;          
    BOOL bStorageWholePic; 
} NET_IN_SNAP_MANAGER_STORAGE_PICTURE;
typedef struct tagNET_OUT_SNAP_MANAGER_STORAGE_PICTURE
{
    DWORD dwSize;
} NET_OUT_SNAP_MANAGER_STORAGE_PICTURE;
typedef struct tagNET_VTP_CALL_STATE_INFO
{
    DWORD dwSize;
    char szNumber[DH_COMMON_STRING_128];    
    char szCallID[DH_COMMON_STRING_128];    
    EM_NET_VTP_CALL_STATE_TYPE emCallState; 
} NET_VTP_CALL_STATE_INFO;
typedef void(CALLBACK* fVTPCallStateCallBack)(LLONG lAttachHandle, NET_VTP_CALL_STATE_INFO* pInfo, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_VTP_CALL_STATE_ATTACH
{
    DWORD dwSize;
    EM_NET_VTP_CALL_TYPE emCallType;   
    fVTPCallStateCallBack cbCallState; 
    LDWORD dwUser;                     
    const char* szTargetID;            
} NET_IN_VTP_CALL_STATE_ATTACH;
typedef struct tagNET_OUT_VTP_CALL_STATE_ATTACH
{
    DWORD dwSize;
} NET_OUT_VTP_CALL_STATE_ATTACH;
typedef struct tagNET_IN_CHECK_BUS_LINE
{
    DWORD dwSize;
    char szLineID[DH_COMMON_STRING_32];        
    char szDesignation[DH_COMMON_STRING_32];   
    NET_LINE_DIRECTION emDirection;            
    int nSiteCount;                            
    char szDirectionName[DH_COMMON_STRING_32]; 
    char szVersion[DH_COMMON_STRING_32];       
} NET_IN_CHECK_BUS_LINE;
typedef enum tagNET_BUS_LINE_UPDATE_TYPE
{
    NET_BUS_LINE_UPDATE_UNKNOWN = 0,
    NET_BUS_LINE_UPDATE_UPDATED,     
    NET_BUS_LINE_UPDATE_NOT_UPDATED, 
} NET_BUS_LINE_UPDATE_TYPE;
typedef struct tagNET_OUT_CHECK_BUS_LINE
{
    DWORD dwSize;
    char szDeviceID[DH_COMMON_STRING_32]; 
    char szLineID[DH_COMMON_STRING_32];   
    NET_BUS_LINE_UPDATE_TYPE emUpdate;    
} NET_OUT_CHECK_BUS_LINE;
#define MAX_SITE_GPS_POINT_NUM 64 
typedef enum tagNET_SITE_AREA_TYPE
{
    NET_SITE_AREA_ENCLOSURE = 0, 
    NET_SITE_AREA_CIRCLE,        
} NET_SITE_AREA_TYPE;
typedef struct tagNET_FLEXION_INFO
{
    int nLimitDistance;                         
    int nPointArrayNum;                         
    GPS_POINT stuPoint[MAX_SITE_GPS_POINT_NUM]; 
    GPS_POINT* pStuPoint;                       
    int nPointNum;                              
    int nLimitDuration;                         
    BYTE byReserved[1008];                      
} NET_FLEXION_INFO;
typedef struct tagNET_BUS_SITE_INFO
{
    DWORD dwSize;
    char szLineID[DH_COMMON_STRING_32];                            
    int nSiteCount;                                                
    NET_LINE_DIRECTION emDirection;                                
    int nStopSequence;                                             
    char szSiteID[DH_COMMON_STRING_32];                            
    char szSiteName[DH_COMMON_STRING_32];                          
    NET_SITE_AREA_TYPE emAreaType;                                 
    int nGPSPointNum;                                              
    GPS_POINT stuPoint[MAX_SITE_GPS_POINT_NUM];                    
    int nRadius;                                                   
    int nSpeedLimit;                                               
    int nDriveTime;                                                
    int nTicketPrice;                                              
    DH_TSECT stuPowerSchedule[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
    char szDesignation[DH_COMMON_STRING_64];                       
    char szDirectionName[DH_COMMON_STRING_64];                     
    char szVersion[DH_COMMON_STRING_32];
    BOOL bUseExName;                                                    
    char szSiteNameEx[DH_COMMON_STRING_128];                            
    NET_FLEXION_INFO stuInflexionInfos;                                 
    DH_TSECT stuPowerScheduleEx[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM_EX]; 
} NET_BUS_SITE_INFO;
#define MAX_BUS_STOP_NUM 32 
typedef struct tagNET_IN_DISPATCH_BUS_LINE_INFO
{
    DWORD dwSize;
    int nBusStopNum;                                 
    NET_BUS_SITE_INFO stuStopInfo[MAX_BUS_STOP_NUM]; 
} NET_IN_DISPATCH_BUS_LINE_INFO;
typedef struct tagNET_OUT_DISPATCH_BUS_LINE_INFO
{
    DWORD dwSize;
} NET_OUT_DISPATCH_BUS_LINE_INFO;
typedef struct tagNET_IN_DISPATCH_BUS_LINE_INFO_EX
{
    DWORD dwSize;
    int nBusStopNum;                 
    NET_BUS_SITE_INFO* pstuStopInfo; 
} NET_IN_DISPATCH_BUS_LINE_INFO_EX;
typedef struct tagNET_OUT_DISPATCH_BUS_LINE_INFO_EX
{
    DWORD dwSize;
} NET_OUT_DISPATCH_BUS_LINE_INFO_EX;
typedef struct tagNET_BUS_HTTPS_ADDRESS_INFO
{
    char szIPAddress[64];
    int nPort;
    BYTE byReserved[956];
} NET_BUS_HTTPS_ADDRESS_INFO;
typedef struct tagNET_IN_DISPATCH_BUS_HTTPS_SERVERS_INFO
{
    DWORD dwSize;
    int nAddressNum;                          
    NET_BUS_HTTPS_ADDRESS_INFO stuAddress[4]; 
    char szToken[128];                        
} NET_IN_DISPATCH_BUS_HTTPS_SERVERS_INFO;
typedef struct tagNET_OUT_DISPATCH_BUS_HTTPS_SERVERS_INFO
{
    DWORD dwSize;
} NET_OUT_DISPATCH_BUS_HTTPS_SERVERS_INFO;
typedef struct tagNET_IN_BUS_SCHEDULE_INFO
{
    DWORD dwSize;
    char szLineID[DH_COMMON_STRING_64]; 
    NET_LINE_DIRECTION emDirection;     
    NET_TIME_EX stuStartTime;           
} NET_IN_BUS_SCHEDULE_INFO;
typedef struct tagNET_OUT_BUS_SCHEDULE_INFO
{
    DWORD dwSize;
} NET_OUT_BUS_SCHEDULE_INFO;
typedef struct tagNET_BUS_WORK_PLAN
{
    DWORD dwSize;
    char szID[DH_COMMON_STRING_32];         
    NET_TIME_EX stuTime;                    
    char szDriverName[DH_COMMON_STRING_64]; 
    char szStartSite[DH_COMMON_STRING_64];  
    char szEndSite[DH_COMMON_STRING_64];    
    BOOL bRunning;                          
} NET_BUS_WORK_PLAN;
typedef struct tagNET_IN_BUS_DISPATCH_WORK_PLAN
{
    DWORD dwSize;
    NET_BUS_WORK_PLAN stuWorkPlan; 
} NET_IN_BUS_DISPATCH_WORK_PLAN;
typedef struct tagNET_OUT_BUS_DISPATCH_WORK_PLAN
{
    DWORD dwSize;
} NET_OUT_BUS_DISPATCH_WORK_PLAN;
typedef struct tagNET_DISPLAY_EVENT_INFO
{
    int nChannel;           
    char szPlateNumber[32]; 
    NET_TIME stuEventTime;  
    BYTE byReserved[452];   
} NET_DISPLAY_EVENT_INFO;
typedef struct tagNET_IN_DISPATCH_DISPLAY_INFO
{
    DWORD dwSize;
    char szText[256];                    
    char szURL[256];                     
    NET_DISPLAY_EVENT_INFO stuEventInfo; 
} NET_IN_DISPATCH_DISPLAY_INFO;
typedef struct tagNET_OUT_DISPATCH_DISPLAY_INFO
{
    DWORD dwSize;
} NET_OUT_DISPATCH_DISPLAY_INFO;
typedef enum tagNET_THERMO_COLORIZATION
{
    NET_THERMO_COLORIZATION_UNKNOWN,   
    NET_THERMO_COLORIZATION_WHITE_HOT, 
    NET_THERMO_COLORIZATION_BLACK_HOT, 
    NET_THERMO_COLORIZATION_IRONBOW2,  
    NET_THERMO_COLORIZATION_ICEFIRE,   
    NET_THERMO_COLORIZATION_FUSION,    
    NET_THERMO_COLORIZATION_RAINBOW,   
    NET_THERMO_COLORIZATION_GLOBOW,    
    NET_THERMO_COLORIZATION_IRONBOW1,  
    NET_THERMO_COLORIZATION_SEPIA,     
    NET_THERMO_COLORIZATION_COLOR1,    
    NET_THERMO_COLORIZATION_COLOR2,    
    NET_THERMO_COLORIZATION_RAIN,      
    NET_THERMO_COLORIZATION_RED_HOT,   
    NET_THERMO_COLORIZATION_GREEN_HOT, 
    NET_THERMO_COLORIZATION_SPRING,    
    NET_THERMO_COLORIZATION_SUMMER,    
    NET_THERMO_COLORIZATION_WINTER,    
    NET_THERMO_COLORIZATION_AUTUMN,    
    NET_THERMO_COLORIZATION_ALARM,     
} NET_THERMO_COLORIZATION;
typedef enum tagNET_THERMO_ROI
{
    NET_THERMO_ROI_UNKNOWN,     
    NET_THERMO_ROI_FULL_SCREEN, 
    NET_THERMO_ROI_SKY,         
    NET_THERMO_ROI_GROUND,      
    NET_THERMO_ROI_HORIZONTAL,  
    NET_THERMO_ROI_CENTER_75,   
    NET_THERMO_ROI_CENTER_50,   
    NET_THERMO_ROI_CENTER_25,   
    NET_THERMO_ROI_CUSTOM,      
} NET_THERMO_ROI;
typedef enum tagNET_THERMO_MODE
{
    NET_THERMO_MODE_UNKNOWN, 
    NET_THERMO_MODE_DEFAULT, 
    NET_THERMO_MODE_INDOOR,  
    NET_THERMO_MODE_OUTDOOR, 
} NET_THERMO_MODE;
typedef struct tagNET_THERMO_GRAPHY_OPT_REGION
{
    BOOL bOptimizedRegion;        
    int nOptimizedROIType;        
    int nCustomRegion;            
    NET_RECT stCustomRegions[64]; 
    char Reserved[256];
} NET_THERMO_GRAPHY_OPTREGION;
typedef struct tagNET_THERMO_GRAPHY_INFO
{
    int nBrightness;                         
    int nSharpness;                          
    int nEZoom;                              
    int nThermographyGamma;                  
    int nColorization;                       
    int nSmartOptimizer;                     
    NET_THERMO_GRAPHY_OPTREGION stOptRegion; 
    int nAgc;                                
    int nAgcMaxGain;                         
    int nAgcPlateau;                         
    char reserved[244];
} NET_THERMO_GRAPHY_INFO;
typedef struct tagNET_IN_THERMO_GET_PRESETINFO
{
    DWORD dwSize;
    int nChannel;           
    NET_THERMO_MODE emMode; 
} NET_IN_THERMO_GET_PRESETINFO;
typedef struct tagNET_OUT_THERMO_GET_PRESETINFO
{
    DWORD dwSize;
    NET_THERMO_GRAPHY_INFO stInfo; 
} NET_OUT_THERMO_GET_PRESETINFO;
typedef struct tagNET_IN_THERMO_GET_EXTSYSINFO
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_THERMO_GET_EXTSYSINFO;
typedef struct tagNET_IN_GET_LINKCHANNELS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_GET_LINKCHANNELS;
#define NET_LINKCHANNEL_MAX 512 
#define NET_LINKGROUP_MAX 64    
typedef struct tagNET_OUT_GET_LINKCHANNELS
{
    DWORD dwSize;
    int nLinkedCnt;                   
    int nLinked[NET_LINKCHANNEL_MAX]; 
} NET_OUT_GET_LINKCHANNELS;
typedef struct tagNET_IN_GET_ALLLINKCHANNELS
{
    DWORD dwSize;
} NET_IN_GET_ALLLINKCHANNELS;
typedef struct tagNET_OUT_GET_ALLLINKCHANNELS
{
    DWORD dwSize;
    int nGroupCnt;                                       
    int nLinkedCnt[NET_LINKGROUP_MAX];                   
    int nLinked[NET_LINKGROUP_MAX][NET_LINKCHANNEL_MAX]; 
} NET_OUT_GET_ALLLINKCHANNELS;
typedef struct tagNET_IN_GET_CAMERA_STATEINFO
{
    DWORD dwSize;
    BOOL bGetAllFlag;                         
    int nValidNum;                            
    int nChannels[DH_MAX_CAMERA_CHANNEL_NUM]; 
} NET_IN_GET_CAMERA_STATEINFO;
typedef enum tagEM_CAMERA_STATE_TYPE
{
    EM_CAMERA_STATE_TYPE_UNKNOWN,    
    EM_CAMERA_STATE_TYPE_CONNECTING, 
    EM_CAMERA_STATE_TYPE_CONNECTED,  
    EM_CAMERA_STATE_TYPE_UNCONNECT,  
    EM_CAMERA_STATE_TYPE_EMPTY,      
    EM_CAMERA_STATE_TYPE_DISABLE,    
} EM_CAMERA_STATE_TYPE;
typedef struct tagNET_CAMERA_STATE_INFO
{
    int nChannel;                           
    EM_CAMERA_STATE_TYPE emConnectionState; 
    BOOL bCapsState;                        
    BOOL bIsCapsStateValid;                 
    char szReserved[1016];                  
} NET_CAMERA_STATE_INFO;
typedef struct tagNET_OUT_GET_CAMERA_STATEINFO
{
    DWORD dwSize;
    int nValidNum;                           
    int nMaxNum;                             
    NET_CAMERA_STATE_INFO* pCameraStateInfo; 
} NET_OUT_GET_CAMERA_STATEINFO;
typedef struct tagNET_IN_GET_REMOTE_CHANNEL_AUDIO_ENCODEINFO
{
    DWORD dwSize;
    int nChannel;    
    int nStreamType; 
} NET_IN_GET_REMOTE_CHANNEL_AUDIO_ENCODEINFO;
typedef struct tagNET_OUT_GET_REMOTE_CHANNEL_AUDIO_ENCODEINFO
{
    DWORD dwSize;
    int nValidNum;                                                  
    DHDEV_TALKDECODE_INFO stuListAudioEncode[MAX_AUDIO_ENCODE_NUM]; 
} NET_OUT_GET_REMOTE_CHANNEL_AUDIO_ENCODEINFO;
typedef struct tagNET_IN_GET_COMM_PORT_INFO
{
    DWORD dwSize;
} NET_IN_GET_COMM_PORT_INFO;
typedef enum tagEM_COMM_PORT_TYPE_INFO
{
    EM_COMM_PORT_TYPE_UNKNOW = 0,
    EM_COMM_PORT_TYPE_RS232,
    EM_COMM_PORT_TYPE_RS485,
    EM_COMM_PORT_TYPE_RS422,
    EM_COMM_PORT_TYPE_RS485_422,
} EM_COMM_PORT_TYPE_INFO;
typedef struct tagNET_COMM_PORT_INFO
{
    EM_COMM_PORT_TYPE_INFO emCommPortType; 
    int nCommPortNum;                      
    BYTE bReserved[1024];                  
} NET_COMM_PORT_INFO;
#define MAX_COMM_PORT_NUM 8
typedef struct tagNET_OUT_GET_COMM_PORT_INFO
{
    DWORD dwSize;
    int nPortInfosNum;                                     
    NET_COMM_PORT_INFO stCommPortInfos[MAX_COMM_PORT_NUM]; 
} NET_OUT_GET_COMM_PORT_INFO;
typedef struct tagNET_THERMO_SYSINFO
{
    char szSerialNumber[64];    
    char szSoftwareVersion[64]; 
    char szFirmwareVersion[64]; 
    char szLibVersion[64];      
    char reserved[256];
} NET_THERMO_SYSINFO;
typedef struct tagNET_OUT_THERMO_GET_EXTSYSINFO
{
    DWORD dwSize;
    NET_THERMO_SYSINFO stInfo; 
} NET_OUT_THERMO_GET_EXTSYSINFO;
typedef struct tagNET_IN_THERMO_GET_OPTREGION
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_THERMO_GET_OPTREGION;
typedef struct tagNET_OUT_THERMO_GET_OPTREGION
{
    DWORD dwSize;
    NET_THERMO_GRAPHY_OPTREGION stInfo; 
} NET_OUT_THERMO_GET_OPTREGION;
typedef struct tagNET_IN_GET_VIDEOOUTPUTCHANNELS
{
    DWORD dwSize; 
} NET_IN_GET_VIDEOOUTPUTCHANNELS;
typedef struct tagNET_OUT_GET_VIDEOOUTPUTCHANNELS
{
    DWORD dwSize;  
    int nMaxLocal; 
} NET_OUT_GET_VIDEOOUTPUTCHANNELS;
typedef struct tagNET_IN_GET_VIDEOINFO
{
    DWORD dwSize; 
} NET_IN_GET_VIDEOINFO;
typedef enum tagNET_VIDEOCHANNEL_STATE
{
    NET_VIDEOCHANNEL_STATE_UNKNOWN, 
    NET_VIDEOCHANNEL_STATE_IDLE,    
    NET_VIDEOCHANNEL_STATE_PLAY,    
    NET_VIDEOCHANNEL_STATE_MONITOR, 
    NET_VIDEOCHANNEL_STATE_TOUR,    
} NET_VIDEOCHANNEL_STATE;
typedef struct tagNET_VIDEOCHANNELINFO
{
    BOOL bEnable;                               
    NET_VIDEOCHANNEL_STATE emVideoChannelState; 
    int nNetflow;                               
    int nBitrate;                               
    int nFrame;                                 
    CAPTURE_SIZE emResolution;                  
    BYTE byReserved[512];                       
} NET_VIDEOCHANNELINFO;
typedef struct tagNET_OUT_GET_VIDEOINFO
{
    DWORD dwSize;                               
    int nVideoInfoNum;                          
    NET_VIDEOCHANNELINFO* pNetVideoChannelInfo; 
    int nRetVideoInfoNum;                       
} NET_OUT_GET_VIDEOINFO;
typedef struct tagNET_IN_THERMO_EN_SHUTTER
{
    DWORD dwSize;
    int nChannel; 
    BOOL bEnable; 
} NET_IN_THERMO_EN_SHUTTER;
typedef struct tagNET_OUT_THERMO_EN_SHUTTER
{
    DWORD dwSize;
} NET_OUT_THERMO_EN_SHUTTER;
typedef struct tagNET_IN_THERMO_DO_FFC
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_THERMO_DO_FFC;
typedef struct tagNET_OUT_THERMO_DO_FFC
{
    DWORD dwSize; 
} NET_OUT_THERMO_DO_FFC;
typedef struct tagNET_IN_THERMO_FIX_FOCUS
{
    DWORD dwSize;              
    int anLinkVideoChannel[2]; 
    double dSpeed;             
} NET_IN_THERMO_FIX_FOCUS;
typedef struct tagNET_OUT_THERMO_FIX_FOCUS
{
    DWORD dwSize; 
} NET_OUT_THERMO_FIX_FOCUS;
typedef struct tagNET_IN_THERMO_GETCAPS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_THERMO_GETCAPS;
typedef struct tagNET_OUT_THERMO_GETCAPS
{
    DWORD dwSize;
    DWORD dwModes;                   
    DWORD dwColorization;            
    DWORD dwROIModes;                
    RANGE stBrightness;              
    RANGE stSharpness;               
    RANGE stEZoom;                   
    RANGE stThermographyGamma;       
    RANGE stSmartOptimizer;          
    NET_FFCPERIOD_RANGE stFFCPeriod; 
} NET_OUT_THERMO_GETCAPS;
typedef struct tagNET_IN_RADIOMETRY_GETCAPS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_RADIOMETRY_GETCAPS;
typedef enum tagNET_RADIOMETRY_METERTYPE
{
    NET_RADIOMETRY_METERTYPE_UNKNOWN,
    NET_RADIOMETRY_METERTYPE_SPOT, 
    NET_RADIOMETRY_METERTYPE_LINE, 
    NET_RADIOMETRY_METERTYPE_AREA, 
} NET_RADIOMETRY_METERTYPE;
typedef struct tagNET_RADIOMETRY_TOTALNUM
{
    DWORD dwMaxNum;   
    DWORD dwMaxSpots; 
    DWORD dwMaxLines; 
    DWORD dwMaxAreas; 
    char reserved[32];
} NET_RADIOMETRY_TOTALNUM;
typedef struct tagNET_OUT_RADIOMETRY_GETCAPS
{
    DWORD dwSize;
    NET_RADIOMETRY_TOTALNUM stTotalNum; 
    DWORD dwMaxPresets;                 
    DWORD dwMeterType;                  
    RANGE stObjectEmissivity;           
    RANGE stObjectDistance;             
    RANGE stReflectedTemperature;       
    RANGE stRelativeHumidity;           
    RANGE stAtmosphericTemperature;     
    int nStatisticsMinPeriod;           
    float fIsothermMaxTemp;             
    float fIsothermMinTemp;             
} NET_OUT_RADIOMETRY_GETCAPS;
typedef struct tagNET_RADIOMETRYINFO
{
    int nMeterType;    
    int nTemperUnit;   
    float fTemperAver; 
    float fTemperMax;  
    float fTemperMin;  
    float fTemperMid;  
    float fTemperStd;  
    char reserved[64];
} NET_RADIOMETRYINFO;
typedef struct tagNET_RADIOMETRY_CONDITION
{
    int nPresetId;   
    int nRuleId;     
    int nMeterType;  
    char szName[64]; 
    int nChannel;    
    char reserved[256];
} NET_RADIOMETRY_CONDITION;
typedef struct tagNET_IN_RADIOMETRY_GETPOINTTEMPER
{
    DWORD dwSize;
    int nChannel;          
    DH_POINT stCoordinate; 
} NET_IN_RADIOMETRY_GETPOINTTEMPER;
typedef struct tagNET_OUT_RADIOMETRY_GETPOINTTEMPER
{
    DWORD dwSize;
    NET_RADIOMETRYINFO stPointTempInfo; 
} NET_OUT_RADIOMETRY_GETPOINTTEMPER;
typedef struct tagNET_IN_RADIOMETRY_GETTEMPER
{
    DWORD dwSize;
    NET_RADIOMETRY_CONDITION stCondition; 
} NET_IN_RADIOMETRY_GETTEMPER;
typedef struct tagNET_OUT_RADIOMETRY_GETTEMPER
{
    DWORD dwSize;
    NET_RADIOMETRYINFO stTempInfo; 
} NET_OUT_RADIOMETRY_GETTEMPER;
typedef struct tagNET_IN_RADIOMETRY_SETOSDMARK
{
    DWORD dwSize;
    NET_RADIOMETRY_CONDITION stCondition; 
} NET_IN_RADIOMETRY_SETOSDMARK;
typedef struct tagNET_OUT_RADIOMETRY_SETOSDMARK
{
    DWORD dwSize;
} NET_OUT_RADIOMETRY_SETOSDMARK;
typedef enum tagEM_RADIOMETRY_PERIOD
{
    EM_RADIOMETRY_PERIOD_UNKNOWN, 
    EM_RADIOMETRY_PERIOD_5 = 5,   
    EM_RADIOMETRY_PERIOD_10 = 10, 
    EM_RADIOMETRY_PERIOD_15 = 15, 
    EM_RADIOMETRY_PERIOD_30 = 30, 
} EM_RADIOMETRY_PERIOD;
typedef struct tagNET_IN_RADIOMETRY_STARTFIND
{
    DWORD dwSize;
    NET_TIME stStartTime;          
    NET_TIME stEndTime;            
    int nMeterType;                
    int nChannel;                  
    EM_RADIOMETRY_PERIOD emPeriod; 
} NET_IN_RADIOMETRY_STARTFIND;
typedef struct tagNET_OUT_RADIOMETRY_STARTFIND
{
    DWORD dwSize;
    int nFinderHanle; 
    int nTotalCount;  
} NET_OUT_RADIOMETRY_STARTFIND;
#define NET_RADIOMETRY_DOFIND_MAX 32
typedef struct tagNET_IN_RADIOMETRY_DOFIND
{
    DWORD dwSize;
    int nFinderHanle; 
    int nBeginNumber; 
    int nCount;       
} NET_IN_RADIOMETRY_DOFIND;
typedef struct tagNET_RADIOMETRY_QUERY
{
    NET_TIME stTime;                 
    int nPresetId;                   
    int nRuleId;                     
    char szName[64];                 
    DH_POINT stCoordinate;           
    int nChannel;                    
    NET_RADIOMETRYINFO stTemperInfo; 
    DH_POINT stCoordinates[8];       
    int nCoordinateNum;              
    char reserved[220];
} NET_RADIOMETRY_QUERY;
typedef struct tagNET_OUT_RADIOMETRY_DOFIND
{
    DWORD dwSize;
    int nFound;                                             
    NET_RADIOMETRY_QUERY stInfo[NET_RADIOMETRY_DOFIND_MAX]; 
} NET_OUT_RADIOMETRY_DOFIND;
typedef struct tagNET_IN_RADIOMETRY_STOPFIND
{
    DWORD dwSize;
    int nFinderHanle; 
} NET_IN_RADIOMETRY_STOPFIND;
typedef struct tagNET_OUT_RADIOMETRY_STOPFIND
{
    DWORD dwSize;
} NET_OUT_RADIOMETRY_STOPFIND;
typedef enum tagNET_RADIOMETRY_RESULT
{
    NET_RADIOMETRY_RESULT_UNKNOWN,
    NET_RADIOMETRY_RESULT_VAL,   
    NET_RADIOMETRY_RESULT_MAX,   
    NET_RADIOMETRY_RESULT_MIN,   
    NET_RADIOMETRY_RESULT_AVR,   
    NET_RADIOMETRY_RESULT_STD,   
    NET_RADIOMETRY_RESULT_MID,   
    NET_RADIOMETRY_RESULT_ISO,   
    NET_RADIOMETRY_RESULT_DIFF,  
    NET_RADIOMETRY_RESULT_SLOPE, 
} NET_RADIOMETRY_RESULT;
typedef enum tagNET_RADIOMETRY_ALARMCONTION
{
    NET_RADIOMETRY_ALARMCONTION_UNKNOWN,
    NET_RADIOMETRY_ALARMCONTION_BELOW, 
    NET_RADIOMETRY_ALARMCONTION_MATCH, 
    NET_RADIOMETRY_ALARMCONTION_ABOVE, 
} NET_RADIOMETRY_ALARMCONTION;
typedef struct tagALARM_HEATIMG_TEMPER_INFO
{
    char szName[64];                      
    int nAlarmId;                         
    int nResult;                          
    int nAlarmContion;                    
    float fTemperatureValue;              
    int nTemperatureUnit;                 
    DH_POINT stCoordinate;                
    int nPresetID;                        
    int nChannel;                         
    int nAction;                          
    DH_POLY_POINTS stuAlarmCoordinates;   
    double dTemperatureMaxValue;          
    double dTemperatureMinValue;          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserved[140];
} ALARM_HEATIMG_TEMPER_INFO;
typedef struct tagALARM_FIREWARNING_INFO
{
    int nPresetId;           
    int nState;              
    DH_RECT stBoundingBox;   
    int nTemperatureUnit;    
    float fTemperature;      
    unsigned int nDistance;  
    GPS_POINT stGpsPoint;    
    int nChannel;            
    BOOL bIsLeaveFireDetect; 
    char reserved[248];
} ALARM_FIREWARNING_INFO;
typedef struct tagPTZ_POSITION_UNIT
{
    int nPositionX;     
    int nPositionY;     
    int nZoom;          
    char szReserve[32]; 
} PTZ_POSITION_UNIT;
typedef struct tagNET_FIRING_GPS_INFO
{
    DWORD dwLongitude;  
    DWORD dwLatidude;   
    double dbAltitude;  
    char szReserve[32]; 
} NET_FIRING_GPS_INFO;
typedef enum tagEM_FIRE_TYPE
{
    EM_FIRE_TYPE_UNKNOWN = -1,    
    EM_FIRE_TYPE_DETECT_AREA,     
    EM_FIRE_TYPE_NO_DETECT_AREA,  
    EM_FIRE_TYPE_DETECT_AREA_ALL, 
} EM_FIRE_TYPE;
typedef struct tagNET_FIREWARNING_INFO
{
    int nPresetId;                    
    NET_RECT stuBoundingBox;          
    int nTemperatureUnit;             
    float fTemperature;               
    UINT nDistance;                   
    GPS_POINT stuGpsPoint;            
    PTZ_POSITION_UNIT stuPTZPosition; 
    float fAltitude;                  
    UINT nThermoHFOV;                 
    UINT nThermoVFOV;                 
    UINT nFSID;                       
    NET_FIRING_GPS_INFO stuFiringGPS; 
    EM_FIRE_TYPE emFireType;          
    BYTE reserved[144];
} NET_FIREWARNING_INFO;
typedef struct tagALARM_FIREWARNING_INFO_DETAIL
{
    int nChannel;                                                      
    int nWarningInfoCount;                                             
    NET_FIREWARNING_INFO stuFireWarningInfo[MAX_FIREWARNING_INFO_NUM]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                              
    BYTE reserved[256];
} ALARM_FIREWARNING_INFO_DETAIL;
typedef struct tagALARM_FACE_OVERHEATING_INFO
{
    int nRelativeId;      
    int nTemperatureUnit; 
    float fTemperature;   
    int nChannelID;       
    BYTE reserved[124];
} ALARM_FACE_OVERHEATING_INFO;
typedef enum tagEM_SENSOR_ABNORMAL_STATUS
{
    NET_SENSOR_ABNORMAL_STATUS_UNKNOWN,
    NET_SENSOR_ABNORMAL_STATUS_SHORT,    
    NET_SENSOR_ABNORMAL_STATUS_BREAK,    
    NET_SENSOR_ABNORMAL_STATUS_INTRIDED, 
    NET_SENSOR_ABNORMAL_STATUS_MASK,     
    NET_SENSOR_ABNORMAL_STATUS_NORMAL,   
    NET_SENSOR_ABNORMAL_STATUS_OFFLINE,  
    NET_SENSOR_ABNORMAL_STATUS_ALARM,    
    NET_SENSOR_ABNORMAL_STATUS_FAULT,    
} EM_SENSOR_ABNORMAL_STATUS;
typedef struct tagALARM_SENSOR_ABNORMAL_INFO
{
    int nAction;                          
    int nChannelID;                       
    NET_TIME_EX stuTime;                  
    EM_SENSOR_ABNORMAL_STATUS emStatus;   
    NET_SENSE_METHOD emSenseMethod;       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[124];                 
} ALARM_SENSOR_ABNORMAL_INFO;
typedef struct tagNET_RADIOMETRY_METADATA
{
    int nHeight;           
    int nWidth;            
    int nChannel;          
    NET_TIME stTime;       
    int nLength;           
    char szSensorType[64]; 
    int nUnzipParamR;      
    int nUnzipParamB;      
    int nUnzipParamF;      
    int nUnzipParamO;      
    char Reserved[256];
} NET_RADIOMETRY_METADATA;
typedef struct tagNET_RADIOMETRY_DATA
{
    NET_RADIOMETRY_METADATA stMetaData; 
    BYTE* pbDataBuf;                    
    DWORD dwBufSize;                    
    char reserved[512];
} NET_RADIOMETRY_DATA;
typedef void(CALLBACK* fRadiometryAttachCB)(LLONG lAttachHandle, NET_RADIOMETRY_DATA* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_RADIOMETRY_ATTACH
{
    DWORD dwSize;
    int nChannel;                 
    fRadiometryAttachCB cbNotify; 
    LDWORD dwUser;                
} NET_IN_RADIOMETRY_ATTACH;
typedef struct tagNET_OUT_RADIOMETRY_ATTACH
{
    DWORD dwSize;
} NET_OUT_RADIOMETRY_ATTACH;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RadiometryAttach(LLONG lLoginID, const NET_IN_RADIOMETRY_ATTACH* pInParam, NET_OUT_RADIOMETRY_ATTACH* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadiometryDetach(LLONG lAttachHandle);
typedef struct tagNET_IN_RADIOMETRY_FETCH
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_RADIOMETRY_FETCH;
typedef struct tagNET_OUT_RADIOMETRY_FETCH
{
    DWORD dwSize;
    int nStatus; 
} NET_OUT_RADIOMETRY_FETCH;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadiometryFetch(LLONG lLoginID, const NET_IN_RADIOMETRY_FETCH* pInParam, NET_OUT_RADIOMETRY_FETCH* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_HEATMAPS_INFO
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_GET_HEATMAPS_INFO;
typedef struct tagNET_OUT_GET_HEATMAPS_INFO
{
    DWORD dwSize;
    NET_RADIOMETRY_METADATA stMetaData; 
    DWORD dwMaxDataBufLen;              
    BYTE* pbDataBuf;                    
    DWORD dwRetDataBufLen;              
    BYTE byReserved[4];                 
} NET_OUT_GET_HEATMAPS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetHeatMapsDirectly(LLONG lLoginID, const NET_IN_GET_HEATMAPS_INFO* pInParam, NET_OUT_GET_HEATMAPS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadiometryDataParse(const NET_RADIOMETRY_DATA* pRadiometryData, unsigned short* pGrayImg, float* pTempForPixels);
typedef struct tagNET_IN_RADIOMETRY_Y_IMAGE
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_RADIOMETRY_Y_IMAGE;
typedef struct tagNET_OUT_RADIOMETRY_Y_IMAGE
{
    DWORD dwSize;
    UINT nWidth;     
    double PTS;      
    UINT nHeight;    
    char* pbDataBuf; 
    int nBufLen;     
    int nBufRet;     
} NET_OUT_RADIOMETRY_Y_IMAGE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRadiometryYImage(LLONG lLoginID, const NET_IN_RADIOMETRY_Y_IMAGE* pInParam, NET_OUT_RADIOMETRY_Y_IMAGE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO;
typedef struct tagNET_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO
{
    NET_POINT stuHotPoint;  
    NET_POINT stuColdPoint; 
    float fHotSpotValue;    
    float fColdSpotValue;   
    int nTemperatrueUnit;   
    BYTE byReserved[256];   
} NET_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO;
typedef struct tagNET_OUT_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO
{
    DWORD dwSize;
    NET_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO stuCurrentHotColdSpotInfo; 
} NET_OUT_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadiometryGetCurrentHotColdSpotInfo(LLONG lLoginID, const NET_IN_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO* pInParam, NET_OUT_RADIOMETRY_CURRENTHOTCOLDSPOT_INFO* pOutParam, int nWaitTime);
#define MAX_RADIOMETRY_TEMPER_NUM 32 
#define MAX_COORDINATE_NUM 8         
typedef enum tagEM_RADIOMETRY_QUERY_TYPE
{
    EM_RADIOMETRY_QUERY_TYPE_UNKNOWN, 
    EM_RADIOMETRY_QUERY_TYPE_SPOT,    
    EM_RADIOMETRY_QUERY_TYPE_AREA,    
    EM_RADIOMETRY_QUERY_TYPE_LINE,    
} EM_RADIOMETRY_QUERY_TYPE;
typedef struct tagNET_QUERY_TEMPER_INFO
{
    float fTemperAve;     
    float fTemperMax;     
    float fTemperMin;     
    BYTE byReserved[128]; 
} NET_QUERY_TEMPER_INFO;
typedef struct tagNET_RADIOMETRY_QUERY_INFO
{
    NET_TIME stuTime;                            
    int nPresetId;                               
    int nRuleId;                                 
    EM_RADIOMETRY_QUERY_TYPE emQueryType;        
    char szName[MAX_COMMON_STRING_64];           
    NET_POINT stuCoordinate[MAX_COORDINATE_NUM]; 
    int nChannel;                                
    NET_TEMPERATURE_UNIT emTemperatureUnit;      
    NET_QUERY_TEMPER_INFO stuQueryTemperInfo;    
    BYTE byReserved[256];                        
} NET_RADIOMETRY_QUERY_INFO;
typedef struct tagNET_RADIOMETRY_TEMPER_DATA
{
    int nRadiometryTemperNum;                                                     
    NET_RADIOMETRY_QUERY_INFO stuRadiometryTemperInfo[MAX_RADIOMETRY_TEMPER_NUM]; 
    BYTE byReserved[512];                                                         
} NET_RADIOMETRY_TEMPER_DATA;
typedef void(CALLBACK* fRadiometryAttachTemperCB)(LLONG lAttachTemperHandle, NET_RADIOMETRY_TEMPER_DATA* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_RADIOMETRY_ATTACH_TEMPER
{
    DWORD dwSize;                       
    int nChannel;                       
    fRadiometryAttachTemperCB cbNotify; 
    LDWORD dwUser;                      
} NET_IN_RADIOMETRY_ATTACH_TEMPER;
typedef struct tagNET_OUT_RADIOMETRY_ATTACH_TEMPER
{
    DWORD dwSize;
} NET_OUT_RADIOMETRY_ATTACH_TEMPER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RadiometryAttachTemper(LLONG lLoginID, const NET_IN_RADIOMETRY_ATTACH_TEMPER* pInParam, NET_OUT_RADIOMETRY_ATTACH_TEMPER* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadiometryDetachTemper(LLONG lAttachTemperHandle);
typedef struct tagNET_IN_RADIOMETRY_RANDOM_REGION_TEMPER
{
    DWORD dwSize;            
    int nChannel;            
    int nPointNum;           
    NET_POINT stuPolygon[8]; 
} NET_IN_RADIOMETRY_RANDOM_REGION_TEMPER;
typedef struct tagNET_RADIOMETRY_REGION_TEMP_INFO
{
    EM_TEMPERATURE_UNIT emTemperatureUnit; 
    int nTemperAver;                       
    int nTemperMax;                        
    int nTemperMin;                        
    NET_POINT stuTemperMaxPoint;           
    NET_POINT stuTemperMinPoint;           
    BYTE byReserved[256];                  
} NET_RADIOMETRY_REGION_TEMP_INFO;
typedef struct tagNET_OUT_RADIOMETRY_RANDOM_REGION_TEMPER
{
    DWORD dwSize;                                      
    NET_RADIOMETRY_REGION_TEMP_INFO stuRegionTempInfo; 
} NET_OUT_RADIOMETRY_RANDOM_REGION_TEMPER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadiometryGetRandomRegionTemper(LLONG lLoginID, const NET_IN_RADIOMETRY_RANDOM_REGION_TEMPER* pInParam, NET_OUT_RADIOMETRY_RANDOM_REGION_TEMPER* pOutParam, int nWaitTime);
typedef struct tagNET_IN_INTELLIVIDEOFUSION_CONVERT_IR_TO_VIS
{
    DWORD dwSize;                
    NET_UINT_POINT stuIrInPoint; 
} NET_IN_INTELLIVIDEOFUSION_CONVERT_IR_TO_VIS;
typedef struct tagNET_OUT_INTELLIVIDEOFUSION_CONVERT_IR_TO_VIS
{
    DWORD dwSize;                  
    NET_UINT_POINT stuVisOutPoint; 
} NET_OUT_INTELLIVIDEOFUSION_CONVERT_IR_TO_VIS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_IntelliVideoFusionConvertPointIr2Vis(LLONG lLoginID, const NET_IN_INTELLIVIDEOFUSION_CONVERT_IR_TO_VIS* pInParam, NET_OUT_INTELLIVIDEOFUSION_CONVERT_IR_TO_VIS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_INTELLIVIDEOFUSION_CONVERT_VIS_TO_IR
{
    DWORD dwSize;                 
    NET_UINT_POINT stuVisInPoint; 
} NET_IN_INTELLIVIDEOFUSION_CONVERT_VIS_TO_IR;
typedef struct tagNET_OUT_INTELLIVIDEOFUSION_CONVERT_VIS_TO_IR
{
    DWORD dwSize;                 
    NET_UINT_POINT stuIrOutPoint; 
} NET_OUT_INTELLIVIDEOFUSION_CONVERT_VIS_TO_IR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_IntelliVideoFusionConvertPointVis2Ir(LLONG lLoginID, const NET_IN_INTELLIVIDEOFUSION_CONVERT_VIS_TO_IR* pInParam, NET_OUT_INTELLIVIDEOFUSION_CONVERT_VIS_TO_IR* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SIM_CARD_FLUX_INFO
{
    DWORD dwSize;   
    int nCardIndex; 
} NET_IN_SIM_CARD_FLUX_INFO;
#define NET_FLUX_RECORD_MAX_NUM 7 
typedef struct tagNET_SIM_CARD_FLUX_RECORD
{
    NET_TIME stuDate;     
    UINT nDaySendFlux;    
    UINT nDayRecvFlux;    
    BYTE byReserved[512]; 
} NET_SIM_CARD_FLUX_RECORD;
typedef struct tagNET_OUT_SIM_CARD_FLUX_INFO
{
    DWORD dwSize;                                                
    UINT nTotalFlux;                                             
    UINT nSendFlux;                                              
    UINT nRecvFlux;                                              
    NET_TIME stuTime;                                            
    int nRecordNum;                                              
    NET_SIM_CARD_FLUX_RECORD stuRecord[NET_FLUX_RECORD_MAX_NUM]; 
    UINT nLastMonthTotalFlux;                                    
} NET_OUT_SIM_CARD_FLUX_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSimCardFlux(LLONG lLoginID, const NET_IN_SIM_CARD_FLUX_INFO* pNetDataIn, NET_OUT_SIM_CARD_FLUX_INFO* pNetDataOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDoorWorkMode(LLONG lLoginID, const NET_IN_CTRL_ACCESS_SET_DOOR_WORK_MODE* pNetDataIn, NET_OUT_CTRL_ACCESS_SET_DOOR_WORK_MODE* pNetDataOut, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlCabinLED(LLONG lLoginID, EM_CABIN_LED_CONTROL_TYPE emType, const void* pInParam, void* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
#define NET_SELECT_UPDATE_LOCK_MAX_NUM 32 
typedef struct tagNET_IN_SELECT_UPDATE_LOCK_INFO
{
    DWORD dwSize;
    int nChannelNum;                              
    int nChannel[NET_SELECT_UPDATE_LOCK_MAX_NUM]; 
} NET_IN_SELECT_UPDATE_LOCK_INFO;
typedef struct tagNET_OUT_SELECT_UPDATE_LOCK_INFO
{
    DWORD dwSize;
} NET_OUT_SELECT_UPDATE_LOCK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SelectLockToUpdate(LLONG lLoginID, const NET_IN_SELECT_UPDATE_LOCK_INFO* pNetDataIn, NET_OUT_SELECT_UPDATE_LOCK_INFO* pNetDataOut, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef enum tagEM_AUTHORITY_SUB_TYPE
{
    EM_AUTHORITY_SUB_TYPE_UNKNOWN,                 
    EM_AUTHORITY_SUB_TYPE_SHUT_DOWN,               
    EM_AUTHORITY_SUB_TYPE_MONITOR,                 
    EM_AUTHORITY_SUB_TYPE_MONITOR_FOR_CHANNEL,     
    EM_AUTHORITY_SUB_TYPE_REPLAY,                  
    EM_AUTHORITY_SUB_TYPE_REPLAY_FOR_CHANNEL,      
    EM_AUTHORITY_SUB_TYPE_BACKUP,                  
    EM_AUTHORITY_SUB_TYPE_MHARDISK,                
    EM_AUTHORITY_SUB_TYPE_MPTZ,                    
    EM_AUTHORITY_SUB_TYPE_ACCOUNT,                 
    EM_AUTHORITY_SUB_TYPE_QUERY_LOG,               
    EM_AUTHORITY_SUB_TYPE_DEL_LOG,                 
    EM_AUTHORITY_SUB_TYPE_SYS_UPDATE,              
    EM_AUTHORITY_SUB_TYPE_AUTO_MAINTAIN,           
    EM_AUTHORITY_SUB_TYPE_GENERAL_CONF,            
    EM_AUTHORITY_SUB_TYPE_ENCODE_CONF,             
    EM_AUTHORITY_SUB_TYPE_RECORD,                  
    EM_AUTHORITY_SUB_TYPE_RECORD_CONF,             
    EM_AUTHORITY_SUB_TYPE_COM_CONF,                
    EM_AUTHORITY_SUB_TYPE_NET_CONF,                
    EM_AUTHORITY_SUB_TYPE_ALARM,                   
    EM_AUTHORITY_SUB_TYPE_ALARM_CONF,              
    EM_AUTHORITY_SUB_TYPE_VIDEO_CONFIG,            
    EM_AUTHORITY_SUB_TYPE_PTZ_CONFIG,              
    EM_AUTHORITY_SUB_TYPE_OUTPUT_CONFIG,           
    EM_AUTHORITY_SUB_TYPE_VIDEO_INPUT_CONFIG,      
    EM_AUTHORITY_SUB_TYPE_DEFAULT_CONFIG,          
    EM_AUTHORITY_SUB_TYPE_BK_CONFIG,               
    EM_AUTHORITY_SUB_TYPE_INTELLI_CONFIG,          
    EM_AUTHORITY_SUB_TYPE_REMOTE_DEVICE,           
    EM_AUTHORITY_SUB_TYPE_ATM_POS,                 
    EM_AUTHORITY_SUB_TYPE_OFFLINE_LOGINED_USER,    
    EM_AUTHORITY_SUB_TYPE_AUDIO_AUTH,              
    EM_AUTHORITY_SUB_TYPE_SPOT_SET,                
    EM_AUTHORITY_SUB_TYPE_TVSET,                   
    EM_AUTHORITY_SUB_TYPE_IPSAN,                   
    EM_AUTHORITY_SUB_TYPE_CONFIG,                  
    EM_AUTHORITY_SUB_TYPE_ARMING,                  
    EM_AUTHORITY_SUB_TYPE_DISARM,                  
    EM_AUTHORITY_SUB_TYPE_BYPASS,                  
    EM_AUTHORITY_SUB_TYPE_BYPASS_PARTIAL,          
    EM_AUTHORITY_SUB_TYPE_ALARM_BELL,              
    EM_AUTHORITY_SUB_TYPE_ALARM_CONFIRM_PARTIAL,   
    EM_AUTHORITY_SUB_TYPE_DEFENCE_CONFIG_PARTIAL,  
    EM_AUTHORITY_SUB_TYPE_ALARM_OUT_PARITAL,       
    EM_AUTHORITY_SUB_TYPE_TALK,                    
    EM_AUTHORITY_SUB_TYPE_WIRELESS_CONFIG,         
    EM_AUTHORITY_SUB_TYPE_MOBILE_CONFIG,           
    EM_AUTHORITY_SUB_TYPE_AUDIO_DETECT_CONFIG,     
    EM_AUTHORITY_SUB_TYPE_NET_PREVIEW_FOR_CHANNEL, 
    EM_AUTHORITY_SUB_TYPE_REBOOT,                            
    EM_AUTHORITY_SUB_TYPE_SYS_LENS,                          
    EM_AUTHORITY_SUB_TYPE_RAIN_BRUSH_CONFIG,                 
    EM_AUTHORITY_SUB_TYPE_LIGHTING_CONFIG,                   
    EM_AUTHORITY_SUB_TYPE_ACCESS_CONTROL,                    
    EM_AUTHORITY_SUB_TYPE_ACCESS_CONTROL_PARTIAL,            
    EM_AUTHORITY_SUB_TYPE_DECODE_TOUR,                       
    EM_AUTHORITY_SUB_TYPE_VIDEO_OUT,                         
    EM_AUTHORITY_SUB_TYPE_PTZ_FOR_CHANNEL,                   
    EM_AUTHORITY_SUB_TYPE_MODIFY_LANGUANGE,                  
    EM_AUTHORITY_SUB_TYPE_MODIFY_VIDEO,                      
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_CONTROL,             
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_SCHEDULE,            
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_MODIFY_SCHEDULE,     
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_INTELL_PARAM,        
    EM_AUTHORITY_SUB_TYPE_CAMERA_PERIPHERAL,                 
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_DOWNLOAD_MEDIA_FILE, 
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_MODIFY_MEDIA_FILE,   
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_DELETE_MEDIA_FILE,   
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_BACKUP_TO_USB,       
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_BACKUP_TO_FTP,       
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_EXPORT_ACCONUT,      
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_QUERY_ACCOUNT,       
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_MODIFY_ACCOUNT,      
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_RESET_PASSWORD,      
    EM_AUTHORITY_SUB_TYPE_COURSE_RECORD_AUTHORITY,           
} EM_AUTHORITY_SUB_TYPE;
typedef enum tagEM_AUTHORITY_MAIN_TYPE
{
    EM_AUTHORITY_MAIN_TYPE_UNKNOWN,           
    EM_AUTHORITY_MAIN_TYPE_AUTH_USER_MAG,     
    EM_AUTHORITY_MAIN_TYPE_AUTH_SYS_CFG,      
    EM_AUTHORITY_MAIN_TYPE_AUTH_OFFLINE_USER, 
    EM_AUTHORITY_MAIN_TYPE_AUTH_DF_UD,        
    EM_AUTHORITY_MAIN_TYPE_AUTH_PTZ_CTR,      
    EM_AUTHORITY_MAIN_TYPE_AUTH_SYS_INFO,     
    EM_AUTHORITY_MAIN_TYPE_AUTH_MANU_CTR,     
    EM_AUTHORITY_MAIN_TYPE_AUTH_BACKUP,       
    EM_AUTHORITY_MAIN_TYPE_AUTH_COLOR_SET,    
    EM_AUTHORITY_MAIN_TYPE_AUTH_STORE_CFG,    
    EM_AUTHORITY_MAIN_TYPE_AUTH_EVENT_CFG,    
    EM_AUTHORITY_MAIN_TYPE_AUTH_NET_CFG,      
    EM_AUTHORITY_MAIN_TYPE_AUTH_RMT_DEVICE,   
    EM_AUTHORITY_MAIN_TYPE_AUTH_DEL_LOG,      
    EM_AUTHORITY_MAIN_TYPE_AUTH_SHUTDOWN,     
} EM_AUTHORITY_MAIN_TYPE;
#define NET_AUTHORITY_CLASS_MAX_NUM 256 
typedef struct tagNET_AUTH_CLASSIFY_INFO
{
    EM_AUTHORITY_MAIN_TYPE emMainAuthority; 
    EM_AUTHORITY_SUB_TYPE emSubAuthority;   
    int nChannel;                           
    BYTE byReserved[128];                   
} NET_AUTH_CLASSIFY_INFO;
typedef struct tagNET_IN_GET_AUTHORITY_INFO_LIST
{
    DWORD dwSize;
} NET_IN_GET_AUTHORITY_INFO_LIST;
typedef struct tagNET_OUT_GET_AUTHORITY_INFO_LIST
{
    DWORD dwSize;
    int nRetAuthInfoCount;                                           
    NET_AUTH_CLASSIFY_INFO stuAuthInfo[NET_AUTHORITY_CLASS_MAX_NUM]; 
} NET_OUT_GET_AUTHORITY_INFO_LIST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAuthClassifyList(LLONG lLoginID, const NET_IN_GET_AUTHORITY_INFO_LIST* pNetDataIn, NET_OUT_GET_AUTHORITY_INFO_LIST* pNetDataOut, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef enum
{
    ABILITY_DYNAMIC_CONNECT = 1,           
    ABILITY_WATERMARK_CFG = 17,            
    ABILITY_WIRELESS_CFG = 18,             
    ABILITY_DEVALL_INFO = 26,              
    ABILITY_CARD_QUERY = 0x0100,           
    ABILITY_MULTIPLAY = 0x0101,            
    ABILITY_QUICK_QUERY_CFG = 0x0102,      
    ABILITY_INFRARED = 0x0121,             
    ABILITY_TRIGGER_MODE = 0x0131,         
    ABILITY_DISK_SUBAREA = 0x0141,         
    ABILITY_DSP_CFG = 0x0151,              
    ABILITY_STREAM_MEDIA = 0x0161,         
    ABILITY_INTELLI_TRACKER = 0x0171,      
    ABILITY_DOWNLOAD_BY_ALLSPEED = 0x0181, 
} DH_SYS_ABILITY;
typedef enum
{
    EN_FTP = 0,                     
    EN_SMTP,                        
    EN_NTP,                         
    EN_AUTO_MAINTAIN,               
    EN_VIDEO_COVER,                 
    EN_AUTO_REGISTER,               
    EN_DHCP,                        
    EN_UPNP,                        
    EN_COMM_SNIFFER,                
    EN_NET_SNIFFER,                 
    EN_BURN,                        
    EN_VIDEO_MATRIX,                
    EN_AUDIO_DETECT,                
    EN_STORAGE_STATION,             
    EN_IPSSEARCH,                   
    EN_SNAP,                        
    EN_DEFAULTNIC,                  
    EN_SHOWQUALITY,                 
    EN_CONFIG_IMEXPORT,             
    EN_LOG,                         
    EN_SCHEDULE,                    
    EN_NETWORK_TYPE,                
    EN_MARK_IMPORTANTRECORD,        
    EN_ACFCONTROL,                  
    EN_MULTIASSIOPTION,             
    EN_DAVINCIMODULE,               
    EN_GPS,                         
    EN_MULTIETHERNET,               
    EN_LOGIN_ATTRIBUTE,             
    EN_RECORD_GENERAL,              
    EN_JSON_CONFIG,                 
    EN_HIDE_FUNCTION,               
    EN_DISK_DAMAGE,                 
    EN_PLAYBACK_SPEED_CTRL,         
    EN_HOLIDAYSCHEDULE,             
    EN_FETCH_MONEY_TIMEOUT,         
    EN_BACKUP_VIDEO_FORMAT,         
    EN_QUERY_DISK_TYPE,             
    EN_CONFIG_DISPLAY_OUTPUT,       
    EN_SUBBITRATE_RECORD_CTRL,      
    EN_IPV6,                        
    EN_SNMP,                        
    EN_QUERY_URL,                   
    EN_ISCSI,                       
    EN_RAID,                        
    EN_HARDDISK_INFO,               
    EN_PICINPIC,                    
    EN_PLAYBACK_SPEED_CTRL_SUPPORT, 
    EN_LF_XDEV,                     
    EN_DSP_ENCODE_CAP,              
    EN_MULTICAST,                   
    EM_NET_LIMIT,                   
    EM_COM422,                      
    EM_PROTOCAL_FRAMEWORK,          
    EM_WRITE_DISK_OSD,              
    EM_DYNAMIC_MULTI_CONNECT,       
    EM_CLOUDSERVICE,                
    EM_RECORD_INFO,                 
    EN_DYNAMIC_REG,                 
    EM_MULTI_PLAYBACK,              
    EN_ENCODE_CHN,                  
    EN_SEARCH_RECORD,               
    EN_UPDATE_MD5,                  
    EN_PROTOCOL3ToF6,               
    EN_COMPOSECHANNEL,              
    EN_PLAYBACK,                    
} EM_DEVICE_FUNC_LIST;
typedef struct
{
    DWORD IsFucEnable[512]; 
} DH_DEV_ENABLE_INFO;
typedef struct
{
    char IsCardQueryEnable;
    char iRev[3];
} DH_CARD_QUERY_EN;
typedef struct
{
    char IsWirelessEnable;
    char iRev[3];
} DH_WIRELESS_EN;
typedef struct
{
    char isSupportWM; 
    char supportWhat; 
    char reserved[2];
} DH_WATERMAKE_EN;
typedef struct
{
    int nEnable;           
    DWORD dwMultiPlayMask; 
    char reserved[4];      
} DH_MULTIPLAY_EN;
typedef struct
{
    BOOL bSupport;        
    int nAlarmInCount;    
    int nAlarmOutCount;   
    int nRemoteAddrCount; 
    BYTE reserved[32];
} DH_WIRELESS_ALARM_INFO;
typedef struct
{
    BOOL bSupported;    
    int nSupportNum;    
    BYTE bReserved[32]; 
} DH_DISK_SUBAREA_EN;
typedef struct
{
    BYTE bMainFrame[32];    
    BYTE bExtraFrame_1[32]; 
    BYTE bReserved[128];    
} DH_DSP_CFG_ITEM;
typedef struct
{
    int nItemNum;                      
    DH_DSP_CFG_ITEM stuDspCfgItem[32]; 
    BYTE bReserved[128];               
} DH_DSP_CFG;
typedef struct
{
    char IsQuickQueryEnable; 
    char iRev[3];
} DH_QUICK_QUERY_CFG_EN;
typedef struct
{
    int nStreamType;    
    BYTE bReserved[16]; 
} DH_STREAM_MEDIA_EN;
typedef struct
{
    char IsIntelliTrackerEnable; 
    BYTE bReserved[3];
} DH_INTELLI_TRACKER_EN;
typedef struct tagNET_DOWNLOAD_BY_ALLSPEED_EN
{
    int nDownloadByAllSpeed; 
    BYTE bReserved[16];
} NET_DOWNLOAD_BY_ALLSPEED_EN;
#define NET_MAX_COMPOSITE_CHANNEL 256 
typedef struct tagNET_IN_COMPOSITE_CAPS
{
    DWORD dwSize;
    int nChannelCount;                        
    int nChannels[NET_MAX_COMPOSITE_CHANNEL]; 
    int nLayoutX;                             
    int nLayoutY;                             
} NET_IN_COMPOSITE_CAPS;
typedef struct tagNET_OUT_COMPOSITE_CAPS
{
    DWORD dwSize;
    int nSplitModeCount;                               
    DH_SPLIT_MODE emSplitModes[DH_MAX_SPLIT_MODE_NUM]; 
    int nMaxFreeWindow;                                
} NET_OUT_COMPOSITE_CAPS;
#define MAX_REGISTER_ID_LEN (256)
#define MAX_APP_ID_LEN (256)
#define MAX_URL_LEN (1024)
#define MAX_IOS_CERTIFICATE_LEN (1024 * 14)
#define MAX_IOS_SECRET_KEY_LEN (512)
#define MAX_MOBILE_CHANNEL_NUM (256)
typedef enum tagEM_MOBILE_SERVER_TYPE
{
    EM_MOBILE_SERVER_TYPE_UNKNOWN,  
    EM_MOBILE_SERVER_TYPE_APPLE,    
    EM_MOBILE_SERVER_TYPE_ANDROID,  
    EM_MOBILE_SERVER_TYPE_SDKCLOUD, 
} EM_MOBILE_SERVER_TYPE;
typedef struct tagNET_PUSH_SERVER_INFO
{
    char szAddress[MAX_URL_LEN]; 
    int nPort;                   
} NET_PUSH_SERVER_INFO;
typedef enum tagEM_EVENT_SUB_CODE
{
    EM_EVENT_SUB_CODE_UNKNOWN = -1, 
    EM_EVENT_SUB_CODE_LOSS,         
    EM_EVENT_SUB_CODE_COVER,        
    EM_EVENT_SUB_CODE_FROZEN,       
    EM_EVENT_SUB_CODE_LIGHT,        
    EM_EVENT_SUB_CODE_DARK,         
    EM_EVENT_SUB_CODE_SCENECHANGE,  
} EM_EVENT_SUB_CODE;
typedef struct tagNET_SUBSCRIBE_INFO
{
    int nCode;                                                  
    EM_EVENT_SUB_CODE emSubCode;                                
    int nChnNum;                                                
    int nIndexs[MAX_MOBILE_CHANNEL_NUM];                        
    char szNumber[DH_COMMON_STRING_16];                         
    char szSound[DH_COMMON_STRING_64];                          
    char szIndexsExt[DH_COMMON_STRING_32][DH_COMMON_STRING_16]; 
} NET_SUBSCRIBE_INFO;
typedef enum tagEM_PUSH_GATEWAY_TYPE
{
    EM_PUSH_GATEWAY_TYPE_UNKNOWN,         
    EM_PUSH_GATEWAY_TYPE_APPLE_PUSH,      
    EM_PUSH_GATEWAY_TYPE_ANDROID_SDKPUSH, 
    EM_PUSH_GATEWAY_TYPE_ANDROID_JPUSH,   
    EM_PUSH_GATEWAY_TYPE_ANDROID_GCM,     
} EM_PUSH_GATEWAY_TYPE;
typedef struct tagNET_MOBILE_PUSH_NOTIFY
{
    DWORD dwSize;
    char szRegisterID[MAX_REGISTER_ID_LEN];      
    EM_MOBILE_SERVER_TYPE emServerType;          
    int nPeriodOfValidity;                       
    char szAuthServerAddr[MAX_URL_LEN];          
    int nAuthServerPort;                         
    char szPushServerAddr[MAX_URL_LEN];          
    int nPushServerPort;                         
    NET_PUSH_SERVER_INFO stuPushServerMain;      
    NET_PUSH_SERVER_INFO stuPushRedirectServer;  
    char szDevName[DH_COMMON_STRING_64];         
    char szDevID[DH_COMMON_STRING_64];           
    char szUser[DH_COMMON_STRING_64];            
    char szPassword[DH_COMMON_STRING_64];        
    char szCertificate[MAX_IOS_CERTIFICATE_LEN]; 
    char szSecretKey[MAX_IOS_SECRET_KEY_LEN];    
    int nSubScribeMax;                           
    int nSubScribeNum;                           
    NET_SUBSCRIBE_INFO* pstuSubscribes;          
    BYTE byReserved[4];                          
    BOOL bUserEx;                                
    char szUserEx[256];                          
} NET_MOBILE_PUSH_NOTIFY;
typedef struct tagNET_MOBILE_PUSH_NOTIFY_DEL
{
    DWORD dwSize;
    char szRegisterID[MAX_REGISTER_ID_LEN]; 
} NET_MOBILE_PUSH_NOTIFY_DEL;
typedef struct tagNET_MOBILE_PUSH_NOTIFY_CFG
{
    DWORD dwSize;
    char szRegisterID[MAX_REGISTER_ID_LEN];      
    char szAppID[MAX_APP_ID_LEN];                
    EM_MOBILE_SERVER_TYPE emServerType;          
    EM_PUSH_GATEWAY_TYPE emPushGatewayType;      
    int nPeriodOfValidity;                       
    char szAuthServerAddr[MAX_URL_LEN];          
    int nAuthServerPort;                         
    char szPushServerAddr[MAX_URL_LEN];          
    int nPushServerPort;                         
    char szDevName[DH_COMMON_STRING_64];         
    char szDevID[DH_COMMON_STRING_64];           
    char szUser[DH_COMMON_STRING_64];            
    char szPassword[DH_COMMON_STRING_64];        
    char szCertificate[MAX_IOS_CERTIFICATE_LEN]; 
    char szSecretKey[MAX_IOS_SECRET_KEY_LEN];    
    int nSubScribeMax;                           
    int nSubScribeNum;                           
    NET_SUBSCRIBE_INFO* pstuSubscribes;          
    NET_PUSH_SERVER_INFO stuPushServerMain;      
    NET_PUSH_SERVER_INFO stuPushRedirectServer;  
    BYTE byReserved[4];                          
    BOOL bUserEx;                                
    char szUserEx[256];                          
} NET_MOBILE_PUSH_NOTIFY_CFG;
typedef struct tagNET_SUBSCRIBE_INFO_EX
{
    char szCode[MAX_COMMON_STRING_64];                          
    char szSubCode[MAX_COMMON_STRING_64];                       
    int nChnNum;                                                
    int nIndexs[MAX_MOBILE_CHANNEL_NUM];                        
    char szNumber[DH_COMMON_STRING_16];                         
    char szSound[DH_COMMON_STRING_64];                          
    char szIndexsExt[DH_COMMON_STRING_32][DH_COMMON_STRING_16]; 
    void* pstuCustomFilter;                                     
    BYTE byReserved[504];                                       
} NET_SUBSCRIBE_INFO_EX;
typedef struct tagNET_MOBILE_PUSH_NOTIFICATION_GENERAL_INFO
{
    char szRegisterID[MAX_REGISTER_ID_LEN];               
    char szAppID[MAX_APP_ID_LEN];                         
    EM_MOBILE_SERVER_TYPE emServerType;                   
    EM_PUSH_GATEWAY_TYPE emPushGatewayType;               
    int nPeriodOfValidity;                                
    char szAuthServerAddr[MAX_URL_LEN];                   
    int nAuthServerPort;                                  
    char szDevName[DH_COMMON_STRING_64];                  
    char szDevID[DH_COMMON_STRING_64];                    
    char szUser[DH_COMMON_STRING_256];                    
    char szCertificate[MAX_IOS_CERTIFICATE_LEN];          
    char szSecretKey[MAX_IOS_SECRET_KEY_LEN];             
    char szBindingUserName[DH_COMMON_STRING_64];          
    int nSubScribeMax;                                    
    int nSubScribeNum;                                    
    NET_SUBSCRIBE_INFO_EX* pstuSubscribes;                
    NET_PUSH_SERVER_INFO stuPushServerMain;               
    DH_TSECT stuAllEventPushTime[DH_N_WEEKS][DH_N_TSECT]; 
    BYTE byReserved[1024];                                
} NET_MOBILE_PUSH_NOTIFICATION_GENERAL_INFO;
typedef struct tagNET_MOBILE_PUSH_NOTIFY_CFG_DEL
{
    DWORD dwSize;
    char szRegisterID[MAX_REGISTER_ID_LEN]; 
    char szAppID[MAX_APP_ID_LEN];           
} NET_MOBILE_PUSH_NOTIFY_CFG_DEL;
typedef enum tagEM_OPTTYPE_MOBILE_TYPE
{
    OPTTYPE_MOBILE_DEVICE_ATTR = 0x00000001,    
    OPTTYPE_MOBILE_DEVICE_SN = 0x00000002,      
    OPTTYPE_MOBILE_DISK_INFO = 0x00000004,      
    OPTTYPE_MOBILE_DIGITAL_NUM = 0x00000008,    
    OPTTYPE_MOBILE_ALARM_IO = 0x00000010,       
    OPTTYPE_MOBILE_DEVICE_ABILITY = 0x00000020, 
    OPTTYPE_MOBILE_STATE_SOFTWARE = 0x00001000, 
} EM_OPTTYPE_MOBILE_TYPE;
typedef enum tagEmOptimizeType
{
    EM_OPT_TYPE_DEFAULT = 0,         
    EM_OPT_TYPE_MOBILE_V1 = 1,       
    EM_OPT_TYPE_P2P_NETPARAM_V1 = 2, 
    EM_OPT_TYPE_MOBILE_OPTION = 3,   
} EM_OPTIMIZE_TYPE;
typedef struct tagNET_IN_MOTIONMATCH_PARAM
{
    DWORD dwSize;                                 
    BOOL bFileName;                               
    char szFileName[MAX_PATH];                    
    NET_RECORDFILE_INFO stuRecordInfo;            
    int nRegionNum;                               
    DH_POINT stuRegion[DH_MAX_DETECT_REGION_NUM]; 
} NET_IN_MOTIONMATCH_PARAM;
typedef struct tagNET_TIME_BEGIN_END
{
    NET_TIME stuBegin; 
    NET_TIME stuEnd;   
} NET_TIME_BEGIN_END;
#define NET_SMART_SEARTCH_TIME_SECTION_MAX (128)
typedef struct tagNET_OUT_MOTIONMATCH_PARAM
{
    DWORD dwSize;                                                   
    int nTimeNum;                                                   
    NET_TIME_BEGIN_END stuTime[NET_SMART_SEARTCH_TIME_SECTION_MAX]; 
} NET_OUT_MOTIONMATCH_PARAM;
typedef struct tagNET_IN_SNAP_PIC_TO_FILE_PARAM
{
    DWORD dwSize;
    SNAP_PARAMS stuParam;      
    char szFilePath[MAX_PATH]; 
} NET_IN_SNAP_PIC_TO_FILE_PARAM;
typedef struct tagNET_OUT_SNAP_PIC_TO_FILE_PARAM
{
    DWORD dwSize;
    char* szPicBuf;       
    DWORD dwPicBufLen;    
    DWORD dwPicBufRetLen; 
} NET_OUT_SNAP_PIC_TO_FILE_PARAM;
typedef struct tagALARM_BUS_SHARP_TURN_INFO
{
    DWORD dwSize;
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME_EX stuTime;                  
    BYTE byReserved[4];                   
} ALARM_BUS_SHARP_TURN_INFO;
typedef struct tagALARM_BUS_SCRAM_INFO
{
    DWORD dwSize;
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
} ALARM_BUS_SCRAM_INFO;
typedef struct tagALARM_BUS_SHARP_ACCELERATE_INFO
{
    DWORD dwSize;
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME_EX stuTime;                  
    BYTE byReserved[4];                   
} ALARM_BUS_SHARP_ACCELERATE_INFO;
typedef struct tagALARM_BUS_SHARP_DECELERATE_INFO
{
    DWORD dwSize;
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME_EX stuTime;                  
    BYTE byReserved[4];                   
} ALARM_BUS_SHARP_DECELERATE_INFO;
typedef enum tagNET_ACCESS_ACTION_TYPE
{
    NET_ACCESS_ACTION_TYPE_UNKNOWN = 0, 
    NET_ACCESS_ACTION_TYPE_INSERT = 1,  
    NET_ACCESS_ACTION_TYPE_UPDATE = 2,  
    NET_ACCESS_ACTION_TYPE_REMOVE = 3,  
} NET_ACCESS_ACTION_TYPE;
typedef enum tagNET_ACCESS_ERRORCODE
{
    NET_ACCESS_ERRORCODE_UNKNOWN = 0,          
    NET_ACCESS_ERRORCODE_NOTSUPPORT = 1,       
    NET_ACCESS_ERRORCODE_FULLDATA = 2,         
    NET_ACCESS_ERRORCODE_NOTSUPPORTISSUED = 3, 
} NET_ACCESS_ERRORCODE;
typedef struct tagALARM_ACCESS_CARD_OPERATE_INFO
{
    DWORD dwSize;
    NET_ACCESS_ACTION_TYPE emActionType; 
    char szCardNo[DH_MAX_CARDINFO_LEN];  
    NET_THREE_STATUS_BOOL emResult;      
    int nChannelID;                      
    char szCredentialHolder[16];         
    NET_ACCESS_METHOD emType;            
    char szSerialNum[32];                
    int nIndex;                          
    int nTaskID;                         
    NET_ACCESS_ERRORCODE emErrorde;      
} ALARM_ACCESS_CARD_OPERATE_INFO;
typedef struct tagALARM_TAKENAWAY_DETECTION_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    int nOccurrenceCount;                 
    int nLevel;                           
    short nPreserID;                      
    char szPresetName[64];                
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_TAKENAWAY_DETECTION_INFO;
typedef struct tagALARM_VIDEOABNORMAL_DETECTION_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    int nType;            
    int nValue;           
    int nOccurrenceCount; 
} ALARM_VIDEOABNORMAL_DETECTION_INFO;
typedef struct tagALARM_LOCAL_ALARM_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    int nSenseType;       
    int nDefenceAreaType; 
} ALARM_LOCAL_ALARM_INFO;
typedef enum tagEM_MOTION_DETECT_TYPE
{
    EM_MOTION_DETECT_UNKNOWN,           
    EM_MOTION_DETECT_HUMAN,             
    EM_MOTION_DETECT_VEHICLE,           
    EM_MOTION_DETECT_HUMAN_AND_VEHICLE, 
} EM_MOTION_DETECT_TYPE;
typedef struct tagNET_MOTIONDETECT_REGION_INFO
{
    UINT nRegionID;        
    char szRegionName[64]; 
    BYTE bReserved[508];   
} NET_MOTIONDETECT_REGION_INFO;
typedef struct tagALARM_MOTIONDETECT_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    UINT nRegionNum;                            
    NET_MOTIONDETECT_REGION_INFO stuRegion[32]; 
    BOOL bSmartMotionEnable;                    
    UINT nDetectTypeNum;                        
    EM_MOTION_DETECT_TYPE emDetectType[32];     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    NET_GPS_STATUS_INFO stuGPSStatusInfo;       
} ALARM_MOTIONDETECT_INFO;
typedef struct tagNET_SMARTDETECT_HUMAN_OBJECT
{
    UINT nHumanID;       
    NET_RECT stuRect;    
    BYTE bReserved[508]; 
} NET_SMARTDETECT_HUMAN_OBJECT;
typedef struct tagALARM_SMARTMOTION_HUMAN_INFO
{
    int nChannelID;   
    NET_TIME_EX UTC;  
    double PTS;       
    int nEventID;     
    int nEventAction; 
    NET_MOTIONDETECT_REGION_INFO stuSmartRegion[32]; 
    UINT nSmartRegionNum;                            
    UINT nHumanObjectNum;                            
    NET_SMARTDETECT_HUMAN_OBJECT stuHumanObject[64]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE bReserved[1024];                            
} ALARM_SMARTMOTION_HUMAN_INFO;
typedef struct tagNET_SMARTDETECT_VEHICLE_OBJECT
{
    UINT nVehicleID;     
    NET_RECT stuRect;    
    BYTE bReserved[508]; 
} NET_SMARTDETECT_VEHICLE_OBJECT;
typedef struct tagALARM_SMARTMOTION_VEHICLE_INFO
{
    int nChannelID;   
    NET_TIME_EX UTC;  
    double PTS;       
    int nEventID;     
    int nEventAction; 
    NET_MOTIONDETECT_REGION_INFO stuSmartRegion[32];     
    UINT nSmartRegionNum;                                
    UINT nVehicleObjectNum;                              
    NET_SMARTDETECT_VEHICLE_OBJECT stuVehicleObject[64]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                
    BYTE bReserved[1024];                                
} ALARM_SMARTMOTION_VEHICLE_INFO;
typedef struct tagALARM_POLICE_CHECK_INFO
{
    DWORD dwSize;
    int nChannelID;   
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nEventAction; 
    char szId[32];                        
    char szName[32];                      
    int nSignType;                        
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    char szComment[1024];                 
} ALARM_POLICE_CHECK_INFO;
typedef struct tagALARM_NEW_FILE_INFO
{
    DWORD dwSize;
    int nChannel;                          
    int nEventID;                          
    DWORD dwEvent;                         
    int FileSize;                          
    int nIndex;                            
    DWORD dwStorPoint;                     
    char szFileName[DH_COMMON_STRING_128]; 
} ALARM_NEW_FILE_INFO;
typedef enum tagEM_PTZ_STATUS_TYPE
{
    EM_PTZ_STATUS_UNKNOW,        
    EM_PTZ_STATUS_NORMAL,        
    EM_PTZ_STATUS_PANOC_FAILED,  
    EM_PTZ_STATUS_TILEOC_FAILED, 
    EM_PTZ_STATUS_OC_FAILED      
} EM_PTZ_STATUS_TYPE;
typedef struct tagALARM_PTZ_DIAGNOSES_INFO
{
    int nChannel;                 
    NET_TIME_EX UTC;              
    EM_PTZ_STATUS_TYPE emPtzStat; 
    BYTE Reserved[512];           
} ALARM_PTZ_DIAGNOSES_INFO;
typedef struct tagALARM_FLASH_LIGHT_FAULT_INFO
{
    double PTS;                      
    NET_TIME_EX UTC;                 
    int nEventAction;                
    int nLightNum;                   
    int nDevID[MAX_FLASH_LIGHT_NUM]; 
    int nLane;                       
    BYTE bReserved[512];             
} ALARM_FLASH_LIGHT_FAULT_INFO;
typedef struct tagALARM_STROBOSCOPIC_LIGTHT_FAULT_INFO
{
    double PTS;                             
    NET_TIME_EX UTC;                        
    int nEventAction;                       
    int nLightNum;                          
    int nDevID[MAX_STROBOSCOPIC_LIGHT_NUM]; 
    int nLane;                              
    BYTE bReserved[512];                    
} ALARM_STROBOSCOPIC_LIGTHT_FAULT_INFO;
typedef enum tagEM_UPPER_LIMIT_TYPE
{
    EM_UPPER_LIMIT_TYPE_UNKNOWN,     
    EM_UPPER_LIMIT_TYPE_ENTER_OVER,  
    EM_UPPER_LIMIT_TYPE_EXIT_OVER,   
    EM_UPPER_LIMIT_TYPE_INSIDE_OVER, 
    EM_UPPER_LIMIT_TYPE_PASS_OVER,   
} EM_UPPER_LIMIT_TYPE;
typedef struct tagALARM_NUMBER_STATISTIC_INFO
{
    double PTS;                           
    NET_TIME_EX UTC;                      
    int nEventAction;                     
    int nNumber;                          
    int nEnteredNumber;                   
    int nExitedNumber;                    
    EM_UPPER_LIMIT_TYPE emUpperLimitType; 
    int nChannelID;                       
    int nPassedNumber;                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE reserved[504];                   
} ALARM_HUMAN_NUMBER_STATISTIC_INFO;
typedef struct tagALARM_VIDEOUNFOCUS_INFO
{
    int nEventAction;                     
    int nChannel;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE reserved[60];                    
} ALARM_VIDEOUNFOCUS_INFO;
typedef enum tagEM_DEFENCEMODE
{
    EM_DEFENCEMODE_UNKNOWN,   
    EM_DEFENCEMODE_ARMING,    
    EM_DEFENCEMODE_DISARMING, 
} EM_DEFENCEMODE;
typedef enum tagEM_ARMMODECHANGE_TRIGGERMODE
{
    EM_ARMMODECHANGE_TRIGGERMODE_UNKNOWN,       
    EM_ARMMODECHANGE_TRIGGERMODE_NET,           
    EM_ARMMODECHANGE_TRIGGERMODE_KEYBOARD,      
    EM_ARMMODECHANGE_TRIGGERMODE_REMOTECONTROL, 
} EM_ARMMODECHANGE_TRIGGERMODE;
typedef enum tagEM_ARMMODECHANGE_DEFENCEAREATYPE
{
    EM_ARMMODECHANGE_DEFENCEAREATYPE_UNKNOWN,       
    EM_ARMMODECHANGE_DEFENCEAREATYPE_INTIME,        
    EM_ARMMODECHANGE_DEFENCEAREATYPE_DELAY,         
    EM_ARMMODECHANGE_DEFENCEAREATYPE_FULLDAY,       
    EM_ARMMODECHANGE_DEFENCEAREATYPE_FOLLOW,        
    EM_ARMMODECHANGE_DEFENCEAREATYPE_MEDICAL,       
    EM_ARMMODECHANGE_DEFENCEAREATYPE_PANIC,         
    EM_ARMMODECHANGE_DEFENCEAREATYPE_FIRE,          
    EM_ARMMODECHANGE_DEFENCEAREATYPE_FULLDAYSOUND,  
    EM_ARMMODECHANGE_DEFENCEAREATYPE_FULLDAYSILENT, 
    EM_ARMMODECHANGE_DEFENCEAREATYPE_ENTRANCE1,     
    EM_ARMMODECHANGE_DEFENCEAREATYPE_ENTRANCE2,     
    EM_ARMMODECHANGE_DEFENCEAREATYPE_INSIDE,        
    EM_ARMMODECHANGE_DEFENCEAREATYPE_OUTSIDE,       
    EM_ARMMODECHANGE_DEFENCEAREATYPE_PEOPLEDETECT,  
} EM_ARMMODECHANGE_DEFENCEAREATYPE;
typedef struct tagALARM_DEFENCE_ARMMODECHANGE_INFO
{
    EM_DEFENCEMODE emDefenceStatus; 
    int nDefenceID;                 
    NET_TIME_EX stuTime;            
    EM_ARMMODECHANGE_TRIGGERMODE emTriggerMode;         
    EM_ARMMODECHANGE_DEFENCEAREATYPE emDefenceAreaType; 
    int nID;                                            
    int nAlarmSubSystem;                                
    char szName[64];                                    
    char szNetClientAddr[64];                           
    BYTE reserved[368]; 
} ALARM_DEFENCE_ARMMODECHANGE_INFO;
typedef enum tagEM_SUBSYSTEMMODE
{
    EM_SUBSYSTEMMODE_UNKNOWN,       
    EM_SUBSYSTEMMODE_ACTIVE,        
    EM_SUBSYSTEMMODE_INACTIVE,      
    EM_SUBSYSTEMMODE_UNDISTRIBUTED, 
    EM_SUBSYSTEMMODE_ALLARMING,     
    EM_SUBSYSTEMMODE_ALLDISARMING,  
    EM_SUBSYSTEMMODE_PARTARMING,    
} EM_SUBSYSTEMMODE;
typedef enum tagEM_SUBSYSTEM_ARMMODECHANGE_TRIGGERMODE
{
    EM_SUBSYSTEM_ARMMODECHANGE_TRIGGERMODE_UNKNOWN,       
    EM_SUBSYSTEM_ARMMODECHANGE_TRIGGERMODE_NET,           
    EM_SUBSYSTEM_ARMMODECHANGE_TRIGGERMODE_KEYBOARD,      
    EM_SUBSYSTEM_ARMMODECHANGE_TRIGGERMODE_REMOTECONTROL, 
} EM_SUBSYSTEM_ARMMODECHANGE_TRIGGERMODE;
typedef struct tagALARM_SUBSYSTEM_ARMMODECHANGE_INFO
{
    EM_SUBSYSTEMMODE emSubsystemMode; 
    NET_TIME_EX UTC;                  
    char szSubSystemname[64];         
    int nSubSystemID;                 
    EM_SUBSYSTEM_ARMMODECHANGE_TRIGGERMODE emTriggerMode; 
    int nID;                                              
    char szNetClientAddr[64];                             
    BYTE reserved[440]; 
} ALARM_SUBSYSTEM_ARMMODECHANGE_INFO;
typedef struct tagALARM_RFID_INFO
{
    int nAction;              
    int nIndex;               
    NET_TIME_EX stuEventTime; 
    int nValidCount;          
    char szRfid[10][12];      
} ALARM_RFID_INFO;
typedef struct tagALARM_SMOKE_DETECTION_INFO
{
    int nAction;         
    char szName[128];    
    double PTS;          
    NET_TIME_EX stuTime; 
    int nChannel;        
    int nEventID;        
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    UINT nCurChannelHFOV;                               
    UINT nCurChannelVFOV;                               
    DH_MSG_OBJECT stuObject;              
    PTZ_SPACE_UNIT stuPtzPosition;        
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char reserved[1024];                  
} ALARM_SMOKE_DETECTION_INFO;
typedef struct tagALARM_PHONECALL_DETECT_INFO
{
    int nAction;         
    char szName[128];    
    BYTE reserved1[4];   
    double PTS;          
    NET_TIME_EX stuTime; 
    int nChannel;        
    int nEventID;        
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;               
    BYTE reserved[128];                                 
} ALARM_PHONECALL_DETECT_INFO;
typedef enum tagNET_EM_EVENT_DATA_TYPE
{
    NET_EN_EVENT_DATA_TYPE_UNKNOWN, 
    NET_EN_EVENT_DATA_TYPE_REAL,    
    NET_EN_EVENT_DATA_TYPE_ALARM,   
} NET_EM_EVENT_DATA_TYPE;
typedef struct tagALARM_FLOATINGOBJECT_DETECTION_INFO
{
    int nAction;       
    BYTE reserved1[4]; 
    char szName[128];  
    double PTS;        
    NET_TIME_EX UTC;   
    int nChannel;      
    int nEventID;      
    int nPresetID;                      
    char szPresetName[64];              
    BOOL bExistFloatingObject;          
    NET_EM_EVENT_DATA_TYPE emEventType; 
    float fCurrentRatio;                
    float fAlarmThreshold;              
    NET_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                                
    BYTE byReserved[1020]; 
} ALARM_FLOATINGOBJECT_DETECTION_INFO;
typedef enum tagNET_EM_WATER_LEVEL_STATUS
{
    NET_EM_WATER_LEVEL_STATUS_UNKNOWN, 
    NET_EM_WATER_LEVEL_STATUS_NORMAL,  
    NET_EM_WATER_LEVEL_STATUS_HIGH,    
    NET_EM_WATER_LEVEL_STATUS_LOW,     
    NET_EM_WATER_LEVEL_STATUS4,        
    NET_EM_WATER_LEVEL_STATUS5,        
    NET_EM_WATER_LEVEL_STATUS6,        
    NET_EM_WATER_LEVEL_STATUS7,        
} NET_EM_WATER_LEVEL_STATUS;
typedef enum tagNET_EM_WATER_RULER_COLOR
{
    NET_EM_WATER_RULER_COLOR_UNKNOW, 
    NET_EM_WATER_RULER_COLOR_BLUE,   
    NET_EM_WATER_RULER_COLOR_RED,    
} NET_EM_WATER_RULER_COLOR;
typedef struct tagNET_WATER_RULER
{
    NET_EM_WATER_RULER_COLOR emRulerColor; 
    char szRulerNum[128];                  
    float fWaterLevel;                     
    BYTE byReserved[512];                  
} NET_WATER_RULER;
typedef struct tagALARM_WATER_LEVEL_DETECTION_INFO
{
    int nAction;                        
    BYTE reserved1[4];                  
    char szName[128];                   
    double PTS;                         
    NET_TIME_EX UTC;                    
    int nChannel;                       
    int nEventID;                       
    int nPresetID;                      
    char szPresetName[64];              
    char szObjectUUID[48];              
    NET_EM_EVENT_DATA_TYPE emEventType; 
    NET_EM_WATER_LEVEL_STATUS emStatus; 
    NET_WATER_RULER stuWaterRuler;      
    BOOL bManual;                       
    BYTE byReserved[1020];              
} ALARM_WATER_LEVEL_DETECTION_INFO;
typedef struct tagALARM_LOW_SPEED_INFO
{
    int nAction;          
    int nChannel;         
    char szName[128];     
    double PTS;           
    NET_TIME_EX UTC;      
    int nEventID;         
    BYTE byReserved[256]; 
} ALARM_LOW_SPEED_INFO;
typedef struct tagALARM_TRAFFIC_VEHICLEINOUT_INFO
{
    int nAction;           
    int nChannel;          
    char szName[128];      
    double PTS;            
    NET_TIME_EX UTC;       
    int nEventID;          
    int nLane;             
    UINT nRoadwayNumber;   
    int nVehicleInOut;     
    BYTE byReserved[1024]; 
} ALARM_TRAFFIC_VEHICLEINOUT_INFO;
typedef struct tagALARM_TAFFIC_JUNCTION_INFO
{
    int nAction;             
    int nChannelID;          
    char szName[128];        
    BYTE byMainSeatBelt;     
    BYTE bySlaveSeatBelt;    
    BYTE byVehicleDirection; 
    BYTE byOpenStrobeState;  
    BYTE byReserved1[4];     
    double PTS;              
    NET_TIME_EX UTC;         
    int nEventID;            
    DH_MSG_OBJECT stuObject; 
    int nLane;               
    DWORD dwBreakingRule;    
    NET_TIME_EX RedLightUTC;                  
    DH_EVENT_FILE_INFO stuFileInfo;           
    int nSequence;                            
    int nSpeed;                               
    BYTE byDirection;                         
    BYTE byLightState;                        
    BYTE byReserved2;                         
    BYTE byImageIndex;                        
    DH_MSG_OBJECT stuVehicle;                 
    DWORD dwSnapFlagMask;                     
    DH_RESOLUTION_INFO stuResolution;         
    char szRecordFile[DH_COMMON_STRING_128];  
    EVENT_JUNCTION_CUSTOM_INFO stuCustomInfo; 
    BYTE byPlateTextSource;                   
    BYTE byReserved3[3];                      
    NET_GPS_INFO stuGPSInfo;                  
    BYTE byNoneMotorInfo; 
    BYTE byBag;                       
    BYTE byUmbrella;                  
    BYTE byCarrierBag;                
    BYTE byHat;                       
    BYTE byHelmet;                    
    BYTE bySex;                       
    BYTE byAge;                       
    NET_COLOR_RGBA stuUpperBodyColor; 
    NET_COLOR_RGBA stuLowerBodyColor; 
    BYTE byUpClothes;                 
    BYTE byDownClothes;               
    NET_EXTENSION_INFO stuExtensionInfo;                
    BYTE byReserved4[22];                               
    int nTriggerType;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;     
    DWORD dwRetCardNumber;                              
    EVENT_CARD_INFO stuCardInfo[DH_EVENT_MAX_CARD_NUM]; 
    EVENT_COMM_INFO stCommInfo;                         
    BOOL bNonMotorInfoEx;                 
    VA_OBJECT_NONMOTOR stuNonMotor;       
    EM_TRACK_CAR_STATUS emTrackCarStatus; 
    char szSerialNo[128];                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[852];                 
} ALARM_TAFFIC_JUNCTION_INFO;
typedef struct tagALARM_DOOR_CONTROL_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    EM_OPEN_DOOR_METHOD emOpenDoorMethod; 
    EM_OPEN_DOOR_STATE emOpenDoorState;   
    char szSourceID[32];                  
    BYTE byReserved[1024];                
} ALARM_DOOR_CONTROL_INFO;
typedef enum tagNET_EM_ARM_STATUS
{
    EM_ARM_STATUS_UNKNOWN,   
    EM_ARM_STATUS_DELAY,     
    EM_ARM_STATUS_ARMING,    
    EM_ARM_STATUS_DISARMING, 
} NET_EM_ARM_STATUS;
typedef struct tagALARM_ARMSTATE_INFO
{
    int nChannelID;             
    int nAction;                
    char szName[128];           
    double PTS;                 
    NET_TIME_EX UTC;            
    UINT nEventID;              
    NET_EM_ARM_STATUS emStatus; 
} ALARM_ARMSTATE_INFO;
typedef struct tagALARM_LAW_ENFORCEMENT_INFO
{
    int nAction;                      
    NET_GPS_STATUS_INFO stuGPSStatus; 
    char szUserID[32];                
    char szUserName[128];             
    BYTE byRserved[4];                
} ALARM_LAW_ENFORCEMENT_INFO;
typedef struct tagALARM_CONGESTION_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    char szName[128];                     
    double PTS;                           
    NET_TIME_EX UTC;                      
    DH_EVENT_FILE_INFO stuFileInfo;       
    EM_CLASS_TYPE emClassType;            
    UINT nEventID;                        
    UINT nRuleID;                         
    int nPresetID;                        
    char szPresetName[64];                
    UINT nAlarmMask;                      
    UINT nVehicleQuantity;                
    UINT nQueueLength;                    
    int nDetectRegionNum;                 
    DH_POINT stuDetectRegion[32];         
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_CONGESTION_DETECTION_INFO;
typedef enum tagEM_SPACE_TYPE
{
    EM_SPACE_TYPE_UNKNOWN = -1,        
    EM_SPACE_TYPE_CAR,                 
    EM_SPACE_TYPE_BIG_CAR,             
    EM_SPACE_TYPE_HAZARDOUS_CHEMICALS, 
    EM_SPACE_TYPE_TRUCK,               
    EM_SPACE_TYPE_SMALL_TRUCK,         
    EM_SPACE_TYPE_BUS,                 
} EM_SPACE_TYPE;
typedef struct tagNET_AREA_MODE_INFO
{
    char szName[32];           
    UINT nCount;               
    EM_SPACE_TYPE emSpaceType; 
    int nRemainCnt;            
    BYTE byReserved[252];      
} NET_AREA_MODE_INFO;
typedef struct tagALARM_VEHICLELIMIT_DETECTION_INFO
{
    int nChannelID;                         
    int nAction;                            
    char szName[128];                       
    double PTS;                             
    NET_TIME_EX UTC;                        
    DH_EVENT_FILE_INFO stuFileInfo;         
    EM_CLASS_TYPE emClassType;              
    UINT nEventID;                          
    UINT nRuleID;                           
    int nPresetID;                          
    char szPresetName[64];                  
    UINT nVehicleQuantity;                  
    int nDetectRegionNum;                   
    DH_POINT stuDetectRegion[32];           
    int nAreaModeInfoNum;                   
    NET_AREA_MODE_INFO stuAreaModeInfo[20]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
    BYTE byReserved[1024];                  
} ALARM_VEHICLELIMIT_DETECTION_INFO;
typedef struct tagLAMP_GPS_INFO
{
    DWORD dwLatitude;    
    DWORD dwLongitude;   
    int nNumOfSatellite; 
    BYTE byReserved[4];  
} LAMP_GPS_INFO;
typedef enum tagEM_IS_OFF_LINE
{
    EM_IS_OFF_LINE_UNKNOWN = -1, 
    EM_IS_OFF_LINE_NORMAL,       
    EM_IS_OFF_LINE_EXCEPTION,    
} EM_IS_OFF_LINE;
typedef enum tagEM_IS_VOLTAGE_FAULT
{
    EM_IS_VOLTAGE_FAULT_UNKNOWN = -1, 
    EM_IS_VOLTAGE_FAULT_NORMAL,       
    EM_IS_VOLTAGE_FAULT_EXCEPTION,    
} EM_IS_VOLTAGE_FAULT;
typedef enum tagEM_IS_CURRENT_FAULT
{
    EM_IS_CURRENT_FAULT_UNKNOWN = -1, 
    EM_IS_CURRENT_FAULT_NORMAL,       
    EM_IS_CURRENT_FAULT_EXCEPTION,    
} EM_IS_CURRENT_FAULT;
typedef enum tagEM_BRIGHT_STATE
{
    EM_BRIGHT_STATE_UNKNOWN = -1, 
    EM_BRIGHT_STATE_OFF,          
    EM_BRIGHT_STATE_ON,           
} EM_BRIGHT_STATE;
typedef enum tagEM_LAMP_STATUS_WORK_MODE
{
    EM_LAMP_STATUS_WORK_MODE_UNKNOWN,                
    EM_LAMP_STATUS_WORK_MODE_DHRS_STROBOSCOPIC_LAMP, 
    EM_LAMP_STATUS_WORK_MODE_DHRS_STEADY_LAMP,       
    EM_LAMP_STATUS_WORK_MODE_DHRS_FLASH_LAMP,        
} EM_LAMP_STATUS_WORK_MODE;
typedef enum tagEM_STROBOSCOPIC_MODE
{
    EM_STROBOSCOPIC_MODE_UNKNOWN = -1, 
    EM_STROBOSCOPIC_MODE_ACTIVE,       
    EM_STROBOSCOPIC_MODE_PASSIVE,      
} EM_STROBOSCOPIC_MODE;
typedef struct tagSTROBOSCOPIC_LAMP_PARAM
{
    EM_STROBOSCOPIC_MODE emStroboscopicMode; 
    UINT nStayTime;                          
    UINT nFrequency;                         
    UINT nBrightLevel;                       
    UINT nPulseWidth;                        
    BYTE byReserved[36];                     
} STROBOSCOPIC_LAMP_PARAM;
typedef enum tagEM_TRIGGER_MODE
{
    EM_TRIGGER_MODE_UNKNOWN = -1, 
    EM_TRIGGER_MODE_EDGE,         
    EM_TRIGGER_MODE_PWM,          
} EM_TRIGGER_MODE;
typedef struct tagFLASH_LAMP_PARAM
{
    EM_TRIGGER_MODE emTriggerMode;   
    UINT nTriggerCount;              
    UINT nFlashCount;                
    UINT nPulseWidth;                
    UINT nPulseWidthDetectThreshold; 
    UINT nErrorDetectThreshold;      
    BYTE byReserved[32];             
} FLASH_LAMP_PARAM;
typedef struct tagSTEADY_LAMP_PARAM
{
    UINT nBrightLevel;   
    BYTE byReserved[60]; 
} STEADY_LAMP_PARAM;
typedef struct tagLAMP_STATUS_INFO
{
    UINT nPort;                                       
    UINT nAddress;                                    
    char szSoftwareVersion[128];                      
    char szDeviceID[32];                              
    LAMP_GPS_INFO stuGPS;                             
    EM_IS_OFF_LINE emIsOffline;                       
    EM_IS_VOLTAGE_FAULT emIsVoltageFault;             
    EM_IS_CURRENT_FAULT emIsCurrentFault;             
    EM_BRIGHT_STATE emBrightState;                    
    UINT nPower;                                      
    UINT nTemperature;                                
    UINT nPhotoSensitivity;                           
    UINT nAmbientBrightnessThreshold;                 
    EM_LAMP_STATUS_WORK_MODE emWorkMode;              
    STROBOSCOPIC_LAMP_PARAM stuStroboscopicLampParam; 
    FLASH_LAMP_PARAM stuFlashLampParam;               
    STEADY_LAMP_PARAM stuSteadyLampParam;             
    BYTE byReserved[64];                              
} LAMP_STATUS_INFO;
typedef struct tagALARM_TRAFFIC_LAMP_WORK_STATE_INFO
{
    NET_TIME_EX UTC;                   
    UINT nUTCMS;                       
    int nChannelID;                    
    int nLampStatusNum;                
    LAMP_STATUS_INFO stuLampStatus[8]; 
    BYTE byReserved[256];              
} ALARM_TRAFFIC_LAMP_WORK_STATE_INFO;
typedef struct tagALARM_TRAFFIC_PARKING_TIMEOUT_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    NET_TIME_EX UTC;                                 
    NET_TIME stuInParkTime;                          
    NET_TIME stuOutParkTime;                         
    UINT nParkingTime;                               
    BYTE byReserved[1024];                           
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
} ALARM_TRAFFIC_PARKING_TIMEOUT_INFO;
typedef struct tagALARM_TICKET_INFO_REPORT
{
    int nChannelID;            
    int nAction;               
    double PTS;                
    NET_TIME_EX UTC;           
    int nEventID;              
    int nOpenFlag;             
    BYTE byReserved[4];        
    char szPassengerName[256]; 
    char szCitizenID[32];      
    NET_TIME stuDriveTime;     
    char szDestination[256];   
    char szScheduleID[64];     
} ALARM_TICKET_INFO_REPORT;
typedef enum tagEM_MASK_DETECT_RESULT_TYPE
{
    EM_MASK_DETECT_TYPE_UNKNOWN,   
    EM_MASK_DETECT_TYPE_NO_MASK,   
    EM_MASK_DETECT_TYPE_WEAR_MASK, 
} EM_MASK_DETECT_RESULT_TYPE;
typedef struct tagNET_MAN_TEMP_INFO
{
    UINT nObjectID;                                
    NET_RECT stRect;                               
    double dbHighTemp;                             
    UINT nTempUnit;                                
    BOOL bIsOverTemp;                              
    BOOL bIsUnderTemp;                             
    UINT nOffset;                                  
    UINT nLength;                                  
    EM_MASK_DETECT_RESULT_TYPE emMaskDetectResult; 
    NET_RECT stThermalRect;                        
    UINT nAge;                                     
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;        
    UINT nIndexInData;                             
    BYTE byReserved[32];                           
} NET_MAN_TEMP_INFO;
typedef struct tagALARM_ANATOMY_TEMP_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    UINT nPresetID;                       
    NET_MAN_TEMP_INFO stManTempInfo;      
    UINT nSequence;                       
    UINT nEventRelevanceID;               
    BOOL bIsFaceRecognition;              
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1020];                
} ALARM_ANATOMY_TEMP_DETECT_INFO;
typedef struct tagALARM_REGULATOR_ABNORMAL_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    char szTypes[MAX_COMMON_STRING_32];   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_REGULATOR_ABNORMAL_INFO;
typedef struct tagNET_DHOP_APP_INFO
{
    char szAppName[128];   
    char szAppVersion[64]; 
    BYTE byReserved[1024]; 
} NET_DHOP_APP_INFO;
typedef struct tagALARM_DHOP_CUSTOM_INFO
{
    int nChannelID;               
    int nAction;                  
    char szName[128];             
    NET_TIME_EX UTC;              
    int nEventID;                 
    int nSourceIndex;             
    BYTE byReserved1[4];          
    NET_DHOP_APP_INFO stuAppInfo; 
    char szCustomData[4096];      
    double PTS;                   
    BYTE byReserved[2040];        
} ALARM_DHOP_CUSTOM_INFO;
typedef enum tagEM_TRFAFFIC_LIGHT_SOURCE
{
    EM_TRFAFFIC_LIGHT_SOURCE_UNKNOWN = 0, 
    EM_TRFAFFIC_LIGHT_SOURCE_SIGNAL,      
    EM_TRFAFFIC_LIGHT_SOURCE_DSP,         
    EM_TRFAFFIC_LIGHT_SOURCE_NET_SIGNAL,  
} EM_TRFAFFIC_LIGHT_SOURCE;
typedef enum tagEM_TRFAFFIC_LIGHT_TYPE
{
    EM_TRFAFFIC_LIGHT_TYPE_UNKNOWN = 0, 
    EM_TRFAFFIC_LIGHT_TYPE_RED,         
    EM_TRFAFFIC_LIGHT_TYPE_YELLOW,      
    EM_TRFAFFIC_LIGHT_TYPE_GREEN,       
} EM_TRFAFFIC_LIGHT_TYPE;
typedef struct tagNET_LIGHTPERIODS_INFO
{
    EM_TRFAFFIC_LIGHT_TYPE emType; 
    int nStraight;                 
    int nTurnLeft;                 
    int nTurnRight;                
    int nUTurn;                    
    BYTE byReserved[60];           
} NET_LIGHTPERIODS_INFO;
typedef struct tatNET_TRAFFIC_LIGHT_STATE
{
    NET_TRAFFIC_LIGHT_STATUS emStraightLightInfo;  
    NET_TRAFFIC_LIGHT_STATUS emTurnLeftLightInfo;  
    NET_TRAFFIC_LIGHT_STATUS emTurnRightLightInfo; 
    NET_TRAFFIC_LIGHT_STATUS emUTurnLightInfo;     
    BYTE byReserved[64];                           
} NET_TRAFFIC_LIGHT_STATE;
typedef struct tagALARM_TRAFFIC_LIGHT_STATE_INFO
{
    int nChannelID;                            
    int nAction;                               
    char szName[128];                          
    double PTS;                                
    NET_TIME_EX UTC;                           
    int nEventID;                              
    int nSource;                               
    int nFrameSequence;                        
    EM_TRFAFFIC_LIGHT_SOURCE emLightSource;    
    int nLightPeriodsNum;                      
    NET_LIGHTPERIODS_INFO stuLightPeriods[4];  
    NET_TRAFFIC_LIGHT_STATE stuLightStates[8]; 
    int nLightStateNum;                        
    BYTE byReserved[1020];                     
} ALARM_TRAFFIC_LIGHT_STATE_INFO;
typedef enum tagEM_SWIPCARD_DEVICE_BUSINESS_TYPE
{
    EM_SWIPCARD_DEVICE_BUSINESS_TYPE_UNKNOWN = 0,  
    EM_SWIPCARD_DEVICE_BUSINESS_TYPE_FINGER_PRINT, 
    EM_SWIPCARD_DEVICE_BUSINESS_TYPE_CLEARCAR,     
} EM_SWIPCARD_DEVICE_BUSINESS_TYPE;
typedef enum tagEM_SWIPCARD_DEVICE_STATUS
{
    EM_SWIPCARD_DEVICE_STATUS_UNKNOWN = 0, 
    EM_SWIPCARD_DEVICE_STATUS_NORMAL,      
    EM_SWIPCARD_DEVICE_STATUS_FAILURE,     
} EM_SWIPCARD_DEVICE_STATUS;
typedef struct tagNET_SWIPCARD_DEVICE_INFO
{
    EM_SWIPCARD_DEVICE_BUSINESS_TYPE emBusinessType; 
    EM_SWIPCARD_DEVICE_STATUS emStatus;              
    BYTE byReserved[1016];                           
} NET_SWIPCARD_DEVICE_INFO;
typedef struct tagALARM_SWIPCARD_STATUS_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    NET_TIME_EX UTC;  
    int nEventID;     
    NET_TIME stuCurrentTime;                
    NET_SWIPCARD_DEVICE_INFO stuDevices[5]; 
    int nDeviceNum;                         
    BYTE byReserved[2044];                  
} ALARM_SWIPCARD_STATUS_INFO;
typedef enum tagEM_AUDIOHOST_CHNL_STATE
{
    EM_AUDIOHOST_CHNL_STATE_UNKNOWN = 0, 
    EM_AUDIOHOST_CHNL_STATE_NORMAL,      
    EM_AUDIOHOST_CHNL_STATE_MUTE,        
    EM_AUDIOHOST_CHNL_STATE_FAULT,       
} EM_AUDIOHOST_CHNL_STATE;
typedef struct tagALARM_AUDIOHOST_STATE_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    NET_TIME_EX UTC;  
    int nEventID;     
    int nAudioChannel;               
    EM_AUDIOHOST_CHNL_STATE emState; 
    BYTE byReserved[2048];           
} ALARM_AUDIOHOST_STATE_INFO;
typedef enum TagEM_PATIENTDETECTION_TYPE
{
    EM_PATIENTDETECTION_TYPE_UNKNOWN,         
    EM_PATIENTDETECTION_TYPE_CROSS_REGION,    
    EM_PATIENTDETECTION_TYPE_LIGHT_OFF,       
    EM_PATIENTDETECTION_TYPE_STOP_DETECTION,  
    EM_PATIENTDETECTION_TYPE_START_DETECTION, 
    EM_PATIENTDETECTION_TYPE_ESCAPE,          
    EM_PATIENTDETECTION_TYPE_ESCAPE_RELEASE,  
} EM_PATIENTDETECTION_TYPE;
typedef struct tagALARM_PATIENTDETECTION_INFO
{
    BYTE bEventAction;                        
    NET_TIME stuTime;                         
    EM_PATIENTDETECTION_TYPE emDetectionType; 
    BYTE byReserved[256];                     
} ALARM_PATIENTDETECTION_INFO;
typedef struct tagALARM_RADAR_HIGH_SPEED_INFO
{
    NET_TIME_EX stuTime;    
    float fSpeed;           
    char szPlateNumber[16]; 
    BOOL bRealUTC;          
    NET_TIME_EX RealUTC;    
    BYTE byReserved[958];   
} ALARM_RADAR_HIGH_SPEED_INFO;
typedef enum TagEM_POLLING_ALARM_DEV_STATE
{
    EM_POLLING_ALARM_DEV_STATE_UNKNOWN = -1,  
    EM_POLLING_ALARM_DEV_STATE_ABNORMAL,      
    EM_POLLING_ALARM_DEV_STATE_NORMAL,        
    EM_POLLING_ALARM_DEV_STATE_NOT_INSPECTED, 
} EM_POLLING_ALARM_DEV_STATE;
typedef struct tagNET_POLLING_ALARM_DEV_STATE
{
    EM_POLLING_ALARM_DEV_STATE emSupplyLight; 
    EM_POLLING_ALARM_DEV_STATE emKeyboard;    
    EM_POLLING_ALARM_DEV_STATE emCard;        
    EM_POLLING_ALARM_DEV_STATE emScreen;      
    EM_POLLING_ALARM_DEV_STATE emVoice;       
    EM_POLLING_ALARM_DEV_STATE emCamera;      
    char szReserved[128];                     
} NET_POLLING_ALARM_DEV_STATE;
typedef struct tagALARM_POLLING_ALARM_INFO
{
    NET_TIME_EX stuTime;                        
    BOOL bRealUTC;                              
    NET_TIME_EX RealUTC;                        
    char szPollingID[64];                       
    char szSN[64];                              
    NET_POLLING_ALARM_DEV_STATE stuDeviceState; 
    BYTE byReserved[694];                       
} ALARM_POLLING_ALARM_INFO;
typedef struct tagALARM_PASTE_DETECTION_INFO
{
    int nChannelID;                                     
    char szName[128];                                   
    double PTS;                                         
    NET_TIME_EX UTC;                                    
    DH_MSG_OBJECT stuObject;                            
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DH_MSG_HANDLE_EX stuEventHandler;                   
    BYTE bEventAction;                                  
    BYTE bReserved[1023];                               
} ALARM_PASTE_DETECTION_INFO;
typedef struct tagALARM_BETWEENRULE_DIFFTEMPER_INFO
{
    int nAction;                                
    int nOsdId;                                 
    int nChannelID;                             
    NET_RADIOMETRY_ALARMCONTION emAlarmContion; 
    int nRuleId1;                               
    int nRuleId2;                               
    float fDiffValue;                           
    int nTemperatureUnit;                       
    UINT nPresetID;                             
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    BYTE reserved[128];                         
} ALARM_BETWEENRULE_DIFFTEMPER_INFO;
typedef struct tagALARM_HOTSPOT_WARNING_INFO
{
    int nAction;                          
    int nChannelID;                       
    DH_POINT stuCoordinate;               
    float fHotSpotValue;                  
    int nTemperatureUnit;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_HOTSPOT_WARNING_INFO;
typedef struct tagALARM_COLDSPOT_WARNING_INFO
{
    int nAction;                          
    int nChannelID;                       
    DH_POINT stuCoordinate;               
    float fColdSpotValue;                 
    int nTemperatureUnit;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
} ALARM_COLDSPOT_WARNING_INFO;
typedef struct tagALARM_FLOW_METER_INFO
{
    DWORD dwSize;
    float fInstantRate;         
    float fInstantFlow;         
    float fTotalFlow;           
    float fCurDayFlow;          
    UINT unCurDayWorkingTime;   
    UINT unTotalWorktingTime;   
    NET_GPS_STATUS_INFO stuGPS; 
    float fCurTemp;             
} ALARM_FLOW_METER_INFO;
typedef enum tagEM_BUF_DROP_FRAME_TYPE
{
    EM_BUF_DROP_FRAME_UNKOWN = 0,  
    EM_BUF_DROP_FRAME_DEVBUF,      
    EM_BUF_DROP_FRAME_EXTBUF,      
    EM_BUF_DROP_FRAME_NETBUF,      
    EM_BUF_DROP_FRAME_EXTRA1NETBUF 
} EM_BUF_DROP_FRAME_TYPE;
typedef struct tagALARM_BUF_DROP_FRAME_INFO
{
    int nAction;                            
    EM_BUF_DROP_FRAME_TYPE emDropFrameType; 
    BYTE reserved[1024];                    
} ALARM_BUF_DROP_FRAME_INFO;
typedef struct tagALARM_DCSSWITCH_INFO
{
    int nAction;                          
    char strMasterIP[32];                 
    char strSlaveIP[32];                  
    NET_TIME_EX stuStartTime;             
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE reserved[1024];                  
} ALARM_DCSSWITCH_INFO;
typedef struct tagALARM_DOUBLE_DEV_VERSION_ABNORMAL_INFO
{
    int nAction;                          
    char strMasterVer[64];                
    char strSlaveVer[64];                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE reserved[1024];                  
} ALARM_DOUBLE_DEV_VERSION_ABNORMAL_INFO;
typedef enum tagEM_RADAR_CONNECT_STATE
{
    EM_RADAR_CONNECT_STATE_UNKNOWN,   
    EM_RADAR_CONNECT_STATE_NORMAL,    
    EM_RADAR_CONNECT_STATE_EXCEPTION, 
} EM_RADAR_CONNECT_STATE;
typedef struct tagALARM_RADAR_CONNECT_STATE_INFO
{
    EM_RADAR_CONNECT_STATE emRadarConnectState; 
    BYTE reserved[1024];                        
} ALARM_RADAR_CONNECT_STATE_INFO;
typedef enum tagEM_HIGHTOSS_ACTION_TYPE
{
    EM_HIGHTOSS_ACTION_UNKNOWN,   
    EM_HIGHTOSS_ACTION_APPEAR,    
    EM_HIGHTOSS_ACTION_MOVE,      
    EM_HIGHTOSS_ACTION_STAY,      
    EM_HIGHTOSS_ACTION_REMOVE,    
    EM_HIGHTOSS_ACTION_DISAPPEAR, 
    EM_HIGHTOSS_ACTION_SPLIT,     
    EM_HIGHTOSS_ACTION_MERGE,     
    EM_HIGHTOSS_ACTION_RENAME,    
} EM_HIGHTOSS_ACTION_TYPE;
typedef struct tagNET_EVENT_STARTPOINT
{
    NET_POINT stuBelongBox[4]; 
    char szBoxInfo[64];        
    NET_POINT stuPoint;        
    BYTE byReserved[260];      
} NET_EVENT_STARTPOINT;
typedef struct tagNET_HIGHTOSS_OBJECT_INFO
{
    UINT nObjectID;                           
    EM_HIGHTOSS_ACTION_TYPE emObjAction;      
    NET_RECT stuBoundingBox;                  
    UINT nConfidence;                         
    EM_ANALYSE_OBJECT_TYPE emObjectType;      
    DH_POINT stuCenter;                       
    NET_EVENT_IMAGE_OFFSET_INFO stuImageInfo; 
    NET_EVENT_STARTPOINT stuStartPoint;       
    BYTE byReserved[1172];                    
} NET_HIGHTOSS_OBJECT_INFO;
typedef struct tagALARM_HIGH_TOSS_DETECT_INFO
{
    int nChannelID;      
    int nAction;         
    double PTS;          
    NET_TIME_EX UTC;     
    BYTE byReserved1[4]; 
    int nEventID;        
    UINT nObjNum;                             
    NET_HIGHTOSS_OBJECT_INFO stuObjInfos[50]; 
    BYTE byReserved[1024];                    
} ALARM_HIGH_TOSS_DETECT_INFO;
typedef enum tagEM_HARD_DISK_ABNORMAL_REASON
{
    EM_HARD_DISK_ABNORMAL_REASON_UNKNOWN,             
    EM_HARD_DISK_ABNORMAL_REASON_TEMPERATURE_HIGH,    
    EM_HARD_DISK_ABNORMAL_REASON_HARD_DRIVE_ABNORMAL, 
    EM_HARD_DISK_ABNORMAL_REASON_ABOUT_TO_ERROR,      
} EM_HARD_DISK_ABNORMAL_REASON;
typedef struct tagHARD_DISK_DEVICE_INFO
{
    char szName[32];                                       
    EM_HARD_DISK_ABNORMAL_REASON emHardDiskAbnormalReason; 
    BYTE byReserved[252];                                  
} HARD_DISK_DEVICE_INFO;
typedef struct tagALARM_STORAGE_HEALTH_ABNORMAL_INFO
{
    int nChannelID;      
    int nAction;         
    char szName[128];    
    double PTS;          
    NET_TIME_EX UTC;     
    BYTE byReserved1[4]; 
    UINT nEventID;       
    int nDeviceNum;                          
    HARD_DISK_DEVICE_INFO stuDeviceInfo[16]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;    
    BYTE byReserved[1024];                   
} ALARM_STORAGE_HEALTH_ABNORMAL_INFO;
typedef struct tagALARM_CLEAR_CAR_INFO
{
    int nChannelID;        
    int nAction;           
    NET_TIME_EX UTC;       
    BYTE byReserved[1020]; 
} ALARM_CLEAR_CAR_INFO;
typedef enum tagEM_MARKFILE_MODE
{
    EM_MARK_FILE_BY_TIME_MODE, 
    EM_MARK_FILE_BY_NAME_MODE, 
} EM_MARKFILE_MODE;
typedef enum tagEM_MARKFILE_NAMEMADE_TYPE
{
    EM_MARKFILE_NAMEMADE_DEFAULT, 
    EM_MARKFILE_NAMEMADE_JOINT,   
} EM_MARKFILE_NAMEMADE_TYPE;
typedef struct tagNET_IN_SET_MARK_FILE
{
    DWORD dwSize;                                 
    EM_MARKFILE_MODE emLockMode;                  
    EM_MARKFILE_NAMEMADE_TYPE emFileNameMadeType; 
    int nChannelID;                               
    char szFilename[MAX_PATH];                    
    unsigned int nFramenum;                       
    unsigned int nSize;                           
    NET_TIME stuStartTime;                        
    NET_TIME stuEndTime;                          
    unsigned int nDriveNo;                        
    unsigned int nStartCluster;                   
    BYTE byRecordFileType;                        
    BYTE byImportantRecID;                        
    BYTE byHint;                                  
    BYTE byRecType;                               
    UINT nLockTime;                               
} NET_IN_SET_MARK_FILE;
typedef struct tagNET_OUT_SET_MARK_FILE
{
    DWORD dwSize;
} NET_OUT_SET_MARK_FILE;
typedef struct tagNET_IN_SET_MARK_FILE_BY_TIME
{
    DWORD dwSize;
    int nChannel;             
    NET_TIME_EX stuStartTime; 
    NET_TIME_EX stuEndTime;   
    BOOL bFlag;               
    BOOL bLockTimeFlag;       
    UINT nLockTime;           
} NET_IN_SET_MARK_FILE_BY_TIME;
typedef struct tagNET_OUT_SET_MARK_FILE_BY_TIME
{
    DWORD dwSize;
} NET_OUT_SET_MARK_FILE_BY_TIME;
typedef struct tagNET_IN_GET_MARK_INFO
{
    DWORD dwSize;
} NET_IN_GET_MARK_INFO;
typedef struct tagNET_OUT_GET_MARK_INFO
{
    DWORD dwSize;
    int nTotalSpace; 
    int nMarkSpace;  
} NET_OUT_GET_MARK_INFO;
typedef struct tagNET_IN_CLEAR_REPEAT_ENTER
{
    char szCardNO[DH_MAX_CARDINFO_LEN]; 
    BYTE bReserved[1024];
} NET_IN_CLEAR_REPEAT_ENTER;
typedef struct tagNET_OUT_CLEAR_REPEAT_ENTER
{
    BYTE bReserved[1024];
} NET_OUT_CLEAR_REPEAT_ENTER;
typedef struct tagALARM_RECORD_LOSS_INFO
{
    int nChannelID;                  
    int nEventAction;                
    char szIP[DH_MAX_IPADDR_LEN_EX]; 
    int nPort;                       
    BYTE byReserved[1024];           
} ALARM_RECORD_LOSS_INFO;
typedef struct tagALARM_VIDEO_FRAME_LOSS_INFO
{
    int nChannelID;                  
    int nEventAction;                
    char szIP[DH_MAX_IPADDR_LEN_EX]; 
    int nPort;                       
    BYTE byReserved[1024];           
} ALARM_VIDEO_FRAME_LOSS_INFO;
typedef struct tagALARM_RECORD_VOLUME_FAILURE_INFO
{
    int nChannelID;        
    int nEventAction;      
    BYTE byReserved[1024]; 
} ALARM_RECORD_VOLUME_FAILURE_INFO;
typedef struct tagEVENT_SNAP_UPLOAD_INFO
{
    int nChannelID;            
    int nEventAction;          
    BOOL bSnapResult;          
    char szFilePath[MAX_PATH]; 
    BYTE byReserved[1024];     
} EVENT_SNAP_UPLOAD_INFO;
typedef struct tagALARM_UPLOADPIC_FAILCOUNT_INFO
{
    int nFailCount;        
    BYTE byReserved[1024]; 
} ALARM_UPLOADPIC_FAILCOUNT_INFO;
typedef struct tagALARM_HUMAN_INSIDE_INFO
{
    int nChannelID;        
    int nEventAction;      
    int nHumanNumber;      
    NET_TIME stuUtcTime;   
    BYTE byReserved[1000]; 
} ALARM_HUMAN_INSIDE_INFO;
typedef struct tagALARM_HUMAN_TUMBLE_INSIDE_INFO
{
    int nChannelID;        
    int nEventAction;      
    NET_TIME stuUtcTime;   
    BYTE byReserved[1000]; 
} ALARM_HUMAN_TUMBLE_INSIDE_INFO;
typedef struct tagALARM_DISABLE_LOCKIN_INFO
{
    int nChannelID;        
    NET_TIME stuUtcTime;   
    BYTE byReserved[1000]; 
} ALARM_DISABLE_LOCKIN_INFO;
typedef struct tagALARM_DISABLE_LOCKOUT_INFO
{
    int nChannelID;        
    NET_TIME stuUtcTime;   
    BYTE byReserved[1000]; 
} ALARM_DISABLE_LOCKOUT_INFO;
typedef struct tagNET_IN_GET_OPERATOR_NAME
{
    BYTE byReserved[1024]; 
} NET_IN_GET_OPERATOR_NAME;
typedef struct tagNET_OUT_GET_OPERATOR_NAME
{
    char szOpearatorName[DH_COMMON_STRING_64]; 
    BYTE byReserved[1024];                     
} NET_OUT_GET_OPERATOR_NAME;
typedef struct tagNET_IN_GET_SELTCHECK_INFO
{
    DWORD dwSize; 
} NET_IN_GET_SELTCHECK_INFO;
typedef struct tagDEV_EVENT_ALARM_PTZ_PRESET_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    char szPresetName[PTZ_PRESET_NAME_LEN]; 
    PTZ_SPEED_UNIT stuPos;                  
    int nPresetID;                          
    BYTE bReserved[1024];                   
} DEV_EVENT_ALARM_PTZ_PRESET_INFO;
typedef struct tagDEV_EVENT_ALARM_RFID_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;          
    int nValidCount;      
    char szRfid[10][12];  
    BYTE bReserved[1024]; 
} DEV_EVENT_ALARM_RFID_INFO;
typedef struct tagNET_CAR_WEIGTH_INFO
{
    unsigned int nAxleNum;                            
    unsigned int nMaxAxleDistance;                    
    unsigned int nAxleWeightInfo[MAX_AXLE_NUM];       
    unsigned int nAxleDistanceInfo[MAX_AXLE_NUM - 1]; 
    unsigned int nOverWeight;                         
    unsigned int nTotalWeight;                        
    unsigned int nAxisType;                           
    UINT nSpeed;                                      
    BYTE byReserved[500];                             
} NET_CAR_WEIGHT_INFO;
typedef struct tagDEV_EVENT_QSYTRAFFICCARWEIGHT_INFO
{
    NET_CAR_WEIGHT_INFO stCarWeightInfo;           
    DEV_EVENT_TRAFFICJUNCTION_INFO stJunctionInfo; 
} DEV_EVENT_QSYTRAFFICCARWEIGHT_INFO;
typedef struct tagNET_PLATE_INFO
{
    char szFrontPlateNumber[DH_MAX_PLATE_NUMBER_LEN]; 
    EM_NET_PLATE_COLOR_TYPE emFrontPlateColor;        
    char szBackPlateNumber[DH_MAX_PLATE_NUMBER_LEN];  
    EM_NET_PLATE_COLOR_TYPE emBackPlateColor;         
    BYTE bReserved[1024];                             
} NET_PLATE_INFO;
typedef struct tagNET_SNAP_TIME_INFO
{
    NET_TIME_EX stFrontGateSnapTime; 
    NET_TIME_EX stBackGateSnapTime;  
    BYTE bReserved[128];             
} NET_SNAP_TIME_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_COMPAREPLARE_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    double dbPTS;                   
    NET_TIME_EX stuUTC;             
    int nEventID;                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DH_EVENT_FILE_INFO stuFileInfo;                 
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nSpeed;                                     
    int nLane;                                      
    int nSequence;                                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    NET_PLATE_INFO stuPlateInfo;                    
    EVENT_COMM_INFO stCommInfo;                     
    DWORD dwSnapFlagMask;                           
    NET_SNAP_TIME_INFO stSnapTimeInfo; 
    BYTE bReserved[820];               
} DEV_EVENT_TRAFFIC_COMPAREPLATE_INFO;
typedef struct tagDEV_EVENT_SHOOTING_SCORE_RECOGNITION_INFO
{
    int nChannelID;                                                
    char szName[DH_EVENT_NAME_LEN];                                
    double dbPTS;                                                  
    NET_TIME_EX stuUTC;                                            
    int nEventID;                                                  
    DH_EVENT_FILE_INFO stuFileInfo;                                
    BYTE bEventAction;                                             
    DH_POINT stuDetectRegion;                                      
    int nValidBulletHolesNum;                                      
    NET_BULLET_HOLES_INFO stuBulletHolesInfo[DH_MAX_BULLET_HOLES]; 
    BYTE byImageIndex;                                             
    DWORD dwSnapFlagMask;                                          
    BYTE bReserved[1024];                                          
} DEV_EVENT_SHOOTING_SCORE_RECOGNITION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_TRANSFINITE_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    double dbPTS;                   
    NET_TIME_EX stuUTC;             
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    char szPlateNumber[16];   
    char szTime[20];          
    double dbLong;            
    double dbWidth;           
    double dbHeight;          
    char szViolationCode[16]; 
    char szDescribe[132];     
    BYTE byImageIndex;    
    DWORD dwSnapFlagMask; 
    BYTE bReserved[4096]; 
} DEV_EVENT_TRAFFIC_TRANSFINITE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_FCC_IMAGE
{
    DWORD dwOffSet; 
    DWORD dwLength; 
    WORD wWidth;    
    WORD wHeight;   
} DEV_EVENT_TRAFFIC_FCC_IMAGE;
typedef struct tagDEV_EVENT_TRAFFIC_FCC_OBJECT
{
    DEV_EVENT_TRAFFIC_FCC_IMAGE stuImage; 
} DEV_EVENT_TRAFFIC_FCC_OBJECT;
typedef struct tagDEV_EVENT_TRAFFIC_FCC_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    DWORD nTriggerID;               
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DWORD dwNum;                             
    DWORD dwLitre;                           
    EM_REFUEL_TYPE emType;                   
    DWORD dwMoney;                           
    char szPlateNumber[DH_COMMON_STRING_16]; 
    char szTime[DH_COMMON_STRING_32];        
    DEV_EVENT_TRAFFIC_FCC_OBJECT stuObject;  
    BYTE bReserved[1024];                    
} DEV_EVENT_TRAFFIC_FCC_INFO;
typedef enum tagEM_PARKINGSPACE_STATUS
{
    EM_PARKINGSPACE_STATUS_UNKNOWN,
    EM_PARKINGSPACE_STATUS_BUSY,     
    EM_PARKINGSPACE_STATUS_FREE,     
    EM_PARKINGSPACE_STATUS_OVERLINE, 
} EM_PARKINGSPACE_STATUS;
typedef struct tagNET_FEATUREPIC_AREA
{
    int nRetCount;                  
    DH_POINT stuFeaturePicArea[10]; 
    BYTE bReserved[256];            
} NET_FEATUREPIC_AREA;
typedef struct tagDEV_EVENT_TRAFFIC_ANALYSE_PRESNAP_INFO
{
    int nChannelID;                                 
    char szName[128];                               
    char bReserved1[4];                             
    double PTS;                                     
    NET_TIME_EX stuTime;                            
    int nEventID;                                   
    int nGroupID;                                   
    int nCountInGroup;                              
    int nIndexInGroup;                              
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nLane;                                      
    int nSequence;                                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EM_PARKINGSPACE_STATUS emParkingSpaceStatus;    
    EVENT_COMM_INFO stCommInfo;                     
    EM_PARKINGSPACE_STATUS emCurParkingSpaceStatus; 
    NET_FEATUREPIC_AREA stuParkingInfo;             
    DH_RESOLUTION_INFO stuResolution;               
    BYTE bReserved[716];                            
} DEV_EVENT_TRAFFIC_ANALYSE_PRESNAP_INFO;
typedef struct tagDEV_EVENT_NEAR_DISTANCE_DETECTION_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char bReserved1[4];             
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;                                
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo; 
    BYTE bReserved[2048];                       
} DEV_EVENT_NEAR_DISTANCE_DETECTION_INFO;
typedef struct tagNET_FLOATINGOBJECT_MASK_INFO
{
    UINT nColNum;         
    UINT nOffset;         
    UINT nLength;         
    BYTE byReserved[508]; 
} NET_FLOATINGOBJECT_MASK_INFO;
typedef enum tagEM_FLOATINGOBJECT_DETECTION_SENCE_TYPE
{
    EM_FLOATINGOBJECT_DETECTION_SENCE_TYPE_UNKNOWN, 
    EM_FLOATINGOBJECT_DETECTION_SENCE_TYPE_NOMAL,   
    EM_FLOATINGOBJECT_DETECTION_SENCE_TYPE_BUBBLE,  
} EM_FLOATINGOBJECT_DETECTION_SENCE_TYPE;
typedef struct tagDEV_EVENT_FLOATINGOBJECT_DETECTION_INFO
{
    int nChannelID;                                           
    int nAction;                                              
    char szName[128];                                         
    double PTS;                                               
    NET_TIME_EX UTC;                                          
    int nEventID;                                             
    DH_EVENT_FILE_INFO stuFileInfo;                           
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM];         
    int nDetectRegionNum;                                     
    int nImageIndex;                                          
    DWORD dwSnapFlagMask;                                     
    int nSourceIndex;                                         
    char szSourceDevice[MAX_PATH];                            
    UINT nOccurrenceCount;                                    
    int nObjectNum;                                           
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];           
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;               
    char szPresetName[64];                                    
    BOOL bExistFloatingObject;                                
    NET_EM_EVENT_DATA_TYPE emEventType;                       
    float fCurrentRatio;                                      
    float fAlarmThreshold;                                    
    NET_INTELLIGENCE_IMAGE_INFO stuOriginalImage;             
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;                
    NET_FLOATINGOBJECT_MASK_INFO stuObjectMaskInfo;           
    EM_FLOATINGOBJECT_DETECTION_SENCE_TYPE emDetectSenceType; 
    BYTE byReserved[3432];                                    
} DEV_EVENT_FLOATINGOBJECT_DETECTION_INFO;
typedef struct tagDEV_EVENT_WATER_LEVEL_DETECTION_INFO
{
    int nChannelID;              
    int nAction;                 
    char szName[MAX_EVENT_NAME]; 
    double PTS;                  
    NET_TIME_EX UTC;             
    int nEventID;                
    DH_EVENT_FILE_INFO stuFileInfo;               
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;   
    char szPresetName[64];                        
    char szObjectUUID[48];                        
    NET_EM_EVENT_DATA_TYPE emEventType;           
    NET_EM_WATER_LEVEL_STATUS emStatus;           
    NET_WATER_RULER stuWaterRuler;                
    NET_INTELLIGENCE_IMAGE_INFO stuOriginalImage; 
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;    
    BOOL bManual;                                 
    BYTE byReserved[1020];                        
} DEV_EVENT_WATER_LEVEL_DETECTION_INFO;
typedef struct tagDEV_EVENT_SHIP_DETECTION_INFO
{
    int nChannelID;                                    
    int nAction;                                       
    char szName[128];                                  
    double PTS;                                        
    NET_TIME_EX UTC;                                   
    int nEventID;                                      
    DH_EVENT_FILE_INFO stuFileInfo;                    
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM];  
    int nDetectRegionNum;                              
    int nImageIndex;                                   
    DWORD dwSnapFlagMask;                              
    int nSourceIndex;                                  
    NET_CROSSREGION_DIRECTION_INFO emDirection;        
    NET_CROSSREGION_ACTION_INFO emActionType;          
    char szSourceDevice[MAX_PATH];                     
    UINT nOccurrenceCount;                             
    int nTrackLineNum;                                 
    NET_POINT stuTrackLine[DH_MAX_TRACK_LINE_NUM];     
    DH_MSG_OBJECT stuObject;                           
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];    
    int nObjectNum;                                    
    int nTrackNum;                                     
    DH_POLY_POINTS stuTrackInfo[HDBJ_MAX_OBJECTS_NUM]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;        
    char szPresetName[64];                             
    BOOL bExistShip;                                   
    BYTE bReserved[4096];                              
} DEV_EVENT_SHIP_DETECTION_INFO;
typedef struct tagDEV_EVENT_HOLD_UMBRELLA_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[128];                                 
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    UINT nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                             
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];   
    int nObjectNum;                                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    char szPresetName[64];                            
    UINT nViolationDuration;                          
    char szSourceID[32];                              
    DWORD dwSnapFlagMask;                             
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    BYTE bReserved[4088 - POINTERSIZE];               
} DEV_EVENT_HOLD_UMBRELLA_INFO;
typedef struct tagDEV_EVENT_GARBAGE_EXPOSURE_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[128];                                 
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    UINT nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                             
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];   
    int nObjectNum;                                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    char szPresetName[64];                            
    UINT nViolationDuration;                          
    char szSourceID[32];                              
    DWORD dwSnapFlagMask;                             
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    BYTE bReserved[3016];                             
} DEV_EVENT_GARBAGE_EXPOSURE_INFO;
typedef struct tagDEV_EVENT_DUSTBIN_OVER_FLOW_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[128];                                 
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    UINT nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                             
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];   
    int nObjectNum;                                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    char szPresetName[64];                            
    UINT nViolationDuration;                          
    char szSourceID[32];                              
    DWORD dwSnapFlagMask;                             
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    UINT nRuleId;                                     
    char szRuleName[128];                             
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    BYTE bReserved[2884];                             
} DEV_EVENT_DUSTBIN_OVER_FLOW_INFO;
typedef struct tagDEV_EVENT_TRASH_WITHOUT_COVER_DETECTION_INFO
{
    int nChannelID;                      
    int nAction;                         
    char szName[128];                    
    double PTS;                          
    NET_TIME_EX UTC;                     
    EM_SCENE_CLASS_TYPE emClassType;     
    UINT nRuleID;                        
    UINT nEventID;                       
    int nGroupID;                        
    int nCountInGroup;                   
    int nIndexInGroup;                   
    int nPresetID;                       
    char szReserved1[4];                 
    int nObjectNum;                      
    DH_MSG_OBJECT stuObjects[128];       
    SCENE_IMAGE_INFO_EX stuSceneImage;   
    NET_IMAGE_INFO_EX2 stuImageInfo[32]; 
    int nImageInfoNum;                   
    char byReserved[1024];               
} DEV_EVENT_TRASH_WITHOUT_COVER_DETECTION_INFO;
typedef struct tagDEV_EVENT_DOOR_FRONT_DIRTY_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[128];                                 
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    UINT nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                             
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];   
    int nObjectNum;                                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    char szPresetName[64];                            
    char szShopAddress[256];                          
    UINT nViolationDuration;                          
    char szSourceID[32];                              
    DWORD dwSnapFlagMask;                             
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    BYTE bReserved[4088 - POINTERSIZE];               
} DEV_EVENT_DOOR_FRONT_DIRTY_INFO;
typedef struct tagDEV_EVENT_STREET_SUNCURE_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[DH_COMMON_STRING_128];                
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    UINT nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                             
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];   
    int nObjectNum;                                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    char szPresetName[DH_COMMON_STRING_64];           
    UINT nViolationDuration;                          
    char szSourceID[DH_COMMON_STRING_32];             
    DWORD dwSnapFlagMask;                             
    char szShopAddress[64];                           
    BYTE bReserved[4028];                             
} DEV_EVENT_STREET_SUNCURE_INFO;
typedef struct tagDEV_EVENT_OUTDOOR_ADVERTISEMENT_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[DH_COMMON_STRING_128];                
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    UINT nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                             
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];   
    int nObjectNum;                                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    char szPresetName[DH_COMMON_STRING_64];           
    UINT nViolationDuration;                          
    char szSourceID[DH_COMMON_STRING_32];             
    DWORD dwSnapFlagMask;                             
    char szShopAddress[64];                           
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    BYTE bReserved[4024 - POINTERSIZE];               
} DEV_EVENT_OUTDOOR_ADVERTISEMENT_INFO;
typedef struct tagDEV_EVENT_HUDDLE_MATERIAL_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[DH_COMMON_STRING_128];                
    double PTS;                                       
    NET_TIME_EX UTC;                                  
    UINT nEventID;                                    
    DH_EVENT_FILE_INFO stuFileInfo;                   
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                             
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];   
    int nObjectNum;                                   
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;       
    char szPresetName[DH_COMMON_STRING_64];           
    UINT nViolationDuration;                          
    char szSourceID[DH_COMMON_STRING_32];             
    DWORD dwSnapFlagMask;                             
    BYTE bReserved[4092];                             
} DEV_EVENT_HUDDLE_MATERIAL_INFO;
typedef struct tagDEV_EVENT_FIRE_LINE_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    EM_CLASS_TYPE emClassType;      
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    UINT nSequence;                 
    UINT nRuleID;                   
    int nObjectNum;                 
    DH_MSG_OBJECT stuObjects[32];   
    SCENE_IMAGE_INFO stuSceneImage; 
    BYTE byReserved[1024];          
} DEV_EVENT_FIRE_LINE_DETECTION_INFO;
typedef struct tagNET_OCCUPY_BYS_LANE_CUSTOM_INFO
{
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    BYTE byReserved[256];                 
} NET_OCCUPY_BYS_LANE_CUSTOM_INFO;
typedef enum tagEM_OCCUPY_BYS_LANE_IMAGE_TYPE
{
    EM_OCCUPY_BYS_LANE_IMAGE_TYPE_UNKNOWN = -1, 
    EM_OCCUPY_BYS_LANE_IMAGE_TYPE_SYNTHESIS,    
    EM_OCCUPY_BYS_LANE_IMAGE_TYPE_ORIGINAL,     
} EM_OCCUPY_BYS_LANE_IMAGE_TYPE;
typedef struct tagNET_OCCUPY_BYS_LANE_IMAGE_INFO
{
    UINT nOffset;                              
    UINT nLength;                              
    EM_OCCUPY_BYS_LANE_IMAGE_TYPE emImageType; 
    BYTE byReserved[124];                      
} NET_OCCUPY_BYS_LANE_IMAGE_INFO;
typedef struct tagDEV_EVENT_OCCUPY_BYS_LANE_INFO
{
    int nChannelID;                                 
    int nAction;                                    
    NET_OCCUPY_BYS_LANE_CUSTOM_INFO stuCustomInfo;  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    NET_OCCUPY_BYS_LANE_IMAGE_INFO stImageInfo[8];  
    int nImageInfoNum;                              
    NET_TIME_EX UTC;                                
    BYTE byReserved[1024];                          
} DEV_EVENT_OCCUPY_BUS_LANE_INFO;
typedef struct tagDEV_EVENT_DISTRESS_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    EM_CLASS_TYPE emClassType;      
    DH_EVENT_FILE_INFO stuFileInfo; 
    NET_TIME_EX UTC;               
    UINT nEventID;                 
    UINT nSequence;                
    UINT nRuleID;                  
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nPresetID;                
    BYTE byReserved[1024];         
} DEV_EVENT_DISTRESS_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_ASSISTANT_WITHOUT_SAFEBELT
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nLane;                                       
    int nMark;                                       
    int nFrameSequence;                              
    int nSource;                                     
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    int nSpeed;                                      
    DWORD dwSnapFlagMask;                            
    EVENT_COMM_INFO stCommInfo;                      
} DEV_EVENT_TRAFFIC_ASSISTANT_WITHOUT_SAFEBELT;
typedef struct tagNET_PACK_OBJECT
{
    UINT nObjectID;                
    EM_ANALYSE_OBJECT_TYPE emType; 
    NET_RECT stuBoundingBox;       
    NET_POINT stuCenter;           
    BYTE bReserved[1024];          
} NET_PACKAGE_OBJECT;
typedef struct tagDEV_EVENT_PACKBROKEN_DETECTION_INFO
{
    int nChannelID;                     
    int nAction;                        
    char szName[128];                   
    double PTS;                         
    EM_CLASS_TYPE emClassType;          
    NET_TIME_EX UTC;                    
    UINT nEventID;                      
    UINT nRuleID;                       
    DH_EVENT_FILE_INFO stuFileInfo;     
    int nDetectRegionNum;               
    NET_POINT DetectRegion[20];         
    int nObjectNum;                     
    NET_PACKAGE_OBJECT stuObjects[128]; 
    int nPresetID;                      
} DEV_EVENT_PACKBROKEN_DETECTION_INFO;
typedef struct tagDEV_EVENT_PACKLAND_DETECTION_INFO
{
    int nChannelID;                     
    int nAction;                        
    char szName[128];                   
    double PTS;                         
    EM_CLASS_TYPE emClassType;          
    NET_TIME_EX UTC;                    
    UINT nEventID;                      
    UINT nRuleID;                       
    DH_EVENT_FILE_INFO stuFileInfo;     
    int nDetectRegionNum;               
    NET_POINT DetectRegion[20];         
    int nObjectNum;                     
    NET_PACKAGE_OBJECT stuObjects[128]; 
    int nPresetID;                      
} DEV_EVENT_PACKLAND_DETECTION_INFO;
typedef struct tagDEV_EVENT_PACKOPEN_DETECTION_INFO
{
    int nChannelID;                     
    int nAction;                        
    char szName[128];                   
    double PTS;                         
    EM_CLASS_TYPE emClassType;          
    NET_TIME_EX UTC;                    
    UINT nEventID;                      
    UINT nRuleID;                       
    DH_EVENT_FILE_INFO stuFileInfo;     
    int nDetectRegionNum;               
    NET_POINT DetectRegion[20];         
    int nObjectNum;                     
    NET_PACKAGE_OBJECT stuObjects[128]; 
    int nPresetID;                      
} DEV_EVENT_PACKOPEN_DETECTION_INFO;
typedef struct tagNET_VIOLATION_TYPE
{
    BOOL bIsNotStoppingBeforeStopLine; 
    BOOL bIsNoParkingInWaitingArea;    
    BYTE byReserved[24];               
} NET_VIOLATION_TYPE;
typedef struct tagDEV_EVENT_TRAFFIC_TURN_RIGHT_NO_STOP_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    int nLane;                                       
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nMark;                                       
    int nFrameSequence;                              
    int nSource;                                     
    int nSpeed;                                      
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                      
    NET_VIOLATION_TYPE stuViolationType;             
    NET_GPS_STATUS_INFO stGPSStatus;                 
    NET_TIME stuStartTime;                           
    NET_TIME stuStopTime;                            
    int nMaximumSpeed;                               
    int nAverageSpeed;                               
    BYTE byReserved[680];                            
} DEV_EVENT_TRAFFIC_TURN_RIGHT_NO_STOP_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_CROSSING_GUARDRAIL_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nTriggerType;               
    DWORD PTS;                      
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nSequence;                  
    BYTE byEventAction;             
    BYTE byImageIndex;              
    BYTE byReserved1[2];
    int nLane;                                       
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DH_EVENT_FILE_INFO stuFileInfo;                  
    int nMark;                                       
    int nFrameSequence;                              
    int nSource;                                     
    int nSpeed;                                      
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                      
    BYTE byReserved[712];                            
} DEV_EVENT_TRAFFIC_CROSSING_GUARDRAIL_INFO;
typedef struct tagDEV_EVENT_SCALPER_ALARM_INFO
{
    int nChannelID;                          
    char szName[128];                        
    int nAction;                             
    int nEventID;                            
    UINT nSequence;                          
    UINT nRuleID;                            
    NET_TIME_EX UTC;                         
    BOOL bIsGlobalScene;                     
    NET_FACE_IMAGE_INFO stuImageInfo;        
    DH_MSG_OBJECT stuObject;                 
    FACERECOGNITION_PERSON_INFOEX stuPerson; 
    UINT nSimilarity;                        
    EM_CLASS_TYPE emClassType;               
    NET_FACE_DATA stuFaceData;               
    UINT nAppearTimes;                       
    char szUID[32];                          
    char szFeatureVersion[32];               
    BYTE byReserved[1024];                   
} DEV_EVENT_SCALPER_ALARM_INFO;
typedef struct tagDEV_EVENT_VEHICLE_PERIPHERAL_ALARM_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    DWORD PTS;        
    NET_TIME_EX UTC;  
    NET_GPS_STATUS_INFO stuGPSStatus;            
    EM_VEHICLE_PERIPHERAL_TYPE emPeripheralType; 
    EM_VEHICLE_PERIPHERAL_ALARM emAlarm;         
    double dbSpeed;                              
    double dbDistance;                           
    char szVideoPath[256];                       
    char byReserved[768];                        
} DEV_EVENT_VEHICLE_PERIPHERAL_ALARM_INFO;
typedef struct tagDEV_EVENT_EMERGENCY_INFO
{
    int nAction;                                      
    UINT nID;                                         
    NET_GPS_STATUS_INFO stuGPSStatusInfo;             
    char szIMEI[16];                                  
    UINT nDistance;                                   
    char szPlateNumber[64];                           
    char szReplyNumber[16];                           
    int nImageInfoNum;                                
    SCENE_IMAGE_INFO_EX stuImageInfo[16];             
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
} DEV_EVENT_EMERGENCY_INFO;
typedef enum tagEM_STATISTICS_MODE
{
    EM_STATISTICS_MODE_UNKNOWN, 
    EM_STATISTICS_MODE_AREA,    
    EM_STATISTICS_MODE_SPACE,   
} EM_STATISTICS_MODE;
typedef struct tagNET_SPACE_MODE_INFO
{
    char szParkNo[32];         
    EM_SPACE_TYPE emSpaceType; 
    BOOL bUsed;                
    BYTE byReserved[256];      
} NET_SPACE_MODE_INFO;
typedef enum tagEM_UPDATE_TYPE
{
    EM_UPDATE_TYPE_UNKNOWN = -1, 
    EM_UPDATE_TYPE_DELETE,       
    EM_UPDATE_TYPE_MODIFY,       
    EM_UPDATE_TYPE_ADD,          
} EM_UPDATE_TYPE;
typedef struct tagNET_UPDATE_INFO
{
    EM_UPDATE_TYPE emType;            
    char szName[32];                  
    EM_SPACE_TYPE emBeforeUpdateType; 
    EM_SPACE_TYPE emAfterUpdateType;  
    char szResvered[256];             
} NET_UPDATE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKING_STATISTICS_INFO
{
    int nAction;                              
    int nChannel;                             
    char szName[128];                         
    double PTS;                               
    NET_TIME_EX UTC;                          
    int nEventID;                             
    NET_AREA_MODE_INFO stuAreaModeInfo[5];    
    int nAreaModeInfoNum;                     
    NET_SPACE_MODE_INFO stuSpaceModeInfo[99]; 
    int nSpaceModeInfoNum;                    
    EM_STATISTICS_MODE emStatisticsMode;      
    NET_UPDATE_INFO stuUpdateInfo[99];        
    int nUpdateInfoNum;                       
    NET_IMAGE_INFO_EX2* pstuImageInfo;        
    int nImageInfoNum;                        
    NET_EVENT_INFO_EXTEND stuEventInfoEx;     
    BYTE byReserved[1008];                    
} DEV_EVENT_TRAFFIC_PARKING_STATISTICS_INFO;
typedef struct tagDEV_EVENT_HEAT_IMAGING_TEMPER_INFO
{
    char szName[64];                            
    int nAlarmId;                               
    NET_RADIOMETRY_RESULT emResult;             
    NET_RADIOMETRY_ALARMCONTION emAlarmContion; 
    float fTemperatureValue;                    
    NET_TEMPERATURE_UNIT emTemperatureUnit;     
    DH_POINT stCoordinate;                      
    UINT nPresetID;                             
    UINT nChannel;                              
    int nAction;                                
    DH_POLY_POINTS stuAlarmCoordinates;         
    BOOL bUseNameEx;                            
    char reserved1[4];                          
    char szNameEx[128];                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    float fThreshold;                           
    int nSlopePeriod;                           
    float fSlopeMutation;                       
    char reserved[872];
} DEV_EVENT_HEAT_IMAGING_TEMPER_INFO;
typedef struct tagDEV_EVENT_ROAD_OBSTACLE_DETECTION_INFO
{
    int nAction;               
    int nChannel;              
    char szName[128];          
    double PTS;                
    EM_CLASS_TYPE emClassType; 
    NET_TIME_EX UTC;           
    UINT nRuleID;              
    BYTE byReserved[1020];     
} DEV_EVENT_ROAD_OBSTACLE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_BRIGANDAGE_CAR_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    UINT nEventID;                                   
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT UTCMS;                                      
    DH_MSG_OBJECT stuVehicle;                        
    DH_MSG_OBJECT stuObject;                         
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    BOOL bNonMotorInfoEx;                            
    DH_EVENT_FILE_INFO stuFileInfo;                  
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    int nSpeed;                                      
    DWORD dwSnapFlagMask;                            
    BYTE byReserved[1004];                           
} DEV_EVENT_TRAFFIC_BRIGANDAGE_CAR_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_COUNTERFEIT_PLATE_CAR_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    UINT nEventID;                                   
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT UTCMS;                                      
    DH_MSG_OBJECT stuVehicle;                        
    DH_MSG_OBJECT stuObject;                         
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    BOOL bNonMotorInfoEx;                            
    DH_EVENT_FILE_INFO stuFileInfo;                  
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    int nSpeed;                                      
    DWORD dwSnapFlagMask;                            
    BYTE byReserved[1004];                           
} DEV_EVENT_TRAFFIC_COUNTERFEIT_PLATE_CAR_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_FAKE_PLATE_CAR_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    UINT nEventID;                                   
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT UTCMS;                                      
    DH_MSG_OBJECT stuVehicle;                        
    DH_MSG_OBJECT stuObject;                         
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    BOOL bNonMotorInfoEx;                            
    DH_EVENT_FILE_INFO stuFileInfo;                  
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    int nSpeed;                                      
    DWORD dwSnapFlagMask;                            
    BYTE byReserved[1004];                           
} DEV_EVENT_TRAFFIC_FAKE_PLATE_CAR_INFO;
typedef struct tagDEV_EVENT_SEWAGE_DETECTION_INFO
{
    int nChannelID;                                     
    int nAction;                                        
    EM_CLASS_TYPE emClassType;                          
    char szName[128];                                   
    int nGroupID;                                       
    int nCountInGroup;                                  
    int nIndexInGroup;                                  
    UINT nEventID;                                      
    double PTS;                                         
    UINT UTC;                                           
    UINT UTCMS;                                         
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    UINT nPresetID;                                     
    NET_INTELLIGENCE_IMAGE_INFO stuOriginalImage;       
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;          
    BYTE byReserved[1024];                              
} DEV_EVENT_SEWAGE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_MOTORCYCLE_FORBID
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    UINT nEventID;                                   
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT UTCMS;                                      
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DH_EVENT_FILE_INFO stuFileInfo;                  
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    BOOL bNonMotorInfoEx;                            
    int nLane;                                       
    int nSequence;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    BYTE byReserved[1020];                           
} DEV_EVENT_TRAFFIC_MOTORCYCLE_FORBID;
typedef enum tagEM_WATER_COLOR
{
    EM_WATER_COLOR_UNKNOWN, 
    EM_WATER_COLOR_BLACK,   
    EM_WATER_COLOR_RED,     
    EM_WATER_COLOR_GREEN,   
    EM_WATER_COLOR_YELLOW,  
} EM_WATER_COLOR;
typedef struct tagDEV_EVENT_WATERCOLOR_DETECTION_INFO
{
    int nChannelID;                                     
    int nAction;                                        
    EM_CLASS_TYPE emClassType;                          
    char szName[128];                                   
    int nGroupID;                                       
    int nCountInGroup;                                  
    int nIndexInGroup;                                  
    int nEventID;                                       
    double PTS;                                         
    UINT UTC;                                           
    UINT UTCMS;                                         
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    UINT nPresetID;                                     
    EM_WATER_COLOR emWaterColor;                        
    NET_INTELLIGENCE_IMAGE_INFO stuOriginalImage;       
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;          
    BYTE byReserved[1024];                              
} DEV_EVENT_WATERCOLOR_DETECTION_INFO;
typedef enum tagEM_HELMET_EVENT_TYPE
{
    EM_UNKNOWN_TYPE,
    EM_NOT_WEAR_HELMET, 
} EM_HELMET_EVENT_TYPE;
typedef struct tagDEV_EVENT_HELMET_DETECTION_INFO
{
    int nChannelID;                         
    int nAction;                            
    char szName[128];                       
    double PTS;                             
    NET_TIME_EX UTC;                        
    EM_CLASS_TYPE emClassType;              
    UINT nEventID;                          
    UINT nRuleID;                           
    int nObjectID;                          
    DH_EVENT_FILE_INFO stuFileInfo;         
    EM_HELMET_EVENT_TYPE emHelmetEventType; 
    HUMAN_IMAGE_INFO stuHumanImage;         
    SCENE_IMAGE_INFO stuSceneImage;         
} DEV_EVENT_HELMET_DETECTION_INFO;
typedef struct tagNET_CFG_MASK_INFO
{
    UINT nOffset; 
    UINT nLength; 
    BYTE byReserved[1016];
} NET_CFG_MASK_INFO;
typedef enum tagEM_DEPOSIT_DETECTION_SCENE_TYPE
{
    EM_DEPOSIT_DETECTION_SCENE_TYPE_UNKNOWN = -1,  
    EM_DEPOSIT_DETECTION_SCENE_TYPE_LATTICE,       
    EM_DEPOSIT_DETECTION_SCENE_TYPE_CONVEROR_BELT, 
} EM_DEPOSIT_DETECTION_SCENE_TYPE;
typedef struct tagDEV_EVENT_DEPOSIT_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DH_EVENT_FILE_INFO stuFileInfo; 
    UINT nEventID;                  
    int nDetectRegionNum;                             
    NET_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    char szRegionName[64];                            
    UINT nStackThreshold;                             
    UINT nGridState;                                  
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;        
    NET_INTELLIGENCE_IMAGE_INFO stuDepositImage;      
    BYTE byReserved[1024];                            
    NET_CFG_MASK_INFO stuMask;                        
    EM_DEPOSIT_DETECTION_SCENE_TYPE emSceneType;      
} DEV_EVENT_DEPOSIT_DETECTION_INFO;
typedef struct tagDEV_EVENT_HOTSPOT_WARNING_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DH_EVENT_FILE_INFO stuFileInfo; 
    UINT nEventID;                  
    DH_POINT stuPoint;                     
    float fHotSpotValue;                   
    NET_TEMPERATURE_UNIT nTemperatureUnit; 
    BYTE byReserved[256];                  
} DEV_EVENT_HOTSPOT_WARNING_INFO;
typedef enum tagEM_CLASSROOM_ACTION
{
    EM_CLASSROOM_ACTION_UNKNOWN,    
    EM_CLASSROOM_ACTION_PLAY_PHONE, 
    EM_CLASSROOM_ACTION_HANDSUP,    
    EM_CLASSROOM_ACTION_LISTEN,     
    EM_CLASSROOM_ACTION_READ_WRITE, 
    EM_CLASSROOM_ACTION_TABLE,      
    EM_CLASSROOM_ACTION_TURN,       
} EM_CLASSROOM_ACTION;
typedef struct tagDEV_EVENT_CLASSROOM_BEHAVIOR_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    DH_EVENT_FILE_INFO stuFileInfo; 
    EM_CLASS_TYPE emClassType;                           
    UINT nRuleID;                                        
    UINT nObjectID;                                      
    UINT nSequence;                                      
    EM_CLASSROOM_ACTION emClassroomAction;               
    NET_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                                
    UINT nPresetID;                                      
    char szPresetName[64];                               
    char szSerialUUID[22];                               
    BYTE byReserved1[2];                                 
    DH_RECT stuBoundingBox;                              
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;           
    NET_INTELLIGENCE_IMAGE_INFO stuFaceImage;            
    NET_FACE_ATTRIBUTE_EX stuFaceAttributes;             
    NET_IMAGE_INFO_EX2 stuImageInfo[32];                 
    int nImageInfoNum;                                   
    char byReserved[1024];                               
} DEV_EVENT_CLASSROOM_BEHAVIOR_INFO;
typedef struct tagDEV_EVENT_VEHICLE_DISTANCE_NEAR_INFO
{
    int nAction;                                      
    NET_TIME_EX UTC;                                  
    NET_GPS_STATUS_INFO stuGPSStatusInfo;             
    char szDriverID[32];                              
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    BYTE bReserved[736];                              
} DEV_EVENT_VEHICLE_DISTANCE_NEAR_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_DRIVER_ABNORMAL_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    NET_TIME_EX UTC;                      
    char szVideoPath[256];                
    BYTE bReserved[768];                  
} DEV_EVENT_TRAFFIC_DRIVER_ABNORMAL_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_DRIVER_CHANGE_INFO
{
    int nChannelID;                            
    int nAction;                               
    NET_GPS_STATUS_INFO stuGPSStatusInfo;      
    NET_TIME_EX UTC;                           
    char szPrevDriverID[MAX_COMMON_STRING_32]; 
    char szCurDriverID[MAX_COMMON_STRING_32];  
    char szVideoPath[256];                     
    BYTE bReserved[768];                       
} DEV_EVENT_TRAFFIC_DRIVER_CHANGE_INFO;
typedef struct tagNET_HELMET_ATTRIBUTE
{
    EM_WORK_HELMET_STATE emHelmetState; 
    EM_CLOTHES_COLOR emHelmetColor;     
    UINT nHelmetFlag;                   
    int nReportFlag;                    
    int nHasLegalHat;                   
    BYTE byReserved[1012];              
} NET_HELMET_ATTRIBUTE;
typedef enum tagEM_CLOTHES_LEGAL_STATE
{
    EM_CLOTHES_LEGAL_STATE_UNKNOWN,  
    EM_CLOTHES_LEGAL_STATE_WRONGFUL, 
    EM_CLOTHES_LEGAL_STATE_LEGAL,    
} EM_CLOTHES_LEGAL_STATE;
typedef struct tagNET_WORKCLOTHES_ATTRIBUTE
{
    EM_WORKCLOTHES_STATE emWorkClothesState;        
    EM_CLOTHES_COLOR emWorkClothColor;              
    EM_CLOTHES_LEGAL_STATE emWorkClothesLegalState; 
    BYTE byReserved[1020];                          
} NET_WORKCLOTHES_ATTRIBUTE;
typedef enum tagEM_WORKPANTS_STATE
{
    EM_WORKPANTS_STATE_UNKNOWN, 
    EM_WORKPANTS_STATE_NOTWEAR, 
    EM_WORKPANTS_STATE_WEAR,    
} EM_WORKPANTS_STATE;
typedef struct tagNET_WORKPANTS_ATTRIBUTE
{
    EM_WORKPANTS_STATE emWorkPantsState; 
    EM_CLOTHES_COLOR emWorkPantsColor;   
    BYTE byReserved[1024];               
} NET_WORKPANTS_ATTRIBUTE;
typedef enum tagEM_EVENT_WORKCLOTHES_RULE_TYPE
{
    EM_EVENT_WORKCLOTHES_RULE_UNKNWON,          
    EM_EVENT_WORKCLOTHES_RULE_HELMET,           
    EM_EVENT_WORKCLOTHES_RULE_CLOTHES,          
    EM_EVENT_WORKCLOTHES_RULE_PANTS,            
    EM_EVENT_WORKCLOTHES_RULE_PROTECTIVESUIT,   
    EM_EVENT_WORKCLOTHES_RULE_SHOESCOVER,       
    EM_EVENT_WORKCLOTHES_RULE_SAFETYROPE,       
    EM_EVENT_WORKCLOTHES_RULE_NORMALHAT,        
    EM_EVENT_WORKCLOTHES_RULE_MASK,             
    EM_EVENT_WORKCLOTHES_RULE_APRON,            
    EM_EVENT_WORKCLOTHES_RULE_GLOVE,            
    EM_EVENT_WORKCLOTHES_RULE_BOOT,             
    EM_EVENT_WORKCLOTHES_RULE_NOHAT,            
    EM_EVENT_WORKCLOTHES_RULE_TYPE_PROHLMET,    
    EM_EVENT_WORKCLOTHES_RULE_FIREPROOFCLOTHES, 
    EM_EVENT_WORKCLOTHES_RULE_UNIFORM,          
    EM_EVENT_WORKCLOTHES_RULE_MULTIMETER,       
    EM_EVENT_WORKCLOTHES_RULE_BREATHINGMASK,    
    EM_EVENT_WORKCLOTHES_RULE_GLASSES,          
    EM_EVENT_WORKCLOTHES_RULE_VEST,             
    EM_EVENT_WORKCLOTHES_RULE_WRISTGUARD,       
    EM_EVENT_WORKCLOTHES_RULE_SAFETYSHOES,      
} EM_EVENT_WORKCLOTHES_RULE_TYPE;
typedef enum tagEM_WEARING_STATE
{
    EM_WEARING_STATE_UNKNOWN, 
    EM_WEARING_STATE_NOTWEAR, 
    EM_WEARING_STATE_WEAR,    
    EM_WEARING_STATE_NO_EXIT, 
} EM_WEARING_STATE;
typedef enum tagEM_COMPLIANCE_STATE
{
    EM_COMPLIANCE_STATE_COMPLIANT,    
    EM_COMPLIANCE_STATE_NONCOMPLIANT, 
    EM_COMPLIANCE_STATE_UNKNOWN,      
} EM_COMPLIANCE_STATE;
typedef enum tagEM_FIREPROOF_CLOTHES_STATE
{
    EM_FIREPROOF_CLOTHES_STATE_UNKNOWN, 
    EM_FIREPROOF_CLOTHES_STATE_NO,      
    EM_FIREPROOF_CLOTHES_STATE_YES,     
    EM_FIREPROOF_CLOTHES_STATE_NOEXIT,  
} EM_FIREPROOF_CLOTHES_STATE;
typedef struct tagNET_NORMALHAT_ATTRIBUTE
{
    EM_WEARING_STATE emHasHat;         
    EM_COMPLIANCE_STATE emHasLegalHat; 
} NET_NORMALHAT_ATTRIBUTE;
typedef struct tagNET_MASK_ATTRIBUTE
{
    EM_WEARING_STATE emHasMask;         
    EM_COMPLIANCE_STATE emHasLegalMask; 
} NET_MASK_ATTRIBUTE;
typedef struct tagNET_APRON_ATTRIBUTE
{
    EM_WEARING_STATE emHasApron;         
    EM_COMPLIANCE_STATE emHasLegalApron; 
} NET_APRON_ATTRIBUTE;
typedef struct tagNET_GLOVE_ATTRIBUTE
{
    EM_WEARING_STATE emHasGlove;         
    EM_COMPLIANCE_STATE emHasLegalGlove; 
} NET_GLOVE_ATTRIBUTE;
typedef struct tagNET_BOOT_ATTRIBUTE
{
    EM_WEARING_STATE emHasBoot;         
    EM_COMPLIANCE_STATE emHasLegalBoot; 
} NET_BOOT_ATTRIBUTE;
typedef struct tagNET_SHOESCOVER_ATTRIBUTE
{
    EM_WEARING_STATE emHasCover;         
    EM_COMPLIANCE_STATE emHasLegalCover; 
} NET_SHOESCOVER_ATTRIBUTE;
typedef struct tagNET_NOHAT_ATTRIBUTE
{
    EM_WEARING_STATE emHasHat;         
    EM_COMPLIANCE_STATE emHasLegalHat; 
} NET_NOHAT_ATTRIBUTE;
typedef struct tagNET_PROHELMET_ATTRIBUTE
{
    EM_WEARING_STATE emHasHat;   
    EM_CLOTHES_COLOR emHatColor; 
    char szReserved[128];        
} NET_PROHELMET_ATTRIBUTE;
typedef struct tagNET_FIREPROOF_CLOTHES
{
    EM_FIREPROOF_CLOTHES_STATE emHasFireProofClothes; 
    EM_CLOTHES_COLOR emFireProofClothesColor;         
    char szReserved[128];                             
} NET_FIREPROOF_CLOTHES;
typedef enum tagEM_GLASSES_RULE_TYPE
{
    EM_GLASSES_RULE_TYPE_UNKNOWN = -1,              
    EM_GLASSES_RULE_TYPE_NO_GLASSES,                
    EM_GLASSES_RULE_TYPE_SUN_GLASSES,               
    EM_GLASSES_RULE_TYPE_BLACK_RIMMED_GLASSES,      
    EM_GLASSES_RULE_TYPE_HALF_RIMMED_GLASSES,       
    EM_GLASSES_RULE_TYPE_RIMLESS_GLASSES,           
    EM_GLASSES_RULE_TYPE_NORMAL_GLASSES,            
    EM_GLASSES_RULE_TYPE_INDUSTRIAL_SAFETY_GLASSES, 
} EM_GLASSES_RULE_TYPE;
typedef struct tagNET_GLASSES_RELATED_INFO
{
    EM_GLASSES_RULE_TYPE emGlassesType; 
    int nGlassesLegalMask;              
    char szReserved[64];                
} NET_GLASSES_RELATED_INFO;
typedef struct tagNET_BREATHING_MASK_INFO
{
    int nHasLegalBreathingMask; 
    int nHasBreathingMask;      
    char byReserved[56];        
} NET_BREATHING_MASK_INFO;
typedef struct tagNET_PROTECTIVE_SUIT_INFO
{
    int nHasProtectiveSuit;                 
    EM_CLOTHES_COLOR emProtectiveSuitColor; 
    char szReserved[24];                    
} NET_PROTECTIVE_SUIT_INFO;
typedef struct tagNET_SAFETY_ROPE_INFO
{
    int nCompliantType;  
    char szReserved[28]; 
} NET_SAFETY_ROPE_INFO;
typedef struct tagNET_UNIFORM_INFO
{
    int nHasUniform;                 
    EM_CLOTHES_COLOR emUniformColor; 
    char szReserved[24];             
} NET_UNIFORM_INFO;
typedef struct tagNET_SAFE_BELT_INFO
{
    int nHasSafeBelt;      
    int nHasLegalSafeBelt; 
    char szReserved[24];   
} NET_SAFE_BELT_INFO;
typedef struct tagNET_VEST_INFO
{
    int nHasVest;        
    int nHasLegalVest;   
    char szReserved[24]; 
} NET_VEST_INFO;
typedef struct tagNET_SAFETY_SHOES_INFO
{
    int nHasSafetyShoes;      
    int nHasLegalSafetyShoes; 
    char szReserved[24];      
} NET_SAFETY_SHOES_INFO;
typedef struct tagNET_WRIST_GUARD_INFO
{
    int nHasWristGuard;      
    int nHasLegalWristGuard; 
    char szReserved[24];     
} NET_WRIST_GUARD_INFO;
typedef struct tagDEV_EVENT_WORKCLOTHES_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    EM_CLASS_TYPE emClassType;                         
    UINT nRuleID;                                      
    UINT nObjectID;                                    
    UINT nGroupID;                                     
    UINT nCountInGroup;                                
    UINT nIndexInGroup;                                
    SCENE_IMAGE_INFO stuSceneImage;                    
    HUMAN_IMAGE_INFO stuHumanImage;                    
    NET_HELMET_ATTRIBUTE stuHelmetAttribute;           
    NET_WORKCLOTHES_ATTRIBUTE stuWorkClothesAttribute; 
    NET_WORKPANTS_ATTRIBUTE stuWorkPantsAttribute;     
    int nAlarmType;                                    
    char szSourceID[32];                               
    EM_EVENT_WORKCLOTHES_RULE_TYPE emRuleType;         
    NET_IMAGE_INFO_EX2 stuImageInfo[32];               
    int nImageInfoNum;                                 
    NET_NORMALHAT_ATTRIBUTE stuNormalHat;              
    NET_MASK_ATTRIBUTE stuMask;                        
    NET_APRON_ATTRIBUTE stuApron;                      
    NET_GLOVE_ATTRIBUTE stuGlove;                      
    NET_BOOT_ATTRIBUTE stuBoot;                        
    NET_SHOESCOVER_ATTRIBUTE stuShoesCover;            
    NET_NOHAT_ATTRIBUTE stuNoHat;                      
    NET_PROHELMET_ATTRIBUTE stuProhelmet;              
    NET_EVENT_INFO_EXTEND stuEventInfoEx;              
    NET_FIREPROOF_CLOTHES stuFireProofClothes;         
    DH_MSG_OBJECT_EX2* pstObjectInfo;                  
    UINT nObjectNum;                                   
    NET_GLASSES_RELATED_INFO stuGlassesInfo;           
    NET_BREATHING_MASK_INFO stuBreathingMaskInfo;      
    NET_PROTECTIVE_SUIT_INFO stuProtectiveSuitInfo;    
    NET_UNIFORM_INFO stuUniformInfo;                   
    NET_SAFETY_ROPE_INFO stuSafetyRopeInfo;            
    NET_SAFE_BELT_INFO stuSafeBeltInfo;                
    NET_VEST_INFO stuVestInfo;                         
    NET_SAFETY_SHOES_INFO stuSafetyShoesInfo;          
    NET_WRIST_GUARD_INFO stuWristGuardInfo;            
    char byReserved[332 - POINTERSIZE];                
} DEV_EVENT_WORKCLOTHES_DETECT_INFO;
typedef enum tagEM_SECURITYGATE_PERSON_PASS_DIRECTION
{
    EM_SECURITYGATE_PERSON_PASS_DIRECTION_UNKNOWN = 0, 
    EM_SECURITYGATE_PERSON_PASS_DIRECTION_IN,          
    EM_SECURITYGATE_PERSON_PASS_DIRECTION_OUT,         
} EM_SECURITYGATE_PERSON_PASS_DIRECTION;
typedef enum tagEM_SECURITYGATE_ALARM_LEVEL
{
    EM_SECURITYGATE_ALARM_LEVEL_UNKNOWN = 0, 
    EM_SECURITYGATE_ALARM_LEVEL_NON,         
    EM_SECURITYGATE_ALARM_LEVEL_LOW,         
    EM_SECURITYGATE_ALARM_LEVEL_MIDDLE,      
    EM_SECURITYGATE_ALARM_LEVEL_HIGH,        
} EM_SECURITYGATE_ALARM_LEVEL;
typedef enum tagEM_SECURITYGATE_ALARM_POSITION
{
    EM_SECURITYGATE_ALARM_POSITION_UNKNWON = -1, 
    EM_SECURITYGATE_ALARM_POSITION_LEFT_1,       
    EM_SECURITYGATE_ALARM_POSITION_LEFT_2,       
    EM_SECURITYGATE_ALARM_POSITION_LEFT_3,       
    EM_SECURITYGATE_ALARM_POSITION_LEFT_4,       
    EM_SECURITYGATE_ALARM_POSITION_LEFT_5,       
    EM_SECURITYGATE_ALARM_POSITION_LEFT_6,       
    EM_SECURITYGATE_ALARM_POSITION_MIDDLE_1,     
    EM_SECURITYGATE_ALARM_POSITION_MIDDLE_2,     
    EM_SECURITYGATE_ALARM_POSITION_MIDDLE_3,     
    EM_SECURITYGATE_ALARM_POSITION_MIDDLE_4,     
    EM_SECURITYGATE_ALARM_POSITION_MIDDLE_5,     
    EM_SECURITYGATE_ALARM_POSITION_MIDDLE_6,     
    EM_SECURITYGATE_ALARM_POSITION_RIGHT_1,      
    EM_SECURITYGATE_ALARM_POSITION_RIGHT_2,      
    EM_SECURITYGATE_ALARM_POSITION_RIGHT_3,      
    EM_SECURITYGATE_ALARM_POSITION_RIGHT_4,      
    EM_SECURITYGATE_ALARM_POSITION_RIGHT_5,      
    EM_SECURITYGATE_ALARM_POSITION_RIGHT_6,      
} EM_SECURITYGATE_ALARM_POSITION;
typedef enum tagEM_TEMPERATURE_TYPE
{
    EM_TEMPERATURE_TYPE_UNKNOWN = -1, 
    EM_TEMPERATURE_TYPE_UNDEFINE,     
    EM_TEMPERATURE_TYPE_LOW,          
    EM_TEMPERATURE_TYPE_NORMAL,       
    EM_TEMPERATURE_TYPE_HIGH,         
} EM_TEMPERATURE_TYPE;
typedef enum tagEM_SECURITYGATE_EXPRESSION_TYPE
{
    EM_SECURITYGATE_EXPRESSION_UNKNOWN = -1, 
    EM_SECURITYGATE_EXPRESSION_UNDEFINE,     
    EM_SECURITYGATE_EXPRESSION_ANGER,        
    EM_SECURITYGATE_EXPRESSION_SAD,          
    EM_SECURITYGATE_EXPRESSION_DISGUST,      
    EM_SECURITYGATE_EXPRESSION_FEAR,         
    EM_SECURITYGATE_EXPRESSION_SURPRISED,    
    EM_SECURITYGATE_EXPRESSION_CALM,         
    EM_SECURITYGATE_EXPRESSION_SMILE,        
    EM_SECURITYGATE_EXPRESSION_LAUGH,        
    EM_SECURITYGATE_EXPRESSION_HAPPY,        
    EM_SECURITYGATE_EXPRESSION_CONFUSE,      
    EM_SECURITYGATE_EXPRESSION_SCREAM,       
} EM_SECURITYGATE_EXPRESSION_TYPE;
typedef enum tagEM_SECURITYGATE_GLASSES_TYPE
{
    EM_SECURITYGATE_GLASSES_UNKNOWN = -1, 
    EM_SECURITYGATE_GLASSES_UNDEFINE,     
    EM_SECURITYGATE_WITHOUT_GLASSES,      
    EM_SECURITYGATE_WITH_GLASSES,         
} EM_SECURITYGATE_GLASSES_TYPE;
typedef enum tagEM_SECURITYGATE_SEX_TYPE
{
    EM_SECURITYGATE_SEX_MAN = 0, 
    EM_SECURITYGATE_SEX_WOMEN,   
    EM_SECURITYGATE_SEX_UNKNOWN, 
} EM_SECURITYGATE_SEX_TYPE;
typedef struct tagNET_SECURITYGATE_ALARM_FACE_INFO
{
    EM_SECURITYGATE_SEX_TYPE emSex;            
    int nAge;                                  
    EM_SECURITYGATE_EXPRESSION_TYPE emEmotion; 
    EM_SECURITYGATE_GLASSES_TYPE emGlasses;    
    EM_MASK_STATE_TYPE emMask;                 
    EM_BEARD_STATE_TYPE emBeard;               
    int nAttractive;                           
    char szReserved1[4];
    EM_MOUTH_STATE_TYPE emMouth;    
    EM_EYE_STATE_TYPE emEye;        
    float fTemperature;             
    EM_TEMPERATURE_UNIT emTempUnit; 
    EM_TEMPERATURE_TYPE emTempType; 
    BYTE byReserved[1024];          
} NET_SECURITYGATE_ALARM_FACE_INFO;
typedef struct tagNET_SECURITYGATE_ALARM_FACEIMAGE_INFO
{
    UINT nOffSet;        
    UINT nLength;        
    BYTE byReserved[24]; 
} NET_SECURITYGATE_ALARM_FACEIMAGE_INFO;
typedef struct tagNET_SECURITYGATE_PERSON
{
    char szUID[32];                        
    char szGroupID[64];                    
    EM_SEX_TYPE emSexType;                 
    char szPersonName[64];                 
    NET_TIME stuBirthday;                  
    char szCountry[3];                     
    char szProvince[64];                   
    char szCity[64];                       
    char szHomeAddress[128];               
    EM_CERTIFICATE_TYPE emCertificateType; 
    char szID[32];                         
    BYTE byReserved[1020];                 
} NET_SECURITYGATE_PERSON;
typedef struct tagNET_SECURITYGATE_CANDIDATE
{
    NET_SECURITYGATE_PERSON stuPerson; 
    int nSimilarity;                   
    BYTE byReserved[260];              
} NET_SECURITYGATE_CANDIDATE;
typedef struct tagNET_SECURITYGATE_ALARM_INFO
{
    UINT nPosition;       
    UINT nObjectType;     
    char szResvered[128]; 
} NET_SECURITYGATE_ALARM_INFO;
typedef struct tagDEV_EVENT_SECURITYGATE_PERSONALARM_INFO
{
    int nChannelID;                                           
    int nAction;                                              
    char szName[DH_EVENT_NAME_LEN];                           
    double PTS;                                               
    NET_TIME_EX UTC;                                          
    UINT nEventID;                                            
    EM_SECURITYGATE_PERSON_PASS_DIRECTION emDirection;        
    EM_SECURITYGATE_ALARM_LEVEL emAlarmLevel;                 
    int nChannelIn;                                           
    int nChannelOut;                                          
    NET_INTELLIGENCE_IMAGE_INFO stuImageInfo;                 
    UINT nAlarmPositionNum;                                   
    EM_SECURITYGATE_ALARM_POSITION emAlarmPosition[18];       
    NET_SECURITYGATE_ALARM_FACEIMAGE_INFO stuFaceImageInfo;   
    NET_SECURITYGATE_ALARM_FACE_INFO stuSecurityGateFaceInfo; 
    BYTE byReserved[4];                                       
    int nCandidateNum;                                        
    NET_SECURITYGATE_CANDIDATE stuCandidates[50];             
    UINT nDoorRegion;                                         
    int nAlaramPositionNum;                                   
    UINT nAlaramPosition[18];                                 
    UINT nPositionNumEx;                                      
    EM_SECURITYGATE_ALARM_POSITION emAlarmPositionEx[128];    
    int nAlaramPositionNumEx;                                 
    UINT nAlaramPositionEx[128];                              
    int nAlarmInfoNum;                                        
    NET_SECURITYGATE_ALARM_INFO stuAlarmInfo[32];             
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                     
    int nPartitionRow;                                        
    int nPartitionColumn;                                     
    char szResvered[1016];                                    
} DEV_EVENT_SECURITYGATE_PERSONALARM_INFO;
typedef struct tagNET_HUMAN
{
    NET_RECT stuBoundingBox; 
    UINT nObjectID;          
    char szSerialUUID[22];   
    BYTE bReserved[230];     
} NET_HUMAN;
typedef struct tagDEV_EVENT_STAY_ALONE_DETECTION_INFO
{
    int nChannelID;                                     
    int nAction;                                        
    char szName[DH_EVENT_NAME_LEN];                     
    double PTS;                                         
    EM_CLASS_TYPE emClassType;                          
    NET_TIME_EX UTC;                                    
    int UTCMS;                                          
    int nEventID;                                       
    NET_HUMAN stuHuman;                                 
    SCENE_IMAGE_INFO_EX stuSceneImage;                  
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    BYTE byReserved[1024];                              
} DEV_EVENT_STAY_ALONE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_ROAD_BLOCK_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    DH_EVENT_FILE_INFO stuFileInfo; 
    NET_RECT stuBoundingBox;            
    UINT nLane;                         
    EVENT_COMM_INFO stCommInfo;         
    DWORD dwSnapFlagMask;               
    NET_IMAGE_INFO_EX2* pstuImageInfo;  
    int nImageInfoNum;                  
    BYTE bReserved[4088 - POINTERSIZE]; 
} DEV_EVENT_TRAFFIC_ROAD_BLOCK_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_ROAD_CONSTRUCTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    DH_EVENT_FILE_INFO stuFileInfo; 
    NET_RECT stuBoundingBox;            
    UINT nLane;                         
    EVENT_COMM_INFO stCommInfo;         
    DWORD dwSnapFlagMask;               
    NET_IMAGE_INFO_EX2* pstuImageInfo;  
    int nImageInfoNum;                  
    BYTE bReserved[4088 - POINTERSIZE]; 
} DEV_EVENT_TRAFFIC_ROAD_CONSTRUCTION_INFO;
typedef enum tagEM_WORKACTION_STATE
{
    EM_WORKACTION_STATE_UNKNOWN,        
    EM_WORKACTION_STATE_NO_WORKER,      
    EEM_WORKACTION_STATE_SINGLE_WORKER, 
    EM_WORKACTION_STATE_NORED_VEST,     
} EM_WORKACTION_STATE;
typedef enum tagEM_WORKSTATDETECTION_TYPE
{
    EM_WORKSTATDETECTION_UNKNOWN,           
    EM_WORKSTATDETECTION_NO_WORKER,         
    EM_WORKSTATDETECTION_SINGLE_WORKER,     
    EM_WORKSTATDETECTION_NO_WORKER_LEADER,  
    EM_WORKSTATDETECTION_HAND_DISINFECTION, 
    EM_WORKSTATDETECTION_FOOT_DIP,          
    EM_WORKSTATDETECTION_SHOES_CHANGE,      
} EM_WORKSTATDETECTION_TYPE;
typedef struct tagDEV_EVENT_WORKSTATDETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    EM_CLASS_TYPE emClassType;            
    UINT nRuleID;                         
    UINT nObjectID;                       
    UINT nWorkActionNum;                  
    EM_WORKACTION_STATE emWorkAction[32]; 
    SCENE_IMAGE_INFO stuSceneImage;       
    EM_WORKSTATDETECTION_TYPE emRuleType; 
    DH_MSG_OBJECT_EX2* pstObjectInfo;     
    UINT nObjectNum;                      
    BYTE byReserved[1016 - POINTERSIZE];  
} DEV_EVENT_WORKSTATDETECTION_INFO;
typedef struct tagNET_FACE_ATTRIBUTES
{
    int nAngle[3];       
    UINT nFaceQuality;   
    int nFaceAlignScore; 
    BYTE byReserved[36]; 
} NET_FACE_ATTRIBUTES;
typedef struct tagNET_FEATURE_VECTOR_INFO
{
    char szFeatureVersion[32];              
    EM_FEATURE_ERROR_CODE emFeatureErrCode; 
    NET_FEATURE_VECTOR stuFeatureVector;    
    NET_FACE_ATTRIBUTES stuFaceAttribute;   
    BYTE byReserved[968];                   
} NET_FEATURE_VECTOR_INFO;
typedef struct tagDEV_EVENT_FEATURE_ABSTRACT_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    EM_CLASS_TYPE emClassType;                        
    UINT nFeatureNum;                                 
    NET_FEATURE_VECTOR_INFO stuFeatureVectorList[10]; 
    BYTE byReserved[1024];                            
} DEV_EVENT_FEATURE_ABSTRACT_INFO;
typedef enum tagEM_TRIGGER_EVENT_TYPE
{
    EM_TRIGGER_EVENT_TYPE_UNKNOWN,         
    EM_TRIGGER_EVENT_TYPE_PTZ_PRESET,      
    EM_TRIGGER_EVENT_TYPE_FIREWARNING,     
    EM_TRIGGER_EVENT_TYPE_MOVE_ABSOLUTELY, 
} EM_TRIGGER_EVENT_TYPE;
typedef struct tagDEV_EVENT_PANORAMA_SHOT_INFO
{
    int nChannelID; 
    char szStationID[64];                     
    char szPictureID[128];                    
    NET_TIME_EX stuLocalSnapshotTime;         
    int nPitchAngleInSnapping;                
    int nHorizontalAngleInSnapping;           
    EM_TRIGGER_EVENT_TYPE emTriggerEventType; 
    DWORD dwFireID;                           
    NET_RECT stuFireBoundingBox;              
    BYTE byReserved[1024];                    
} DEV_EVENT_PANORAMA_SHOT_INFO;
typedef struct tagDEV_EVENT_SMARTMOTION_HUMAN_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    NET_MOTIONDETECT_REGION_INFO stuSmartRegion[32]; 
    UINT nSmartRegionNum;                            
    UINT nHumanObjectNum;                            
    NET_SMARTDETECT_HUMAN_OBJECT stuHumanObject[64]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    BYTE bReserved[1024];                            
} DEV_EVENT_SMARTMOTION_HUMAN_INFO;
typedef struct tagDEV_EVENT_SMARTMOTION_VEHICLE_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    NET_MOTIONDETECT_REGION_INFO stuSmartRegion[32];     
    UINT nSmartRegionNum;                                
    UINT nVehicleObjectNum;                              
    NET_SMARTDETECT_VEHICLE_OBJECT stuVehicleObject[64]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                
    BYTE bReserved[1024];                                
} DEV_EVENT_SMARTMOTION_VEHICLE_INFO;
typedef struct tagDEV_EVENT_INTELLI_SHELF_INFO
{
    int nChannelID;            
    int nAction;               
    char szName[128];          
    double PTS;                
    NET_TIME_EX UTC;           
    UINT nEventID;             
    EM_CLASS_TYPE emClassType; 
    UINT nAreaID;                      
    UINT nPresetID;                    
    int nPercent;                      
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    BYTE byReserved1[4];               
    BYTE byReserved[1024];             
} DEV_EVENT_INTELLI_SHELF_INFO;
typedef enum tagEM_DRIVING_DIRECTION
{
    EM_DRIVING_DIRECTION_UNKNOWN = 0, 
    EM_DRIVING_DIRECTION_IN,          
    EM_DRIVING_DIRECTION_OUT,         
} EM_DRIVING_DIRECTION;
typedef struct tagDEV_EVENT_CAR_DRIVING_IN_OUT_INFO
{
    int nChannelID;                              
    int nEventID;                                
    char szName[128];                            
    double PTS;                                  
    NET_TIME_EX UTC;                             
    DH_MSG_OBJECT stuObject;                     
    DH_MSG_OBJECT stuVehicle;                    
    DH_EVENT_FILE_INFO stuFileInfo;              
    int nSequence;                               
    int nFrameSequence;                          
    EM_DRIVING_DIRECTION emDrivingDirection;     
    NET_EVENT_IMAGE_OFFSET_INFO stuGlobalScene;  
    NET_EVENT_IMAGE_OFFSET_INFO stuParkingImage; 
    char szParkingNum[32];                       
    NET_IMAGE_INFO_EX2 stuImageInfo[32];         
    int nImageInfoNum;                           
    char byReserved[1024];                       
} DEV_EVENT_CAR_DRIVING_IN_OUT_INFO;
typedef enum tagEM_CAR_DOOR_STATE
{
    EM_CAR_DOOR_STATE_UNKNOWN, 
    EM_CAR_DOOR_STATE_OPEN,    
    EM_CAR_DOOR_STATE_CLOSE,   
} EM_CAR_DOOR_STATE;
typedef enum tagEM_PERSON_INTRUDE_STATUS
{
    EM_PERSON_INTRUDE_STATUS_UNKNOWN = -1, 
    EM_PERSON_INTRUDE_STATUS_UNMANNED,     
    EM_PERSON_INTRUDE_STATUS_SOMEONE,      
} EM_PERSON_INTRUDE_STATUS;
typedef struct tagDEV_EVENT_PARKINGSPACE_STATUS_INFO
{
    int nChannelID;                 
    int nEventID;                   
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nSource;        
    int nFrameSequence; 
    int nMark;                                      
    EM_PARKINGSPACE_STATUS emParkingSpaceStatus;    
    char szParkingNum[32];                          
    char szText[32];                                
    EM_CAR_DOOR_STATE emCarDoorState;               
    int nWorkerNum;                                 
    DH_POINT stuBoxcarDetectRegion[4];              
    int nBoxcarDetectRegionNum;                     
    int nLoadingRate;                               
    int nUnLoadLength;                              
    EM_PERSON_INTRUDE_STATUS emPersonIntrudeStatus; 
    BYTE byReserved[472];                           
} DEV_EVENT_PARKINGSPACE_STATUS_INFO;
typedef struct tagOBJECT_RELATED_INFO
{
    UINT nObjectID;                  
    UINT nRelativeID;                
    char szObjectType[128];          
    NET_RECT stuBoundingBox;         
    NET_RECT stuOriginalBoundingBox; 
    BYTE byReserved[1024];           
} OBJECT_RELATED_INFO;
typedef struct tagDEV_EVENT_FACEBODY_DETECT_INFO
{
    int nChannelID;                            
    int nAction;                               
    char szName[128];                          
    double PTS;                                
    NET_TIME_EX UTC;                           
    EM_CLASS_TYPE emClassType;                 
    UINT nEventID;                             
    UINT nObjectID;                            
    UINT nRuleID;                              
    UINT nSequence;                            
    int nGroupID;                              
    int nCountInGroup;                         
    int nIndexInGroup;                         
    BYTE byReserved1[4];                       
    FACE_TRAIT stuFaceTrait;                   
    BODY_TRAIT stuBodyTrait;                   
    NET_EVENT_IMAGE_OFFSET_INFO stuBodyImage;  
    NET_EVENT_IMAGE_OFFSET_INFO stuFaceImage;  
    NET_EVENT_IMAGE_OFFSET_INFO stuSceneImage; 
    OBJECT_RELATED_INFO stuFaceObject;         
    OBJECT_RELATED_INFO stuBodyObject;         
} DEV_EVENT_FACEBODY_DETECT_INFO;
typedef struct tagDEV_EVENT_FACEBODY_ANALYSE_INFO
{
    int nChannelID;                                      
    int nAction;                                         
    char szName[128];                                    
    double PTS;                                          
    NET_TIME_EX UTC;                                     
    EM_CLASS_TYPE emClassType;                           
    UINT nEventID;                                       
    UINT nObjectID;                                      
    UINT nRuleID;                                        
    UINT nSequence;                                      
    int nGroupID;                                        
    int nCountInGroup;                                   
    int nIndexInGroup;                                   
    BYTE byReserved1[4];                                 
    FACE_TRAIT stuFaceTrait;                             
    BODY_TRAIT stuBodyTrait;                             
    NET_EVENT_IMAGE_OFFSET_INFO stuBodyImage;            
    NET_EVENT_IMAGE_OFFSET_INFO stuFaceImage;            
    NET_EVENT_IMAGE_OFFSET_INFO stuSceneImage;           
    OBJECT_RELATED_INFO stuFaceObject;                   
    OBJECT_RELATED_INFO stuBodyObject;                   
    CANDIDATE_INFOEX stuCandidate[DH_MAX_CANDIDATE_NUM]; 
    int nCandidateNum;                                   
} DEV_EVENT_FACEBODY_ANALYSE_INFO;
typedef struct tagDEV_EVENT_CONGESTION_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DH_EVENT_FILE_INFO stuFileInfo; 
    EM_CLASS_TYPE emClassType;      
    UINT nEventID;                  
    UINT nRuleID;                   
    int nPresetID;                  
    char szPresetName[64];          
    int nAlarmMask;                 
    int nVehicleQuantity;           
    int nQueueLength;               
    int nDetectRegionNum;           
    DH_POINT stuDetectRegion[32];   
    BYTE byReserved[1024];          
} DEV_EVENT_CONGESTION_DETECTION_INFO;
typedef struct tagDEV_EVENT_VEHICLELIMIT_DETECTION_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[128];                  
    double PTS;                        
    NET_TIME_EX UTC;                   
    DH_EVENT_FILE_INFO stuFileInfo;    
    EM_CLASS_TYPE emClassType;         
    UINT nEventID;                     
    UINT nRuleID;                      
    int nPresetID;                     
    char szPresetName[64];             
    int nVehicleQuantity;              
    int nDetectRegionNum;              
    DH_POINT stuDetectRegion[32];      
    EM_SPACE_TYPE emSpaceType;         
    int nUpdateInfoNum;                
    NET_UPDATE_INFO stuUpdateInfo[20]; 
    BYTE byReserved[1024];             
} DEV_EVENT_VEHICLELIMIT_DETECTION_INFO;
typedef struct tagDEV_EVENT_VIOLENT_THROW_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nFrameSequence;                  
    char szRegionName[64];               
    SCENE_IMAGE_INFO_EX stuSceneImage;   
    NET_IMAGE_INFO_EX2 stuImageInfo[32]; 
    int nImageInfoNum;                   
    char byReserver[1024];               
} DEV_EVENT_VIOLENT_THROW_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAMCARSECTIONS_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;              
    EM_CLASS_TYPE emClassType; 
    int nSequence;             
    UINT nCarSections;                         
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage; 
    BYTE byReserved[512];                      
} DEV_EVENT_TRAMCARSECTIONS_DETECTION_INFO;
typedef struct tagNET_ANIMAL_OBJECTS_STATISTICS
{
    UINT nAnimalsAmount;                 
    VA_OBJECT_ANIMAL stuAnimalTypes[32]; 
    BYTE bReserved[132];                 
} NET_ANIMAL_OBJECTS_STATISTICS;
typedef struct tagNET_ANIMAL_SCENE_IMAGE_INFO
{
    UINT nOffSet;        
    UINT nLength;        
    UINT nIndexInData;   
    BYTE bReserved[252]; 
} NET_ANIMAL_SCENE_IMAGE_INFO;
typedef struct tagNET_ANIMAL_OBJECT_LIST_INFO
{
    NET_RECT stuBoundingBox; 
    NET_POINT stuPoint;      
    int nObjectID;           
    int nObjectNumber;       
    char szReserved[256];    
} NET_ANIMAL_OBJECT_LIST_INFO;
typedef struct tagDEV_EVENT_ANIMAL_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                       
    int nSequence;                                      
    NET_ANIMAL_SCENE_IMAGE_INFO stuSceneImage;          
    NET_ANIMAL_OBJECTS_STATISTICS stuObjectsStatistics; 
    EM_CLASS_TYPE emClassType;                          
    EM_DETECTION_SCENE_TYPE emDetectionSceneType;       
    NET_IMAGE_INFO_EX2 stuImageInfo[32];                
    int nImageInfoNum;                                  
    int nObjectListCount;                               
    NET_ANIMAL_OBJECT_LIST_INFO stuObjectListInfo[64];  
    char byReserved[1024];                              
} DEV_EVENT_ANIMAL_DETECTION_INFO;
typedef enum tagEM_VEHICLE_ACTION
{
    EM_VEHICLE_ACTION_UNKNOWN,   
    EM_VEHICLE_ACTION_APPEAR,    
    EM_VEHICLE_ACTION_DISAPPEAR, 
    EM_VEHICLE_ACTION_STAY,      
} EM_VEHICLE_ACTION;
typedef struct tagNET_DETECT_VEHICLE_INFO
{
    EM_VEHICLE_ACTION emAction;      
    UINT nObjectID;                  
    EVENT_PIC_INFO stuVehicleImage;  
    NET_COLOR_RGBA stuColor;         
    EM_CATEGORY_TYPE emCategoryType; 
    UINT nFrameSequence;             
    UINT nCarLogoIndex;              
    UINT nSubBrand;                  
    UINT nBrandYear;                 
    UINT nConfidence;                
    NET_RECT stuBoundingBox;         
    char szText[128];                
    UINT nSpeed;                     
    UINT nDirection;                 
    char szRegionName[64];           
    BYTE bReserved[448];             
} NET_DETECT_VEHICLE_INFO;
typedef struct tagNET_DETECT_PLATE_INFO
{
    UINT nObjectID;                       
    UINT nRelativeID;                     
    EVENT_PIC_INFO stuPlateImage;         
    EM_NET_PLATE_TYPE emPlateType;        
    EM_NET_PLATE_COLOR_TYPE emPlateColor; 
    UINT nConfidence;                     
    char szCountry[3];                    
    BYTE bReserved1;                      
    char szPlateNumber[128];              
    BYTE bReserved[512];                  
} NET_DETECT_PLATE_INFO;
typedef struct tagNET_FUEL_DISPENSER_INFO
{
    unsigned int nFuelingStartTime; 
    unsigned int nFuelingEndTime;   
    unsigned int nMoney;            
    unsigned int nLitre;            
    char szOilType[8];              
    char szReserved[128];           
} NET_FUEL_DISPENSER_INFO;
typedef struct tagDEV_EVENT_GASSTATION_VEHICLE_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;              
    EM_CLASS_TYPE emClassType; 
    NET_DETECT_VEHICLE_INFO stuDetectVehicleInfo;                  
    NET_DETECT_PLATE_INFO stuDetectPlateInfo;                      
    BOOL bIsGlobalScene;                                           
    EVENT_PIC_INFO stuSceneImage;                                  
    int nCarCandidateNum;                                          
    NET_CAR_CANDIDATE_INFO stuCarCandidate[MAX_CAR_CANDIDATE_NUM]; 
    NET_FUEL_DISPENSER_INFO stuFuelDispenser;                      
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar;               
    char szOilGunColor[32];                                        
    BYTE bReserved[840];                                           
} DEV_EVENT_GASSTATION_VEHICLE_DETECT_INFO;
typedef struct tagDEV_EVENT_SHOP_WINDOW_POST_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    UINT nRuleID;                   
    EM_CLASS_TYPE emClassType;      
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nObjectNum;                                     
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];     
    UINT nPresetID;                     
    char szPresetName[64];              
    char szShopAddress[256];            
    UINT nViolationDuration;            
    DWORD dwSnapFlagMask;               
    NET_IMAGE_INFO_EX2* pstuImageInfo;  
    int nImageInfoNum;                  
    BYTE bReserved[1020 - POINTERSIZE]; 
} DEV_EVENT_SHOP_WINDOW_POST_INFO;
typedef struct tagDEV_EVENT_SHOP_SIGN_ABNORMAL_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    UINT nRuleID;                   
    EM_CLASS_TYPE emClassType;      
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nObjectNum;                                     
    DH_MSG_OBJECT stuObjects[HDBJ_MAX_OBJECTS_NUM];     
    UINT nPresetID;          
    char szPresetName[64];   
    char szShopAddress[256]; 
    UINT nViolationDuration; 
    DWORD dwSnapFlagMask;    
    BYTE bReserved[1024];    
} DEV_EVENT_SHOP_SIGN_ABNORMAL_INFO;
typedef enum tagEM_BREED_DETECT_CATEGORY_TYPE
{
    EM_BREED_DETECT_CATEGORY_UNKNOWN, 
    EM_BREED_DETECT_CATEGORY_PIG,     
} EM_BREED_DETECT_CATEGORY_TYPE;
typedef struct tagNET_VAOBJECT_ANIMAL_INFO
{
    UINT nObjectID;                               
    EM_BREED_DETECT_CATEGORY_TYPE emCategoryType; 
    NET_RECT stuBoundingBox;                      
    UINT nObjectWeight;                           
    SCENE_IMAGE_INFO_EX stuImageData;             
    UINT nMotionStatus;                           
    UINT nInoutRegion;                            
    UINT nResultType;                             
    BYTE byReserved[1012];                        
} NET_VAOBJECT_ANIMAL_INFO;
typedef struct tagDEV_EVENT_BREED_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                            
    UINT nSequence;                          
    EM_CLASS_TYPE emClassType;               
    SCENE_IMAGE_INFO_EX stuSceneImage;       
    BYTE byReserved1[4];                     
    UINT nObjectNum;                         
    NET_VAOBJECT_ANIMAL_INFO stuObjects[64]; 
    double dBreedStallTemp;                  
    UINT nBreedStallNum;                     
    BYTE byReserved[500];                    
} DEV_EVENT_BREED_DETECTION_INFO;
typedef struct tagALARM_BREED_DETECTION_INFO
{
    int nChannelID;        
    int nAction;           
    char szName[128];      
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    unsigned int nEventID; 
    unsigned int nRuleID;                    
    unsigned int nSequence;                  
    EM_SCENE_CLASS_TYPE emClassType;         
    unsigned int nBreedStallNum;             
    unsigned int nObjectNum;                 
    NET_VAOBJECT_ANIMAL_INFO stuObjects[64]; 
    double dbBreedStallTemp;                 
    char szReserved[1024];                   
} ALARM_BREED_DETECTION_INFO;
typedef enum tagEM_AIRPORT_VEHICLE_TYPE
{
    EM_AIRPORT_VEHICLE_TYPE_UNKNOWN = 0, 
    EM_AIRPORT_VEHICLE_TYPE_TANKER,      
    EM_AIRPORT_VEHICLE_TYPE_CONVEYORCAR, 
    EM_AIRPORT_VEHICLE_TYPE_TRAILERCAR,  
} EM_AIRPORT_VEHICLE_TYPE;
typedef enum tagEM_AIRPORT_VEHICLE_ACTION
{
    EM_AIRPORT_VEHICLE_ACTION_UNKNOWN = 0, 
    EM_AIRPORT_VEHICLE_ACTION_ENTERREGION, 
    EM_AIRPORT_VEHICLE_ACTION_LEAVEREGION, 
    EM_AIRPORT_VEHICLE_ACTION_STARTWORK,   
    EM_AIRPORT_VEHICLE_ACTION_OVERWORK,    
    EM_AIRPORT_VEHICLE_ACTION_AIRREFUEL,   
    EM_AIRPORT_VEHICLE_ACTION_OVERREFUEL,  
} EM_AIRPORT_VEHICLE_ACTION;
typedef struct tagNET_AIRPORT_VEHICLE_OBJECT
{
    int nObjectID;                      
    EM_AIRPORT_VEHICLE_TYPE emType;     
    NET_RECT stuRect;                   
    EM_AIRPORT_VEHICLE_ACTION emAction; 
    BYTE byReserved[1020];              
} NET_AIRPORT_VEHICLE_OBJECT;
typedef struct tagDEV_EVENT_AIRPORT_VEHICLE_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                                                 
    UINT nSequence;                                                               
    EM_CLASS_TYPE emClassType;                                                    
    int nDetectRegionNum;                                                         
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM];                           
    SCENE_IMAGE_INFO_EX stuSceneImage;                                            
    int nVehicleObjectNum;                                                        
    NET_AIRPORT_VEHICLE_OBJECT stuVehicleObjects[MAX_AIRPORT_VEHICLE_OBJECT_NUM]; 
    BYTE byReserved[504];                                                         
} DEV_EVENT_AIRPORT_VEHICLE_DETECT_INFO;
typedef struct tagDEV_EVENT_MAN_CAR_COEXISTANCE_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                   
    UINT nSequence;                 
    EM_CLASS_TYPE emClassType;      
    DWORD dwSnapFlagMask;           
    SCENE_IMAGE_INFO stuSceneImage; 
    BYTE byReserved[512];           
} DEV_EVENT_MAN_CAR_COEXISTANCE_INFO;
typedef enum tagEM_PARKING_NUMBER_CHANGE_STATUS
{
    EM_PARKING_NUMBER_CHANGE_STATUS_UNKNOWN = -1, 
    EM_PARKING_NUMBER_CHANGE_STATUS_NO_CHANGE,    
    EM_PARKING_NUMBER_CHANGE_STATUS_INCREASE,     
    EM_PARKING_NUMBER_CHANGE_STATUS_DECREASE,     
} EM_PARKING_NUMBER_CHANGE_STATUS;
typedef struct tagNET_PARKING_STATUS
{
    char szName[32];                                
    int nID;                                        
    UINT nParkedNumber;                             
    EM_PARKING_NUMBER_CHANGE_STATUS emChangeStatus; 
    BYTE reserved[252];                             
} NET_PARKING_STATUS;
typedef struct tagDEV_EVENT_PARKING_LOT_STATUS_DETECTION_INFO
{
    int nChannelID;                           
    int nAction;                              
    char szName[128];                         
    EM_CLASS_TYPE emClassType;                
    NET_TIME_EX UTC;                          
    double PTS;                               
    unsigned int nEventID;                    
    UINT nRuleID;                             
    UINT nSequence;                           
    int nParkingStatusNum;                    
    NET_PARKING_STATUS stuParkingStatus[100]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;        
    NET_IMAGE_INFO_EX2 stuImageInfo[32];      
    int nImageInfoNum;                        
    char byReserved[1024];                    
} DEV_EVENT_PARKING_LOT_STATUS_DETECTION_INFO;
typedef struct tagALARM_PARKING_LOT_STATUS_DETECTION
{
    int nChannelID;                           
    int nAction;                              
    char szName[128];                         
    EM_CLASS_TYPE emClassType;                
    NET_TIME_EX UTC;                          
    double PTS;                               
    unsigned int nEventID;                    
    UINT nRuleID;                             
    UINT nSequence;                           
    int nParkingStatusNum;                    
    NET_PARKING_STATUS stuParkingStatus[100]; 
    BYTE byReserved[1020];                    
} ALARM_PARKING_LOT_STATUS_DETECTION;
typedef struct tagDREGS_UNCOVERED_VEHICLE_INFO
{
    char szPlateNumber[64];  
    NET_RECT stuBoundingBox; 
    BYTE byReserved[512];    
} DREGS_UNCOVERED_VEHICLE_INFO;
typedef struct tagDEV_EVENT_DREGS_UNCOVERED_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    EM_CLASS_TYPE emClassType;                          
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DREGS_UNCOVERED_VEHICLE_INFO stuVehicleInfo;        
    SCENE_IMAGE_INFO stuSceneImage;                     
    BYTE byReserved[952];                               
} DEV_EVENT_DREGS_UNCOVERED_INFO;
typedef struct tagDEV_EVENT_HIGH_TOSS_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                       
    EM_CLASS_TYPE emClassType;                          
    NET_HIGHTOSS_OBJECT_INFO stuObjInfos[50];           
    UINT nObjNum;                                       
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nFrameSequence;                                 
    int nGroupID;                                       
    int nIndexInGroup;                                  
    int nCountInGroup;                                  
    NET_EVENT_IMAGE_OFFSET_INFO stuImageInfo;           
    BOOL bIsGlobalScene;                                
    int nMark;                                          
    NET_IMAGE_INFO_EX2* pstuImageInfo;                  
    int nImageInfoNum;                                  
    BYTE byReserved[380 - POINTERSIZE];                 
} DEV_EVENT_HIGH_TOSS_DETECT_INFO;
typedef enum tagEM_ELECTRIC_GLOVE_TYPE
{
    EM_ELECTRIC_GLOVE_TYPE_UNKNOWN,   
    EM_ELECTRIC_GLOVE_TYPE_GENERAL,   
    EM_ELECTRIC_GLOVE_TYPE_INSULATED, 
} EM_ELECTRIC_GLOVE_TYPE;
typedef struct tagNET_ELECTRIC_GLOVE_OBJECT
{
    UINT nObjectID;                     
    EM_ELECTRIC_GLOVE_TYPE emGloveType; 
    NET_RECT stuBoundingBox;            
    NET_OBJECT_IMAGE_INFO stuImageData; 
    BYTE byReserved[1024];              
} NET_ELECTRIC_GLOVE_OBJECT;
typedef struct tagDEV_EVENT_ELECTRIC_GLOVE_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                               
    UINT nSequence;                             
    EM_CLASS_TYPE emClassType;                  
    UINT nGloveObjNum;                          
    NET_ELECTRIC_GLOVE_OBJECT stuGloveObjs[32]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;          
    BYTE byReserved[1028];                      
} DEV_EVENT_ELECTRIC_GLOVE_DETECT_INFO;
typedef enum tagEM_ELECTRIC_LADDER_TYPE
{
    EM_ELECTRIC_LADDER_TYPE_UNKNOWN,   
    EM_ELECTRIC_LADDER_TYPE_GENERAL,   
    EM_ELECTRIC_LADDER_TYPE_INSULATED, 
} EM_ELECTRIC_LADDER_TYPE;
typedef struct tagNET_ELECTRIC_LADDER_OBJECT
{
    UINT nObjectID;                       
    EM_ELECTRIC_LADDER_TYPE emLadderType; 
    NET_RECT stuBoundingBox;              
    NET_OBJECT_IMAGE_INFO stuImageData;   
    BYTE byReserved[1024];                
} NET_ELECTRIC_LADDER_OBJECT;
typedef struct tagDEV_EVENT_ELECTRIC_LADDER_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                 
    UINT nSequence;                               
    EM_CLASS_TYPE emClassType;                    
    UINT nLadderObjNum;                           
    NET_ELECTRIC_LADDER_OBJECT stuLadderObjs[32]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;            
    BYTE byReserved[1028];                        
} DEV_EVENT_ELECTRIC_LADDER_DETECT_INFO;
typedef enum tagEM_ELECTRIC_CURTAIN_TYPE
{
    EM_ELECTRIC_CURTAIN_TYPE_UNKNOWN, 
    EM_ELECTRIC_CURTAIN_TYPE_GENERAL, 
} EM_ELECTRIC_CURTAIN_TYPE;
typedef struct tagNET_ELECTRIC_CURTAIN_OBJECT
{
    UINT nObjectID;                         
    EM_ELECTRIC_CURTAIN_TYPE emCurtainType; 
    EM_UNIFIED_COLOR_TYPE emCurtainColor;   
    BYTE byReserved1[4];                    
    NET_RECT stuBoundingBox;                
    NET_OBJECT_IMAGE_INFO stuImageData;     
    BYTE byReserved[1024];                  
} NET_ELECTRIC_CURTAIN_OBJECT;
typedef struct tagDEV_EVENT_ELECTRIC_CURTAIN_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                   
    UINT nSequence;                                 
    EM_CLASS_TYPE emClassType;                      
    UINT nCurtainObjNum;                            
    NET_ELECTRIC_CURTAIN_OBJECT stuCurtainObjs[32]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;              
    BYTE byReserved[1028];                          
} DEV_EVENT_ELECTRIC_CURTAIN_DETECT_INFO;
typedef enum tagEM_ELECTRIC_FENCE_TYPE
{
    EM_ELECTRIC_FENCE_TYPE_UNKNOWN,  
    EM_ELECTRIC_FENCE_TYPE_GENERAL,  
    EM_ELECTRIC_FENCE_TYPE_COLUMNAR, 
    EM_ELECTRIC_FENCE_TYPE_GRID,     
} EM_ELECTRIC_FENCE_TYPE;
typedef struct tagNET_ELECTRIC_FENCE_OBJECT
{
    UINT nObjectID;                     
    EM_ELECTRIC_FENCE_TYPE emFenceType; 
    NET_RECT stuBoundingBox;            
    NET_OBJECT_IMAGE_INFO stuImageData; 
    BYTE byReserved[1024];              
} NET_ELECTRIC_FENCE_OBJECT;
typedef struct tagDEV_EVENT_ELECTRIC_FENCE_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                               
    UINT nSequence;                             
    EM_CLASS_TYPE emClassType;                  
    UINT nFenceObjNum;                          
    NET_ELECTRIC_FENCE_OBJECT stuFenceObjs[32]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;          
    BYTE byReserved[1028];                      
} DEV_EVENT_ELECTRIC_FENCE_DETECT_INFO;
typedef enum tagEM_ELECTRIC_SIGNBOARD_TYPE
{
    EM_ELECTRIC_SIGNBOARD_TYPE_UNKNOWN,   
    EM_ELECTRIC_SIGNBOARD_TYPE_GENERAL,   
    EM_ELECTRIC_SIGNBOARD_TYPE_WARNING,   
    EM_ELECTRIC_SIGNBOARD_TYPE_NAMEPLATE, 
} EM_ELECTRIC_SIGNBOARD_TYPE;
typedef struct tagNET_ELECTRIC_SIGNBOARD_OBJECT
{
    UINT nObjectID;                             
    EM_ELECTRIC_SIGNBOARD_TYPE emSignboardType; 
    NET_RECT stuBoundingBox;                    
    NET_OBJECT_IMAGE_INFO stuImageData;         
    BYTE byReserved[1024];                      
} NET_ELECTRIC_SIGNBOARD_OBJECT;
typedef struct tagDEV_EVENT_ELECTRIC_SIGNBOARD_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                       
    UINT nSequence;                                     
    EM_CLASS_TYPE emClassType;                          
    UINT nSignboardObjNum;                              
    NET_ELECTRIC_SIGNBOARD_OBJECT stuSignboardObjs[32]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;                  
    BYTE byReserved[1028];                              
} DEV_EVENT_ELECTRIC_SIGNBOARD_DETECT_INFO;
typedef enum tagEM_ELECTRIC_BELT_TYPE
{
    EM_ELECTRIC_BELT_TYPE_UNKNOWN, 
    EM_ELECTRIC_BELT_TYPE_GENERAL, 
} EM_ELECTRIC_BELT_TYPE;
typedef enum tagEM_BELT_WARE_TYPE
{
    EM_BELT_WARE_TYPE_UNKNOWN,     
    EM_BELT_WARE_TYPE_NORMAL,      
    EM_BELT_WARE_TYPE_MISS_MAIN,   
    EM_BELT_WARE_TYPE_MISS_BACKUP, 
    EM_BELT_WARE_TYPE_LOW_HANGING, 
} EM_BELT_WARE_TYPE;
typedef struct tagNET_ELECTRIC_BELT_OBJECT
{
    UINT nObjectID;                     
    EM_ELECTRIC_BELT_TYPE emBeltType;   
    EM_BELT_WARE_TYPE emBeltWareType;   
    BYTE byReserved1[4];                
    NET_RECT stuBoundingBox;            
    NET_OBJECT_IMAGE_INFO stuImageData; 
    BYTE byReserved[1024];              
} NET_ELECTRIC_BELT_OBJECT;
typedef struct tagDEV_EVENT_ELECTRIC_BELT_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                             
    UINT nSequence;                           
    EM_CLASS_TYPE emClassType;                
    UINT nBeltObjNum;                         
    NET_ELECTRIC_BELT_OBJECT stuBeltObjs[32]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;        
    BYTE byReserved[1028];                    
} DEV_EVENT_ELECTRIC_BELT_DETECT_INFO;
typedef enum tagEM_RADAR_DETECT_OBJECT_TYPE
{
    EM_RADAR_DETECT_OBJECT_UNKNOWN, 
    EM_RADAR_DETECT_OBJECT_HUMAN,   
    EM_RADAR_DETECT_OBJECT_VEHICLE  
} EM_RADAR_DETECT_OBJECT_TYPE;
typedef struct tagNET_RADAR_DETECT_OBJECT
{
    int nObjectID;                            
    EM_RADAR_DETECT_OBJECT_TYPE emObjectType; 
    BYTE byReserved[1024];                    
} NET_RADAR_DETECT_OBJECT;
typedef enum tagEM_RADAR_ALARM_TYPE
{
    EM_RADAR_ALARM_TYPE_UNKNOWN, 
    EM_RADAR_ALARM_TYPE_ALARM,   
    EM_RADAR_ALARM_TYPE_WARNING, 
} EM_RADAR_ALARM_TYPE;
typedef struct tagDEV_EVENT_RADAR_LINE_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                        
    EM_CLASS_TYPE emClassType;                           
    DH_EVENT_FILE_INFO stuFileInfo;                      
    int nObjectNum;                                      
    NET_RADAR_DETECT_OBJECT stuObjects[100];             
    int nPresetID;                                       
    int nDetectRegionNum;                                
    NET_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;                   
    char szAlarmLevel[16];                               
    int nAlarmChannel;                                   
    SCENE_IMAGE_INFO_EX stuSceneImageEx[10];             
    int nstuSceneImageExNum;                             
    EM_RADAR_ALARM_TYPE emAlarmType;                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                
    BYTE byReserved[1020];                               
} DEV_EVENT_RADAR_LINE_DETECTION_INFO;
typedef struct tagNET_RFID_CARD_INFO
{
    char szCardId[24];    
    char byReserved[128]; 
} NET_RFID_CARD_INFO;
typedef struct tagDEV_EVENT_RADAR_REGION_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                        
    EM_CLASS_TYPE emClassType;                           
    DH_EVENT_FILE_INFO stuFileInfo;                      
    int nObjectNum;                                      
    NET_RADAR_DETECT_OBJECT stuObjects[100];             
    int nPresetID;                                       
    int nDetectRegionNum;                                
    NET_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    SCENE_IMAGE_INFO_EX stuSceneImage;                   
    EM_RADAR_ALARM_TYPE emAlarmType;                     
    char szAlarmLevel[16];                               
    int nAlarmChannel;                                   
    int nRFIDCardIdNum;                                  
    NET_RFID_CARD_INFO stuRFIDCardId[256];               
    SCENE_IMAGE_INFO_EX stuSceneImageEx[10];             
    int nstuSceneImageExNum;                             
    int nSpeed;                                          
    int nTrackID;                                        
    int nObjectType;                                     
    int nAlarmFlag;                                      
    int nLongitude;                                      
    int nLatitude;                                       
    int nUpDownGoing;                                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                
    int nDistance;                                       
    int nAngle;                                          
    BYTE byReserved[988];                                
} DEV_EVENT_RADAR_REGION_DETECTION_INFO;
typedef struct tagAUDIO_INTENSITY_MESSAGE_INFO
{
    char szType[128];      
    char szContent[128];   
    BYTE byReserved[1024]; 
} AUDIO_INTENSITY_MESSAGE_INFO;
typedef struct tagDEV_EVENT_AUDIO_INTENSITY_INFO
{
    int nChannelID;                                     
    int nAction;                                        
    double PTS;                                         
    NET_TIME_EX UTC;                                    
    BYTE byReserved1[4];                                
    AUDIO_INTENSITY_MESSAGE_INFO stuAudioIntensityInfo; 
    BYTE byReserved[1024];                              
} DEV_EVENT_AUDIO_INTENSITY_INFO;
typedef struct tagDEV_EVENT_WALK_DETECTION_INFO
{
    int nChannelID;            
    int nAction;               
    char szName[128];          
    EM_CLASS_TYPE emClassType; 
    NET_TIME_EX UTC;           
    double PTS;                
    UINT nEventID;             
    UINT nPresetID;            
    BYTE byReserved[1024];     
} DEV_EVENT_WALK_DETECTION_INFO;
typedef struct tagDEV_EVENT_BACK_TO_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    char szName[128];                     
    EM_CLASS_TYPE emClassType;            
    NET_TIME_EX UTC;                      
    double PTS;                           
    UINT nEventID;                        
    UINT nPresetID;                       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} DEV_EVENT_BACK_TO_DETECTION_INFO;
typedef struct tagDEV_EVENT_WRITE_ON_THE_BOARD_DETECTION_INFO
{
    int nChannelID;            
    int nAction;               
    char szName[128];          
    EM_CLASS_TYPE emClassType; 
    NET_TIME_EX UTC;           
    double PTS;                
    UINT nEventID;             
    UINT nPresetID;            
    BYTE byReserved[1024];     
} DEV_EVENT_WRITE_ON_THE_BOARD_DETECTION_INFO;
typedef struct tagDEV_EVENT_SMART_KITCHEN_CLOTHES_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    UINT nRuleID;     
    EM_CLASS_TYPE emClassType;                  
    char szClassAlias[16];                      
    HUMAN_IMAGE_INFO stuHumanImage;             
    SCENE_IMAGE_INFO stuSceneImage;             
    FACE_IMAGE_INFO stuFaceImage;               
    UINT nObjectID;                             
    EM_NONMOTOR_OBJECT_STATUS emHasMask;        
    EM_NONMOTOR_OBJECT_STATUS emHasChefHat;     
    EM_NONMOTOR_OBJECT_STATUS emHasChefClothes; 
    EM_OBJECT_COLOR_TYPE emChefClothesColor;    
    NET_IMAGE_INFO_EX2 stuImageInfo[32];        
    int nImageInfoNum;                          
    char bReserved[1024];                       
} DEV_EVENT_SMART_KITCHEN_CLOTHES_DETECTION_INFO;
typedef struct tagDEV_EVENT_SLEEP_DETECT_INFO
{
    int nChannelID;                       
    int nAction;                          
    char szName[128];                     
    double PTS;                           
    NET_TIME_EX UTC;                      
    int nEventID;                         
    UINT nRuleID;                         
    EM_CLASS_TYPE emClassType;            
    DH_EVENT_FILE_INFO stuFileInfo;       
    UINT nPresetID;                       
    UINT nDetectRegionNum;                
    NET_POINT stuDetectRegion[20];        
    UINT nObjectNum;                      
    DH_MSG_OBJECT stuObjects[128];        
    BOOL bSceneImage;                     
    SCENE_IMAGE_INFO_EX stuSceneImage;    
    int nRuleCount;                       
    char szRuleType[16][32];              
    NET_IMAGE_INFO_EX2* pstuImageInfo;    
    int nImageInfoNum;                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[224];                 
} DEV_EVENT_SLEEP_DETECT_INFO;
typedef struct tagDEV_EVENT_WALK_AROUND_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                      
    EM_CLASS_TYPE emClassType;         
    DH_EVENT_FILE_INFO stuFileInfo;    
    UINT nPresetID;                    
    UINT nDetectRegionNum;             
    NET_POINT stuDetectRegion[20];     
    UINT nObjectNum;                   
    DH_MSG_OBJECT stuObjects[128];     
    BOOL bSceneImage;                  
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    BYTE byReserved[232];              
} DEV_EVENT_WALK_AROUND_DETECT_INFO;
typedef struct tagDEV_EVENT_PLAY_MOBILEPHONE_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                                     
    EM_CLASS_TYPE emClassType;                        
    DH_EVENT_FILE_INFO stuFileInfo;                   
    UINT nPresetID;                                   
    UINT nDetectRegionNum;                            
    NET_POINT stuDetectRegion[20];                    
    UINT nObjectNum;                                  
    DH_MSG_OBJECT stuObjects[128];                    
    BOOL bSceneImage;                                 
    SCENE_IMAGE_INFO_EX stuSceneImage;                
    NET_GPS_INFO stuGPSInfo;                          
    char szVideoPath[256];                            
    NET_IMAGE_INFO_EX2* pstuImageInfo;                
    int nImageInfoNum;                                
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;             
    BYTE byReserved[1012];                            
} DEV_EVENT_PLAY_MOBILEPHONE_INFO;
typedef struct tagDEV_EVENT_FINANCE_CONTRABAND_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                       
    EM_CLASS_TYPE emClassType;          
    DH_EVENT_FILE_INFO stuFileInfo;     
    UINT nPresetID;                     
    UINT nDetectRegionNum;              
    NET_POINT stuDetectRegion[20];      
    UINT nHumanDetectRegionNum;         
    NET_POINT stuHumanDetectRegion[20]; 
    UINT nObjectNum;                    
    DH_MSG_OBJECT stuObjects[128];      
    BYTE byReserved[1020];              
} DEV_EVENT_FINANCE_CONTRABAND_DETECT_INFO;
typedef struct tagDEV_EVENT_FINANCE_CASH_TRANSACTION_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;                       
    EM_CLASS_TYPE emClassType;          
    DH_EVENT_FILE_INFO stuFileInfo;     
    UINT nPresetID;                     
    UINT nDetectRegionNum;              
    NET_POINT stuDetectRegion[20];      
    UINT nHumanDetectRegionNum;         
    NET_POINT stuHumanDetectRegion[20]; 
    UINT nObjectNum;                    
    DH_MSG_OBJECT stuObjects[128];      
    BOOL bSceneImage;                   
    SCENE_IMAGE_INFO_EX stuSceneImage;  
    BYTE byReserved[228];               
} DEV_EVENT_FINANCE_CASH_TRANSACTION_INFO;
typedef enum tagEM_IRCUT_MODESWITCH_MODE
{
    EM_IRCUT_MODESWITCH_MODE_UNKNOWN, 
    EM_IRCUT_MODESWITCH_MODE_AUTO,    
    EM_IRCUT_MODESWITCH_MODE_DAY,     
    EM_IRCUT_MODESWITCH_MODE_NIGHT,   
} EM_IRCUT_MODESWITCH_MODE;
typedef enum tagEM_IRCUT_MODESWITCH_STATE
{
    EM_IRCUT_MODESWITCH_STATE_UNKNOWN, 
    EM_IRCUT_MODESWITCH_STATE_DAY,     
    EM_IRCUT_MODESWITCH_STATE_NIGHT,   
} EM_IRCUT_MODESWITCH_STATE;
typedef struct tagNET_DEV_EVENT_IRCUT_MODESWITCH_ALARM_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[128];                  
    double PTS;                        
    NET_TIME_EX UTC;                   
    int nEventID;                      
    EM_IRCUT_MODESWITCH_MODE emMode;   
    EM_IRCUT_MODESWITCH_STATE emState; 
    char szReserved[512];              
} NET_DEV_EVENT_IRCUT_MODESWITCH_ALARM_INFO;
typedef struct tagNET_DEV_EVENT_REMOTE_APPROVAL_ALARM_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nApprovalNo;                     
    int nType;                           
    int nTimeout;                        
    int nCabinListNum;                   
    int nCabinList[32];                  
    char szAccessorID[64];               
    char szAccessorName[64];             
    char szReviewerID[64];               
    char szReviewerName[64];             
    NET_IMAGE_INFO_EX2 stuImageInfo[32]; 
    int nImageInfoNum;                   
    char szReserved[508];                
} NET_DEV_EVENT_REMOTE_APPROVAL_ALARM_INFO;
typedef struct tagNET_DEV_EVENT_ANTI_COUNTERFEIT_INFO
{
    int nChannelID;                     
    int nAction;                        
    char szName[128];                   
    char szClass[16];                   
    UINT nRuleID;                       
    int nGroupID;                       
    int nCountInGroup;                  
    int nIndexInGroup;                  
    double PTS;                         
    NET_TIME_EX UTC;                    
    UINT nUTCMS;                        
    UINT nEventID;                      
    int nSequence;                      
    int nFrameSequence;                 
    int nDetectRegionNum;               
    NET_UINT_POINT stuDetectRegion[20]; 
    char szDirection[16];               
    char szAction[16];                  
    SCENE_IMAGE_INFO stuSceneImage;     
    DH_MSG_OBJECT stuObject;            
    int nMark;                          
    int nSource;                        
    UINT nEventSeq;                     
    char szReserved[1020]; 
} NET_DEV_EVENT_ANTI_COUNTERFEIT_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_SPEED_DIFFPREWARNING_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    double dbPTS;                                    
    UINT nEventID;                                   
    NET_TIME_EX stuUTC;                              
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    UINT nUTCMS;                                     
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    char byReserved1[4];                             
    BOOL bNonMotorInfoEx;                            
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    int nLane;                                       
    int nSequence;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DWORD dwSnapFlagMask;                            
    char szReserved[1020];                           
} NET_DEV_EVENT_TRAFFIC_SPEED_DIFFPREWARNING_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_DRIVER_IDENTIFIED_INFO
{
    int nChannelID;                       
    int nAction;                          
    char szName[128];                     
    double dbPTS;                         
    UINT nEventID;                        
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    UINT nUTCMS;                          
    DWORD dwSnapFlagMask;                 
    NET_GPS_STATUS_INFO stuGpsSatus;      
    char szDriverID[32];                  
    char szReserved[1024];                
} NET_DEV_EVENT_TRAFFIC_DRIVER_IDENTIFIED_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_QUEUE_OVERFLOW_INFO
{
    int nChannelID;                       
    int nAction;                          
    char szName[128];                     
    int nGroupID;                         
    int nCountInGroup;                    
    int nIndexInGroup;                    
    int nLane;                            
    int nFrameSequence;                   
    int nSequence;                        
    float fQueueLength;                   
    UINT nEventID;                        
    double dbPTS;                         
    NET_TIME_EX stuUTC;                   
    BOOL bVehicleInfo;                    
    BOOL bObjectInfo;                     
    BOOL bNonMotorInfo;                   
    DH_MSG_OBJECT stuVehicle;             
    DH_MSG_OBJECT stuObject;              
    VA_OBJECT_NONMOTOR stuNonMotor;       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} NET_DEV_EVENT_TRAFFIC_QUEUE_OVERFLOW_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_QUEUE_TIMEOUT_INFO
{
    int nChannelID;                       
    int nAction;                          
    char szName[128];                     
    int nGroupID;                         
    int nCountInGroup;                    
    int nIndexInGroup;                    
    UINT nEventID;                        
    double dbPTS;                         
    NET_TIME_EX stuUTC;                   
    char szReserved1[4];                  
    BOOL bVehicleInfo;                    
    int nLane;                            
    int nFrameSequence;                   
    int nSequence;                        
    BOOL bObjectInfo;                     
    BOOL bNonMotorInfo;                   
    DH_MSG_OBJECT stuVehicle;             
    DH_MSG_OBJECT stuObject;              
    VA_OBJECT_NONMOTOR stuNonMotor;       
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} NET_DEV_EVENT_TRAFFIC_QUEUE_TIMEOUT_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_PLATE_ABNORMAL_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    double dbPTS;                                    
    UINT nUTCMS;                                     
    UINT nEventID;                                   
    DH_MSG_OBJECT stuVehicle;                        
    DH_MSG_OBJECT stuObject;                         
    int nLane;                                       
    int nSequence;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DWORD dwSnapFlagMask;                            
    char szReserved[1020];                           
} NET_DEV_EVENT_TRAFFIC_PLATE_ABNORMAL_INFO;
typedef struct tagNET_DEV_EVENT_GARBAGE_PLASTICBAG_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                 
    char szClass[16];                 
    NET_TIME_EX stuUTC;               
    int nGroupID;                     
    int nCountInGroup;                
    int nIndexInGroup;                
    double dbPTS;                     
    UINT nEventID;                    
    int nObjectCount;                 
    DH_MSG_OBJECT stuObjects[64];     
    NET_POINT_EX stuDetectRegion[20]; 
    int nDetectRegionCount;           
    UINT nPresetID;                   
    char szPresetName[64];            
    char szSourceID[32];              
    char szReserved[1024];            
} NET_DEV_EVENT_GARBAGE_PLASTICBAG_INFO;
typedef struct tagNET_DEV_EVENT_POSITION_SNAP_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szType[64];                      
    int nPresetID;                        
    char szPresetName[64];                
    NET_GPS_INFO stuGPSInfo;              
    int nAbsposition[3];                  
    char szReserved[1024];                
} NET_DEV_EVENT_POSITION_SNAP_INFO;
typedef struct tagNET_DETECT_REGION_INFO_EX
{
    int nDetectRegionCount;           
    NET_POINT_EX stuDetectRegion[20]; 
    char szReserved[428];             
} NET_DETECT_REGION_INFO_EX;
typedef struct tagNET_DEV_EVENT_MULTI_MAN_NUM_DETECTION_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    char szName[128];                                
    char szClass[16];                                
    double dbPTS;                                    
    NET_TIME_EX stuUTC;                              
    int nObjectsRealNum;                             
    DH_MSG_OBJECT stuObjects[128];                   
    NET_DETECT_REGION_INFO_EX* pstuDetectRegionInfo; 
    int nDetectRegionInfoCount;                      
    char szReserved[1020 - POINTERSIZE];             
} NET_DEV_EVENT_MULTI_MAN_NUM_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_USERMANAGER_FOR_TWSDK_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szUserID[9];                           
    char szReserved1[7];                        
    char szUserName[64];                        
    int nUserType;                              
    int nUseTime;                               
    int nAuthority;                             
    int nTimeSectionNum;                        
    UINT nTimeSections[64];                     
    NET_TIME stuValidTo;                        
    UINT nSpecialDaysSchedule[64];              
    int nSpecialDaysScheduleNum;                
    int nType;                                  
    char szPassword[9];                         
    char szReserved2[7];                        
    char szFaceList[5][2048];                   
    int nFaceListNum;                           
    int nCardListNum;                           
    char szCardList[5][32];                     
    char szFingerList[5][256];                  
    int nFingerListNum;                         
    BOOL bDelAllUser;                           
    NET_TIME stuValidFrom;                      
    char szSN[32];                              
    UINT nUserCount;                            
    UINT nFingerCount;                          
    UINT nFaceCount;                            
    UINT nCardCount;                            
    NET_USERMANAGER_IMAGE_INFO stuImageInfo[5]; 
    int nImageInfoCount;                        
    char szReserved[572];                       
} NET_DEV_EVENT_USERMANAGER_FOR_TWSDK_INFO;
typedef struct tagNET_DEV_EVENT_OBJECT_QUANTITY_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    UINT nEventID;                        
    char szName[128];                     
    char szClass[16];                     
    double dbPTS;                         
    DH_MSG_OBJECT stuObjects[128];        
    int nObjectsRealNum;                  
    int nDetectRegionRealNum;             
    UINT nDetectRegion[20][2];            
    char szReserved[1024];                
} NET_DEV_EVENT_OBJECT_QUANTITY_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_DRIVE_ASSISTANT_ALARM_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    UINT nEventID;                        
    char szName[128];                     
    char szClass[16];                     
    double dbPTS;                         
    UINT nForwardCollideFlag;        
    UINT nForwardCollideReportFlag;  
    float fForwardCollideTime;       
    UINT nTooCloseFlag;              
    UINT nTooCloseReportFlag;        
    UINT nDepartureState;            
    UINT nDepartureReportState;      
    UINT nDepartureLaneType;         
    UINT nSolidLaneChangeFlag;       
    UINT nSolidLaneChangeReportFlag; 
    NET_OBJECT_IMAGE_INFO stuImageInfo;     
    UINT nFrontCarGoFlag;                   
    UINT nPedestrianOnZebraFlag;            
    UINT nPedestrianOnZebraDiscourtesyFlag; 
    UINT nTrafficLightStateFlag;            
    UINT nTrafficSignsHighSpeed;            
    UINT nTrafficSignsLowSpeed;             
    char szForwardCollideObjectType[16];    
    char szReserved[1024]; 
} NET_DEV_EVENT_DRIVE_ASSISTANT_ALARM_INFO;
typedef struct tagNET_DEV_EVENT_FISH_STATE_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                     
    char szClass[16];                     
    int nGroupID;                         
    int nCountInGroup;                    
    int nIndexInGroup;                    
    NET_TIME_EX stuUTC;                   
    double dbPTS;                         
    UINT nEventID;                        
    int nObjectCount;                       
    NET_VAOBJECT_ANIMAL_INFO stuObjects[8]; 
    NET_OBJECT_IMAGE_INFO stuSceneImage;    
    UINT nPresetID;                         
    int nDetectRegionCount;                 
    NET_POINT stuDetectRegion[20];          
    char szUserName[32];                    
    UINT nCurrentQuantity;                  
    UINT nAssessmentQuantity;               
    int nType;                              
    UINT nActualQuantity;                   
    int nLowFish;                           
    char szReserved[1020]; 
} NET_DEV_EVENT_FISH_STATE_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_CONVEYOR_NTH_TO_STH_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                     
    char szClass[16];                     
    UINT nEventID;                        
    NET_TIME_EX stuUTC;                   
    double dbPTS;                         
    UINT nRuleID;                         
    int nObjectCount;                     
    DH_MSG_OBJECT stuObjects[32];         
    NET_OBJECT_IMAGE_INFO stuSceneImage;  
    NET_POINT stuDetectRegion[20];        
    int nDetectRegionCount;               
    char szReserved[1020];                
} NET_DEV_EVENT_CONVEYOR_NTH_TO_STH_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_CONVEYOR_STH_TO_NTH_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                     
    char szClass[16];                     
    NET_TIME_EX stuUTC;                   
    double dbPTS;                         
    UINT nRuleID;                         
    int nObjectCount;                     
    DH_MSG_OBJECT stuObjects[32];         
    NET_OBJECT_IMAGE_INFO stuSceneImage;  
    NET_POINT stuDetectRegion[20];        
    int nDetectRegionCount;               
    char szReserved[1024];                
} NET_DEV_EVENT_CONVEYOR_STH_TO_NTH_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_CO_LOW_ALARM_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    int nCOConcentration;                 
    char szReserved[1024];                
} NET_DEV_EVENT_CO_LOW_ALARM_INFO;
typedef struct tagNET_DEV_EVENT_CO_HIGH_ALARM_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    int nCOConcentration;                 
    char szReserved[1024];                
} NET_DEV_EVENT_CO_HIGH_ALARM_INFO;
typedef struct tagNET_CIGARETTE_CASE_INFO
{
    char szCigaretteType[128]; 
    UINT CigaretteNum;     
    char szReserved[1020]; 
} NET_CIGARETTE_CASE_INFO;
typedef struct tagNET_DEV_EVENT_CIGARETTE_CASE_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    char szName[128];                                 
    double PTS;                                       
    EM_CLASS_TYPE emClassType;                        
    UINT nUTCMS;                                      
    UINT nEventID;                                    
    int nGroupID;                                     
    int nCountInGroup;                                
    int nIndexInGroup;                                
    UINT nCigaretteCaseNum;                           
    NET_CIGARETTE_CASE_INFO stuCigaretteCaseInfo[50]; 
    char szReserved[1024];                            
} NET_DEV_EVENT_CIGARETTE_CASE_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_TIMECHANGE_FOR_TWSDK_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME stuBeforeModifyTime;         
    NET_TIME stuModifiedTime;             
    char szSN[32];                        
    NET_TIME_EX stuUTC;                   
    char szReserved[1020];                
} NET_DEV_EVENT_TIMECHANGE_FOR_TWSDK_INFO;
typedef enum tagEM_CONVEYOR_BELT_RULETYPE_RULE_TYPE
{
    EM_CONVEYOR_BELT_RULETYPE_RULE_TYPE_UNKNOWN,      
    EM_CONVEYOR_BELT_RULETYPE_RULE_TYPE_STH_TO_NTH,   
    EM_CONVEYOR_BELT_RULETYPE_RULE_TYPE_NTH_TO_STH,   
    EM_CONVEYOR_BELT_RULETYPE_RULE_TYPE_MOVE_TO_STOP, 
    EM_CONVEYOR_BELT_RULETYPE_RULE_TYPE_STOP_TO_MOVE, 
} EM_CONVEYOR_BELT_RULETYPE_RULE_TYPE;
typedef struct tagNET_DEV_EVENT_CONVEYOR_BELT_STATUS_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                     
    char szClass[16];                     
    NET_TIME_EX stuUTC;                   
    UINT nEventID;                        
    NET_POINT stuDetectRegion[20];                      
    int nDetectRegionCount;                             
    float fCoalData;                                    
    UINT nStatusType;                                   
    UINT nObjectStatusType;                             
    NET_OBJECT_IMAGE_INFO stuSceneImage;                
    int nRuleTypeCount;                                 
    EM_CONVEYOR_BELT_RULETYPE_RULE_TYPE emRuleType[16]; 
    UINT nStatusTypeObjRst;                             
    char szReserved[1020];                              
} NET_DEV_EVENT_CONVEYOR_BELT_STATUS_INFO;
typedef struct tagNET_DEV_EVENT_HOSPITAL_TALK_CONTROL_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    char szCitizenName[128];                    
    char szCitizenIDNo[20];                     
    char szPatientIdentity[20];                 
    UINT nMode;                                 
    UINT nStatus;                               
    UINT nCardType;                             
    UINT nImageInfoNum;                         
    NET_USERMANAGER_IMAGE_INFO stuImageInfo[6]; 
    char szReserved[1024];                      
} NET_DEV_EVENT_HOSPITAL_TALK_CONTROL_INFO;
typedef enum tagEM_STATIONINFO_SITE_TYPE
{
    EM_STATIONINFO_SITE_UNKNOWN, 
    EM_STATIONINFO_SITE_SIGNIN,  
    EM_STATIONINFO_SITE_SIGNOUT, 
    EM_STATIONINFO_SITE_NORMAL,  
} EM_STATIONINFO_SITE_TYPE;
typedef struct tagNET_DEV_EVENT_SCHOOL_BUS_SWIPE_CARD_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    char szCardID[64];                   
    NET_TIME_EX stuSwipeTime;            
    char szSiteName[64];                 
    EM_STATIONINFO_SITE_TYPE emSiteType; 
    NET_TIME_EX stuStartTime;            
    NET_TIME_EX stuEndTime;              
    NET_GPS_STATUS_INFO stuGPS;          
    char szReserved[1024];               
} NET_DEV_EVENT_SCHOOL_BUS_SWIPE_CARD_INFO;
typedef struct tagNET_DOOR_STATUS_FOR_BOX
{
    int nNumber;         
    int nStatus;         
    char szReserved[64]; 
} NET_DOOR_STATUS_FOR_BOX;
typedef struct tagNET_DEV_EVENT_DOOR_STATUS_FOR_BOX_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    NET_DOOR_STATUS_FOR_BOX stuDoorStatus[256]; 
    int nDoorStatusNum;                         
    char szReserved[1020];                      
} NET_DEV_EVENT_DOOR_STATUS_FOR_BOX_INFO;
typedef struct tagNET_DEV_EVENT_COLD_SPOT_WARNING_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    NET_POINT_EX stuPoint;                  
    float fColdSpotValue;                   
    NET_TEMPERATURE_UNIT emTemperatureUnit; 
    char szReserved[1024];                  
} NET_DEV_EVENT_COLD_SPOT_WARNING_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_ACCELERATION_RAPID_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    NET_TIME_EX stuUTC;                              
    UINT nEventID;                                   
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    int nLane;                                       
    double dbPTS;                                    
    DH_MSG_OBJECT stuVehicle;                        
    DH_MSG_OBJECT stuObject;                         
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    BOOL bHasNonMotor;                               
    int nSequence;                                   
    int nSpeed;                                      
    int nTriggerType;                                
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nEventType;                                  
    char szReserved[1024];                           
} NET_DEV_EVENT_TRAFFIC_ACCELERATION_RAPID_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_TURN_SHARP_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    NET_TIME_EX stuUTC;                              
    UINT nEventID;                                   
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    int nLane;                                       
    double dbPTS;                                    
    DH_MSG_OBJECT stuVehicle;                        
    DH_MSG_OBJECT stuObject;                         
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    BOOL bHasNonMotor;                               
    int nSequence;                                   
    int nSpeed;                                      
    int nTriggerType;                                
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    char szReserved[1020];                           
} NET_DEV_EVENT_TRAFFIC_TURN_SHARP_INFO;
typedef struct tagNET_DEV_EVENT_PASSENGER_FLOW_ALARM_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    int nAlarmType;                       
    NET_TIME stuTime;                     
    NET_GPS_STATUS_INFO stuGPSStatus;     
    char szCarNo[12];                     
    UINT nPassengerNum;                   
    char szReserved[1024];                
} NET_DEV_EVENT_PASSENGER_FLOW_ALARM_INFO;
typedef struct tagNET_DRIVER_MISMATCH_INFO
{
    char szFaceID[32];       
    char szOrganization[32]; 
    char szReserved[256];    
} NET_DRIVER_MISMATCH_INFO;
typedef struct tagNET_CARD_MISMATCH_INFO
{
    char szCardID[32];       
    char szOrganization[32]; 
    char szReserved[256];    
} NET_CARD_MISMATCH_INFO;
typedef struct tagNET_VEHICLE_MISMATCH_INFO
{
    char szOrganization[32]; 
    char szReserved[256];    
} NET_VEHICLE_MISMATCH_INFO;
typedef struct tagNET_DEV_EVENT_DRIVER_MISMATCH_CERTIFICATE_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    NET_GPS_STATUS_INFO stuGPSStatus;     
    NET_DRIVER_MISMATCH_INFO stuDriverInfo; 
    NET_CARD_MISMATCH_INFO stuCardInfo;     
    char szReserved[1024];                  
} NET_DEV_EVENT_DRIVER_MISMATCH_CERTIFICATE_INFO;
typedef struct tagNET_DEV_EVENT_DRIVER_MISMATCH_VEHICLE_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    NET_GPS_STATUS_INFO stuGPSStatus;     
    NET_DRIVER_MISMATCH_INFO stuDriverInfo;   
    NET_VEHICLE_MISMATCH_INFO stuVehicleInfo; 
    char szReserved[1024];                    
} NET_DEV_EVENT_DRIVER_MISMATCH_VEHICLE_INFO;
typedef struct tagNET_DEV_EVENT_CERTIFICATE_MISMATCH_VEHICLE_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    NET_GPS_STATUS_INFO stuGPSStatus;     
    NET_CARD_MISMATCH_INFO stuCardInfo;       
    NET_VEHICLE_MISMATCH_INFO stuVehicleInfo; 
    char szReserved[1024];                    
} NET_DEV_EVENT_CERTIFICATE_MISMATCH_VEHICLE_INFO;
typedef struct tagNET_BATTERY_LOW_POWER_INFO
{
    UINT nVoltage;        
    UINT nPercent;        
    char szReserved[256]; 
} NET_BATTERY_LOW_POWER_INFO;
typedef struct tagNET_TEMP_SENSOR_INFO
{
    double dbValue;       
    char szUnit[8];       
    char szReserved[256]; 
} NET_TEMP_SENSOR_INFO;
typedef struct tagNET_HUMIDITY_SENSOR_INFO
{
    double dbValue;       
    char szUnit[8];       
    char szReserved[256]; 
} NET_HUMIDITY_SENSOR_INFO;
typedef struct tagNET_FINANCIAL_ALARM_INFO
{
    NET_BATTERY_LOW_POWER_INFO stuBatteryLowPower; 
    NET_TEMP_SENSOR_INFO stuTempSensor;            
    NET_HUMIDITY_SENSOR_INFO stuHumiditySensor;    
    char szReserved[1024];                         
} NET_FINANCIAL_ALARM_INFO;
typedef struct tagNET_DEV_EVENT_FINANCIAL_CABINET_ALARM_EVENT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szUserID[32];                     
    char szAlarmType[32];                  
    NET_FINANCIAL_ALARM_INFO stuAlarmInfo; 
    UINT nAlarmLevel;                      
    char szReserved[1020];                 
} NET_DEV_EVENT_FINANCIAL_CABINET_ALARM_EVENT_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_RUNASTOP_SIGN_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    UINT nUTCMS;                                     
    double dbPTS;                                    
    NET_TIME_EX stuUTC;                              
    UINT nEventID;                                   
    int nLane;                                       
    int nSequence;                                   
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1020];                           
} NET_DEV_EVENT_TRAFFIC_RUNASTOP_SIGN_INFO;
typedef struct tagNET_DEV_EVENT_TRAFFIC_VEHICLE_OVERLOAD_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    UINT nUTCMS;                                     
    double dbPTS;                                    
    NET_TIME_EX stuUTC;                              
    UINT nEventID;                                   
    int nLane;                                       
    int nSequence;                                   
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1024];                           
} NET_DEV_EVENT_TRAFFIC_VEHICLE_OVERLOAD_INFO;
typedef struct tagDEV_EVENT_DOOR_STATUS_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    char szSerialNumber[256]; 
    EM_DOOR_STATUS emStatus;  
    BOOL bRealUTC;            
    NET_TIME_EX RealUTC;      
    BYTE byReserved[970];     
} DEV_EVENT_DOOR_STATUS_INFO;
typedef struct tagNET_VIS_SCENE_IMAGE
{
    UINT nOffset;        
    UINT nLength;        
    UINT nWidth;         
    UINT nHeight;        
    UINT nIndexInData;   
    BYTE byReserved[60]; 
} NET_VIS_SCENE_IMAGE;
typedef struct tagNET_THERMAL_SCENE_IMAGE
{
    UINT nOffset;        
    UINT nLength;        
    UINT nWidth;         
    UINT nHeight;        
    UINT nIndexInData;   
    BYTE byReserved[60]; 
} NET_THERMAL_SCENE_IMAGE;
typedef struct tagDEV_EVENT_ANATOMY_TEMP_DETECT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    EM_CLASS_TYPE emClassType;                   
    UINT nPresetID;                              
    NET_MAN_TEMP_INFO stManTempInfo;             
    NET_VIS_SCENE_IMAGE stVisSceneImage;         
    NET_THERMAL_SCENE_IMAGE stThermalSceneImage; 
    UINT nSequence;                              
    UINT nEventRelevanceID;                      
    BOOL bIsFaceRecognition;                     
    NET_IMAGE_INFO_EX2* pstuImageInfo;           
    int nImageInfoNum;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx;        
    BYTE byReserved[1004];                       
} DEV_EVENT_ANATOMY_TEMP_DETECT_INFO;
typedef struct tagDEV_EVENT_DHOP_CUSTOM_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    NET_TIME_EX UTC;  
    int nEventID;     
    int nSourceIndex;             
    BYTE byReserved1[4];          
    NET_DHOP_APP_INFO stuAppInfo; 
    char szCustomData[4096];      
    double PTS;                   
    char szClass[32];             
    BYTE byReserved[2008];        
} DEV_EVENT_DHOP_CUSTOM_INFO;
typedef enum tagEM_FOG_DETECTION_EVENT_TYPE
{
    EM_FOG_DETECTION_EVENT_TYPE_UNKNOWN, 
    EM_FOG_DETECTION_EVENT_TYPE_REAL,    
    EM_FOG_DETECTION_EVENT_TYPE_ALARM,   
} EM_FOG_DETECTION_EVENT_TYPE;
typedef enum tagEM_FOG_LEVEL
{
    EM_FOG_LEVEL_UNKNOWN, 
    EM_FOG_LEVEL_NO,      
    EM_FOG_LEVEL_BLUE,    
    EM_FOG_LEVEL_YELLOW,  
    EM_FOG_LEVEL_ORANGE,  
    EM_FOG_LEVEL_RED,     
} EM_FOG_LEVEL;
typedef struct tagFOG_DETECTION_FOG_INFO
{
    EM_FOG_LEVEL emFogLevel; 
    BYTE byReserved[508];    
} FOG_DETECTION_FOG_INFO;
typedef struct tagDEV_EVENT_FOG_DETECTION
{
    int nChannelID;                          
    int nAction;                             
    char szName[128];                        
    double PTS;                              
    NET_TIME_EX UTC;                         
    int nEventID;                            
    EM_CLASS_TYPE emClassType;               
    int nGroupID;                            
    int nCountInGroup;                       
    int nIndexInGroup;                       
    int nPresetID;                           
    char szPresetName[128];                  
    EM_FOG_DETECTION_EVENT_TYPE emEventType; 
    FOG_DETECTION_FOG_INFO stuFogInfo;       
    DH_EVENT_FILE_INFO stFileInfo;           
    BYTE byReserved[1024];                   
} DEV_EVENT_FOG_DETECTION;
typedef struct tagDEV_EVENT_TRAFFIC_VEHICLE_BC
{
    int nChannelID;                                 
    int nAction;                                    
    char szName[128];                               
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nGroupID;                                   
    int nCountInGroup;                              
    int nIndexInGroup;                              
    int nLane;                                      
    int nSequence;                                  
    EVENT_COMM_INFO stCommInfo;                     
    DH_EVENT_FILE_INFO stFileInfo;                  
    BYTE byReserved[1024];                          
} DEV_EVENT_TRAFFIC_VEHICLE_BC;
typedef struct tagDEV_EVENT_TRAFFIC_MOTOR_OVERLOAD_INFO
{
    int nChannelID;                                 
    int nAction;                                    
    char szName[128];                               
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    int nLane;                                      
    int nSequence;                                  
    EVENT_COMM_INFO stCommInfo;                     
    DH_MSG_OBJECT_SUPPLEMENT stuObjectInfoEx;       
    BYTE byReserved[720];                           
} DEV_EVENT_TRAFFIC_MOTOR_OVERLOAD_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PLATE_OCCLUSION_INFO
{
    int nChannelID;                                 
    int nAction;                                    
    char szName[128];                               
    double PTS;                                     
    NET_TIME_EX UTC;                                
    int nEventID;                                   
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    int nLane;                                      
    int nSequence;                                  
    EVENT_COMM_INFO stCommInfo;                     
    BYTE byReserved[1024];                          
} DEV_EVENT_TRAFFIC_PLATE_OCCLUSION_INFO;
typedef struct tagNET_CAMERA_PTZ_INFO
{
    PTZ_SPACE_UNIT stuPosition; 
    unsigned int nAngelH;       
    unsigned int nAngelV;       
    char szreserved[60];        
} NET_CAMERA_PTZ_INFO;
typedef struct tagDEV_EVENT_BREAK_RULE_BUILDING_DETECTION_INFO
{
    int nChannelID;                     
    int nAction;                        
    char szName[128];                   
    double PTS;                         
    NET_TIME_EX UTC;                    
    EM_CLASS_TYPE emClassType;          
    SCENE_IMAGE_INFO stuSceneImageInfo; 
    DWORD dwEventID;                    
    char szreserved[4];                 
    NET_CAMERA_PTZ_INFO stuCameraPtz;   
    NET_RECT stuBoundingBox;            
    int nObjectNum;                     
    DH_MSG_OBJECT stuObjects[128];      
    BYTE byReserved[888];               
} DEV_EVENT_BREAK_RULE_BUILDIING_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_ROAD_ALERT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    int nGroupID;                                   
    int nCountInGroup;                              
    int nIndexInGroup;                              
    int nLane;                                      
    EVENT_COMM_INFO stCommInfo;                     
    DH_EVENT_FILE_INFO stFileInfo;                  
    int nSequence;                                  
    BYTE byReserved[1020];                          
} DEV_EVENT_TRAFFIC_ROAD_ALERT_INFO;
typedef struct tagDEV_EVENT_NONMOTOR_ENTRYING_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nRuleID;                         
    int nSequence;                       
    EM_CLASS_TYPE emClassType;           
    int nObjectNum;                      
    VA_OBJECT_NONMOTOR stuObjects[8];    
    SCENE_IMAGE_INFO_EX stuSceneImage;   
    NET_IMAGE_INFO_EX2 stuImageInfo[32]; 
    int nImageInfoNum;                   
    char byReserved[1024];               
} DEV_EVENT_NONMOTOR_ENTRYING_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NONMOTOR_RUN_REDLIGHT_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    int nSequence;                    
    int nLane;                        
    VA_OBJECT_NONMOTOR stuNonMotor;   
    EVENT_COMM_INFO stCommInfo;       
    DH_EVENT_FILE_INFO stuFileInfo;   
    DH_RESOLUTION_INFO stuResolution; 
    BYTE byReserved[1016];            
} DEV_EVENT_TRAFFIC_NONMOTOR_RUN_REDLIGHT_INFO;
typedef struct tagDEV_EVENT_PRAM_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    EM_CLASS_TYPE emClassType; 
    UINT nRuleID;              
    int nGroupID;              
    int nCountInGroup;         
    int nIndexInGroup;         
    UINT nPresetID;            
    DH_MSG_OBJECT stuObjects[128]; 
    int nObjectNum;                
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    BYTE byReversed[1024]; 
} DEV_EVENT_PRAM_DETECTION_INFO;
typedef struct tagDEV_EVENT_BIG_BAGGAGE_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    EM_CLASS_TYPE emClassType; 
    UINT nRuleID;              
    int nGroupID;              
    int nCountInGroup;         
    int nIndexInGroup;         
    UINT nPresetID;            
    DH_MSG_OBJECT stuObjects[128]; 
    int nObjectNum;                
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    BYTE byReversed[1024]; 
} DEV_EVENT_BIG_BAGGAGE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TICKET_EVADE_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    EM_CLASS_TYPE emClassType; 
    UINT nRuleID;              
    int nGroupID;              
    int nCountInGroup;         
    int nIndexInGroup;         
    UINT nPresetID;            
    DH_MSG_OBJECT stuObjects[128]; 
    int nObjectNum;                
    int nDetectRegionNum;                               
    DH_POINT stuDetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    BYTE byReversed[1024]; 
} DEV_EVENT_TICKET_EVADE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_VEHICLE_IN_EMERGENCY_LANE_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[DH_EVENT_NAME_LEN];                  
    DWORD PTS;                                       
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    int nLane;                                       
    DH_MSG_OBJECT stuObject;                         
    BYTE byReserved1[4];                             
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    BYTE byReserved2[4];                             
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    int nSequence;                                   
    DH_EVENT_FILE_INFO stuFileInfo;                  
    EVENT_COMM_INFO stuCommInfo;                     
    BYTE byReserved[1024];                           
} DEV_EVENT_TRAFFIC_VEHICLE_IN_EMERGENCY_LANE_INFO;
typedef enum tagEM_OBJECT_ACTION
{
    EM_OBJECT_ACTION_UNKNOWN,    
    EM_OBJECT_ACTION_APPEAR,     
    EM_OBJECT_ACTION_MOVE,       
    EM_OBJECT_ACTION_STAY,       
    EM_OBJECT_ACTION_REMOVE,     
    EM_OBJECT_ACTION_DISAPPERAR, 
    EM_OBJECT_ACTION_SPLIT,      
    EM_OBJECT_ACTION_MERGE,      
    EM_OBJECT_ACTION_RENAME,     
} EM_OBJECT_ACTION;
typedef struct tagFOREIGN_MATTER_OBJECT
{
    DWORD dwObjectID;          
    EM_OBJECT_ACTION emAction; 
    NET_RECT stuBoundingBox;   
    BYTE byReserved[256];      
} FOREIGN_MATTER_OBJECT;
typedef struct tagDEV_EVENT_POWERLINE_FOREIGN_DETEC_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    DWORD PTS;        
    NET_TIME_EX UTC;  
    int nEventID;     
    EM_CLASS_TYPE emClassType;     
    int nRuleID;                   
    int nCount;                    
    int nPresetID;                 
    int nDetectRegionNum;          
    NET_POINT stuDetectRegion[20]; 
    int nForeignMatterNum;                 
    FOREIGN_MATTER_OBJECT* pForeignMatter; 
    void* pReserved;                       
    BYTE byReserved[1024];                 
} DEV_EVENT_POWERLINE_FOREIGN_DETEC_INFO;
typedef enum tagEM_TRIGGER_OCCUR_TYPE
{
    EM_TRIGGER_OCCUR_TYPE_UNKNOWN = -1, 
    EM_TRIGGER_OCCUR_TYPE_ENTER,        
    EM_TRIGGER_OCCUR_TYPE_LEAVE,        
} EM_TRIGGER_OCCUR_TYPE;
typedef enum tagEM_CAPTURE_PROCESS_END_TYPE
{
    EM_CAPTURE_PROCESS_END_TYPE_UNKNOWN = -1, 
    EM_CAPTURE_PROCESS_END_TYPE_ABNORMAL,     
    EM_CAPTURE_PROCESS_END_TYPE_NORMAL,       
} EM_CAPTURE_PROCESS_END_TYPE;
typedef struct tagRADAR_REPORTS_VEHICLE_INFO
{
    UINT nVehicleId;                                 
    UINT nVehicleLength;                             
    UINT nVehicleWidth;                              
    UINT nVehicleHeight;                             
    UINT nVehicleVolume;                             
    UINT nLaneID;                                    
    EM_VEHICLE_DRIVING_DIRECTION emDrivingDirection; 
    char szDetectTime[32];                           
    UINT nVehicleRailingHigh;                        
    UINT nVehicleSpeed;                              
    EM_RADAR_DETECTION_VEHICLE_TYPE emVehicleType;   
    UINT nAxisNum;                                   
    UINT nAxisType;                                  
    BYTE byResverd[260];                             
} RADAR_REPORTS_VEHICLE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_CAR_MEASUREMENT_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    DH_EVENT_FILE_INFO stuFileInfo; 
    UINT nEventID;                  
    UINT nSpeed;                                           
    EM_TRIGGER_TYPE emTriggerType;                         
    EM_TRIGGER_OCCUR_TYPE emTriggerOccur;                  
    UINT nMark;                                            
    UINT nSource;                                          
    UINT nFrameSequence;                                   
    int nLaneID;                                           
    NET_TIME_EX stuRedLightStartTime;                      
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;          
    EVENT_CARD_INFO stuCardInfo;                           
    EM_VEHICLE_DRIVING_DIRECTION emDrivingDirection;       
    EM_TRFAFFIC_LIGHT_TYPE emLightState;                   
    EM_OPEN_STROBE_STATE emOpenStrobeState;                
    EM_VEHICLE_DIRECTION emVehicleDirection;               
    NET_SAFEBELT_STATE emMainSeat;                         
    NET_SAFEBELT_STATE emSlaveSeat;                        
    EVENT_PLATE_INFO stuPlateInfo;                         
    NET_CAR_WEIGHT_INFO stuCarWeightInfo;                  
    RADAR_REPORTS_VEHICLE_INFO stuRadarReportsVehicleInfo; 
    EVENT_COMM_INFO stuCommInfo;                           
    DH_MSG_OBJECT stuObject;                               
    DH_MSG_OBJECT stuVehicle;                              
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;        
    DWORD dwSnapFlagMask;                                  
    BYTE byResersed[1020];                                 
} DEV_EVENT_TRAFFIC_CAR_MEASUREMENT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_TURN_RIGHT_OVER_LINE_INFO
{
    char szName[128];                               
    int nChannelID;                                 
    int nAction;                                    
    int nGroupID;                                   
    int nCountInGroup;                              
    int nIndexInGroup;                              
    NET_TIME_EX UTC;                                
    double dbPTS;                                   
    DH_MSG_OBJECT stuVehicle;                       
    DH_MSG_OBJECT stuObject;                        
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    UINT nEventID;                                  
    EM_TRIGGER_TYPE emTriggerType;                  
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nSpeed;                                     
    int nLane;                                      
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    DWORD dwSnapFlagMask;                           
    BYTE byReserved[1020];                          
} DEV_EVENT_TRAFFIC_TURN_RIGHT_OVER_LINE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_DRIVE_ON_LINE_INFO
{
    char szName[128];                               
    int nChannelID;                                 
    int nAction;                                    
    int nGroupID;                                   
    int nCountInGroup;                              
    int nIndexInGroup;                              
    NET_TIME_EX UTC;                                
    double dbPTS;                                   
    DH_MSG_OBJECT stuVehicle;                       
    DH_MSG_OBJECT stuPlateObject;                   
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    UINT nEventID;                                  
    int nLane;                                      
    int nSequence;                                  
    DWORD dwSnapFlagMask;                           
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stCommInfo;                     
    BYTE byReserved[1024];                          
} DEV_EVENT_TRAFFIC_DRIVE_ON_LINE_INFO;
typedef struct tagDEV_EVENT_OBJECT_PLACEMENT_DETECTION_INFO
{
    char szName[128];                     
    int nChannelID;                       
    int nAction;                          
    double dbPTS;                         
    NET_TIME_EX UTC;                      
    UINT nUTCMS;                          
    UINT nEventID;                        
    EM_CLASS_TYPE emClassType;            
    DWORD dwSnapFlagMask;                 
    UINT nRuleID;                         
    UINT nPreRecord;                      
    DH_MSG_OBJECT stuObject;              
    SCENE_IMAGE_INFO stuSceneImage;       
    int nObjectCount;                     
    DH_MSG_OBJECT_EX2 stuObjects[128];    
    NET_IMAGE_INFO_EX2* pstuImageInfo;    
    int nImageInfoNum;                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char Reserved[1012];                  
} DEV_EVENT_OBJECT_PLACEMENT_DETECTION_INFO;
typedef struct tagDEV_EVENT_OBJECT_REMOVAL_DETECTION_INFO
{
    char szName[128];                     
    int nChannelID;                       
    int nAction;                          
    double dbPTS;                         
    NET_TIME_EX UTC;                      
    UINT nUTCMS;                          
    UINT nEventID;                        
    EM_CLASS_TYPE emClassType;            
    DWORD dwSnapFlagMask;                 
    UINT nRuleID;                         
    UINT nPreRecord;                      
    DH_MSG_OBJECT stuObject;              
    SCENE_IMAGE_INFO stuSceneImage;       
    int nObjectCount;                     
    DH_MSG_OBJECT_EX2 stuObjects[128];    
    NET_IMAGE_INFO_EX2* pstuImageInfo;    
    int nImageInfoNum;                    
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char Reserved[1012];                  
} DEV_EVENT_OBJECT_REMOVAL_DETECTION_INFO;
typedef struct tagDEV_EVENT_MANUAL_ALARM_INFO
{
    int nAction;     
    int nChannel;    
    NET_TIME_EX UTC; 
    int nEventID;    
    int nImageNum;                                     
    SCENE_IMAGE_INFO stuImages[3];                     
    NET_GPS_STATUS_INFO stuGPSStatus;                  
    char szName[128];                                  
    UINT nACK;                                         
    int nGroupID;                                      
    double dbPTS;                                      
    UINT nUTCMS;                                       
    int nCountInGroup;                                 
    int nIndexInGroup;                                 
    int nMark;                                         
    int nFrameSequence;                                
    int nLane;                                         
    int nSequence;                                     
    DH_MSG_OBJECT_EX2* pstuVehicle;                    
    DH_MSG_OBJECT_EX2* pstuObject;                     
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO* pstuTrafficCar; 
    EVENT_COMM_INFO* pstuCommInfo;                     
    BYTE byReserved[836 - 4 * POINTERSIZE];            
} DEV_EVENT_MANUAL_ALARM_INFO;
typedef enum tagEM_SECURITY_IMAGE_TYPE
{
    EM_SECURITY_IMAGE_UNKNOWN = -1, 
    EM_SECURITY_IMAGE_INSPECTOR,    
    EM_SECURITY_IMAGE_PACKAGE       
} EM_SECURITY_IMAGE_TYPE;
typedef struct tagNET_SECURITY_IMAGE_LIST
{
    EM_SECURITY_IMAGE_TYPE emImageType; 
    unsigned int nOffset;               
    unsigned int nLen;                  
    char szReserved[60];                
} NET_SECURITY_IMAGE_LIST;
typedef struct tagDEV_EVENT_SECURITY_INSPECTOR_LOOKAROUND_INFO
{
    int nChannelID;                           
    int nAction;                              
    char szName[128];                         
    double dbPTS;                             
    NET_TIME_EX stuUTC;                       
    char szUserName[32];                      
    NET_SECURITY_IMAGE_LIST stuImageList[32]; 
    unsigned int nImageListCount;             
    char szReserved[1020];                    
} DEV_EVENT_SECURITY_INSPECTOR_LOOKAROUND_INFO;
typedef struct tagDEV_EVENT_SECURITY_INSPECTOR_LOWERHEAD_INFO
{
    int nChannelID;                           
    int nAction;                              
    char szName[128];                         
    double dbPTS;                             
    NET_TIME_EX stuUTC;                       
    char szUserName[32];                      
    NET_SECURITY_IMAGE_LIST stuImageList[32]; 
    unsigned int nImageListCount;             
    char szReserved[1020];                    
} DEV_EVENT_SECURITY_INSPECTOR_LOWERHEAD_INFO;
typedef struct tagDEV_EVENT_SECURITY_INSPECTOR_TIRED_INFO
{
    int nChannelID;                           
    int nAction;                              
    char szName[128];                         
    double dbPTS;                             
    NET_TIME_EX stuUTC;                       
    char szUserName[32];                      
    NET_SECURITY_IMAGE_LIST stuImageList[32]; 
    unsigned int nImageListCount;             
    char szReserved[1020];                    
} DEV_EVENT_SECURITY_INSPECTOR_TIRED_INFO;
typedef struct tagDEV_EVENT_SECURITY_INSPECTOR_YAWN_INFO
{
    int nChannelID;                           
    int nAction;                              
    char szName[128];                         
    double dbPTS;                             
    NET_TIME_EX stuUTC;                       
    char szUserName[32];                      
    NET_SECURITY_IMAGE_LIST stuImageList[32]; 
    unsigned int nImageListCount;             
    char szReserved[1020];                    
} DEV_EVENT_SECURITY_INSPECTOR_YAWN_INFO;
typedef struct tagDEV_EVENT_AIPICK_DETECT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szContent[256];   
    char szReserved[1024]; 
} DEV_EVENT_AIPICK_DETECT_INFO;
typedef struct tagNET_TRAFFIC_LIGHT_FAULT_STATES
{
    UINT nStraightLightMask[3];  
    UINT nTurnLeftLightMask[3];  
    UINT nTurnRightLightMask[3]; 
    UINT nUTurnLightMask[3];     
    char szReserved[512];        
} NET_TRAFFIC_LIGHT_FAULT_STATES;
typedef struct tagNET_TRAFFIC_LIGHT_FAULT_TYPE
{
    UINT nStraightLightFaultType[4];  
    UINT nTurnLeftLightFaultType[4];  
    UINT nTurnRightLightFaultType[4]; 
    UINT nUTurnLightFaultType[4];     
    char szReserved[512];             
} NET_TRAFFIC_LIGHT_FAULT_TYPE;
typedef struct tagDEV_EVENT_TRAFFIC_LIGHT_FAULT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    NET_TRAFFIC_LIGHT_FAULT_STATES stuFaultStates; 
    NET_TRAFFIC_LIGHT_FAULT_TYPE stuFaultType;     
    EM_FAULT_DETECT_SOURCE_TYPE emDetectSource;    
    char szReserved[1024]; 
} DEV_EVENT_TRAFFIC_LIGHT_FAULT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKING_BACKING_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    int nSpeed;                                      
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    char szReserved[1024]; 
} DEV_EVENT_TRAFFIC_PARKING_BACKING_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_MOTOR_STRICTLY_PROHIBIT_MANNED_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    int nLane;                                       
    int nSequence;                                   
    int nHumanNum;                                   
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    int nSpeed;                                      
    char szReserved[1020]; 
} DEV_EVENT_TRAFFIC_MOTOR_STRICTLY_PROHIBIT_MANNED_INFO;
typedef enum tagEM_CONSUMPTION_EVENT_TYPE
{
    EM_CONSUMPTION_EVENT_TYPE_UNKNOWN = -1, 
    EM_CONSUMPTION_EVENT_TYPE_QUOTA,        
    EM_CONSUMPTION_EVENT_TYPE_NONQUOTA,     
    EM_CONSUMPTION_EVENT_TYPE_DEPOSIT,      
    EM_CONSUMPTION_EVENT_TYPE_RESTORE,      
} EM_CONSUMPTION_EVENT_TYPE;
typedef struct tagDEV_EVENT_CONSUMPTION_EVENT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    BOOL bRealUTC;                        
    NET_TIME_EX RealUTC;                  
    UINT nRecNo;                          
    UINT nBlockId;                        
    NET_ACCESS_CTL_EVENT_TYPE emType;     
    EM_CONSUMPTION_STATUS emStatus;       
    NET_ACCESSCTLCARD_TYPE emCardType;    
    EM_USER_TYPE emUserType;              
    NET_ACCESSCTLCARD_STATE emCardStatus; 
    NET_ACCESS_DOOROPEN_METHOD emMethod;  
    char szCardNo[16];                    
    char szReaderID[32];                  
    char szUserID[12];                    
    UINT nErrorCode;                      
    char szSnapURL[128];                        
    UINT nSimilarity;                           
    EM_CONSUMPTION_EVENT_TYPE emEventType;      
    UINT nConsumptionAmount;                    
    UINT nRechargeAmount;                       
    char szTransactionSerialNumber[128];        
    int nImageCount;                            
    DEV_ACCESS_CTL_IMAGE_INFO stuImageInfos[6]; 
    char szLastTransactionSerialNumber[128]; 
    char szReserved[896];                    
} DEV_EVENT_CONSUMPTION_EVENT_INFO;
typedef struct tagDEV_EVENT_TOUCH_ELECTROSTATIC_BALL_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char szReserved1[4];            
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;                    
    DH_MSG_OBJECT stuObject;         
    SCENE_IMAGE_INFO stuSceneImage;  
    NET_POINT stuDetectRegion[20];   
    int nDetectRegionNum;            
    NET_POINT stuUpstairsLine[20];   
    int nUpstairsLineNum;            
    NET_POINT stuDownstairsLine[20]; 
    int nDownstairsLineNum;          
    char szReserved[1024];           
} DEV_EVENT_TOUCH_ELECTROSTATIC_BALL_INFO;
typedef struct tagDEV_EVENT_OXYGEN_CYLINDER_DETECTION_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    char szReserved1[4];            
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int nAction;                    
    DH_MSG_OBJECT stuObject;        
    SCENE_IMAGE_INFO stuSceneImage; 
    char szReserved[1024];          
} DEV_EVENT_OXYGEN_CYLINDER_DETECTION_INFO;
typedef struct tagNET_GENERAL_ATTITUDE_DETECTION_OBJECT
{
    int nObjectID;           
    char szObjectType[16];   
    char szAttitudeType[16]; 
    DH_RECT BoundingBox;     
    char szSerialUUID[22];   
    char szReserved[1022];   
} NET_GENERAL_ATTITUDE_DETECTION_OBJECT;
typedef struct tagNET_SCENE_IMAGE_INFO
{
    UINT nOffSet;         
    UINT nLength;         
    char byReserved[128]; 
} NET_SCENE_IMAGE_INFO;
typedef struct tagDEV_EVENT_GENERAL_ATTITUDE_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    NET_GENERAL_ATTITUDE_DETECTION_OBJECT stuObject; 
    NET_SCENE_IMAGE_INFO stuSceneImage;              
    char szReserved[1024];                           
} DEV_EVENT_GENERAL_ATTITUDE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_CHANGE_LANE_CONTINUES_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    int nGroupID;                                    
    int nCountInGroup;                               
    int nIndexInGroup;                               
    UINT nEventType;                                 
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    int nSpeed;                                      
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    NET_GPS_INFO stuGPSInfo;                         
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_CHANGE_LANE_CONTINUES_INFO;
typedef struct tagDEV_EVENT_SPRAY_DETECT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szClass[16];      
    UINT nRuleId;          
    int UTCMS;             
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    UINT nEventType;       
    UINT nFluidType;       
    UINT nPresetID;        
    char szReserved[1020]; 
} DEV_EVENT_SPRAY_DETECT_INFO;
typedef struct tagDEV_EVENT_SNAP_TASK_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szCameraID[64];   
    UINT nTaskID;          
    char szReserved[1020]; 
} DEV_EVENT_SNAP_TASK_INFO;
typedef struct tagDEV_EVENT_SILICON_FIRE_DETECTION_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[128];                  
    char szClass[16];                  
    int nGroupID;                      
    int nCountInGroup;                 
    int nIndexInGroup;                 
    UINT nUTCMS;                       
    double dbPTS;                      
    NET_TIME_EX stuUTC;                
    UINT nEventID;                     
    UINT nRuleID;                      
    int nObjectCount;                  
    DH_MSG_OBJECT_EX2 stuObject[128];  
    UINT nSequence;                    
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    int nDetectRegionCount;            
    DH_POINT stuDetectRegion[20];      
    char szReserved[1024];             
} DEV_EVENT_SILICON_FIRE_DETECTION_INFO;
typedef struct tagDEV_EVENT_LADLE_NO_DETECTION_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[128];                  
    char szClass[16];                  
    int nGroupID;                      
    int nCountInGroup;                 
    int nIndexInGroup;                 
    UINT nUTCMS;                       
    double dbPTS;                      
    NET_TIME_EX stuUTC;                
    UINT nEventID;                     
    UINT nRuleID;                      
    int nObjectCount;                  
    UINT nPresetID;                    
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    DH_MSG_OBJECT_EX2 stuObjects[128]; 
    NET_POINT stuDetectRegion[20];     
    int nDetectRegionCount;            
    char szReserved[1020];             
} DEV_EVENT_LADLE_NO_DETECTION_INFO;
typedef struct tagDEV_EVENT_FISHING_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    char szClass[16];                  
    int nGroupID;                      
    int nCountInGroup;                 
    int nIndexInGroup;                 
    UINT nUTCMS;                       
    int nObjectCount;                  
    DH_MSG_OBJECT_EX2 stuObjects[100]; 
    int nDetectRegionCount;            
    NET_POINT stuDetectRegion[20];     
    UINT nPresetID;                    
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    char szReserved[1020]; 
} DEV_EVENT_FISHING_DETECTION_INFO;
typedef struct tagDEV_EVENT_BARELAND_DETECTION_INFO
{
    char szName[128];               
    char szClass[16];               
    int nGroupID;                   
    int nCountInGroup;              
    int nIndexInGroup;              
    UINT nUTC;                      
    double dbPTS;                   
    UINT nUTCMS;                    
    UINT nEventID;                  
    UINT nRatio;                    
    SCENE_IMAGE_INFO stuSceneImage; 
    int nChannelID;                 
    int nAction;                    
    NET_TIME_EX stuUTC;             
    char szReserved[980];           
} DEV_EVENT_BARELAND_DETECTION_INFO;
typedef struct tagDEV_EVENT_PERSONNEL_COEXISTENCE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szClass[16];               
    UINT nUTCMS;                    
    int nObjectCount;               
    DH_MSG_OBJECT stuObjects[128];  
    SCENE_IMAGE_INFO stuSceneImage; 
    int nRuleID;                    
    char szReserved[1020];          
} DEV_EVENT_PERSONNEL_COEXISTENCE_INFO;
typedef enum tagNET_EM_ATTITUDE_TYPE
{
    NET_EM_ATTITUDE_TYPE_UNKNOWN,        
    NET_EM_ATTITUDE_TYPE_ONE_HAND,       
    NET_EM_ATTITUDE_TYPE_AKIMBO,         
    NET_EM_ATTITUDE_TYPE_HAND_SON_HEAD,  
    NET_EM_ATTITUDE_TYPE_HAND_SON_CHEST, 
    NET_EM_ATTITUDE_TYPE_HIT_WALL,       
    NET_EM_ATTITUDE_TYPE_BEND,           
    NET_EM_ATTITUDE_TYPE_SITTING,        
    NET_EM_ATTITUDE_TYPE_STANDING,       
    NET_EM_ATTITUDE_TYPE_SIT_DOWN,       
    NET_EM_ATTITUDE_TYPE_STAND_UP,       
    NET_EM_ATTITUDE_TYPE_ON_TABLE,       
    NET_EM_ATTITUDE_TYPE_LOOK_BACK,      
    NET_EM_ATTITUDE_TYPE_DELIVERY,       
    NET_EM_ATTITUDE_TYPE_GAZE_AROUND,    
    NET_EM_ATTITUDE_TYPE_HAND_DOWN_PEEP, 
    NET_EM_ATTITUDE_TYPE_PICK_UP,        
    NET_EM_ATTITUDE_TYPE_HAND_UP,        
    NET_EM_ATTITUDE_TYPE_WRITE,          
} NET_EM_ATTITUDE_TYPE;
typedef struct tagDEV_EVENT_GENEAL_ATTITUDE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szClass[16];                    
    int nUTCMS;                          
    int nObjectCount;                    
    DH_MSG_OBJECT stuObjects[128];       
    SCENE_IMAGE_INFO stuSceneImage;      
    NET_EM_ATTITUDE_TYPE emAttitudeType; 
    int nRuleID;                         
    int nImageInfoNum;                   
    NET_IMAGE_INFO_EX3* pstuImageInfo;   
    char szReserved[1016 - POINTERSIZE]; 
} DEV_EVENT_GENEAL_ATTITUDE_INFO;
typedef struct tagDEV_EVENT_CASH_BOX_STATE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szClass[16];               
    int nRuleID;                    
    int nUTCMS;                     
    int nState;                     
    int nObjectCount;               
    DH_MSG_OBJECT stuObjects[128];  
    SCENE_IMAGE_INFO stuSceneImage; 
    char szReserved[1024];          
} DEV_EVENT_CASH_BOX_STATE_INFO;
typedef struct tagDEV_EVENT_LEAKAGE_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nObjectCount;                    
    DH_MSG_OBJECT_EX2 stuObjects[128];   
    float fRatio;                        
    SCENE_IMAGE_INFO_EX stuSceneImage;   
    NET_IMAGE_INFO_EX2 stuImageInfo[32]; 
    int nImageInfoNum;                   
    char szReserved[1024];               
} DEV_EVENT_LEAKAGE_DETECTION_INFO;
typedef enum tagEM_ALARM_ACCESSORY_STATUS
{
    EM_ALARM_ACCESSORY_STATUS_UNKNOWN,       
    EM_ALARM_ACCESSORY_STATUS_DEVSELFCHECK,  
    EM_ALARM_ACCESSORY_STATUS_EXTINPUTALARM, 
} EM_ALARM_ACCESSORY_STATUS;
typedef struct tagDEV_EVENT_ALARM_ACCESSORY_INFO
{
    int nChannelID;                     
    int nAction;                        
    char szName[128];                   
    char szClass[16];                   
    double dbPTS;                       
    NET_TIME_EX stuUTC;                 
    NET_SENSE_METHOD emSenseMethod;     
    EM_ALARM_ACCESSORY_STATUS emStatus; 
    char szSN[32];                      
    char szReserved[1024];              
} DEV_EVENT_ALARM_ACCESSORY_INFO;
typedef enum tagEM_WIRELESS_DEV_LOWPOWER_TYPE
{
    EM_WIRELESS_DEV_LOWPOWER_TYPE_UNKNOWN,         
    EM_WIRELESS_DEV_LOWPOWER_TYPE_REMOTE_CONTROL,  
    EM_WIRELESS_DEV_LOWPOWER_TYPE_DEFENCE,         
    EM_WIRELESS_DEV_LOWPOWER_TYPE_KEYBOARD,        
    EM_WIRELESS_DEV_LOWPOWER_TYPE_SMARTLOCK,       
    EM_WIRELESS_DEV_LOWPOWER_TYPE_ALARMBELL,       
    EM_WIRELESS_DEV_LOWPOWER_TYPE_EXTERNAL_SENSOR, 
} EM_WIRELESS_DEV_LOWPOWER_TYPE;
typedef enum tagEM_WIRELESS_DEV_LOWPOWER_STATUS
{
    EM_WIRELESS_DEV_LOWPOWER_STATUS_UNKNOWN,      
    EM_WIRELESS_DEV_LOWPOWER_STATUS_BAT_ABNORMAL, 
} EM_WIRELESS_DEV_LOWPOWER_STATUS;
typedef struct tagDEV_EVENT_WIRELESS_DEV_LOWPOWER_INFO
{
    int nChannelID;                           
    int nAction;                              
    char szName[128];                         
    char szClass[16];                         
    double dbPTS;                             
    NET_TIME_EX stuUTC;                       
    BOOL bLowPower;                           
    EM_WIRELESS_DEV_LOWPOWER_TYPE emType;     
    NET_SENSE_METHOD emSenseMethod;           
    float fPercent;                           
    char szSN[32];                            
    EM_WIRELESS_DEV_LOWPOWER_STATUS emStatus; 
    char szReserved[1024];                    
} DEV_EVENT_WIRELESS_DEV_LOWPOWER_INFO;
typedef struct tagDEV_EVENT_SENSOR_ABNORMAL_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    char szSN[32];                      
    EM_SENSOR_ABNORMAL_STATUS emStatus; 
    NET_SENSE_METHOD emSenseMethod;     
    char szReserved[1024];              
} DEV_EVENT_SENSOR_ABNORMAL_INFO;
typedef enum tagEM_MODULE_LOST_TYPE
{
    EM_MODULE_LOST_TYPE_UNKNOWN, 
    EM_MODULE_LOST_TYPE_M_BUS,   
    EM_MODULE_LOST_TYPE_RS_485,  
    EM_MODULE_LOST_TYPE_CAN,     
    EM_MODULE_LOST_TYPE_NET,     
} EM_MODULE_LOST_TYPE;
typedef enum tagEM_MODULE_LOST_DEV_TYPE
{
    EM_MODULE_LOST_DEV_TYPE_UNKNOWN,              
    EM_MODULE_LOST_DEV_TYPE_SMARTLOCK,            
    EM_MODULE_LOST_DEV_TYPE_DEFENCE,              
    EM_MODULE_LOST_DEV_TYPE_KEYBOARD,             
    EM_MODULE_LOST_DEV_TYPE_REMOTE_CONTROL,       
    EM_MODULE_LOST_DEV_TYPE_MAGNETOMER,           
    EM_MODULE_LOST_DEV_TYPE_ALARMBELL,            
    EM_MODULE_LOST_DEV_TYPE_ACCESS_SUBCONTROLLER, 
    EM_MODULE_LOST_DEV_TYPE_GPS,                  
    EM_MODULE_LOST_DEV_TYPE_WIFI,                 
    EM_MODULE_LOST_DEV_TYPE_MOBILE_DEVICE,        
    EM_MODULE_LOST_DEV_TYPE_LIFT_CONTROLLER,      
    EM_MODULE_LOST_DEV_TYPE_PRINTER,              
} EM_MODULE_LOST_DEV_TYPE;
typedef struct tagDEV_EVENT_MODULE_LOST_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    UINT nACK;          
    EM_MODULE_LOST_TYPE emType;        
    EM_MODULE_LOST_DEV_TYPE emDevType; 
    NET_SENSE_METHOD emSenseMethod;    
    int arrAddr[32];                   
    int nAddrNum;                      
    BOOL bOnline;                      
    char szSN[32];                     
    char szReserved[1024];             
} DEV_EVENT_MODULE_LOST_INFO;
typedef enum tagEM_CROWD_LEVEL_DETECTION_TRIGGERMODE
{
    EM_CROWD_LEVEL_DETECTION_TRIGGERMODE_UNKNOWN,  
    EM_CROWD_LEVEL_DETECTION_TRIGGERMODE_ADAPTIVE, 
    EM_CROWD_LEVEL_DETECTION_TRIGGERMODE_CUSTOM,   
} EM_CROWD_LEVEL_DETECTION_TRIGGERMODE;
typedef struct tagDEV_EVENT_CROWD_LEVEL_DETECTION_INFO
{
    int nChannelID;                                     
    int nAction;                                        
    char szName[128];                                   
    char szClass[16];                                   
    double dbPTS;                                       
    NET_TIME_EX stuUTC;                                 
    UINT nUTCMS;                                        
    UINT nEventID;                                      
    NET_POINT stuDetectRegion[20];                      
    int nDetectRegionNum;                               
    UINT nPresetID;                                     
    EM_CROWD_LEVEL_DETECTION_TRIGGERMODE emTriggerMode; 
    UINT nCrowdDetectNum;                               
    UINT nCrowdRankResult;                              
    char szReserved1[4];                                
    char szCrowdGroupName[128];                         
    NET_IMAGE_INFO_EX3* pstuImageInfo;                  
    int nImageInfoNum;                                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx;               
    char szReserved[1020 - POINTERSIZE];                
} DEV_EVENT_CROWD_LEVEL_DETECTION_INFO;
typedef struct tagDEV_EVENT_REGION_DEFENSE_DETECTION_INFO
{
    int nChannelID;        
    int nAction;           
    char szName[128];      
    char szClass[16];      
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    char szReserved1[4];   
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    UINT nEventID;         
    char szReserved[1024]; 
} DEV_EVENT_REGION_DEFENSE_DETECTION_INFO;
typedef struct tagDEV_EVENT_DUSTBIN_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nObjectNum;                      
    DH_MSG_OBJECT_EX2 stuObjects[64];    
    NET_POINT stuDetectRegion[20];       
    int nDetectRegionNum;                
    int nPresetID;                       
    char szPresetName[64];               
    UINT nViolationDuration;             
    char szSourceID[32];                 
    NET_IMAGE_INFO_EX2* pstuImageInfo;   
    int nImageInfoNum;                   
    char szReserved[1024 - POINTERSIZE]; 
} DEV_EVENT_DUSTBIN_DETECTION_INFO;
typedef enum tagEM_ROAD_LEVEL
{
    EM_ROAD_UNKNOWN_LEVEL = -1, 
    EM_ROAD_ZERO_LEVEL,         
    EM_ROAD_ONE_LEVEL,          
    EM_ROAD_TWO_LEVEL,          
    EM_ROAD_THREE_LEVEL,        
    EM_ROAD_FOUR_LEVEL,         
    EM_ROAD_FIVE_LEVEL,         
    EM_ROAD_SIX_LEVEL,          
} EM_ROAD_LEVEL;
typedef struct tagDEV_EVENT_ROAD_CONDITIONS_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    EM_ROAD_LEVEL emRoadLevel;        
    NET_GPS_STATUS_INFO stuGPSStatus; 
    char szVideoPath[256];            
    float fDamageArea;                
    float fDamageLength;              
    char szReserved[760];             
} DEV_EVENT_ROAD_CONDITIONS_DETECTION_INFO;
typedef enum tagEM_EVENT_DETECT_OBJECT
{
    EM_EVENT_DETECT_OBJECT_UNKNOWN, 
    EM_EVENT_DETECT_OBJECT_PERSON,  
    EM_EVENT_DETECT_OBJECT_ANIMAL,  
} EM_EVENT_DETECT_OBJECT;
typedef enum tagEM_NEAR_DETECT_OBJECT_TYPE
{
    EM_NEAR_DETECT_OBJECT_TYPE_UNKNOWN,               
    EM_NEAR_DETECT_OBJECT_TYPE_MOVINGFORKLIFT,        
    EM_NEAR_DETECT_OBJECT_TYPE_SILICONPACKAGE,        
    EM_NEAR_DETECT_OBJECT_TYPE_MOVINGSILICONPACKAGE,  
    EM_NEAR_DETECT_OBJECT_TYPE_POURINGSILICONPACKAGE, 
} EM_NEAR_DETECT_OBJECT_TYPE;
typedef struct tagDEV_EVENT_NEAR_OBJECT_DETECT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nRuleID;       
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    NET_POINT stuDetectRegion[20];               
    int nDetectRegionNum;                        
    EM_EVENT_DETECT_OBJECT emDetectObject;       
    EM_NEAR_DETECT_OBJECT_TYPE emNearObjectType; 
    UINT nSequence;                              
    SCENE_IMAGE_INFO_EX stuSceneImage;           
    DH_MSG_OBJECT_EX2* pstObjectInfo;            
    UINT nObjectNum;                             
    char szReserved[1020 - POINTERSIZE];         
} DEV_EVENT_NEAR_OBJECT_DETECT_INFO;
typedef struct tagDEV_EVENT_OBJECT_NUM_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    UINT nEventID;      
    UINT nAreaID;                      
    UINT nPresetID;                    
    int nNumber;                       
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    char szReserved[1024];             
} DEV_EVENT_OBJECT_NUM_DETECTION_INFO;
typedef struct tagNET_STAT_ATTRMAP
{
    int nAttrTypeID;      
    int nValueID;         
    char szAttrType[32];  
    char szValue[32];     
    char szReserved[128]; 
} NET_STAT_ATTRMAP;
typedef struct tagNET_STAT_ATTRIBUTE
{
    int nNumber;                     
    int nAttrMapNumber;              
    NET_STAT_ATTRMAP stuAttrMap[20]; 
    char szReserved[128];            
} NET_STAT_ATTRIBUTE;
typedef struct tagNET_STAT_DETAIL
{
    char szType[32];                       
    int nTypeID;                           
    int nNumber;                           
    NET_STAT_ATTRIBUTE stuAttribute[1024]; 
    int nAttributeNumber;                  
    char szReserved[124];                  
} NET_STAT_DETAIL;
typedef enum tagEM_STAT_DIRECTION
{
    EM_STAT_DIRECTION_UNKNOWN,     
    EM_STAT_DIRECTION_LEFTTORIGHT, 
    EM_STAT_DIRECTION_RIGHTTOLEFT, 
    EM_STAT_DIRECTION_BOTH,        
} EM_STAT_DIRECTION;
typedef struct tagNET_DEV_EVENT_CROSSLINE_STAT_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    UINT nEventID;                        
    char szName[128];                     
    char szClass[16];                     
    double dbPTS;                         
    UINT nUTCMS;                          
    UINT nRuleID;                      
    UINT nAreaID;                      
    EM_STAT_DIRECTION emDirection;     
    int nNumber;                       
    int nStatDetailNum;                
    NET_STAT_DETAIL stuStatDetail[16]; 
    char szReserved[1024]; 
} NET_DEV_EVENT_CROSSLINE_STAT_INFO;
typedef struct tagNET_DEV_EVENT_REGIONNUM_STAT_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    NET_TIME_EX stuUTC;                   
    UINT nEventID;                        
    char szName[128];                     
    char szClass[16];                     
    double dbPTS;                         
    UINT nUTCMS;                          
    UINT nRuleID;                      
    UINT nAreaID;                      
    EM_STAT_DIRECTION emDirection;     
    int nNumber;                       
    int nStatDetailNum;                
    NET_STAT_DETAIL stuStatDetail[16]; 
    char szReserved[1024]; 
} NET_DEV_EVENT_REGIONNUM_STAT_INFO;
typedef struct tagNET_OPEN_INTELLI_OBJECT_ATTRIBUTE_INFO
{
    char szAttrTypeName[128];  
    char szAttrValueName[128]; 
} NET_OPEN_INTELLI_OBJECT_ATTRIBUTE_INFO;
typedef struct tagNET_OPEN_INTELLI_OBJECT_INFO
{
    int nObjectId;                                                   
    NET_RECT stuBoundingBox;                                         
    char szObjectTypeName[128];                                      
    int nObjectAttributeNums;                                        
    NET_OPEN_INTELLI_OBJECT_ATTRIBUTE_INFO stuObjectAttributes[128]; 
} NET_OPEN_INTELLI_OBJECT_INFO;
typedef struct tagNET_OPEN_INTELLI_USER_DATA_INFO
{
    int nAlarmId;         
    char szReserved[512]; 
} NET_OPEN_INTELLI_USER_DATA_INFO;
typedef struct tagDEV_EVENT_OPEN_INTELLI_INFO
{
    int nChannelID; 
    int nAction;    
    char szOpenCode[32];  
    char szOpenName[128]; 
    char szRuleType[32];  
    void* pstuOpenData;   
    int nObjectNums;                              
    NET_OPEN_INTELLI_OBJECT_INFO stuObjects[100]; 
    NET_OPEN_INTELLI_USER_DATA_INFO stuUserData;  
    char szReserved[1024];                        
} DEV_EVENT_OPEN_INTELLI_INFO;
typedef enum tagEM_DETECTED_OBJECT_TYPE
{
    EM_DETECTED_OBJECT_TYPE_UNKNOWN,         
    EM_DETECTED_OBJECT_TYPE_HANGING_PACKAGE, 
} EM_DETECTED_OBJECT_TYPE;
typedef struct tagDEV_EVENT_CRANE_LOAD_STAY_DETECTION_INFO
{
    int nChannelID;      
    int nAction;         
    char szName[128];    
    char szClass[16];    
    int nGroupID;        
    int nCountInGroup;   
    int nIndexInGroup;   
    UINT nUTCMS;         
    double dbPTS;        
    NET_TIME_EX stuUTC;  
    UINT nEventID;       
    char byReserved1[4]; 
    DH_MSG_OBJECT_EX2 stuObject;            
    char byReserved2[4];                    
    int nObjectsNum;                        
    DH_MSG_OBJECT_EX2 stuObjects[32];       
    NET_POINT stuDetectRegion[20];          
    int nDetectRegionNum;                   
    EM_DETECTED_OBJECT_TYPE emDetectObject; 
    char szType[16];                        
    SCENE_IMAGE_INFO stuSceneImage;         
    char szReserved[1024];                  
} DEV_EVENT_CRANE_LOAD_STAY_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_DRIVER_NO_BELT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    char szDriverID[32];                              
    NET_GPS_STATUS_INFO stuGPSStatus;                 
    char szVideoPath[256];                            
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    char szReserved[768];                             
} DEV_EVENT_TRAFFIC_DRIVER_NO_BELT_INFO;
typedef struct tagDEV_EVENT_RIDING_MOTOR_CYCLE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nObjectNum;                      
    DH_MSG_OBJECT_EX2 stuObjects[64];    
    SCENE_IMAGE_INFO stuSceneImage;      
    NET_IMAGE_INFO_EX2* pstuImageInfo;   
    int nImageInfoNum;                   
    char szReserved[1020 - POINTERSIZE]; 
} DEV_EVENT_RIDING_MOTOR_CYCLE_INFO;
typedef enum tagEM_ARTICLE_TYPE
{
    EM_ARTICLE_TYPE_UNKNOWN,   
    EM_ARTICLE_TYPE_ANCHORROD, 
} EM_ARTICLE_TYPE;
typedef struct tagDEV_EVENT_CONVEYOR_ARTICLE_TYPE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nRuleID;       
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    NET_POINT stuDetectRegion[20];      
    int nDetectRegionNum;               
    EM_ARTICLE_TYPE emArticleType;      
    SCENE_IMAGE_INFO_EX stuSceneImage;  
    DH_MSG_OBJECT_EX2* pstObjectInfo;   
    UINT nObjectNum;                    
    BOOL bRealUTC;                      
    NET_TIME_EX RealUTC;                
    UINT nArticleEventCount;            
    char szReserved[976 - POINTERSIZE]; 
} DEV_EVENT_CONVEYOR_ARTICLE_TYPE_INFO;
typedef struct tagDEV_EVENT_BLIND_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nUTCMS;        
    UINT nEventID;      
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    char szVideoPath[256];                
    char szReserved[1024];                
} DEV_EVENT_BLIND_ALARM_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_SPEED_DROP_SHARPLY_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    UINT nUTCMS;        
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    double dbPTS;       
    int nGroupID;                                   
    int nCountInGroup;                              
    int nIndexInGroup;                              
    DH_MSG_OBJECT stuObject;                        
    DH_MSG_OBJECT stuVehicle;                       
    VA_OBJECT_NONMOTOR stuNonMotor;                 
    int nLane;                                      
    int nSequence;                                  
    EVENT_COMM_INFO stCommInfo;                     
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    char szReserved[1024];                          
} DEV_EVENT_TRAFFIC_SPEED_DROP_SHARPLY_INFO;
typedef struct tagDEV_EVENT_GESTURE_DETECTION_INFO
{
    int nChannelID;                  
    int nAction;                     
    char szName[128];                
    char szClass[16];                
    double dbPTS;                    
    NET_TIME_EX stuUTC;              
    UINT nUTCMS;                     
    UINT nEventID;                   
    NET_GESTURE_INFO stuGestureInfo; 
    int nGroupID;                    
    int nCountInGroup;               
    int nIndexInGroup;               
    char szReserved[1024];           
} DEV_EVENT_GESTURE_DETECTION_INFO;
typedef struct tagDEV_EVENT_HEAD_LIFT_DETECTION_INFO
{
    int nChannelID;                  
    int nAction;                     
    char szName[128];                
    EM_SCENE_CLASS_TYPE emClassType; 
    UINT nUTCMS;                     
    UINT nEventID;                   
    double dbPTS;                    
    NET_TIME_EX stuUTC;              
    UINT nPresetID;        
    UINT nFaceCount;       
    UINT nHumanCount;      
    char szReserved[1024]; 
} DEV_EVENT_HEAD_LIFT_DETECTION_INFO;
typedef struct tagDEV_EVENT_DRAINING_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    NET_POINT stuDetectRegion[20];     
    int nDetectRegionNum;              
    int nObjectNum;                    
    DH_MSG_OBJECT_EX2 stuObjects[100]; 
    int nPresetID;                     
    char szReserved[1024];             
} DEV_EVENT_DRAINING_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_CROSSING_SPEEDY_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    int nSpeed;                                      
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_CROSSING_SPEEDY_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_LARGECAR_NO_STOP_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    int nSpeed;                                      
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    NET_GPS_STATUS_INFO stuGPSStatus;                
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_LARGECAR_NO_STOP_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_OVERTAKE_ONRIGHT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nLane;                                       
    int nSequence;                                   
    char szReserved1[4];                             
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_OVERTAKE_ONRIGHT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_TRUCK_OCCUPIED_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nLane;                                       
    int nSequence;                                   
    char szReserved1[4];                             
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_TRUCK_OCCUPIED_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_SMALL_DISPLACEMENT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    UINT nRuleID;       
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    int nSpeed;                                      
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    NET_GPS_INFO stuGPSInfo;                         
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_SMALL_DISPLACEMENT_INFO;
typedef struct tagNET_EVENT_TRAFFIC_OCCUPYING_THEPATH_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    UINT nRuleID;       
    int nLane;          
    int nSequence;      
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    int nSpeed;                                      
    char szReserved[1020];                           
} NET_EVENT_TRAFFIC_OCCUPYING_THEPATH_INFO;
typedef struct tagNET_EVENT_SILICON_FIREPUTTER_DETECTION_INFO
{
    int nChannelID;       
    int nAction;          
    char szName[128];     
    char szClass[16];     
    int nGroupID;         
    int nCountInGroup;    
    int nIndexInGroup;    
    UINT nUTCMS;          
    double dbPTS;         
    NET_TIME_EX stuUTC;   
    UINT nEventID;        
    UINT nRuleID;         
    UINT nSequence;       
    DWORD dwSnapFlagMask; 
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    DH_MSG_OBJECT stuObjects[128];     
    int nObjectNum;                    
    int nDetectRegionNum;              
    DH_POINT stuDetectRegion[20];      
    char szReserved[1024];             
} NET_EVENT_SILICON_FIREPUTTER_DETECTION_INFO;
typedef struct tagDEV_EVENT_GREEN_BELT_ALARM_INFO
{
    int nChannelID;                      
    int nAction;                         
    char szName[128];                    
    char szClass[16];                    
    int nGroupID;                        
    int nCountInGroup;                   
    int nIndexInGroup;                   
    UINT nUTCMS;                         
    double dbPTS;                        
    NET_TIME_EX stuUTC;                  
    UINT nEventID;                       
    UINT nRatio;                         
    NET_IMAGE_INFO_EX2* pstuImageInfo;   
    int nImageInfoNum;                   
    char szReserved[1016 - POINTERSIZE]; 
} DEV_EVENT_GREEN_BELT_ALARM_INFO;
typedef struct tagDEV_EVENT_ROAD_DAMAGE_ALARM_INFO
{
    int nChannelID;                      
    int nAction;                         
    char szName[128];                    
    char szClass[16];                    
    int nGroupID;                        
    int nCountInGroup;                   
    int nIndexInGroup;                   
    UINT nUTCMS;                         
    double dbPTS;                        
    NET_TIME_EX stuUTC;                  
    UINT nEventID;                       
    NET_IMAGE_INFO_EX2* pstuImageInfo;   
    int nImageInfoNum;                   
    char szReserved[1020 - POINTERSIZE]; 
} DEV_EVENT_ROAD_DAMAGE_ALARM_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_SERPENTINE_CHANGE_LANE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    UINT nEventType;    
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLane;                                       
    int nSequence;                                   
    int nSpeed;                                      
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    NET_GPS_INFO stuGPSInfo;                         
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DWORD dwSnapFlagMask;                            
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_SERPENTINE_CHANGE_LANE_INFO;
typedef struct tagDEV_EVENT_IVS_PERSON_TRANS_DETECTION_INFO
{
    int nChannelID;           
    int nAction;              
    char szName[128];         
    char szClass[16];         
    int nGroupID;             
    int nCountInGroup;        
    int nIndexInGroup;        
    UINT nUTCMS;              
    double dbPTS;             
    NET_TIME_EX stuUTC;       
    UINT nEventID;            
    int nViolationNum;        
    char szViolation[10][32]; 
    char szReserved[1024];    
} DEV_EVENT_IVS_PERSON_TRANS_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_METHANE_ALARM_INFO
{
    int nChannelID;               
    int nAction;                  
    NET_TIME_EX stuTime;          
    UINT nConcentration;          
    UINT nConcentrationThreshold; 
    char szReserved[1020];        
} NET_DEV_EVENT_METHANE_ALARM_INFO;
typedef struct tagNET_SCRAPSTEEL_DETECT_IMAGE_INFO
{
    UINT nIndexInData;    
    int nWidth;           
    int nHeight;          
    char szImageID[42];   
    char szReserved[256]; 
} NET_SCRAPSTEEL_DETECT_IMAGE_INFO;
typedef struct tagNET_SCRAPSTEEL_STATISTICS_INFO
{
    int nType;            
    int nSubType;         
    int nNum;             
    float fNumRatio;      
    float fAreaRatio;     
    int nArea;            
    char szReserved[256]; 
} NET_SCRAPSTEEL_STATISTICS_INFO;
typedef struct tagNET_SCRAPSTEEL_LAYER_DETECT_INFO
{
    int nScrapsteelState;                                 
    float fConsistConfidence;                             
    float fSimilarity;                                    
    int nScrapsteelType;                                  
    int nStatisticsInfoNum;                               
    NET_SCRAPSTEEL_STATISTICS_INFO stuStatisticsInfo[32]; 
    char szReserved[256];                                 
} NET_SCRAPSTEEL_LAYER_DETECT_INFO;
typedef enum tagEM_CROSS_DETECT_REGION_TYPE
{
    EM_CROSS_DETECT_REGION_TYPE_UNKNOWN, 
    EM_CROSS_DETECT_REGION_TYPE_NULL,    
    EM_CROSS_DETECT_REGION_TYPE_ENTER,   
    EM_CROSS_DETECT_REGION_TYPE_LEAVE,   
    EM_CROSS_DETECT_REGION_TYPE_BOTH,    
} EM_CROSS_DETECT_REGION_TYPE;
typedef struct tagNET_SCRAPSTEEL_DETECT_REGION_INFO
{
    int nPointNum;                            
    NET_POINT stuPoint[30];                   
    EM_CROSS_DETECT_REGION_TYPE emCrosssType; 
} NET_SCRAPSTEEL_DETECT_REGION_INFO;
typedef struct tagNET_DEV_EVENT_SCRAPSTEEL_DETECT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nRuleID;       
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    UINT nSequence;     
    NET_SCRAPSTEEL_DETECT_REGION_INFO stuDetectRegion;    
    char szPlateNum[32];                                  
    char szPlateChannelCode[48];                          
    NET_SCRAPSTEEL_DETECT_IMAGE_INFO stuOrgImage;         
    NET_SCRAPSTEEL_DETECT_IMAGE_INFO stuRenderImage;      
    NET_SCRAPSTEEL_LAYER_DETECT_INFO stuScrapsteelResult; 
    NET_IMAGE_INFO_EX2 stuImageInfo[32];                  
    int nImageInfoNum;                                    
    char szReserved[1024];                                
} NET_DEV_EVENT_SCRAPSTEEL_DETECT_INFO;
typedef struct tagNET_DEV_EVENT_SCRAPSTEEL_DANGER_DETECT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nRuleID;       
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    NET_SCRAPSTEEL_DETECT_REGION_INFO stuDetectRegion; 
    NET_SCRAPSTEEL_DETECT_IMAGE_INFO stuOrgImage;      
    NET_SCRAPSTEEL_DETECT_IMAGE_INFO stuRenderImage;   
    DH_MSG_OBJECT_EX2 stuObjects[128];                 
    UINT nObjectsCount;                                
    int nImageInfoNum;                                 
    NET_IMAGE_INFO_EX2 stuImageInfo[32];               
    char szReserved[1024];                             
} NET_DEV_EVENT_SCRAPSTEEL_DANGER_DETECT_INFO;
typedef struct tagNET_DEV_EVENT_CHANGE_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nUTCMS;         
    int nGroupID;      
    int nCountInGroup; 
    int nIndexInGroup; 
    UINT nEventID;     
    DH_MSG_OBJECT* pstObjects; 
    int nObjectNum;            
    char szReserved[1020]; 
} NET_DEV_EVENT_CHANGE_DETECTION_INFO;
typedef struct tagDEV_EVENT_HUMAN_ANIMAL_COEXISTENCE_INFO
{
    int nChannelID;                  
    int nAction;                     
    char szName[128];                
    double dbPTS;                    
    NET_TIME_EX stuUTC;              
    int nUTCMS;                      
    EM_SCENE_CLASS_TYPE emClassType; 
    UINT nRuleID;                    
    int nGroupID;                                 
    int nCountInGroup;                            
    int nIndexInGroup;                            
    UINT nEventID;                                
    int nPresetID;                                
    EM_HUMAN_ANIMAL_ALARM_TYPE emAlarmType;       
    EM_DETECTION_SCENE_TYPE emDetectionSceneType; 
    char szReserved[1024];                        
} DEV_EVENT_HUMAN_ANIMAL_COEXISTENCE_INFO;
typedef enum tagEM_TANK_STATUS
{
    EM_TANK_STATUS_UNKNOWN,     
    EM_TANK_STATUS_DISCHARGING, 
    EM_TANK_STATUS_CHARGING,    
    EM_TANK_STATUS_IDLE,        
} EM_TANK_STATUS;
typedef struct tagDEV_EVENT_IVS_TANK_CAPACITY_DETECTION_INFO
{
    int nChannelID;              
    int nAction;                 
    char szName[128];            
    char szClass[16];            
    UINT nObjectID;              
    UINT nRuleID;                
    NET_TIME_EX stuUTC;          
    UINT nUTCMS;                 
    double dbPTS;                
    int nGroupID;                
    int nCountInGroup;           
    int nIndexInGroup;           
    UINT nCurrentRatio;          
    EM_TANK_STATUS emTankStatus; 
    char szReserved[1020];       
} DEV_EVENT_IVS_TANK_CAPACITY_DETECTION_INFO;
typedef struct tagDEV_EVENT_IVS_TANK_DUMPING_DETECTION_INFO
{
    int nChannelID;        
    int nAction;           
    char szName[128];      
    char szClass[16];      
    UINT nObjectID;        
    UINT nRuleID;          
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    double dbPTS;          
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    UINT nCurrentRatio;    
    char szReserved[1024]; 
} DEV_EVENT_IVS_TANK_DUMPING_DETECTION_INFO;
typedef struct tagDEV_EVENT_IVS_TANK_OVERFLOW_DETECTION_INFO
{
    int nChannelID;        
    int nAction;           
    char szName[128];      
    char szClass[16];      
    UINT nObjectID;        
    UINT nRuleID;          
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    double dbPTS;          
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    UINT nCurrentRatio;    
    char szReserved[1024]; 
} DEV_EVENT_IVS_TANK_OVERFLOW_DETECTION_INFO;
typedef struct tagDEV_EVENT_DRIVE_HANDSOFF_STEERING_WHEEL_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[128];                                 
    char szClass[16];                                 
    double dbPTS;                                     
    NET_TIME_EX stuUTC;                               
    UINT nUTCMS;                                      
    UINT nEventID;                                    
    UINT nHandsOffState;                              
    UINT nAlarmFlag;                                  
    UINT nReportFlag;                                 
    UINT nPhoneAlarmFlag;                             
    UINT nPhoneReportFlag;                            
    UINT nNobeltFlag;                                 
    UINT nNobeltReportFlag;                           
    UINT nPhoneLocalFlag;                             
    SCENE_IMAGE_INFO_EX stuImage;                     
    SCENE_IMAGE_INFO_EX stuImageOther[16];            
    int nImageOtherNum;                               
    int nRelatingVideoInfoNum;                        
    NET_RELATING_VIDEO_INFO stuRelatingVideoInfo[16]; 
    char szVideoPath[256];                            
    char szReserved[764];                             
} DEV_EVENT_DRIVE_HANDSOFF_STEERING_WHEEL_INFO;
typedef struct tagNET_DEV_EVENT_DUSTBIN_RETREAT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nObjectNum;                
    DH_MSG_OBJECT stuObjects[64];  
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nPresetID;                
    char szPresetName[64];         
    UINT nViolationDuration;       
    UINT nPictureType;             
    char szSourceID[32];           
    UINT nRuleId;                  
    char szRuleName[128];          
    int nAlarmType;                
    NET_IMAGE_INFO_EX2* pstuImageInfo;   
    int nImageInfoNum;                   
    char szReserved[1012 - POINTERSIZE]; 
} NET_DEV_EVENT_DUSTBIN_RETREAT_INFO;
typedef struct tagNET_DEV_EVENT_SIGNAL_LIGHT_ON_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nIndexInData;             
    char szChannelId[260];         
    char szReserved[760];          
} NET_DEV_EVENT_SIGNAL_LIGHT_ON_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_SIGNAL_LIGHT_FLASHYELLOW_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nIndexInData;             
    char szChannelId[260];         
    char szReserved[760];          
} NET_DEV_EVENT_SIGNAL_LIGHT_FLASHYELLOW_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_SIGNAL_LIGHT_NOBRIGHT_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nIndexInData;             
    char szChannelId[260];         
    char szReserved[760];          
} NET_DEV_EVENT_SIGNAL_LIGHT_NOBRIGHT_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_SIGNAL_LIGHT_BLOCKING_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nIndexInData;             
    char szChannelId[260];         
    char szReserved[760];          
} NET_DEV_EVENT_SIGNAL_LIGHT_BLOCKING_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_SIGNAL_LIGHT_ALWAYSON_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nIndexInData;             
    char szChannelId[260];         
    char szReserved[760];          
} NET_DEV_EVENT_SIGNAL_LIGHT_ALWAYSON_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_LEDSCREEN_NOTLIGHTUP_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nIndexInData;             
    char szChannelId[260];         
    char szReserved[760];          
} NET_DEV_EVENT_LEDSCREEN_NOTLIGHTUP_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_SIGNAL_LIGHTOFF_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    DH_MSG_OBJECT stuObject;       
    NET_POINT stuDetectRegion[20]; 
    int nDetectRegionNum;          
    UINT nIndexInData;             
    char szChannelId[260];         
    char szReserved[760];          
} NET_DEV_EVENT_SIGNAL_LIGHTOFF_DETECTION_INFO;
typedef struct tagNET_COMPARE_DETECTION_IMAGEINFO
{
    int nIndexInData;        
    UINT nPicType;           
    UINT nOffset;            
    UINT nLength;            
    char szFilePath[256];    
    NET_RECT stuBoundingBox; 
    char szReserved[256];    
} NET_COMPARE_DETECTION_IMAGEINFO;
typedef struct tagNET_DEV_EVENT_PIC_COMPARE_DETECTION_INFO
{
    int nChannelID;                                   
    int nAction;                                      
    char szName[128];                                 
    char szClass[16];                                 
    UINT nEventID;                                    
    UINT nUTCMS;                                      
    double dbPTS;                                     
    NET_TIME_EX stuUTC;                               
    UINT nPresetID;                                   
    char szTaskID[64];                                
    BOOL bIsAlarm;                                    
    int nImageInfoNum;                                
    NET_COMPARE_DETECTION_IMAGEINFO stuImageInfo[64]; 
    char szReserved[1024];                            
} NET_DEV_EVENT_PIC_COMPARE_DETECTION_INFO;
typedef struct tagNET_TRACK_OBJECT_INFO
{
    int nTrackID;         
    int nSpeed;           
    int nLongitude;       
    int nLatitude;        
    char szReserved[256]; 
} NET_TRACK_OBJECT_INFO;
typedef struct tagNET_DEV_EVENT_LINK_AGE_RADAR_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nUTCMS;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nAlarmFlag;                       
    int nUpDownGoing;                     
    NET_TRACK_OBJECT_INFO stuTrackObject; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szReserved[1024];                
} NET_DEV_EVENT_LINK_AGE_RADAR_ALARM_INFO;
typedef enum tagEM_VEHICLE_STATE_ALARM_FLAG
{
    EM_VEHICLE_STATE_ALARM_FLAG_UNKNOWN = -1, 
    EM_VEHICLE_STATE_ALARM_FLAG_NO_ALARM,     
    EM_VEHICLE_STATE_ALARM_FLAG_ALARM,        
    EM_VEHICLE_STATE_ALARM_FLAG_NO_MEAN,      
} EM_VEHICLE_STATE_ALARM_FLAG;
typedef struct tagNET_DEV_EVENT_VEHICLE_STATE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    UINT nUTCMS;        
    UINT nACK;                               
    char szStatus[32];                       
    char szTaskID[64];                       
    UINT nOilTankage;                        
    UINT nCurrentFuel;                       
    UINT nConsumptionOil;                    
    UINT nTotalUsedFuel;                     
    UINT nTotalDistance;                     
    int nServiceDistance;                    
    EM_VEHICLE_STATE_ALARM_FLAG emAlarmFlag; 
    int nCurrentGear;                        
    UINT nSpeed;                             
    EM_COVER_STATUS emCoverStatus;           
    EM_LIFT_STATUS emLiftStatus;             
    EM_LOAD_STATUS emLoadStatus;             
    NET_GPS_STATUS_INFO stuGPSStatus;        
    char szReserved[1024];                   
} NET_DEV_EVENT_VEHICLE_STATE_INFO;
typedef struct tagNET_DEV_EVENT_PASS_WINDOW_DELIVERY_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nRuleID;       
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    UINT nEventID;      
    int nObjectsNum;                 
    DH_MSG_OBJECT stuObjects[128];   
    int nDetectRegionNum;            
    int nDeliveryRegionNum;          
    NET_POINT stuDetectRegion[20];   
    NET_POINT stuDeliveryRegion[20]; 
    SCENE_IMAGE_INFO stuSceneImage;  
    char szReserved[1024];           
} NET_DEV_EVENT_PASS_WINDOW_DELIVERY_INFO;
typedef struct tagNET_DOOR_STATE_ABNORMAL_INFO
{
    NET_CFG_TIME_SCHEDULE stuDSTimeSection; 
    UINT nDoorState;                        
    char szReserved[124];                   
} NET_DOOR_STATE_ABNORMAL_INFO;
typedef struct tagNET_OPEN_DOOR_ABNORMAL_INFO
{
    NET_CFG_TIME_SCHEDULE stuODTimeSection; 
    UINT nLongTime;                         
    char szReserved[124];                   
} NET_OPEN_DOOR_ABNORMAL_INFO;
typedef struct tagNET_DEV_EVENT_DOOR_STATE_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    UINT nRuleID;       
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    UINT nEventID;      
    UINT nPresetID;     
    int nDetectRegionNum;                              
    NET_POINT stuDetectRegion[20];                     
    SCENE_IMAGE_INFO stuSceneImage;                    
    char szAlarmType[32];                              
    NET_DOOR_STATE_ABNORMAL_INFO stuDoorStateAbnormal; 
    NET_OPEN_DOOR_ABNORMAL_INFO stuOpenDoorAbnormal;   
    char szReserved[1020];                             
} NET_DEV_EVENT_DOOR_STATE_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_WASTE_MIXED_INVEST_INFO
{
    int nChannelID;        
    int nAction;           
    char szName[128];      
    char szClass[16];      
    UINT nRuleID;          
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    UINT nEventID;         
    UINT nPresetID;        
    char szPresetName[64]; 
    int nObjectsNum;                    
    int nDetectRegionNum;               
    NET_POINT stuDetectRegion[20];      
    DH_MSG_OBJECT stuObjects[64];       
    char szSourceID[32];                
    char szRuleName[128];               
    UINT nRuleId;                       
    UINT nViolationDuration;            
    NET_IMAGE_INFO_EX2* pstuImageInfo;  
    int nImageInfoNum;                  
    char szReserved[508 - POINTERSIZE]; 
} NET_DEV_EVENT_WASTE_MIXED_INVEST_INFO;
typedef struct tagNET_DEV_EVENT_UNBROKEN_TRASHBAG_INFO
{
    int nChannelID;        
    int nAction;           
    char szName[128];      
    char szClass[16];      
    UINT nRuleID;          
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    UINT nEventID;         
    UINT nPresetID;        
    char szPresetName[64]; 
    int nObjectsNum;                    
    int nDetectRegionNum;               
    NET_POINT stuDetectRegion[20];      
    DH_MSG_OBJECT stuObjects[64];       
    char szSourceID[32];                
    char szRuleName[128];               
    UINT nRuleId;                       
    UINT nViolationDuration;            
    NET_IMAGE_INFO_EX2* pstuImageInfo;  
    int nImageInfoNum;                  
    char szReserved[508 - POINTERSIZE]; 
} NET_DEV_EVENT_UNBROKEN_TRASHBAG_INFO;
typedef struct tagNET_DEV_EVENT_PERSON_CARRY_TRASHBAG_INFO
{
    int nChannelID;        
    int nAction;           
    char szName[128];      
    char szClass[16];      
    UINT nRuleID;          
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nUTCMS;           
    UINT nEventID;         
    UINT nPresetID;        
    char szPresetName[64]; 
    int nObjectsNum;                    
    int nDetectRegionNum;               
    NET_POINT stuDetectRegion[20];      
    DH_MSG_OBJECT stuObjects[64];       
    char szSourceID[32];                
    char szRuleName[128];               
    UINT nRuleId;                       
    UINT nViolationDuration;            
    NET_IMAGE_INFO_EX2* pstuImageInfo;  
    int nImageInfoNum;                  
    char szReserved[508 - POINTERSIZE]; 
} NET_DEV_EVENT_PERSON_CARRY_TRASHBAG_INFO;
typedef struct tagNET_DEV_EVENT_ILLEGAL_CARRIAGE_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[128];  
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    char byReserved[4]; 
    UINT nUTCMS;        
    UINT nEventID;      
    DH_MSG_OBJECT_EX2 stuVehicles[10];   
    int nVehiclesNum;                    
    int nObjectsNum;                     
    DH_MSG_OBJECT_EX2 stuObjects[10];    
    SCENE_IMAGE_INFO stuSceneImage;      
    UINT nBusDoorStatus;                 
    UINT nIsTrunk;                       
    NET_IMAGE_INFO_EX2* pstuImageInfo;   
    int nImageInfoNum;                   
    int nDetectRegionNum;                
    NET_POINT_EX stuDetectRegion[20];    
    char szReserved[1936 - POINTERSIZE]; 
} NET_DEV_EVENT_ILLEGAL_CARRIAGE_INFO;
typedef struct tagNET_TORPRDO_INFO
{
    char szTroprdoNumber[128]; 
    float fTemp;               
    int nTempUnit;             
    BOOL bIsOverTemp;          
    UINT nBoundingBox[4];      
    UINT nAlarmState;          
    char szReserved[124];      
} NET_TORPRDO_INFO;
typedef struct tagNET_DEV_EVENT_TORPEDO_DETECT_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[128];  
    UINT nGroupID;      
    UINT nCountInGroup; 
    char byReserved[4]; 
    UINT nIndexInGroup; 
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    UINT nEventID;      
    DH_MSG_OBJECT_EX2 stuTorpedoObject; 
    UINT nDetectRegion[20][2];          
    UINT nPresetID;                     
    int nSequence;                      
    NET_TORPRDO_INFO stuTorpedoInfo;    
    char szReserved[1024];              
} NET_DEV_EVENT_TORPEDO_DETECT_ALARM_INFO;
typedef struct tagNET_DEV_EVENT_GAS_TANK_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[128];  
    UINT nRuleID;       
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    char byReserved[4]; 
    UINT nUTCMS;        
    UINT nEventID;      
    DH_MSG_OBJECT_EX2 stuObject;          
    DH_MSG_OBJECT_EX2 stuObjects[100];    
    int nObjectNum;                       
    int nDetectRegionNum;                 
    NET_POINT stuDetectRegion[20];        
    int nCount;                           
    EM_EVENT_LEVEL emEventLevel;          
    UINT nPresetID;                       
    char szPresetName[64];                
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    SCENE_IMAGE_INFO stuSceneImage;       
    char szReserved[1024];                
} NET_DEV_EVENT_GAS_TANK_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_UNATTENDED_DETENTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nImageInfoNum;                 
    NET_IMAGE_INFO_EX2* pstuImageInfo; 
    char szVideoPath[256];             
    char szPlateNumber[32];            
    char szSN[32];                     
    char szReserved[512];              
} NET_DEV_EVENT_UNATTENDED_DETENTION_INFO;
typedef struct tagNET_DEV_EVENT_DROP_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    char szClass[16];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nUTCMS;        
    UINT nEventID;      
    int nObjectsNum;                    
    DH_MSG_OBJECT stuObjects[128];      
    SCENE_IMAGE_INFO stuSceneImage;     
    NET_IMAGE_INFO_EX2* pstuImageInfo;  
    int nImageInfoNum;                  
    char szReserved[508 - POINTERSIZE]; 
} NET_DEV_EVENT_DROP_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_TEMPERATURE_ALARM_INFO
{
    int nChannelID;             
    int nAction;                
    NET_TIME_EX stuUTC;         
    char szName[128];           
    float fCurrent;             
    int nRange[2];              
    NET_GPS_STATUS_INFO stuGPS; 
    char szReserved[1024]; 
} NET_DEV_EVENT_TEMPERATURE_ALARM_INFO;
typedef struct tagNET_DEV_EVENT_HUMIDITY_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    float fCurrentValue;        
    float fLimitValue;          
    NET_GPS_STATUS_INFO stuGPS; 
    int nRange[2];              
    char szReserved[1024]; 
} NET_DEV_EVENT_HUMIDITY_ALARM_INFO;
typedef enum tagEM_POWER_SWITCHER_ALARM_TYPE
{
    EM_POWER_SWITCHER_ALARM_TYPE_UNKNOWN,     
    EM_POWER_SWITCHER_ALARM_TYPE_LOWCURRENT,  
    EM_POWER_SWITCHER_ALARM_TYPE_HIGHCURRENT, 
    EM_POWER_SWITCHER_ALARM_TYPE_LOWVOLTAGE,  
    EM_POWER_SWITCHER_ALARM_TYPE_HIGHVOLTAGE, 
    EM_POWER_SWITCHER_ALARM_TYPE_LOWPOWER,    
    EM_POWER_SWITCHER_ALARM_TYPE_HIGHPOWER,   
} EM_POWER_SWITCHER_ALARM_TYPE;
typedef struct tagNET_DEV_EVENT_POWER_SWITCHER_ALARM_INFO
{
    int nChannelID;     
    int nAction;        
    NET_TIME_EX stuUTC; 
    char szName[128];   
    int nPowerVoltage;                           
    int nPowerCurrent;                           
    int nPowerValue;                             
    int nSwitchOn;                               
    int nPowerState;                             
    EM_ALARM_INTERFACE_TYPE emInterfaceType;     
    int nAlarmTypeNum;                           
    EM_POWER_SWITCHER_ALARM_TYPE emAlarmType[8]; 
    int nCurrentCT;                              
    int nVoltagePT;                              
    char szReserved[1024]; 
} NET_DEV_EVENT_POWER_SWITCHER_ALARM_INFO;
typedef enum tagEM_OCR_DETECTION_DETECT_TYPE
{
    EM_OCR_DETECTION_DETECT_TYPE_UNKNOWN,     
    EM_OCR_DETECTION_DETECT_TYPE_TEMPERATURE, 
    EM_OCR_DETECTION_DETECT_TYPE_WEIGH,       
} EM_OCR_DETECTION_DETECT_TYPE;
typedef enum tagEM_OCR_DETECTION_TRIGGER_TYPE
{
    EM_OCR_DETECTION_TRIGGER_TYPE_UNKNOWN = -1,          
    EM_OCR_DETECTION_TRIGGER_TYPE_GREATER_THAN_TOPLIMIT, 
    EM_OCR_DETECTION_TRIGGER_TYPE_LESS_THAN_LOWERLIMIT,  
    EM_OCR_DETECTION_TRIGGER_TYPE_EQUAL_TO_THRESHOLD,    
} EM_OCR_DETECTION_TRIGGER_TYPE;
typedef struct tagDEV_EVENT_OCR_DETECTION_INFO
{
    int nChannelID;                              
    int nAction;                                 
    char szName[128];                            
    char szClass[16];                            
    UINT nRuleId;                                
    int nGroupID;                                
    int nCountInGroup;                           
    int nIndexInGroup;                           
    NET_TIME_EX stuUTC;                          
    UINT nUTCMS;                                 
    double dbPTS;                                
    UINT nEventID;                               
    UINT nPresetID;                              
    char szContent[256];                         
    EM_OCR_DETECTION_DETECT_TYPE emDetectType;   
    EM_OCR_DETECTION_TRIGGER_TYPE emTriggerType; 
    SCENE_IMAGE_INFO stuSceneImage;              
    NET_IMAGE_INFO_EX2 stuImageInfo[32];         
    int nImageInfoNum;                           
    char szReserved[1020];                       
} DEV_EVENT_OCR_DETECTION_INFO;
typedef enum tagEM_TRAFFIC_LIGHT_DIRECTION
{
    EM_TRAFFIC_LIGHT_DIRECTION_UNKNOWN,  
    EM_TRAFFIC_LIGHT_DIRECTION_LEFT,     
    EM_TRAFFIC_LIGHT_DIRECTION_STRAIGHT, 
    EM_TRAFFIC_LIGHT_DIRECTION_RIGHT,    
    EM_TRAFFIC_LIGHT_DIRECTION_UTURN,    
    EM_TRAFFIC_LIGHT_DIRECTION_NOENTRY,  
} EM_TRAFFIC_LIGHT_DIRECTION;
typedef enum tagEM_TRAFFIC_LIGHT_STATE
{
    EM_TRAFFIC_LIGHT_STATE_UNKNOWN, 
    EM_TRAFFIC_LIGHT_STATE_TURNOFF, 
    EM_TRAFFIC_LIGHT_STATE_TURNON,  
} EM_TRAFFIC_LIGHT_STATE;
typedef enum tagEM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE
{
    EM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE_UNKNOWN,  
    EM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE_NOTLIGHT, 
    EM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE_LIGHT,    
    EM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE_SHINING,  
    EM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE_NORMAL,   
} EM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE;
typedef struct tagNET_TRAFFIC_LANE_INDICATOR_INFO
{
    EM_TRAFFIC_LIGHT_DIRECTION emLightDirection;      
    EM_TRAFFIC_LIGHT_STATE emLightState;              
    EM_TRAFFIC_LANE_INDICATOR_FAULT_TYPE emFaultType; 
    char szReserved[512];                             
} NET_TRAFFIC_LANE_INDICATOR_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_LANE_INDICATOR_FAULT_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    NET_TRAFFIC_LANE_INDICATOR_INFO stuLaneIndicatorInfo[5]; 
    int nLaneIndicatorInfoNum;                               
    char szReserved[1024];                                   
} DEV_EVENT_TRAFFIC_LANE_INDICATOR_FAULT_INFO;
typedef struct tagNET_WATER_SPEED_INFO
{
    float fSpeed;         
    float fDistance;      
    char szReserved[128]; 
} NET_WATER_SPEED_INFO;
typedef enum tagEM_WATER_SPEED_STATUS
{
    EM_WATER_SPEED_STATUS_UNKNOWN, 
    EM_WATER_SPEED_STATUS_NORMAL,  
    EM_WATER_SPEED_STATUS_HIGH,    
    EM_WATER_SPEED_STATUS_LOW,     
} EM_WATER_SPEED_STATUS;
typedef enum tagEM_EVENT_TYPE
{
    EM_EVENT_TYPE_UNKNOWN, 
    EM_EVENT_TYPE_REAL,    
    EM_EVENT_TYPE_ALARM,   
} EM_EVENT_TYPE;
typedef struct tagDEV_EVENT_WATER_SPEED_DETECTION_INFO
{
    int nChannelID;     
    int nAction;        
    char szName[128];   
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    int nEventID;       
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    EM_EVENT_TYPE emEventType; 
    UINT nPresetID;            
    char szPresetName[64];     
    NET_WATER_SPEED_INFO stuWaterSpeed[50];       
    int nWaterSpeedNum;                           
    EM_WATER_SPEED_STATUS emStatus;               
    NET_INTELLIGENCE_IMAGE_INFO stuOriginalImage; 
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;    
    char szReserved[1024];                        
} DEV_EVENT_WATER_SPEED_DETECTION_INFO;
typedef struct tagDEV_EVENT_VALVE_ABNORMAL_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[128];                  
    EM_CLASS_TYPE emClassType;         
    UINT nRuleID;                      
    double dbPTS;                      
    NET_TIME_EX stuUTC;                
    UINT nEventID;                     
    UINT UTCMS;                        
    UINT nSequence;                    
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    char szReserved[1024];             
} DEV_EVENT_VALVE_ABNORMAL_INFO;
typedef struct tagDEV_EVENT_DISCHARGE_PORT_ABNORMAL_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    EM_CLASS_TYPE emClassType;      
    UINT nRuleID;                   
    double dbPTS;                   
    NET_TIME_EX stuUTC;             
    UINT nEventID;                  
    UINT UTCMS;                     
    UINT nSequence;                 
    SCENE_IMAGE_INFO stuSceneImage; 
    char szReserved[1024];          
} DEV_EVENT_DISCHARGE_PORT_ABNORMAL_INFO;
typedef enum tagEM_EM_FIRE_DOOR_STATUS
{
    EM_FIRE_DOOR_UNKNOWN, 
    EM_FIRE_DOOR_CLOSED,  
    EM_FIRE_DOOR_OPEN     
} EM_FIRE_DOOR_STATUS;
typedef struct tagDEV_EVENT_FIRE_DOOR_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    char szReserved[4]; 
    EM_SCENE_CLASS_TYPE emClassType;      
    EM_FIRE_DOOR_STATUS emFireDoorStatus; 
    DH_MSG_OBJECT stuObject;              
    SCENE_IMAGE_INFO_EX stuSceneImage;    
    NET_IMAGE_INFO_EX2* pstuImageInfo;    
    int nImageInfoNum;                    
    char szReserved1[1020 - POINTERSIZE]; 
} DEV_EVENT_FIRE_DOOR_DETECTION_INFO;
typedef enum tagEM_FIRE_EXTINGUISHER_CATEGORY_TYPE
{
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_UNKNOWN,                     
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_EXTINGUISHER_GENERAL,        
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_EXTINGUISHER_HANDPUSH,       
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_SIGNBOARD_GENERAL,           
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_SIGNBOARD_STATIC_ELETRICITY, 
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_SIGNBOARD_OILCAP,            
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_ROADCONE,                    
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_COVERPLATE,                  
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_OILCAP_OPEN,                 
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE_OILCAP_CLOSE,                
} EM_FIRE_EXTINGUISHER_CATEGORY_TYPE;
typedef struct tagNET_FIRE_EXTINGUISHER_CATEGORY_INFO
{
    EM_FIRE_EXTINGUISHER_CATEGORY_TYPE emCategory; 
    int nNum;                                      
    char szReserved[128];                          
} NET_FIRE_EXTINGUISHER_CATEGORY_INFO;
typedef struct tagNET_FIRE_EXTINGUISHER_OBJECT_INFO
{
    UINT nAlertNum;                                          
    int nCategoryInfoNum;                                    
    NET_FIRE_EXTINGUISHER_CATEGORY_INFO stuCategoryInfo[16]; 
    char szReserved[256];                                    
} NET_FIRE_EXTINGUISHER_OBJECT_INFO;
typedef struct tagDEV_EVENT_FIRE_EXTINGUISHER_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    EM_SCENE_CLASS_TYPE emClassType;                 
    DH_MSG_OBJECT stuObject;                         
    SCENE_IMAGE_INFO_EX stuSceneImage;               
    NET_FIRE_EXTINGUISHER_OBJECT_INFO stuObjectInfo; 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    NET_IMAGE_INFO_EX2* pstuImageInfo;               
    int nImageInfoNum;                               
    char szReserved[1020 - POINTERSIZE];             
} DEV_EVENT_FIRE_EXTINGUISHER_DETECTION_INFO;
typedef enum tagEM_PARKING_CHANGE_STATUS
{
    EM_PARKING_CHANGE_STATUS_UNKNOW = -1, 
    EM_PARKING_CHANGE_STATUS_UNCHANGED,   
    EM_PARKING_CHANGE_STATUS_INCREASE,    
    EM_PARKING_CHANGE_STATUS_REDUCE,      
} EM_PARKING_CHANGE_STATUS;
typedef struct tagDEV_PARKING_STATUS_INFO
{
    int nID;                                 
    char szName[32];                         
    UINT nParkedNumber;                      
    EM_PARKING_CHANGE_STATUS emChangeStatus; 
} DEV_PARKING_STATUS_INFO;
typedef struct tagDEV_EVENT_PARKING_LIMIT_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT UTCMS;         
    UINT nEventID;      
    EM_SCENE_CLASS_TYPE emClassType;              
    UINT nRuleID;                                 
    UINT nSequence;                               
    DEV_PARKING_STATUS_INFO stParkingStatus[100]; 
    int nParkingStatusNum;                        
    char szReserved[1024];                        
} DEV_EVENT_PARKING_LIMIT_DETECTION_INFO;
typedef struct tagDEV_EVENT_PARKING_STATUS_CHANGE_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT UTCMS;         
    UINT nEventID;      
    EM_SCENE_CLASS_TYPE emClassType;              
    UINT nRuleID;                                 
    UINT nSequence;                               
    DEV_PARKING_STATUS_INFO stParkingStatus[100]; 
    int nParkingStatusNum;                        
    char szReserved[1024];                        
} DEV_EVENT_PARKING_STATUS_CHANGE_DETECTION_INFO;
typedef struct tagDEV_EVENT_DOOR_NOT_CLOSE_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    char szSN[32];                   
    BOOL bRealUTC;                   
    NET_TIME_EX RealUTC;             
    int nOpenTimeOut;                
    UINT nACK;                       
    NET_GPS_STATUS_INFO stGPSStatus; 
    BYTE byReserved[240];            
} DEV_EVENT_DOOR_NOT_CLOSE_INFO;
typedef enum tagEM_INSTRUMENT_TYPE
{
    EM_INSTRUMENT_TYPE_UNKNOWN,    
    EM_INSTRUMENT_TYPE_STATE,      
    EM_INSTRUMENT_TYPE_STATEMATCH, 
    EM_INSTRUMENT_TYPE_METER,      
    EM_INSTRUMENT_TYPE_CHAR,       
    EM_INSTRUMENT_TYPE_OIL,        
    EM_INSTRUMENT_TYPE_SWIIDEN,    
    EM_INSTRUMENT_TYPE_LIGHT,      
    EM_INSTRUMENT_TYPE_SWITCH,     
    EM_INSTRUMENT_TYPE_APPEARANCE, 
    EM_INSTRUMENT_TYPE_LEVELGAUGE, 
} EM_INSTRUMENT_TYPE;
typedef enum tagEM_PIC_TYPE
{
    EM_PIC_TYPE_UNKNOWN = -1,              
    EM_PIC_TYPE_ALGORITHMICALLY_PROCESSED, 
} EM_PIC_TYPE;
typedef struct tagNET_IMAGE_INFO
{
    EM_PIC_TYPE emPicType; 
    unsigned int nOffset;  
    unsigned int nLength;  
    char szFilePath[256];  
    BYTE byReserved[1024]; 
} NET_IMAGE_INFO;
typedef struct tagDEV_EVENT_DIALRECOGNITION_INFO
{
    unsigned int nChannelID;        
    unsigned int nPresetID;         
    char szTaskID[64];              
    EM_INSTRUMENT_TYPE emType;      
    int nRetImageInfoNum;           
    NET_IMAGE_INFO stuImgaeInfo[8]; 
    char szDialResult[2048];        
    int nOriginalImageOffset;       
    int nOriginalImageLength;       
    UINT nAlarmType;                
    char szDialSubType[32];         
    float fUpperThreshold;          
    float fLowerThreshold;          
    NET_RECT stuBoundingBox[128];   
    int nRetBoundingBoxNum;         
    char szReserved[968];           
} DEV_EVENT_DIALRECOGNITION_INFO;
typedef enum tagEM_AIRBORNE_TYPE
{
    EM_AIRBORNE_TYPE_UNKNOWN,    
    EM_AIRBORNE_TYPE_PLASTICBAG, 
    EM_AIRBORNE_TYPE_TEXTILE,    
    EM_AIRBORNE_TYPE_KITE,       
} EM_AIRBORNE_TYPE;
typedef struct tagNET_AIRBORNE_DETECT
{
    EM_AIRBORNE_TYPE emAirborneType; 
    NET_RECT stuBoundingBox;         
} NET_AIRBORNE_DETECT;
typedef struct tagNET_NEST_DETECT
{
    NET_RECT stuBoundingBox; 
} NET_NEST_DETECT;
typedef enum tagEM_DIAL_STATE
{
    EM_DIAL_STATE_UNKNOWN,          
    EM_DIAL_STATE_NORMAL,           
    EM_DIAL_STATE_DIM,              
    EM_DIAL_STATE_DIAL_BROKEN,      
    EM_DIAL_STATE_SHELL_BROKEN,     
    EM_DIAL_STATE_ABNORMAL_READING, 
} EM_DIAL_STATE;
typedef struct tagNET_DIAL_DETECT
{
    EM_DIAL_STATE emDialState; 
    NET_RECT stuBoundingBox;   
} NET_DIAL_DETECT;
typedef struct tagNET_LEAKAGE_DETECT
{
    NET_RECT stuBoundingBox; 
} NET_LEAKAGE_DETECT;
typedef enum tagEM_DOOR_STATE
{
    EM_DOOR_STATE_UNKNOWN, 
    EM_DOOR_STATE_OPEN,    
    EM_DOOR_STATE_CLOSE,   
} EM_DOOR_STATE;
typedef struct tagNET_DOOR_DETECT
{
    EM_DOOR_STATE emDoorState; 
    NET_RECT stuBoundingBox;   
} NET_DOOR_DETECT;
typedef enum tagEM_RESPIRATOR_STATE
{
    EM_RESPIRATOR_STATE_UNKNOWN,                  
    EM_RESPIRATOR_STATE_NORMAL,                   
    EM_RESPIRATOR_STATE_SILICA_GEL_COLOR_CHANGE,  
    EM_RESPIRATOR_STATE_SILICA_GEL_BARREL_BROKEN, 
    EM_RESPIRATOR_STATE_ABNORMAL_OIL_LEVEL,       
} EM_RESPIRATOR_STATE;
typedef struct tagNET_RESPIRATOR_DETECT
{
    EM_RESPIRATOR_STATE emRespiratorState; 
    NET_RECT stuBoundingBox;               
} NET_RESPIRATOR_DETECT;
typedef struct tagNET_SMOKING_DETECT
{
    NET_RECT stuBoundingBox; 
} NET_SMOKING_DETECT;
typedef enum tagEM_INSULATOR_STATE
{
    EM_INSULATOR_STATE_UNKNOWN, 
    EM_INSULATOR_STATE_NORMAL,  
    EM_INSULATOR_STATE_BROKEN,  
} EM_INSULATOR_STATE;
typedef struct tagNET_INSULATOR_DETECT
{
    EM_INSULATOR_STATE emInsulatorState; 
    NET_RECT stuBoundingBox;             
} NET_INSULATOR_DETECT;
typedef enum tagEM_COVER_PLATE_STATE
{
    EM_COVER_PLATE_STATE_UNKNOWN, 
    EM_COVER_PLATE_STATE_NORMAL,  
    EM_COVER_PLATE_STATE_BROKEN,  
} EM_COVER_PLATE_STATE;
typedef struct tagNET_COVER_PLATE_DETECT
{
    EM_COVER_PLATE_STATE emCoverPlateState; 
    NET_RECT stuBoundingBox;                
} NET_COVER_PLATE_DETECT;
typedef enum tagEM_PRESSING_PLATE_STATE
{
    EM_PRESSING_PLATE_STATE_UNKNOWN,    
    EM_PRESSING_PLATE_STATE_DISCONNECT, 
    EM_PRESSING_PLATE_STATE_CLOSE,      
} EM_PRESSING_PLATE_STATE;
typedef struct tagNET_PRESSING_PLATE_DETECT
{
    EM_PRESSING_PLATE_STATE emPressingPlateState; 
    NET_RECT stuBoundingBox;                      
} NET_PRESSING_PLATE_DETECT;
typedef enum tagELECTRIC_FAULT_ENABLE_RULES
{
    ELECTRIC_FAULT_ENABLE_RULES_UNKNOWN,             
    ELECTRIC_FAULT_ENABLE_RULES_AIRBORNEDETECT,      
    ELECTRIC_FAULT_ENABLE_RULES_NESTDETECT,          
    ELECTRIC_FAULT_ENABLE_RULES_DIALDETECT,          
    ELECTRIC_FAULT_ENABLE_RULES_LEAKAGEDETECT,       
    ELECTRIC_FAULT_ENABLE_RULES_DOORDETECT,          
    ELECTRIC_FAULT_ENABLE_RULES_RESPIRATORDETECT,    
    ELECTRIC_FAULT_ENABLE_RULES_SMOKINGDETECT,       
    ELECTRIC_FAULT_ENABLE_RULES_INSULATORDETECT,     
    ELECTRIC_FAULT_ENABLE_RULES_COVERPLATEDETECT,    
    ELECTRIC_FAULT_ENABLE_RULES_PRESSINGPLATEDETECT, 
    ELECTRIC_FAULT_ENABLE_RULES_CORROSIONDETECT,     
} ELECTRIC_FAULT_ENABLE_RULES;
typedef struct tagNET_METAL_CORROSION
{
    NET_RECT stuBoundingBox; 
    char bReserved[128];     
} NET_METAL_CORROSION;
typedef struct tagDEV_EVENT_ELECTRICFAULTDETECT_INFO
{
    EM_CLASS_TYPE emClassType; 
    UINT nChannel;             
    UINT nRuleID;              
    int nEventID;              
    char szName[128];          
    double PTS;                
    NET_TIME_EX UTC;           
    UINT nPresetID;            
    UINT nUTCMS;               
    ELECTRIC_FAULT_ENABLE_RULES emEnableRules[16];           
    int nEnableRulesNum;                                     
    int nAirborneDetectNum;                                  
    NET_AIRBORNE_DETECT stuAirborneDetectInfo[8];            
    NET_NEST_DETECT stuNestDetectInfo[8];                    
    int nNestDetectNum;                                      
    int nDialDetectNum;                                      
    NET_DIAL_DETECT stuDialDetectInfo[8];                    
    NET_LEAKAGE_DETECT stuLeakageDetectInfo[8];              
    int nLeakageDetectNum;                                   
    int nDoorDetectNum;                                      
    NET_DOOR_DETECT stuDoorDetectInfo[8];                    
    NET_RESPIRATOR_DETECT stuRespiratorDetectInfo[8];        
    int nRespiratorDetectNum;                                
    int nSmokingDetectNum;                                   
    NET_SMOKING_DETECT stuSmokingDetectInfo[8];              
    SCENE_IMAGE_INFO stuSceneImageInfo;                      
    NET_INSULATOR_DETECT stuInsulatorDetectInfo[8];          
    int nInsulatorDetectNum;                                 
    int nCoverPlateDetectNum;                                
    NET_COVER_PLATE_DETECT stuCoverPlateDetectInfo[8];       
    NET_PRESSING_PLATE_DETECT stuPressingPlateDetectInfo[8]; 
    int nPressingPlateDetectNum;                             
    int nMetalCorrosionNum;                                  
    NET_METAL_CORROSION stuMetalCorrosionInfo[8];            
    BYTE bReserved[1024];                                    
} DEV_EVENT_ELECTRICFAULTDETECT_INFO;
typedef struct tagDEV_EVENT_FIRE_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved1[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    DH_EVENT_FILE_INFO stuFileInfo;                  
    BYTE bEventAction;                               
    BYTE byReserved[2];                              
    BYTE byImageIndex;                               
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                           
    int nSourceIndex;                               
    char szSourceDevice[MAX_PATH];                  
    unsigned int nOccurrenceCount;                  
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    BOOL bSceneImage;                               
    SCENE_IMAGE_INFO_EX stuSceneImage;              
    DH_MSG_OBJECT stuVehicle;                       
    EM_TRIGGER_TYPE emTriggerType;                  
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;   
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                    
    NET_IMAGE_INFO_EX2* pstuImageInfo;              
    int nImageInfoNum;                              
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
} DEV_EVENT_FIRE_INFO;
typedef struct tagDEV_EVENT_CROSSREGION_INFO
{
    int nChannelID;                                  
    char szName[128];                                
    char bReserved2[4];                              
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    DH_MSG_OBJECT stuObject;                         
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    int nDetectRegionNum;                            
    DH_POINT TrackLine[DH_MAX_TRACK_LINE_NUM];       
    int nTrackLineNum;                               
    BYTE bEventAction;                               
    BYTE bDirection;                                 
    BYTE bActionType;                                
    BYTE byImageIndex;                               
    DWORD dwSnapFlagMask;                            
    int nSourceIndex;                                
    char szSourceDevice[MAX_PATH];                   
    unsigned int nOccurrenceCount;                   
    NET_CUSTOM_INFO stuCustom;                       
    NET_EXTENSION_INFO stuExtensionInfo;             
    UINT nRuleID;                                    
    NET_PRESET_POSITION stPosition;                  
    UINT nVisibleHFOV;                               
    UINT nVisibleVFOV;                               
    UINT nCurChannelHFOV;                            
    UINT nCurChannelVFOV;                            
    char szRealEventType[32];                        
    BYTE bReserved[264];                             
    int nObjectNum;                                  
    DH_MSG_OBJECT stuObjectIDs[DH_MAX_OBJECT_LIST];  
    int nTrackNum;                                   
    DH_POLY_POINTS stuTrackInfo[DH_MAX_OBJECT_LIST]; 
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    SCENE_IMAGE_INFO_EX stuSceneImage;               
    UINT nObjetcHumansNum;                           
    NET_VAOBJECT_NUMMAN stuObjetcHumans[100];        
    DH_MSG_OBJECT stuVehicle;                        
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;    
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;  
    EVENT_COMM_INFO stuCommInfo;                     
    NET_PTZSPACE_UNNORMALIZED stuAbsPosition;        
    int nHFovValue;                                  
    double dbFocusPosition;                          
    UINT nObjectBoatNum;                             
    NET_BOAT_OBJECT stuBoatObject[100];              
    int nImageNum;                                   
    NET_IMAGE_INFO_EX2* pImageArray;                 
    NET_EVENT_INFO_EXTEND stuEventInfoEx;            
    DH_MSG_OBJECT_EX2* pstuObjectEx2;                
    DH_MSG_OBJECT_EX2* pstuObjectIDsEx2;             
    DH_MSG_OBJECT_EX2* pstuVehicleEx2;               
} DEV_EVENT_CROSSREGION_INFO;
typedef enum tagEM_SMOKE_COLOR
{
    EM_SMOKE_COLOR_UNKNOWN, 
    EM_SMOKE_COLOR_WHITE,   
    EM_SMOKE_COLOR_BLACK,   
    EM_SMOKE_COLOR_RED,     
    EM_SMOKE_COLOR_YELLOW,  
} EM_SMOKE_COLOR;
typedef struct tagDEV_EVENT_SMOKE_INFO
{
    int nChannelID;                 
    char szName[128];               
    UINT nRuleID;                   
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    DH_MSG_OBJECT stuObject;        
    DH_EVENT_FILE_INFO stuFileInfo; 
    BYTE bEventAction;              
    BYTE byReserved[2];
    BYTE byImageIndex;                              
    DWORD dwSnapFlagMask;                           
    unsigned int nOccurrenceCount;                  
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    PTZ_SPACE_UNIT stuPtzPosition;                  
    BOOL bSceneImage;                               
    SCENE_IMAGE_INFO_EX stuSceneImage;              
    DH_MSG_OBJECT stuVehicle;                       
    EM_TRIGGER_TYPE emTriggerType;                  
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                    
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;   
    UINT nCurChannelHFOV;                           
    UINT nCurChannelVFOV;                           
    NET_GPS_INFO_EX stuGPS;                         
    int nObjectCount;                               
    DH_MSG_OBJECT_EX2 stuObjects[16];               
    EM_SMOKE_COLOR emSmokeColor[16];                
    int nSmokeColorNum;                             
    NET_IMAGE_INFO_EX2* pstuImageInfo;              
    int nImageInfoNum;                              
    NET_EVENT_INFO_EXTEND stuEventInfoEx;           
    char szReserved[944];                           
} DEV_EVENT_SMOKE_INFO;
typedef struct tagNET_TRAFFIC_JUNCTION_CUSTOM_INFO
{
    NET_GPS_STATUS_INFO stuGPSStatus; 
    BYTE byReserved[1024];            
} NET_TRAFFIC_JUNCTION_CUSTOM_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_WRONG_TURN_LIGHT_INFO
{
    int nAction;      
    int nChannelID;   
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    int nMark;                                          
    int nSource;                                        
    int nFrameSequence;                                 
    int nLaneID;                                        
    int nSpeed;                                         
    char szDriverID[32];                                
    EM_TRIGGER_TYPE emTriggerType;                      
    EVENT_COMM_INFO stuCommInfo;                        
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;       
    DH_EVENT_FILE_INFO stuFileInfo;                     
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;     
    NET_TRAFFIC_JUNCTION_CUSTOM_INFO stuJunctionCustom; 
    DH_MSG_OBJECT stuObject;                            
    DH_MSG_OBJECT stuVehicle;                           
    BYTE byResersed[1024];                              
} DEV_EVENT_TRAFFIC_WRONG_TURN_LIGHT_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_REAREND_ACCIDENT_INFO
{
    int nAction;      
    int nChannelID;   
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    UINT nEventID;    
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    UINT nLaneID;                                   
    EVENT_COMM_INFO stuCommInfo;                    
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;   
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    DH_MSG_OBJECT stuObjects[50];                   
    int nObjectNum;                                 
    BYTE byResersed[1020];                          
} DEV_EVENT_TRAFFIC_REAREND_ACCIDENT_INFO;
typedef enum tagEM_TALK_ACTION_TYPE
{
    EM_TALK_ACTION_TYPE_UNKNOWN, 
    EM_TALK_ACTION_TYPE_INVITE,  
    EM_TALK_ACTION_TYPE_HANGUP,  
} EM_TALK_ACTION_TYPE;
typedef enum tagEM_CALL_SOURCE_TYPE
{
    EM_CALL_SOURCE_TYPE_UNKNOWN,     
    EM_CALL_SOURCE_TYPE_VT_OR_SIP,   
    EM_CALL_SOURCE_TYPE_GEN2,        
    EM_CALL_SOURCE_TYPE_THIRD_PARTY, 
} EM_CALL_SOURCE_TYPE;
typedef enum tagEM_HANGUP_REASON
{
    EM_HANGUP_REASON_UNKNOWN,       
    EM_HANGUP_REASON_ANSWER_BY_VTH, 
    EM_HANGUP_REASON_REFUSE_BY_VTH, 
    EM_HANGUP_REASON_HANGUP_BY_VTO, 
} EM_HANGUP_REASON;
typedef struct tagDEV_EVENT_DO_TALK_ACTION_INFO
{
    int nAction;                      
    int nChannelID;                   
    char szName[128];                 
    double PTS;                       
    NET_TIME_EX UTC;                  
    int nEventID;                     
    char szCallID[64];                
    EM_TALK_ACTION_TYPE emTalkAction; 
    EM_CALL_SOURCE_TYPE emCallSource; 
    EM_HANGUP_REASON emHangupReason;  
    BYTE byReserved[1020];            
} DEV_EVENT_DO_TALK_ACTION_INFO;
typedef enum tagEM_WATERMONITOR_SCENE_TYPE
{
    EM_WATERMONITOR_SCENE_UNKNOWN,            
    EM_WATERMONITOR_SCENE_WATERSTAGE_RULE,    
    EM_WATERMONITOR_SCENE_WATERSTAGE_NO_RULE, 
    EM_WATERMONITOR_SCENE_WATERLOGG_RULE,     
    EM_WATERMONITOR_SCENE_WATERLOGG_NO_RULE,  
} EM_WATERSTAGE_SCENE_TYPE;
typedef struct tagNET_WATER_SURFACE_MASK_INFO
{
    UINT nColNum;          
    UINT nOffset;          
    UINT nLength;          
    BYTE byReserved[1020]; 
} NET_WATER_SURFACE_MASK_INFO;
typedef struct tagDEV_EVENT_WATER_STAGE_MONITOR_INFO
{
    int nChannelID;   
    int nAction;      
    char szName[128]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    UINT nRuleID;              
    EM_CLASS_TYPE emClassType; 
    EM_WATERSTAGE_SCENE_TYPE emSceneType;            
    double dbMark;                                   
    NET_POINT stuCrossPoint;                         
    NET_WATER_SURFACE_MASK_INFO stuWaterSurfaceMask; 
    BYTE byReserved[1020];                           
} DEV_EVENT_WATER_STAGE_MONITOR_INFO;
typedef enum tagEM_TRAFFIC_OVER_LINE_TRIGGER_TYPE
{
    EM_TRAFFIC_OVER_LINE_TRIGGER_TYPE_UNKNOWN,          
    EM_TRAFFIC_OVER_LINE_TRIGGER_TYPE_VEHICLE_DETECTOR, 
    EM_TRAFFIC_OVER_LINE_TRIGGER_TYPE_RADAR,            
    EM_TRAFFIC_OVER_LINE_TRIGGER_TYPE_VIDEO,            
} EM_TRAFFIC_OVER_LINE_TRIGGER_TYPE;
typedef struct tagDEV_EVENT_TRAFFIC_OVER_GUIDE_LINE_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[DH_EVENT_NAME_LEN];                  
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    int nEventID;                                    
    int nLane;                                       
    BYTE byReserved1[4];                             
    DH_MSG_OBJECT stuObject;                         
    BYTE byReserved2[4];                             
    DH_MSG_OBJECT stuVehicle;                        
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EM_TRAFFIC_OVER_LINE_TRIGGER_TYPE emTriggerLine; 
    int nSnapFrameMark;                              
    int nDataSourceAddress;                          
    int nFrameSequence;                              
    int nSequence;                                   
    int nSpeed;                                      
    DH_EVENT_FILE_INFO stuFileInfo;                  
    EVENT_COMM_INFO stuCommInfo;                     
    BYTE byReserved[1024];                           
} DEV_EVENT_TRAFFIC_OVER_GUIDE_LINE_INFO;
typedef enum tagEM_FIRE_LANE_MOVE_STATE
{
    EM_FIRE_LANE_MOVE_STATE_UNKNOWN, 
    EM_FIRE_LANE_MOVE_STATE_ENTER,   
    EM_FIRE_LANE_MOVE_STATE_LEAVE,   
} EM_FIRE_LANE_MOVE_STATE;
typedef enum tagEM_FIRE_LANE_OILCAP_STATE
{
    EM_FIRE_LANE_OILCAP_STATE_UNKNOWN, 
    EM_FIRE_LANE_OILCAP_STATE_OPEN,    
    EM_FIRE_LANE_OILCAP_STATE_CLOSE,   
} EM_FIRE_LANE_OILCAP_STATE;
typedef struct tagDEV_EVENT_FIRE_LANE_DETECTION_INFO
{
    int nChannelID;                          
    int nAction;                             
    char szName[128];                        
    double PTS;                              
    NET_TIME_EX UTC;                         
    int nEventID;                            
    int nSequence;                           
    int nRuleID;                             
    UINT nObjectNum;                         
    DH_MSG_OBJECT stuObjects[64];            
    DH_EVENT_FILE_INFO stuFileInfo;          
    BOOL bSceneImage;                        
    SCENE_IMAGE_INFO_EX stuSceneImage;       
    EM_FIRE_LANE_MOVE_STATE emMoveState;     
    EM_FIRE_LANE_OILCAP_STATE emOilCapState; 
    DH_MSG_OBJECT stuVehicle;                
    NET_IMAGE_INFO_EX2 stuImageInfo[32];     
    int nImageInfoNum;                       
    BOOL bNonMotorInfo;                      
    VA_OBJECT_NONMOTOR stuNonMotor;          
    NET_EVENT_INFO_EXTEND stuEventInfoEx;    
    char byReserved[1024];                   
} DEV_EVENT_FIRE_LANE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NON_MOTOR_RETROGRADE_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    DH_EVENT_FILE_INFO stuFileInfo;                  
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT nEventID;                                   
    UINT nRuleID;                                    
    EM_TRAFFIC_OVER_LINE_TRIGGER_TYPE emTriggerLine; 
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLaneID;                                     
    int nSpeed;                                      
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;    
    EVENT_COMM_INFO stuCommInfo;                     
    BOOL bNonMotorInfoEx;                            
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    BYTE byReserved[1012];                           
} DEV_EVENT_TRAFFIC_NON_MOTOR_RETROGRADE_INFO;
typedef struct tagDEV_EVENT_CAR_DRIVING_IN_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT nEventID;                                   
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLaneID;                                     
    int nSpeed;                                      
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;    
    BYTE bReserved[1020];                            
} DEV_EVENT_CAR_DRIVING_IN_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NON_MOTOR_OVER_STOP_LINE_INFO
{
    int nChannelID;                               
    int nAction;                                  
    char szName[128];                             
    DH_EVENT_FILE_INFO stuFileInfo;               
    double PTS;                                   
    NET_TIME_EX UTC;                              
    UINT nEventID;                                
    int nLaneID;                                  
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess; 
    BOOL bNonMotorInfoEx;                         
    VA_OBJECT_NONMOTOR stuNonMotor;               
    EVENT_COMM_INFO stuCommInfo;                  
    DWORD dwSnapFlagMask;                         
    DH_RESOLUTION_INFO stuResolution;             
    BYTE byReserved[1012];                        
} DEV_EVENT_TRAFFIC_NON_MOTOR_OVER_STOP_LINE_INFO;
typedef struct tagDEV_EVENT_CAR_DRIVING_OUT_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT nEventID;                                   
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    EM_TRIGGER_TYPE emTriggerType;                   
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLaneID;                                     
    int nSpeed;                                      
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;    
    BYTE bReserved[1020];                            
} DEV_EVENT_CAR_DRIVING_OUT_INFO;
typedef struct tagDEV_EVENT_ALARM_INFO
{
    int nChannelID;   
    char szName[128]; 
    char Reserved[4]; 
    double PTS;       
    NET_TIME_EX UTC;  
    int nEventID;     
    DH_EVENT_FILE_INFO stuFileInfo; 
    EVENT_COMM_INFO stCommInfo;     
    BYTE byEventAction;             
    BYTE byReserved[3];             
    NET_SENSE_METHOD emSenseType;               
    EM_NET_DEFENCE_AREA_TYPE emDefenceAreaType; 
    NET_GPS_STATUS_INFO stuGPS;                 
    char szUserID[32];                          
    char szUserName[128];                       
    char szSN[32];                              
    BOOL bExAlarmIn;                            
    NET_FILE_PROCESS_INFO stuFileProcessInfo;   
    NET_EVENT_INFO_EXTEND stuEventInfoEx;       
    char szReserved[512];                       
} DEV_EVENT_ALARM_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_HEAD_LAMP_OFF_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    char szName[128];                                
    double PTS;                                      
    NET_TIME_EX UTC;                                 
    UINT nEventID;                                   
    DH_EVENT_FILE_INFO stuFileInfo;                  
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nLaneID;                                     
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    EM_CAPTURE_PROCESS_END_TYPE emCaptureProcess;    
    BYTE bReserved[1020];                            
} DEV_EVENT_TRAFFIC_HEAD_LAMP_OFF_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_SPECIAL_VEHICLE_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    UINT nRuleId;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    EM_TRIGGER_TYPE emTriggerType;  
    EVENT_COMM_INFO stuCommInfo;    
    BYTE bReserved[1020];           
} DEV_EVENT_TRAFFIC_SPECIAL_VEHICLE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_NONMOTOR_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    UINT nRuleId;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    DH_MSG_OBJECT stuObject;        
    EM_TRIGGER_TYPE emTriggerType;  
    EVENT_COMM_INFO stuCommInfo;    
    BOOL bNonMotorInfo;             
    VA_OBJECT_NONMOTOR stuNonMotor; 
    BYTE bReserved[1024];           
} DEV_EVENT_TRAFFIC_NONMOTOR_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_BOARD_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    UINT nRuleId;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    EM_TRIGGER_TYPE emTriggerType;  
    EVENT_COMM_INFO stuCommInfo;    
    BYTE bReserved[1020];           
} DEV_EVENT_TRAFFIC_BOARD_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_VISIBILITY_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    UINT nRuleId;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    DH_MSG_OBJECT stuObject;        
    EM_TRIGGER_TYPE emTriggerType;  
    EVENT_COMM_INFO stuCommInfo;    
    UINT nVisibility;               
    BYTE bReserved[1020];           
} DEV_EVENT_TRAFFIC_VISIBILITY_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_VEHICLE_CLEANLINESS_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    UINT nRuleId;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    EM_TRIGGER_TYPE emTriggerType;  
    EVENT_COMM_INFO stuCommInfo;    
    int nCleanValue;                
    BYTE bReserved[1024];           
} DEV_EVENT_TRAFFIC_VEHICLE_CLEANLINESS_INFO;
typedef struct tagDEV_EVENT_TRUCKNOTCLEAN_FOR_PRMA_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    DH_EVENT_FILE_INFO stuFileInfo; 
    EM_CLASS_TYPE emClass;             
    UINT nSequence;                    
    DH_MSG_OBJECT stuObject;           
    BOOL bSceneImage;                  
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    BYTE bReserved[1024];              
} DEV_EVENT_TRUCKNOTCLEAN_FOR_PRMA_INFO;
typedef struct tagDEV_EVENT_ROADOCCUPATION_BY_FOREIGNOBJECT_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    DH_EVENT_FILE_INFO stuFileInfo; 
    EM_CLASS_TYPE emClass; 
    UINT nSequence;        
    BYTE bReserved[1024];  
} DEV_EVENT_ROADOCCUPATION_BY_FOREIGNOBJECT_INFO;
typedef struct tagDEV_EVENT_TRAFFICFLOW_OVER_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    DH_EVENT_FILE_INFO stuFileInfo; 
    EM_CLASS_TYPE emClass; 
    UINT nSequence;        
    int nLane;             
    int nVehicleNums;      
    BYTE bReserved[1024];  
} DEV_EVENT_TRAFFICFLOW_OVER_INFO;
typedef enum tagEM_GOODS_TYPE
{
    EM_GOODS_TYPE_UNKNOWN, 
    EM_GOODS_TYPE_RMB,     
    EM_GOODS_TYPE_KEY,     
    EM_GOODS_TYPE_SEAL,    
    EM_GOODS_TYPE_CARD,    
} EM_GOODS_TYPE;
typedef struct tagDEV_EVENT_GOODS_DETECTION_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[128];                  
    double PTS;                        
    NET_TIME_EX UTC;                   
    UINT nEventID;                     
    UINT nRuleId;                      
    UINT nPresetID;                    
    DH_EVENT_FILE_INFO stuFileInfo;    
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    BOOL bSceneImage;                  
    EM_GOODS_TYPE emObjectType;        
    BYTE bReserved[1020];              
} DEV_EVENT_GOODS_DETECTION_INFO;
typedef struct tagDEV_EVENT_CONVEYORBLOCK_DETECTION_INFO
{
    int nChannelID;                      
    int nAction;                         
    char szName[128];                    
    EM_CLASS_TYPE emClassType;           
    UINT nRuleID;                        
    double dPTS;                         
    NET_TIME_EX UTC;                     
    UINT nUTCMS;                         
    UINT nEventID;                       
    UINT nSequence;                      
    SCENE_IMAGE_INFO_EX stuSceneImage;   
    BOOL bSceneImage;                    
    NET_IMAGE_INFO_EX2 stuImageInfo[32]; 
    int nImageInfoNum;                   
    char byReserved[1024];               
} DEV_EVENT_CONVEYORBLOCK_DETECTION_INFO;
typedef enum tagENUM_VAGEOBJECT_ACTION
{
    ENUM_VAGEOBJECT_ACTION_UNKNOWN,   
    ENUM_VAGEOBJECT_ACTION_APPEAR,    
    ENUM_VAGEOBJECT_ACTION_MOVE,      
    ENUM_VAGEOBJECT_ACTION_STAY,      
    ENUM_VAGEOBJECT_ACTION_REMOVE,    
    ENUM_VAGEOBJECT_ACTION_DISAPPEAR, 
    ENUM_VAGEOBJECT_ACTION_SPLIT,     
    ENUM_VAGEOBJECT_ACTION_MERGE,     
    ENUM_VAGEOBJECT_ACTION_RENAME,    
} ENUM_VAGEOBJECT_ACTION;
typedef struct tagNET_VAGEOBJECT_IMAGE
{
    UINT nOffset;         
    UINT nLength;         
    UINT nWidth;          
    UINT nHeight;         
    char szFilePath[260]; 
} NET_VAGEOBJECT_IMAGE;
typedef struct tagNET_VAGEOBJECT_INFO
{
    UINT nObjectID;                  
    UINT nTypeIndex;                 
    char szTypeName[32];             
    int nConfidence;                 
    ENUM_VAGEOBJECT_ACTION emAction; 
    NET_RECT stuBoundingBox;         
    NET_RECT stuOriginalBoundingBox; 
    NET_POINT stuCenter;             
    BOOL bMainColor;                 
    BYTE byMainColor[4];             
    NET_VAGEOBJECT_IMAGE stuImage;   
    NET_TIME_EX stuCurrentTimeStamp; 
    BYTE byReserved[1024];           
} NET_VAGEOBJECT_INFO;
typedef struct tagDEV_EVENT_ANYTHING_DETECT_INFO
{
    int nChannelID;                    
    int nAction;                       
    char szName[128];                  
    double PTS;                        
    NET_TIME_EX UTC;                   
    UINT nEventID;                     
    EM_CLASS_TYPE emClassType;         
    UINT nRuleId;                      
    UINT nPresetID;                    
    DH_EVENT_FILE_INFO stuFileInfo;    
    SCENE_IMAGE_INFO_EX stuSceneImage; 
    int nObjectNum;                   
    NET_VAGEOBJECT_INFO* pstuObjects; 
    BYTE bReserved[1024];             
} DEV_EVENT_ANYTHING_DETECT_INFO;
typedef struct tagNET_OBJECT_INFO
{
    NET_RECT stuBoundingBox; 
    BYTE bReserved[256];     
} NET_OBJECT_INFO;
typedef enum tagEM_ABNORMAL_OBJECT_TYPE
{
    ABNORMAL_OBJECT_TYPE_UNKNOWN, 
    ABNORMAL_OBJECT_TYPE_PIG,     
} EM_ABNORMAL_OBJECT_TYPE;
typedef enum tagEM_OBJCET_ABNORMAL_TYPE
{
    EM_OBJECT_ABNORMAL_TYPE_UNKNOWN,    
    EM_OBJECT_ABNORMAL_TYPE_RETROGRADE, 
} EM_OBJECT_ABNORMAL_TYPE;
typedef struct tagDEV_EVENT_OBJECT_ABNORMAL_INFO
{
    int nChannelID;                            
    int nAction;                               
    char szName[128];                          
    double PTS;                                
    NET_TIME_EX UTC;                           
    UINT nEventID;                             
    NET_EVENT_IMAGE_OFFSET_INFO stuSceneImage; 
    EM_CLASS_TYPE emClassType;                 
    unsigned short nAreaID;                    
    unsigned short nPresetID;                  
    NET_OBJECT_INFO stuObjectInfo[64];         
    int nObjectInfoNum;                        
    EM_ABNORMAL_OBJECT_TYPE emObjectType;      
    EM_OBJECT_ABNORMAL_TYPE emAbnormalType;    
    BYTE bReserved[1020];                      
} DEV_EVENT_OBJECT_ABNORMAL_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_SPEED_CHANGE_DETECTION_INFO
{
    int nChannelID;                 
    int nAction;                    
    char szName[128];               
    double PTS;                     
    NET_TIME_EX UTC;                
    UINT nEventID;                  
    UINT nRuleId;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    DH_MSG_OBJECT stuObject;        
    DH_MSG_OBJECT stuVehicle;       
    EM_TRIGGER_TYPE emTriggerType;  
    int nLane;                      
    int nSpeedNew;                  
    int nSpeedOld;                  
    BYTE byReserved[1024];          
} DEV_EVENT_TRAFFIC_SPEED_CHANGE_DETECTION_INFO;
typedef struct tagNET_FOLLOW_CAR_ALARM_CUSTOM_INFO
{
    NET_GPS_STATUS_INFO stuGPS; 
    BYTE byReserved[256];       
} NET_FOLLOW_CAR_ALARM_CUSTOM_INFO;
typedef enum tagNET_FOLLOW_CAR_ALARM_IMAGE_TYPE
{
    EM_FOLLOW_CAR_ALARM_IMAGE_TYPE_UNKNOWN = -1,  
    EM_FOLLOW_CAR_ALARM_IMAGE_TYPE_PANORAMA,      
    EM_FOLLOW_CAR_ALARM_IMAGE_TYPE_SMALL_PICTURE, 
} EM_FOLLOW_CAR_ALARM_IMAGE_TYPE;
typedef struct tagNET_FOLLOW_CAR_ALARM_IMAGE_INFO
{
    UINT nGroupID;                              
    EM_FOLLOW_CAR_ALARM_IMAGE_TYPE emImageType; 
    DWORD dwoffset;                             
    DWORD dwLength;                             
    BYTE byReserved[256];                       
} NET_FOLLOW_CAR_ALARM_IMAGE_INFO;
typedef struct tagDEV_EVENT_FOLLOW_CAR_ALARM_INFO
{
    int nChannelID;                                  
    int nAction;                                     
    NET_TIME_EX UTC;                                 
    int nImageInfoNum;                               
    NET_FOLLOW_CAR_ALARM_IMAGE_INFO stuImageInfo[8]; 
    NET_FOLLOW_CAR_ALARM_CUSTOM_INFO stuCustomInfo;  
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar;  
    BYTE byReserved[1024];                           
} DEV_EVENT_FOLLOW_CAR_ALARM_INFO;
typedef enum tagNET_EM_SDK_INIT_CFG_TYPE
{
    NET_SDK_LOCAL_CFG_TYPE_OPENSSL,         
    NET_SDK_LOCAL_CFG_TYPE_STREAMCONVERTOR, 
    NET_SDK_LOCAL_CFG_TYPE_AVNETSDK,        
} NET_EM_SDK_LOCAL_CFG_TYPE;
typedef struct tagNET_CONFIG_OPENSSL_INFO
{
    char szSsleay[MAX_PATH]; 
    char szLibeay[MAX_PATH]; 
    BYTE bReserved[504]; 
} NET_CONFIG_OPENSSL_INFO;
typedef struct tagNET_CONFIG_STREAMCONVERTOR_INFO
{
    char szStreamConvertor[MAX_PATH]; 
    BYTE bReserved[764]; 
} NET_CONFIG_STREAMCONVERTOR_INFO;
typedef struct tagNET_CONFIG_AVNETSDK_INFO
{
    char szAvnetsdk[MAX_PATH]; 
    BYTE bReserved[764]; 
} NET_CONFIG_AVNETSDK_INFO;
typedef struct tagNETSDK_INIT_PARAM
{
    int nThreadNum;       
    BYTE bReserved[1024]; 
} NETSDK_INIT_PARAM, *LPNETSDK_INIT_PARAM;
typedef struct tagNET_CONFIG_RETURN_INFO
{
    DWORD dwSize;
    int nRetCnt; 
} NET_CONFIG_RETURN_INFO;
typedef enum tagNET_EM_OSD_BLEND_TYPE
{
    NET_EM_OSD_BLEND_TYPE_UNKNOWN,  
    NET_EM_OSD_BLEND_TYPE_MAIN,     
    NET_EM_OSD_BLEND_TYPE_EXTRA1,   
    NET_EM_OSD_BLEND_TYPE_EXTRA2,   
    NET_EM_OSD_BLEND_TYPE_EXTRA3,   
    NET_EM_OSD_BLEND_TYPE_SNAPSHOT, 
    NET_EM_OSD_BLEND_TYPE_PREVIEW,  
} NET_EM_OSD_BLEND_TYPE;
typedef enum tagEM_TITLE_TEXT_ALIGNTYPE
{
    EM_TEXT_ALIGNTYPE_INVALID,    
    EM_TEXT_ALIGNTYPE_LEFT,       
    EM_TEXT_ALIGNTYPE_XCENTER,    
    EM_TEXT_ALIGNTYPE_YCENTER,    
    EM_TEXT_ALIGNTYPE_CENTER,     
    EM_TEXT_ALIGNTYPE_RIGHT,      
    EM_TEXT_ALIGNTYPE_TOP,        
    EM_TEXT_ALIGNTYPE_BOTTOM,     
    EM_TEXT_ALIGNTYPE_LEFTTOP,    
    EM_TEXT_ALIGNTYPE_CHANGELINE, 
} EM_TITLE_TEXT_ALIGNTYPE;
typedef struct tagNET_OSD_CHANNEL_TITLE
{
    DWORD dwSize;
    NET_EM_OSD_BLEND_TYPE emOsdBlendType; 
    BOOL bEncodeBlend;                    
    NET_COLOR_RGBA stuFrontColor;         
    NET_COLOR_RGBA stuBackColor;          
    NET_RECT stuRect;                     
    EM_TITLE_TEXT_ALIGNTYPE emTextAlign;  
} NET_OSD_CHANNEL_TITLE;
typedef struct tagNET_OSD_TIME_TITLE
{
    DWORD dwSize;
    NET_EM_OSD_BLEND_TYPE emOsdBlendType; 
    BOOL bEncodeBlend;                    
    NET_COLOR_RGBA stuFrontColor;         
    NET_COLOR_RGBA stuBackColor;          
    NET_RECT stuRect;                     
    BOOL bShowWeek;                       
} NET_OSD_TIME_TITLE;
typedef enum tagNET_EM_TITLE_TYPE
{
    NET_EM_TITLE_UNKNOWN,     
    NET_EM_TITLE_RTINFO,      
    NET_EM_TITLE_CUSTOM,      
    NET_EM_TITLE_TITLE,       
    NET_EM_TITLE_CHECK,       
    NET_EM_TITLE_SPEEDOMETER, 
    NET_EM_TITLE_GEOGRAPHY,   
    NET_EM_TITLE_ATMCARDINFP, 
    NET_EM_TITLE_CAMERAID,    
} NET_EM_TITLE_TYPE;
typedef struct tagNET_CUSTOM_TITLE_INFO
{
    BOOL bEncodeBlend;                   
    NET_COLOR_RGBA stuFrontColor;        
    NET_COLOR_RGBA stuBackColor;         
    NET_RECT stuRect;                    
    char szText[CUSTOM_TITLE_LEN];       
    NET_EM_TITLE_TYPE emTitleType;       
    EM_TITLE_TEXT_ALIGNTYPE emTextAlign; 
    BYTE byReserved[504];                
} NET_CUSTOM_TITLE_INFO;
typedef struct tagNET_OSD_CUSTOM_TITLE
{
    DWORD dwSize;
    NET_EM_OSD_BLEND_TYPE emOsdBlendType;                       
    int nCustomTitleNum;                                        
    NET_CUSTOM_TITLE_INFO stuCustomTitle[MAX_CUSTOM_TITLE_NUM]; 
} NET_OSD_CUSTOM_TITLE;
typedef struct tagNET_OSD_CUSTOM_TITLE_TEXT_ALIGN
{
    DWORD dwSize;
    int nCustomTitleNum;                                       
    EM_TITLE_TEXT_ALIGNTYPE emTextAlign[MAX_CUSTOM_TITLE_NUM]; 
} NET_OSD_CUSTOM_TITLE_TEXT_ALIGN;
typedef enum tagEM_OSD_FONT_SOLUTION
{
    EM_OSD_FONT_SOLUTION_UNKNOWN, 
    EM_OSD_FONT_SOLUTION_DFAULT,  
    EM_OSD_FONT_SOLUTION_SIMKAI,  
    EM_OSD_FONT_SOLUTION_SIMSUN,  
} EM_OSD_FONT_SOLUTION;
typedef struct tagNET_OSD_COMM_INFO
{
    DWORD dwSize;
    double fFontSizeScale; 
    int nFontSize; 
    int nFontSizeExtra1;                              
    int nFontSizeExtra2;                              
    int nFontSizeExtra3;                              
    int nFontSizeSnapshot;                            
    int nFontSizeMergeSnapshot;                       
    EM_OSD_FONT_SOLUTION emFontSolution;              
    EM_OSD_FONT_SOLUTION emFontSolutionExtra1;        
    EM_OSD_FONT_SOLUTION emFontSolutionExtra2;        
    EM_OSD_FONT_SOLUTION emFontSolutionExtra3;        
    EM_OSD_FONT_SOLUTION emFontSolutionSnapshot;      
    EM_OSD_FONT_SOLUTION emFontSolutionMergeSnapshot; 
} NET_OSD_COMM_INFO;
typedef struct tagNET_OSD_PTZZOOM_INFO
{
    DWORD dwSize;
    BOOL bMainBlend;              
    BOOL bPreviewBlend;           
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
    int nDisplayTime;             
} NET_OSD_PTZZOOM_INFO;
typedef struct tagNET_OSD_GPS_TITLE
{
    DWORD dwSize;
    BOOL bEncodeBlend; 
} NET_OSD_GPS_TITLE;
#define MAX_COUNT_PLANE 32 
typedef struct tagNET_STATPLAN_INFO
{
    int nPlanID;                         
    BOOL bEncodeBlend;                   
    NET_COLOR_RGBA stuFrontColor;        
    NET_COLOR_RGBA stuBackColor;         
    EM_TITLE_TEXT_ALIGNTYPE emTextAlign; 
    NET_RECT stuRect;                    
    BOOL bShowEnterNum;                  
    BOOL bShowExitNum;                   
    BYTE byReserved[128];                
} NET_STATPLAN_INFO;
typedef struct tagNET_OSD_NUMBER_STATPLAN
{
    DWORD dwSize;
    int nRetPlanCount;                                  
    NET_STATPLAN_INFO stuStatplanInfo[MAX_COUNT_PLANE]; 
} NET_OSD_NUMBER_STATPLAN;
typedef enum tatNET_EM_AUDIO_FORAMT
{
    EM_AUDIO_FORMAT_UNKNOWN, 
    EM_AUDIO_FORMAT_G711A,   
    EM_AUDIO_FORMAT_PCM,     
    EM_AUDIO_FORMAT_G711U,   
    EM_AUDIO_FORMAT_AMR,     
    EM_AUDIO_FORMAT_AAC,     
    EM_AUDIO_FORMAT_G726,    
    EM_AUDIO_FORMAT_G729,    
    EM_AUDIO_FORMAT_ADPCM,   
    EM_AUDIO_FORMAT_MPEG2,   
    EM_AUDIO_FORMAT_MPEG2L2, 
    EM_AUDIO_FORMAT_OGG,     
    EM_AUDIO_FORMAT_MP3,     
    EM_AUDIO_FORMAT_G7221,   
} NET_EM_AUDIO_FORMAT;
typedef enum tagNET_EM_VIDEO_COMPRESSION
{
    EM_VIDEO_FORMAT_UNKNOWN = -1, 
    EM_VIDEO_FORMAT_MPEG4,        
    EM_VIDEO_FORMAT_MS_MPEG4,     
    EM_VIDEO_FORMAT_MPEG2,        
    EM_VIDEO_FORMAT_MPEG1,        
    EM_VIDEO_FORMAT_H263,         
    EM_VIDEO_FORMAT_MJPG,         
    EM_VIDEO_FORMAT_FCC_MPEG4,    
    EM_VIDEO_FORMAT_H264,         
    EM_VIDEO_FORMAT_H265,         
    EM_VIDEO_FORMAT_SVAC,         
} NET_EM_VIDEO_COMPRESSION;
typedef enum tagNET_EM_BITRATE_CONTROL
{
    EM_BITRATE_CBR, 
    EM_BITRATE_VBR, 
} NET_EM_BITRATE_CONTROL;
typedef enum tagNET_EM_IMAGE_QUALITY
{
    EM_IMAGE_QUALITY_Q10 = 1, 
    EM_IMAGE_QUALITY_Q30,     
    EM_IMAGE_QUALITY_Q50,     
    EM_IMAGE_QUALITY_Q60,     
    EM_IMAGE_QUALITY_Q80,     
    EM_IMAGE_QUALITY_Q100,    
} NET_EM_IMAGE_QUALITY;
typedef enum tagNET_EM_H264_PROFILE_RANK
{
    EM_PROFILE_UNKNOWN,      
    EM_PROFILE_BASELINE = 1, 
    EM_PROFILE_MAIN,         
    EM_PROFILE_EXTENDED,     
    EM_PROFILE_HIGH,         
} NET_EM_H264_PROFILE_RANK;
typedef enum tagNET_EM_FORMAT_TYPE
{
    EM_FORMAT_TYPE_UNKNOWN, 
    EM_FORMAT_MAIN_NORMAL,      
    EM_FORMAT_MAIN_MOVEEXAMINE, 
    EM_FORMAT_MAIN_ALARM,       
    EM_FORMAT_EXTRA1, 
    EM_FORMAT_EXTRA2, 
    EM_FORMAT_EXTRA3, 
} NET_EM_FORMAT_TYPE;
typedef enum tagNET_EM_PACK_TYPE
{
    EM_PACK_UNKOWN, 
    EM_PACK_DHAV,   
    EM_PACK_PS,     
} NET_EM_PACK_TYPE;
typedef struct tagNET_ENCODE_VIDEO_INFO
{
    DWORD dwSize;
    NET_EM_FORMAT_TYPE emFormatType;         
    BOOL bVideoEnable;                       
    NET_EM_VIDEO_COMPRESSION emCompression;  
    int nWidth;                              
    int nHeight;                             
    NET_EM_BITRATE_CONTROL emBitRateControl; 
    int nBitRate;                            
    float nFrameRate;                        
    int nIFrameInterval;                     
    NET_EM_IMAGE_QUALITY emImageQuality;     
} NET_ENCODE_VIDEO_INFO;
typedef struct tagNET_ENCODE_VIDEO_PACK_INFO
{
    DWORD dwSize;
    NET_EM_FORMAT_TYPE emFormatType; 
    NET_EM_PACK_TYPE emPackType;     
} NET_ENCODE_VIDEO_PACK_INFO;
typedef struct tagNET_ENCODE_VIDEO_SVC_INFO
{
    DWORD dwSize;
    NET_EM_FORMAT_TYPE emFormatType; 
    int nSVC;                        
} NET_ENCODE_VIDEO_SVC_INFO;
typedef struct tagNET_ENCODE_VIDEO_PROFILE_INFO
{
    DWORD dwSize;
    NET_EM_FORMAT_TYPE emFormatType;    
    NET_EM_H264_PROFILE_RANK emProfile; 
} NET_ENCODE_VIDEO_PROFILE_INFO;
typedef struct tagNET_ENCODE_AUDIO_COMPRESSION_INFO
{
    DWORD dwSize;
    BOOL bAudioEnable;                 
    NET_EM_FORMAT_TYPE emFormatType;   
    NET_EM_AUDIO_FORMAT emCompression; 
} NET_ENCODE_AUDIO_COMPRESSION_INFO;
typedef struct tagNET_ENCODE_AUDIO_INFO
{
    DWORD dwSize;
    NET_EM_FORMAT_TYPE emFormatType; 
    int nDepth;                      
    int nFrequency;                  
    int nMode;                       
    int nFrameType;    
    int nPacketPeriod; 
} NET_ENCODE_AUDIO_INFO;
typedef enum tagNET_EM_SNAP_TYPE
{
    EM_SNAP_UNKNOWN,     
    EM_SNAP_NORMAL,      
    EM_SNAP_MOVEEXAMINE, 
    EM_SNAP_ALARM,       
} NET_EM_SNAP_TYPE;
typedef struct tagNET_ENCODE_SNAP_INFO
{
    DWORD dwSize;
    NET_EM_SNAP_TYPE emSnapType;            
    BOOL bSnapEnable;                       
    NET_EM_VIDEO_COMPRESSION emCompression; 
    int nWidth;                             
    int nHeight;                            
    float nFrameRate;                       
    int nQualityRange;                      
    NET_EM_IMAGE_QUALITY emImageQuality;    
} NET_ENCODE_SNAP_INFO;
typedef struct tagNET_ENCODE_SNAP_TIME_INFO
{
    DWORD dwSize;
    short shPicTimeInterval;       
    BYTE bPicIntervalHour;         
    DWORD dwTrigPicIntervalSecond; 
} NET_ENCODE_SNAP_TIME_INFO;
typedef enum tagNET_EM_CONFIG_TYPE
{
    NET_EM_CONFIG_DAYTIME, 
    NET_EM_CONFIG_NIGHT,   
    NET_EM_CONFIG_NORMAL,  
    NET_EM_CONFIG_ADAPTER, 
} NET_EM_CONFIG_TYPE;
typedef struct tagNET_ENCODE_CHANNELTITLE_INFO
{
    DWORD dwSize;
    char szChannelName[MAX_CHANNEL_NAME_LEN]; 
} NET_ENCODE_CHANNELTITLE_INFO;
typedef enum tagEM_DELAY_MODE
{
    EM_DELAY_MODE_UNKNOWN = -1, 
    EM_DELAY_MODE_LOW_DELAY,    
    EM_DELAY_MODE_HIGH_DELAY,   
} EM_DELAY_MODE;
typedef struct tagNET_ENCODE_DELAY_MODE_INFO
{
    DWORD dwSize;              
    EM_DELAY_MODE emDelayMode; 
} NET_ENCODE_DELAY_MODE_INFO;
typedef enum tagEM_SIGNAL_FORMAT
{
    EM_SIGNAL_FORMAT_UNKNOWN, 
    EM_SIGNAL_FORMAT_HDMI,    
    EM_SIGNAL_FORMAT_VGA,     
} EM_SIGNAL_FORMAT;
typedef struct tagNET_ENCODE_SIGNAL_FORMAT_INFO
{
    DWORD dwSize;                    
    EM_SIGNAL_FORMAT emSignalFormat; 
} NET_ENCODE_SIGNAL_FORMAT_INFO;
typedef enum tagNET_EM_AUDIOIN_SOURCE_TYPE
{
    NET_EM_AUDIOIN_SOURCE_UNKNOW,    
    NET_EM_AUDIOIN_SOURCE_COAXIAL,   
    NET_EM_AUDIOIN_SOURCE_BNC,       
    NET_EM_AUDIOIN_SOURCE_HDCVI_BNC, 
    NET_EM_AUDIOIN_SOURCE_LINEIN,    
    NET_EM_AUDIOIN_SOURCE_LINEIN1,   
    NET_EM_AUDIOIN_SOURCE_LINEIN2,   
    NET_EM_AUDIOIN_SOURCE_LINEIN3,   
    NET_EM_AUDIOIN_SOURCE_MIC,       
    NET_EM_AUDIOIN_SOURCE_MIC1,      
    NET_EM_AUDIOIN_SOURCE_MIC2,      
    NET_EM_AUDIOIN_SOURCE_MIC3,      
    NET_EM_AUDIOIN_SOURCE_MICOUT,    
    NET_EM_AUDIOIN_SOURCE_REMOTE,    
    NET_EM_AUDIOIN_SOURCE_REMOTE1,   
    NET_EM_AUDIOIN_SOURCE_REMOTE2,   
    NET_EM_AUDIOIN_SOURCE_REMOTE3,   
} NET_EM_AUDIOIN_SOURCE_TYPE;
typedef struct tagNET_ENCODE_AUDIO_SOURCE_INFO
{
    DWORD dwSize;
    int nMaxAudioInSource;                          
    int nRetAudioInSource;                          
    NET_EM_AUDIOIN_SOURCE_TYPE emAudioInSource[24]; 
} NET_ENCODE_AUDIO_SOURCE_INFO;
typedef struct tagNET_AUDIOIN_DENOISE_INFO
{
    DWORD dwSize;
    BOOL bEnable; 
} NET_AUDIOIN_DENOISE_INFO;
typedef struct tagNET_AUDIOIN_VOLUME_INFO
{
    DWORD dwSize;
    int nVolume; 
} NET_AUDIOIN_VOLUME_INFO;
typedef struct tagNET_AUDIOOUT_VOLUME_INFO
{
    DWORD dwSize;
    int nVolume; 
} NET_AUDIOOUT_VOLUME_INFO;
typedef enum tagEM_AUDIOOUT_MODE
{
    EM_AUDIOOUT_MODE_UNKNOWN,  
    EM_AUDIOOUT_MODE_SUBCARD,  
    EM_AUDIOOUT_MODE_MAINCARD, 
    EM_AUDIOOUT_MODE_ALL,      
} EM_AUDIOOUT_MODE;
typedef struct tagNET_AUDIOOUT_MODE_INFO
{
    DWORD dwSize;
    EM_AUDIOOUT_MODE emAudioOutMode; 
} NET_AUDIOOUT_MODE_INFO;
typedef enum tagNET_EM_SWITCH_MODE
{
    NET_EM_SWITCH_MODE_WIGHT,  
    NET_EM_SWITCH_MODE_LIGHT,  
    NET_EM_SWITCH_MODE_TIME,   
    NET_EM_SWITCH_MODE_NIGHT,  
    NET_EM_SWITCH_MODE_NORMAL, 
    NET_EM_SWITCH_MODE_ICR,    
} NET_EM_SWITCH_MODE;
typedef struct tagNET_IN_VIDEOIN_MODE_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEOIN_MODE_CAPS;
typedef struct tagNET_OUT_VIDEOIN_MODE_CAPS
{
    DWORD dwSize;
    BOOL bSwitchByDayNight; 
} NET_OUT_VIDEOIN_MODE_CAPS;
typedef struct tagNET_SUN_TIME
{
    int nHour;   
    int nMinute; 
    int nSecond; 
} NET_SUN_TIME;
typedef struct tagNET_VIDEOIN_SWITCH_MODE_INFO
{
    DWORD dwSize;
    NET_EM_SWITCH_MODE emSwitchMode; 
    NET_SUN_TIME stuSunRiseTime; 
    NET_SUN_TIME stuSunSetTime;  
} NET_VIDEOIN_SWITCH_MODE_INFO;
typedef enum tagEM_COLOR_STYLE_TYPE
{
    EM_COLOR_STYLE_UNKNOWN,    
    EM_COLOR_STYLE_GENTLE,     
    EM_COLOR_STYLE_STANDARD,   
    EM_COLOR_STYLE_FLAMBOYANT, 
} EM_COLOR_STYLE_TYPE;
typedef struct tagNET_VIDEOIN_COLOR_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;     
    int nBrightness;                  
    int nContrast;                    
    int nSaturation;                  
    int nGamma;                       
    EM_COLOR_STYLE_TYPE emColorStyle; 
    int nHue;                         
    int nChromaSuppress;              
    DH_TSECT stuTimeSection;          
} NET_VIDEOIN_COLOR_INFO;
typedef enum tagNET_EM_FLIP_MODE
{
    NET_EM_FLIP_MODE_UNKNOWN = 0, 
    NET_EM_FLIP_MODE_MANUAL,      
    NET_EM_FLIP_MODE_AUTO,        
} NET_EM_FLIP_MODE;
typedef struct tagNET_EM_CFG_VIDEO_IMAGE_CTRL_INFO
{
    DWORD dwSize;
    BOOL bMirror;                
    BOOL bFlip;                  
    BOOL bFreeze;                
    BOOL bVerticalFlip;          
    BOOL bHorizontalFlip;        
    int nRotate90;               
    int nStable;                 
    int nStableSensitivity;      
    NET_EM_FLIP_MODE emFlipMode; 
} NET_EM_CFG_VIDEO_IMAGE_CTRL_INFO;
typedef struct tagNET_VIDEOIN_IMAGE_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType; 
    BOOL bMirror;                 
    BOOL bFlip;                   
    int nRotate90;                
} NET_VIDEOIN_IMAGE_INFO;
typedef enum tagNET_EM_STABLE_TYPE
{
    NET_EM_STABLE_OFF,         
    NET_EM_STABLE_ELEC,        
    NET_EM_STABLE_LIGHT,       
    NET_EM_STABLE_CONTORL = 4, 
} NET_EM_STABLE_TYPE;
typedef struct tagNET_VIDEOIN_STABLE_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;    
    NET_EM_STABLE_TYPE emStableType; 
} NET_VIDEOIN_STABLE_INFO;
typedef struct tagNET_VIDEOIN_IRISAUTO_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType; 
    BOOL bIrisAuto;               
} NET_VIDEOIN_IRISAUTO_INFO;
typedef struct tagNET_VIDEOIN_IMAGEENHANCEMENT_INFO
{
    DWORD dwSize;
    BOOL bEnable; 
    int nLevel;   
} NET_VIDEOIN_IMAGEENHANCEMENT_INFO;
typedef enum tagEM_DOUBLE_EXPOSURE_TYPE
{
    EM_DOUBLE_EXPOSURE_UNKNOWN = -1,      
    EM_DOUBLE_EXPOSURE_NOT_SUPPORT,       
    EM_DOUBLE_EXPOSURE_SUPPORT_FULL_FRAM, 
    EM_DOUBLE_EXPOSURE_SUPPORT_HALF_FRAM, 
    EM_DOUBLE_EXPOSURE_ALL,               
} EM_DOUBLE_EXPOSURE_TYPE;
typedef struct tagNET_VIDEOIN_EXPOSURE_NORMAL_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;        
    NET_EM_EXPOSURE_MODE emExposureMode; 
    int nAntiFlicker;                    
    int nCompensation;                   
    int nGain;                           
    int nGainMin;                        
    int nGainMax;                        
    int nExposureIris;                   
    double dbExposureValue1;             
    double dbExposureValue2;             
    BOOL bIrisAuto;                           
    EM_DOUBLE_EXPOSURE_TYPE emDoubleExposure; 
} NET_VIDEOIN_EXPOSURE_NORMAL_INFO;
typedef struct tagNET_VIDEOIN_EXPOSURE_OTHER_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType; 
    BOOL bSlowShutter;            
    int nSlowSpeed;               
    int nSlowAutoExposure;        
    int nRecoveryTime;            
    int nIrisMin;                 
    int nIrisMax;                 
} NET_VIDEOIN_EXPOSURE_OTHER_INFO;
typedef struct tagNET_VIDEOIN_EXPOSURE_SHUTTER_INFO
{
    DWORD dwSize;
    BOOL bAutoSyncPhase; 
    float fShutter;      
    int nPhase;          
} NET_VIDEOIN_EXPOSURE_SHUTTER_INFO;
typedef struct tagNET_VIDEOIN_BACKLIGHT_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;            
    NET_EM_BACK_MODE emBlackMode;            
    NET_EM_BLACKLIGHT_MODE emBlackLightMode; 
    NET_RECT stuBacklightRegion;             
    int nWideDynamicRange;                   
    int nGlareInhibition;                    
} NET_VIDEOIN_BACKLIGHT_INFO;
typedef struct tagNET_VIDEOIN_INTENSITY_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;               
    NET_EM_BACK_INTENSITY_MODE emIntensityMode; 
    int nIntensity;                             
} NET_VIDEOIN_INTENSITY_INFO;
typedef struct tagNET_VIDEOIN_WHITEBALANCE_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;                
    NET_EM_WHITEBALANCE_TYPE emWhiteBalanceType; 
    int nGainRed;                                
    int nGainBlue;                               
    int nGainGreen;                              
    int nColorTemperature;                       
} NET_VIDEOIN_WHITEBALANCE_INFO;
typedef enum tagNET_EM_DAYNIGHT_TYPE
{
    NET_EM_DAYNIGHT_COLOR,      
    NET_EM_DAYNIGHT_AUTO,       
    NET_EM_DAYNIGHT_WHITEBLACK, 
} NET_EM_DAYNIGHT_TYPE;
typedef struct tagNET_VIDEOIN_DAYNIGHT_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;        
    NET_EM_DAYNIGHT_TYPE emDayNightType; 
    int nDayNightSensitivity;            
    int nDayNightSwitchDelay;            
} NET_VIDEOIN_DAYNIGHT_INFO;
typedef struct tagNET_VIDEOIN_DAYNIGHT_ICR_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType; 
    NET_EM_ICR_TYPE emType;       
} NET_VIDEOIN_DAYNIGHT_ICR_INFO;
typedef enum tagNET_EM_LIGHTING_MODE
{
    NET_EM_LIGHTING_UNKNOW,          
    NET_EM_LIGHTING_MANUAL,          
    NET_EM_LIGHTING_AUTO,            
    NET_EM_LIGHTING_OFF,             
    NET_EM_LIGHTING_ZOOMPRIO,        
    NET_EM_LIGHTING_TIMING,          
    NET_EM_LIGHTING_SMARTLIGHT,      
    NET_EM_LIGHTING_EXCLUSIVEMANUAL, 
    NET_EM_LIGHTING_FORCEON,         
} NET_EM_LIGHTING_MODE;
typedef struct tagNET_VIDEOIN_LIGHTING_INFO
{
    DWORD dwSize;
    NET_EM_LIGHTING_MODE emLightMode; 
    int nCorrection;                  
    int nSensitive;                   
    int nNearLight;                   
    int nFarLight;                    
} NET_VIDEOIN_LIGHTING_INFO;
typedef enum tagNET_EM_DEFOG_MODE
{
    NET_EM_DEFOG_UNKNOW, 
    NET_EM_DEFOG_OFF,    
    NET_EM_DEFOG_AUTO,   
    NET_EM_DEFOG_MANAUL, 
} NET_EM_DEFOG_MODE;
typedef enum tagNET_EM_INTENSITY_MODE
{
    NET_EM_INTENSITY_MODE_UNKNOW, 
    NET_EM_INTENSITY_MODE_AUTO,   
    NET_EM_INTENSITY_MODE_MANUAL, 
} NET_EM_INTENSITY_MODE;
typedef struct tagNET_VIDEOIN_DEFOG_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;          
    NET_EM_DEFOG_MODE emDefogMode;         
    int nIntensity;                        
    NET_EM_INTENSITY_MODE emIntensityMode; 
    int nLightIntensityLevel;              
    BOOL bCamDefogEnable;                  
} NET_VIDEOIN_DEFOG_INFO;
typedef struct tagNET_VIDEOIN_FOCUSMODE_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;  
    NET_EM_FOCUS_MODE emFocusMode; 
} NET_VIDEOIN_FOCUSMODE_INFO;
typedef enum tagNET_EM_SENSITIVITY_TYPE
{
    NET_EM_SENSITIVITY_HIGH,    
    NET_EM_SENSITIVITY_DEFAULT, 
    NET_EM_SENSITIVITY_LOW,     
} NET_EM_SENSITIVITY_TYPE;
typedef enum tagNET_EM_IRC_TYPE
{
    NET_EM_IRC_DONOT, 
    NET_EM_IRC_DOIT,  
    NET_EM_IRC_AUTO,  
} NET_EM_IRC_TYPE;
typedef struct tagNET_VIDEOIN_FOCUSVALUE_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;                         
    NET_EM_SENSITIVITY_TYPE emSensitivity;                
    NET_EM_IRC_TYPE emIRCorrection;                       
    NET_EM_FOCUS_LIMITSELECT_MODE emFocusLimitSelectMode; 
    int nFocusLimit;                                      
    BOOL bAutoFocusTrace;                                 
} NET_VIDEOIN_FOCUSVALUE_INFO;
typedef struct tagNET_VIDEOIN_SHARPNESS_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;          
    NET_EM_SHARPNESS_MODE emSharpnessMode; 
    int nSharpness;                        
    int nLevel;                            
} NET_VIDEOIN_SHARPNESS_INFO;
typedef enum tagNET_EM_3D_TYPE
{
    NET_EM_3D_UNKONW, 
    NET_EM_3D_OFF,    
    NET_EM_3D_AUTO,   
} NET_EM_3D_TYPE;
typedef enum tagNET_EM_ALGORITHM_TYPE
{
    NET_EM_ALGORITHM_UNKNOW, 
    NET_EM_ALGORITHM_OFF,    
    NET_EM_ALGORITHM_MANUAL, 
} NET_EM_ALGORITHM_TYPE;
typedef struct tagNET_DENOISE_ALGORITHM
{
    NET_EM_ALGORITHM_TYPE emAlgorithmType; 
    int nTnfLevel;                         
    int nSnfLevel;                         
    BYTE bReserved[256];                   
} NET_DENOISE_ALGORITHM;
typedef struct tagNET_VIDEOIN_DENOISE_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType;       
    BOOL b2DEnable;                     
    int n2DLevel;                       
    NET_DENOISE_ALGORITHM stuAlgorithm; 
} NET_VIDEOIN_DENOISE_INFO;
typedef struct tagNET_VIDEOIN_3D_DENOISE_INFO
{
    DWORD dwSize;
    NET_EM_CONFIG_TYPE emCfgType; 
    NET_EM_3D_TYPE em3DType;      
    int nAutoLevel;               
} NET_VIDEOIN_3D_DENOISE_INFO;
typedef struct tagNET_PRIOR_FOCUSMODE_INFO
{
    unsigned int nPriorFocusMode; 
    BYTE byReserved[256];         
} NET_PRIOR_FOCUSMODE_INFO;
typedef struct tagNET_VIDEOIN_FOCUS_INFO_EX
{
    DWORD dwSize;                                  
    int nPriorFocusModeNum;                        
    NET_PRIOR_FOCUSMODE_INFO stuPriorFocusMode[8]; 
} NET_VIDEOIN_FOCUS_INFO_EX;
typedef struct tagNET_NEAR_LIGHT
{
    int nLight;           
    int nAngle;           
    BYTE byReserved[128]; 
} NET_NEAR_LIGHT;
typedef struct tagNET_MIDDLE_LIGHT
{
    BOOL bEnable;         
    int nLight;           
    int nAngle;           
    BYTE byReserved[132]; 
} NET_MIDDLE_LIGHT;
typedef struct tagNET_FAR_LIGHT
{
    int nLight;           
    int nAngle;           
    BYTE byReserved[128]; 
} NET_FAR_LIGHT;
typedef enum tagNET_EM_CONFIGEX_TYPE
{
    NET_EM_CONFIGEX_REALTIME, 
    NET_EM_CONFIGEX_DAYTIME,  
    NET_EM_CONFIGEX_NIGHT,    
    NET_EM_CONFIGEX_NORMAL,   
} NET_EM_CONFIGEX_TYPE;
typedef struct tagNET_VIDEOIN_LIGHTINGEX_INFO
{
    DWORD dwSize;
    NET_EM_CONFIGEX_TYPE emCfgType;   
    NET_EM_LIGHTING_MODE emLightMode; 
    int nCorrection;                  
    int nSensitive;                   
    int nTimes;                       
    int nNearLight;                     
    int nMiddleLight;                   
    int nFarLight;                      
    BYTE byReserved[4];                 
    NET_NEAR_LIGHT stuNearLight[4];     
    NET_MIDDLE_LIGHT stuMiddleLight[4]; 
    NET_FAR_LIGHT stuFarLight[4];       
} NET_VIDEOIN_LIGHTINGEX_INFO;
typedef struct tagNET_CFG_VIDEOIN_VIEWRANGESTATUS_INFO
{
    DWORD dwSize;          
    BYTE byReserved[4];    
    double dbAzimuthH;     
    double dbAzimuthV;     
    double dbInclinationH; 
    double dbHeight;       
} NET_CFG_VIDEOIN_VIEWRANGESTATUS_INFO;
typedef enum tagEM_LIGHTING_SCHEME_MODE
{
    EM_LIGHTING_SCHEME_MODE_UNKNOWN,  
    EM_LIGHTING_SCHEME_MODE_MIX,      
    EM_LIGHTING_SCHEME_MODE_WHITE,    
    EM_LIGHTING_SCHEME_MODE_NORMAL,   
    EM_LIGHTING_SCHEME_MODE_INFRARED, 
    EM_LIGHTING_SCHEME_MODE_AIMODE,   
    EM_LIGHTING_SCHEME_MODE_OFF,      
} EM_LIGHTING_SCHEME_MODE;
typedef struct tagNET_CFG_VIDEOIN_LIGHTING_SCHEME_INFO
{
    DWORD dwSize;                      
    int nModeNum;                      
    EM_LIGHTING_SCHEME_MODE emMode[8]; 
} NET_CFG_VIDEOIN_LIGHTING_SCHEME_INFO;
typedef enum tagEM_ALARM_LIGHT_TYPE
{
    EM_ALARM_LIGHT_TYPE_UNKNOWN,  
    EM_ALARM_LIGHT_TYPE_INFRARED, 
    EM_ALARM_LIGHT_TYPE_WHITE,    
    EM_ALARM_LIGHT_TYPE_LASER,    
    EM_ALARM_LIGHT_TYPE_REDBLUE,  
} EM_ALARM_LIGHT_TYPE;
typedef enum tagEM_ALARM_LIGHT_CONDITION_TYPE
{
    EM_ALARM_LIGHT_CONDITION_UNKNOWN,        
    EM_ALARM_LIGHT_CONDITION_BY_VIDEOSTATUS, 
    EM_ALARM_LIGHT_CONDITION_BY_TIME,        
    EM_ALARM_LIGHT_CONDITION_BY_FORCE,       
} EM_ALARM_LIGHT_CONDITION_TYPE;
typedef struct tagNET_CFG_ALARM_LIGHTING_DETAIL_INFO
{
    BOOL bEnable;                                   
    EM_ALARM_LIGHT_TYPE emLightType;                
    UINT nLightDuration;                            
    int nBrightness;                                
    EM_ALARM_LIGHT_CONDITION_TYPE emLightCondition; 
    BYTE bReserved[236];                            
} NET_CFG_ALARM_LIGHTING_DETAIL_INFO;
typedef struct tagNET_CFG_VIDEOIN_ALARM_LIGHTING_INFO
{
    DWORD dwSize;                                    
    int nValidDetail;                                
    NET_CFG_ALARM_LIGHTING_DETAIL_INFO stuDetail[8]; 
} NET_CFG_VIDEOIN_ALARM_LIGHTING_INFO;
typedef struct tagNET_CFG_VIDEOIN_FACE_AUTOEXPOSURE_INFO
{
    DWORD dwSize;                   
    BOOL bEnable;                   
    unsigned int nInterval;         
    unsigned int nTargetBrightness; 
} NET_CFG_VIDEOIN_FACE_AUTOEXPOSURE_INFO;
typedef struct tagNET_SNAP_MODE
{
    DWORD dwSize;
    int nMode;               
    BOOL bDirectStorageMode; 
} NET_SNAP_MODE;
typedef struct tagNET_ENCODE_PLAN_INFO
{
    DWORD dwSize;
    BOOL bEnable;              
    unsigned int nExpectTime;  
    CAPTURE_SIZE emResolution; 
    unsigned int nBitRate;     
    unsigned int nPacketSize;  
} NET_ENCODE_PLAN_INFO;
typedef struct tagNET_COMPOSE_CHANNEL_INFO
{
    DWORD dwSize;
    DH_SPLIT_MODE emSplitMode;                          
    int nChannelCombination[CFG_MAX_VIDEO_CHANNEL_NUM]; 
    int nChannelCount;                                  
} NET_COMPOSE_CHANNEL_INFO;
typedef struct tagNET_BURN_PARAM_INFO
{
    DWORD dwSize;
    int nChannelCount;             
    int nChannels[64];             
    NET_BURN_MODE emMode;          
    NET_BURN_RECORD_PACK emFormat; 
    UINT nBurnFileLength;          
} NET_BURN_PARAM_INFO;
typedef struct tagNET_COMPOSE_PLAN_DETAIL_INFO
{
    char szName[64];             
    DH_SPLIT_MODE emSplitMode;   
    int nChannelCombinationNum;  
    int nChannelCombination[64]; 
    int nAudioOutNum;            
    int nAudioOutChn[4];         
    BYTE bReserved[676];         
} NET_COMPOSE_PLAN_DETAIL_INFO;
typedef struct tagNET_COMPOSE_PLAN_INFO
{
    DWORD dwSize;
    BOOL bEnable;                             
    int nPlansNum;                            
    NET_COMPOSE_PLAN_DETAIL_INFO stuPlans[4]; 
} NET_COMPOSE_PLAN_INFO;
typedef struct tagNET_YUEQING_SUPPLYLIGHTING_INFO
{
    DWORD dwSize;
    BOOL bTimeEnable;                                            
    BOOL bManualEnable;                                          
    unsigned int nPreferentialMode;                              
    unsigned int nBrightness;                                    
    DH_TSECT stuTimeSection[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
} NET_YUEQING_SUPPLYLIGHTING_INFO;
typedef struct tagNET_IN_SCENICSPOT_GETPOINTINFOS_INFO
{
    DWORD dwSize;
    int nChannelID; 
    int nOffset;    
    int nLimit;     
} NET_IN_SCENICSPOT_GETPOINTINFOS_INFO;
typedef struct tagNET_POINT_INFO
{
    DH_POINT stuMasterPoint; 
    DH_POINT stuSlavePoint;  
    BYTE byReserved[256];    
} NET_POINT_INFO;
typedef struct
{
    int nHorizontalAngle; 
    int nVerticalAngle;   
    int nMagnification;   
} POSTION;
typedef struct tagNET_POSTIONF
{
    float fHorizontalAngle; 
    float fVerticalAngle;   
    float fMagnification;   
} NET_POSTIONF;
typedef struct tagNET_POINT_PAIR_EX
{
    int nCaliSceneID;              
    PTZ_SPACE_UNIT stuSlaveCenter; 
    NET_POINT_INFO stuPoint[16];   
    int nEffectiveNumber;          
    float fMasterZoom;             
    BYTE byReserved[252];          
} NET_POINT_PAIR_EX;
typedef struct tagNET_CALIBRATE_MATRIX_ELEMENT_EX
{
    char szMasterSN[48];                 
    char szSlaveSN[48];                  
    PTZ_SPACE_UNIT stuExpectRatio;       
    NET_POINT_PAIR_EX stuPointPairEx[8]; 
    int nEffectiveNumber;                
    BYTE byReserved[256];                
} NET_CALIBRATE_MATRIX_ELEMENT_EX;
typedef struct tagNET_MULTI_SENSOR_INFO
{
    DWORD dwSize;
    DWORD nMaxCalibElement;                                  
    DWORD nRetCalibElement;                                  
    NET_CALIBRATE_MATRIX_ELEMENT_EX* pstCaliMatrixElementEx; 
} NET_MULTI_SENSOR_INFO;
typedef enum tagNET_EM_CALIBRATION_MODES
{
    NET_EM_CALIBRATION_MODES_UNKNOWN,   
    NET_EM_CALIBRATION_MODES_AUTO,      
    NET_EM_CALIBRATION_MODES_MANUAL,    
    NET_EM_CALIBRATION_MODES_SEMIAUTO,  
    NET_EM_CALIBRATION_MODES_CLIENTAUTO 
} NET_EM_CALIBRATION_MODES;
typedef struct tagNET_CALIBRATE_MATRIX_ELEMENT_MULTIMODE
{
    NET_EM_CALIBRATION_MODES emMode;         
    char szMasterSN[48];                     
    char szSlaveSN[48];                      
    PTZ_SPACE_UNIT stuExpectRatio;           
    NET_POINT_PAIR_EX stuPointPairEx[8];     
    int nPointPairNumber;                    
    NET_POINT_PAIR_EX stuAutoPointPairEx[8]; 
    int nAutoPointPairNumber;                
    BYTE byReserved[512];                    
} NET_CALIBRATE_MATRIX_ELEMENT_MULTIMODE;
typedef struct tagNET_CALIBRATEMATRIX_MULTIMODE_INFO
{
    DWORD dwSize;
    DWORD nMaxCalibElement;                                         
    DWORD nRetCalibElement;                                         
    NET_CALIBRATE_MATRIX_ELEMENT_MULTIMODE* pstCaliMatrixElementEx; 
} NET_CALIBRATEMATRIX_MULTIMODE_INFO;
typedef struct tagNET_CFG_AUTO_SNAP_SCHEDULE_INFO
{
    DWORD dwSize;        
    BOOL bEnable;        
    UINT nChannelNum;    
    int arnChannelID[2]; 
    UINT nPeriod;        
} NET_CFG_AUTO_SNAP_SCHEDULE_INFO;
typedef struct tagNET_CFG_PARKING_TIMEOUT_DETECT
{
    DWORD dwSize;         
    BOOL bEnable;         
    UINT nParkingTime;    
    UINT nDetectInterval; 
} NET_CFG_PARKING_TIMEOUT_DETECT;
typedef enum tagEM_SMART_MOTION_DETECT_SENSITIVITY_LEVEL
{
    EM_SMART_MOTION_DETECT_SENSITIVITY_LEVEL_UNKNOWN, 
    EM_SMART_MOTION_DETECT_SENSITIVITY_LEVEL_LOW,     
    EM_SMART_MOTION_DETECT_SENSITIVITY_LEVEL_MIDDLE,  
    EM_SMART_MOTION_DETECT_SENSITIVITY_LEVEL_HIGH,    
} EM_SMART_MOTION_DETECT_SENSITIVITY_LEVEL;
typedef struct tagNET_SMART_MOTION_DETECT_OBJECT
{
    BOOL bHuman;           
    BOOL bVehicle;         
    BYTE byReserved[1020]; 
} NET_SMART_MOTION_DETECT_OBJECT;
typedef struct tagNET_CFG_SMART_MOTION_DETECT
{
    DWORD dwSize;                                                            
    BOOL bEnable;                                                            
    EM_SMART_MOTION_DETECT_SENSITIVITY_LEVEL emMotionDetectSensitivityLevel; 
    NET_SMART_MOTION_DETECT_OBJECT stuMotionDetectObject;                    
} NET_CFG_SMART_MOTION_DETECT;
typedef struct tagNET_CFG_EXTERNAL_ANALYSE_TASK_CAPS
{
    DWORD dwSize;      
    int nModuleNumber; 
} NET_CFG_EXTERNAL_ANALYSE_TASK_CAPS;
typedef struct tagNET_ROUND_TOUR_TASK_INFO
{
    BOOL bEnable;         
    char szReserved[128]; 
} NET_ROUND_TOUR_TASK_INFO;
typedef struct tagNET_CFG_TIMEDIV_TOUR_CONFIG_INFO
{
    DWORD dwSize;                              
    NET_ROUND_TOUR_TASK_INFO stuRoundTourTask; 
} NET_CFG_TIMEDIV_TOUR_CONFIG_INFO;
#define MAX_STAFF_COUNT 32 
typedef enum tagEM_SCALE_TYPR
{
    EM_SCALE_UNKNOWN,    
    EM_SCALE_HORIZONTAL, 
    EM_SCALE_VERTIVAL,   
    EM_SCALE_ANY,        
    EM_SCALE_CROSS,      
} EM_SCALE_TYPR;
typedef struct tagNET_MAP_STAFF_INFOO
{
    NET_POINT stuStartPoint;   
    NET_POINT stuEndPoint;     
    double dbLength;           
    EM_SCALE_TYPR emScaleType; 
    BYTE byReserved[252];      
} NET_MAP_STAFF_INFO;
typedef struct tagNET_CROWDDISTRIMAP_CALIBRATE_INFO
{
    DWORD dwSize;                                     
    int nStaffNum;                                    
    NET_MAP_STAFF_INFO stuStaffInfo[MAX_STAFF_COUNT]; 
} NET_CROWDDISTRIMAP_CALIBRATE_INFO;
typedef struct tagNET_TIME_SECTION
{
    BOOL bEnable;        
    int nBeginHour;      
    int nBeginMin;       
    int nBeginSec;       
    int nEndHour;        
    int nEndMin;         
    int nEndSec;         
    BYTE byReserved[80]; 
} NET_TIME_SECTION;
typedef struct tagNET_NOPASSING_TIMESECTION_INFO
{
    int nLimitedNum;                            
    int nPlateTailNum[MAX_PLATE_TAILNUM];       
    char szLegalPlateHead[MAX_COMMON_STRING_8]; 
    NET_TIME_SECTION stuTimeSection;            
    BYTE byReserved[256];                       
} NET_NOPASSING_TIMESECTION_INFO;
typedef struct tagNET_TRAFFIC_NOPASSING_INFO
{
    DWORD dwSize;                                                                       
    BOOL bEnable;                                                                       
    int nLaneNumber;                                                                    
    int nTimeSectionMode;                                                               
    int nNoPassingTimeNumRow;                                                           
    int nNoPassingTimeNumCol;                                                           
    NET_NOPASSING_TIMESECTION_INFO stuNoPassingTimeSection[DH_N_WEEKS][DH_N_REC_TSECT]; 
} NET_TRAFFIC_NOPASSING_INFO;
typedef enum tagEM_VIDEO_ANALYSE_RULE_DETECT_MODE
{
    EM_VIDEO_ANALYSE_RULE_DETECT_MODE_UNKNOWN, 
    EM_VIDEO_ANALYSE_RULE_DETECT_MODE_VIDEO,   
    EM_VIDEO_ANALYSE_RULE_DETECT_MODE_COIL,    
    EM_VIDEO_ANALYSE_RULE_DETECT_MODE_RADAR,   
} EM_VIDEO_ANALYSE_RULE_DETECT_MODE;
typedef struct tagNET_CFG_TRAFFIC_TOLL_GATE_INFO
{
    DWORD dwSize;                                      
    BOOL bEnable;                                      
    char szName[128];                                  
    UINT nPtzPresetId;                                 
    int nDetectModeCount;                              
    EM_VIDEO_ANALYSE_RULE_DETECT_MODE emDetectMode[3]; 
    int nLaneNumber;                             
    int nDetectLineCount;                        
    NET_POINT_EX stuDetectLine[20];              
    int nDirection;                              
    EM_VEHICLE_DRIVING_DIRECTION emDirection[2]; 
} NET_CFG_TRAFFIC_TOLL_GATE_INFO;
typedef struct tagNET_CALIBRATE_AREA_INFO
{
    int nCalibratePloygonAreaNum;                                     
    DH_POINT stuCalibratePloygonArea[MAX_CALIBRATE_PLOYGON_AREA_NUM]; 
    int nCalibrateRectNum;                                            
    NET_RECT stuCalibrateRects[MAX_CALIBRATE_RECT_NUM];               
    BYTE byReserved[256];                                             
} NET_CALIBRATE_AREA_INFO;
typedef struct tagNET_SCENE_INFO
{
    int nSceneID;                                 
    NET_CALIBRATE_AREA_INFO stuCalibrateAreaInfo; 
    BYTE byReserved[256];                         
} NET_SCENE_INFO;
typedef struct tagNET_FIGHT_CALIBRATE_INFO
{
    DWORD dwSize;                            
    int nSceneNum;                           
    NET_SCENE_INFO stuScenes[MAX_SCENE_NUM]; 
} NET_FIGHT_CALIBRATE_INFO;
typedef struct
{
    int nX; 
    int nY; 
} POINTCOORDINATE;
typedef enum tagNET_EM_SHAPE_TYPE
{
    NET_EM_SHAPE_TYPE_UNKNOWN = -1, 
    NET_EM_SHAPE_TYPE_MANSARD,      
    NET_EM_SHAPE_TYPE_SECTOR,       
} NET_EM_SHAPE_TYPE;
typedef struct
{
    int nIndex;                              
    bool bEnable;                            
    bool bTitleAttribute;                    
    POSTION stuPostion;                      
    POINTCOORDINATE stuPoint;                
    char szTitleName[MAX_COMMON_STRING_64];  
    BYTE byTitleType;                        
    BYTE byReserved[3];                      
    NET_EM_SHAPE_TYPE emShapeType;           
    DH_POINT stuPolygon[DH_MAX_POLYGON_NUM]; 
    int nRetPolygonPointNum;                 
    BYTE byReserved1[184];                   
} POINTINFOS;
typedef struct tagNET_OUT_SCENICSPOT_GETPOINTINFOS_INFO
{
    DWORD dwSize;
    int nTotal;                                          
    int nRetSceneNum;                                    
    POINTINFOS stuPointInfos[MAX_SCENICSPOT_POINTS_NUM]; 
} NET_OUT_SCENICSPOT_GETPOINTINFOS_INFO;
typedef struct tagNET_IN_SCENICSPOT_SETPOINTINFO_INFO
{
    DWORD dwSize;
    int nChannel;                            
    int nIndex;                              
    bool bEnable;                            
    bool bTitleAttribute;                    
    POSTION stuPosition;                     
    POINTCOORDINATE stuPoint;                
    char szTitleName[MAX_COMMON_STRING_64];  
    BYTE byTitleType;                        
    BYTE byReserved[3];                      
    NET_EM_SHAPE_TYPE emShapeType;           
    DH_POINT stuPolygon[DH_MAX_POLYGON_NUM]; 
    int nPolygonPointNum;                    
    int nChannelNum;                         
    unsigned short nSyncToChannels[16];      
} NET_IN_SCENICSPOT_SETPOINTINFO_INFO;
typedef struct tagNET_OUT_SCENICSPOT_SETPOINTINFO_INFO
{
    DWORD dwSize;                       
    int nSyncToChannelNum;              
    unsigned short nSyncToChannels[16]; 
} NET_OUT_SCENICSPOT_SETPOINTINFO_INFO;
typedef struct tagNET_IN_SCENICSPOT_GETCAPS_INFO
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_SCENICSPOT_GETCAPS_INFO;
typedef struct tagNET_SCENICSPOT_CAPS_INFO
{
    BOOL bEnable;                       
    unsigned int nTotalNum;             
    unsigned int nRegionNum;            
    int nChannelNum;                    
    unsigned short nSyncToChannels[16]; 
    BYTE byReserved[220];               
} NET_SCENICSPOT_CAPS_INFO;
typedef struct tagNET_OUT_SCENICSPOT_GETCAPS_INFO
{
    DWORD dwSize;
    NET_SCENICSPOT_CAPS_INFO stuCaps; 
} NET_OUT_SCENICSPOT_GETCAPS_INFO;
typedef struct tagNET_IN_SCENICSPOT_TURNTOPOINT_INFO
{
    DWORD dwSize;
    int nChannel; 
    int nIndex;   
} NET_IN_SCENICSPOT_TURNTOPOINT_INFO;
typedef struct tagNET_OUT_SCENICSPOT_TURNTOPOINT_INFO
{
    DWORD dwSize;
} NET_OUT_SCENICSPOT_TURNTOPOINT_INFO;
typedef enum tagEM_ALARM_SOUND_EFFECT
{
    EM_ALARM_SOUND_EFFECT_UNKNOWN, 
    EM_ALARM_SOUND_EFFECT_MUTE,    
    EM_ALARM_SOUND_EFFECT_NOTICE,  
    EM_ALARM_SOUND_EFFECT_ALERT,   
} EM_ALARM_SOUND_EFFECT;
typedef struct tagNET_ALARM_SOUND_INFO
{
    DWORD dwSize;
    EM_ALARM_SOUND_EFFECT emSoundEffect; 
} NET_ALARM_SOUND_INFO;
typedef struct tagNET_STEREO_CALIBRATE_INFO
{
    DWORD dwSize;
    int nCameraHeight;  
    float fCameraAngle; 
} NET_STEREO_CALIBRATE_INFO;
typedef enum tagEM_LINK_MODE
{
    EM_LINK_MODE_UNKNOWN,        
    EM_LINK_MODE_AUTO,           
    EM_LINK_MODE_ADHOC,          
    EM_LINK_MODE_INFRASTRUCTURE, 
} EM_LINK_MODE;
typedef enum tagEM_AP_DATA_ENCRYPT
{
    EM_AP_DATA_ENCRYPT_UNKNOWN, 
    EM_AP_DATA_ENCRYPT_NONE,    
    EM_AP_DATA_ENCRYPT_AUTO,    
    EM_AP_DATA_ENCRYPT_SHARED,  
    EM_AP_DATA_ENCRYPT_OPEN,    
    EM_AP_DATA_ENCRYPT_TKIP,    
    EM_AP_DATA_ENCRYPT_AES,     
} EM_AP_DATA_ENCRYPT;
typedef enum tagEM_AP_POWER_MODE
{
    EM_AP_POWER_MODE_UNKNOWN, 
    EM_AP_POWER_MODE_LOW,     
    EM_AP_POWER_MODE_MIDDLE,  
    EM_AP_POWER_MODE_HIGH,    
} EM_AP_POWER_MODE;
typedef struct tagNET_DHCP_INFO
{
    char szStartIP[NET_IPADDRSTR_LEN]; 
    char szStopIP[NET_IPADDRSTR_LEN];  
    int nLeaseTime;                    
    BYTE byReserved[512];              
} NET_DHCP_INFO;
typedef struct tagNET_WEP_INFO
{
    int nKeyID;                                         
    char szKeys[MAX_WEP_KEY_NUM][MAX_COMMON_STRING_64]; 
    BYTE byReserved[256];                               
} NET_WEP_INFO;
typedef struct tagNET_WPA_PSK_INFO
{
    char szPassword[MAX_COMMON_STRING_64]; 
    BYTE byReserved[256];                  
} NET_WPA_PSK_INFO;
typedef enum tagEM_EAP_METHOD
{
    EM_EAP_METHOD_UNKNOWN, 
    EM_EAP_METHOD_PEAP,    
    EM_EAP_METHOD_TLS,     
    EM_EAP_METHOD_TTLS,    
} EM_EAP_METHOD;
typedef enum tagEM_EAP_AUTH_TYPE
{
    EM_EAP_AUTH_TYPE_UNKNOWN,  
    EM_EAP_AUTH_TYPE_NONE,     
    EM_EAP_AUTH_TYPE_PAP,      
    EM_EAP_AUTH_TYPE_MSCHAP,   
    EM_EAP_AUTH_TYPE_MSCHAPV2, 
    EM_EAP_AUTH_TYPE_GTC,      
} EM_EAP_AUTH_TYPE;
typedef enum tagEM_AP_AUTHENTICATION
{
    EM_AP_AUTHENTICATION_UNKNOWN, 
    EM_AP_AUTHENTICATION_OPEN,    
    EM_AP_AUTHENTICATION_WEP,     
    EM_AP_AUTHENTICATION_WPAPSK,  
    EM_AP_AUTHENTICATION_WPA2PSK, 
    EM_AP_AUTHENTICATION_WPA,     
    EM_AP_AUTHENTICATION_WPA2,    
} EM_AP_AUTHENTICATION;
typedef struct tagNET_EAP_INFO
{
    EM_EAP_METHOD emMethod;                   
    EM_EAP_AUTH_TYPE emAuthType;              
    char szIdentity[MAX_COMMON_STRING_64];    
    char szAnonymousID[MAX_COMMON_STRING_64]; 
    char szPassword[MAX_COMMON_STRING_64];    
    char szCaCert[MAX_COMMON_STRING_512];     
    char szUserCert[MAX_COMMON_STRING_512];   
    BYTE byReserved[256];                     
} NET_EAP_INFO;
typedef enum tagEM_WIFI_CONNECT_TYPE
{
    EM_WIFI_CONNECT_TYPE_UNKNOWN,      
    EM_WIFI_CONNECT_TYPE_PUSH_BUTTON,  
    EM_WIFI_CONNECT_TYPE_PIN_ENROLLEE, 
    EM_WIFI_CONNECT_TYPE_PIN_REG,      
} EM_WIFI_CONNECT_TYPE;
typedef struct tagNET_WPS_INFO
{
    EM_WIFI_CONNECT_TYPE emConnType;  
    char szPIN[MAX_COMMON_STRING_32]; 
    BYTE byReserved[256];             
} NET_WPS_INFO;
typedef struct tagNET_FILTER_ADDRESS_LIST
{
    BOOL bEffective;                           
    char szMAC[DH_MACADDR_LEN];                
    char szDescribeText[DH_COMMON_STRING_256]; 
    BYTE byReserved[256];                      
} NET_FILTER_ADDRESS_LIST;
typedef enum tagEM_ADDRLIST_FILTER_POLICY
{
    EM_ADDRLIST_FILTER_POLICY_UNKNOWN, 
    EM_ADDRLIST_FILTER_POLICY_WHITE,   
    EM_ADDRLIST_FILTER_POLICY_BLACK,   
} EM_ADDRLIST_FILTER_POLICY;
typedef struct tagNET_AP_FILTER
{
    BOOL bEnable;                          
    int nMaxAccessNum;                     
    EM_ADDRLIST_FILTER_POLICY emPolicy;    
    NET_FILTER_ADDRESS_LIST* pstuAddrList; 
    int nMaxListNum;                       
    int nRetListNum;                       
    BYTE byReserved[256];                  
} NET_AP_FILTER;
typedef enum tagEM_WORKPATTERN
{
    EM_WORKPATTERN_UNKNOWN, 
    EM_WORKPATTERN_2_4G,    
    EM_WORKPATTERN_5G,      
} EM_WORKPATTERN;
typedef struct tagNET_AP_WORKPATTERN
{
    EM_WORKPATTERN emWorkPatternType;            
    BOOL bEnable;                                
    BOOL bHideSSID;                              
    char szSSID[DH_COMMON_STRING_36];            
    EM_LINK_MODE emLinkMode;                     
    int nPriority;                               
    int nChannel;                                
    int nChannelBandwidth;                       
    EM_AP_AUTHENTICATION emAuthentication;       
    EM_AP_DATA_ENCRYPT emDataEncryption;         
    EM_AP_POWER_MODE emPowerMode;                
    BOOL bDHCPEnable;                            
    NET_DHCP_INFO stuDHCP;                       
    char szIPAddresss[NET_IPADDRSTR_LEN];        
    char szSubnetMask[MAX_COMMON_STRING_16];     
    char szDefaultGateway[MAX_COMMON_STRING_16]; 
    NET_WEP_INFO stuWEP;                         
    NET_WPA_PSK_INFO stuWPAPSK;                  
    NET_EAP_INFO stuEAP;                         
    NET_WPS_INFO stuWPS;                         
    NET_AP_FILTER stuFilter;                     
    BYTE byReserved[1024];                       
} NET_AP_WORKPATTERN;
typedef enum tagEM_ACCESSPOINT_NAME
{
    EM_ACCESSPOINT_NAME_UNKNOWN, 
    EM_ACCESSPOINT_NAME_ETH2,    
    EM_ACCESSPOINT_NAME_WALN0,   
    EM_ACCESSPOINT_NAME_APRA0,   
} EM_ACCESSPOINT_NAME;
typedef struct tagNET_ACCESSPOINT_INFO
{
    EM_ACCESSPOINT_NAME emAccessPointName;                  
    int nValidPatternNum;                                   
    NET_AP_WORKPATTERN stuWorkPattern[MAX_WORKPATTERN_NUM]; 
    BYTE byReserved[1024];                                  
} NET_ACCESSPOINT_INFO;
typedef struct tagNET_NETAPP_ACCESSPOINT
{
    DWORD dwSize;
    int nValidAPNum;                                      
    NET_ACCESSPOINT_INFO stuAccessPoints[NET_MAX_AP_NUM]; 
} NET_NETAPP_ACCESSPOINT;
typedef enum tagEM_DISORDERWINDOW_TYPE
{
    EM_DISORDERWINDOW_TYPE_UNKNOWN = -1,
    EM_DISORDERWINDOW_TYPE_PACKETS_NUMBER = 0, 
    EM_DISORDERWINDOW_TYPE_DATA_DELAY = 1,     
    EM_DISORDERWINDOW_TYPE_MEMORY_SIZE = 2,    
} EM_DISORDERWINDOW_TYPE;
typedef struct tagNET_CFG_RTSP_TRANSIT
{
    int nUdpSndBufSize;                          
    int nUdpRcvBufSize;                          
    int nSliceSize;                              
    int nFlowControlMaxDelay;                    
    int nFlowControlCoefficient;                 
    EM_DISORDERWINDOW_TYPE emDisorderWindowType; 
    int nDisorderWindowValue;                    
    BYTE byReserved[2048];                       
} NET_CFG_RTSP_TRANSIT;
typedef enum tagEM_RETRANSIT_TYPE
{
    EM_RETRANSIT_TYPE_UNKNOWN = -1,
    EM_RETRANSIT_TYPE_PACKETS_NUMBER = 0, 
    EM_RETRANSIT_TYPE_DATA_DELAY = 1,     
} EM_RETRANSIT_TYPE;
typedef struct tagNET_CFG_DVRIP_TRANSIT
{
    int nUdpSndBufSize;                
    int nMaxSize;                      
    int nFlowControlMaxDelay;          
    int nFlowControlCoefficient;       
    EM_RETRANSIT_TYPE emRetransitType; 
    int nRetransitValue;               
    BYTE byReserved[2048];             
} NET_CFG_DVRIP_TRANSIT;
typedef struct tagNET_CFG_GB28181_TRANSIT
{
    int nUdpSndBufSize;       
    int nMaxSize;             
    int nFlowControlMaxDelay; 
    int nFlowControlCoefficient; 
    BYTE byReserved[2048]; 
} NET_CFG_GB28181_TRANSIT;
typedef struct tagNET_NETAUTOADAPTTRANSIT
{
    DWORD dwSize;
    NET_CFG_RTSP_TRANSIT stuRtsp;       
    NET_CFG_DVRIP_TRANSIT stuDvrip;     
    NET_CFG_GB28181_TRANSIT stuGB28181; 
} NET_NETAUTOADAPTTRANSIT;
#define MAX_DN_LENGTH 128
typedef struct tagNET_NETAPP_LDAP
{
    DWORD dwSize;
    BOOL bEnable;                            
    char szServerIP[MAX_SERVER_ADDRESS_LEN]; 
    int nServerPort;                         
    char szBindDN[MAX_DN_LENGTH];            
    char szBindPwd[MAX_PWD_LEN];             
    BOOL bAnonymousBind;                     
    char szBaseDN[MAX_DN_LENGTH];            
    char szFilter[DH_COMMON_STRING_128];     
} NET_NETAPP_LDAP;
typedef enum tagEM_SYSLOG_FACILITY_TYPE
{
    EM_SYSLOG_FACILITY_UNKNOWN = -1,
    EM_SYSLOG_FACILITY_KERNEL_MESSAGES,                          
    EM_SYSLOG_FACILITY_USER_LEVEL_MESSAGES,                      
    EM_SYSLOG_FACILITY_MAIL_SYSTEM,                              
    EM_SYSLOG_FACILITY_SYSTEM_DAEMONS,                           
    EM_SYSLOG_FACILITY_SECURITY_MESSAGES,                        
    EM_SYSLOG_FACILITY_MESSAGES_GENERATED_INTERNALLY_BY_SYSLOGD, 
    EM_SYSLOG_FACILITY_LINE_PRINTER_SUBSYSTEM,                   
    EM_SYSLOG_FACILITY_NETWORK_NEWS_SUBSYSTEM,                   
    EM_SYSLOG_FACILITY_UUCP_SUBSYSTEM,                           
    EM_SYSLOG_FACILITY_CLOCK_DAEMON,                             
    EM_SYSLOG_FACILITY_SECURITY_MESSAGES_2,                      
    EM_SYSLOG_FACILITY_FTP_DAEMON,                               
    EM_SYSLOG_FACILITY_NTP_SUBSYSTEM,                            
    EM_SYSLOG_FACILITY_LOG_AUDIT,                                
    EM_SYSLOG_FACILITY_LOG_ALERT,                                
    EM_SYSLOG_FACILITY_CLOCK_DAEMON_2,                           
    EM_SYSLOG_FACILITY_LOCAL_USE_0,                              
    EM_SYSLOG_FACILITY_LOCAL_USE_1,                              
    EM_SYSLOG_FACILITY_LOCAL_USE_2,                              
    EM_SYSLOG_FACILITY_LOCAL_USE_3,                              
    EM_SYSLOG_FACILITY_LOCAL_USE_4,                              
    EM_SYSLOG_FACILITY_LOCAL_USE_5,                              
    EM_SYSLOG_FACILITY_LOCAL_USE_6,                              
    EM_SYSLOG_FACILITY_LOCAL_USE_7,                              
} EM_SYSLOG_FACILITY_TYPE;
typedef struct tagNET_NETAPP_SYSLOG
{
    DWORD dwSize;
    BOOL bEnable;                       
    char szServerIP[MAX_SERVER_IP_LEN]; 
    int nServerPort;                    
    EM_SYSLOG_FACILITY_TYPE emFacility; 
} NET_NETAPP_SYSLOG;
typedef enum tagEM_WIRELESS_AUTH_MODE
{
    EM_WIRELESS_AUTH_MODE_UNKNOWN = 0,
    EM_WIRELESS_AUTH_MODE_NO,   
    EM_WIRELESS_AUTH_MODE_PAP,  
    EM_WIRELESS_AUTH_MODE_CHAP, 
} EM_WIRELESS_AUTH_MODE;
typedef enum tagEM_WIRELESS_3GFLUX_TACTICS
{
    EM_WIRELESS_3GFLUX_TACTICS_UNKNOWN = 0,
    EM_WIRELESS_3GFLUX_TACTICS_BYFLUX_MONTHLY, 
    EM_WIRELESS_3GFLUX_TACTICS_BYTIME_MONTHLY  
} EM_WIRELESS_3GFLUX_TACTICS;
typedef enum tagEM_WIRELESS_DAY3GFLUX_TACTICS
{
    EM_WIRELESS_DAY3GFLUX_TACTICS_UNKNOWN = 0,
    EM_WIRELESS_DAY3GFLUX_TACTICS_BYFLUX, 
    EM_WIRELESS_DAY3GFLUX_TACTICS_BYTIME  
} EM_WIRELESS_DAY3GFLUX_TACTICS;
typedef enum tagEM_WIRELESS_3GFLUX_ACTION
{
    EM_WIRELESS_3GFLUX_ACTION_UNKNOWN = 0,
    EM_WIRELESS_3GFLUX_ACTION_NOTHING,  
    EM_WIRELESS_3GFLUX_ACTION_3GNETDOWN 
} EM_WIRELESS_3GFLUX_ACTION;
typedef enum tagEM_WIRELESS_WORK_MODE
{
    EM_WIRELESS_WORK_MODE_UNKNOWN = 0,
    EM_WIRELESS_WORK_MODE_CDMA1X,     
    EM_WIRELESS_WORK_MODE_EVDO,       
    EM_WIRELESS_WORK_MODE_TD_SCDMA,   
    EM_WIRELESS_WORK_MODE_WCDMA,      
    EM_WIRELESS_WORK_MODE_EDGE,       
    EM_WIRELESS_WORK_MODE_TDD_LTE,    
    EM_WIRELESS_WORK_MODE_FDD_LTE,    
    EM_WIRELESS_WORK_MODE_GPRS,       
    EM_WIRELESS_WORK_MODE_NR,         
    EM_WIRELESS_WORK_MODE_NO_SERVICE, 
    EM_WIRELESS_WORK_MODE_AMPS,       
    EM_WIRELESS_WORK_MODE_CDMA2000,   
    EM_WIRELESS_WORK_MODE_GSM,        
    EM_WIRELESS_WORK_MODE_LTE,        
    EM_WIRELESS_WORK_MODE_TD_LTE,     
    EM_WIRELESS_WORK_MODE_AUTO        
} EM_WIRELESS_WORK_MODE;
#define MAX_DAIL_NUMBER 32 
typedef struct tagNET_NETAPP_WIRELESS
{
    DWORD dwSize;
    BOOL bEnable;                                        
    int nIndex;                                          
    int nKeepAlive;                                      
    EM_WIRELESS_APN_TYPE emAPN;                          
    char szAPNName[DH_COMMON_STRING_32];                 
    EM_WIRELESS_AUTH_MODE emAuthMode;                    
    char szUserName[DH_COMMON_STRING_64];                
    char szPassword[DH_COMMON_STRING_64];                
    BOOL bAutoDial;                                      
    DH_TSECT stuTimeSection[DH_N_WEEKS][DH_N_REC_TSECT]; 
    EM_WIRELESS_3GFLUX_TACTICS em3GFluxTactic; 
    UINT n3GFluxUp;                            
    UINT n3GFlux;                              
    EM_WIRELESS_DAY3GFLUX_TACTICS emDay3GFluxTactic; 
    UINT nDay3GFluxUp;                               
    UINT nDay3GFlux;                                 
    EM_WIRELESS_3GFLUX_ACTION emDay3GFluxAction;     
    EM_WIRELESS_WORK_MODE emWorkMode;   
    char szDailNumber[MAX_DAIL_NUMBER]; 
    BOOL bActivate;                     
    char szCardNum[32];                 
    char szIMEI[16];                    
    char szPIN[16];                     
    char szICCID[32];                   
} NET_NETAPP_WIRELESS;
typedef enum tagEM_OPERATOR_SELECTION_MODE
{
    EM_OPERATOR_SELECTION_MODE_UNKNOWN = -1,   
    EM_OPERATOR_SELECTION_MODE_AUTO,           
    EM_OPERATOR_SELECTION_MODE_MANUAL,         
    EM_OPERATOR_SELECTION_MODE_LOGOUT,         
    EM_OPERATOR_SELECTION_MODE_FORMAT,         
    EM_OPERATOR_SELECTION_MODE_AUTO_OR_MANUAL, 
} EM_OPERATOR_SELECTION_MODE;
typedef enum tagEM_OPERATOR_MSG_FORMAT
{
    EM_OPERATOR_MSG_FORMAT_UNKNOWN = -1, 
    EM_OPERATOR_MSG_FORMAT_FULL_STRING,  
    EM_OPERATOR_MSG_FORMAT_SHORT_STRING, 
    EM_OPERATOR_MSG_FORMAT_DIGITAL,      
} EM_OPERATOR_MSG_FORMAT;
typedef enum tagEM_ACCESS_TECHNOLOGY
{
    EM_ACCESS_TECHNOLOGY_UNKNOWN = -1,            
    EM_ACCESS_TECHNOLOGY_GSM,                     
    EM_ACCESS_TECHNOLOGY_GSM_COMPACT,             
    EM_ACCESS_TECHNOLOGY_UTRAN,                   
    EM_ACCESS_TECHNOLOGY_GSM_W_EGPRS,             
    EM_ACCESS_TECHNOLOGY_UTRAN_W_HSDPA,           
    EM_ACCESS_TECHNOLOGY_UTRAN_W_HSUPA,           
    EM_ACCESS_TECHNOLOGY_UTRAN_W_HSDPA_AND_HSUPA, 
    EM_ACCESS_TECHNOLOGY_E_UTRAN,                 
} EM_ACCESS_TECHNOLOGY;
typedef struct tagNET_WIRELESS_EXPERT
{
    BOOL bValid;  
    BOOL bEnable; 
    int nIndex;   
    EM_WIRELESS_APN_TYPE emAPN;              
    char szAPNName[32];                      
    EM_WIRELESS_AUTH_MODE emAuthMode;        
    char szUserName[64];                     
    char szPassword[64];                     
    EM_OPERATOR_SELECTION_MODE emOprMode;    
    EM_OPERATOR_MSG_FORMAT emOprFormat;      
    char szOperInfo[32];                     
    EM_ACCESS_TECHNOLOGY emAccessTechnology; 
    BYTE byReserved[64];                     
} NET_WIRELESS_EXPERT;
typedef struct tagNET_NETAPP_WIRELESS_EXPERT
{
    DWORD dwSize;
    NET_WIRELESS_EXPERT stuExpert[4]; 
} NET_NETAPP_WIRELESS_EXPERT;
typedef struct tagNET_DEV_CAR_COACH_INFO
{
    DWORD dwSize;
    char szCarNo[MAX_CARNO_LEN];     
    char szCoachNo[MAX_COACHNO_LEN]; 
} NET_DEV_CAR_COACH_INFO;
typedef enum tagEM_MEDIA_GLOBAL_SNAP_FORMAT_AS
{
    EM_MEDIA_GLOBAL_SNAP_FORMAT_AS_UNKNOWN,
    EM_MEDIA_GLOBAL_SNAP_FORMAT_AS_MAIN_FORMAT,   
    EM_MEDIA_GLOBAL_SNAP_FORMAT_AS_EXTRA_FORMAT,  
    EM_MEDIA_GLOBAL_SNAP_FORMAT_AS_EXTRA2_FORMAT, 
    EM_MEDIA_GLOBAL_SNAP_FORMAT_AS_EXTRA3_FORMAT, 
} EM_MEDIA_GLOBAL_SNAP_FORMAT_AS;
typedef struct tagNET_MEDIA_GLOBAL_INFO
{
    DWORD dwSize;
    int nPacketType;                               
    BYTE byPacketLength;                           
    BYTE byAlign[3];                               
    DWORD dwPacketSize;                            
    BOOL bLogRecord;                               
    BOOL bLogEncode;                               
    EM_MEDIA_GLOBAL_SNAP_FORMAT_AS emSnapFormatAs; 
} NET_MEDIA_GLOBAL_INFO;
typedef struct tagNET_PARKINGSPACECELL_STATUS_INFO
{
    DWORD dwSize;
    int nCellNumber; 
    UINT nCellType;  
} NET_PARKINGSPACECELL_STATUS_INFO;
typedef struct tagNET_PARKINGSPACELIGHT_INFO
{
    int nRed;            
    int nYellow;         
    int nBlue;           
    int nGreen;          
    int nPurple;         
    int nWhite;          
    int nPink;           
    BYTE byReserved[32]; 
} NET_PARKINGSPACELIGHT_INFO;
typedef struct tagNET_NETWORK_EXCEPTION_INFO
{
    NET_PARKINGSPACELIGHT_INFO stNetPortAbortInfo[MAX_NETPORT_NUM]; 
    int nRetNetPortAbortNum;                                        
    NET_PARKINGSPACELIGHT_INFO stuSpaceSpecialInfo;                 
    NET_PARKINGSPACELIGHT_INFO stuSpaceChargingInfo;                
    BYTE byReserved[256];                                           
} NET_NETWORK_EXCEPTION_INFO;
typedef struct tagNET_PARKINGSPACELIGHT_STATE_INFO
{
    DWORD dwSize;
    NET_PARKINGSPACELIGHT_INFO stuSpaceFreeInfo;        
    NET_PARKINGSPACELIGHT_INFO stuSpaceFullInfo;        
    NET_PARKINGSPACELIGHT_INFO stuSpaceOverLineInfo;    
    NET_PARKINGSPACELIGHT_INFO stuSpaceOrderInfo;       
    NET_NETWORK_EXCEPTION_INFO stuNetWorkExceptionInfo; 
} NET_PARKINGSPACELIGHT_STATE_INFO;
typedef enum __EM_NAS_PROTOCOL
{
    NAS_PROTOCOL_UNKNOW = 0,
    NAS_PROTOCOL_FTP,   
    NAS_PROTOCOL_SMB,   
    NAS_PROTOCOL_NFS,   
    NAS_PROTOCOL_ISCSI, 
    NAS_PROTOCOL_CLOUD, 
} EM_NAS_PROTOCOL;
typedef struct tagNET_NAS_INFO
{
    DWORD dwSize;
    BOOL bEnable;                               
    char szName[MAX_COMMON_STRING_128];         
    char szHostIp[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    WORD wHostPort;                             
    char reserved[2];                           
    char szDirName[DH_FTP_MAX_PATH];            
    char szUserName[DH_FTP_USERNAME_LEN];       
    char szPassword[DH_FTP_PASSWORD_LEN];       
    int nInterval;                              
    BOOL bAnonymity;                            
    EM_NAS_PROTOCOL emProtocol;                 
} NET_NAS_INFO;
typedef struct tagNET_PPPOE_INFO
{
    DWORD dwSize;
    BOOL bEnable;                       
    char szUserName[MAX_USER_NAME_LEN]; 
    char szPasswd[MAX_PWD_LEN];         
} NET_PPPOE_INFO;
typedef struct tagNET_EMAIL_INFO
{
    DWORD dwSize;
    BOOL bEnable;                              
    char szMailIPAddr[DH_MAX_DOMAIN_NAME_LEN]; 
    WORD wMailPort;                            
    char reserved[2];                          
    char szSenderAddr[DH_MAX_MAIL_ADDR_LEN];   
    char szUserName[DH_MAX_MAIL_NAME_LEN];     
    char szUserPsw[DH_MAX_MAIL_NAME_LEN];      
    char szDestAddr[DH_MAX_MAIL_ADDR_LEN];     
    char szSubject[DH_MAX_MAIL_SUBJECT_LEN];   
    char* szReceivers[DH_MAX_MAIL_ADDR_LEN];   
    unsigned int nReceiversNum;                
    unsigned int nReceiversNumRet;             
    BOOL bSSLEnable;                           
    BOOL bTLSEnable;                           
    WORD wSendInterval;                        
    BYTE bAnonymous;                           
    BYTE bAttachEnable;                        
    BOOL bHealthReport;                        
    int nHealthReportInterval;                 
} NET_EMAIL_INFO;
typedef struct tagNET_DDNS_INFO
{
    DWORD dwSize;
    DWORD dwDdnsServerNum; 
    DH_DDNS_SERVER_CFG stuDdnsServer[DH_MAX_DDNS_NUM];
} NET_DDNS_INFO;
typedef struct tagNET_PROTOCOLS_MANAGER
{
    char szDesc[DH_COMMON_STRING_128];     
    BOOL bEnable;                          
    char szProtocol[DH_COMMON_STRING_128]; 
    char szShowType[DH_COMMON_STRING_128]; 
    BYTE byReserved[256];                  
} NET_PROTOCOLS_MANAGER;
typedef struct tagNET_SCADA_PROTOCOLS_MANAGER
{
    DWORD dwSize;
    NET_PROTOCOLS_MANAGER* pstProtocolsManager; 
    int nProtocolsManagerNum;                   
    int nRetProtocolsManagerNum;                
} NET_SCADA_PROTOCOLS_MANAGER;
typedef struct tagNET_DEVICEIDSETS
{
    char szDevName[DH_COMMON_STRING_32];     
    char szDevType[DH_COMMON_STRING_32];     
    char szNewDeviceId[DH_COMMON_STRING_32]; 
    char szOldDeviceId[DH_COMMON_STRING_32]; 
    BYTE byReserved[128];                    
} NET_DEVICEIDSETS;
typedef struct tagNET_SCADA_DEVICEINFO_CFG
{
    DWORD dwSize;
    char szCity[DH_COMMON_STRING_32];     
    char szProvince[DH_COMMON_STRING_32]; 
    int nStation;                         
    NET_DEVICEIDSETS* pstDeviceIdSets;    
    int nDeviceIdSetsNum;                 
    int nRetDeviceIdSetsNum;              
} NET_SCADA_DEVICEINFO_CFG;
typedef struct tagNET_SCADA_CONTROLLER_SITE_INFO
{
    char szIPAddress[64]; 
    char szDevName[64];   
    UINT nPort;           
    char szDeviceID[32];  
    BYTE bReserved[128];  
} NET_SCADA_CONTROLLER_SITE_INFO;
typedef struct tagNET_CFG_SCADA_CONTROLLER_SITE_INFO
{
    DWORD dwSize;                                          
    int nControllerNum;                                    
    NET_SCADA_CONTROLLER_SITE_INFO stuControllerInfo[128]; 
} NET_CFG_SCADA_CONTROLLER_SITE_INFO;
typedef enum tagNET_EM_LINK_LAYER_VPN_TYPE
{
    NET_EM_TYPE_UNKNOWN = 0, 
    NET_EM_TYPE_PPTP,        
    NET_EM_TYPE_L2TP,        
} NET_EM_LINK_LAYER_VPN_TYPE;
typedef struct tagNET_NETAPP_LINK_LAYER_VPN
{
    char szName[MAX_LINK_NAME_LEN];                
    NET_EM_LINK_LAYER_VPN_TYPE emLinkLayerVPNType; 
    BOOL bEnable;                                  
    char szAddress[MAX_SERVER_ADDRESS_LEN];        
    char szUserName[MAX_USER_NAME_LEN];            
    char szPassword[MAX_PWD_LEN];                  
    BYTE byReserved[1024];                         
} NET_NETAPP_LINK_LAYER_VPN;
typedef struct tagNET_NETAPP_LINK_LAYER_VPN_CFG
{
    DWORD dwSize;
    int nRetLinkLayerVPNNum;                                      
    NET_NETAPP_LINK_LAYER_VPN stLinkLayerVPN[LINK_LAYER_VPN_NUM]; 
} NET_NETAPP_LINK_LAYER_VPN_CFG;
typedef struct tagNET_NETAPP_SSHD_CFG
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_NETAPP_SSHD_CFG;
typedef struct tagNET_MEMBERS_INFO
{
    char szName[MAX_COMMON_STRING_32];         
    char szMobile[MAX_COMMON_STRING_16];       
    char szEmail[MAX_COMMON_STRING_32];        
    char szOrganization[MAX_COMMON_STRING_64]; 
} NET_MEMBERS_INFO;
typedef enum tagNET_NOTIFY_TYPE
{
    NET_NOTIFY_TYPE_UNKNOWN, 
    NET_NOTIFY_TYPE_SMS,     
    NET_NOTIFY_TYPE_CALL,    
    NET_NOTIFY_TYPE_ALL,     
} NET_NOTIFY_TYPE;
typedef struct tagNET_NOTIFY_INFO
{
    NET_NOTIFY_TYPE emType; 
    BOOL bAlarmEvents;      
    BOOL bSystemEvents;     
    BOOL bOperationEvents;  
} NET_NOTIFY_INFO;
typedef struct tagNET_NETAPP_COMMUNICATION_LIST
{
    char szGroupName[MAX_COMMON_STRING_16]; 
    int nMembersNum;                        
    NET_MEMBERS_INFO arrMembers[32];        
    NET_NOTIFY_INFO stuNotifyInfo;          
} NET_NETAPP_COMMUNICATION_LIST;
typedef struct tagNET_NETAPP_COMMUNICATION_LIST_CFG
{
    DWORD dwSize;                                       
    int nConmmunicationListNum;                         
    NET_NETAPP_COMMUNICATION_LIST stuCommunication[10]; 
} NET_NETAPP_COMMUNICATION_LIST_CFG;
typedef struct tagNET_NETAPP_WEB_CFG
{
    DWORD dwSize; 
    BOOL bEnable; 
    UINT nPort;   
} NET_NETAPP_WEB_CFG;
typedef struct tagNET_VSP_CHINA_TOWER
{
    DWORD dwSize;
    BOOL bEnable;                       
    char szServerIP[MAX_SERVER_IP_LEN]; 
    int nServerPort;                    
    int nLoginInterval;                 
} NET_VSP_CHINA_TOWER;
typedef struct tagNET_VSP_SHDXJT
{
    DWORD dwSize;
    BOOL bEnable;            
    char szRegisterUrl[128]; 
    char szDeviceID[32];     
    char szDeviceKey[32];    
    int nEStoreFlag;         
    BYTE byReserve[4];       
} NET_VSP_SHDXJT;
typedef struct tagNET_CFG_VSP_CONSUME
{
    DWORD dwSize;      
    UINT nTotalNumber; 
} NET_CFG_VSP_CONSUME;
typedef struct tagNET_CFG_VTH_PASSWORD_INFO
{
    DWORD dwSize;
    char szUser[8]; 
} NET_CFG_VTH_PASSWORD_INFO;
typedef struct tagNET_CFG_SIPSERVER_INFO
{
    DWORD dwSize;
    char szAccoutName[MAX_COMMON_STRING_64];                  
    char szAddres[DH_MAX_IPADDR_EX_LEN];                      
    int nPort;                                                
    char szProxyAdress[DH_MAX_IPADDR_EX_LEN];                 
    char szProxyID[MAX_COMMON_STRING_64];                     
    int nProxyPort;                                           
    char szUserID[MAX_COMMON_STRING_64];                      
    int nUserType;                                            
    char szAuthID[MAX_USER_NAME_LEN];                         
    char szAuthPassword[MAX_PWD_LEN];                         
    char szSTUNServer[DH_MAX_IPADDR_EX_LEN];                  
    char szRegisterRealm[MAX_COMMON_STRING_64];               
    int nRegExpiration;                                       
    int nSipPort;                                             
    int nRTPPort;                                             
    BOOL bUnregisterOnReboot;                                 
    char szDefaultCallNumber[MAX_COMMON_STRING_64];           
    UINT nVideoStreamType;                                    
    UINT nAudioStreamType;                                    
    BOOL bRouteEnable;                                        
    int nRouteCount;                                          
    char szRouteAddress[DH_MAX_IPADDR_EX_LEN][MAX_ROUTE_NUM]; 
    char szSIPServerLoginUserName[MAX_USER_NAME_LEN];         
    char szSIPServerLoginPWD[MAX_PWD_LEN];                    
    BOOL bMainVTO;                                            
    char szRedundancyServer[DH_MAX_IPADDR_EX_LEN];            
    char szRedundancyUserName[MAX_USER_NAME_LEN];             
    char szRedundancyPassword[MAX_PWD_LEN];                   
    char szAnalogNumberStart[MAX_COMMON_STRING_64];           
    char szAnalogNumberEnd[MAX_COMMON_STRING_64];             
    BOOL bUserEnable;                                         
} NET_CFG_SIPSERVER_INFO;
typedef struct tagNET_DEVICE_LOGIN_INFO
{
    char szAddress[DH_MAX_IPADDR_EX_LEN];    
    char szLongNumber[MAX_COMMON_STRING_16]; 
    char szUsername[MAX_COMMON_STRING_16];   
    char szPassword[MAX_COMMON_STRING_16];   
    BYTE byReserved[512];                    
} NET_DEVICE_LOGIN_INFO;
typedef struct tagNET_CFG_DEVICE_LOGIN_INFO
{
    DWORD dwSize;
    int nCount;                                  
    NET_DEVICE_LOGIN_INFO stDeviceLoginInfo[32]; 
} NET_CFG_DEVICE_LOGIN_INFO;
typedef struct tagNET_CFG_AELENSMASK_INFO
{
    DWORD dwSize;
    BOOL bEnable;                       
    char szName[MAX_COMMON_STRING_128]; 
    BOOL bStatus;                       
} NET_CFG_AELENSMASK_INFO;
typedef struct tagNET_CFG_SINGLE_ULTRASONIC
{
    BOOL bEnable;                 
    UINT nFreq;                   
    int nBurst;                   
    int nGain;                    
    int nDriveCurrent;            
    int nMinValidDistance;        
    int nMaxValidDistance;        
    int nMinVaildSignalIntensity; 
    int nMaxVaildSignalIntensity; 
    BYTE byReserved[512];         
} NET_CFG_SINGLE_ULTRASONIC;
typedef struct tagNET_CFG_ULTRASONIC_INFO
{
    DWORD dwSize;
    int nMaxCount;                             
    int nRetCount;                             
    NET_CFG_SINGLE_ULTRASONIC* pstuULTRASONIC; 
} NET_CFG_ULTRASONIC_INFO;
typedef struct tagNET_CFG_ACCESS_DELAYSTRATEGY
{
    DWORD dwSize;
    BOOL bEnable;        
    int nPreArrearsTerm; 
    int nArrearsTerm;    
} NET_CFG_ACCESS_DELAYSTRATEGY;
typedef enum tagNET_EM_REGISTAR_SERVER_TYPE
{
    NET_EM_REGISTAR_SERVER_TYPE_UNKNOWN,
    NET_EM_REGISTAR_SERVER_TYPE_VTO,
    NET_EM_REGISTAR_SERVER_TYPE_H500,
    NET_EM_REGISTAR_SERVER_TYPE_VTNC,
    NET_EM_REGISTAR_SERVER_TYPE_ZYCOO,
    NET_EM_REGISTAR_SERVER_TYPE_THIRDPARTY,
    NET_EM_REGISTAR_SERVER_TYPE_3CXSYSTEM,
    NET_EM_REGISTAR_SERVER_TYPE_ASTERISK,
} NET_EM_REGISTAR_SERVER_TYPE;
typedef struct tagNET_CFG_REGISTAR_INFO
{
    DWORD dwSize;
    char szRegistarName[MAX_COMMON_STRING_64]; 
    NET_EM_REGISTAR_SERVER_TYPE emServerType;  
    BOOL bRegistarEnable;                      
    char szAddress[DH_MAX_IPADDR_EX_LEN];      
    int nPort;                                 
    char szPassword[MAX_COMMON_STRING_64];     
} NET_CFG_REGISTAR_INFO;
typedef struct tagNET_CFG_RECORDEXTRA_INFO
{
    DWORD dwSize;
    DH_TSECT stuTimeSection[DH_N_SCHEDULE_TSECT][DH_N_REC_TSECT]; 
} NET_CFG_RECORDEXTRA_INFO;
#define NET_MAX_NUM_RECORDBACKUP_TASK 512    
#define NET_MAX_NUM_RECORDBACKUP_CHANNEL 128 
typedef struct tagNET_RECORDBACKUP_TASK
{
    int nNumChannel;                                
    int nChannel[NET_MAX_NUM_RECORDBACKUP_CHANNEL]; 
    NET_TIME_EX stuStartTime;                       
    NET_TIME_EX stuEndTime;                         
    char szStorageGroupName[DH_COMMON_STRING_32];   
    BYTE byReserved[512]; 
} NET_RECORDBACKUP_TASK;
typedef struct tagNET_CFG_AUTORECORDBACKUPRESTORE_INFO
{
    DWORD dwSize;                                                 
    BOOL bEnable;                                                 
    UINT nSpeed;                                                  
    NET_TIME_EX stuBackupTime;                                    
    int nNumTask;                                                 
    NET_RECORDBACKUP_TASK stuTask[NET_MAX_NUM_RECORDBACKUP_TASK]; 
} NET_CFG_AUTORECORDBACKUPRESTORE_INFO;
typedef enum tagEM_FACE_SNAP_POLICY
{
    EM_FACE_SNAP_POLICY_UNKNOWN,     
    EM_FACE_SNAP_POLICY_REALTIME,    
    EM_FACE_SNAP_POLICY_OPTIMAL,     
    EM_FACE_SNAP_POLICY_QUALITY,     
    EM_FACE_SNAP_POLICY_RECOGNITION, 
    EM_FACE_SNAP_POLICY_QUICK,       
    EM_FACE_SNAP_POLICY_FULLTRACK,   
    EM_FACE_SNAP_POLICY_INTERVAL,    
    EM_FACE_SNAP_POLICY_SINGLE,      
    EM_FACE_SNAP_POLICY_PRECISION,   
} EM_FACE_SNAP_POLICY;
typedef enum tagEM_CUTOUT_POLICY
{
    EM_CUTOUT_POLICY_UNKNOWN = -1,  
    EM_CUTOUT_POLICY_UNSUPPORT,     
    EM_CUTOUT_POLICY_ORIGINAL,      
    EM_CUTOUT_POLICY_HALF,          
    EM_CUTOUT_POLICY_WHOLE,         
    EM_CUTOUT_POLICY_CEPHALOTHORAX, 
} EM_CUTOUT_POLICY;
typedef struct tagNET_CFG_FACESNAPSHOT_INFO
{
    DWORD dwSize;                     
    EM_FACE_SNAP_POLICY emSnapPolicy; 
    UINT nSnapFrames;                 
    UINT nOptimalTime;                
    EM_CUTOUT_POLICY emCutoutPolicy;  
    UINT nIntervalFrmCnt;             
    UINT nOptimalInterval;            
    UINT nOptimalCount;               
    UINT nRecognizeTimeout;           
} NET_CFG_FACESNAPSHOT_INFO;
typedef enum tagEM_RECORD_TYPE
{
    EM_RECORD_TYPE_UNKNOWN,      
    EM_RECORD_TYPE_COMMON,       
    EM_RECORD_TYPE_ALARM2,       
    EM_RECORD_TYPE_MOTIONDETECT, 
} EM_RECORD_TYPE;
typedef struct tagNET_TIME_RECORDBACKUP_TASK
{
    UINT nChannelCount;        
    UINT nChannels[512];       
    UINT nRemoteChannels[512]; 
    char szDeviceIP[64];          
    UINT nPort;                   
    char szUserName[64];          
    char szPassword[64];          
    NET_TIME_EX1 stuStartTime;    
    NET_TIME_EX1 stuEndTime;      
    char szStorageGroupName[32];  
    EM_RECORD_TYPE emRecordType;  
    NET_STREAM_TYPE emStreamType; 
    BYTE byReserved[504];         
} NET_TIME_RECORDBACKUP_TASK;
typedef struct tagNET_RECORDBACKUP_PROCESSTIME
{
    NET_TIME_EX1 stuStartTime; 
    NET_TIME_EX1 stuEndTime;   
    BYTE bReserved[64];        
} NET_RECORDBACKUP_PROCESSTIME;
typedef struct tagNET_CFG_TIME_RECORDBACKUP_RESTORE_INFO
{
    DWORD dwSize;                                   
    BOOL bEnable;                                   
    int nProcessTimeCount;                          
    NET_RECORDBACKUP_PROCESSTIME stuProcessTime[4]; 
    int nTaskCount;                                 
    NET_TIME_RECORDBACKUP_TASK stuTask[512];        
} NET_CFG_TIME_RECORDBACKUP_RESTORE_INFO;
typedef enum tagNET_EM_DOWNLOAD_SPEED
{
    NET_EM_DOWNLOAD_SPEED_UNKNOWN = -1, 
    NET_EM_DOWNLOAD_SPEED_ZERO = 0,     
    NET_EM_DOWNLOAD_SPEED_1024 = 1024,  
    NET_EM_DOWNLOAD_SPEED_2048 = 2048,  
    NET_EM_DOWNLOAD_SPEED_3072 = 3072,  
    NET_EM_DOWNLOAD_SPEED_4096 = 4096,  
    NET_EM_DOWNLOAD_SPEED_8192 = 8192,  
} NET_EM_DOWNLOAD_SPEED;
typedef struct tagNET_CFG_RECORD_DOWNLOAD_SPEED_ALL_INFO
{
    DWORD dwSize;                  
    NET_EM_DOWNLOAD_SPEED emSpeed; 
} NET_CFG_RECORD_DOWNLOAD_SPEED_ALL_INFO;
typedef enum tagNET_EM_REPORT_POLICY
{
    NET_EM_REPORT_POLICY_UNKNOWN,
    NET_EM_REPORT_POLICY_AUTO,   
    NET_EM_REPORT_POLICY_TIMING, 
} NET_EM_REPORT_POLICY;
typedef struct tagNET_AUTO_REPORT_INFO
{
    int nReportTime;           
    int nReportDistance;       
    int nInflectionPointAngle; 
    int nAccOffReportTime;     
    BYTE byReserved[1024];     
} NET_AUTO_REPORT_INFO;
typedef struct tagNET_CFG_POSITIONREPORTPOLICY_INFO
{
    DWORD dwSize;
    NET_EM_REPORT_POLICY emReportPolicy;    
    NET_AUTO_REPORT_INFO stuAutoReportInfo; 
} NET_CFG_POSITIONREPORTPOLICY_INFO;
typedef struct tagNET_RUNMODE_PARAMS
{
    DWORD dwSize;
    int nMode;
    int nWinConnectBufSize;
    int nWinSocketRcvBuf;
} NET_RUNMODE_PARAMS;
typedef struct tagNET_CFG_ARMSCHEDULE_INFO
{
    DWORD dwSize;
    BOOL bEnable;                                                 
    DH_TSECT stuTimeSection[DH_N_SCHEDULE_TSECT][DH_N_REC_TSECT]; 
} NET_CFG_ARMSCHEDULE_INFO;
#define MAX_CID_NUM 100   
#define MAX_FTCID_NUM 100 
#define MAX_TEL_NUM 2     
typedef enum tagEM_CID_REPORT_PROTOCOL_TYPE
{
    EM_CID_REPORT_PROTOCOL_TYPE_UNKNOWN, 
    EM_CID_REPORT_PROTOCOL_TYPE_CID,     
    EM_CID_REPORT_PROTOCOL_TYPE_FTCID,   
} EM_CID_REPORT_PROTOCOL_TYPE;
typedef enum tagEM_CID_EVENT_CODE
{
    EM_CID_EVENT_CODE_UNKNOWN = -1,                   
    EM_CID_EVENT_CODE_DEFENCE_GENERAL_ALARM,          
    EM_CID_EVENT_CODE_DEFENCE_PREVENT_MOVE_ALARM,     
    EM_CID_EVENT_CODE_DEFENCE_FAULT_ALARM,            
    EM_CID_EVENT_CODE_DEFENCE_BYPASS,                 
    EM_CID_EVENT_CODE_RAPID_ARM,                      
    EM_CID_EVENT_CODE_LOCK_ARM_DISARM,                
    EM_CID_EVENT_CODE_REMOTE_ARM_DISARM,              
    EM_CID_EVENT_CODE_TIME_ARM_DISARM,                
    EM_CID_EVENT_CODE_TELEOPERATION_ARM_DISARM,       
    EM_CID_EVENT_CODE_USER_ARM_DISARM,                
    EM_CID_EVENT_CODE_PART_ARM_DISARM,                
    EM_CID_EVENT_CODE_HOST_PREVENT_MOVE,              
    EM_CID_EVENT_CODE_HOST_POWER_FAULT,               
    EM_CID_EVENT_CODE_BATTERY_LOW,                    
    EM_CID_EVENT_CODE_BATTERY_FAULT,                  
    EM_CID_EVENT_CODE_TELEPHONE_DISCONNECTION,        
    EM_CID_EVENT_CODE_GSM_SIGNAl_BAD,                 
    EM_CID_EVENT_CODE_ALARM_PREVENT_MOVE,             
    EM_CID_EVENT_CODE_MODULE_COMMUNICATION_FAULT,     
    EM_CID_EVENT_CODE_SYSTEM_TIME_ABNORMAl,           
    EM_CID_EVENT_CODE_SIM_CAR_FAULT,                  
    EM_CID_EVENT_CODE_NETWORK_COMMUNICATION_FAULT,    
    EM_CID_EVENT_CODE_FIRE_ALARM,                     
    EM_CID_EVENT_CODE_ROBBER_ALARM,                   
    EM_CID_EVENT_CODE_URGENT_MEDICAL_ALARM,           
    EM_CID_EVENT_CODE_DURESS_ALARM,                   
    EM_CID_EVENT_CODE_PANIC_ALARM,                    
    EM_CID_EVENT_CODE_PERIOD_TEST_REPORT,             
    EM_CID_EVENT_CODE_MANUAL_TEST_REPORT,             
    EM_CID_EVENT_CODE_CLEAR_ALARM_CACHE,              
    EM_CID_EVENT_CODE_ALARM_CANCEL,                   
    EM_CID_EVENT_CODE_EMERGENCY_ALARM,                
    EM_CID_EVENT_CODE_OUTSIDE_ZONE_ALARM,             
    EM_CID_EVENT_CODE_INSIDE_ZONE_ALARM,              
    EM_CID_EVENT_CODE_24H_ZONE_ALARM,                 
    EM_CID_EVENT_CODE_DELAY_ZONE_ALARM,               
    EM_CID_EVENT_CODE_INTIME_DOUBLEMETHOD_ZONE_ALARM, 
    EM_CID_EVENT_CODE_24H_URGENCYBUTTON_ZONE_ALARM,   
    EM_CID_EVENT_CODE_24H_FIRE_ZONE_ALARM,            
    EM_CID_EVENT_CODE_24H_ROBBERY_ZONE_ALARM,         
    EM_CID_EVENT_CODE_24H_SILENT_ZONE_ALARM,          
    EM_CID_EVENT_CODE_24H_SOUND_ZONE_ALARM,           
    EM_CID_EVENT_CODE_24H_AUXILIARY_ZONE_ALARM,       
    EM_CID_EVENT_CODE_24H_VIBRATION_ZONE_ALARM,       
    EM_CID_EVENT_CODE_TIMEOUT_ZONE_ALARM,             
    EM_CID_EVENT_CODE_FOLLOW_ZONE_ALARM,              
    EM_CID_EVENT_CODE_EXMODULE_FAULT,                 
    EM_CID_EVENT_CODE_EXMODULE_DC_LOSS,               
    EM_CID_EVENT_CODE_EXMODULE_LOW_BATTERY,           
    EM_CID_EVENT_CODE_EXMODULE_TAMPER,                
    EM_CID_EVENT_CODE_EXMODULE_AC_LOSS,               
    EM_CID_EVENT_CODE_PRINTER_FAILURE,                
    EM_CID_EVENT_CODE_GSM_FAULT,                      
    EM_CID_EVENT_CODE_ARMED_STAY,                     
    EM_CID_EVENT_CODE_AUTO_ARM_FAILED,                
    EM_CID_EVENT_CODE_SYSTEM_TROUBLE_PRESENT,         
    EM_CID_EVENT_CODE_PROGRAM_MODE_ENTRY,             
    EM_CID_EVENT_CODE_PROGRAM_MODE_EXIT,              
    EM_CID_EVENT_CODE_PANEL_PROGRAMMING_CHANGED,      
    EM_CID_EVENT_CODE_KEYPAD_TAMPER_ALARM,            
    EM_CID_EVENT_CODE_IP_CONFLICT,                    
} EM_CID_EVENT_CODE;
typedef struct tagNET_CFG_CID_REPORT_CID_INFO
{
    int nTelNum;                   
    int nTel[MAX_TEL_NUM];         
    EM_CID_EVENT_CODE emEventCode; 
    BOOL bEventRestore;            
    char szContactId[4];           
    BYTE bReserved[256];           
} NET_CFG_CID_REPORT_CID_INFO;
typedef enum tagEM_FTCID_EVENT_CODE
{
    EM_FTCID_EVENT_CODE_UNKNOWN = -1,                   
    EM_FTCID_EVENT_CODE_DEFENCE_ALARM = 0,              
    EM_FTCID_EVENT_CODE_DEFENCE_ALARM_RESTORE = 16,     
    EM_FTCID_EVENT_CODE_DEFENCE_BYPASS = 32,            
    EM_FTCID_EVENT_CODE_DEFENCE_BYPASS_RESTORE = 48,    
    EM_FTCID_EVENT_CODE_ARM = 64,                       
    EM_FTCID_EVENT_CODE_DISARM = 65,                    
    EM_FTCID_EVENT_CODE_ALARM_CANCEL = 66,              
    EM_FTCID_EVENT_CODE_PERIOD_TEST_REPORT = 67,        
    EM_FTCID_EVENT_CODE_MANUAL_TEST_REPORT = 68,        
    EM_FTCID_EVENT_CODE_HOST_POWER_FAULT = 69,          
    EM_FTCID_EVENT_CODE_HOST_POWER_FAULT_RESTORE = 70,  
    EM_FTCID_EVENT_CODE_BATTERY_LOW = 71,               
    EM_FTCID_EVENT_CODE_BATTERY_LOW_RESTORE = 72,       
    EM_FTCID_EVENT_CODE_SOFT_KEYBOARD_REPORT_CODE = 73, 
} EM_FTCID_EVENT_CODE;
typedef struct tagNET_CFG_CID_REPORT_FTCID_INFO
{
    int nTelNum;                     
    int nTel[MAX_TEL_NUM];           
    EM_FTCID_EVENT_CODE emEventCode; 
    int nDefenceChannel;             
    char szContactId[3];             
    BYTE bReserved[257];             
} NET_CFG_CID_REPORT_FTCID_INFO;
typedef struct tagNET_CFG_CID_REPORT_INFO
{
    DWORD dwSize;                                          
    EM_CID_REPORT_PROTOCOL_TYPE emProtocol;                
    int nCIDNum;                                           
    NET_CFG_CID_REPORT_CID_INFO stuCID[MAX_CID_NUM];       
    int nFTCIDNum;                                         
    NET_CFG_CID_REPORT_FTCID_INFO stuFTCID[MAX_FTCID_NUM]; 
} NET_CFG_CID_REPORT_INFO;
typedef struct tagNET_CFG_KBUSER_SERVER
{
    int nUserCode;       
    char szPasswd[7];    
    BYTE bReserved[129]; 
} NET_CFG_KBUSER_SERVER;
#define MAX_KBUSER_SERVER_NUM 100
typedef struct tagNET_CFG_KBUSER_PASSWORD
{
    DWORD dwSize;                                            
    int nServerNum;                                          
    NET_CFG_KBUSER_SERVER stuServers[MAX_KBUSER_SERVER_NUM]; 
} NET_CFG_KBUSER_PASSWORD;
typedef enum tagEM_VIDEODIAGNOSIS_PROJECT_TASK_TYPE
{
    EM_VIDEODIAGNOSIS_PROJECT_TASK_TYPE_UNKNOWN,        
    EM_VIDEODIAGNOSIS_PROJECT_TASK_TYPE_BY_TIMESECTION, 
    EM_VIDEODIAGNOSIS_PROJECT_TASK_TYPE_BY_CHANNELNUM,  
} EM_VIDEODIAGNOSIS_PROJECT_TASK_TYPE;
typedef struct tagNET_PROJECT_TASK
{
    BOOL bEnable;                                        
    char szTaskName[MAX_PATH];                           
    DH_TSECT stuTimeSection[DH_N_WEEKS][DH_N_REC_TSECT]; 
    BOOL bIsCycle;                                       
    EM_VIDEODIAGNOSIS_PROJECT_TASK_TYPE emTaskType;      
    BOOL bIsRepeat;                                      
    int nCycleInterval;                                  
    BYTE byReserved[500];                                
} NET_PROJECT_TASK;
typedef struct tagNET_VIDEODIAGNOSIS_PROJECT_INFO
{
    DWORD dwSize;
    char szProjectName[MAX_PATH];      
    int nTotalTaskNum;                 
    int nReturnTaskNum;                
    NET_PROJECT_TASK* pstProjectTasks; 
} NET_VIDEODIAGNOSIS_PROJECT_INFO;
typedef struct tagNET_PROJECT_TASK_INFO
{
    BOOL bEnable;                   
    char szTaskName[260];           
    DH_TSECT stuTimeSection[32][6]; 
    BOOL bIsCycle;                  
    BYTE byReserved[512];           
} NET_PROJECT_TASK_INFO;
typedef struct tagNET_CFG_VIDEODIAGNOSIS_PROJECT_MONTH_INFO
{
    DWORD dwSize;                           
    char szProjectName[260];                
    int nTotalTaskNum;                      
    int nReturnTaskNum;                     
    NET_PROJECT_TASK_INFO* pstProjectTasks; 
} NET_CFG_VIDEODIAGNOSIS_PROJECT_MONTH_INFO;
typedef struct tagNET_CFG_GPSSTARNUM_OSD_INFO
{
    DWORD dwSize;
    BOOL bBDOSDEnable;  
    BOOL bGPSOSDEnable; 
} NET_CFG_GPSSTARNUM_OSD_INFO;
typedef struct tagNET_OSD_PICTURE_TITLE
{
    DWORD dwSize;
    NET_EM_OSD_BLEND_TYPE emOsdBlendType; 
    BOOL bEncodeBlend;                    
    NET_COLOR_RGBA stuFrontColor;         
    NET_COLOR_RGBA stuBackColor;          
    NET_RECT stuRect;                     
    char szName[DH_COMMON_STRING_64];     
    int nWidth;                           
    int nHeight;                          
} NET_OSD_PICTURE_TITLE;
typedef struct tagNET_OSD_CFG_PTZ_PRESET
{
    DWORD dwSize;
    int nDisplayTime;             
    BOOL bEncodeBlend;            
    BOOL bPreviewBlend;           
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
} NET_OSD_CFG_PTZ_PRESET;
typedef struct tagNET_OSD_CFG_PTZ_PATTERN
{
    DWORD dwSize;
    int nDisplayTime;             
    BOOL bEncodeBlend;            
    BOOL bPreviewBlend;           
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
} NET_OSD_CFG_PTZ_PATTERN;
typedef struct tagNET_OSD_CFG_PTZ_RS485_DETECT
{
    DWORD dwSize;
    int nDisplayTime;             
    BOOL bEncodeBlend;            
    BOOL bPreviewBlend;           
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
} NET_OSD_CFG_PTZ_RS485_DETECT;
typedef struct tagNET_OSD_CFG_PTZ_COORDINATES
{
    DWORD dwSize;
    int nDisplayTime;             
    BOOL bEncodeBlend;            
    BOOL bPreviewBlend;           
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
} NET_OSD_CFG_PTZ_COORDINATES;
typedef struct tagNET_OSD_CFG_PTZ_DIRECTION
{
    DWORD dwSize;
    int nDisplayTime;             
    BOOL bEncodeBlend;            
    BOOL bPreviewBlend;           
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
} NET_OSD_CFG_PTZ_DIRECTION;
typedef enum tagEM_TEMPERATURE_UNIT_EX
{
    EM_TEMPERATURE_EX_UNKNOWN,    
    EM_TEMPERATURE_EX_CENTIGRADE, 
    EM_TEMPERATURE_EX_FAHRENHEIT, 
    EM_TEMPERATURE_EX_KELVIN,     
} EM_TEMPERATURE_UNIT_EX;
typedef struct tagNET_OSD_CFG_TEMPERATURE
{
    DWORD dwSize;
    int nDisplayTime;                         
    BOOL bEncodeBlend;                        
    BOOL bPreviewBlend;                       
    NET_COLOR_RGBA stuFrontColor;             
    NET_COLOR_RGBA stuBackColor;              
    NET_RECT stuRect;                         
    EM_TEMPERATURE_UNIT_EX emTemperatureType; 
} NET_OSD_CFG_TEMPERATURE;
typedef enum tagEM_TEMPERATURE_STATE
{
    EM_TEMPERATURE_STATE_UNKNOWN, 
    EM_TEMPERATURE_STATE_LOW,     
    EM_TEMPERATURE_STATE_NORMAL,  
    EM_TEMPERATURE_STATE_HIGH,    
} EM_TEMPERATURE_STATE;
typedef struct tagALARM_ANATOMY_TEMPDETECT_TO_PHONE_INFO
{
    int nChannelID;      
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    char szObjPath[256];               
    char szVisSceneImagePath[256];     
    float fHighTemp;                   
    EM_TEMPERATURE_STATE emTempType;   
    EM_TEMPERATURE_UNIT_EX emTempUnit; 
    BYTE byReserved[1020];             
} ALARM_ANATOMY_TEMPDETECT_TO_PHONE_INFO;
typedef struct tagALARM_CHANNEL_CAPS_CHANGE_INFO
{
    UINT nChannelID;     
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    UINT nOldCapsCnt;       
    UINT nNewCapsCnt;       
    char szOldCaps[16][64]; 
    char szNewCaps[16][64]; 
    char szReserved[1024];  
} ALARM_CHANNEL_CAPS_CHANGE_INFO;
typedef enum tagEM_RAIN_FALL_STATUS
{
    EM_RAIN_FALL_STATUS_UNKNOWN, 
    EM_RAIN_FALL_STATUS_NORMAL,  
    EM_RAIN_FALL_STATUS_HIGH,    
} EM_RAIN_FALL_STATUS;
typedef struct tagALARM_RAIN_FALL_MSG_INFO
{
    int nChannelID;                  
    int nAction;                     
    double dbPTS;                    
    char szName[128];                
    NET_TIME_EX stuTime;             
    EM_SCENE_CLASS_TYPE emClassType; 
    UINT nEventID;                   
    EM_EVENT_TYPE emEventType;    
    float fRainLevel;             
    EM_RAIN_FALL_STATUS emStatus; 
    char szReserved[1024];        
} ALARM_RAIN_FALL_MSG_INFO;
typedef struct tagALARM_VEHICLE_DETENTION_INFO
{
    int nChannelID;      
    int nAction;         
    double dbPTS;        
    NET_TIME_EX stuTime; 
    int nEventID;        
    NET_TIME stuDetentionStartTime; 
    char szPlateNumber[128];        
    char szReserved[1024];          
} ALARM_VEHICLE_DETENTION_INFO;
typedef struct tagALARM_ANIMAL_DETECTION_INFO
{
    int nChannelID;                  
    int nAction;                     
    double dbPTS;                    
    char szName[128];                
    NET_TIME_EX stuTime;             
    EM_SCENE_CLASS_TYPE emClassType; 
    UINT nEventID;                   
    UINT nRuleID;                                       
    UINT nSequence;                                     
    NET_ANIMAL_SCENE_IMAGE_INFO stuSceneImage;          
    NET_ANIMAL_OBJECTS_STATISTICS stuObjectsStatistics; 
    EM_DETECTION_SCENE_TYPE emDetectionSceneType;       
    int nObjectListCount;                               
    NET_ANIMAL_OBJECT_LIST_INFO stuObjectListInfo[64];  
    char szReserved[1024];                              
} ALARM_ANIMAL_DETECTION_INFO;
typedef enum tagEM_RESULT
{
    EM_RESULT_UNKNOWN = -1,  
    EM_RESULT_ALL_NORMAL,    
    EM_RESULT_CORE_NORMAL,   
    EM_RESULT_CORE_ABNORMAL, 
} EM_RESULT;
typedef enum tagEM_INFRARED_ERROR_CODE
{
    EM_INFRARED_ERROR_CODE_UNKNOWN = -1,        
    EM_INFRARED_ERROR_CODE_ALL_INFRARED_NORMAL, 
    EM_INFRARED_ERROR_CODE_NOCORE_ABNORMAL,     
    EM_INFRARED_ERROR_CODE_CORE_ABNORMAL,       
} EM_INFRARED_ERROR_CODE;
typedef struct tagNET_INFRARED
{
    EM_INFRARED_ERROR_CODE emInfraredErrorCode; 
    UINT nFaultNumber;                          
    UINT nFaultNoList[32];                      
    char szReserved[512];                       
} NET_INFRARED;
typedef enum tagEM_FIRMWARE_ERROR_CODE
{
    EM_FIRMWARE_ERROR_CODE_UNKNOWN = -1, 
    EM_FIRMWARE_ERROR_CODE_ADAPTATION,   
    EM_FIRMWARE_ERROR_CODE_COMPATIBLE,   
    EM_FIRMWARE_ERROR_CODE_NOCOMPATIBLE, 
} EM_FIRMWARE_ERROR_CODE;
typedef struct tagNET_FIRMWARE
{
    EM_FIRMWARE_ERROR_CODE emFirmwareErrorCode; 
    char szReserved[512];                       
} NET_FIRMWARE;
typedef enum tagEM_MOTOR_ERROR_CODE
{
    EM_MOTOR_ERROR_CODE_UNKNOWN = -1,    
    EM_MOTOR_ERROR_CODE_NORMAL,          
    EM_MOTOR_ERROR_CODE_UVW_LACK,        
    EM_MOTOR_ERROR_CODE_AB_LACK,         
    EM_MOTOR_ERROR_CODE_Z_LACK,          
    EM_MOTOR_ERROR_HALL_SENSOR_ABNORMAL, 
    EM_MOTOR_ERROR_CODE_ZERO,            
    EM_MOTOR_ERROR_CODE_ROTATION,        
} EM_MOTOR_ERROR_CODE;
typedef struct tagNET_MOTOR
{
    EM_MOTOR_ERROR_CODE emMotorErrorCode; 
    char szReserved[512];                 
} NET_MOTOR;
typedef struct tagALARM_ASG_SELFCHECK_INFO
{
    int nChannelID;           
    int nAction;              
    NET_TIME_EX stuTime;      
    EM_RESULT emResult;       
    NET_INFRARED stuInfrared; 
    NET_FIRMWARE stuFirmWare; 
    NET_MOTOR stuMotor;       
    char szReserved[1024];    
} ALARM_ASG_SELFCHECK_INFO;
typedef enum tagEM_GPS_CONTROLLED_TYPE
{
    EM_GPS_CONTROLLED_TYPE_UNKNOWN,      
    EM_GPS_CONTROLLED_TYPE_FOCALCAR,     
    EM_GPS_CONTROLLED_TYPE_GUARANTEECAR, 
    EM_GPS_CONTROLLED_TYPE_FOLLOWCAR,    
    EM_GPS_CONTROLLED_TYPE_OTHER,        
} EM_GPS_CONTROLLED_TYPE;
typedef struct tagALARM_GPS_REPORTING_PLATFORM_INFO
{
    int nChannelID;                          
    int nAction;                             
    double dbPTS;                            
    UINT nEventID;                           
    NET_TIME_EX stuUTC;                      
    NET_GPS_STATUS_INFO stuGPSStatus;        
    EM_GPS_CONTROLLED_TYPE emControlledType; 
    char szPlateNumber[64];                  
    char szReserved[1024];                   
} ALARM_GPS_REPORTING_PLATFORM;
typedef enum tagEM_HOSPITAL_ALARM_TYPE
{
    EM_HOSPITAL_ALARM_TYPE_UNKNOWN,                   
    EM_HOSPITAL_ALARM_TYPE_EMERGENCY,                 
    EM_HOSPITAL_ALARM_TYPE_NURSING,                   
    EM_HOSPITAL_ALARM_TYPE_HOSTING,                   
    EM_HOSPITAL_ALARM_TYPE_ABNORMAL_BODY_TEMPERATURE, 
    EM_HOSPITAL_ALARM_TYPE_DRESSING_CHANGE_REQUEST,   
    EM_HOSPITAL_ALARM_TYPE_REQUEST_SUPPORT,           
    EM_HOSPITAL_ALARM_TYPE_NURSING_REQUEST,           
    EM_HOSPITAL_ALARM_TYPE_HANDLE_DISCONNECTED_ALARM, 
    EM_HOSPITAL_ALARM_TYPE_DISINFECT_CLEAN_COMPLETE,  
} EM_HOSPITAL_ALARM_TYPE;
typedef struct tagALARM_HOSPITAL_ALARM_INFO
{
    int nChannelID;                
    int nAction;                   
    NET_TIME_EX stuTime;           
    EM_HOSPITAL_ALARM_TYPE emType; 
    char szRoomNumber[16];         
    char szBedNumber[8];           
    char szDestPhone[16];          
    char szSrcPhone[16];           
    char szDestDevCode[64];        
    char szSrcDevCode[64];         
    UINT nUniqueID;                
    NET_TIME_EX stuUTC;            
    char szUUID[64];               
    char szReserved[920];          
} ALARM_HOSPITAL_ALARM_INFO;
typedef struct tagALARM_CUTLINE
{
    int nChannelID;       
    int nAction;          
    double dbPTS;         
    char szName[128];     
    UINT nEventID;        
    NET_TIME_EX UTC;      
    BYTE byReserved[512]; 
} ALARM_CUTLINE;
typedef struct tagALARM_BLIND_SPOT_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    double dbPTS;     
    char szName[128]; 
    UINT nEventID;    
    NET_TIME_EX UTC;  
    UINT nAlarmLevel;                                       
    int nObjectNum;                                         
    NET_BLIND_SPOT_DETECTION_OBJECT_INFO stuObjectInfo[32]; 
    BYTE byReserved[512];                                   
} ALARM_BLIND_SPOT_DETECTION_INFO;
typedef enum tagEM_VIDEOTALK_TYPE
{
    EM_VIDEOTALK_TYPE_UNKNOW, 
    EM_VIDEOTALK_TYPE_INVITE, 
    EM_VIDEOTALK_TYPE_RING,   
    EM_VIDEOTALK_TYPE_ANSWER, 
    EM_VIDEOTALK_TYPE_HANGUP, 
} EM_VIDEOTALK_TYPE;
typedef struct tagALARM_VIDEOTALK_INFO
{
    int nChannelID;     
    int nAction;        
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    UINT nLocalID;                     
    UINT nRemoteID;                    
    EM_VIDEOTALK_TYPE emVideoTalkType; 
    NET_TIME_EX stuTime;               
    char szIP[40];                     
    char szReserved[512];              
} ALARM_VIDEOTALK_INFO;
typedef enum tagEM_PREVENT_FREERIDE_EXCEPTION_TYPE
{
    EM_PREVENT_FREERIDE_EXCEPTION_TYPE_UNKNOWN = -1,                    
    EM_PREVENT_FREERIDE_EXCEPTION_TYPE_ABNORMAL_BOARDING,               
    EM_PREVENT_FREERIDE_EXCEPTION_TYPE_ABNORMAL_ALIGHTING,              
    EM_PREVENT_FREERIDE_EXCEPTION_TYPE_ABNORMAL_BOARDING_AND_ALIGHTING, 
} EM_PREVENT_FREERIDE_EXCEPTION_TYPE;
typedef struct tagALARM_PREVENT_FREE_RIDE_INFO
{
    int nChannelID;                                     
    char szDeviceID[20];                                
    char szName[128];                                   
    NET_TIME_EX UTC;                                    
    EM_PREVENT_FREERIDE_EXCEPTION_TYPE emExceptionType; 
    int nGetOnBusPeople;                                
    int nGetOffBusPeople;                               
    int nInputNumber;                                   
    int nOutputNumber;                                  
    BYTE byReserved[512];                               
} ALARM_PREVENT_FREE_RIDE_INFO;
typedef struct tagALARM_WATER_SPEED_DETECTION_INFO
{
    int nChannelID;   
    int nAction;      
    double dbPTS;     
    char szName[128]; 
    UINT nEventID;    
    NET_TIME_EX UTC;  
    EM_EVENT_TYPE emEventType; 
    UINT nPresetID;            
    char szPresetName[64];     
    NET_WATER_SPEED_INFO stuWaterSpeed[50];       
    int nWaterSpeedNum;                           
    EM_WATER_SPEED_STATUS emStatus;               
    NET_INTELLIGENCE_IMAGE_INFO stuOriginalImage; 
    NET_INTELLIGENCE_IMAGE_INFO stuSceneImage;    
    float fValue;                                 
    float fSecSpeedValue;                         
    BYTE byReserved[1016];                        
} ALARM_WATER_SPEED_DETECTION_INFO;
typedef struct tagALARM_HUMIDITY_ALARM_INFO
{
    int nChannelID;   
    int nAction;      
    double dbPTS;     
    char szName[128]; 
    UINT nEventID;    
    NET_TIME_EX UTC;  
    float fCurrentValue;              
    float fLimitValue;                
    NET_GPS_STATUS_INFO stuGPSStatus; 
    char byReserved[1024];            
} ALARM_HUMIDITY_ALARM_INFO;
typedef struct tagNET_VEDIO_WIDGET_COVER
{
    BOOL bPreviewBlend;           
    BOOL bEncodeBlend;            
    BOOL bEncodeBlendExtra1;      
    BOOL bEncodeBlendExtra2;      
    BOOL bEncodeBlendExtra3;      
    BOOL bEncodeBlendSnapshot;    
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
    BYTE byReserver[128];         
} NET_VEDIO_WIDGET_COVER;
typedef struct tagNET_OSD_CFG_COVERS
{
    DWORD dwSize;
    int nCoverCount;                      
    NET_VEDIO_WIDGET_COVER stuCovers[16]; 
} NET_OSD_CFG_COVERS;
typedef struct tagNET_USER_DEF_TITLE_INFO
{
    char szText[CUSTOM_TITLE_LEN];       
    BOOL bEncodeBlend;                   
    BOOL bPreviewBlend;                  
    NET_RECT stuRect;                    
    NET_COLOR_RGBA stuFrontColor;        
    NET_COLOR_RGBA stuBackColor;         
    EM_TITLE_TEXT_ALIGNTYPE emTextAlign; 
    BYTE byReserved[516];                
} NET_USER_DEF_TITLE_INFO;
typedef struct tagNET_OSD_USER_DEF_TITLE
{
    DWORD dwSize;
    int nUserDefTitleNum;                        
    NET_USER_DEF_TITLE_INFO stuUserDefTitle[16]; 
} NET_OSD_USER_DEF_TITLE;
typedef struct tagNET_OSD_CUSTOM_GENERAL_INFO
{
    BOOL bEnable;          
    BYTE byReserved[2044]; 
} NET_OSD_CUSTOM_GENERAL_INFO;
typedef struct tagNET_CFG_SNAP_OSD_WITH_CLASS
{
    int nGeneralInfoNum;                           
    NET_OSD_CUSTOM_GENERAL_INFO stGeneralInfos[8]; 
    BYTE byReserved[2048];                         
} NET_CFG_SNAP_OSD_WITH_CLASS;
typedef struct tagNET_CFG_SNAP_OSD_INFO
{
    int nClassNum;                                  
    NET_CFG_SNAP_OSD_WITH_CLASS stuOSDWithClass[8]; 
    BYTE byReserved[2048];                          
} NET_CFG_SNAP_OSD_INFO;
typedef struct tagNET_CFG_SNAP_OSD
{
    DWORD dwSize;                            
    int nSnapOSDNum;                         
    NET_CFG_SNAP_OSD_INFO stuSnapOSDInfo[8]; 
} NET_CFG_SNAP_OSD;
typedef enum tagEM_SNAP_TYPE
{
    EM_SNAP_TYPE_UNKNOWN,               
    EM_SNAP_TYPE_PLATE,                 
    EM_SNAP_TYPE_DRIVER_FACE,           
    EM_SNAP_TYPE_ASSISTANT_DRIVER_FACE, 
    EM_SNAP_TYPE_VEHICLE_TAIL,          
    EM_SNAP_TYPE_VEHICLE_BODY,          
    EM_SNAP_TYPE_FACE,                  
    EM_SNAP_TYPE_BODY,                  
    EM_SNAP_TYPE_BINARIZED_PLATE,       
    EM_SNAP_TYPE_NON_MOTOR_FACE,        
    EM_SNAP_TYPE_NON_MOTOR_BODY,        
    EM_SNAP_TYPE_SCENE_IMAGE,           
    EM_SNAP_TYPE_HUMAN_SCENE_IMAGE,     
    EM_SNAP_TYPE_VEHICLE_SCENE_IMAGE,   
    EM_SNAP_TYPE_NON_MOTOR_SCENE_IMAGE, 
} EM_SNAP_TYPE;
typedef struct tagNET_CFG_OBJECT_DETECT_SNAP_SHOT_INFO
{
    EM_SNAP_TYPE emSnapTypeEnable[32]; 
    int nSnapTypeEnableNum;            
    int nUploadVehicleTypeNum;         
    int nUploadVehicleType[255];       
    char szReserved[2044];             
} NET_CFG_OBJECT_DETECT_SNAP_SHOT_INFO;
typedef struct tagNET_CFG_OBJECT_DETECT_SNAP_SHOT
{
    DWORD dwSize;                                                       
    int nObjectDetectSnapshotNum;                                       
    NET_CFG_OBJECT_DETECT_SNAP_SHOT_INFO* pstuObjectDetectSnapshotInfo; 
    int nRetObjectDetectSnapshotNum;                                    
} NET_CFG_OBJECT_DETECT_SNAP_SHOT;
typedef struct tagNET_CFG_TIMING_SNAP
{
    BOOL bEnable;             
    UINT nTimingSnapInterval; 
    UINT nTimeSectionID;      
    char szReserved[256];     
} NET_CFG_TIMING_SNAP;
typedef struct tagNET_CFG_SNAP_FPS
{
    DWORD dwSize;                      
    BOOL bIsGlobal;                    
    UINT nManulSnapNum;                
    UINT nManulSnapInterval;           
    NET_CFG_TIMING_SNAP stuTimingSnap; 
} NET_CFG_SNAP_FPS;
typedef struct tagNET_CFG_STREAM_LOCK_INFO
{
    DWORD dwSize;               
    BOOL bMonitorLock;          
    BOOL bPlayBackLock;         
    char szLockReasonNote[256]; 
    BOOL bGlobalLock;           
} NET_CFG_STREAM_LOCK_INFO;
typedef struct tagNET_CFG_CAMERA_STREAM_LOCK_INFO
{
    DWORD dwSize;               
    BOOL bMonitorLock;          
    BOOL bPlayBackLock;         
    char szLockReasonNote[256]; 
} NET_CFG_CAMERA_STREAM_LOCK_INFO;
typedef struct tagNET_EAR_DETECTION_PARAM
{
    int nStepFrequency;  
    int nFrequency;      
    int nBandwidth;      
    UINT nSensitivity;   
    char szReserved[32]; 
} NET_EAR_DETECTION_PARAM;
typedef struct tagNET_CFG_EAR_DETECTION_CONFIG_INFO
{
    DWORD dwSize;                                  
    UINT nAntiInterference;                        
    UINT nEarlyWarning;                            
    int nDetectionParamCount;                      
    NET_EAR_DETECTION_PARAM stuDetectionParam[64]; 
} NET_CFG_EAR_DETECTION_CONFIG_INFO;
typedef struct tagNET_CFG_SOUND_CONFIG_INFO
{
    DWORD dwSize; 
    int nTone;    
    UINT nVolume; 
} NET_CFG_SOUND_CONFIG_INFO;
typedef struct tagNET_CFG_PASSENGER_FLOW_CONFIG_INFO
{
    DWORD dwSize;                 
    UINT nUpPassengerFlowLimit;   
    UINT nDownPassengerFlowLimit; 
} NET_CFG_PASSENGER_FLOW_CONFIG_INFO;
typedef struct tagNET_CFG_TRAFFIC_LAMP_CONFIG_INFO
{
    DWORD dwSize;       
    UINT nNotifyPeriod; 
} NET_CFG_TRAFFIC_LAMP_CONFIG_INFO;
typedef struct tagNET_CFG_LOCAL_INFO
{
    DWORD dwSize;           
    char szShortNumber[16]; 
    BOOL bEnableSection;    
    BOOL bEnableBuilding;   
    BOOL bEnableUnit;       
    int nBuildingNumBit;    
} NET_CFG_LOCAL_INFO;
typedef struct tagNET_CFG_DISABLE_BEEP_LINKAGE_INFO
{
    DWORD dwSize;    
    BOOL bEnable;    
    char szName[32]; 
} NET_CFG_DISABLE_BEEP_LINKAGE_INFO;
typedef struct tagNET_PREVENTION_OF_ARMING_INFO
{
    BOOL bIntrusionDetectorActivated;     
    BOOL bHoldupDeviceActivated;          
    BOOL bMovementDetectorMasked;         
    BOOL bMovementDetectorRangeReduction; 
    BOOL bIntrusionDetectorFault;         
    BOOL bTamperCondition;                
    BOOL bInterconnectionFaults;          
    BOOL bPrimePowerSourceFault;          
    BOOL bAlternativePowerSourceFault;    
    BOOL bAlarmTransmissionSystemFault;   
    BOOL bWarningDeviceFault;             
    char szReserved[252];                 
} NET_PREVENTION_OF_ARMING_INFO;
typedef struct tagNET_SYSTEM_STATUS_CHECK_INFO
{
    BOOL bEnable;                                        
    NET_PREVENTION_OF_ARMING_INFO stuPreventionOfArming; 
    char szReserved[512];                                
} NET_SYSTEM_STATUS_CHECK_INFO;
typedef struct tagNET_AREAS_INFO
{
    char szMode[32];     
    char szReserved[32]; 
} NET_AREAS_INFO;
typedef struct tagNET_CFG_AREA_ARM_MODE_INFO
{
    DWORD dwSize;                                      
    int nAreasNum;                                     
    NET_AREAS_INFO stuAreas[64];                       
    NET_SYSTEM_STATUS_CHECK_INFO stuSystemStatusCheck; 
} NET_CFG_AREA_ARM_MODE_INFO;
typedef enum tagEM_VEHICLE_ALARM_TYPE
{
    EM_VEHICLE_ALARM_TYPE_UNKNOWN,                        
    EM_VEHICLE_ALARM_TYPE_DRIVEACTIONANALYSE,             
    EM_VEHICLE_ALARM_TYPE_DRIVEASSISTANTALARM,            
    EM_VEHICLE_ALARM_TYPE_HANDSOFFSTEERINGWHEELDETECTION, 
    EM_VEHICLE_ALARM_TYPE_EMERGENCY,                      
    EM_VEHICLE_ALARM_TYPE_DRIVERDEATAILALARM,             
} EM_VEHICLE_ALARM_TYPE;
typedef enum tagEM_SUB_ALARM_TYPE
{
    EM_SUB_ALARM_TYPE_UNKNOWN,               
    EM_SUB_ALARM_TYPE_FATIGUEALARM,          
    EM_SUB_ALARM_TYPE_DISTRACTALARM,         
    EM_SUB_ALARM_TYPE_CALLINGALARM,          
    EM_SUB_ALARM_TYPE_NODRIVERALARM,         
    EM_SUB_ALARM_TYPE_WEARINGIRALARM,        
    EM_SUB_ALARM_TYPE_SMOKINGALARM,          
    EM_SUB_ALARM_TYPE_CAMOCCLUSIONALARM,     
    EM_SUB_ALARM_TYPE_UNBELTEDALARM,         
    EM_SUB_ALARM_TYPE_IDENTITYALARM,         
    EM_SUB_ALARM_TYPE_DRIVERCHANGEALARM,     
    EM_SUB_ALARM_TYPE_FORWARDCOLLISIONALARM, 
    EM_SUB_ALARM_TYPE_LANEDEPARTUREALARM,    
    EM_SUB_ALARM_TYPE_HEADWAYALARM,          
} EM_SUB_ALARM_TYPE;
typedef struct tagNET_SUB_ALARM_INFO
{
    EM_SUB_ALARM_TYPE emSubAlarmType; 
    int nRecordAheadTimes;            
    int nRecordDelayTimes;            
    char szReserved[124];             
} NET_SUB_ALARM_INFO;
typedef struct tagNET_VEHICLE_ALARM_LINK_INFO
{
    EM_VEHICLE_ALARM_TYPE emAlarmType;      
    int nLinkSnapChannelNum;                
    int nLinkSnapChannelList[32];           
    int nLinkRecordChannelList[32];         
    int nLinkRecordChannelNum;              
    int nRecordAheadTimes;                  
    int nRecordDelayTimes;                  
    int nSubAlarmInfoNum;                   
    NET_SUB_ALARM_INFO stuSubAlarmInfo[32]; 
    char szReserved[512];                   
} NET_VEHICLE_ALARM_LINK_INFO;
typedef struct tagNET_CFG_VEHICLE_ALARM_LINK_PARAM_INFO
{
    DWORD dwSize;                                            
    int nVehicleAlarmLinkNum;                                
    NET_VEHICLE_ALARM_LINK_INFO stuVehicleAlarmLinkInfo[32]; 
} NET_CFG_VEHICLE_ALARM_LINK_PARAM_INFO;
typedef struct tagNET_CFG_MOBILE_PHONE_APPLICATION_INFO
{
    DWORD dwSize;                 
    BOOL bPushNotificationEnable; 
} NET_CFG_MOBILE_PHONE_APPLICATION_INFO;
typedef struct tagNET_CFG_VSP_CGI_INFO
{
    DWORD dwSize;       
    BOOL bServiceStart; 
} NET_CFG_VSP_CGI_INFO;
typedef struct tagNET_CFG_CFG_VSP_NTP_SERVER_INFO
{
    DWORD dwSize;       
    BOOL bServiceStart; 
} NET_CFG_CFG_VSP_NTP_SERVER_INFO;
typedef struct tagNET_CFG_DEVICE_DISCOVERY_INFO
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_DEVICE_DISCOVERY_INFO;
typedef struct tagNET_CFG_LLDP_GLOBAL_INFO
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_LLDP_GLOBAL_INFO;
typedef struct tagNET_CFG_LOGIN_AUTH_CTRL_INFO
{
    DWORD dwSize;      
    int nPriSvrPolicy; 
    int nPriCliPolicy; 
} NET_CFG_LOGIN_AUTH_CTRL_INFO;
typedef struct tagNET_CFG_REMOTE_AUDIO_OUTPUT_VOLUME_INFO
{
    DWORD dwSize;                 
    int nAudioOutputVolumeNum;    
    int nAudioOutputVolume[4096]; 
} NET_CFG_REMOTE_AUDIO_OUTPUT_VOLUME_INFO;
typedef struct tagNET_OSD_FACEFLOW_STAT_INFO
{
    DWORD dwSize;                 
    BOOL bEncodeBlend;            
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
    int nTextAlign;               
    BOOL bShowFaceRecognition;    
    BOOL bShowFaceDetection;      
    BOOL bShowBodyDetection;      
} NET_OSD_FACEFLOWSTAT_INFO;
typedef struct tagNET_WATERMONITOR_OSD_INFO
{
    BOOL bEncodeBlend;            
    int nTextAlign;               
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
    NET_RECT stuRect;             
    BYTE byReserved[1024];        
} NET_WATERMONITOR_OSD_INFO;
typedef struct tagNET_CFG_WATER_MONITOR_TITLE_INFO
{
    DWORD dwSize;
    NET_WATERMONITOR_OSD_INFO stuWaterLevel; 
    NET_WATERMONITOR_OSD_INFO stuFlotage;    
} NET_CFG_WATER_MONITOR_TITLE_INFO;
typedef struct tagNET_CFG_KT_RTSP_FLAG_INFO
{
    DWORD dwSize;
    BOOL bEnable; 
} NET_CFG_KT_RTSP_FLAG_INFO;
typedef struct tagNET_ABORT_VEDIO
{
    char szVedio[100];
} NET_ABORT_VEDIO;
typedef struct tagNET_CFG_RTSP_ABORT_LIST_INFO
{
    DWORD dwSize;
    BYTE byReserved[4];          
    int nMaxListCount;           
    UINT nRetListCount;          
    NET_ABORT_VEDIO* pVedioList; 
    char szMark[32];             
} NET_CFG_RTSP_ABORT_LIST_INFO;
typedef struct tagNET_CFG_FILE_HOLD_DAYS_INFO
{
    DWORD dwSize;
    UINT nDays; 
} NET_CFG_FILE_HOLD_DAYS_INFO;
typedef struct tagNET_CFG_ACCESS_FUNCTION_INFO
{
    DWORD dwSize;
    BOOL bGb28181ClientEnable; 
    BOOL bGb28181ServerEnable; 
    BOOL bONVIFClientEnable;   
    BOOL bONVIFServerEnable;   
    BOOL bRTSPEnable;          
} NET_CFG_ACCESS_FUNCTION_INFO;
typedef enum tagEM_ATTENDANCE_USER_TYPE
{
    EM_ATTENDANCE_USER_TYPE_UNKNOWN = -1, 
    EM_ATTENDANCE_USER_TYPE_NORMAL,       
    EM_ATTENDANCE_USER_TYPE_BLACKLIST,    
} EM_ATTENDANCE_USER_TYPE;
typedef enum tagEM_ATTENDANCE_USER_STATUS
{
    EM_ATTENDANCE_USER_STATUS_UNKNOWN = -1, 
    EM_ATTENDANCE_USER_STATUS_NORMAL,       
    EM_ATTENDANCE_USER_STATUS_FROZEN,       
} EM_ATTENDANCE_USER_STATUS;
typedef struct tagNET_ATTENDANCE_USER_INFO
{
    char szUserID[64];                      
    EM_ATTENDANCE_USER_TYPE emUserType;     
    EM_ATTENDANCE_USER_STATUS emUserStatus; 
    NET_TIME stuUserAttendanceBeginTime;    
    NET_TIME stuUserAttendanceEndTime;      
    BYTE byReserved[80];                    
} NET_ATTENDANCE_USER_INFO;
typedef struct tagNET_CFG_ATTENDANCE_MODEL_INFO
{
    DWORD dwSize;                              
    BOOL bEnable;                              
    NET_TIME stuBeginTime;                     
    NET_TIME stuEndTime;                       
    NET_ATTENDANCE_USER_INFO stuUserInfo[128]; 
    UINT nUserCount;                           
    BYTE byReserved[4];                        
} NET_CFG_ATTENDANCE_MODEL_INFO;
typedef struct tagNET_CFG_EVENT_TITLE
{
    char szText[CFG_MAX_CHANNELNAME_LEN];
    DH_POINT stuPoint;            
    DH_SIZE stuSize;              
    NET_COLOR_RGBA stuFrontColor; 
    NET_COLOR_RGBA stuBackColor;  
} NET_CFG_EVENT_TITLE;
typedef enum tagNET_CFG_ATTACHMENT_TYPE
{
    NET_ATTACHMENT_TYPE_PIC,   
    NET_ATTACHMENT_TYPE_VIDEO, 
    NET_ATTACHMENT_TYPE_NUM,   
} NET_CFG_ATTACHMENT_TYPE;
typedef struct tagNET_CFG_MAIL_DETAIL
{
    NET_CFG_ATTACHMENT_TYPE emAttachType; 
    int nMaxSize;                         
    int nMaxTimeLength;                   
} NET_CFG_MAIL_DETAIL;
typedef struct tagNET_CFG_TIME_SECTION
{
    DWORD dwRecordMask; 
    int nBeginHour;
    int nBeginMin;
    int nBeginSec;
    int nEndHour;
    int nEndMin;
    int nEndSec;
} NET_CFG_TIME_SECTION;
typedef enum tagNET_EM_FILCKERLIGHT_TYPE
{
    NET_EM_WHITELIGHT,   
    NET_EM_REDBLUELIGHT, 
} NET_EM_FILCKERLIGHT_TYPE;
typedef enum tagNET_EM_LIGHTLINK_TYPE
{
    NET_EM_FILCKER,      
    NET_EM_KEEPLIGHTING, 
} NET_EM_LIGHTLINK_TYPE;
typedef struct tagNET_CFG_LIGHTING_LINK_INFO
{
    BOOL bEnable;                                        
    NET_EM_FILCKERLIGHT_TYPE emFilckerLightType;         
    NET_EM_LIGHTLINK_TYPE emLightlinkType;               
    float fFilckerIntevalTime;                           
    int nFilckerTimes;                                   
    UINT nLightDuration;                                 
    UINT nLightBright;                                   
    NET_CFG_TIME_SECTION stuWhiteLightTimeSection[7][6]; 
} NET_CFG_LIGHTING_LINK_INFO;
typedef struct tagNET_CFG_TOURLINK
{
    BOOL bEnable;                             
    DH_SPLIT_MODE emSplitMode;                
    int nChannels[CFG_MAX_VIDEO_CHANNEL_NUM]; 
    int nChannelCount;                        
} NET_CFG_TOURLINK;
typedef enum NET_EM_CFG_ACCESSCONTROLTYPE
{
    NET_EM_CFG_ACCESSCONTROLTYPE_NULL = 0,    
    NET_EM_CFG_ACCESSCONTROLTYPE_AUTO,        
    NET_EM_CFG_ACCESSCONTROLTYPE_OPEN,        
    NET_EM_CFG_ACCESSCONTROLTYPE_CLOSE,       
    NET_EM_CFG_ACCESSCONTROLTYPE_OPENALWAYS,  
    NET_EM_CFG_ACCESSCONTROLTYPE_CLOSEALWAYS, 
} NET_EM_CFG_ACCESSCONTROLTYPE;
typedef enum tagNET_EM_CALLER_TYPE
{
    NET_EM_CALLER_DEVICE = 0, 
} NET_EM_CALLER_TYPE;
typedef enum tagNET_EM_CALLER_PROTOCOL_TYPE
{
    NET_EM_CALLER_PROTOCOL_CELLULAR = 0, 
} NET_EM_CALLER_PROTOCOL_TYPE;
typedef struct tagNET_CFG_TALKBACK_INFO
{
    BOOL bCallEnable;                             
    NET_EM_CALLER_TYPE emCallerType;              
    NET_EM_CALLER_PROTOCOL_TYPE emCallerProtocol; 
} NET_CFG_TALKBACK_INFO;
typedef struct tagNET_CFG_PSTN_ALARM_SERVER
{
    BOOL bNeedReport;                            
    int nServerCount;                            
    BYTE byDestination[CFG_MAX_PSTN_SERVER_NUM]; 
} NET_CFG_PSTN_ALARM_SERVER;
typedef struct tagNET_CFG_VEHICLE_WORKTIMESCHEDULE_INFO
{
    DWORD dwSize;
    BOOL bEnable;                          
    NET_CFG_TIME_SCHEDULE stuWorkSchedule; 
} NET_CFG_VEHICLE_WORKTIMESCHEDULE_INFO;
typedef struct tagNET_CFG_VEHICLE_LOAD_INFO
{
    DWORD dwSize;
    int nLoadNumber; 
} NET_CFG_VEHICLE_LOAD_INFO;
#define MAX_TICKETINFO_NUM 8 
typedef struct tagNET_CFG_TICKET_INFO
{
    BOOL bEnable;           
    char szScreenModel[32]; 
    char szPrintModel[64];  
    unsigned int nFare;     
} NET_CFG_TICKET_INFO;
typedef struct tagNET_CFG_TICKETPRINT_INFO
{
    DWORD dwSize;
    BOOL bEncodeBlend;                                     
    char szRoute[32];                                      
    char szNumber[32];                                     
    unsigned int nNormal;                                  
    unsigned int nDiscount;                                
    unsigned int nSubsidy;                                 
    unsigned int nStatisticsNum;                           
    unsigned int nTicketInfoNum;                           
    NET_CFG_TICKET_INFO stuTicketInfo[MAX_TICKETINFO_NUM]; 
    char szText[256];                                      
} NET_CFG_TICKETPRINT_INFO;
typedef struct tagNET_CFG_VEHICLEAUTOMAIN_INFO
{
    DWORD dwSize;
    int nAutoShutDelay;  
    int nForceShutDelay; 
    int nPercent;        
} NET_CFG_VEHICLEAUTOMAIN_INFO;
typedef struct tagNET_CFG_VEHICLENETSERVER_INFO
{
    DWORD dwSize;
    BOOL bEnable;  
    UINT nUdpPort; 
    UINT nTcpPort; 
} NET_CFG_VEHICLENETSERVER_INFO;
typedef struct tagNET_CFG_IMSIBIND_INFO
{
    DWORD dwSize;
    int nIMSI;          
    char szIMSI[4][32]; 
} NET_CFG_IMSIBIND_INFO;
typedef struct tagNET_CFG_VEHICLE_MAINTAINCE_INFO
{
    DWORD dwSize;
    char szMaintainer[32];   
    char szMaintainerID[32]; 
    char szInfo[256];        
} NET_CFG_VEHICLE_MAINTAINCE_INFO;
typedef struct tagNET_ACCESSCTL_SPECIALDAY_INFO
{
    char szDayName[32];    
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    BYTE byReserved[256];
} NET_ACCESSCTL_SPECIALDAY_INFO;
typedef struct tagNET_CFG_ACCESSCTL_SPECIALDAY_GROUP_INFO
{
    DWORD dwSize;
    BOOL bGroupEnable;                              
    char szGroupName[32];                           
    int nSpeciaday;                                 
    NET_ACCESSCTL_SPECIALDAY_INFO stuSpeciaday[16]; 
} NET_CFG_ACCESSCTL_SPECIALDAY_GROUP_INFO;
typedef struct tagNET_CFG_ACCESSCTL_SPECIALDAYS_SCHEDULE_INFO
{
    DWORD dwSize;
    char szSchduleName[64];     
    BOOL bSchdule;              
    int nGroupNo;               
    int nTimeSection;           
    DH_TSECT stuTimeSection[6]; 
    int nDoorNum;               
    int nDoors[64];             
} NET_CFG_ACCESSCTL_SPECIALDAYS_SCHEDULE_INFO;
typedef struct tagNET_CFG_ACCESSCTL_HOLIDAY_GROUP_INFO
{
    DWORD dwSize;          
    int nHolidayGroupNum;  
    int nHolidayGroup[30]; 
    BOOL bEnable;          
    char szName[32];       
} NET_CFG_ACCESSCTL_HOLIDAY_GROUP_INFO;
typedef struct tagNET_GH_TIMESECTION
{
    BOOL bEnable;              
    int nDoorStatus;           
    char szReversed1[4];       
    NET_TIME_EX1 stuBeginTime; 
    NET_TIME_EX1 stuEndTime;   
} NET_GH_TIMESECTION;
typedef struct tagNET_CFG_ACCESSCTL_HOLIDAY_SCHEDULE_INFO
{
    DWORD dwSize;                            
    int nTimeSection;                        
    NET_GH_TIMESECTION stuGhTimeSections[4]; 
    char szReversed1[4];                     
    BOOL bEnable;                            
    char szName[64];                         
    NET_TIME stuBeginDate;                   
    NET_TIME stuEndDate;                     
} NET_CFG_ACCESSCTL_HOLIDAY_SCHEDULE_INFO;
typedef struct tagNET_CFG_ICBC_DOOR_PARAS_INFO
{
    int nWeekTimeSection;    
    int nInReaderMethod;     
    int nOutReaderMethod;    
    BOOL bOpenOutTimeEnable; 
    int nHolidayGroupIndex;  
    char szRserved[512];     
} NET_CFG_ICBC_DOOR_PARAS_INFO;
typedef struct tagNET_CFG_ICBC_DOOR_PARAS
{
    DWORD dwSize;                                    
    int nICBCDoorNum;                                
    NET_CFG_ICBC_DOOR_PARAS_INFO stuICBCDoorInfo[8]; 
} NET_CFG_ICBC_DOOR_PARAS;
typedef enum tagEM_BANK_WORK_SCENE
{
    EM_BANK_WORK_SCENE_UNKNOWN = -1,  
    EM_BANK_WORK_SCENE_NORMAL,        
    EM_BANK_WORK_SCENE_ADDMONEYROOM,  
    EM_BANK_WORK_SCENE_INTERLOCKLINK, 
} EM_BANK_WORK_SCENE;
typedef struct tagNET_CFG_WORK_SCENE_INFO
{
    DWORD dwSize;                       
    EM_BANK_WORK_SCENE emBankWorkScene; 
} NET_CFG_WORK_SCENE_INFO;
typedef enum tagEM_CUSTOMER_DEV_SETTING_DOOR_METHOD
{
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_UNKNOWN = -1,                      
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_CTID,                              
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_CTID_AND_FACE,                     
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_CTID_OR_FACE,                      
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_WRISTBAND_OR_FACE,                 
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_WRISTBAND_OR_FACE_OR_IDCARD,       
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_CODE1_OR_CODE2,                    
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_WRISTBAND_OR_FACE_OR_CODE2,        
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_FACE_AND_CODE1_OR_CODE2,           
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_FACE_OR_IDCARD_AND_CODE1_OR_CODE2, 
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_FACE_OR_IDCARD_OR_CODE1_OR_CODE2,  
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD_FACE_AND_CODE1_OR_WRISTBAND        
} EM_CUSTOMER_DEV_SETTING_DOOR_METHOD;
typedef struct tagNET_CFG_CUSTOMER_DEV_SETTING_INFO
{
    DWORD dwSize;                                     
    EM_CUSTOMER_DEV_SETTING_DOOR_METHOD emDoorMethod; 
    char szEnckeycipher[1024];                        
} NET_CFG_CUSTOMER_DEV_SETTING_INFO;
typedef enum tagNET_ENUM_USER_TYPE
{
    NET_ENUM_USER_TYPE_UNKNOWN = -1,
    NET_ENUM_USER_TYPE_NORMAL,
    NET_ENUM_USER_TYPE_BLACKLIST,
    NET_ENUM_USER_TYPE_GUEST,
    NET_ENUM_USER_TYPE_PATROL,
    NET_ENUM_USER_TYPE_VIP,
    NET_ENUM_USER_TYPE_HANDICAP,
    NET_ENUM_USER_TYPE_CUSTOM1,
    NET_ENUM_USER_TYPE_CUSTOM2,
} NET_ENUM_USER_TYPE;
typedef struct tagNET_ON_DUTY_USER_INFO
{
    char szUserID[32];             
    NET_ENUM_USER_TYPE emUserType; 
    UINT nUserStatus;              
    BYTE byReserved[128];          
} NET_ON_DUTY_USER_INFO;
typedef struct tagNET_CFG_CUSTOMER_ON_DUTY_MODEL_INFO
{
    DWORD dwSize;                             
    BOOL bEnable;                             
    NET_ON_DUTY_USER_INFO stuOnDutyUser[128]; 
    int nOnDutyUserCnt;                       
} NET_CFG_CUSTOMER_ON_DUTY_MODEL_INFO;
typedef struct tagNET_CFG_CUSTOMER_TEMP_POLICY_INFO
{
    DWORD dwSize;                                 
    int nAdvanceInfoTime;                         
    int nInformTimes;                             
    int nInformInterval;                          
    float fHignTemp;                              
    float fLowTemp;                               
    int nCustomerTimeScheduleCount;               
    NET_TIME_SECTION stuCustomerTimeSchedule[16]; 
    BOOL bEnable;                                 
    char szFirstInfoMessage[256];                 
    char szCommonInfoMessage[256];                
} NET_CFG_CUSTOMER_TEMP_POLICY_INFO;
typedef enum tagEM_USER_PASS_DATA_COUNT_CLEAR_PERIOD
{
    EM_USER_PASS_DATA_COUNT_CLEAR_PERIOD_UNKNOWN, 
    EM_USER_PASS_DATA_COUNT_CLEAR_PERIOD_HOUR,    
    EM_USER_PASS_DATA_COUNT_CLEAR_PERIOD_DAILY,   
} EM_USER_PASS_DATA_COUNT_CLEAR_PERIOD;
typedef struct tagNET_EM_CFG_USER_PASS_DATA_COUNT_CLEAR_INFO
{
    DWORD dwSize;                                  
    BOOL bEnable;                                  
    EM_USER_PASS_DATA_COUNT_CLEAR_PERIOD emPeriod; 
} NET_EM_CFG_USER_PASS_DATA_COUNT_CLEAR_INFO;
typedef struct tagNET_EM_CFG_SAMPO_SERVICE_NAME_INFO
{
    DWORD dwSize;            
    int nParamterCount;      
    char szParamter[6][128]; 
    char szService[6][128];  
    int nServiceCount;       
} NET_EM_CFG_SAMPO_SERVICE_NAME_INFO;
typedef struct tagNET_EM_CFG_USER_PASS_PERMISSION_INFO
{
    DWORD dwSize;                
    BOOL bEnable;                
    int nStudent;                
    int nTeacher;                
    int nSecurity;               
    int nSupportPersonnel;       
    int nOther;                  
    int nFolk;                   
    int nBlockList;              
    int nTmp;                    
    int nTmpPersonnel;           
    int nMaintenanceMan;         
    int nDoctor;                 
    int nMastter;                
    int nUndergraduate;          
    int nSpecialStudent;         
    int nBeOnRegularPayroll;     
    int nUniversityEmployment;   
    int nSpecialPost;            
    int nNormal;                 
    int nSpecial;                
    int nJiangQianwanResident;   
    int nLixinChangchengBieyuan; 
    int nCommunityResident;      
    int nResident;               
    int nTenant;                 
    int nFamilyMembersOfStaff;   
    int nObligate1;              
    int nObligate2;              
    int nObligate3;              
    int nObligate4;              
    int nObligate5;              
    int nObligate6;              
    int nObligate7;              
    int nObligate8;              
    int nObligate9;              
    int nObligate10;             
    int nObligate11;             
    int nObligate12;             
    int nObligate13;             
    int nObligate14;             
} NET_EM_CFG_USER_PASS_PERMISSION_INFO;
typedef struct tagNET_EM_CFG_HOSPITAL_TALK_CONFIG_INFO
{
    DWORD dwSize;              
    char szDepartmentName[20]; 
} NET_EM_CFG_HOSPITAL_TALK_CONFIG_INFO;
typedef struct tagNET_EM_CFG_SECRET_PROJECT_CONFIG_INFO
{
    DWORD dwSize;            
    int nProjectNum;         
    char szProjects[30][64]; 
} NET_EM_CFG_SECRET_PROJECT_CONFIG_INFO;
typedef struct tagNET_CFG_SERIALNOWHITETABLE_INFO
{
    DWORD dwSize;
    int nCount;               
    char szSerialNo[512][48]; 
} NET_CFG_SERIALNOWHITETABLE_INFO;
typedef struct tagNET_CFG_LXSJ_WXJJ_INFO
{
    DWORD dwSize;
    BOOL bEnable;               
    NET_TIME stuStartTime;      
    NET_TIME stuEndTime;        
    char szText[256];           
    char szDisplayContent[256]; 
} NET_CFG_LXSJ_WXJJ_INFO;
typedef enum tagNET_EM_LXSJ_TRANSMODE
{
    NET_EM_LXSJ_TRANSMODE_UNKNOWN = -1, 
    NET_EM_LXSJ_TRANSMODE_TCP,          
    NET_EM_LXSJ_TRANSMODE_UDP           
} NET_EM_LXSJ_TRANSMODE;
typedef enum tagNET_EM_LXSJ_FONTCOLOR
{
    NET_EM_LXSJ_FONTCOLOR_UNKNOWN = -1, 
    NET_EM_LXSJ_FONTCOLOR_R0_G0_B0,     
    NET_EM_LXSJ_FONTCOLOR_R1_G0_B0,     
    NET_EM_LXSJ_FONTCOLOR_R0_G1_B0,     
    NET_EM_LXSJ_FONTCOLOR_R1_G1_B0,     
    NET_EM_LXSJ_FONTCOLOR_R0_G0_B1,     
    NET_EM_LXSJ_FONTCOLOR_R1_G0_B1,     
    NET_EM_LXSJ_FONTCOLOR_R0_G1_B1,     
    NET_EM_LXSJ_FONTCOLOR_R1_G1_B1      
} NET_EM_LXSJ_FONTCOLOR;
typedef struct tagNET_CFG_VSP_LXSJ_NOPLATE
{
    BOOL bEnable;         
    char szText[128];     
    BYTE byReserved[380]; 
} NET_CFG_VSP_LXSJ_NOPLATE;
typedef struct tagNET_CFG_VIOLATIONTYPE_NORMAL
{
    BOOL bEnable;                      
    NET_EM_LXSJ_FONTCOLOR emTextColor; 
    char szText[128];                  
    BYTE byReserved[376];              
} NET_CFG_VIOLATIONTYPE_NORMAL;
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICOVERSPEED;          
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICCROSSLANE;          
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICPARKING;            
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICBACKING;            
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICRETROGRADE;         
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_PARKINGWARNING;            
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICPEDESTRAINPRIORITY; 
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICRUNREDLIGHT;        
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICWRONGROUTE;         
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICJAMFORBIDINTO;      
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICOVERLINE;           
typedef NET_CFG_VIOLATIONTYPE_NORMAL NET_CFG_VIOLATIONTYPE_TRAFFICVEHICLEINROUTE;     
typedef struct tagNET_CFG_VIOLATIONTYPE_TRAFFICJUNCTION
{
    BOOL bEnable;                              
    NET_EM_LXSJ_FONTCOLOR emTrustTextColor;    
    char szTrustText[128];                     
    NET_EM_LXSJ_FONTCOLOR emDisTrustTextColor; 
    char szDisTrustText[128];                  
    BYTE byReserved[244];                      
} NET_CFG_VIOLATIONTYPE_TRAFFICJUNCTION;
typedef struct tagNET_CFG_VSP_LXSJ_VIOLATIONTYPE
{
    NET_CFG_VIOLATIONTYPE_TRAFFICOVERSPEED stuTrafficOverSpeed;                   
    NET_CFG_VIOLATIONTYPE_TRAFFICCROSSLANE stuTrafficCrossLane;                   
    NET_CFG_VIOLATIONTYPE_TRAFFICPARKING stuTrafficParking;                       
    NET_CFG_VIOLATIONTYPE_TRAFFICBACKING stuTrafficBacking;                       
    NET_CFG_VIOLATIONTYPE_TRAFFICRETROGRADE stuTrafficRetrograde;                 
    NET_CFG_VIOLATIONTYPE_PARKINGWARNING stuParkingWarning;                       
    NET_CFG_VIOLATIONTYPE_TRAFFICJUNCTION stuTrafficJunction;                     
    NET_CFG_VIOLATIONTYPE_TRAFFICPEDESTRAINPRIORITY stuTrafficPedestrainPriority; 
    NET_CFG_VIOLATIONTYPE_TRAFFICRUNREDLIGHT stuTrafficRunRedLight;               
    NET_CFG_VIOLATIONTYPE_TRAFFICWRONGROUTE stuTrafficWrongRoute;                 
    NET_CFG_VIOLATIONTYPE_TRAFFICJAMFORBIDINTO stuTrafficJamForbidInto;           
    NET_CFG_VIOLATIONTYPE_TRAFFICOVERLINE stuTrafficOverLine;                     
    NET_CFG_VIOLATIONTYPE_TRAFFICVEHICLEINROUTE stuTrafficVehicleInRoute;         
    BYTE byReserved[13824];                                                       
} NET_CFG_VSP_LXSJ_VIOLATIONTYPE;
typedef enum tagNET_EM_LXSJ_COLORTYPE
{
    NET_EM_LXSJ_COLORTYPE_UNKNOWN = -1,     
    NET_EM_LXSJ_COLORTYPE_SINGLE_COLOR = 1, 
    NET_EM_LXSJ_COLORTYPE_DOUBLE_COLOR = 2, 
    NET_EM_LXSJ_COLORTYPE_THREE_COLOR = 3,  
} NET_EM_LXSJ_COLORTYPE;
typedef enum tagNET_EM_LXSJ_AREATYPE
{
    NET_EM_LXSJ_AREATYPE_UNKNOWN = -1,     
    NET_EM_LXSJ_AREATYPE_STATIC_TYPE = 0,  
    NET_EM_LXSJ_AREATYPE_DYNAMIC_TYPE = 1, 
} NET_EM_LXSJ_AREATYPE;
typedef enum tagNET_EM_LXSJ_DISPLAYTYPE
{
    NET_EM_LXSJ_DISPLAYTYPE_UNKNOWN = -1,   
    NET_EM_LXSJ_DISPLAYTYPE_BACK_TYPE = 0,  
    NET_EM_LXSJ_DISPLAYTYPE_FRONT_TYPE = 1, 
} NET_EM_LXSJ_DISPLAYTYPE;
typedef enum tagNET_EM_LXSJ_SHOWMODE
{
    NET_EM_LXSJ_SHOWMODE_UNKNOWN = -1,              
    NET_EM_LXSJ_SHOWMODE_IMMEDIATELY = 1,           
    NET_EM_LXSJ_SHOWMODE_TO_LEFT = 2,               
    NET_EM_LXSJ_SHOWMODE_TO_TOP = 3,                
    NET_EM_LXSJ_SHOWMODE_TO_RIGHT = 4,              
    NET_EM_LXSJ_SHOWMODE_TO_BOTTOM = 5,             
    NET_EM_LXSJ_SHOWMODE_BLINK = 6,                 
    NET_EM_LXSJ_SHOWMODE_TO_TOP_CONTINUOUS = 94,    
    NET_EM_LXSJ_SHOWMODE_TO_BOTTOM_CONTINUOUS = 95, 
    NET_EM_LXSJ_SHOWMODE_TO_RIGHT_CONTINUOUS = 96,  
    NET_EM_LXSJ_SHOWMODE_TO_LEFT_CONTINUOUS = 97,   
} NET_EM_LXSJ_SHOWMODE;
typedef enum tagNET_EM_LXSJ_FONTSIZE
{
    NET_EM_LXSJ_FONTSIZE_UNKNOWN = -1, 
    NET_EM_LXSJ_FONTSIZE_16 = 16,      
    NET_EM_LXSJ_FONTSIZE_32 = 32,      
} NET_EM_LXSJ_FONTSIZE;
typedef enum tagNET_EM_LXSJ_ELEM_NAMETYPE
{
    NET_EM_LXSJ_ELEM_NAMETYPE_UNKNOWN = -1,      
    NET_EM_LXSJ_ELEM_NAMETYPE_SEPERATER = 0,     
    NET_EM_LXSJ_ELEM_NAMETYPE_NEWLINE = 1,       
    NET_EM_LXSJ_ELEM_NAMETYPE_PLATE = 2,         
    NET_EM_LXSJ_ELEM_NAMETYPE_VIOLATIONINFO = 3, 
    NET_EM_LXSJ_ELEM_NAMETYPE_SPEED = 4,         
    NET_EM_LXSJ_ELEM_NAMETYPE_CUSTOM = 5,        
} NET_EM_LXSJ_ELEM_NAMETYPE;
typedef struct tagNET_CFG_VSP_LXSJ_ELEMENT
{
    NET_EM_LXSJ_ELEM_NAMETYPE emNameType; 
    char szName[32];                      
    char szPrefix[64];                    
    char szPostfix[64];                   
    int nSeperaterCount;                  
    BYTE byReserved[856];                 
} NET_CFG_VSP_LXSJ_ELEMENT;
typedef struct tagNET_CFG_VSP_LXSJ_AREADATA
{
    NET_EM_LXSJ_AREATYPE emAreaType;           
    NET_EM_LXSJ_DISPLAYTYPE emAreaDisplayType; 
    UINT nAreaX1;                              
    UINT nAreaY1;                              
    UINT nAreaX2;                              
    UINT nAreaY2;                              
    NET_EM_LXSJ_FONTCOLOR emFontColor;         
    DH_COLOR_RGBA stuRGB;                      
    NET_EM_LXSJ_SHOWMODE emShowMode;           
    UINT nMoveSpeed;                           
    UINT nStayTime;                            
    NET_EM_LXSJ_FONTSIZE emFontSize;           
    UINT nMaxRollingItem;                      
    int nElement;                              
    NET_CFG_VSP_LXSJ_ELEMENT stuElement[16];   
    BYTE byReserved[956];                      
} NET_CFG_VSP_LXSJ_AREADATA;
typedef struct tagNET_CFG_VSP_LXSJ_CUSTOM
{
    BOOL bEnable;
    UINT nWaitTime;                            
    char szText[256];                          
    NET_EM_LXSJ_DISPLAYTYPE emAreaDisplayType; 
    UINT nAreaX1;                              
    UINT nAreaY1;                              
    UINT nAreaX2;                              
    UINT nAreaY2;                              
    NET_EM_LXSJ_FONTCOLOR emFontColor;         
    DH_COLOR_RGBA stuRGB;                      
    NET_EM_LXSJ_SHOWMODE emShowMode;           
    UINT nMoveSpeed;                           
    UINT nStayTime;                            
    NET_EM_LXSJ_FONTSIZE emFontSize;           
    BYTE byReserved[704];                      
} NET_CFG_VSP_LXSJ_CUSTOM;
typedef struct tagNET_CFG_VSP_LXSJ_ROLLCONFIG
{
    BOOL bEnable;
    UINT nMaxItemNum;    
    UINT nPeriod;        
    BYTE byReserved[52]; 
} NET_CFG_VSP_LXSJ_ROLLCONFIG;
typedef struct tagNET_CFG_VSP_LXSJ_SLOGAN
{
    char szText[256];                          
    NET_EM_LXSJ_DISPLAYTYPE emAreaDisplayType; 
    UINT nAreaX1;                              
    UINT nAreaY1;                              
    UINT nAreaX2;                              
    UINT nAreaY2;                              
    NET_EM_LXSJ_FONTCOLOR emFontColor;         
    DH_COLOR_RGBA stuRGB;                      
    NET_EM_LXSJ_SHOWMODE emShowMode;           
    UINT nMoveSpeed;                           
    UINT nStayTime;                            
    NET_EM_LXSJ_FONTSIZE emFontSize;           
    BYTE byReserved[712];                      
} NET_CFG_VSP_LXSJ_SLOGAN, NET_CFG_VSP_LXSJ_WARNNING;
typedef struct tagNET_CFG_VSP_LXSJ_TRAFFICJAM
{
    BOOL bEnable;
    NET_CFG_VSP_LXSJ_SLOGAN stuSlogan;     
    NET_CFG_VSP_LXSJ_WARNNING stuWarnning; 
    BYTE byReserved[4096];                 
} NET_CFG_VSP_LXSJ_TRAFFICJAM;
typedef struct tagNET_CFG_VSP_LXSJ_RADARPREALARM
{
    BOOL bEnable;
    char szText[256];                          
    NET_EM_LXSJ_DISPLAYTYPE emAreaDisplayType; 
    UINT nAreaX1;                              
    UINT nAreaY1;                              
    UINT nAreaX2;                              
    UINT nAreaY2;                              
    NET_EM_LXSJ_FONTCOLOR emFontColor;         
    DH_COLOR_RGBA stuRGB;                      
    NET_EM_LXSJ_SHOWMODE emShowMode;           
    UINT nMoveSpeed;                           
    UINT nStayTime;                            
    NET_EM_LXSJ_FONTSIZE emFontSize;           
    BYTE byReserved[708];                      
} NET_CFG_VSP_LXSJ_RADARPREALARM;
typedef struct tagNET_CFG_VSP_LXSJ_INFO
{
    DWORD dwSize;
    BOOL bEnable;                      
    char szServerIP[32];               
    int nServerPort;                   
    NET_EM_LXSJ_TRANSMODE emTransMode; 
    char szContorlID[32];              
    UINT nWidth;                       
    UINT nHeigth;                      
    UINT nPlayTime;                    
    UINT nCirclePlayTimes;             
    NET_EM_LXSJ_COLORTYPE emColorType;               
    NET_CFG_VSP_LXSJ_NOPLATE stuNoPlate;             
    NET_CFG_VSP_LXSJ_VIOLATIONTYPE stuViolationType; 
    int nAreaDataNum;                                
    NET_CFG_VSP_LXSJ_AREADATA stuAreaData[16];       
    NET_CFG_VSP_LXSJ_CUSTOM stuCustom;               
    NET_CFG_VSP_LXSJ_ROLLCONFIG stuRollConfig;       
    NET_CFG_VSP_LXSJ_TRAFFICJAM stuTrafficJam;       
    NET_CFG_VSP_LXSJ_RADARPREALARM stuRadarPreAlarm; 
} NET_CFG_VSP_LXSJ_INFO;
typedef struct tagNET_CFG_GLOBAL_MODEVALUE_INFO
{
    int nNormal;         
    int nAlarm;          
    BYTE byReserved[24]; 
} NET_CFG_GLOBAL_MODEVALUE_INFO;
typedef struct tagNET_CFG_SENSOR_ALARM_GLOBAL_INFO
{
    DWORD dwSize;
    NET_CFG_GLOBAL_MODEVALUE_INFO stuFrequency; 
    NET_CFG_GLOBAL_MODEVALUE_INFO stuTimes;     
} NET_CFG_SENSOR_ALARM_GLOBAL_INFO;
typedef struct tagNET_CFG_SERSOR_INFO
{
    NET_SENSE_METHOD emSenseMethod; 
    int nAlarmLowerLimit;           
    int nAlarmHighLimit;            
    BYTE byReserved[500];           
} NET_CFG_SERSOR_INFO;
typedef struct tagNET_CFG_SENSOR_ALARM_INFO
{
    DWORD dwSize;
    int nMaxNum;                        
    int nRetNum;                        
    NET_CFG_SERSOR_INFO* pstSensorList; 
} NET_CFG_SENSOR_ALARM_INFO;
typedef struct tagNET_TIME_POINT
{
    int bEnable; 
    int nHour;   
    int nMin;    
    int nSec;    
} NET_TIME_POINT;
typedef struct tagNET_CFG_TIMINGCAPTURE_INFO
{
    DWORD dwSize;
    NET_TIME_POINT stuTimeSchedule[DH_N_WEEKS]; 
} NET_CFG_TIMINGCAPTURE_INFO;
typedef struct tagNET_LOOPPLAYBACK_AUDIOALARM_INFO
{
    DWORD dwSize;                                                
    BOOL bEnable;                                                
    DH_TSECT stuTimeSection[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
    char szAudioFilePath[256];                                   
    char szStartTime[20];                                        
    char szEndTime[20];                                          
} NET_LOOPPLAYBACK_AUDIOALARM_INFO;
typedef struct tagNET_CFG_PTZ_SPEED
{
    DWORD dwSize;
    int nPtzSpeed;     
    int nPatternSpeed; 
} NET_CFG_PTZ_SPEED;
typedef struct tagNET_CFG_HORIZONTAL_ROTATION_LIMIT_INFO
{
    BOOL bLimitEnable;    
    int nLimitMode;       
    BYTE byReserved[256]; 
} NET_CFG_HORIZONTAL_ROTATION_LIMIT_INFO;
typedef struct tagNET_CFG_HORIZONTAL_ROTATION_GROUP_SCAN_INFO
{
    DWORD dwSize;                                                     
    NET_CFG_HORIZONTAL_ROTATION_LIMIT_INFO stuHorizontalRotationInfo; 
} NET_CFG_HORIZONTAL_ROTATION_GROUP_SCAN_INFO;
typedef struct tagNET_AUTOSCAN_INFO
{
    char szName[32];      
    BOOL bLeftEnable;     
    BOOL bRightEnable;    
    UINT nScanSpeed;      
    BYTE byReserved[948]; 
} NET_AUTOSCAN_INFO;
typedef struct tagNET_CFG_AUTOSCAN_INFO
{
    DWORD dwSize;                      
    int nMaxScanInfoNum;               
    NET_AUTOSCAN_INFO* pAutoScanInfos; 
    int nRetScanInfoNum;               
} NET_CFG_AUTOSCAN_INFO;
typedef enum tagEM_TOUR_PRIOR_MODE
{
    EM_TOUR_PRIOR_MODE_UNKNOWN, 
    EM_TOUR_PRIOR_MODE_SWITCH,  
    EM_TOUR_PRIOR_MODE_DETECT,  
    EM_TOUR_PRIOR_MODE_TOUR,    
} EM_TOUR_PRIOR_MODE;
typedef struct tagNET_TOUR_PATH
{
    UINT nPresetID;       
    UINT nDuration;       
    UINT nSpeed;          
    BYTE byReserved[508]; 
} NET_TOUR_PATH;
typedef struct tagNET_TOUR_GROUP
{
    DH_TSECT stuTimeSection;       
    int nTourPathNum;              
    NET_TOUR_PATH stuTourPath[10]; 
    BYTE byReserved[1024];         
} NET_TOUR_GROUP;
typedef struct tagNET_TOUR_PLAN
{
    NET_TOUR_GROUP stuTourGroup[16]; 
    int nGroupNum;                   
    BYTE byReserved[1020];           
} NET_TOUR_PLAN;
typedef struct tagNET_CFG_INTELLI_TOUR
{
    DWORD dwSize;                     
    BOOL bEnable;                     
    EM_TOUR_PRIOR_MODE emTourPriMode; 
    UINT nIdleWaitingTime;            
    NET_TOUR_PLAN stuTourPlan[7];     
    UINT nSceneSwitchingTime;         
    BYTE byReserved[4];               
} NET_CFG_INTELLI_TOUR;
typedef struct tagNET_CFG_COAXIAL_LIGHT_INFO
{
    DWORD dwSize;
    BOOL bEnable;                                                
    DH_TSECT stuTimeSection[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
} NET_CFG_COAXIAL_LIGHT_INFO;
typedef struct tagNET_VIDEO_OUT_COLOR
{
    UINT nBrightness;    
    UINT nContrast;      
    UINT nSaturation;    
    UINT nHue;           
    UINT nGamma;         
    BYTE byResered[132]; 
} NET_VIDEO_OUT_COLOR;
typedef enum tagEM_VIDEO_OUT_FORMAT
{
    EM_VIDEO_OUT_FORMAT_UNKNOWN, 
    EM_VIDEO_OUT_FORMAT_AUTO,    
    EM_VIDEO_OUT_FORMAT_TV,      
    EM_VIDEO_OUT_FORMAT_VGA,     
    EM_VIDEO_OUT_FORMAT_DVI,     
    EM_VIDEO_OUT_FORMAT_HDMI,    
    EM_VIDEO_OUT_FORMAT_SPOT,    
    EM_VIDEO_OUT_FORMAT_SDI,     
} EM_VIDEO_OUT_FORMAT;
typedef enum tagEM_VIDEO_OUT_SCAN_FORMAT
{
    EM_VIDEO_OUT_SCAN_FORMAT_UNKNOWN,     
    EM_VIDEO_OUT_SCAN_FORMAT_PROGRESSIVE, 
    EM_VIDEO_OUT_SCAN_FORMAT_INTERLACE,   
} EM_VIDEO_OUT_SCAN_FORMAT;
typedef struct tagNET_VIDEO_OUT_MODE
{
    int nWidth;                            
    int nHeight;                           
    int nBPP;                              
    int nRefreshRate;                      
    EM_VIDEO_OUT_FORMAT emFormat;          
    EM_VIDEO_OUT_SCAN_FORMAT emScanFormat; 
    BYTE byResered[128];                   
} NET_VIDEO_OUT_MODE;
typedef struct tagNET_VIDEO_OUT_USERDEF_MODE
{
    int nWidth;                            
    int nHeight;                           
    int nBPP;                              
    int nRefreshRate;                      
    EM_VIDEO_OUT_FORMAT emFormat;          
    EM_VIDEO_OUT_SCAN_FORMAT emScanFormat; 
    BYTE byResered[128];                   
} NET_VIDEO_OUT_USERDEF_MODE;
typedef struct tagNET_CFG_VIDEO_OUT_INFO
{
    DWORD dwSize;
    BOOL bEnable;                              
    UINT nMargin[4];                           
    BOOL bIQIMode;                             
    BOOL bIsUserDefMode;                       
    NET_VIDEO_OUT_COLOR stuColor;              
    NET_VIDEO_OUT_MODE stuMode;                
    NET_VIDEO_OUT_USERDEF_MODE stuSelfDefMode; 
} NET_CFG_VIDEO_OUT_INFO;
typedef struct tagNET_CFG_CLOUDUPLOADTIME_INFO
{
    DWORD dwSize;
    BOOL bEnable;         
    NET_TIME stStartTime; 
    NET_TIME stEndTime;   
} NET_CFG_CLOUDUPLOADTIME_INFO;
typedef struct tagNET_CFG_PATTERN_PTZ_INFO
{
    BOOL bEnable;          
    char szName[32];       
    BYTE byReserved[1020]; 
} NET_CFG_PATTERN_PTZ_INFO;
typedef struct tagNET_CFG_AUTO_PATTERN_INFO
{
    DWORD dwSize;                                   
    NET_CFG_PATTERN_PTZ_INFO stuPatternPtzInfo[32]; 
    int nPatternPtzInfo;                            
} NET_CFG_AUTO_PATTERN_INFO;
typedef enum tagEM_SERVER_OPTION
{
    EM_SERVER_OPTION_UNKNOWN, 
    EM_SERVER_OPTION_DISABLE, 
    EM_SERVER_OPTION_GB28181, 
    EM_SERVER_OPTION_GB35114, 
} EM_SERVER_OPTION;
typedef struct tagNET_CHANNEL_INFO
{
    char szID[MAX_CHANNEL_ID_LEN]; 
    unsigned int nAlarmLevel;      
    BYTE byReserved[1024];         
} NET_CHANNEL_INFO;
typedef struct tagNET_ALARM_INFO
{
    char szID[MAX_CHANNEL_ID_LEN]; 
    unsigned int nAlarmLevel;      
    BYTE byReserved[1024];         
} NET_ALARM_INFO;
typedef struct tagNET_AUDIO_OUTPUT_CHANNEL_INFO
{
    char szID[MAX_CHANNEL_ID_LEN]; 
    BYTE byReserved[1024];         
} NET_AUDIO_OUTPUT_CHANNEL_INFO;
typedef struct tagNET_SIP_SERVER_INFO
{
    EM_SERVER_OPTION emServerOption;                       
    char szSipSvrId[MAX_SIP_SVR_ID_LEN];                   
    char szDomain[MAX_SIP_DOMAIN_LEN];                     
    char szSipSvrIp[MAX_SIP_SVR_IP_LEN];                   
    char szDeviceId[MAX_SIP_SERVER_DEVICE_ID_LEN];         
    char szPassword[MAX_REG_PASSWORD_LEN];                 
    unsigned short nLocalSipPort;                          
    unsigned short nSipSvrPort;                            
    unsigned int nSipRegExpires;                           
    unsigned int nRegInterval;                             
    unsigned int nKeepAliveCircle;                         
    unsigned int nMaxTimeoutTimes;                         
    char szCivilCode[MAX_CIVIL_CODE_LEN];                  
    char szIntervideoID[MAX_INTERVIDEO_ID_LEN];            
    NET_CHANNEL_INFO* pstuChannnelInfo;                    
    unsigned int nChannelInfoNum;                          
    unsigned int nRetChannelInfoNum;                       
    NET_ALARM_INFO* pstuAlarmInfo;                         
    unsigned int nAlarmInfoNum;                            
    unsigned int nRetAlarmInfoNum;                         
    NET_AUDIO_OUTPUT_CHANNEL_INFO* pstuAudioOutputChnInfo; 
    unsigned int nAudioOutputChnInfoNum;                   
    unsigned int nRetAudioOutputChnInfoNum;                
    BYTE byReserved[1024];                                 
} NET_SIP_SERVER_INFO;
typedef struct tagNET_CFG_VSP_GAYS_SERVER_INFO
{
    DWORD dwSize;                                             
    unsigned int nSipServerInfoNum;                           
    NET_SIP_SERVER_INFO stuSipServerInfo[MAX_SIP_SERVER_NUM]; 
    unsigned int nRetSipServerInfoNum;                        
    BYTE byReserved[4];                                       
} NET_CFG_VSP_GAYS_SERVER_INFO;
typedef struct tagNET_CFG_VSP_CO_SIGN_SERVER_INFO
{
    DWORD dwSize;                   
    char szCoSignServerIP[64];      
    unsigned int nCoSignServerPort; 
} NET_CFG_VSP_CO_SIGN_SERVER_INFO;
typedef struct tagNET_VSP_GAVI_NOTIFY_OBJECT
{
    BOOL bFaceChecked;            
    BOOL bPersonChecked;          
    BOOL bMotorVehicleChecked;    
    BOOL bNonMotorVehicleChecked; 
    BOOL bImageChecked;           
    BYTE byReserved[516];         
} NET_VSP_GAVI_NOTIFY_OBJECT;
typedef struct tagNET_VSP_GAVI_CHANNEL_INFO
{
    char szChannelEncode[24];                   
    NET_VSP_GAVI_NOTIFY_OBJECT stuNotifyObject; 
    BYTE byReserved[512];                       
} NET_VSP_GAVI_CHANNEL_INFO;
typedef enum tagEM_VSP_GAVI_PLATFORM_CODE
{
    EM_VSP_GAVI_PLATFORM_CODE_UNKNOWN = -1,
    EM_VSP_GAVI_PLATFORM_CODE_DEFAULT,
    EM_VSP_GAVI_PLATFORM_CODE_DAHUA,
    EM_VSP_GAVI_PLATFORM_CODE_HKTDA_CLOUDSTORAGE,
    EM_VSP_GAVI_PLATFORM_CODE_UNIVIEW,
    EM_VSP_GAVI_PLATFORM_CODE_HKTEST,
    EM_VSP_GAVI_PLATFORM_CODE_SHQPNETPOSE,
    EM_VSP_GAVI_PLATFORM_CODE_HKTDA,
    EM_VSP_GAVI_PLATFORM_CODE_HARZONE,
    EM_VSP_GAVI_PLATFORM_CODE_NETPOSE,
    EM_VSP_GAVI_PLATFORM_CODE_TAOAN,
    EM_VSP_GAVI_PLATFORM_CODE_RESERVED,
    EM_VSP_GAVI_PLATFORM_CODE_HKVIEWGATEWAY,
    EM_VSP_GAVI_PLATFORM_CODE_KODAK,
} EM_VSP_GAVI_PLATFORM_CODE;
typedef struct tagNET_HKIMAGESERVER_INFO
{
    char szAccessKey[136]; 
    char szSecretKey[136]; 
    BYTE szReserved[512];  
} NET_HKIMAGESERVER_INFO;
typedef struct tagNET_VSP_GAVI_INFO
{
    char szAddress[128];                        
    char szUserId[64];                          
    char szPassword[64];                        
    UINT nPort;                                 
    BOOL bEnable;                               
    UINT nKeepAliveTime;                        
    UINT nMaxTimeoutTimes;                      
    UINT nRegisterInterval;                     
    char szDeviceID[24];                        
    NET_VSP_GAVI_CHANNEL_INFO* pstuChannelInfo; 
    UINT nChannelCount;                         
    UINT nChannelCountRet;                      
    EM_VSP_GAVI_PLATFORM_CODE emPlatform;       
    BOOL bIsOnLine;                             
    NET_HKIMAGESERVER_INFO* pHKImageServerInfo; 
    BYTE byReserved[68];                        
} NET_VSP_GAVI_INFO;
typedef struct tagNET_VSP_GAVI_PLATFORM_INFO
{
    EM_VSP_GAVI_PLATFORM_CODE emPlatformCode; 
    char szPlatformName[128];                 
    BYTE byReserved[132];                     
} NET_VSP_GAVI_PLATFORM_INFO;
typedef struct tagNET_CFG_VSP_GAVI_INFO
{
    DWORD dwSize;                                   
    int nGaviInfoCount;                             
    NET_VSP_GAVI_INFO stuGaviInfo[16];              
    int nPlatformCount;                             
    NET_VSP_GAVI_PLATFORM_INFO stuPlatformInfo[64]; 
} NET_CFG_VSP_GAVI_INFO;
typedef struct tagNET_CFG_VSP_ONVIF_INFO
{
    DWORD dwSize;       
    BOOL bServiceStart; 
} NET_CFG_VSP_ONVIF_INFO;
typedef struct tagNET_CFG_VSP_LRLXXF_MODULE_INFO
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_VSP_LRLXXF_MODULE_INFO;
typedef struct tagNET_VSP_LRLXXF_CUSTOM_INFO
{
    UINT nReportInterval;      
    char szEvoConsumeUrl[128]; 
    char szClientSecret[128];  
    char szClientID[128];      
    char szGetTokenUrl[128];   
    char byReserved[256];      
} NET_VSP_LRLXXF_CUSTOM_INFO;
typedef struct tagNET_CFG_VSP_LRLXXF_CUSTOM_INFO
{
    DWORD dwSize;                         
    NET_VSP_LRLXXF_CUSTOM_INFO stuCustom; 
} NET_CFG_VSP_LRLXXF_CUSTOM_INFO;
typedef enum tagEM_REGISTRATION_PROTOCOL
{
    EM_REGISTRATION_PROTOCOL_UNKNWON,     
    EM_REGISTRATION_PROTOCOL_PRIVATE,     
    EM_REGISTRATION_PROTOCOL_SIP,         
    EM_REGISTRATION_PROTOCOL_H323,        
    EM_REGISTRATION_PROTOCOL_HITRY_CLOUD, 
} EM_REGISTRATION_PROTOCOL;
typedef struct tagNET_CFG_VSP_TERMINAL_REGISTER_INFO
{
    DWORD dwSize;                        
    BOOL bEnable;                        
    char szDeviceID[16];                 
    char szPassword[32];                 
    char szRemoteIp[64];                 
    UINT nRemotePort;                    
    BOOL bIsAutoJoinConference;          
    EM_REGISTRATION_PROTOCOL emProtocol; 
    BOOL bIsRecord;                      
} NET_CFG_VSP_TERMINAL_REGISTER_INFO;
typedef struct tagNET_MEDIA_ENCRYPT_INFO
{
    DWORD dwSize;                  
    BOOL bKeyFrameEncryptEnable;   
    unsigned int nVKUpdateTime;    
    BOOL bRTSPOverTlsEnable;       
    EM_ALGORITHM_TYPE emAlgorithm; 
} NET_MEDIA_ENCRYPT_INFO;
typedef struct tagNET_DOWNLOAD_ENCRYPT_INFO
{
    DWORD dwSize;                  
    BOOL bEncryptEnable;           
    char szEncryptPasswd[256];     
    EM_ALGORITHM_TYPE emAlgorithm; 
} NET_DOWNLOAD_ENCRYPT_INFO;
typedef struct tagNET_STORE_ENCRYPT_INFO
{
    DWORD dwSize;                  
    BOOL bEnable;                  
    int nVKEKMode;                 
    EM_ALGORITHM_TYPE emAlgorithm; 
    char szEncryptPasswd[64];      
} NET_STORE_ENCRYPT_INFO;
typedef struct tagNET_CFG_COUNTRY_INFO
{
    DWORD dwSize;        
    char szCountry[3];   
    BYTE byReserved1[1]; 
} NET_CFG_COUNTRY_INFO;
typedef enum tagEM_VIDEO_STANDARD
{
    EM_VIDEO_STANDARD_UNKNOWN,
    EM_VIDEO_STANDARD_PAL,   
    EM_VIDEO_STANDARD_NTSC,  
    EM_VIDEO_STANDARD_SECAM, 
} EM_VIDEO_STANDARD;
typedef struct tagNET_CFG_VIDEOSTANDARD_INFO
{
    DWORD dwSize;                      
    EM_VIDEO_STANDARD emVideoStandard; 
} NET_CFG_VIDEOSTANDARD_INFO;
typedef struct tagNET_CFG_CASCADE_LIGHT_INFO
{
    DWORD dwSize;
    int nCount;       
    BOOL bEnable[16]; 
} NET_CFG_CASCADE_LIGHT_INFO;
typedef struct tagNET_CFG_LE_SMARTTRACK_INFO
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_LE_SMARTTRACK_INFO;
typedef struct tagNET_CFG_LE_LENS_MASK_INFO
{
    DWORD dwSize;              
    BOOL bEnable;              
    int nValidLastPositionNum; 
    BYTE byReserved[4];        
    double dbLastPosition[3];  
} NET_CFG_LE_LENS_MASK_INFO;
typedef enum tagNET_EM_REGISTER_TYPE
{
    NET_EM_REGISTER_TYPE_UNKNOWN, 
    NET_EM_REGISTER_TYPE_LECHENG, 
    NET_EM_REGISTER_TYPE_EASY4IP, 
} NET_EM_REGISTER_TYPE;
typedef struct tagNET_CFG_VSP_PAAS_INFO
{
    DWORD dwSize;                            
    BOOL bEnable;                            
    BOOL bOnline;                            
    char szRsServerIP[DH_MAX_IPADDR_EX_LEN]; 
    int nRsServerPort;                       
    char szSN[DH_DEV_SERIALNO_LEN];          
    char szCheckCode[DH_DEV_SERIALNO_LEN];   
    NET_EM_REGISTER_TYPE emType;             
} NET_CFG_VSP_PAAS_INFO;
typedef enum tagNET_EM_FACE_AUTH_MODE
{
    NET_EM_FACE_AUTH_MODE_UNKNOWN = 0, 
    NET_EM_FACE_AUTH_MODE_LOCAL,       
    NET_EM_FACE_AUTH_MODE_REMOTE,      
} NET_EM_FACE_AUTH_MODE;
typedef enum tagNET_EM_CARD_AUTH_MODE
{
    NET_EM_CARD_AUTH_MODE_UNKNOWN = 0, 
    NET_EM_CARD_AUTH_MODE_LOCAL,       
    NET_EM_CARD_AUTH_MODE_REMOTE,      
} NET_EM_CARD_AUTH_MODE;
typedef enum tagNET_EM_QR_CODE_AUTH_MODE
{
    NET_EM_QR_CODE_AUTH_MODE_UNKNOWN = 0, 
    NET_EM_QR_CODE_AUTH_MODE_LOCAL,       
    NET_EM_QR_CODE_AUTH_MODE_REMOTE,      
} NET_EM_QR_CODE_AUTH_MODE;
typedef enum tagNET_EM_ALL_AUTH_MODE
{
    NET_EM_ALL_AUTH_MODE_UNKNOWN = 0, 
    NET_EM_ALL_AUTH_MODE_DISABLE,     
    NET_EM_ALL_AUTH_MODE_LOACL,       
    NET_EM_ALL_AUTH_MODE_REMOTE,      
} NET_EM_ALL_AUTH_MODE;
typedef struct tagNET_CFG_ACCESSCTL_AUTH_MODE
{
    DWORD dwSize;                              
    NET_EM_FACE_AUTH_MODE emFaceAuthMode;      
    NET_EM_CARD_AUTH_MODE emCardAuthMode;      
    NET_EM_QR_CODE_AUTH_MODE emQRCodeAuthMode; 
    NET_EM_ALL_AUTH_MODE emAllAuthMode;        
} NET_CFG_ACCESSCTL_AUTH_MODE;
typedef enum tagNET_EM_LED_COLOR
{
    NET_EM_LED_COLOR_UNKNOWN = 0, 
    NET_EM_LED_COLOR_GREEN,       
    NET_EM_LED_COLOR_YELLOW,      
    NET_EM_LED_COLOR_RED,         
} NET_EM_LED_COLOR;
typedef struct tagNET_CFG_LED_TEXT
{
    DWORD dwSize;             
    char szText[128];         
    NET_EM_LED_COLOR emColor; 
} NET_CFG_LED_TEXT;
typedef struct tagNET_CFG_LED_TEXT_ARRAY
{
    DWORD dwSize;             
    char szText[128];         
    NET_EM_LED_COLOR emColor; 
    int nHoldTime;            
} NET_CFG_LED_TEXT_ARRAY;
typedef struct tagNET_CFG_DISABLE_LINKAGE
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_DISABLE_LINKAGE;
typedef struct tagNET_CFG_DISABLE_LINKAGE_TIME_SECTION
{
    DWORD dwSize;                                                 
    BOOL bEnable;                                                 
    DH_TSECT stuTimeSection[DH_N_SCHEDULE_TSECT][DH_N_REC_TSECT]; 
} NET_CFG_DISABLE_LINKAGE_TIME_SECTION;
typedef struct tagNET_CFG_REMOTE_DISABLE_LINKAGE_INFO
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_REMOTE_DISABLE_LINKAGE_INFO;
typedef struct tagNET_CFG_REMOTE_DISABLE_LINKAGE_TIME_SECTION_SYNC_INFO
{
    DWORD dwSize;                
    BOOL bEnable;                
    int* pRemoteChannels;        
    DWORD nRemoteChannelsCnt;    
    DWORD nRetRemoteChannelsCnt; 
} NET_CFG_REMOTE_DISABLE_LINKAGE_TIME_SECTION_SYNC_INFO;
typedef struct tagNET_MATRIX_NETKBDFASTCTRL_ELEMENTS_INFO
{
    int nChannel;         
    char szUserName[64];  
    BYTE byReserved[260]; 
} NET_MATRIX_NETKBDFASTCTRL_ELEMENTS_INFO;
typedef struct tagNET_CFG_MATRIX_NETKBDFASTCTRL_INFO
{
    DWORD dwSize;                                                             
    int nMatrixNetKBDFastCtrlInfoNum;                                         
    NET_MATRIX_NETKBDFASTCTRL_ELEMENTS_INFO stuMatrixNetKBDFastCtrlInfo[128]; 
} NET_CFG_MATRIX_NETKBDFASTCTRL_INFO;
typedef struct tagNET_CFG_VIDEO_CHANNEL_LABEL_INFO
{
    DWORD dwSize;                
    char szSecurityRoomCode[32]; 
    char szSecurityRoomName[32]; 
} NET_CFG_VIDEO_CHANNEL_LABEL_INFO;
typedef struct tagNET_CFG_PRESET_SNAP_PICTURE_NUM
{
    DWORD dwSize; 
    int nNum;     
} NET_CFG_PRESET_SNAP_PICTURE_NUM;
typedef enum tagEM_ALARM_RULE_TYPE
{
    EM_ALARM_RULE_UNKNOWN = -1, 
    EM_ALARM_RULE_NONE,         
    EM_ALARM_RULE_SUCCESS,      
    EM_ALARM_RULE_FAIL,         
} EM_ALARM_RULE_TYPE;
typedef struct tagNET_ALARM_OUT_CHANNEL_INFO
{
    EM_ALARM_RULE_TYPE emAlarmRuleType; 
    int nAlarmOutLatch;                 
    BYTE byReserved[128];               
} NET_ALARM_OUT_CHANNEL_INFO;
typedef struct tagNET_FACE_RECOGNITION_ALARM_CHANNEL
{
    char szGroupID[64];                             
    char szGroupName[128];                          
    BOOL bAlarmOutEnable;                           
    UINT nAlarmChannelNum;                          
    NET_ALARM_OUT_CHANNEL_INFO stuAlarmChannel[64]; 
    BYTE byReserved[256];                           
} NET_FACE_RECOGNITION_ALARM_CHANNEL;
typedef struct tagNET_FACE_RECOGNITION_ALARM_INFO
{
    DWORD dwSize;                                               
    UINT nFaceReconChannelNum;                                  
    NET_FACE_RECOGNITION_ALARM_CHANNEL stuFaceReconChannel[50]; 
} NET_FACE_RECOGNITION_ALARM_INFO;
typedef enum tagNET_EM_SCREEN_SHOW_CONTENTS
{
    EM_TRAFFIC_LATTICE_SCREEN_UNKNOWN = 0,    
    EM_TRAFFIC_LATTICE_SCREEN_PLATENUMBE,     
    EM_TRAFFIC_LATTICE_SCREEN_SYSTIME,        
    EM_TRAFFIC_LATTICE_SCREEN_PARKTIME,       
    EM_TRAFFIC_LATTICE_SCREEN_MASTEROFCAR,    
    EM_TRAFFIC_LATTICE_SCREEN_USERTYPE,       
    EM_TRAFFIC_LATTICE_SCREEN_REMAINDAY,      
    EM_TRAFFIC_LATTICE_SCREEN_PARKCHARGE,     
    EM_TRAFFIC_LATTICE_SCREEN_REMAINSPACE,    
    EM_TRAFFIC_LATTICE_SCREEN_SYSDATE,        
    EM_TRAFFIC_LATTICE_SCREEN_PASSICONCIRCLE, 
    EM_TRAFFIC_LATTICE_SCREEN_PASSICONARROW,  
    EM_TRAFFIC_LATTICE_SCREEN_INTIME,         
    EM_TRAFFIC_LATTICE_SCREEN_OUTTIME,        
    EM_TRAFFIC_LATTICE_SCREEN_REMARKS,        
    EM_TRAFFIC_LATTICE_SCREEN_RESOURCE,       
    EM_TRAFFIC_LATTICE_SCREEN_CUSTOM,         
} NET_EM_SCREEN_SHOW_CONTENTS;
typedef struct tagNET_TRAFFIC_LATTICE_SCREEN_SHOW_CONTENTS
{
    NET_EM_SCREEN_SHOW_CONTENTS emContents; 
    BYTE byReserved1[4];                    
    char szCustomStr[32];                   
    BYTE byReserved[32];                    
} NET_TRAFFIC_LATTICE_SCREEN_SHOW_CONTENTS;
typedef struct tagNET_TRAFFIC_LATTICE_SCREEN_SHOW_INFO
{
    NET_TRAFFIC_LATTICE_SCREEN_SHOW_CONTENTS stuContents[64]; 
    int nContentsNum;                                         
    BYTE byReserved[1020];                                    
} NET_TRAFFIC_LATTICE_SCREEN_SHOW_INFO;
typedef enum tagNET_EM_LATTICE_SCREEN_SHOW_TYPE
{
    EM_LATTICE_SCREEN_SHOW_TYPE_UNKNOWN = -1,        
    EM_LATTICE_SCREEN_SHOW_TYPE_WORD_CONTROL,        
    EM_LATTICE_SCREEN_SHOW_TYPE_TRUSTEESHIP_CONTROL, 
} NET_EM_LATTICE_SCREEN_SHOW_TYPE;
typedef enum tagNET_EM_LATTICE_SCREEN_CONTROL_TYPE
{
    EM_LATTICE_SCREEN_CONTROL_TYPE_UNKNOWN = -1,     
    EM_LATTICE_SCREEN_CONTROL_TYPE_CAMERA_CONTROL,   
    EM_LATTICE_SCREEN_CONTROL_TYPE_PLATFORM_CONTROL, 
} NET_EM_LATTICE_SCREEN_CONTROL_TYPE;
typedef enum tagNET_EM_LATTICE_SCREEN_BACKGROUND_MODE
{
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_UNKNOWN, 
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_A,       
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_B,       
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE_C,       
} NET_EM_LATTICE_SCREEN_BACKGROUND_MODE;
typedef enum tagNET_EM_LATTICE_SCREEN_LOGO_TYPE
{
    NET_EM_LATTICE_SCREEN_LOGO_TYPE_UNKNOWN, 
    NET_EM_LATTICE_SCREEN_LOGO_TYPE_STENCIL, 
    NET_EM_LATTICE_SCREEN_LOGO_TYPE_PICTURE, 
} NET_EM_LATTICE_SCREEN_LOGO_TYPE;
typedef struct tagNET_TRAFFIC_LATTICE_SCREEN_LOGO_INFO
{
    NET_EM_LATTICE_SCREEN_LOGO_TYPE emLogoType; 
    char szContent[128];                        
} NET_TRAFFIC_LATTICE_SCREEN_LOGO_INFO;
typedef struct tagNET_TRAFFIC_LATTICE_SCREEN_ALARM_NOTICE_INFO
{
    char szNoHelmet[128];         
    char szNonMotorOverload[128]; 
} NET_TRAFFIC_LATTICE_SCREEN_ALARM_NOTICE_INFO;
typedef struct tagNET_CFG_TRAFFIC_LATTICE_SCREEN_INFO
{
    DWORD dwSize;                                                    
    int nStatusChangeTime;                                           
    NET_TRAFFIC_LATTICE_SCREEN_SHOW_INFO stuNormal;                  
    NET_TRAFFIC_LATTICE_SCREEN_SHOW_INFO stuCarPass;                 
    NET_EM_LATTICE_SCREEN_SHOW_TYPE emShowType;                      
    NET_EM_LATTICE_SCREEN_CONTROL_TYPE emControlType;                
    NET_EM_LATTICE_SCREEN_BACKGROUND_MODE emBackgroundMode;          
    char szPlayList[10][64];                                         
    int nPlayListNum;                                                
    NET_TRAFFIC_LATTICE_SCREEN_LOGO_INFO stuLogoInfo;                
    NET_TRAFFIC_LATTICE_SCREEN_ALARM_NOTICE_INFO stuAlarmNoticeInfo; 
} NET_CFG_TRAFFIC_LATTICE_SCREEN_INFO;
#define NET_MAX_PLATEENABLE_NUM 16       
#define NET_MAX_BROADCAST_ELEMENT_NUM 64 
typedef enum tagNET_EM_PLATEENABLE_TYPE
{
    EM_PLATEENABLE_UNKNOWN = 0, 
    EM_PLATEENABLE_TIPS,        
    EM_PLATEENABLE_PLATE,       
    EM_PLATEENABLE_ELEMENT,     
} NET_EM_PLATEENABLE_TYPE;
typedef enum tagNET_EM_VOICE_BROADCAST_ELEMENT_TYPE
{
    EM_VOICE_BROADCAST_ELEMENT_UNKNOWN = 0, 
    EM_VOICE_BROADCAST_ELEMENT_PLATENUMBER, 
    EM_VOICE_BROADCAST_ELEMENT_PARKTIME,    
    EM_VOICE_BROADCAST_ELEMENT_PARKCHARGE,  
    EM_VOICE_BROADCAST_ELEMENT_USERTYPE,    
    EM_VOICE_BROADCAST_ELEMENT_REMAINDAY,   
    EM_VOICE_BROADCAST_ELEMENT_INTIME,      
    EM_VOICE_BROADCAST_ELEMENT_OUTTIME,     
    EM_VOICE_BROADCAST_ELEMENT_REMARKS,     
    EM_VOICE_BROADCAST_ELEMENT_CUSTOM,      
} NET_EM_VOICE_BROADCAST_ELEMENT_TYPE;
typedef struct tagNET_TRAFFIC_VOICE_BROADCAST_ELEMENT
{
    NET_EM_VOICE_BROADCAST_ELEMENT_TYPE emType; 
    BYTE byReserved1[4];                        
    char szPrefix[512];                         
    char szPostfix[512];                        
    BYTE byReserved[1024];                      
} NET_TRAFFIC_VOICE_BROADCAST_ELEMENT;
typedef struct tagNET_CFG_TRAFFIC_VOICE_BROADCAST_INFO
{
    DWORD dwSize;                                                                  
    int nEnableCount;                                                              
    NET_EM_PLATEENABLE_TYPE emEnable[NET_MAX_PLATEENABLE_NUM];                     
    char szNormalCar[MAX_PATH];                                                    
    char szTrustCar[MAX_PATH];                                                     
    char szSuspiciousCar[MAX_PATH];                                                
    NET_TRAFFIC_VOICE_BROADCAST_ELEMENT stuElement[NET_MAX_BROADCAST_ELEMENT_NUM]; 
    int nElementNum;                                                               
} NET_CFG_TRAFFIC_VOICE_BROADCAST_INFO;
typedef enum tagNET_EM_SNAP_SHOT_TYPE
{
    NET_EM_SNAP_SHOT_TYPE_UNKNOWN = 0, 
    NET_EM_SNAP_SHOT_TYPE_NEAR,        
    NET_EM_SNAP_SHOT_TYPE_MEDIUM,      
    NET_EM_SNAP_SHOT_TYPE_FAR,         
    NET_EM_SNAP_SHOT_TYPE_FEATURE,     
} NET_EM_SNAP_SHOT_TYPE;
typedef enum tagNET_EM_SNAP_SHOT_INTERVAL_MODE
{
    NET_EM_SNAP_SHOT_INTERVAL_UNKNOWN = 0,     
    NET_EM_SNAP_SHOT_INTERVAL_TIME,            
    NET_EM_SNAP_SHOT_INTERVAL_FRAMEADAPTSPEED, 
    NET_EM_SNAP_SHOT_INTERVAL_FRAME,           
} NET_EM_SNAP_SHOT_INTERVAL_MODE;
typedef struct tagNET_SNAP_SHOT_WITH_RULE_INFO
{
    UINT nRuleId;
    DWORD dwRuleType;                                        
    UINT nSnapShotNum;                                       
    NET_EM_SNAP_SHOT_TYPE emSnapShotType[MAX_SNAP_SHOT_NUM]; 
    UINT nSingleInterval[MAX_SNAP_SHOT_NUM];                 
    NET_EM_SNAP_SHOT_INTERVAL_MODE emIntervalMode;           
    BYTE byReserved[1024];                                   
} NET_SNAP_SHOT_WITH_RULE_INFO;
typedef struct tagNET_SCENE_SNAP_SHOT_WITH_RULE2_INFO
{
    UINT nPresetID;                                       
    UINT nRetSnapShotRuleNum;                             
    NET_SNAP_SHOT_WITH_RULE_INFO stuSnapShotWithRule[32]; 
    BYTE byReserved[1024];                                
} NET_SCENE_SNAP_SHOT_WITH_RULE2_INFO;
typedef struct tagNET_CFG_SCENE_SNAP_SHOT_WITH_RULE2_INFO
{
    DWORD dwSize;                                                   
    UINT nMaxRuleNum;                                               
    UINT nRetRuleNum;                                               
    NET_SCENE_SNAP_SHOT_WITH_RULE2_INFO* pstuSceneSnapShotWithRule; 
} NET_CFG_SCENE_SNAP_SHOT_WITH_RULE2_INFO;
typedef struct tagNET_CFG_TRAFFIC_PARKING_SNAP_TIMER_INFO
{
    DWORD deSize; 
    BOOL bEnable; 
    UINT nPeriod; 
} NET_CFG_TRAFFIC_PARKING_SNAP_TIMER_INFO;
typedef struct tagNET_CFG_VEHICLE_INFO
{
    DWORD deSize;            
    char szOrganization[32]; 
    char szVehicleID[32];    
} NET_CFG_VEHICLE_INFO;
typedef enum tagEM_VEHICLE_WORK_MODE
{
    EM_VEHICLE_WORK_MODE_UNKNOWN, 
    EM_VEHICLE_WORK_MODE_INSIDE,  
    EM_VEHICLE_WORK_MODE_OUTSIDE, 
} EM_VEHICLE_WORK_MODE;
typedef struct tagNET_CFG_VEHICLE_WORK_MODE
{
    DWORD dwSize;                    
    EM_VEHICLE_WORK_MODE emWorkMode; 
} NET_CFG_VEHICLE_WORK_MODE;
typedef enum tagNET_EM_DOORBELL_TYPE
{
    NET_EM_DOORBELL_UNKNOWN = -1, 
    NET_EM_DOORBELL_UNCONNECTED,  
    NET_EM_DOORBELL_MECHANICAL,   
    NET_EM_DOORBELL_ELECTRONIC,   
} NET_EM_DOORBELL_TYPE;
typedef struct tagNET_CFG_DOORBELL_EXTERNALDOORBELL
{
    DWORD dwSize;                        
    NET_EM_DOORBELL_TYPE emDoorBellType; 
    BOOL bEnable;                        
} NET_CFG_DOORBELL_EXTERNALDOORBELL;
typedef enum tagEM_MOUNT_MODE
{
    EM_MOUNT_MODE_UNKNOWN,
    EM_MOUNT_MODE_INDOOR,  
    EM_MOUNT_MODE_OUTDOOR, 
} EM_MOUNT_MODE;
typedef struct tagNET_CFG_WIFI_INSTALL_PARAM
{
    DWORD dwSize;              
    char szCountry[4];         
    EM_MOUNT_MODE emMountMode; 
    BYTE byReserved[4];        
} NET_CFG_WIFI_INSTALL_PARAM;
typedef struct tagNET_CFG_KVM_MAIN_NODE_INFO
{
    int nLevel;           
    char szAddress[128];  
    BYTE byReserved[128]; 
} NET_CFG_KVM_MAIN_NODE_INFO;
typedef struct tagNET_CFG_KVM_MAIN_NODE
{
    DWORD dwSize;                                     
    UINT nMainNodeNum;                                
    NET_CFG_KVM_MAIN_NODE_INFO stuMainNodeInfo[1024]; 
} NET_CFG_KVM_MAIN_NODE;
typedef enum tagNET_EM_KVM_HOTKEY_FUNCTION_NAME
{
    EM_KVM_HOTKEY_FUNCTION_NAME_UNKNOWN,     
    EM_KVM_HOTKEY_FUNCTION_NAME_SPLITMENU,   
    EM_KVM_HOTKEY_FUNCTION_NAME_GETMENU,     
    EM_KVM_HOTKEY_FUNCTION_NAME_PUSHMENU,    
    EM_KVM_HOTKEY_FUNCTION_NAME_BASEINFOMENU 
} EM_KVM_HOTKEY_FUNCTION_NAME;
typedef struct tagNET_CFG_KVM_HOT_KEY_INFO
{
    int nKeyNum;                            
    int szKey[3];                           
    EM_KVM_HOTKEY_FUNCTION_NAME emFuncName; 
    BYTE byReserved[128];                   
} NET_CFG_KVM_HOT_KEY_INFO;
typedef struct tagNET_CFG_KVM_HOT_KEY
{
    DWORD dwSize;                               
    int nHotKeyNum;                             
    NET_CFG_KVM_HOT_KEY_INFO stuHotKeyInfo[64]; 
} NET_CFG_KVM_HOT_KEY;
typedef struct tagNET_CFG_KM_TRANS_ENCRYPT
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_KM_TRANS_ENCRYPT;
typedef struct tagNET_VIDEO_OUTPUT_CHANNEL_INFO
{
    char szName[32];      
    BYTE byReserved[256]; 
} NET_VIDEO_OUTPUT_CHANNEL_INFO;
typedef struct tagNET_TV_CARD_INFO
{
    BOOL bExist;                                      
    int nVideoOutputChannels;                         
    int nVideoOutputChannelsRange[2];                 
    NET_VIDEO_OUTPUT_CHANNEL_INFO stuVideoOutput[24]; 
    BYTE byReserved[256];                             
} NET_TV_CARD_INFO;
typedef enum tagEM_DEVICE_PROTOCOL_TYPE
{
    EM_DEVICE_PROTOCOL_TYPE_UNKNOWN, 
    EM_DEVICE_PROTOCOL_TYPE_PRIVATE, 
} EM_DEVICE_PROTOCOL_TYPE;
typedef struct tagNET_CFG_NET_TV_DEVICE_INFO
{
    char szNodeName[64];                    
    char szUserName[128];                   
    char szPassword[128];                   
    char szName[32];                        
    char szAddress[40];                     
    UINT nPort;                             
    int nCardNum;                           
    NET_TV_CARD_INFO stuCardInfo[21];       
    BOOL bEnable;                           
    EM_DEVICE_PROTOCOL_TYPE emProtocolType; 
    BYTE byReserved[252];                   
} NET_CFG_NET_TV_DEVICE_INFO;
typedef struct tagNET_CFG_NET_TV_DEVICE
{
    DWORD dwSize;                                
    int nDeviceNum;                              
    BYTE byReserved[4];                          
    int nMaxDeviceNum;                           
    NET_CFG_NET_TV_DEVICE_INFO* pstuNetTvDevice; 
} NET_CFG_NET_TV_DEVICE;
typedef struct tagNET_CFG_SENSOR_MAINTAIN
{
    DWORD dwSize;                                                
    BOOL bEnable;                                                
    DH_TSECT stuTimeSection[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
} NET_CFG_SENSOR_MAINTAIN;
typedef struct tagNET_CFG_TILT_LIMIT
{
    DWORD dwSize;      
    int nUp;           
    int nDown;         
    BYTE byReserve[4]; 
} NET_CFG_TILT_LIMIT;
typedef struct tagNET_CFG_ACS_FACE_RECOGNITION_SCHEME
{
    DWORD dwSize; 
    UINT nMode;   
} NET_CFG_ACS_FACE_RECOGNITION_SCHEME;
typedef struct tagNET_CFG_FORBIDDEN_ADVERT_PLAY_INFO
{
    BOOL bEnable;              
    NET_TIME_EX1 stuBeginTime; 
    NET_TIME_EX1 stuEndTime;   
    BYTE reserved[256];        
} NET_CFG_FORBIDDEN_ADVERT_PLAY_INFO;
typedef struct tagNET_CFG_FORBIDDEN_ADVERT_PLAY
{
    DWORD dwSize;                                        
    UINT nAdvertNum;                                     
    NET_CFG_FORBIDDEN_ADVERT_PLAY_INFO stuAdvertInfo[8]; 
} NET_CFG_FORBIDDEN_ADVERT_PLAY;
typedef struct tagNET_CFG_BGY_CUSTOMERCFG
{
    DWORD dwSize;                 
    EM_PLAY_WITH_MODE emModeType; 
} NET_CFG_BGY_CUSTOMERCFG;
typedef struct tagNET_CFG_ACCESSCTL_KEYBINDINGINFOCFG_INFO
{
    char szBindingInfo[128]; 
    UINT nKey;               
    BYTE byReserved[508];    
} NET_CFG_ACCESSCTL_KEYBINDINGINFOCFG_INFO;
typedef struct tagNET_CFG_ACCESSCTL_KEYBINDINGINFOCFG
{
    DWORD dwSize;                                                   
    UINT nKeyNum;                                                   
    NET_CFG_ACCESSCTL_KEYBINDINGINFOCFG_INFO stuKeyBindingInfo[10]; 
} NET_CFG_ACCESSCTL_KEYBINDINGINFOCFG;
typedef struct tagNET_CFG_HOST_DEVICE
{
    DWORD dwSize;      
    UINT nMode;        
    BOOL bHostEnable;  
    char szHostIP[40]; 
} NET_CFG_HOST_DEVICE;
typedef enum tagEM_COMPOSIT_CHANNEL_BIND_MODE
{
    EM_COMPOSIT_CHANNEL_BIND_MODE_UNKNOWN,       
    EM_COMPOSIT_CHANNEL_BIND_MODE_AUTOMATIC,     
    EM_COMPOSIT_CHANNEL_BIND_MODE_SEMIAUTOMATIC, 
    EM_COMPOSIT_CHANNEL_BIND_MODE_MANUAL,        
} EM_COMPOSIT_CHANNEL_BIND_MODE;
typedef enum tagEM_CAN_START_STREAM
{
    EM_CAN_START_STREAM_UNKNOWN = -1, 
    EM_CAN_START_STREAM_OFF,          
    EM_CAN_START_STREAM_ON,           
} EM_CAN_START_STREAM;
typedef enum tagEM_IS_RECORD
{
    EM_IS_RECORD_UNKNOWN, 
    EM_IS_RECORD_ON,      
    EM_IS_RECORD_OFF,     
} EM_IS_RECORD;
typedef struct tagNET_CFG_COURSE_RECORD_DEFAULT_CONFIG
{
    DWORD dwSize;                                            
    UINT nCompositChannelMode;                               
    int nCanStartStreamNum;                                  
    int nIsRecordNum;                                        
    EM_CAN_START_STREAM emCanStartStream[64];                
    EM_IS_RECORD emIsRecord[64];                             
    EM_COMPOSIT_CHANNEL_BIND_MODE emCompositChannelBindMode; 
    BYTE byReserved[4];                                      
} NET_CFG_COURSE_RECORD_DEFAULT_CONFIG;
typedef enum tagEM_COURSE_RECORD_UPLOAD_TYPE
{
    EM_COURSE_RECORD_UPLOAD_TYPE_TIMING,    
    EM_COURSE_RECORD_UPLOAD_TYPE_IMMEDIATE, 
} EM_COURSE_RECORD_UPLOAD_TYPE;
typedef struct tagNET_COURSE_RECORD_UPLOAD_METHOD
{
    EM_COURSE_RECORD_UPLOAD_TYPE emUploadType; 
    NET_TIME_EX1 stuUploadTime;                
    UINT nFilePiece;                           
    UINT nFileMode;                            
    int nUploadValidTime;                      
    NET_TIME_EX1 stuUploadEndTime;             
    BYTE byReserved[1012];                     
} NET_COURSE_RECORD_UPLOAD_METHOD;
typedef enum tagEM_COURSE_RECORD_UPLOAD_PATH_DEVICE_TYPE
{
    EM_COURSE_RECORD_UPLOAD_PATH_DEVICE_TYPE_COLONY,     
    EM_COURSE_RECORD_UPLOAD_PATH_DEVICE_TYPE_STANDALONE, 
} EM_COURSE_RECORD_UPLOAD_PATH_DEVICE_TYPE;
typedef struct tagNET_COURSE_RECORD_UPLOAD_PATH
{
    EM_COURSE_RECORD_UPLOAD_PATH_DEVICE_TYPE emDeviceType; 
    int nDevicePathNum;                                    
    char szDevicePath[16][256];                            
    BYTE byReserved[1024];                                 
} NET_COURSE_RECORD_UPLOAD_PATH;
typedef enum tagEM_ENCRY_TYPE
{
    EM_ENCRY_TYPE_RSA, 
    EM_ENCRY_TYPE_MD5, 
} EM_ENCRY_TYPE;
typedef struct tagNET_COURSE_RECORD_UPLOAD_TOKEN
{
    BOOL bTokenCheck;          
    int nTokenPathNum;         
    char szTokenPath[16][256]; 
    char szPlatformFlag[64];   
    char szUserName[32];       
    char szEncryptUri[256];    
    char szAccessUri[256];     
    EM_ENCRY_TYPE emEncryType; 
    BYTE byReserved[1020];     
} NET_COURSE_RECORD_UPLOAD_TOKEN;
typedef enum tagEM_RECORD_FILE_TYPE
{
    EM_RECORD_FILE_TYPE_UNKNOWN, 
    EM_RECORD_FILE_TYPE_MP4,     
    EM_RECORD_FILE_TYPE_DAV,     
} EM_RECORD_FILE_TYPE;
typedef struct tagNET_CFG_COURSE_RECORD_UPLOAD
{
    DWORD dwSize;                                    
    EM_RECORD_FILE_TYPE emFileType;                  
    NET_COURSE_RECORD_UPLOAD_METHOD stuUploadMethod; 
    NET_COURSE_RECORD_UPLOAD_PATH stuUploadPath;     
    NET_COURSE_RECORD_UPLOAD_TOKEN stuUploadToken;   
} NET_CFG_COURSE_RECORD_UPLOAD;
typedef enum tagEM_SUB_MODE
{
    EM_SUB_UNKNOWN = -1,                          
    EM_SUB_NORECORD,                              
    EM_SUB_NORMAL_COTINUE_RECORD,                 
    EM_SUB_EVENT_TRIGGER_RECORD,                  
    EM_SUB_PLAN_REGULAR_RECORD,                   
    EM_SUB_EVENT_TRIGGER_AND_PLAN_REGULAR_RECORD, 
} EM_SUB_MODE;
typedef struct tagNET_CFG_COURSE_RECORD_EX
{
    DWORD dwSize;            
    BOOL bIsGlobal;          
    UINT nPreRecord;         
    BOOL bEnable;            
    UINT nMaxRecordTime;     
    UINT nRecordLatch;       
    EM_SUB_MODE emSubMode;   
    UINT nTimeSectionID;     
    UINT nManulRecordLength; 
    UINT nFileHoldTime;      
} NET_CFG_COURSE_RECORD_EX;
typedef struct tagNET_CFG_LIFTCONTROL_OPTION
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_LIFTCONTROL_OPTION;
typedef struct tagNET_CFG_HEALTH_CODE_INFO
{
    DWORD dwSize;                  
    BOOL bEnable;                  
    BOOL bOfflineEnable;           
    BOOL bCheckHealthCode;         
    BOOL bHSVisible;               
    BOOL bHSCheckEnable;           
    UINT nHSTimeout;               
    UINT nHSCollectTimeout;        
    BOOL bVaccineVisible;          
    BOOL bVaccineCheckEnable;      
    BOOL bTravelCodeVisible;       
    BOOL bTravelCodeCheck;         
    BOOL bVaccineIntensifyVisible; 
    UINT nOFFLineGreenCodeMethod;  
    UINT nCodeFlushTimeout;        
    UINT nHealthQueryTimeout;      
    BOOL bRedPermit;               
    BOOL bYellowPermit;            
    BOOL bQueryTimeoutPermit;      
} NET_CFG_HEALTH_CODE_INFO;
typedef enum tagEM_RELAY_STATE_TYPE
{
    EM_RELAY_STATE_TYPE_UNKNOWN = -1,     
    EM_RELAY_STATE_TYPE_CLOSE,            
    EM_RELAY_STATE_TYPE_OPEN,             
    EM_RELAY_STATE_TYPE_NO_SUPPORT = 255, 
} EM_RELAY_STATE_TYPE;
typedef struct tagNET_CFG_RELAY_STATE_INFO
{
    DWORD dwSize;                
    int nAddress;                
    EM_RELAY_STATE_TYPE emState; 
    BYTE byReserved[4];          
} NET_CFG_RELAY_STATE_INFO;
typedef struct tagNET_CFG_OSD_PLAN_VIDEOWIDGET_INFO
{
    char szChannelTitle[256]; 
    BYTE byReserved[1024];    
} NET_CFG_OSD_PLAN_VIDEOWIDGET_INFO;
typedef struct tagNET_CFG_OSD_PLAN_INFO
{
    BOOL bIsUsed;                                           
    NET_TIME stuTime;                                       
    char szName[32];                                        
    int nValidVideoWidget;                                  
    NET_CFG_OSD_PLAN_VIDEOWIDGET_INFO stuVideoWidgets[512]; 
    BYTE byReserved[1024];                                  
} NET_CFG_OSD_PLAN_INFO;
typedef struct tagNET_CFG_OSD_PLANS_INFO
{
    DWORD dwSize;                         
    int nMaxPlanNum;                      
    int nRetPlanNum;                      
    NET_CFG_OSD_PLAN_INFO* pstuPlansInfo; 
} NET_CFG_OSD_PLANS_INFO;
typedef struct tagNET_CFG_ENVIRONMENT_DETECT_INFO
{
    DWORD dwSize;     
    int nTemperature; 
    int nHumidity;    
    int nPM25;        
} NET_CFG_ENVIRONMENT_DETECT_INFO;
typedef struct tagNET_CFG_AC_GZYD_INFO
{
    DWORD dwSize;          
    BOOL bEnable;          
    UINT nInterval;        
    UINT nQRLastTime;      
    char szUrl0[256];      
    char szUrl1[256];      
    char szDeviceID[32];   
    char szQRCONTENT[256]; 
    char szReserved[1024]; 
} NET_CFG_AC_GZYD_INFO;
typedef struct tagNET_CFG_CARD_MNG_INFO
{
    DWORD dwSize;          
    UINT nType;            
    char szReserved[1024]; 
} NET_CFG_CARD_MNG_INFO;
typedef enum tagEM_WORK_MODE
{
    EM_WORK_MODE_UNKNOWN = -1,         
    EM_WORK_MODE_ENERGY_CONSERVATION,  
    EM_WORK_MODE_ORDINARY,             
    EM_WORK_MODE_ULTRA,                
    EM_WORK_MODE_CUSTOM,               
    EM_WORK_MODE_CONTINUOUS_RECORDING, 
    EM_WORK_MODE_VLOG,                 
} EM_WORK_MODE;
typedef struct tagNET_WORK_PARAM
{
    UINT nPirRecordTime;   
    UINT nPirPeriod;       
    char szResolution[16]; 
    int nWhiteLight;       
    char szReserved[128];  
} NET_WORK_PARAM;
typedef struct tagNET_WORK_MODE
{
    EM_WORK_MODE emMode;         
    NET_WORK_PARAM stuModeParam; 
    char szReserved[128];        
} NET_WORK_MODE;
typedef struct tagNET_CFG_WORK_MODE_INFO
{
    DWORD dwSize;                  
    int nWorkModeNum;              
    NET_WORK_MODE stuWorkMode[16]; 
} NET_CFG_WORK_MODE_INFO;
typedef struct tagNET_CFG_USB_FLASH
{
    DWORD dwSize;       
    BOOL bDetectEnable; 
} NET_CFG_USB_FLASH;
typedef struct tagNET_CFG_DISPLAY_CONNECT
{
    DWORD dwSize;        
    int nHdmiStatusSize; 
    BOOL bHdmiStatus[8]; 
} NET_CFG_DISPLAY_CONNECT;
typedef struct tagNET_REGULATOR_INFO
{
    UINT nDistance;            
    UINT nTemperature;         
    NET_RECT stRect;           
    UINT nHeight;              
    int nDiffTemperature;      
    int nEmissivity;           
    int nBlackBodyCorrectTemp; 
    BYTE byReserve[24];        
} NET_REGULATOR_INFO;
typedef struct tagNET_CFG_RADIO_REGULATOR
{
    DWORD dwSize;                       
    BOOL bEnable;                       
    UINT nPresetId;                     
    UINT nCamerHeight;                  
    int nCamerAngle;                    
    NET_REGULATOR_INFO stRegulatorInfo; 
} NET_CFG_RADIO_REGULATOR;
typedef struct tagNET_CFG_HUMAN_THERM_CALIBRATE_INFO
{
    DWORD dwSize;        
    int nThermBoxHeight; 
    int nThermBoxWidth;  
    int nThermCenterX;   
    int nThermCenterY;   
} NET_CFG_HUMAN_THERM_CALLBRATE_INFO;
typedef enum tagEM_SWITCH_CONTROL_TYPE
{
    EM_SWITCH_CONTROL_TYPE_UNKNOWN = -1, 
    EM_SWITCH_CONTROL_TYPE_OFF,          
    EM_SWITCH_CONTROL_TYPE_ON,           
} EM_SWITCH_CONTROL_TYPE;
typedef enum tagEM_RANGE_MODE
{
    EM_RANGE_MODE_UNKNOWN = -1, 
    EM_RANGE_MODE_WOLF,         
    EM_RANGE_MODE_RABBIT,       
    EM_RANGE_MODE_PEOPLE,       
    EM_RANGE_MODE_OTHER,        
} EM_RANGE_MODE;
typedef enum tagEM_TARGET_DETECT_SENSITIVITY
{
    EM_TARGET_DETECT_SENSITIVITY_UNKNOWN = -1, 
    EM_TARGET_DETECT_SENSITIVITY_OFF,          
    EM_TARGET_DETECT_SENSITIVITY_LOW,          
    EM_TARGET_DETECT_SENSITIVITY_MEDIUM,       
    EM_TARGET_DETECT_SENSITIVITY_HIGH,         
} EM_TARGET_DETECT_SENSITIVITY;
typedef enum tagEM_SCENE_MODE
{
    EM_SCENE_MODE_UNKNOWN = -1,  
    EM_SCENE_MODE_LOW,           
    EM_SCENE_MODE_HIGH,          
    EM_SCENE_MODE_SELF_ADAPTION, 
} EM_SCENE_MODE;
typedef enum tagEM_SCREEN_SWITCH_TYPE
{
    EM_SCREEN_SWITCH_TYPE_UNKNOWN = -1, 
    EM_SCREEN_SWITCH_TYPE_LCOS,         
    EM_SCREEN_SWITCH_TYPE_P,            
    EM_SCREEN_SWITCH_TYPE_N,            
} EM_SCREEN_SWITCH_TYPE;
typedef enum tagEM_RANGE_UNIT
{
    EM_RANGE_UNIT_UNKOWN = -1, 
    EM_RANGE_UNIT_METER,       
    EM_RANGE_UNIT_FOOT,        
} EM_RANGE_UNIT;
typedef enum tagEM_SCENE_STYLE
{
    EM_SCENE_STYLE_UNKOWN = -1, 
    EM_SCENE_STYLE_STANDARD,    
    EM_SCENE_STYLE_JUNGLE,      
} EM_SCENE_STYLE;
typedef enum tagEM_CURSOR_TYPE
{
    EM_CURSOR_TYPE_UNKOWN = -1, 
    EM_CURSOR_TYPE_0,           
    EM_CURSOR_TYPE_1,           
    EM_CURSOR_TYPE_2,           
    EM_CURSOR_TYPE_3,           
    EM_CURSOR_TYPE_4,           
    EM_CURSOR_TYPE_5,           
    EM_CURSOR_TYPE_6,           
    EM_CURSOR_TYPE_7,           
    EM_CURSOR_TYPE_8,           
    EM_CURSOR_TYPE_9,           
    EM_CURSOR_TYPE_10,          
    EM_CURSOR_TYPE_11,          
} EM_CURSOR_TYPE;
typedef enum tagEM_CURSOR_SCHEME
{
    EM_CURSOR_SCHEME_UNKOWN = -1, 
    EM_CURSOR_SCHEME_0,           
    EM_CURSOR_SCHEME_1,           
    EM_CURSOR_SCHEME_2,           
    EM_CURSOR_SCHEME_3,           
    EM_CURSOR_SCHEME_4,           
    EM_CURSOR_SCHEME_5,           
} EM_CURSOR_SCHEME;
typedef enum tagEM_DISTANCE_SCHEME
{
    EM_DISTANCE_SCHEME_UNKOWN = -1, 
    EM_DISTANCE_SCHEME_0,           
    EM_DISTANCE_SCHEME_1,           
    EM_DISTANCE_SCHEME_2,           
    EM_DISTANCE_SCHEME_3,           
    EM_DISTANCE_SCHEME_4,           
    EM_DISTANCE_SCHEME_5,           
} EM_DISTANCE_SCHEME;
typedef struct tagNET_CFG_TELESCOPE_OPTIONS_INFO
{
    DWORD dwSize;                             
    BOOL bLaserCtrl;                          
    BOOL bRangeCtrl;                          
    EM_RANGE_MODE emRangeMode;                
    BOOL bOsdSet;                             
    EM_TARGET_DETECT_SENSITIVITY emTargetChk; 
    EM_TARGET_DETECT_SENSITIVITY emFireChk;   
    EM_SCENE_MODE emSceneMode;                
    int nAutoShutdown;                        
    int nAutoSleep;                           
    EM_SCREEN_SWITCH_TYPE emScreenSwitch;     
    BOOL bWIFICtrl;                           
    EM_SWITCH_CONTROL_TYPE emHotColdPoint;    
    EM_RANGE_UNIT emRangeUnit;                
    EM_SWITCH_CONTROL_TYPE emBuzzerCtrl;      
    int nCustomHeight;                        
    BOOL bLogoShow;                           
    BOOL bAutoRecord;                         
    EM_SCENE_STYLE emSceneStyle;              
    EM_CURSOR_TYPE emCursorStyle;             
    EM_CURSOR_SCHEME emCursorScheme;          
    EM_DISTANCE_SCHEME emDistanceScheme;      
    UINT nCalibrateDistance;                  
    UINT nCalibrateOffset[2];                 
} NET_CFG_TELESCOPE_OPTIONS_INFO;
typedef struct tagNET_CFG_ENVIRONMENT_THERM_INFO
{
    DWORD dwSize;                
    int nEnvironmentTemp;        
    NET_TIME stuLastEnvSaveTime; 
    UINT nEnvSaveCnt;            
    BYTE byReserved[4];          
} NET_CFG_ENVIRONMENT_THERM_INFO;
typedef struct tagTHERMOMETRY_SHIELD_INFO
{
    BOOL bEnable;         
    int nShieldId;        
    char szName[64];      
    NET_RECT stuRect;     
    int nPresetId;        
    char szReserved[128]; 
} THERMOMETRY_SHIELD_INFO;
typedef struct tagNET_CFG_THERMOMETRY_SHIELD_INFO
{
    DWORD dwSize;                                         
    UINT nRealInfoNumOfEachChennel;                       
    THERMOMETRY_SHIELD_INFO stuThermometryShieldInfo[12]; 
} NET_CFG_THERMOMETRY_SHIELD_INFO;
typedef enum tagEM_EAS_LED_COLOR
{
    EM_EAS_LED_COLOR_UNKOWN,    
    EM_EAS_LED_COLOR_WHITE = 1, 
    EM_EAS_LED_COLOR_BLUE,      
    EM_EAS_LED_COLOR_GREEN,     
    EM_EAS_LED_COLOR_PURPLE,    
    EM_EAS_LED_COLOR_PINK,      
} EM_EAS_LED_COLOR;
typedef struct tagNET_EAS_ALARM_PARAMETER
{
    UINT nSnr;           
    UINT nAmp;           
    UINT nStd;           
    UINT nRms;           
    char szReserved[64]; 
} NET_EAS_ALARM_PARAMETER;
typedef struct tagNET_CFG_EAS_SYSTEM_CONFIG_INFO
{
    DWORD dwSize;                                  
    UINT nLabelResident;                           
    UINT nInterfere;                               
    UINT nAlarmMode;                               
    EM_EAS_LED_COLOR emLedColor;                   
    int nAlarmThresholdNum;                        
    UINT nAlarmThreshold[64];                      
    int nAlarmParameterNum;                        
    NET_EAS_ALARM_PARAMETER stuAlarmParameter[64]; 
} NET_CFG_EAS_SYSTEM_CONFIG_INFO;
typedef struct tagNET_CFG_EAS_COIL_SWITH_INFO
{
    DWORD dwSize;                 
    int nTransmitCoilEnableNum;   
    UINT nTransmitCoilEnable[64]; 
    int nReceiverCoilEnableNum;   
    UINT nReceiverCoilEnable[64]; 
} NET_CFG_EAS_COIL_SWITH_INFO;
typedef struct tagNET_CHANNEL_RTMP_INFO
{
    BOOL bEnable;          
    UINT nChannel;         
    char szUrl[512];       
    BYTE byReserved[1024]; 
} NET_CHANNEL_RTMP_INFO;
typedef struct tagNET_CFG_RTMP_INFO
{
    DWORD dwSize;                            
    BOOL bEnable;                            
    char szAddr[256];                        
    UINT nPort;                              
    BYTE byReserved[4];                      
    char szCustomPath[256];                  
    char szStreamPath[256];                  
    char szKey[128];                         
    NET_CHANNEL_RTMP_INFO* pstuMainStream;   
    UINT nMainStream;                        
    UINT nMainStreamRet;                     
    NET_CHANNEL_RTMP_INFO* pstuExtra1Stream; 
    UINT nExtra1Stream;                      
    UINT nExtra1StreamRet;                   
    NET_CHANNEL_RTMP_INFO* pstuExtra2Stream; 
    UINT nExtra2Stream;                      
    UINT nExtra2StreamRet;                   
} NET_CFG_RTMP_INFO;
typedef enum tagEM_HUMAN_THERMOMETRY_COMPENSATE_MODE
{
    EM_HUMAN_THERMOMETRY_COMPENSATE_MODE_UNKNOWN = 0, 
    EM_HUMAN_THERMOMETRY_COMPENSATE_MODE_FOREHEAD,    
    EM_HUMAN_THERMOMETRY_COMPENSATE_MODE_MERCURY,     
} EM_HUMAN_THERMOMETRY_COMPENSATE_MODE;
typedef struct tagNET_CFG_HUMAN_THERMOMETRY_COMPENSATE_INFO
{
    DWORD dwSize;                                          
    EM_HUMAN_THERMOMETRY_COMPENSATE_MODE emCompensateMode; 
    int nHumanCorrectTemp;                                 
    int nBasicnCorrectTemp;                                
} NET_CFG_HUMAN_THERMOMETRY_COMPENSATE_INFO;
typedef struct tagNET_CFG_DEBUGINFO_REDIR_INFO
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_CFG_DEBUGINFO_REDIR_INFO;
typedef struct tagNET_CFG_LOCAL_HEAT_IMAGE_THERMOMETRY_INFO
{
    DWORD dwSize;                          
    EM_TEMPERATURE_UNIT emTemperatureUnit; 
} NET_CFG_LOCAL_HEAT_IMAGE_THERMOMETRY_INFO;
typedef enum tagEM_TEMP_MEASURE_TYPE
{
    EM_TEMP_MEASURE_TYPE_UNKNOWN,       
    EM_TEMP_MEASURE_TYPE_INFRARED,      
    EM_TEMP_MEASURE_TYPE_THERMAL_IMAGE, 
    EM_TEMP_MEASURE_TYPE_GUIDE_MODULE,  
    EM_TEMP_MEASURE_TYPE_WRIST,         
} EM_TEMP_MEASURE_TYPE;
typedef enum tagEM_MASK_DETECT_MODE
{
    EM_MASK_DETECT_MODE_UNKNOWN,      
    EM_MASK_DETECT_MODE_NO_DETECTION, 
    EM_MASK_DETECT_MODE_REMIND,       
    EM_MASK_DETECT_MODE_INTERCEPT,    
} EM_MASK_DETECT_MODE;
typedef struct tagNET_INFRARED_MEASURE_MODE_PARAM
{
    int nMaxDistance;             
    int nRetentionTime;           
    double dbTempThreshold;       
    double dbCorrectTemp;         
    double dbValidTempLowerLimit; 
    BOOL bDebugModelEnable;       
    BOOL bRectEnable;             
    char szSensorType[64];        
    BYTE byReserved[1024];        
} NET_INFRARED_MEASURE_MODE_PARAM;
typedef struct tagNET_THERMAL_IMAGE_MEASURE_MODE_PARAM
{
    int nFaceCompareThreshold; 
    int nRetentionTime;        
    int nOverTempMaxDistance;  
    BYTE byReserved[1020];
} NET_THERMAL_IMAGE_MEASURE_MODE_PARAM;
typedef enum tagEM_THERMAL_IMAGE_CALIBRATION_MODE
{
    EM_THERMAL_IMAGE_CALIBRATION_MODE_UNKNOWN,       
    EM_THERMAL_IMAGE_CALIBRATION_MODE_INDOOR,        
    EM_THERMAL_IMAGE_CALIBRATION_MODE_WALL_MOUNTING, 
    EM_THERMAL_IMAGE_CALIBRATION_MODE_GATE,          
    EM_THERMAL_IMAGE_CALIBRATION_MODE_FLOOR,         
} EM_THERMAL_IMAGE_CALIBRATION_MODE;
typedef struct tagNET_GUIDE_MODULE_MEASURE_MODE_PARAM
{
    BOOL bRectEnable;                                    
    int nMaxDistance;                                    
    double dbTempThreshold;                              
    double dbCorrectTemp;                                
    double dbValidTempLowerLimit;                        
    double dbTempRandReplaceThreshold;                   
    BOOL bDebugModelEnable;                              
    EM_THERMAL_IMAGE_CALIBRATION_MODE emCalibrationMode; 
    BOOL bHeatDisplayEnbale;                             
    BYTE byReserved[1020];                               
} NET_GUIDE_MODULE_MEASURE_MODE_PARAM;
typedef struct tagNET_WRIST_MEASURE_MODE_PARAM
{
    double dbTempThreshold;       
    double dbCorrectTemp;         
    double dbValidTempLowerLimit; 
    int nMeasureTimeout;          
    int nValidMeasureDistance;    
    int nInvalidMeasureDistance;  
    BYTE byReserved[1020];
} NET_WRIST_MEASURE_MODE_PARAM;
typedef struct tagNET_CFG_ACCESSCONTROL_MEASURE_TEMP_INFO
{
    DWORD dwSize;                                                  
    BOOL bEnable;                                                  
    BOOL bOnlyTempMode;                                            
    BOOL bDisplayTemp;                                             
    EM_MASK_DETECT_MODE emMaskDetectMode;                          
    EM_TEMP_MEASURE_TYPE emMeasureType;                            
    NET_INFRARED_MEASURE_MODE_PARAM stuInfraredTempParam;          
    NET_THERMAL_IMAGE_MEASURE_MODE_PARAM stuThermalImageTempParam; 
    NET_GUIDE_MODULE_MEASURE_MODE_PARAM stuGuideModuleTempParam;   
    NET_WRIST_MEASURE_MODE_PARAM stuWristTempParam;                
} NET_CFG_ACCESSCONTROL_MEASURE_TEMP_INFO;
typedef enum tagEM_PTZ_LINK_TYPE
{
    EM_PTZ_LINK_TYPE_NONE,        
    EM_PTZ_LINK_TYPE_PRESET,      
    EM_PTZ_LINK_TYPE_TOUR,        
    EM_PTZ_LINK_TYPE_PATTERN,     
    EM_PTZ_LINK_TYPE_ZOOM,        
    EM_PTZ_LINK_TYPE_SINGLESCENE, 
    EM_PTZ_LINK_TYPE_QUICKFOCUS,  
} EM_PTZ_LINK_TYPE;
typedef struct tagNET_CFG_PTZ_LINK
{
    EM_PTZ_LINK_TYPE emType; 
    int nValue;              
} NET_CFG_PTZ_LINK;
typedef struct tagNET_PTZ_LINK
{
    EM_PTZ_LINK_TYPE emType; 
    int nParam1;             
    int nParam2;             
    int nParam3;             
    int nChannelID;          
} NET_PTZ_LINK;
typedef struct tagNET_CFG_ALARM_MSG_HANDLE
{
    DWORD dwSize;
    bool abChannelCount;  
    bool abAlarmOutCount; 
    bool abRecordMask;   
    bool abRecordEnable; 
    bool abRecordLatch;  
    bool abAlarmOutMask; 
    bool abAlarmOutEn;     
    bool abAlarmOutLatch;  
    bool abExAlarmOutMask; 
    bool abExAlarmOutEn;   
    bool abPtzLinkEn;  
    bool abTourMask;   
    bool abTourEnable; 
    bool abSnapshot;       
    bool abSnapshotEn;     
    bool abSnapshotPeriod; 
    bool abSnapshotTimes;  
    bool abTipEnable;      
    bool abMailEnable;    
    bool abMessageEnable; 
    bool abBeepEnable;    
    bool abVoiceEnable;   
    bool abMatrixMask;   
    bool abMatrixEnable; 
    bool abEventLatch;   
    bool abLogEnable;    
    bool abDelay;          
    bool abVideoMessageEn; 
    bool abMMSEnable;      
    bool abMessageToNetEn; 
    bool abTourSplit;      
    bool abSnapshotTitleEn; 
    bool abPtzLinkEx;       
    bool abSnapshotTitle;   
    bool abMailDetail;      
    bool abVideoTitleEn;    
    bool abVideoTitle;      
    bool abTour;        
    bool abDBKeys;      
    bool abJpegSummary; 
    bool abFlashEn;     
    bool abFlashLatch;  
    bool abAudioFileName;   
    bool abAlarmBellEn;     
    bool abAccessControlEn; 
    bool abAccessControl;   
    bool abTalkBack;        
    bool abPSTNAlarmServer; 
    bool abAlarmBellLatch;  
    bool abPlayTimes; 
    bool abReboot;    
    bool abBeepTime;  
    BYTE byReserved[68]; 
    NET_CFG_TIME_SCHEDULE stuTimeSection; 
    int nChannelCount;  
    int nAlarmOutCount; 
    DWORD dwRecordMask[CFG_MAX_CHANNEL_COUNT];   
    BOOL bRecordEnable;                          
    int nRecordLatch;                            
    DWORD dwAlarmOutMask[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bAlarmOutEn;                              
    int nAlarmOutLatch;                            
    DWORD dwExAlarmOutMask[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bExAlarmOutEn;                            
    NET_CFG_PTZ_LINK stuPtzLink[CFG_MAX_VIDEO_CHANNEL_NUM]; 
    BOOL bPtzLinkEn;                                        
    DWORD dwTourMask[CFG_MAX_CHANNEL_COUNT];                
    BOOL bTourEnable;                                       
    DWORD dwSnapshot[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bSnapshotEn;                        
    int nSnapshotPeriod;                     
    int nSnapshotTimes;                      
    BOOL bTipEnable;                         
    BOOL bMailEnable;    
    BOOL bMessageEnable; 
    BOOL bBeepEnable;    
    BOOL bVoiceEnable; 
    int nPlayTimes;    
    DWORD dwMatrixMask[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bMatrixEnable;                        
    int nEventLatch;                           
    BOOL bLogEnable;                           
    int nDelay;           
    BOOL bVideoMessageEn; 
    BOOL bMMSEnable;      
    BOOL bMessageToNetEn; 
    int nTourSplit;       
    BOOL bSnapshotTitleEn;                                           
    int nPtzLinkExNum;                                               
    NET_PTZ_LINK stuPtzLinkEx[CFG_MAX_VIDEO_CHANNEL_NUM];            
    int nSnapTitleNum;                                               
    NET_CFG_EVENT_TITLE stuSnapshotTitle[CFG_MAX_VIDEO_CHANNEL_NUM]; 
    NET_CFG_MAIL_DETAIL stuMailDetail;                               
    BOOL bVideoTitleEn;                                              
    int nVideoTitleNum;                                              
    NET_CFG_EVENT_TITLE stuVideoTitle[CFG_MAX_VIDEO_CHANNEL_NUM];    
    int nTourNum;                                              
    NET_CFG_TOURLINK stuTour[CFG_MAX_VIDEO_CHANNEL_NUM];       
    int nDBKeysNum;                                            
    char szDBKeys[CFG_MAX_DBKEY_NUM][CFG_MAX_CHANNELNAME_LEN]; 
    BYTE byJpegSummary[CFG_MAX_SUMMARY_LEN];                   
    BOOL bFlashEnable;                                         
    int nFlashLatch;                                           
    char szAudioFileName[MAX_PATH];                                              
    BOOL bAlarmBellEn;                                                           
    BOOL bAccessControlEn;                                                       
    DWORD dwAccessControl;                                                       
    NET_EM_CFG_ACCESSCONTROLTYPE emAccessControlType[CFG_MAX_ACCESSCONTROL_NUM]; 
    NET_CFG_TALKBACK_INFO stuTalkback;            
    NET_CFG_PSTN_ALARM_SERVER stuPSTNAlarmServer; 
    int nAlarmBellLatch;                          
    BOOL bReboot;                               
    int nBeepTime;                              
    BOOL abLightingLink;                        
    NET_CFG_LIGHTING_LINK_INFO stuLightingLink; 
} NET_CFG_ALARM_MSG_HANDLE;
typedef struct tagNET_ALARM_MSG_HANDLE
{
    bool abChannelCount;  
    bool abAlarmOutCount; 
    bool abRecordMask;   
    bool abRecordEnable; 
    bool abRecordLatch;  
    bool abAlarmOutMask; 
    bool abAlarmOutEn;     
    bool abAlarmOutLatch;  
    bool abExAlarmOutMask; 
    bool abExAlarmOutEn;   
    bool abPtzLinkEn;  
    bool abTourMask;   
    bool abTourEnable; 
    bool abSnapshot;       
    bool abSnapshotEn;     
    bool abSnapshotPeriod; 
    bool abSnapshotTimes;  
    bool abTipEnable;      
    bool abMailEnable;    
    bool abMessageEnable; 
    bool abBeepEnable;    
    bool abVoiceEnable;   
    bool abMatrixMask;   
    bool abMatrixEnable; 
    bool abEventLatch;   
    bool abLogEnable;    
    bool abDelay;          
    bool abVideoMessageEn; 
    bool abMMSEnable;      
    bool abMessageToNetEn; 
    bool abTourSplit;      
    bool abSnapshotTitleEn; 
    bool abPtzLinkEx;       
    bool abSnapshotTitle;   
    bool abMailDetail;      
    bool abVideoTitleEn;    
    bool abVideoTitle;      
    bool abTour;        
    bool abDBKeys;      
    bool abJpegSummary; 
    bool abFlashEn;     
    bool abFlashLatch;  
    bool abAudioFileName;   
    bool abAlarmBellEn;     
    bool abAccessControlEn; 
    bool abAccessControl;   
    bool abTalkBack;        
    bool abPSTNAlarmServer; 
    bool abAlarmBellLatch;  
    bool abPlayTimes; 
    bool abReboot;    
    bool abBeepTime;  
    BYTE byReserved[68]; 
    NET_CFG_TIME_SCHEDULE stuTimeSection; 
    int nChannelCount;  
    int nAlarmOutCount; 
    DWORD dwRecordMask[CFG_MAX_CHANNEL_COUNT];   
    BOOL bRecordEnable;                          
    int nRecordLatch;                            
    DWORD dwAlarmOutMask[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bAlarmOutEn;                              
    int nAlarmOutLatch;                            
    DWORD dwExAlarmOutMask[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bExAlarmOutEn;                            
    NET_CFG_PTZ_LINK stuPtzLink[CFG_MAX_VIDEO_CHANNEL_NUM]; 
    BOOL bPtzLinkEn;                                        
    DWORD dwTourMask[CFG_MAX_CHANNEL_COUNT];                
    BOOL bTourEnable;                                       
    DWORD dwSnapshot[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bSnapshotEn;                        
    int nSnapshotPeriod;                     
    int nSnapshotTimes;                      
    BOOL bTipEnable;                         
    BOOL bMailEnable;    
    BOOL bMessageEnable; 
    BOOL bBeepEnable;    
    BOOL bVoiceEnable; 
    int nPlayTimes;    
    DWORD dwMatrixMask[CFG_MAX_CHANNEL_COUNT]; 
    BOOL bMatrixEnable;                        
    int nEventLatch;                           
    BOOL bLogEnable;                           
    int nDelay;           
    BOOL bVideoMessageEn; 
    BOOL bMMSEnable;      
    BOOL bMessageToNetEn; 
    int nTourSplit;       
    BOOL bSnapshotTitleEn;                                           
    int nPtzLinkExNum;                                               
    NET_PTZ_LINK stuPtzLinkEx[CFG_MAX_VIDEO_CHANNEL_NUM];            
    int nSnapTitleNum;                                               
    NET_CFG_EVENT_TITLE stuSnapshotTitle[CFG_MAX_VIDEO_CHANNEL_NUM]; 
    NET_CFG_MAIL_DETAIL stuMailDetail;                               
    BOOL bVideoTitleEn;                                              
    int nVideoTitleNum;                                              
    NET_CFG_EVENT_TITLE stuVideoTitle[CFG_MAX_VIDEO_CHANNEL_NUM];    
    int nTourNum;                                              
    NET_CFG_TOURLINK stuTour[CFG_MAX_VIDEO_CHANNEL_NUM];       
    int nDBKeysNum;                                            
    char szDBKeys[CFG_MAX_DBKEY_NUM][CFG_MAX_CHANNELNAME_LEN]; 
    BYTE byJpegSummary[CFG_MAX_SUMMARY_LEN];                   
    BOOL bFlashEnable;                                         
    int nFlashLatch;                                           
    char szAudioFileName[MAX_PATH];                                              
    BOOL bAlarmBellEn;                                                           
    BOOL bAccessControlEn;                                                       
    DWORD dwAccessControl;                                                       
    NET_EM_CFG_ACCESSCONTROLTYPE emAccessControlType[CFG_MAX_ACCESSCONTROL_NUM]; 
    NET_CFG_TALKBACK_INFO stuTalkback;            
    NET_CFG_PSTN_ALARM_SERVER stuPSTNAlarmServer; 
    int nAlarmBellLatch;                          
    BOOL bReboot;                               
    int nBeepTime;                              
    BOOL abAudioLinkTime;                       
    int nAudioLinkTime;                         
    BOOL abAudioPlayTimes;                      
    UINT nAudioPlayTimes;                       
    BOOL abLightingLink;                        
    NET_CFG_LIGHTING_LINK_INFO stuLightingLink; 
    BYTE byReserve[828];                        
} NET_ALARM_MSG_HANDLE;
typedef struct tagWATER_DETECTION_PH
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_PH;
typedef struct tagWATER_DETECTION_NTU
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_NTU;
typedef struct tagWATER_DETECTION_NH3_N
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_NH3_N;
typedef struct tagWATER_DETECTION_TN
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_TN;
typedef struct tagWATER_DETECTION_SD
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_SD;
typedef struct tagWATER_DETECTION_COD
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_COD;
typedef struct tagWATER_DETECTION_NN
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_NN;
typedef struct tagWATER_DETECTION_DO
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_DO;
typedef struct tagWATER_DETECTION_CHL_A
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_CHL_A;
typedef enum tagEM_WATER_DETECTION_TP_ALARM_TYPE
{
    EM_WATER_DETECTION_TP_ALARM_TYPE_UNKNOWN, 
    EM_WATER_DETECTION_TP_ALARM_TYPE_NORMAL,  
    EM_WATER_DETECTION_TP_ALARM_TYPE_LAKE,    
} EM_WATER_DETECTION_TP_ALARM_TYPE;
typedef struct tagWATER_DETECTION_TP
{
    BOOL bEnable;                                 
    float fHigh;                                  
    float fLow;                                   
    EM_WATER_DETECTION_TP_ALARM_TYPE emAlarmType; 
    char szReserved[128];                         
} WATER_DETECTION_TP;
typedef struct tagWATER_DETECTION_CODMN
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_CODMN;
typedef struct tagWATER_DETECTION_SS
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_SS;
typedef struct tagWATER_DETECTION_BOD5
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_BOD5;
typedef struct tagWATER_DETECTION_NO3_N
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_NO3_N;
typedef struct tagWATER_DETECTION_TSL
{
    BOOL bEnable;         
    float fHigh;          
    float fLow;           
    char szReserved[128]; 
} WATER_DETECTION_TSL;
typedef struct tagWATER_DETECTION_SMALL_LEVEL
{
    BOOL bEnable;         
    char szReserved[128]; 
} WATER_DETECTION_SMALL_LEVEL;
typedef struct tagNET_CFG_WATER_QUALITY_DETECTION_INFO
{
    DWORD dwSize;                              
    WATER_DETECTION_PH stuPh;                  
    WATER_DETECTION_NTU stuNtu;                
    WATER_DETECTION_NH3_N stuNh3n;             
    WATER_DETECTION_TN stuTn;                  
    WATER_DETECTION_SD stuSd;                  
    WATER_DETECTION_COD stuCod;                
    WATER_DETECTION_NN stuNn;                  
    WATER_DETECTION_DO stuDo;                  
    WATER_DETECTION_CHL_A stuChla;             
    WATER_DETECTION_TP stuTp;                  
    WATER_DETECTION_CODMN stuCodMn;            
    WATER_DETECTION_SS stuSs;                  
    WATER_DETECTION_BOD5 stuBod5;              
    WATER_DETECTION_NO3_N stuNo3n;             
    WATER_DETECTION_TSL stuTsl;                
    WATER_DETECTION_SMALL_LEVEL stuSmallLevel; 
    BOOL bDataUpload;                          
    UINT nUpdateInterval;                      
    NET_ALARM_MSG_HANDLE stuEventHandler;      
} NET_CFG_WATER_QUALITY_DETECTION_INFO;
typedef enum tagEM_FINANCIAL_CABINET_ALARM_TYPE
{
    EM_FINANCIAL_CABINET_ALARM_TYPE_UNKNOWN = -1, 
    EM_FINANCIAL_CABINET_ALARM_TYPE_ABNORMAL,     
    EM_FINANCIAL_CABINET_ALARM_TYPE_EMERGENCY,    
    EM_FINANCIAL_CABINET_ALARM_TYPE_NOTOPEN,      
    EM_FINANCIAL_CABINET_ALARM_TYPE_TIMEOUT,      
    EM_FINANCIAL_CABINET_ALARM_TYPE_TRUCKAWAY,    
    EM_FINANCIAL_CABINET_ALARM_TYPE_WITHDRAW,     
    EM_FINANCIAL_CABINET_ALARM_TYPE_DEPOSIT,      
    EM_FINANCIAL_CABINET_ALARM_TYPE_BATTERY,      
    EM_FINANCIAL_CABINET_ALARM_TYPE_OTHAR,        
} EM_FINANCIAL_CABINET_ALARM_TYPE;
typedef struct tagNET_FINANCIAL_CABINET_ALARM_INFO
{
    BOOL bEnable;                                
    EM_FINANCIAL_CABINET_ALARM_TYPE emAlarmType; 
    int nAlarmLevel;                             
    BOOL bAlarmLinkEnable;                       
    int nValue;                                  
    char szUnit[32];                             
    int nAlarmOutChannel[8];                     
    int nAlarmOutChannelNum;                     
    char szReserverd[984];                       
} NET_FINANCIAL_CABINET_ALARM_INFO;
typedef struct tagNET_CFG_FINANCIAL_CABINET_ALARM_INFO
{
    DWORD dwSize;                                                  
    int nConfigNum;                                                
    NET_FINANCIAL_CABINET_ALARM_INFO stuFinancialCabinetAlarm[32]; 
} NET_CFG_FINANCIAL_CABINET_ALARM_INFO;
typedef struct tagNET_FINANCIAL_CABINET_VAULTDOOR
{
    UINT nDynamicPasswordLockNum; 
    UINT nElectronicLockNum;      
    UINT nMechanicalLockNum;      
    UINT nTotalLockNum;           
    UINT nCloseTime;              
    char szReserverd[252];        
} NET_FINANCIAL_CABINET_VAULTDOOR;
typedef struct tagNET_FINANCIAL_CABINET_WORKTIME
{
    BOOL bEnable;          
    char szStartTime[16];  
    char szEndTime[16];    
    int nWeekDayNum;       
    UINT nWeekDay[7];      
    char szReserverd[252]; 
} NET_FINANCIAL_CABINET_WORKTIME;
typedef struct tagNET_FINANCIAL_CABINET_AUTOARM
{
    BOOL bEnable;               
    char szDisarmStartTime[16]; 
    char szDisarmEndTime[16];   
    int nWeekDayNum;            
    UINT nWeekDay[7];           
    char szReserverd[252];      
} NET_FINANCIAL_CABINET_AUTOARM;
typedef struct tagNET_FINANCIAL_CABINET_MESSAGE
{
    BOOL bEnable;              
    int nPhoneNumberNum;       
    char szPhoneNumber[8][16]; 
    char szReserverd[256];     
} NET_FINANCIAL_CABINET_MESSAGE;
typedef struct tagNET_CFG_FINANCIAL_CABINET_CONFIG_INFO
{
    DWORD dwSize;                                   
    UINT nCabinNum;                                 
    NET_FINANCIAL_CABINET_VAULTDOOR stuVaultDoor;   
    BOOL bRemoteApprovalEnable;                     
    NET_FINANCIAL_CABINET_WORKTIME stuWorkTime;     
    UINT nIdentifyMode;                             
    NET_FINANCIAL_CABINET_AUTOARM stuAutoArm;       
    NET_FINANCIAL_CABINET_MESSAGE stuMobileMessage; 
    BOOL bABLockEnable;                             
    BOOL bCashAmountEnable;                         
    BOOL bCabinsEnable;                             
    BOOL bRecordScreenEnable;                       
    BOOL bFreezeEnable;                             
} NET_CFG_FINANCIAL_CABINET_CONFIG_INFO;
typedef struct tagNET_NUCLEIC_ACID_RULER_INFO
{
    int nMonday;             
    int nTuesday;            
    int nWednesday;          
    int nThursday;           
    int nFriday;             
    int nSaturday;           
    int nSunday;             
    BOOL bTimeCheckEnable;   
    BOOL bRemoteCheckEnable; 
    char szResvered[220];    
} NET_NUCLEIC_ACID_RULER_INFO;
typedef struct tagNET_CFG_NUCLEIC_ACID_RULER_INFO
{
    DWORD dwSize;                                            
    NET_NUCLEIC_ACID_RULER_INFO stuNucleicAcidRulerInfo[20]; 
} NET_CFG_NUCLEIC_ACID_RULER_INFO;
typedef enum tagEM_JT_PLATECOLOR
{
    EM_JT_PLATECOLOR_UNKNOWN,   
    EM_JT_PLATECOLOR_BLUE,      
    EM_JT_PLATECOLOR_YELLOW,    
    EM_JT_PLATECOLOR_BLACK,     
    EM_JT_PLATECOLOR_WHITE,     
    EM_JT_PLATECOLOR_OTHER = 9, 
} EM_JT_PLATECOLOR;
typedef enum tagEM_JT_SERVER_VERSION
{
    EM_JT_SERVER_VERSION_UNKNOWN = -1, 
    EM_JT_SERVER_VERSION_2013,         
    EM_JT_SERVER_VERSION_2019,         
} EM_JT_SERVER_VERSION;
typedef struct tagNET_JT_SERVER_INFO
{
    char szIP[48];                  
    BOOL bTcpEnable;                
    int nTcpPort;                   
    BOOL bUdpEnable;                
    int nUdpPort;                   
    char szAuthCode[64];            
    EM_JT_SERVER_VERSION emVersion; 
    BYTE bReserverd[252];           
} NET_JT_SERVER_INFO;
typedef struct tagNET_JT_IC_INFO
{
    char szMainIP[48];   
    char szBackupIP[48]; 
    int nTcpPort;        
    int nUdpPort;        
    BYTE bReserverd[64]; 
} NET_JT_IC_INFO;
typedef struct tagNET_JT_UNLOCKSERVER_INFO
{
    char szIp[48];       
    int nTcpPort;        
    BYTE bReserverd[64]; 
} NET_JT_UNLOCKSERVER_INFO;
typedef struct tagNET_CFG_JT_SERVER_INFO
{
    DWORD dwSize;                             
    BOOL bEnable;                             
    int nRegisterMode;                        
    int nCityID;                              
    int nProvinceID;                          
    char szFactory[6];                        
    char szDevType[32];                       
    char szVIN[18];                           
    char szVehicleType[32];                   
    char szDevID[32];                         
    EM_JT_PLATECOLOR emPlateColor;            
    char szPlateNO[32];                       
    char szPhoneNO[16];                       
    char szAuthCode[64];                      
    int nHeartBeatInterval;                   
    int nTcpTimeOut;                          
    int nTcpRetransTimes;                     
    int nUdpTimeOut;                          
    int nUdpRetransTimes;                     
    int nSmsTimeOut;                          
    int nSmsRetransTimes;                     
    NET_JT_SERVER_INFO stuServer[10];         
    int nServerNum;                           
    NET_JT_IC_INFO stuIC;                     
    NET_JT_UNLOCKSERVER_INFO stuUnLockServer; 
    char szIMEI[32];                          
} NET_CFG_JT_SERVER_INFO;
typedef struct tagNET_CFG_REMOTE_DEVICE_TIME_SYNC_INFO
{
    DWORD dwSize;     
    UINT* pnChannels; 
    int nMaxChannel;  
    int nRetChannel;  
    UINT nPeriod;     
    BOOL bEnable;     
} NET_CFG_REMOTE_DEVICE_TIME_SYNC_INFO;
typedef struct tagNET_CFG_SAFETYABNORMAL_INFO
{
    DWORD dwSize;
    BOOL bEnable;                         
    int nExceptionNum;                    
    EM_EXCEPTION_TYPE stuExceptions[16];  
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_SAFETYABNORMAL_INFO;
typedef enum tagEM_ACCELERATION_LEVEL
{
    EM_ACCELERATION_KNOWN = -1, 
    EM_ACCELERATION_LOW,        
    EM_ACCELERATION_MEDIUM,     
    EM_ACCELERATION_HIGH        
} EM_ACCELERATION_LEVEL;
typedef struct tagNET_CFG_VEHICLE_COLLISION_INFO
{
    DWORD dwSize;
    BOOL bEnable;                         
    EM_ACCELERATION_LEVEL emAcceleration; 
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_VEHICLE_COLLISION_INFO;
typedef struct tagNET_CFG_VEHICLE_TURNOVER_INFO
{
    DWORD dwSize;
    BOOL bEnable;                         
    EM_ACCELERATION_LEVEL emAcceleration; 
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_VEHICLE_TURNOVER_INFO;
typedef struct tagNET_CFG_VEHICLE_SUDDENTURN_INFO
{
    DWORD dwSize;
    BOOL bEnable;                         
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_VEHICLE_SUDDENTURN_INFO;
typedef struct tagNET_CFG_VEHICLE_ACCELERATION_INFO
{
    DWORD dwSize;
    BOOL bEnable;                         
    int nThreshold;                       
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_VEHICLE_ACCELERATION_INFO;
typedef struct tagNET_CFG_VEHICLE_DECELERATION_INFO
{
    DWORD dwSize;
    BOOL bEnable;                         
    int nThreshold;                       
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_VEHICLE_DECELERATION_INFO;
typedef struct tagNET_CFG_VEHICLE_ACC_INFO
{
    DWORD dwSize;
    BOOL bAACOnEnable;                         
    NET_ALARM_MSG_HANDLE stuACCOnEventHandler; 
    BOOL bAACOffEnable;                         
    NET_ALARM_MSG_HANDLE stuACCOffEventHandler; 
} NET_CFG_VEHICLE_ACC_INFO;
typedef struct tagNET_VEHICLE_YAWNING_CONTROL_INFO
{
    UINT nInTime;        
    UINT nRecvTimes;     
    BYTE bReserverd[64]; 
} NET_VEHICLE_YAWNING_CONTROL_INFO;
typedef struct tagNET_VEHICLE_EYESCLOSED_CONTROL_INFO
{
    UINT nInTime;        
    UINT nRecvTimes;     
    BYTE bReserverd[64]; 
} NET_VEHICLE_EYESCLOSED_CONTROL_INFO;
typedef struct tagNET_CFG_VEHICLE_DSMALARMCONTROL_INFO
{
    DWORD dwSize;
    NET_VEHICLE_YAWNING_CONTROL_INFO stuYawning;       
    NET_VEHICLE_EYESCLOSED_CONTROL_INFO stuEyesClosed; 
} NET_CFG_VEHICLE_DSMALARMCONTROL_INFO;
typedef struct tagNET_CFG_VEHICLE_NOT_INSPECT_ALARM_INFO
{
    DWORD dwSize;
    BOOL bEnable;   
    int nDelayTime; 
} NET_CFG_VEHICLE_NOT_INSPECT_ALARM_INFO;
typedef enum tagEM_REMOTE_ALARMOUT_POLE
{
    EM_REMOTE_ALARMOUT_POLE_UNKNOWN, 
    EM_REMOTE_ALARMOUT_POLE_LOW,     
    EM_REMOTE_ALARMOUT_POLE_HIGH,    
} EM_REMOTE_ALARMOUT_POLE;
typedef enum tagEM_BIND_EVENT_TYPE
{
    EM_BIND_EVENT_TYPE_UNKNOWN = -1, 
    EM_BIND_EVENT_TYPE_CTR_PHONE,    
    EM_BIND_EVENT_TYPE_CTR_PASS,     
    EM_BIND_EVENT_TYPE_SYS_ARM,      
    EM_BIND_EVENT_TYPE_SYS_DISARM,   
    EM_BIND_EVENT_TYPE_REPORT,       
    EM_BIND_EVENT_TYPE_COMM_FAIL,    
    EM_BIND_EVENT_TYPE_PSTN_OFF,     
    EM_BIND_EVENT_TYPE_BELL_SIREN,   
    EM_BIND_EVENT_TYPE_SYS_ALARM,    
    EM_BIND_EVENT_TYPE_SILENT,       
    EM_BIND_EVENT_TYPE_FIRE_ALARM,   
    EM_BIND_EVENT_TYPE_ZONE01_OPEN,  
    EM_BIND_EVENT_TYPE_KEY_FOB,      
} EM_BIND_EVENT_TYPE;
typedef struct tagNET_REMOTE_ALARMOUT_TIME
{
    BOOL bEnable;                         
    NET_CFG_TIME_SCHEDULE stuTimeSection; 
    BYTE bReserverd[64];                  
} NET_REMOTE_ALARMOUT_TIME;
typedef struct tagNET_REMOTE_ALARMOUT_INFO
{
    char szChnName[128];                      
    char szOutputType[32];                    
    int nOutputMode;                          
    int nPulseDelay;                          
    int nAlarmDelay;                          
    int nSlot;                                
    int nLevel1;                              
    BOOL abLevel2;                            
    int nLevel2;                              
    EM_REMOTE_ALARMOUT_POLE emPole;           
    UINT nBindEventNum;                       
    EM_BIND_EVENT_TYPE emBindEventType[32];   
    NET_REMOTE_ALARMOUT_TIME stuTimeSchedule; 
    BYTE bReserverd[256];                     
} NET_REMOTE_ALARMOUT_INFO;
typedef struct tagNET_CFG_REMOTE_ALARMOUT_INFO
{
    DWORD dwSize;                                    
    UINT nRemoteAlarmOutNum;                         
    NET_REMOTE_ALARMOUT_INFO stuRemoteAlarmOut[128]; 
} NET_CFG_REMOTE_ALARMOUT_INFO;
typedef struct tagNET_CFG_REMAINDER_TIME_WARN_INFO
{
    DWORD dwSize;        
    UINT nWarnThreshold; 
} NET_CFG_REMAINDER_TIME_WARN_INFO;
typedef struct tagNET_CFG_QR_CODE_INFO
{
    DWORD dwSize;    
    UINT nValidTime; 
} NET_CFG_QR_CODE_INFO;
typedef struct tagNET_FLOW_LOWER_INFO
{
    BOOL bEnable;          
    UINT nThreshold;       
    BYTE bReserverd[1024]; 
} NET_FLOW_LOWER_INFO;
typedef struct tagNET_PORT_CONGEST_INFO
{
    BOOL bEnable;          
    UINT nThreshold;       
    BYTE bReserverd[1024]; 
} NET_PORT_CONGEST_INFO;
typedef struct tagNET_CFG_NMP_GLOBAL_INFO
{
    DWORD dwSize;                             
    BOOL bSwitchOffline;                      
    BOOL bTerminalOffline;                    
    BOOL bLoopDetect;                         
    BOOL bIPConflict;                         
    NET_FLOW_LOWER_INFO stuFlowLowerInfo;     
    NET_PORT_CONGEST_INFO stuPortCongestInfo; 
} NET_CFG_NMP_GLOBAL_INFO;
typedef struct tagNET_CFG_HEAT_IMAGING_TEMPER_INFO
{
    DWORD dwSize;
    BOOL bEnable;                         
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_HEAT_IMAGING_TEMPER_INFO;
typedef enum tagEM_NET_ACCESS_TYPE
{
    EM_NET_ACCESS_TYPE_UNKNOWN = -1, 
    EM_NET_ACCESS_TYPE_OFF,          
    EM_NET_ACCESS_TYPE_ALLOW,        
    EM_NET_ACCESS_TYPE_BLOCK,        
} EM_NET_ACCESS_TYPE;
typedef struct tagNET_ALLOW_ADDR_INFO
{
    int nEnableState;      
    char szBeginIP[64];    
    char szEndIP[64];      
    UINT nBeginPort;       
    UINT nEndPort;         
    char szMac[20];        
    BYTE bReserverd[1024]; 
} NET_ALLOW_ADDR_INFO;
typedef struct tagNET_BLOCK_ADDR_INFO
{
    int nEnableState;      
    char szBeginIP[64];    
    char szEndIP[64];      
    UINT nBeginPort;       
    UINT nEndPort;         
    char szMac[20];        
    BYTE bReserverd[1024]; 
} NET_BLOCK_ADDR_INFO;
typedef struct tagNET_NTP_ADDR_INFO
{
    int nEnableState;      
    char szBeginIP[64];    
    char szEndIP[64];      
    BYTE bReserverd[1020]; 
} NET_NTP_ADDR_INFO;
typedef struct tagNET_NTP_ALLOW_ACCCESS_INFO
{
    BOOL bEnable;                         
    UINT nNtpAddrNum;                     
    NET_NTP_ADDR_INFO stuNtpAddrInfo[64]; 
    BYTE bReserverd[1024];                
} NET_NTP_ALLOW_ACCCESS_INFO;
typedef struct tagNET_NETACCESS_RULE_INFO
{
    EM_NET_ACCESS_TYPE emNetAccessType;        
    UINT nAllowAddrNum;                        
    NET_ALLOW_ADDR_INFO stuAllowAddrInfo[128]; 
    BYTE bReserverd1[4];                       
    UINT nBlockAddrNum;                        
    NET_BLOCK_ADDR_INFO stuBlockAddrInfo[128]; 
    BYTE bReserverd[1024];                     
} NET_NETACCESS_RULE_INFO;
typedef struct tagNET_CFG_IP_TABLE_FILTER_INFO
{
    DWORD dwSize;                                     
    BOOL bBanPing;                                    
    NET_NETACCESS_RULE_INFO stuNetAccessRule;         
    NET_NTP_ALLOW_ACCCESS_INFO stuNtpAllowAccessInfo; 
    BOOL bBanhalfConn;                                
} NET_CFG_IP_TABLE_FILTER_INFO;
typedef struct tagNET_CFG_REDUNDANT_STORAGE_STRATEGY_INFO
{
    DWORD dwSize;        
    int nPackMode;       
    TP_U64 nMaxFileSize; 
    UINT nMaxFileTime;   
    UINT nPreRecord;     
    UINT nRecordLatch;   
    BYTE bReserverd[4];  
} NET_CFG_REDUNDANT_STORAGE_STRATEGY_INFO;
typedef struct tagNET_CFG_RECORD_SHORTAGE_ALARM_INFO
{
    DWORD dwSize;         
    BOOL bEnable;         
    int nValidDay;        
    BYTE bReserverd[256]; 
} NET_CFG_RECORD_SHORTAGE_ALARM_INFO;
typedef struct tagNET_LANE_LIST_INFO
{
    int nLaneNumber;           
    int nLaneType;             
    unsigned int nWaitingArea; 
    char szReserved[32];       
} NET_LANE_LIST_INFO;
typedef struct tagNET_SIGNAL_ROAD_LIST_INFO
{
    int nRoadSectionId;                    
    int nIsTwiceCrossing;                  
    char szRoadSectionName[32];            
    int nRoadSectionDir;                   
    int nRoadSectionInLaneNum;             
    int nRoadSectionOutLaneNum;            
    int nLaneListNum;                      
    NET_LANE_LIST_INFO stuLaneListInfo[8]; 
    char szReserved[32];                   
} NET_SIGNAL_ROAD_LIST_INFO;
typedef struct tagNET_CROSS_LIST_INFO
{
    int nCrossType;                               
    int nRoadListInfoNum;                         
    NET_SIGNAL_ROAD_LIST_INFO stuRoadListInfo[8]; 
    char szReserved[32];                          
} NET_CROSS_LIST_INFO;
typedef struct tagNET_CFG_RTSC_SCH_CROSSLIST_INFO
{
    DWORD dwSize;                            
    int nCrossListInfoNum;                   
    NET_CROSS_LIST_INFO stuCrossListInfo[2]; 
} NET_CFG_RTSC_SCH_CROSSLIST_INFO;
typedef struct tagNET_CHANNELS_INFO
{
    int nChannelNumber;      
    int nChannelPhase;       
    int nLampType;           
    int nCrossType;          
    int nRoadSectionDir;     
    int nChannelControlType; 
    char szReserved[32];     
} NET_CHANNELS_INFO;
typedef struct tagNET_CFG_RTSC_SCH_CHANNELS_INFO
{
    DWORD dwSize;                          
    int nMaxChannels;                      
    int nChannelsInfoNum;                  
    NET_CHANNELS_INFO stuChannelsInfo[36]; 
} NET_CFG_RTSC_SCH_CHANNELS_INFO;
typedef struct tagNET_PHASES_INFO
{
    int nGridNo;               
    int nPhaseNum;             
    int nPhaseOrder;           
    int nStartDelayTime;       
    int nStartYellowTime;      
    int nGreenTime;            
    int nGreenFlashTime;       
    int nYellowTime;           
    int nRedclearTime;         
    int nMinimumGreen;         
    int nMaximumGreen;         
    int nBeforeReduction;      
    int nAddedInitial;         
    int nPhaseKeepState;       
    BOOL bFreeEnable;          
    int nSelectDetectorsNum;   
    int nSelectDetectors[128]; 
    char szReserved[32];       
} NET_PHASES_INFO;
typedef struct tagNET_BARRIER_LIST_INFO
{
    int nBarrierNo;                   
    int nPhaseNum;                    
    NET_PHASES_INFO stuPhaseInfo[16]; 
    char szReserved[32];              
} NET_BARRIER_LIST_INFO;
typedef struct tagNET_RINGS_LIST_INFO
{
    int nRingNo;                             
    int nBarrierNum;                         
    NET_BARRIER_LIST_INFO stuBarrierInfo[4]; 
    char szReserved[32];                     
} NET_RINGS_LIST_INFO;
typedef struct tagNET_OVER_LAPS_INFO
{
    int nOverlapNum;         
    int nIncludedPhasesNum;  
    int nIncludedPhases[16]; 
    int nStartDelayTimeNum;  
    int nStartDelayTime[16]; 
    char szReserved[32];     
} NET_OVER_LAPS_INFO;
typedef struct tagNET_CYCLE_PLAN_INFO
{
    int nCycle;                             
    int nCyclePlanNum;                      
    char szCyclePlanName[32];               
    int nOffSet;                            
    BOOL bCoordEnable;                      
    int nRingNum;                           
    char szReserved1[4];                    
    NET_RINGS_LIST_INFO stuRingInfo[4];     
    int nOverLapsNum;                       
    char szReserved2[4];                    
    NET_OVER_LAPS_INFO stuOverLapsInfo[16]; 
    char szReserved[32];                    
} NET_CYCLE_PLAN_INFO;
typedef struct tagNET_CFG_RTSC_SCH_PLANS_INFO
{
    DWORD dwSize;                         
    int nMaxCyclePlans;                   
    int nCyclePlanNum;                    
    NET_CYCLE_PLAN_INFO stuCyclePlan[20]; 
} NET_CFG_RTSC_SCH_PLANS_INFO;
typedef struct tagNET_DAY_ACTION_INFO
{
    int nActionNumber;         
    int nBeginHour;            
    int nBeginMinute;          
    int nCyclePlanNum;         
    int nCyclePlanControlMode; 
    char szReserved[32];       
} NET_DAY_ACTION_INFO;
typedef struct tagNET_DAY_PLAN_INFO
{
    int nDayPlanNumber;                       
    char szDayPlanName[32];                   
    char szReserved1[4];                      
    int nDayActionNum;                        
    NET_DAY_ACTION_INFO stuDayActionInfo[24]; 
    char szReserved[32];                      
} NET_DAY_PLAN_INFO;
typedef struct tagNET_WEEK_PLAN_INFO
{
    int nWeekNumber;        
    int nDayPlanNumber;     
    char szDayPlanName[64]; 
    char szReserved[32];    
} NET_WEEK_PLAN_INFO;
typedef struct tagNET_WEEKS_PLAN_INFO
{
    int nWeekPlanNumber;                   
    int nWeekPlanNum;                      
    char szWeekPlanName[32];               
    NET_WEEK_PLAN_INFO stuWeekPlanInfo[7]; 
    char szReserved[32];                   
} NET_WEEKS_PLAN_INFO;
typedef struct tagNET_COMMON_DATE_PLAN_INFO
{
    int nDatePlanNumber;     
    int nBeginMonth;         
    int nBeginDay;           
    int nEndMonth;           
    int nEndDay;             
    int nWeekPlanNumber;     
    char szWeekPlanName[64]; 
    char szReserved[32];     
} NET_COMMON_DATE_PLAN_INFO;
typedef struct tagNET_SPECIAL_DATE_PLAN_INFO
{
    int nDatePlanNumber;     
    int nBeginMonth;         
    int nBeginDay;           
    int nEndMonth;           
    int nEndDay;             
    int nWeekPlanNumber;     
    char szWeekPlanName[32]; 
    char szReserved[32];     
} NET_SPECIAL_DATE_PLAN_INFO;
typedef struct tagNET_CFG_RTSC_SCH_MANAGE_INFO
{
    DWORD dwSize;                                        
    int nMaxDayPlans;                                    
    int nMaxDayActions;                                  
    int nMaxWeekPlans;                                   
    int nMaxCommonDatePlans;                             
    int nMaxSpecialDatePlans;                            
    int nDayplansNum;                                    
    NET_DAY_PLAN_INFO stuDayPlanInfo[56];                
    int nWeekPlansNum;                                   
    NET_WEEKS_PLAN_INFO stuWeeksPlanInfo[20];            
    int nCommonDatePlanNum;                              
    NET_COMMON_DATE_PLAN_INFO stuCommonDatePlanInfo[16]; 
    int nSpecialDateNum;                                 
    NET_SPECIAL_DATE_PLAN_INFO stuSpecialDatePlan[16];   
} NET_CFG_RTSC_SCH_MANAGE_INFO;
typedef struct tagNET_SIGNAL_VEHICLE_DETECTOR_INFO
{
    int nVehicleDetectorNumber;       
    int nVehicleDetectorRoadNum;      
    int nVehicleDetectorType;         
    int nVehicleDetectorCallPhase;    
    int nvehicleDetectorPost;         
    int nVehiclePrority;              
    char szVideoDetectorIp[16];       
    int nVideoDetectorPort;           
    char szVideoDetectorUser[72];     
    char szVideoDetectorPassword[72]; 
    int nVehicleDetectorChannelNum;   
    int nVideoDetectorChn;            
    int nVehicleDetectorentryDir;     
    int nVehicleDetectorentryType;    
    int nVehicleDetectorPortNum;      
    char szReserved[32];              
} NET_SIGNAL_VEHICLE_DETECTOR_INFO;
typedef struct tagNET_CFG_RTSC_SCH_VEHICLE_DETECTORLIST_INFO
{
    DWORD dwSize;                                                
    int nMaxVehicleDetectors;                                    
    int nVehicleDetectorNum;                                     
    NET_SIGNAL_VEHICLE_DETECTOR_INFO stuVehicleDetectorInfo[32]; 
} NET_CFG_RTSC_SCH_VEHICLE_DETECTORLIST_INFO;
typedef struct tagNET_PED_DETECTOR_INFO
{
    int nPedestrianDetectorNumber;     
    int nPedestrianDetectorCallPhase;  
    int nPedestrianDetectorPortNum;    
    int nPedestrianDetectorType;       
    char szPedestrianDetectorIp[16];   
    int nPedestrianDetectorPort;       
    char szPedestrianDetectorUser[72]; 
    char szPedestrianDetectorPwd[72];  
    int nPedestrianDetectorArea;       
    char szReserved[32];               
} NET_PED_DETECTOR_INFO;
typedef struct tagNET_CFG_RTSC_SCH_PEDDETECTOR_LIST_INFO
{
    DWORD dwSize;                                 
    int nMaxPedestrianDetectors;                  
    int nPedDetectorNum;                          
    NET_PED_DETECTOR_INFO stuPedDetectorInfo[16]; 
} NET_CFG_RTSC_SCH_PEDDETECTOR_LIST_INFO;
typedef struct tagNET_PHASE_PRIORITY_CONFIG_INFO
{
    int nId;                 
    int nPhaseNum;           
    int nPhaseOrder;         
    int nMinGreenThr;        
    int nSkipThr;            
    int nEnbleDetectorsNum;  
    int nEnbleDetectors[16]; 
    char szReserved[32];     
} NET_PHASE_PRIORITY_CONFIG_INFO;
typedef struct tagNET_PEDESTRAIN_PRIORITY_INFO
{
    int nCycleNum;                                                  
    int nSuspendingPeriod;                                          
    int nPhasePriorityConfigNum;                                    
    NET_PHASE_PRIORITY_CONFIG_INFO stuphasePriorityConfigInfo[255]; 
    char szReserved[256];                                           
} NET_PEDESTRAIN_PRIORITY_INFO;
typedef struct tagNET_CFG_RTSC_SCH_PEDDESTRAIN_PRIORITY_INFO
{
    DWORD dwSize;                                               
    int nPedestrainPriorityNum;                                 
    NET_PEDESTRAIN_PRIORITY_INFO stupedestrainPriorityInfo[20]; 
} NET_CFG_RTSC_SCH_PEDDESTRAIN_PRIORITY_INFO;
typedef struct tagNET_DETECTOR_CONFIG_INFO
{
    int nDetectorId;     
    BOOL bEnable;        
    char szReserved[32]; 
} NET_DETECTOR_CONFIG_INFO;
typedef struct tagNET_PHASE_CONFIG_INFO
{
    int nPhaseNum;       
    int nPhaseOrder;     
    BOOL bRespondEnable; 
    float fReduceRatio;  
    char szReserved[32]; 
} NET_PHASE_CONFIG_INFO;
typedef struct tagNET_COMMON_CONFIG_INFO
{
    float fRatioLimit;   
    int nInOCTimes;      
    int nOutOCTimes;     
    char szReserved[32]; 
} NET_COMMON_CONFIG_INFO;
typedef struct tagNET_OVER_FLOW_CONTROL_INFO
{
    int nCycleNum;                                    
    NET_COMMON_CONFIG_INFO stuCommnCofigInfo;         
    int nDetectConfigNum;                             
    NET_DETECTOR_CONFIG_INFO stuDetectConfigInfo[32]; 
    int nPhaseConfigNum;                              
    NET_PHASE_CONFIG_INFO stuPhaseConfigInfo[16];     
    char szReserved[32];                              
} NET_OVER_FLOW_CONTROL_INFO;
typedef struct tagNET_CFG_RTSC_SCH_OVERFLOW_CONTROL_INFO
{
    DWORD dwSize;                                          
    int nOverflowControlNum;                               
    NET_OVER_FLOW_CONTROL_INFO stuOverFlowControlInfo[20]; 
} NET_CFG_RTSC_SCH_OVERFLOW_CONTROL_INFO;
typedef struct tagNET_PHASE_CONFIG_NIGHT_INFO
{
    int nPhaseNum;       
    int nPhaseOrder;     
    BOOL bHold;          
    int nMaxInterval;    
    char szReserved[32]; 
} NET_PHASE_CONFIG_NIGHT_INFO;
typedef struct tagNET_NIGHT_ASK_INFO
{
    int nCycleNum;                                           
    int nPhaseConfigNum;                                     
    NET_PHASE_CONFIG_NIGHT_INFO stuPhaseConfigNightInfo[16]; 
    char szReserved[32];                                     
} NET_NIGHT_ASK_INFO;
typedef struct tagNET_CFG_RTSC_SCH_NIGHTASK_INFO
{
    DWORD dwSize;                           
    int nNightAskNum;                       
    NET_NIGHT_ASK_INFO stuNightAskInfo[20]; 
} NET_CFG_RTSC_SCH_NIGHTASK_INFO;
typedef struct tagNET_CYCLE_SETTINGS_INFO
{
    int nCycleMax;            
    int nCycleMin;            
    float fSaturitionUpLimit; 
    float fSaturitionDnLimit; 
    int nCycleUpLimit;        
    int nCycleDnLimit;        
    int nCycleUpStep;         
    int nCycleDnStep;         
    int nSmoothCycNum;        
    int nPermitDoubleCyc;     
    int nDoubleCycThreshold;  
    char szReserved[32];      
} NET_CYCLE_SETTINGS_INFO;
typedef struct tagNET_VOTE_SETTINGS_INFO
{
    int nCycleChangeTolerate; 
    int nCycleUpVote;         
    int ncycleDnVote;         
    char szReserved[32];      
} NET_VOTE_SETTINGS_INFO;
typedef struct tagNET_PHASE_PRIORITYS_INFO
{
    int nPhaseNum;       
    int nPhaseOrder;     
    BOOL bPriority;      
    char szReserved[32]; 
} NET_PHASE_PRIORITYS_INFO;
typedef struct tagNET_DETECTOR_SETTINGS_INFO
{
    int nDetectorNumber;    
    int nDetectorRoadNum;   
    int nDetectorentryDir;  
    int nDetectorentryType; 
    BOOL bJoinPhaseSplit;   
    BOOL bJoinCycleSplit;   
    char szReserved[32];    
} NET_DETECTOR_SETTINGS_INFO;
typedef struct tagNET_CLOSURE_SETTINGS_INFO
{
    int nRingNo;                
    int nBarrierNo;             
    int nGridNo;                
    int nPhaseNum;              
    int nPhaseOrder;            
    char szReferDeviceId[72];   
    char szReferDeviceName[72]; 
    int nReferPlanNum;          
    char szReferPlanName[72];   
    int nReferPhaseNum;         
    int nReferPhaseOrder;       
    double dSplitTime;          
    char szReserved1[4];        
    int nReferType;             
    char szReserved[32];        
} NET_CLOSURE_SETTINGS_INFO;
typedef struct tagNET_PHASE_LIST_INFO
{
    int nPhaseNum;                 
    int nPhaseOrder;               
    int nRingNo;                   
    int nBarrierNo;                
    int nGridNo;                   
    BOOL bUsePhaseTime;            
    int nPhaseTime;                
    int nPhaseUpLimit;             
    int nPhaseDnLimit;             
    BOOL bUseSplitTime;            
    double dSplitBase;             
    int nSplitUpLimit;             
    int nSplitDnLimit;             
    double dSaturitionWeight;      
    double dSplitMaxStep;          
    BOOL bPermitMaxLaneSaturition; 
    char szReserved[32];           
} NET_PHASE_LIST_INFO;
typedef struct tagNET_PHASE_PRIORITY_INFO
{
    int nPhaseNum;       
    int nPhaseOrder;     
    BOOL bPriority;      
    char szReserved[32]; 
} NET_PHASE_PRIORITY_INFO;
typedef struct tagNET_DETECTOR_SETTING_INFO
{
    int nDetectorNum;       
    int nDetectorRoadNum;   
    int nDetectorentryDir;  
    int nDetectorentryType; 
    BOOL bJoinPhaseSplit;   
    BOOL bJoinCycleSplit;   
    char szReserved[32];    
} NET_DETECTOR_SETTING_INFO;
typedef struct tagNET_CLOSURE_SETTING_INFO
{
    int nRingNo;                
    int nBarrierNo;             
    int nGridNo;                
    int nPhaseNum;              
    int nPhaseOrder;            
    char szReferDeviceId[72];   
    char szReferDeviceName[72]; 
    int nReferPlanNum;          
    char szReferPlanName[72];   
    int nReferPhaseNum;         
    int nReferPhaseOrder;       
    double dbSplitTime;         
    int nReferType;             
    char szReserved1[4];        
    char szReserved[32];        
} NET_CLOSURE_SETTING_INFO;
typedef struct tagNET_PHASE_SETTINGS_INFO
{
    int nPhaseListNum;                                    
    NET_PHASE_LIST_INFO stuPhaseListInfo[16];             
    int nPhasePrioritysNum;                               
    NET_PHASE_PRIORITY_INFO stuPhasePriorityInfo[16];     
    int nDetectorSettingsNum;                             
    NET_DETECTOR_SETTING_INFO stuDetectorSettingInfo[16]; 
    int nClosureSettingNum;                               
    NET_CLOSURE_SETTING_INFO stuClosureSettingInfo[16];   
    char szReserved[32];                                  
} NET_PHASE_SETTINGS_INFO;
typedef struct tagNET_SENIOR_INFO
{
    int nCycleSettingNum;                            
    NET_CYCLE_SETTINGS_INFO stuCycleSettingInfo[20]; 
    NET_VOTE_SETTINGS_INFO stuVoteSettingInfo;       
    NET_PHASE_SETTINGS_INFO stuPhaseSettingInfo;     
    char szReserved[32];                             
} NET_SENIOR_INFO;
typedef struct tagOPTIMIZES
{
    int nCyclePlanNum;             
    int nCoordinatePhaseNum;       
    int nCoordinatePhaseOrder;     
    int nCoordinateRingNo;         
    int nCoordinateBarrierNo;      
    int nCoordinateGridNo;         
    char szReferDeviceId[72];      
    char szReferDeviceName[72];    
    int nReferCyclePlanNum;        
    char szReferCyclePlanName[72]; 
    int nReferPhaseNum;            
    int nReferPhaseOrder;          
    int nReferType;                
    int nOffset;                   
    NET_SENIOR_INFO stuSeniorInfo; 
    char szReserved[32];           
} NET_OPTIMIZES_INFO;
typedef struct tagNET_CFG_RTSC_SCH_OPTIMIZES_INFO
{
    DWORD dwSize;                           
    int nOptimizesInfoNum;                  
    NET_OPTIMIZES_INFO stuOptimizeInfo[20]; 
} NET_CFG_RTSC_SCH_OPTIMIZES_INFO;
typedef struct tagNET_PROPERTY_LIST_INFO
{
    int nVarlaneProperty;      
    int nVarlaneTochanelNum;   
    int nVarlaneTochanelColor; 
    int nVarlanevehDectNumber; 
    char szReserved[32];       
} NET_PROPERTY_LIST_INFO;
typedef struct tagNET_PROPERTY_PLAN_LIST_INFO
{
    int nVarlaneProperty;    
    int nVarlaneDectTime;    
    int nQueueDissimilarity; 
    int nQueueLen;           
    char szReserved[32];     
} NET_PROPERTY_PLAN_LIST_INFO;
typedef struct tagNET_LANE_PLAN_LIST_INFO
{
    int nVarlaneId;                                     
    int nVarlaneNumber;                                 
    int nKeepTime;                                      
    int nControlMode;                                   
    int nCurrentVarlaneProperty;                        
    int nPropertyPlanListNum;                           
    NET_PROPERTY_PLAN_LIST_INFO stuPropertyPlanInfo[7]; 
    char szReserved[32];                                
} NET_LANE_PLAN_LIST_INFO;
typedef struct tagNET_VARLANE_PLAN_LIST_INFO
{
    int nVarlanePatternNumber;                   
    char szVarlanePatternName[64];               
    int nLanePlanNum;                            
    NET_LANE_PLAN_LIST_INFO stuLanePlanInfo[12]; 
    char szReserved[32];                         
} NET_VARLANE_PLAN_LIST_INFO;
typedef struct tagNET_VAR_LANE_LIST_INFO
{
    int nVarlaneId;                            
    int nVarlaneNumber;                        
    int nVarlaneFlashTime;                     
    int nPropertyListNum;                      
    NET_PROPERTY_LIST_INFO stuPropertyInfo[7]; 
    char szReserved[32];                       
} NET_VAR_LANE_LIST_INFO;
typedef struct tagNET_CFG_RTSC_SCH_VARLANELIST_INFO
{
    DWORD dwSize;                                         
    int nVarlaneListNum;                                  
    NET_VAR_LANE_LIST_INFO stuVarLaneListInfo[8];         
    int nVarlanePlanListNum;                              
    NET_VARLANE_PLAN_LIST_INFO stuVarlanePlanListInfo[8]; 
} NET_CFG_RTSC_SCH_VARLANELIST_INFO;
typedef struct tagNET_DAY_ACTIONS_INFO
{
    int nActionNumber;         
    int nBeginHour;            
    int nBeginMinute;          
    int nCyclePlanControlMode; 
    char szReserved[32];       
} NET_DAY_ACTIONS_INFO;
typedef struct tagNET_DAY_PLANS_INFO
{
    int nDayPlanNumber;                        
    char szDayPlanName[64];                    
    int nDayActionNum;                         
    NET_DAY_ACTIONS_INFO stuDayActionInfo[24]; 
    char szReserved[32];                       
} NET_DAY_PLANS_INFO;
typedef struct tagNET_WEEK_PLANS_INFO
{
    int nWeekPlanNumber;                   
    char szWeekPlanName[64];               
    int nWeekPlanNum;                      
    NET_WEEK_PLAN_INFO stuWeekPlanInfo[7]; 
    char szReserved[32];                   
} NET_WEEK_PLANS_INFO;
typedef struct tagNET_SPECIAL_DATE_PLANS_INFO
{
    int nDatePlanNumber;     
    int nBeginMonth;         
    int nBeginDay;           
    int nEndMonth;           
    int nEndDay;             
    int nWeekPlanNumber;     
    char szWeekPlanName[64]; 
    char szReserved[32];     
} NET_SPECIAL_DATE_PLANS_INFO;
typedef struct tagNET_CFG_RTSC_SCH_VARLANE_MANAGEMENT_INFO
{
    DWORD dwSize;                                          
    int nDayPlansNum;                                      
    NET_DAY_PLANS_INFO stuDayPlansInfo[20];                
    int nWeekPlansNum;                                     
    NET_WEEK_PLANS_INFO stuWeekPlansInfo[10];              
    int nCommonDatePlanNum;                                
    NET_COMMON_DATE_PLAN_INFO stuCommonDatePlanInfo[8];    
    int nSpecialDatePlanNum;                               
    NET_SPECIAL_DATE_PLANS_INFO stuSpecialDatePlanInfo[8]; 
} NET_CFG_RTSC_SCH_VARLANE_MANAGEMENT_INFO;
typedef struct tagNET_BARRIERS_INFO
{
    int nBarrierNo;                   
    int nPhaseNum;                    
    NET_PHASES_INFO stuPhaseInfo[16]; 
    char szReserved[32];              
} NET_BARRIERS_INFO;
typedef struct tagNET_RINGS_INFO
{
    int nRingNo;                         
    int nBarriersNum;                    
    NET_BARRIERS_INFO stuBarriesInfo[4]; 
    char szReserved[32];                 
} NET_RINGS_INFO;
typedef struct tagNET_CFG_RTSC_TEMP_SCH_INFO
{
    DWORD dwSize;                           
    int nStartTimeNum;                      
    int nStartTime[4];                      
    int nEndTimeNum;                        
    int nEndTime[4];                        
    int nRingsNum;                          
    NET_RINGS_INFO stuRingsInfo[4];         
    int nOverLapsNum;                       
    NET_OVER_LAPS_INFO stuOverLapsInfo[16]; 
} NET_CFG_RTSC_TEMP_SCH_INFO;
typedef struct tagNET_EXAM_OBJ_INFO
{
    char szName[256];        
    char szAbbreviation[64]; 
    BOOL bRequired;          
    BOOL bIsUsed;            
    BYTE bReserverd[1024];   
} NET_EXAM_OBJ_INFO;
typedef struct tagNET_CFG_COURSE_INFO
{
    DWORD dwSize;                      
    UINT nExamObjNum;                  
    NET_EXAM_OBJ_INFO stuExamNum[128]; 
} NET_CFG_COURSE_INFO;
typedef struct tagNET_EXAMINATION_ROOM_INFO
{
    char szExamRoomName[256]; 
    char szExamRoomNo[256];   
    UINT nCandidatesNum;      
    UINT nChannelNum;         
    UINT nChannels[512];      
    BYTE bReserverd[1024];    
} NET_EXAMINATION_ROOM_INFO;
typedef struct tagNET_CFG_EXAMINATION_ROOM_INFO
{
    DWORD dwSize;                                   
    UINT nEaxmRoomNum;                              
    NET_EXAMINATION_ROOM_INFO stuEaxmRoomInfo[256]; 
    char szExamSiteName[256];                       
    char szExamSiteNo[256];                         
} NET_CFG_EXAMINATION_ROOM_INFO;
typedef struct tagNET_CUSTOM_FILE_DIR_NAME_INFO
{
    UINT nCustomDirNum;             
    char szCustomDirName[32][256];  
    UINT nCustomFileNum;            
    char szCustomFileName[32][256]; 
    BYTE bReserverd[1024];          
} NET_CUSTOM_FILE_DIR_NAME_INFO;
typedef struct tagNET_CUSTOM_FILE_DIR_RULE_INFO
{
    UINT nCustomDirNum;             
    char szCustomDirRule[32][256];  
    UINT nCustomFileNum;            
    char szCustomFileRule[32][256]; 
    BYTE bReserverd[1024];
} NET_CUSTOM_FILE_DIR_RULE_INFO;
typedef struct tagNET_CFG_RECORD_NAME_RULE_INFO
{
    DWORD dwSize;                                    
    BYTE bReserverd1[4];                             
    NET_CUSTOM_FILE_DIR_NAME_INFO stuCustomNameInfo; 
    NET_CUSTOM_FILE_DIR_RULE_INFO stuCustomRuleInfo; 
} NET_CFG_RECORD_NAME_RULE_INFO;
typedef enum tagEM_NET_KVM_CONTROL_MODE
{
    EM_NET_KVM_CONTROL_MODE_UNKNOWN,         
    EM_NET_KVM_CONTROL_MODE_DEFAULT,         
    EM_NET_KVM_CONTROL_MODE_WIN7_MULTISCREEN 
} EM_NET_KVM_CONTROL_MODE;
typedef struct tagNET_CFG_KVM_CONTROL_DATA_MODE_INFO
{
    DWORD dwSize;                   
    EM_NET_KVM_CONTROL_MODE emMode; 
} NET_CFG_KVM_CONTROL_DATA_MODE_INFO;
typedef struct tagNET_CFG_PRIVACY_FACEID_INFO
{
    DWORD dwSize;    
    int nCount;      
    int nFaceID[32]; 
} NET_CFG_PRIVACY_FACEID_INFO;
typedef struct tagNET_CFG_CHANG_BAI_VEHICLE_PROHIBITED_INFO
{
    DWORD dwSize;                           
    NET_TIME stuVehicleProhibitedStartTime; 
    NET_TIME stuVehicleProhibitedEndTime;   
} NET_CFG_CHANG_BAI_VEHICLE_PROHIBITED_INFO;
typedef struct tagNET_CFG_TUXI_SN_ACCESS_TABLE_INFO
{
    DWORD dwSize;          
    BOOL bEnable;          
    int nCount;            
    char szTable[512][64]; 
} NET_CFG_TUXI_SN_ACCESS_TABLE_INFO;
typedef struct tagNET_CFG_ATTENDANCECFG_XL_CUSTOM_INFO
{
    DWORD dwSize;           
    int nAttendanceType;    
    int nCheckInEarlyTime;  
    int nCheckInDelayTime;  
    int nCheckOutEarlyTime; 
    int nCheckOutDelayTime; 
} NET_CFG_ATTENDANCECFG_XL_CUSTOM_INFO;
typedef struct tagNET_CFG_HB_ECOLOGY_INFO
{
    DWORD dwSize;             
    BYTE bReserverd[4];       
    char szDeviceID[128];     
    char szUserUniqueID[128]; 
} NET_CFG_HB_ECOLOGY_INFO;
typedef struct tagNET_CFG_LOSS_FRAME_ALARM_INFO
{
    DWORD dwSize;                         
    BOOL bEnable;                         
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_LOSS_FRAME_ALARM_INFO;
typedef enum tagEM_NET_CONSUMPTION_MODE
{
    EM_NET_CONSUMPTION_MODE_UNKNOWN = -1, 
    EM_NET_CONSUMPTION_MODE_QUOTA,        
    EM_NET_CONSUMPTION_MODE_NONQUOTA,     
    EM_NET_CONSUMPTION_MODE_DEPOSIT,      
} EM_NET_CONSUMPTION_MODE;
typedef struct tagNET_CFG_CONSUMPTION_STRATEGY_INFO
{
    DWORD dwSize;                   
    EM_NET_CONSUMPTION_MODE emMode; 
    BOOL bOfflineEnable;            
    UINT nConsumptionInterval;      
} NET_CFG_CONSUMPTION_STRATEGY_INFO;
typedef enum tagEM_NET_WIEGAND_MODE
{
    EM_NET_WIEGAND_TRANSFER_MODE_UNKNOWN = -1, 
    EM_NET_WIEGAND_TRANSFER_MODE_INPUT,        
    EM_NET_WIEGAND_TRANSFER_MODE_OUTPUT,       
} EM_NET_WIEGAND_MODE;
typedef enum tagEM_NET_WIEGAND_TRANSFER_MODE
{
    EM_NET_WIEGAND_MODE_UNKNOWN = -1, 
    EM_NET_WIEGAND_MODE_BIT_34,       
    EM_NET_WIEGAND_MODE_BIT_66,       
    EM_NET_WIEGAND_MODE_BIT_26,       
    EM_NET_WIEGAND_MODE_BIT_32,       
    EM_NET_WIEGAND_MODE_BIT_42,       
} EM_NET_WIEGAND_TRANSFER_MODE;
typedef enum tagEM_NET_WIEGAND_OUT_TYPE
{
    EM_NET_WIEGAND_OUT_TYPE_UNKNOWN = -1, 
    EM_NET_WIEGAND_OUT_TYPE_ID,           
    EM_NET_WIEGAND_OUT_TYPE_CARD_NO,      
} EM_NET_WIEGAND_OUT_TYPE;
typedef struct tagNET_WIEGAND_INFO
{
    EM_NET_WIEGAND_MODE emMode;                  
    int nPulseWidth;                             
    int nPulseStep;                              
    EM_NET_WIEGAND_TRANSFER_MODE emTransferMode; 
    EM_NET_WIEGAND_OUT_TYPE emOutType;           
    DWORD dwInputType;                           
    UINT nDoorNo;                                
    BYTE bReserverd[1024];                       
} NET_WIEGAND_INFO;
typedef struct tagNET_CFG_WIEGAND_INFO
{
    DWORD dwSize;                        
    int nCount;                          
    NET_WIEGAND_INFO stuWiegandInfos[8]; 
} NET_CFG_WIEGAND_INFO;
typedef struct tagNET_CFG_AI_PICK_DETECT_INFO
{
    DWORD dwSize;                         
    BOOL bEnable;                         
    char szIP[32];                        
    UINT nPort;                           
    BOOL bKeyWordsEnable;                 
    int nKeyWordsNum;                     
    char szKeyWordsText[300][64];         
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_AI_PICK_DETECT_INFO;
typedef struct tagNET_CFG_DISABLE_LIGHTING_LINKAGE_INFO
{
    DWORD dwSize;    
    BOOL bEnable;    
    char szName[32]; 
} NET_CFG_DISABLE_LIGHTING_LINKAGE_INFO;
typedef struct tagNET_CFG_DISABLE_VOICE_LINKAGE_INFO
{
    DWORD dwSize;    
    BOOL bEnable;    
    char szName[32]; 
} NET_CFG_DISABLE_VOICE_LINKAGE_INFO;
typedef struct tagNET_MOTION_DETECT_WINDOW
{
    UINT nThreshold;      
    UINT nSensitive;      
    int nMotionRow;       
    int nMotionCol;       
    BYTE nRegion[32][32]; 
    int nId;              
    char szName[256];     
    char szResvered[256]; 
} NET_MOTION_DETECT_WINDOW;
typedef struct tagNET_CFG_MOTION_DETECT_INFO
{
    DWORD dwSize;                                      
    BOOL bEnable;                                      
    BOOL bPtzManualEnable;                             
    BOOL bOsdTwinkleEnable;                            
    UINT nVolumeRatio;                                 
    UINT nSubRatio;                                    
    NET_ALARM_MSG_HANDLE stuEventHandler;              
    int nMotionDetectWindowCount;                      
    NET_MOTION_DETECT_WINDOW stuMotionDetectWindow[4]; 
} NET_CFG_MOTION_DETECT_INFO;
typedef struct tagNET_CFG_LEASE_RULES_INFO
{
    DWORD dwSize;      
    BOOL bEnable;      
    int nReminderTime; 
    int nPaddingTime;  
} NET_CFG_LEASE_RULES_INFO;
typedef enum tagNET_EM_CFG_OPERATE_TYPE
{
    NET_EM_CFG_SNAP_MODE,               
    NET_EM_CFG_DEV_CAR_COACH,           
    NET_EM_CFG_YUEQING_SUPPLYLIGHTING,  
    NET_EM_CFG_MEDIA_GLOBAL,            
    NET_EM_CFG_PARKINGSPACECELL_STATUS, 
    NET_EM_CFG_PARKINGSPACELIGHT_STATE, 
    NET_EM_CFG_COAXIAL_LIGHT,           
    NET_EM_CFG_VIDEO_OUT,               
    NET_EM_CFG_MEDIA_ENCRYPT = 9,            
    NET_EM_CFG_COUNTRY,                      
    NET_EM_CFG_VIDEOSTANDARD,                
    NET_EM_CFG_SERIAL_PUSH_LOG,              
    NET_EM_CFG_PRESET_SNAP_PICTURE_NUM,      
    NET_EM_CFG_DOWNLOAD_ENCRYPT,             
    NET_EM_CFG_LIFT_CONTROL_OPTION,          
    NET_EM_CFG_HEALTH_CODE,                  
    NET_EM_CFG_RTMP,                         
    NET_EM_CFG_HUMAN_THERMOMETRY_COMPENSATE, 
    NET_EM_CFG_LOCAL_HEAT_IMAGE_THERMOMETRY, 
    NET_EM_CFG_ACCESSCONTROL_MEASURE_TEMP,   
    NET_EM_CFG_DEBUGINFO_REDIR,              
    NET_EM_CFG_JT_SERVER,               
    NET_EM_CFG_REMOTE_DEVICE_TIME_SYNC, 
    NET_EM_CFG_REMOTE_ALARM_OUT,         
    NET_EM_CFG_REMAINDER_TIME_WARN,      
    NET_EM_CFG_QR_CODE,                  
    NET_EM_CFG_NMP_GLOBAL,               
    NET_EM_CFG_HEAT_IMAGING_TEMPER,      
    NET_EM_CFG_IP_TABLE_FILTER,          
    NET_EM_CFG_HB_ECOLOGY_INFO,          
    NET_EM_CFG_LOSS_FRAME_ALARM,         
    NET_EM_CFG_ALARMIN,                  
    NET_EM_CFG_USB_FLASH,                
    NET_EM_CFG_DISPLAY_CONNECT,          
    NET_EM_CFG_AI_PICK_DETECT,           
    NET_EM_CFG_DISABLE_LIGHTING_LINKAGE, 
    NET_EM_CFG_DISABLE_VOICE_LINKAGE,    
    NET_EM_CFG_MOTION_DETECT,            
    NET_EM_CFG_SNAP_FPS,                 
    NET_EM_CFG_STREAM_LOCK,              
    NET_EM_CFG_CAMERA_STREAM_LOCK,       
    NET_EM_CFG_EAR_DETECTION_CONFIG,     
    NET_EM_CFG_SOUND_CONFIG,             
    NET_EM_CFG_PASSENGER_FLOW_CONFIG,    
    NET_EM_CFG_TRAFFIC_LAMP_CONFIG,      
    NET_EM_CFG_LOCAL_INFO,               
    NET_EM_CFG_DISABLE_BEEP_LINKAGE,     
    NET_EM_CFG_AREA_ARM_MODE,            
    NET_EM_CFG_STORE_ENCRYPT,            
    NET_EM_CFG_VEHICLE_ALARM_LINK_PARAM, 
    NET_EM_CFG_MOBILE_PHONE_APPLICATION, 
    NET_EM_CFG_VSP_CGI,                  
    NET_EM_CFG_VSP_NTP_SERVER,           
    NET_EM_CFG_DEVICE_DISCOVERY,         
    NET_EM_CFG_LLDP_GLOBAL,              
    NET_EM_CFG_LOGIN_AUTH_CTRL,          
    NET_EM_CFG_CHANNELTITLE = 1000,  
    NET_EM_CFG_TIMETITLE,            
    NET_EM_CFG_CUSTOMTITLE,          
    NET_EM_CFG_CUSTOMTITLETEXTALIGN, 
    NET_EM_CFG_OSDCOMMINFO,          
    NET_EM_CFG_OSD_PTZZOOM,          
    NET_EM_CFG_GPSTITLE,             
    NET_EM_CFG_OSD_NUMBERSTATPLAN,   
    NET_EM_CFG_GPSSTARNUM_OSD,       
    NET_EM_CFG_PICTURETITLE,         
    NET_EM_CFG_OSD_FACEFLOWSTAT,     
    NET_EM_CFG_PTZ_PRESET,              
    NET_EM_CFG_PTZ_PATTERN,             
    NET_EM_CFG_PTZ_RS485_DETECT,        
    NET_EM_CFG_PTZ_COORDINATES,         
    NET_EM_CFG_PTZ_DIRECTION,           
    NET_EM_CFG_TEMPERATURE,             
    NET_EM_CFG_COVERS,                  
    NET_EM_CFG_USER_DEF_TITLE,          
    NET_EM_CFG_SNAP_OSD,                
    NET_EM_CFG_OBJECT_DETECT_SNAP_SHOT, 
    NET_EM_CFG_ENCODE_VIDEO = 1100,      
    NET_EM_CFG_ENCODE_VIDEO_PACK,        
    NET_EM_CFG_ENCODE_VIDEO_SVC,         
    NET_EM_CFG_ENCODE_VIDEO_PROFILE,     
    NET_EM_CFG_ENCODE_AUDIO_COMPRESSION, 
    NET_EM_CFG_ENCODE_AUDIO_INFO,        
    NET_EM_CFG_ENCODE_SNAP_INFO,         
    NET_EM_CFG_ENCODE_SNAPTIME,          
    NET_EM_CFG_ENCODE_CHANNELTITLE,      
    NET_EM_CFG_ENCODE_DELAY_MODE,        
    NET_EM_CFG_ENCODE_SIGNAL_FORMAT,     
    NET_EM_CFG_AUDIOIN_SOURCE = 1200,      
    NET_EM_CFG_AUDIOIN_DENOISE,            
    NET_EM_CFG_AUDIOIN_VOLUME,             
    NET_EM_CFG_AUDIOOUT_VOLUME,            
    NET_EM_CFG_AUDIOOUT_MODE,              
    NET_EM_CFG_LOOPPLAYBACK_AUDIOALARM,    
    NET_EM_CFG_REMOTE_AUDIO_OUTPUT_VOLUME, 
    NET_EM_CFG_VIDEOIN_SWITCHMODE = 1300, 
    NET_EM_CFG_VIDEOIN_COLOR,             
    NET_EM_CFG_VIDEOIN_IMAGE_OPT,         
    NET_EM_CFG_VIDEOIN_STABLE,            
    NET_EM_CFG_VIDEOIN_IRISAUTO,          
    NET_EM_CFG_VIDEOIN_IMAGEENHANCEMENT,  
    NET_EM_CFG_VIDEOIN_EXPOSURE_NORMAL,   
    NET_EM_CFG_VIDEOIN_EXPOSURE_OTHER,    
    NET_EM_CFG_VIDEOIN_EXPOSURE_SHUTTER,  
    NET_EM_CFG_VIDEOIN_BACKLIGHT,         
    NET_EM_CFG_VIDEOIN_INTENSITY,         
    NET_EM_CFG_VIDEOIN_LIGHTING,          
    NET_EM_CFG_VIDEOIN_DEFOG,             
    NET_EM_CFG_VIDEOIN_FOCUSMODE,         
    NET_EM_CFG_VIDEOIN_FOCUSVALUE,        
    NET_EM_CFG_VIDEOIN_WHITEBALANCE,      
    NET_EM_CFG_VIDEOIN_DAYNIGHT,          
    NET_EM_CFG_VIDEOIN_DAYNIGHT_ICR,      
    NET_EM_CFG_VIDEOIN_SHARPNESS,         
    NET_EM_CFG_VIDEOIN_COMM_DENOISE,      
    NET_EM_CFG_VIDEOIN_3D_DENOISE,        
    NET_EM_CFG_VIDEOIN_FOCUSEX,           
    NET_EM_CFG_VIDEOIN_LIGHTINGEX,        
    NET_EM_CFG_VIDEOIN_VIEWRANGESTATUS,   
    NET_EM_CFG_VIDEOIN_LIGHTING_SCHEME,   
    NET_EM_CFG_VIDEOIN_ALARM_LIGHTING,    
    NET_EM_CFG_VIDEOIN_FACE_AUTOEXPOSURE, 
    NET_EM_CFG_ENCODE_PLAN = 1400, 
    NET_EM_CFG_COMPOSE_CHANNEL,    
    NET_EM_CFG_BURN_PARAM,         
    NET_EM_CFG_COMPOSE_PLAN,       
    NET_EM_CFG_ALARM_SOUND = 1500,        
    NET_EM_CFG_LOCAL_EXT_ALARM = 1501,    
    NET_EM_CFG_REMOTE_ALARM_BELL = 1502,  
    NET_EM_CFG_FIRE_WARNINGMODE = 1503,   
    NET_EM_CFG_FIRE_WARNING = 1504,       
    NET_EM_CFG_COAXIAL_ALARMLOCAL = 1506, 
    NET_EM_CFG_ACCESS_POINT = 1600, 
    NET_EM_CFG_LDAP,                
    NET_EM_CFG_SYSLOG,              
    NET_EM_CFG_NETAUTOADAPTTRANSIT, 
    NET_EM_CFG_WIRELESS,            
    NET_EM_CFG_WIRELESS_EXPERT,     
    NET_EM_CFG_NAS = 1700, 
    NET_EM_CFG_PPPOE,      
    NET_EM_CFG_EMAIL,      
    NET_EM_CFG_DDNS,       
    NET_EM_CFG_SCADA_PROTOCOLS_MANAGER = 1800, 
    NET_EM_CFG_SCADA_DEVICEINFO_CFG,           
    NET_EM_CFG_SCADA_CONTROLLER_SITE,          
    NET_EM_CFG_NETAPP_LINK_LAYER_VPN = 1900, 
    NET_EM_CFG_NETAPP_SSHD,                  
    NET_EM_CFG_NETAPP_COMMUNICATION_LIST,    
    NET_EM_CFG_NETAPP_WEB,                   
    NET_EM_CFG_VSP_CHINA_TOWER = 2000, 
    NET_EM_CFG_VSP_SHDXJT = 2001,      
    NET_EM_CFG_VSP_CONSUME,            
    NET_EM_CFG_STEREO_CALIBRATE = 2100,            
    NET_EM_CFG_STEREO_CALIBRATEMATRIX_MULTISENSOR, 
    NET_EM_CFG_CROWDDISTRIMAP_CALIBRATE,           
    NET_EM_CFG_TRAFFIC_NOPASSING,                  
    NET_EM_CFG_FIGHT_CALIBRATE,                    
    NET_EM_CFG_FACE_RECOGNITION_ALARM,             
    NET_EM_CFG_STEREO_CALIBRATEMATRIX_MULTIMODE,   
    NET_EM_CFG_AUTO_SNAP_SCHEDULE,                 
    NET_EM_CFG_PARKING_TIMEOUT_DETECT,             
    NET_EM_CFG_SMART_MOTION_DETECT,        
    NET_EM_CFG_EXTERNAL_ANALYSE_TASK_CAPS, 
    NET_EM_CFG_TIMEDIV_TOUR_CONFIG,        
    NET_EM_CFG_TRAFFIC_TOLL_GATE,          
    NET_EM_CFG_RADAR = 2200,                    
    NET_EM_CFG_RADAR_RFIDCARD = 2201,           
    NET_EM_CFG_RADAR_REMOTE_CARD = 2202,        
    NET_EM_CFG_RADAR_RFID_READ_DISTANCE = 2203, 
    NET_EM_CFG_RADAR_STATIC_BACKGROUND = 2204,  
    NET_EM_CFG_VTH_PASSWORD = 2300,      
    NET_EM_CFG_REGISTAR = 2301,          
    NET_EM_CFG_SIP = 2302,               
    NET_EM_CFG_DEVICE_LOGIN_INFO = 2303, 
    NET_EM_CFG_AELENSMASK = 2400, 
    NET_EM_CFG_ULTRASONIC = 2500, 
    NET_EM_CFG_ARMSCHEDULE = 2600,     
    NET_EM_CFG_CID_REPORT = 2601,      
    NET_EM_CFG_VSP_HONEYWELL = 2602,   
    NET_EM_CFG_KBUSER_PASSWORD = 2603, 
    NET_EM_CFG_RECORDEXTRA = 3610,               
    NET_EM_CFG_AUTO_RECORDBACKUP_RESTORE = 3611, 
    NET_EM_CFG_FACESNAPSHOT = 3612,              
    NET_EM_CFG_TIME_RECORDBACKUP_RESTORE = 3613, 
    NET_EM_CFG_RECORD_DOWNLOAD_SPEED_ALL = 3614, 
    NET_EM_VIDEODIAGNOSIS_PROJECT = 3700,            
    NET_EM_CFG_VIDEO_DIAGNOSIS_PROJECT_MONTH = 3701, 
    NET_EM_CFG_POSITIONREPORTPOLICY = 3800, 
    NET_EM_CFG_VEHICLE_WORKTIMESCHEDULE,    
    NET_EM_CFG_VEHICLE_LOAD,                
    NET_EM_CFG_TICKETPRINT,                 
    NET_EM_CFG_VEHICLEAUTOMAIN,             
    NET_EM_CFG_VEHICLENETSERVER,            
    NET_EM_CFG_IMSIBIND,                    
    NET_EM_CFG_VEHICLE_MAINTAINCE,          
    NET_EM_CFG_SAFETYABNORMAL_ALARM, 
    NET_EM_CFG_VEHICLE_COLLISION,    
    NET_EM_CFG_VEHICLE_TURNOVER,     
    NET_EM_CFG_VEHICLE_SUDDENTURN,   
    NET_EM_CFG_VEHICLE_ACCELERATION, 
    NET_EM_CFG_VEHICLE_DECELERATION, 
    NET_EM_CFG_VEHICLE_ACC,          
    NET_EM_CFG_VEHICLE_DSMALARMCONTROL,   
    NET_EM_CFG_VEHICLE_NOT_INSPECT_ALARM, 
    NET_EM_CFG_ACCESSCTL_BLACKLIST = 3900,            
    NET_EM_CFG_ACCESSCTL_BLACKLIST_LINK = 3901,       
    NET_EM_CFG_ACCESSCTL_SPECIALDAY_GROUP = 3902,     
    NET_EM_CFG_ACCESSCTL_SPECIALDAYS_SCHEDULE = 3903, 
    NET_EM_CFG_ACCESSCTL_AUTH_MODE = 3904,            
    NET_EM_CFG_ACS_FACE_RECOGNITION_SCHEME = 3905,    
    NET_EM_CFG_FORBIDDEN_ADVERT_PLAY = 3906,          
    NET_EM_CFG_BGY_CUSTOMERCFG = 3907,                
    NET_EM_CFG_ACCESSCTL_KEYBINDINGINFOCFG = 3908,    
    NET_EM_CFG_HOST_DEVICE = 3909,                    
    NET_EM_CFG_VTH_ALPA_CLOUD = 3910,                 
    NET_EM_CFG_VTH_FETCHINFO = 3911,                  
    NET_EM_CFG_CUSTOMER_DEVICEINFO = 3912,            
    NET_EM_CFG_BLUE_TOOTH = 3913,                     
    NET_EM_CFG_TALK_BACK = 3914,                      
    NET_EM_CFG_FORNT_COVER_DISPLAY_TEXT = 3915,       
    NET_EM_CFG_CITIZENPICTURECOMPARE = 3916,          
    NET_EM_CFG_VIDEOTALK_SIGNLIGHT = 3917,            
    NET_EM_CFG_ESD_COMMSETTING = 3918,                
    NET_EM_CFG_BSCCUSTOM = 3919,                      
    NET_EM_CFG_ACCESS_FACE_RECOGNITION = 3920,        
    NET_EM_CFG_CONSUMPTION_STRATEGY = 3921,           
    NET_EM_CFG_WIEGAND = 3922,                        
    NET_EM_CFG_CUSTOM_WEATHER_INFO = 3923,            
    NET_EM_CFG_HOSPITAL_LOGO = 3924,                  
    NET_EM_CFG_ACCESS_DISPLAY = 3925,                 
    NET_EM_CFG_ACCESS_CONFIG = 3926,                  
    NET_EM_CFG_ACCESSCTL_HOLIDAY_GROUP = 3927,        
    NET_EM_CFG_ACCESSCTL_HOLIDAY_SCHEDULE = 3928,     
    NET_EM_CFG_ICBC_DOOR_PARAS = 3929,                
    NET_EM_CFG_WORK_SCENE = 3930,                     
    NET_EM_CFG_CUSTOMER_DEV_SETTING = 3931,           
    NET_EM_CFG_CUSTOMER_ON_DUTY_MODEL_INFO = 3932,    
    NET_EM_CFG_CUSTOMER_TEMP_POLICY,                  
    NET_EM_CFG_USER_PASS_DATA_COUNT_CLEAR = 3934,     
    NET_EM_CFG_SAMPO_SERVICE_NAME = 3935,             
    NET_EM_CFG_USER_PASS_PERMISSION = 3936,           
    NET_EM_CFG_HOSPITAL_TALK_CONFIG = 3937,           
    NET_EM_CFG_SECRET_PROJECT_CONFIG = 3938,          
    NET_EM_CFG_SERIALNOWHITETABLE = 4000,       
    NET_EM_CFG_LXSJ_WXJJ = 4001,                
    NET_EM_CFG_SENSOR_ALARM_GLOBAL = 4002,      
    NET_EM_CFG_SENSOR_ALARM = 4003,             
    NET_EM_CFG_VSP_LXSJ = 4004,                 
    NET_EM_CFG_TIMINGCAPTURE = 4005,            
    NET_EM_CFG_WATER_MONITOR_TITLE = 4006,      
    NET_EM_CFG_ATTENDANCE_MODEL_INFO = 4007,    
    NET_EM_CFG_KT_RTSP_FLAG = 4008,             
    NET_EM_CFG_RTSP_ABORT_LIST = 4009,          
    NET_EM_CFG_FILE_HOLD_DAYS = 4010,           
    NET_EM_CFG_ACCESS_FUNCTION = 4011,          
    NET_EM_CFG_RELAY_STATE = 4012,              
    NET_EM_CFG_OSD_PLAN = 4013,                 
    NET_EM_CFG_ENVIRONMENT_DETECT = 4014,       
    NET_EM_CFG_AC_GZYD = 4015,                  
    NET_EM_CFG_CARD_MNG = 4016,                 
    NET_EM_CFG_WORK_MODE = 4017,                
    NET_EM_CFG_WATER_QUALITY_DETECTION = 4018,  
    NET_EM_CFG_FINANCIAL_CABINET_ALARM = 4019,  
    NET_EM_CFG_FINANCIAL_CABINET_CONFIG = 4020, 
    NET_EM_CFG_NUCLEIC_ACID_RULER = 4021,       
    NET_EM_CFG_LEASE_RULES = 4022,              
    NET_EM_CFG_CLOUDUPLOADTIME = 5000, 
    NET_EM_CFG_RADAR_MAPPARA = 6000,           
    NET_EM_CFG_RADAR_CALIBRATION = 6001,       
    NET_EM_CFG_RADAR_LINKSD = 6002,            
    NET_EM_CFG_RADAR_RULELINE = 6003,          
    NET_EM_CFG_RADAR_ANALYSERULE = 6004,       
    NET_EM_CFG_RADAR_TRACKGLOBALCONFIG = 6005, 
    NET_EM_CFG_RADAR_RADARPARA = 6006,         
    NET_EM_CFG_RADAR_REMOTESDLINK = 6007,      
    NET_EM_CFG_RADAR_RADARLINKDEVICE = 6008,   
    NET_EM_CFG_RADAR_MAPOSDPARA = 6009,        
    NET_EM_CFG_RADAR_DEVLIST = 6010,           
    NET_EM_CFG_RADAR_RULE_BIND_SD = 6011,      
    NET_EM_CFG_RADAR_SCREEN_RULE = 6012,       
    NET_EM_CFG_RADAR_ALGORITHM_PARAM = 6013,   
    NET_EM_CFG_RADAR_TRACK_FREQUENCY = 6014,   
    NET_EM_CFG_RADAR_TRACK_MOVE_MODE = 6015,   
    NET_EM_CFG_MINIRADAR_DECT_PARAM = 6016,    
    NET_EM_CFG_MINIRADAR_INDOOR_ALARM = 6017,  
    NET_EM_CFG_MINIRADAR_COMP_INFO = 6018,     
    NET_EM_CFG_MINIRADAR_INSTALL_INFO = 6019,  
    NET_EM_CFG_MINIRADAR_REGION_DETECT = 6020, 
    NET_EM_CFG_MINIRADAR_SCREEN_CONFIG = 6021, 
    NET_EM_CFG_PTZ_SPEED = 7000,                          
    NET_EM_CFG_PTZ_HORIZONTAL_ROTATION_GROUP_SCAN = 7001, 
    NET_EM_CFG_AUTOSCAN = 7002,                           
    NET_EM_CFG_INTELLI_TOUR = 7003,                       
    NET_EM_CFG_AUTO_PATTERN = 7004,                       
    NET_EM_CFG_PTZ_DIRECTION_CORRECT = 7005,              
    NET_EM_CFG_RAIN_FALL_CONFIG = 7006,                   
    NET_EM_CFG_CASCADE_LIGHT = 8000, 
    NET_EM_CFG_LE_SMARTTRACK = 8001, 
    NET_EM_CFG_LE_LENS_MASK = 8002,  
    NET_EM_CFG_VSP_PAAS = 9000,            
    NET_EM_CFG_VSP_GAYS_SERVER = 9001,     
    NET_EM_CFG_VSP_CO_SIGN_SERVER = 9002,  
    NET_EM_CFG_VSP_GAVI = 9003,            
    NET_EM_CFG_VSP_ONVIF = 9004,           
    NET_EM_CFG_VSP_LRLXXF_MODULE = 9005,   
    NET_EM_CFG_VSP_LRLXXF_CUSTOM = 9006,   
    NET_EM_CFG_VSP_TERMINAL_REGISTER_INFO, 
    NET_EM_CFG_TRAFFICSTROBE = 9100, 
    NET_EM_CFG_LED_TEXT = 9200,       
    NET_EM_CFG_LED_TEXT_ARRAY = 9201, 
    NET_EM_CFG_DISABLE_LINKAGE = 9300,                          
    NET_EM_CFG_DISABLE_LINKAGE_TIME_SECTION = 9301,             
    NET_EM_CFG_REMOTE_DISABLE_LINKAGE = 9302,                   
    NET_EM_CFG_REMOTE_DISABLE_LINKAGE_TIME_SECTION_SYNC = 9303, 
    NET_EM_CFG_MATRIX_NETKBDFASTCTRL = 9400, 
    NET_EM_CFG_VIDEO_CHANNEL_LABEL = 9600, 
    NET_EM_CFG_VIDEO_IMAGE_CTRL = 9601,    
    NET_EM_CFG_TRAFFIC_LATTICE_SCREEN = 10000,     
    NET_EM_CFG_TRAFFIC_VOICE_BROADCAST = 10001,    
    NET_EM_CFG_SCENE_SNAP_SHOT_WITH_RULE2 = 10002, 
    NET_EM_CFG_TRAFFIC_PARKING_SNAP_TIMER,         
    NET_EM_CFG_VEHICLE_INFO = 10004,               
    NET_EM_CFG_VEHICLE_WORK_MODE = 10005,          
    NET_EM_CFG_DOORBELL_EXTERNALDOORBELL = 11000, 
    NET_EM_CFG_HOT_COLD_SPOT_WARNING = 1505,   
    NET_EM_CFG_SENSOR_MAINTAIN = 11100,        
    NET_EM_CFG_TILT_LIMIT = 11101,             
    NET_EM_CFG_RADIO_REGULATOR = 11102,        
    NET_EM_CFG_HUMAN_THERM_CALIBRATE = 11103,  
    NET_EM_CFG_TELESCOPE_OPTIONS = 11104,      
    NET_EM_CFG_ENVIRONMENT_THERM_INFO = 11105, 
    NET_EM_CFG_THERMOMETRY_SHIELD = 11106,     
    NET_EM_CFG_KVM_MAIN_NODE = 12000,    
    NET_EM_CFG_KVM_HOT_KEY = 12001,      
    NET_EM_CFG_KM_TRANS_ENCRYPT = 12002, 
    NET_EM_CFG_NET_TV_DEVICE = 12003,    
    NET_EM_CFG_COURSE_RECORD_DEFAULT_CONFIG = 12100, 
    NET_EM_CFG_COURSE_RECORD_UPLOAD = 12101,         
    NET_EM_CFG_COURSE_RECORD_EX = 12102,             
    NET_EM_CFG_WIFI_INSTALL_PARAM = 12200, 
    NET_EM_CFG_STORAGE_HEALTH_ABNORMAL = 12300, 
    NET_EM_CFG_STORAGE_GLOBAL = 12301,          
    NET_EM_CFG_NAS_DIRECTORY = 12302,           
    NET_EM_CFG_DISK_FIRMWARE_INFO = 12303,      
    NET_EM_CFG_LORA_GATEWAY_BASIC = 12400,  
    NET_EM_CFG_LORA_GATEWAY_ACCESS = 12401, 
    NET_EM_CFG_LORA_GATEWAY_RADIO = 12402,  
    NET_EM_CFG_VTS_INFO = 12500,        
    NET_EM_CFG_HOSPITAL_BACKLIGHT_PLAN, 
    NET_EM_CFG_HOSPITAL_INTRODUCE,      
    NET_EM_CFG_HOSPITAL_CHECKLIST,      
    NET_EM_CFG_HOSPITAL_MEDIA_INFO,     
    NET_EM_CFG_VTS_BASIC_INFO,          
    NET_EM_CFG_SOUND = 12600,      
    NET_EM_CFG_VOICE_PLAY_PLAN,    
    NET_EM_CFG_SMART_SOUND_DETECT, 
    NET_EM_CFG_DHRS = 12700, 
    NET_EM_CFG_ADVERT_PLAY_RULE = 12800, 
    NET_EM_CFG_XRAY_UPLOAD_PLATFORM = 12900, 
    NET_EM_CFG_XRAY_OVERLAY = 12901,         
    NET_EM_CFG_COURSE_INFO = 13000,          
    NET_EM_CFG_EXAMINATION_ROOM_INFO,        
    NET_EM_CFG_RECORD_NAME_RULE_INFO,        
    NET_EM_CFG_REDUNDANT_STORAGE_STRATEGY,   
    NET_EM_CFG_RECORD_SHORTAGE_ALARM,        
    NET_EM_CFG_KVM_CONTROL_DATA_MODE,        
    NET_EM_CFG_PRIVACY_FACEID,               
    NET_EM_CFG_CHANG_BAI_VEHICLE_PROHIBITED, 
    NET_EM_CFG_TUXI_SN_ACCESS_TABLE,         
    NET_EM_CFG_ATTENDANCECFG_XL_CUSTOM,      
    NET_EM_CFG_RTSC_SCH_CROSSLIST = 14000,    
    NET_EM_CFG_RTSC_SCH_CHANNELS,             
    NET_EM_CFG_RTSC_SCH_PLANS,                
    NET_EM_CFG_RTSC_SCH_MANAGE,               
    NET_EM_CFG_RTSC_SCH_VEHICLE_DETECTORLIST, 
    NET_EM_CFG_RTSC_SCH_PEDDETECTOR_LIST,     
    NET_EM_CFG_RTSC_SCH_PEDDESTRAIN_PRIORITY, 
    NET_EM_CFG_RTSC_SCH_OVERFLOW_CONTROL,     
    NET_EM_CFG_RTSC_SCH_NIGHTASK,             
    NET_EM_CFG_RTSC_SCH_OPTIMIZES,            
    NET_EM_CFG_RTSC_SCH_VARLANELIST,          
    NET_EM_CFG_RTSC_SCH_VARLANE_MANAGEMENT,   
    NET_EM_CFG_RTSC_TEMP_SCH,                 
    NET_EM_CFG_EAS_SYSTEM_CONFIG = 14500, 
    NET_EM_CFG_EAS_COIL_SWITH,            
} NET_EM_CFG_OPERATE_TYPE;
#define RPC_METHOD_MONITORWALL_ADD "monitorWallManager.addMonitorWall" 
typedef void(CALLBACK* fDisConnect)(LLONG lLoginID, char* pchDVRIP, LONG nDVRPort, LDWORD dwUser);
typedef void(CALLBACK* fHaveReConnect)(LLONG lLoginID, char* pchDVRIP, LONG nDVRPort, LDWORD dwUser);
typedef void(CALLBACK* fSubDisConnect)(EM_INTERFACE_TYPE emInterfaceType, BOOL bOnline, LLONG lOperateHandle, LLONG lLoginID, LDWORD dwUser);
typedef void(CALLBACK* fRealPlayDisConnect)(LLONG lOperateHandle, EM_REALPLAY_DISCONNECT_EVENT_TYPE dwEventType, void* param, LDWORD dwUser);
typedef void(CALLBACK* fRealDataCallBack)(LLONG lRealHandle, DWORD dwDataType, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef void(CALLBACK* fRealDataCallBackEx)(LLONG lRealHandle, DWORD dwDataType, BYTE* pBuffer, DWORD dwBufSize, LONG param, LDWORD dwUser);
typedef void(CALLBACK* fRealDataCallBackEx2)(LLONG lRealHandle, DWORD dwDataType, BYTE* pBuffer, DWORD dwBufSize, LLONG param, LDWORD dwUser);
typedef void(CALLBACK* fDrawCallBack)(LLONG lLoginID, LLONG lPlayHandle, HDC hDC, LDWORD dwUser);
typedef void(CALLBACK* fTimeDownLoadPosCallBack)(LLONG lPlayHandle, DWORD dwTotalSize, DWORD dwDownLoadSize, int index, NET_RECORDFILE_INFO recordfileinfo, LDWORD dwUser);
typedef void(CALLBACK* fTimeDownLoadPosCallBackEx)(LLONG lPlayHandle, DWORD dwTotalSize, DWORD dwDownLoadSize, int index, NET_RECORDFILE_INFOEX recordfileinfoEx, LDWORD dwUser);
typedef BOOL(CALLBACK* fMessCallBack)(LONG lCommand, LLONG lLoginID, char* pBuf, DWORD dwBufLen, char* pchDVRIP, LONG nDVRPort, LDWORD dwUser);
typedef BOOL(CALLBACK* fMessCallBackEx1)(LONG lCommand, LLONG lLoginID, char* pBuf, DWORD dwBufLen, char* pchDVRIP, LONG nDVRPort, BOOL bAlarmAckFlag, LONG nEventID, LDWORD dwUser);
typedef struct tagNET_MESSAGE_CALLBACK_INFO
{
    int nAlarmType;        
    BYTE byReserved1[4];   
    LLONG lLoginID;        
    char* pBuf;            
    DWORD dwBufLen;        
    BOOL bAlarmAckFlag;    
    char* pszIP;           
    int nPort;             
    int nEventID;          
    BOOL bRestoreEvent;    
    BYTE byReserved[1020]; 
} NET_MESSAGE_CALLBACK_INFO;
typedef BOOL(CALLBACK* fMessCallBackEx2)(NET_MESSAGE_CALLBACK_INFO* pInfo, LDWORD dwUser);
typedef int(CALLBACK* fServiceCallBack)(LLONG lHandle, char* pIp, WORD wPort, LONG lCommand, void* pParam, DWORD dwParamLen, LDWORD dwUserData);
typedef void(CALLBACK* pfAudioDataCallBack)(LLONG lTalkHandle, char* pDataBuf, DWORD dwBufSize, BYTE byAudioFlag, LDWORD dwUser);
typedef struct tagNET_AUDIO_DATA_CB_INFO
{
    BYTE* pBuf;                      
    DWORD dwBufSize;                 
    DH_TALK_CODING_TYPE emAudioCode; 
    BYTE* pRawBuf;      
    DWORD dwRawBufSize; 
    int nAudioBit;      
    DWORD dwSampleRate; 
    BYTE bReserved[256]; 
} NET_AUDIO_DATA_CB_INFO;
typedef enum tagEM_AUDIO_SOURCE_FLAG
{
    EM_AUDIO_SOURCE_FLAG_UNKNOWN = -1, 
    EM_AUDIO_SOURCE_FLAG_LOCAL = 0,    
    EM_AUDIO_SOURCE_FLAG_REMOTE = 1,   
} EM_AUDIO_SOURCE_FLAG;
typedef void(CALLBACK* fAudioDataCallBackEx)(LLONG lTalkHandle, NET_AUDIO_DATA_CB_INFO* stAudioInfo, EM_AUDIO_SOURCE_FLAG emAudioFlag, LDWORD dwUser);
typedef void(CALLBACK* fUpgradeCallBack)(LLONG lLoginID, LLONG lUpgradechannel, int nTotalSize, int nSendSize, LDWORD dwUser);
typedef void(CALLBACK* fUpgradeCallBackEx)(LLONG lLoginID, LLONG lUpgradechannel, INT64 nTotalSize, INT64 nSendSize, LDWORD dwUser);
typedef void(CALLBACK* fTransComCallBack)(LLONG lLoginID, LLONG lTransComChannel, char* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef void(CALLBACK* fLogDataCallBack)(LLONG lLoginID, char* pBuffer, DWORD dwBufSize, DWORD nTotalSize, BOOL bEnd, LDWORD dwUser);
typedef void(CALLBACK* fSnapRev)(LLONG lLoginID, BYTE* pBuf, UINT RevLen, UINT EncodeType, DWORD CmdSerial, LDWORD dwUser);
typedef void(CALLBACK* fGPSRev)(LLONG lLoginID, GPS_Info GpsInfo, LDWORD dwUserData);
typedef void(CALLBACK* fGPSRevEx)(LLONG lLoginID, GPS_Info GpsInfo, ALARM_STATE_INFO stAlarmInfo, LDWORD dwUserData, void* reserved);
typedef void(CALLBACK* fGPSRevEx2)(LLONG lLoginID, const LPNET_GPS_LOCATION_INFO lpData, LDWORD dwUserData, void* reserved);
typedef void(CALLBACK* fGPSTempHumidityRev)(LLONG lLoginID, GPS_TEMP_HUMIDITY_INFO GpsTHInfo, LDWORD dwUserData);
typedef void(CALLBACK* fMessDataCallBack)(LLONG lCommand, LPNET_CALLBACK_DATA lpData, LDWORD dwUser);
typedef void(CALLBACK* fTransFileCallBack)(LLONG lHandle, int nTransType, int nState, int nSendSize, int nTotalSize, LDWORD dwUser);
typedef int(CALLBACK* fAnalyzerDataCallBack)(LLONG lAnalyzerHandle, DWORD dwAlarmType, void* pAlarmInfo, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser, int nSequence, void* reserved);
typedef void(CALLBACK* fSearchDevicesCB)(DEVICE_NET_INFO_EX* pDevNetInfo, void* pUserData);
typedef void(CALLBACK* fSearchDevicesCBEx)(LLONG lSearchHandle, DEVICE_NET_INFO_EX2* pDevNetInfo, void* pUserData);
typedef void(CALLBACK* fYUVDataCallBack)(LLONG lPlaybackHandle, BYTE* pBuffer, DWORD dwBufSize, LONG param, LDWORD dwUser, void* reserved);
typedef void(CALLBACK* fSubLogDataCallBack)(LLONG lLogHandle, NET_EM_LOG_QUERY_TYPE emLogType, const DH_DEVICE_LOG_ITEM_EX* pstuLogData, const int& nCount, LDWORD dwUser, void* reserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSDKLocalCfg(NET_EM_SDK_LOCAL_CFG_TYPE emCfgType, void* szInBuffer);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSDKLocalCfg(NET_EM_SDK_LOCAL_CFG_TYPE emCfgType, void* szOutBuffer);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Init(fDisConnect cbDisConnect, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitEx(fDisConnect cbDisConnect, LDWORD dwUser, LPNETSDK_INIT_PARAM lpInitParam = NULL);
CLIENT_NET_API void CALL_METHOD CLIENT_Cleanup();
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRunModeParams(NET_RUNMODE_PARAMS* pstuRunParams);
CLIENT_NET_API void CALL_METHOD CLIENT_SetAutoReconnect(fHaveReConnect cbAutoConnect, LDWORD dwUser);
CLIENT_NET_API void CALL_METHOD CLIENT_SetSubconnCallBack(fSubDisConnect cbSubDisConnect, LDWORD dwUser);
CLIENT_NET_API DWORD CALL_METHOD CLIENT_GetLastError(void);
CLIENT_NET_API void CALL_METHOD CLIENT_SetConnectTime(int nWaitTime, int nTryTimes);
CLIENT_NET_API void CALL_METHOD CLIENT_SetNetworkParam(NET_PARAM* pNetParam);
CLIENT_NET_API void CALL_METHOD CLIENT_GetUdpOption(NET_UDP_OPTION* pUdpOption);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetUdpOption(NET_UDP_OPTION* pUdpOption);
CLIENT_NET_API DWORD CALL_METHOD CLIENT_GetSDKVersion();
CLIENT_NET_API LLONG CALL_METHOD CLIENT_Login(const char* pchDVRIP, WORD wDVRPort, const char* pchUserName, const char* pchPassword, LPNET_DEVICEINFO lpDeviceInfo, int* error = 0);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_LoginEx(const char* pchDVRIP, WORD wDVRPort, const char* pchUserName, const char* pchPassword, int nSpecCap, void* pCapParam, LPNET_DEVICEINFO lpDeviceInfo, int* error = 0);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_LoginEx2(const char* pchDVRIP, WORD wDVRPort, const char* pchUserName, const char* pchPassword, EM_LOGIN_SPAC_CAP_TYPE emSpecCap, void* pCapParam, LPNET_DEVICEINFO_Ex lpDeviceInfo, int* error = 0);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartLogin(char* pchDVRIP, WORD wDVRPort, char* pchUserName, char* pchPassword, int nSpecCap, void* pCapParam, fHaveLogin cbLogin, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartLoginEx(NET_IN_STARTLOGINEX* pInParam, NET_OUT_STARTLOGINEX* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLogin(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLoginEx(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Logout(LLONG lLoginID);
typedef enum tagEM_LOGIN_TLS_TYPE
{
    EM_LOGIN_TLS_TYPE_NO_TLS = 0,        
    EM_LOGIN_TLS_TYPE_TLS_ADAPTER = 1,   
    EM_LOGIN_TLS_TYPE_TLS_COMPEL = 2,    
    EM_LOGIN_TLS_TYPE_TLS_MAIN_ONLY = 3, 
    EM_LOGIN_TLS_TYPE_TLS_GENERAL = 4,   
} EM_LOGIN_TLS_TYPE;
typedef struct tagNET_IN_LOGIN_WITH_HIGHLEVEL_SECURITY
{
    DWORD dwSize;                     
    char szIP[64];                    
    int nPort;                        
    char szUserName[64];              
    char szPassword[64];              
    EM_LOGIN_SPAC_CAP_TYPE emSpecCap; 
    BYTE byReserved[4];               
    void* pCapParam;                  
    EM_LOGIN_TLS_TYPE emTLSCap;       
} NET_IN_LOGIN_WITH_HIGHLEVEL_SECURITY;
typedef struct tagNET_OUT_LOGIN_WITH_HIGHLEVEL_SECURITY
{
    DWORD dwSize;                    
    NET_DEVICEINFO_Ex stuDeviceInfo; 
    int nError;                      
    BYTE byReserved[132];            
} NET_OUT_LOGIN_WITH_HIGHLEVEL_SECURITY;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_LoginWithHighLevelSecurity(NET_IN_LOGIN_WITH_HIGHLEVEL_SECURITY* pstInParam, NET_OUT_LOGIN_WITH_HIGHLEVEL_SECURITY* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevProtocolType(LLONG lLoginID, EM_DEV_PROTOCOL_TYPE* pemProtocolType);
typedef struct tagNET_IN_GET_VKINFO
{
    DWORD dwSize;   
    int nChannelID; 
} NET_IN_GET_VKINFO;
typedef struct tagNET_OUT_GET_VKINFO
{
    DWORD dwSize;             
    NET_VKINFO stuVKInfo;     
    BOOL bContainPrevVKInfo;  
    NET_VKINFO stuPrevVKInfo; 
} NET_OUT_GET_VKINFO;
typedef struct tagNET_IN_UPDATE_VKINFO
{
    DWORD dwSize;   
    int nChannelID; 
} NET_IN_UPDATE_VKINFO;
typedef struct tagNET_OUT_UPDATE_VKINFO
{
    DWORD dwSize;     
    char szVKID[128]; 
} NET_OUT_UPDATE_VKINFO;
typedef void(CALLBACK* fAttachVK)(LLONG lLoginID, LLONG lAttachHandle, int nChannelID, const NET_VKINFO* pVKInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VK
{
    DWORD dwSize;         
    int nChannelID;       
    fAttachVK cbAttachVK; 
    LDWORD dwUser;        
} NET_IN_ATTACH_VK;
typedef struct tagNET_OUT_ATTACH_VK
{
    DWORD dwSize;                
    NET_VKINFO stuCurrentVKInfo; 
    BOOL bContainPrevVKInfo;     
    NET_VKINFO stuPrevVKInfo;    
} NET_OUT_ATTACH_VK;
typedef struct tagNET_MEDIA_ENCRYPT_CAPS_INFO
{
    BOOL bSupport;        
    BYTE byReserved[256]; 
} NET_MEDIA_ENCRYPT_CAPS_INFO;
typedef struct tagNET_IN_GET_MEDIA_ENCRYPT_CAPS
{
    DWORD dwSize;       
    int nChannelOffset; 
    int nChannelCount;  
} NET_IN_GET_MEDIA_ENCRYPT_CAPS;
typedef struct tagNET_OUT_GET_MEDIA_ENCRYPT_CAPS
{
    DWORD dwSize;                              
    NET_MEDIA_ENCRYPT_CAPS_INFO* pstuCapsInfo; 
    int nMaxCapsInfoCount;                     
    int nRetCapsInfoCount;                     
} NET_OUT_GET_MEDIA_ENCRYPT_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpdateVK(LLONG lLoginID, const NET_IN_UPDATE_VKINFO* pInParam, NET_OUT_UPDATE_VKINFO* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVK(LLONG lLoginID, const NET_IN_ATTACH_VK* pInParam, NET_OUT_ATTACH_VK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVK(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetMediaEncryptCaps(LLONG lLoginID, const NET_IN_GET_MEDIA_ENCRYPT_CAPS* pInParam, NET_OUT_GET_MEDIA_ENCRYPT_CAPS* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RealPlay(LLONG lLoginID, int nChannelID, HWND hWnd);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RealPlayEx(LLONG lLoginID, int nChannelID, HWND hWnd, DH_RealPlayType rType = DH_RType_Realplay);
typedef void(CALLBACK* fEncryptRealDataCallBackEx)(LLONG lRealHandle, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef void(CALLBACK* fOriginalRealDataCallBack)(LLONG lRealHandle, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef struct tagNET_IN_REALPLAY_FOR_SP_GDPR
{
    DWORD dwSize;                                          
    int nChannelID;                                        
    DH_RealPlayType rType;                                 
    BYTE szReserved[4];                                    
    HWND hWnd;                                             
    fRealDataCallBackEx2 cbRealData;                       
    fOriginalRealDataCallBack pOriginalRealDataCallBack;   
    fEncryptRealDataCallBackEx pEncryptRealDataCallBackEx; 
    fRealPlayDisConnect cbDisconnect;                      
    LDWORD dwUser;                                         
} NET_IN_REALPLAY_FOR_SP_GDPR;
typedef struct tagNET_OUT_REALPLAY_FOR_SP_GDPR
{
    DWORD dwSize; 
} NET_OUT_REALPLAY_FOR_SP_GDPR;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RealPlayForSpGdpr(LLONG lLoginID, const NET_IN_REALPLAY_FOR_SP_GDPR* pInParam, NET_OUT_REALPLAY_FOR_SP_GDPR* pOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_REALPLAY
{
    DWORD dwSize;                                          
    int nChannelID;                                        
    DH_RealPlayType rType;                                 
    BYTE szReserved[4];                                    
    HWND hWnd;                                             
    fRealDataCallBackEx2 cbRealData;                       
    fOriginalRealDataCallBack pOriginalRealDataCallBack;   
    fEncryptRealDataCallBackEx pEncryptRealDataCallBackEx; 
    fRealPlayDisConnect cbDisconnect;                      
    fVKInfoCallBack pVKInfoCallBack;                       
    LDWORD dwUser;                                         
} NET_IN_REALPLAY;
typedef struct tagNET_OUT_REALPLAY
{
    DWORD dwSize; 
} NET_OUT_REALPLAY;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RealPlayEx2(LLONG lLoginID, const NET_IN_REALPLAY* pInParam, NET_OUT_REALPLAY* pOutParam, DWORD dwWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartRealPlay(LLONG lLoginID, int nChannelID, HWND hWnd, DH_RealPlayType rType, fRealDataCallBackEx cbRealData, fRealPlayDisConnect cbDisconnect, LDWORD dwUser, DWORD dwWaitTime = 10000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_MultiPlay(LLONG lLoginID, HWND hWnd);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopMultiPlay(LLONG lMultiHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CapturePicture(LLONG hPlayHandle, const char* pchPicFileName);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CapturePictureEx(LLONG hPlayHandle, const char* pchPicFileName, NET_CAPTURE_FORMATS eFormat);
typedef struct tagNET_IN_CAPTURE_PICTURE
{
    DWORD dwSize;                 
    NET_CAPTURE_FORMATS emFormat; 
    char szPicFilePath[256];      
} NET_IN_CAPTURE_PICTURE;
typedef struct tagNET_OUT_CAPTURE_PICTURE
{
    DWORD dwSize;        
    NET_TIME_EX stuTime; 
} NET_OUT_CAPTURE_PICTURE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CapturePictureEx2(LLONG lPlayHandle, NET_IN_CAPTURE_PICTURE* pstInParam, NET_OUT_CAPTURE_PICTURE* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRealDataCallBack(LLONG lRealHandle, fRealDataCallBack cbRealData, LDWORD dwUser);
typedef enum _PrerecordStreamType
{
    Prerecord_RType_Realplay_0, 
    Prerecord_RType_Realplay_1, 
    Prerecord_RType_Realplay_2, 
    Prerecord_RType_Realplay_3, 
} EM_PRERECODE_STREAM_TYPE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PrerecordStream(LLONG lLoginID, int nChannelID, EM_PRERECODE_STREAM_TYPE emPreRecord, int nWaitTime);
typedef enum tagEM_REALDATA_FLAG
{
    REALDATA_FLAG_RAW_DATA = 0x01,             
    REALDATA_FLAG_DATA_WITH_FRAME_INFO = 0x02, 
    REALDATA_FLAG_YUV_DATA = 0x04,             
    REALDATA_FLAG_PCM_AUDIO_DATA = 0x08,       
} EM_REALDATA_FLAG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRealDataCallBackEx(LLONG lRealHandle, fRealDataCallBackEx cbRealData, LDWORD dwUser, DWORD dwFlag);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetEncryptRealDataCallBack(LLONG lRealHandle, fEncryptRealDataCallBackEx cbRealData, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRealDataCallBackEx2(LLONG lRealHandle, fRealDataCallBackEx2 cbRealData, LDWORD dwUser, DWORD dwFlag);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetOriginalRealDataCallBack(LLONG lRealHandle, fOriginalRealDataCallBack cbRealData, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetVKInfoCallBack(LLONG lPlayHandle, fVKInfoCallBack cbVKInfo, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AdjustFluency(LLONG lRealHandle, int nLevel);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SaveRealData(LLONG lRealHandle, const char* pchFileName);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopSaveRealData(LLONG lRealHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClientSetVideoEffect(LLONG lPlayHandle, unsigned char nBrightness, unsigned char nContrast, unsigned char nHue, unsigned char nSaturation);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClientGetVideoEffect(LLONG lPlayHandle, unsigned char* nBrightness, unsigned char* nContrast, unsigned char* nHue, unsigned char* nSaturation);
CLIENT_NET_API void CALL_METHOD CLIENT_RigisterDrawFun(fDrawCallBack cbDraw, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OpenSound(LLONG hPlayHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetVolume(LLONG lPlayHandle, int nVolume);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PlayEnableLargePicAdjustment(LLONG lPlayHandle, BOOL bEnable);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloseSound();
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopRealPlay(LLONG lRealHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopRealPlayEx(LLONG lRealHandle);
typedef enum tagEM_REAL_DATA_TYPE
{
    EM_REAL_DATA_TYPE_PRIVATE,    
    EM_REAL_DATA_TYPE_GBPS,       
    EM_REAL_DATA_TYPE_TS,         
    EM_REAL_DATA_TYPE_MP4,        
    EM_REAL_DATA_TYPE_H264,       
    EM_REAL_DATA_TYPE_FLV_STREAM, 
    EM_REAL_DATA_TYPE_PS,         
    EM_REAL_DATA_TYPE_DHTS,       
    EM_REAL_DATA_TYPE_CDJFPS,     
} EM_REAL_DATA_TYPE;
typedef enum tagEM_ASYNC_REALPLAY_STATE
{
    EM_ASYNC_REALPLAY_NORMAL,                
    EM_ASYNC_REALPLAY_SUCCESS,               
    EM_ASYNC_REALPLAY_CHECK_ERROR,           
    EM_ASYNC_REALPLAY_SPECIAL_CHANNEL_ERROR, 
    EM_ASYNC_REALPLAY_INVALID_CHANNEL,       
    EM_ASYNC_REALPLAY_SETUPSESSION_ERROR,    
    EM_ASYNC_REALPLAY_RENDER_ERROR,          
    EM_ASYNC_REALPLAY_OPENCHANNEL_ERROR,     
    EM_ASYNC_REALPLAY_GDPR_ERROR,            
} EM_ASYNC_REALPLAY_STATE;
typedef void(CALLBACK* fAsynPlayCallBack)(LLONG lAsyncTaskHandle, LLONG lPlayHandle, LLONG lLoginID, int nChannelID, EM_ASYNC_REALPLAY_STATE emState, LDWORD dwUser);
typedef struct tagNET_IN_START_ASYN_REAL_PLAY
{
    DWORD dwSize;                                         
    int nChannel;                                         
    DH_RealPlayType emPlayType;                           
    EM_REAL_DATA_TYPE emDataType;                         
    HWND hPlayWnd;                                        
    fRealDataCallBackEx2 cbRealDataCallBack;              
    fOriginalRealDataCallBack cbOriginalRealDataCallBack; 
    fEncryptRealDataCallBackEx cbEncryptRealDataCallBack; 
    fRealPlayDisConnect cbDisconnect;                     
    fVKInfoCallBack cbVKInfoCallBack;                     
    fAsynPlayCallBack cbAsynPlayCallBack;                 
    LDWORD dwUser;                                        
} NET_IN_START_ASYN_REAL_PLAY;
typedef struct tagNET_OUT_START_ASYN_REAL_PLAY
{
    DWORD dwSize; 
} NET_OUT_START_ASYN_REAL_PLAY;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartAsynRealPlay(LLONG lLoginID, NET_IN_START_ASYN_REAL_PLAY* pInParam, NET_OUT_START_ASYN_REAL_PLAY* pOutParam, DWORD dwWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopAsynRealPlay(LLONG lAsyncTaskHandle);
typedef struct tagNET_IN_MOVERELATIVELY_INFO
{
    DWORD dwSize;                             
    PTZ_SPACE_RELATIVELY_UNIT stuTranslation; 
    PTZ_SPACE_RELATIVELY_UNIT stuSpeed;       
} NET_IN_MOVERELATIVELY_INFO;
typedef enum tagNET_EM_PTZ_DIRECTION_TYPE
{
    NET_EM_PTZ_DIRECTION_TYPE_UNKNOWN, 
    NET_EM_PTZ_DIRECTION_TYPE_EAST,    
    NET_EM_PTZ_DIRECTION_TYPE_SOUTH,   
    NET_EM_PTZ_DIRECTION_TYPE_WEST,    
    NET_EM_PTZ_DIRECTION_TYPE_NORTH,   
} NET_EM_PTZ_DIRECTION_TYPE;
typedef struct tagNET_IN_SET_DIRECTION_INFO
{
    DWORD dwSize;                          
    NET_EM_PTZ_DIRECTION_TYPE emDirection; 
} NET_IN_SET_DIRECTION_INFO;
typedef struct tagNET_IN_PTZBASE_MOVEABSOLUTELY_INFO
{
    DWORD dwSize;                          
    int nZoomFlag;                         
    NET_PTZSPACE_UNNORMALIZED stuPosition; 
    NET_PTZSPACE_UNNORMALIZED stuSpeed;    
    BYTE byReserved[448];                  
} NET_IN_PTZBASE_MOVEABSOLUTELY_INFO;
typedef struct tagNET_IN_PTZBASE_MOVEABSOLUTELY_ONLYPT_INFO
{
    DWORD dwSize;          
    int nPositionP;        
    int nPositionT;        
    int nSpeedP;           
    int nSpeedT;           
    BYTE byReserved[1024]; 
} NET_IN_PTZBASE_MOVEABSOLUTELY_ONLYPT_INFO;
typedef struct tagNET_IN_PTZBASE_MOVEABSOLUTELY_ONLYZOOM_INFO
{
    DWORD dwSize;          
    int nZoomFlag;         
    int nZoomValue;        
    int nZoomSpeed;        
    BYTE byReserved[1024]; 
} NET_IN_PTZBASE_MOVEABSOLUTELY_ONLYZOOM_INFO;
typedef struct tagNET_IN_PTZBASE_MOVE_CONTINUOUSLY_INFO
{
    DWORD dwSize;          
    int nSpeedX;           
    int nSpeedY;           
    int nZoom;             
    int nMoveTime;         
    BYTE byReserved[1020]; 
} NET_IN_PTZBASE_MOVE_CONTINUOUSLY_INFO;
typedef struct tagNET_IN_PTZBASE_SET_FOCUS_MAP_VALUE_INFO
{
    DWORD dwSize;       
    int nfocusMapValue; 
} NET_IN_PTZBASE_SET_FOCUS_MAP_VALUE_INFO;
typedef struct tagNET_IN_STOP_MOVE_INFO
{
    DWORD dwSize; 
} NET_IN_STOP_MOVE_INFO;
typedef struct tagNET_IN_PTZ_START_INFO
{
    DWORD dwSize;    
    char szCode[32]; 
    int nArg1;       
    int nArg2;       
    int nArg3;       
    int nArg4;       
} NET_IN_PTZ_START_INFO;
typedef struct tagNET_IN_PTZ_STOP_INFO
{
    DWORD dwSize;    
    char szCode[32]; 
    int nArg1;       
    int nArg2;       
    int nArg3;       
    int nArg4;       
} NET_IN_PTZ_STOP_INFO;
typedef struct tagNET_IN_START_PATTERN_RECORD_INFO
{
    DWORD dwSize;    
    char szName[64]; 
    int nIndex;      
} NET_IN_START_PATTERN_RECORD_INFO;
typedef struct tagNET_IN_STOP_PATTERN_RECORD_INFO
{
    DWORD dwSize; 
    int nIndex;   
} NET_IN_STOP_PATTERN_RECORD_INFO;
typedef struct tagNET_IN_START_PATTERN_REPLAY_INFO
{
    DWORD dwSize; 
    int nIndex;   
} NET_IN_START_PATTERN_REPLAY_INFO;
typedef struct tagNET_IN_STOP_PATTERN_REPLAY_INFO
{
    DWORD dwSize; 
    int nIndex;   
} NET_IN_STOP_PATTERN_REPLAY_INFO;
typedef struct tagNET_IN_MOVE_DIRECTLY_INFO
{
    DWORD dwSize;             
    PTZ_SPEED_UNIT stuScreen; 
    PTZ_SPEED_UNIT stuSpeed;  
} NET_IN_MOVE_DIRECTLY_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZControl(LLONG lLoginID, int nChannelID, DWORD dwPTZCommand, DWORD dwStep, BOOL dwStop);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DHPTZControl(LLONG lLoginID, int nChannelID, DWORD dwPTZCommand, unsigned char param1, unsigned char param2, unsigned char param3, BOOL dwStop, void* param4 = NULL);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DHPTZControlEx(LLONG lLoginID, int nChannelID, DWORD dwPTZCommand, LONG lParam1, LONG lParam2, LONG lParam3, BOOL dwStop);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DHPTZControlEx2(LLONG lLoginID, int nChannelID, DWORD dwPTZCommand, LONG lParam1, LONG lParam2, LONG lParam3, BOOL dwStop, void* param4 = NULL);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DHPTZAreaScan(LLONG lLoginID, DWORD dwPTZCommand, char* szInBuffer, DWORD dwInBufferSize, char* szOutBuffer = NULL, DWORD dwOutBufferSize = 0, int waittime = 1000);
typedef struct tagNET_IN_CALIBRATE_SINGLEDIRECTION
{
    DWORD dwSize;
    int nMode; 
} NET_IN_CALIBRATE_SINGLEDIRECTION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRecordStatus(LLONG lLoginID, int nChannelId, int nRecordFileType, LPNET_TIME tmMonth, char* pchCardid, LPNET_RECORD_STATUS pRecordStatus, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRecordTime(LLONG lLoginID, int nChannelId, int nRecordFileType, LPNET_TIME tmStart, LPNET_TIME tmEnd, char* pchCardid, BOOL* bResult, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRecordFile(LLONG lLoginID, int nChannelId, int nRecordFileType, LPNET_TIME tmStart, LPNET_TIME tmEnd, char* pchCardid, LPNET_RECORDFILE_INFO nriFileinfo, int maxlen, int* filecount, int waittime = 1000, BOOL bTime = FALSE);
typedef struct tagNET_IN_QUERY_RECORD_FILE_EX
{
    DWORD dwSize;                          
    int nChannelId;                        
    EM_QUERY_RECORD_TYPE emRecordFileType; 
    NET_TIME stuStartTime;                 
    NET_TIME stuEndTime;                   
    char* pszCardID;                       
    BOOL bTime;                            
    BOOL bOnlySupportRealUTC;              
    NET_TIME stuStartTimeRealUTC;          
    NET_TIME stuEndTimeRealUTC;            
} NET_IN_QUERY_RECORD_FILE_EX;
typedef struct tagNET_OUT_QUERY_RECORD_FILE_EX
{
    DWORD dwSize;                        
    NET_RECORDFILE_INFOEX* pstuFileinfo; 
    int nMaxlen;                         
    int nFileCount;                      
} NET_OUT_QUERY_RECORD_FILE_EX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRecordFileEx(LLONG lLoginID, NET_IN_QUERY_RECORD_FILE_EX* pstuInParam, NET_OUT_QUERY_RECORD_FILE_EX* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartQueryRecordFile(LLONG lLoginID, NET_IN_START_QUERY_RECORDFILE* pInParam, NET_OUT_START_QUERY_RECORDFILE* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopQueryRecordFile(LLONG lQueryHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QuickQueryRecordFile(LLONG lLoginID, int nChannelId, int nRecordFileType, LPNET_TIME tmStart, LPNET_TIME tmEnd, char* pchCardid, LPNET_RECORDFILE_INFO nriFileinfo, int maxlen, int* filecount, int waittime = 1000, BOOL bTime = FALSE);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryFurthestRecordTime(LLONG lLoginID, int nRecordFileType, char* pchCardid, NET_FURTHEST_RECORD_TIME* pFurthrestTime, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_FindFile(LLONG lLoginID, int nChannelId, int nRecordFileType, char* cardid, LPNET_TIME time_start, LPNET_TIME time_end, BOOL bTime, int waittime);
CLIENT_NET_API int CALL_METHOD CLIENT_FindNextFile(LLONG lFindHandle, LPNET_RECORDFILE_INFO lpFindData);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindClose(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByRecordFile(LLONG lLoginID, LPNET_RECORDFILE_INFO lpRecordFile, HWND hWnd, fDownLoadPosCallBack cbDownLoadPos, LDWORD dwUserData);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByRecordFileEx(LLONG lLoginID, LPNET_RECORDFILE_INFO lpRecordFile, HWND hWnd, fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser, fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser);
typedef struct tagNET_IN_PLAY_BACK_BY_FILE_INFO
{
    LPNET_RECORDFILE_INFO pRecordFile;   
    HWND hWnd;                           
    fDownLoadPosCallBack cbDownLoadPos;  
    LDWORD dwPosUser;                    
    fDataCallBack fDownLoadDataCallBack; 
    LDWORD dwDataUser;                   
    int nPlayDirection;                  
    int nWaittime;                       
    fVKInfoCallBack pVKInfoCallBack;     
    LDWORD dwVKInfoUser;                 
    BOOL bOnlySupportRealUTC;            
    NET_TIME stuStartTimeRealUTC;        
    NET_TIME stuEndTimeRealUTC;          
    BYTE bReserved[964];                 
} NET_IN_PLAY_BACK_BY_FILE_INFO;
typedef struct tagNET_OUT_PLAY_BACK_BY_FILE_INFO
{
    BYTE bReserved[1024]; 
} NET_OUT_PLAY_BACK_BY_FILE_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByRecordFileEx2(LLONG lLoginID, const NET_IN_PLAY_BACK_BY_FILE_INFO* pstNetIn, NET_OUT_PLAY_BACK_BY_FILE_INFO* pstNetOut);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartPlayBackByRecordFile(LLONG lLoginID, LPNET_RECORDFILE_INFO lpRecordFile, HWND hWnd,
                                                                  fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser,
                                                                  fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser,
                                                                  fRealPlayDisConnect fDisConnectCallBack, LDWORD dwDisUser, DWORD dwWaitTime = 10000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_FramCotrolPlayBackByRecordFile(LLONG lLoginID, LPNET_RECORDFILE_INFO lpRecordFile, HWND hWnd,
                                                                       fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser,
                                                                       fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser, unsigned int nCutFrameRate);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByTime(LLONG lLoginID, int nChannelID, LPNET_TIME lpStartTime, LPNET_TIME lpStopTime, HWND hWnd, fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByTimeForSpGdpr(LLONG lLoginID, int nChannelID, LPNET_TIME lpStartTime, LPNET_TIME lpStopTime, HWND hWnd,
                                                                fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser,
                                                                fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByTimeEx(LLONG lLoginID, int nChannelID, LPNET_TIME lpStartTime, LPNET_TIME lpStopTime, HWND hWnd,
                                                         fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser,
                                                         fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByTimeEx2(LLONG lLoginID, int nChannelID,
                                                          NET_IN_PLAY_BACK_BY_TIME_INFO* pstNetIn, NET_OUT_PLAY_BACK_BY_TIME_INFO* pstNetOut);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartPlayBackByTime(LLONG lLoginID, int nChannelID,
                                                            LPNET_TIME lpStartTime, LPNET_TIME lpStopTime, HWND hWnd,
                                                            fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser,
                                                            fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser,
                                                            fRealPlayDisConnect fDisConnectCallBack, LDWORD dwDisUser, DWORD dwWaitTime = 10000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_FramCotrolPlayBackByTime(LLONG lLoginID, int nChannelID, LPNET_TIME lpStartTime, LPNET_TIME lpStopTime, HWND hWnd,
                                                                 fDownLoadPosCallBack cbDownLoadPos, LDWORD dwPosUser,
                                                                 fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser, unsigned int nCutFrameRate);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackBySynopsisFile(LLONG lLoginID,
                                                               LPNET_SYNOPSISFILE_INFO lpRecordFile,
                                                               HWND hWnd,
                                                               fDownLoadPosCallBack cbDownLoadPos,
                                                               LDWORD dwPosUser,
                                                               fDataCallBack fDownLoadDataCallBack,
                                                               LDWORD dwDataUser,
                                                               LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_MultiPlayBack(LLONG lLoginID, NET_MULTI_PLAYBACK_PARAM* pParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SeekPlayBack(LLONG lPlayHandle, unsigned int offsettime, unsigned int offsetbyte);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SeekPlayBackByTime(LLONG lPlayHandle, LPNET_TIME lpSeekTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PausePlayBack(LLONG lPlayHandle, BOOL bPause);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FastPlayBack(LLONG lPlayHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SlowPlayBack(LLONG lPlayHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayBackSpeed(LLONG lPlayHandle, EM_PLAY_BACK_SPEED emSpeed);
typedef enum tagEM_PLAYBACK_SPEED_TYPE
{
    EM_PLAYBACK_SPEED_FAST, 
    EM_PLAYBACK_SPEED_SLOW, 
} EM_PLAYBACK_SPEED_TYPE;
typedef enum tagEM_PLAYBACK_DIRECTION
{
    EM_PLAYBACK_DIRECTION_FORWARD, 
    EM_PLAYBACK_DIRECTION_REVERSE, 
} EM_PLAYBACK_DIRECTION;
typedef struct tagNET_IN_PLAYBACK_CUSTOM_SPEED
{
    DWORD dwSize;                       
    EM_PLAYBACK_SPEED_TYPE emSpeedType; 
    EM_PLAYBACK_DIRECTION emDirection;  
    int nPlaySpeed;                     
} NET_IN_PLAYBACK_CUSTOM_SPEED;
typedef struct tagNET_OUT_PLAYBACK_CUSTOM_SPEED
{
    DWORD dwSize; 
} NET_OUT_PLAYBACK_CUSTOM_SPEED;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayBackCustomSpeed(LLONG lPlayHandle, const NET_IN_PLAYBACK_CUSTOM_SPEED* pstInParam, NET_OUT_PLAYBACK_CUSTOM_SPEED* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StepPlayBack(LLONG lPlayHandle, BOOL bStop);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PlayBackControlDirection(LLONG lPlayHandle, BOOL bBackward);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetFramePlayBack(LLONG lPlayHandle, int framerate);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFramePlayBack(LLONG lPlayHandle, int* fileframerate, int* playframerate);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NormalPlayBack(LLONG lPlayHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SmartSearchPlayBack(LLONG lPlayHandle, LPIntelligentSearchPlay lpPlayBackParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPlayBackOsdTime(LLONG lPlayHandle, LPNET_TIME lpOsdTime, LPNET_TIME lpStartTime, LPNET_TIME lpEndTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopPlayBack(LLONG lPlayHandle);
typedef struct tagNET_IN_SUPPLEMENT_BY_TIME_INFO
{
    int nChannelID;                      
    NET_TIME stStartTime;                
    NET_TIME stStopTime;                 
    HWND hWnd;                           
    fDownLoadPosCallBack cbDownLoadPos;  
    LDWORD dwPosUser;                    
    fDataCallBack fDownLoadDataCallBack; 
    LDWORD dwDataUser;                   
    fVKInfoCallBack pVKInfoCallBack;     
    LDWORD dwVKInfoUser;                 
    BOOL bOnlySupportRealUTC;            
    NET_TIME stuStartTimeRealUTC;        
    NET_TIME stuEndTimeRealUTC;          
    char bReserved[972];                 
} NET_IN_SUPPLEMENT_BY_TIME_INFO;
typedef struct tagNET_OUT_SUPPLEMENT_BY_TIME_INFO
{
    char bReserved[1024]; 
} NET_OUT_SUPPLEMENT_BY_TIME_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SupplementByTime(LLONG lLoginID, NET_IN_SUPPLEMENT_BY_TIME_INFO* pstIn, NET_OUT_SUPPLEMENT_BY_TIME_INFO* pstOut);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopSupplement(LLONG lSupplementHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadByRecordFile(LLONG lLoginID, LPNET_RECORDFILE_INFO lpRecordFile, char* sSavedFileName, fDownLoadPosCallBack cbDownLoadPos, LDWORD dwUserData, BOOL bUseUTCTime = FALSE);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadByRecordFileEx(LLONG lLoginID, LPNET_RECORDFILE_INFO lpRecordFile, char* sSavedFileName,
                                                               fDownLoadPosCallBack cbDownLoadPos, LDWORD dwUserData,
                                                               fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser, void* pReserved = NULL, BOOL bUseUTCTime = FALSE);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadByTime(LLONG lLoginID, int nChannelId, int nRecordFileType, LPNET_TIME tmStart, LPNET_TIME tmEnd, char* sSavedFileName, fTimeDownLoadPosCallBack cbTimeDownLoadPos, LDWORD dwUserData);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadByTimeEx(LLONG lLoginID, int nChannelId, int nRecordFileType, LPNET_TIME tmStart, LPNET_TIME tmEnd, char* sSavedFileName,
                                                         fTimeDownLoadPosCallBack cbTimeDownLoadPos, LDWORD dwUserData,
                                                         fDataCallBack fDownLoadDataCallBack, LDWORD dwDataUser, void* pReserved = NULL);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDownloadPos(LLONG lFileHandle, int* nTotalSize, int* nDownLoadSize);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopDownload(LLONG lFileHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PauseDownload(LLONG lFileHandle, BOOL bPause);
#define NET_DATA_CALL_BACK_VALUE 1000 
typedef enum tagEM_AUDIO_DATA_TYPE
{
    EM_AUDIO_DATA_TYPE_DEFAULT = 0, 
    EM_AUDIO_DATA_TYPE_AAC,         
    EM_AUDIO_DATA_TYPE_G711A,       
    EM_AUDIO_DATA_TYPE_G711U,       
    EM_AUDIO_DATA_TYPE_MP2,         
} EM_AUDIO_DATA_TYPE;
typedef struct tagNET_DATA_CALL_BACK_TIME
{
    DWORD dwYear;        
    DWORD dwMonth;       
    DWORD dwDay;         
    DWORD dwHour;        
    DWORD dwMinute;      
    DWORD dwSecond;      
    DWORD dwMillisecond; 
    DWORD dwPTS;         
    DWORD dwDTS;         
    DWORD dwReserved[3]; 
} NET_DATA_CALL_BACK_TIME;
typedef enum tagEM_DATA_CALL_BACK_FRAM_TYPE
{
    EM_DATA_CALL_BACK_FRAM_TYPE_UNKNOWN = 0, 
    EM_DATA_CALL_BACK_FRAM_TYPE_VIDEO,       
    EM_DATA_CALL_BACK_FRAM_TYPE_AUDIO,       
    EM_DATA_CALL_BACK_FRAM_TYPE_DATA,        
} EM_DATA_CALL_BACK_FRAM_TYPE;
typedef enum tagEM_DATA_CALL_BACK_FRAM_SUB_TYPE
{
    EM_DATA_CALL_BACK_FRAM_SUB_TYPE_INVALID = -1, 
    EM_DATA_CALL_BACK_FRAM_SUB_TYPE_I_FRAME,      
    EM_DATA_CALL_BACK_FRAM_SUB_TYPE_P_FRAME,      
    EM_DATA_CALL_BACK_FRAM_SUB_TYPE_B_FRAME,      
} EM_DATA_CALL_BACK_FRAM_SUB_TYPE;
typedef struct tagNET_DATA_CALL_BACK_INFO
{
    DWORD dwSize;                                  
    DWORD dwDataType;                              
    unsigned char* pBuffer;                        
    DWORD dwBufSize;                               
    NET_DATA_CALL_BACK_TIME stuTime;               
    EM_DATA_CALL_BACK_FRAM_TYPE emFramType;        
    EM_DATA_CALL_BACK_FRAM_SUB_TYPE emFramSubType; 
} NET_DATA_CALL_BACK_INFO;
typedef int(CALLBACK* fDataCallBackEx)(LLONG lRealHandle, NET_DATA_CALL_BACK_INFO* pDataCallBack, LDWORD dwUser);
typedef struct tagNET_IN_REALPLAY_BY_DATA_TYPE
{
    DWORD dwSize;                      
    int nChannelID;                    
    HWND hWnd;                         
    DH_RealPlayType rType;             
    fRealDataCallBackEx cbRealData;    
    EM_REAL_DATA_TYPE emDataType;      
    LDWORD dwUser;                     
    const char* szSaveFileName;        
    fRealDataCallBackEx2 cbRealDataEx; 
    EM_AUDIO_DATA_TYPE emAudioType;    
    fDataCallBackEx cbRealDataEx2;     
} NET_IN_REALPLAY_BY_DATA_TYPE;
typedef struct tagNET_OUT_REALPLAY_BY_DATA_TYPE
{
    DWORD dwSize; 
} NET_OUT_REALPLAY_BY_DATA_TYPE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RealPlayByDataType(LLONG lLoginID, const NET_IN_REALPLAY_BY_DATA_TYPE* pstInParam, NET_OUT_REALPLAY_BY_DATA_TYPE* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_PLAYBACK_BY_DATA_TYPE
{
    DWORD dwSize;                            
    int nChannelID;                          
    NET_TIME stStartTime;                    
    NET_TIME stStopTime;                     
    HWND hWnd;                               
    fDownLoadPosCallBack cbDownLoadPos;      
    LDWORD dwPosUser;                        
    fDataCallBack fDownLoadDataCallBack;     
    EM_REAL_DATA_TYPE emDataType;            
    LDWORD dwDataUser;                       
    int nPlayDirection;                      
    EM_AUDIO_DATA_TYPE emAudioType;          
    fDataCallBackEx fDownLoadDataCallBackEx; 
} NET_IN_PLAYBACK_BY_DATA_TYPE;
typedef struct tagNET_OUT_PLAYBACK_BY_DATA_TYPE
{
    DWORD dwSize; 
} NET_OUT_PLAYBACK_BY_DATA_TYPE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByDataType(LLONG lLoginID, const NET_IN_PLAYBACK_BY_DATA_TYPE* pstInParam, NET_OUT_PLAYBACK_BY_DATA_TYPE* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_DOWNLOAD_BY_DATA_TYPE
{
    DWORD dwSize;                           
    int nChannelID;                         
    EM_QUERY_RECORD_TYPE emRecordType;      
    char* szSavedFileName;                  
    NET_TIME stStartTime;                   
    NET_TIME stStopTime;                    
    fTimeDownLoadPosCallBack cbDownLoadPos; 
    LDWORD dwPosUser;                       
    fDataCallBack fDownLoadDataCallBack;    
    EM_REAL_DATA_TYPE emDataType;           
    LDWORD dwDataUser;                      
    EM_AUDIO_DATA_TYPE emAudioType;         
} NET_IN_DOWNLOAD_BY_DATA_TYPE;
typedef struct tagNET_OUT_DOWNLOAD_BY_DATA_TYPE
{
    DWORD dwSize; 
} NET_OUT_DOWNLOAD_BY_DATA_TYPE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadByDataType(LLONG lLoginID, const NET_IN_DOWNLOAD_BY_DATA_TYPE* pstInParam, NET_OUT_DOWNLOAD_BY_DATA_TYPE* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_ADAPTIVE_DOWNLOAD_BY_TIME
{
    DWORD dwSize;                               
    int nChannelID;                             
    EM_QUERY_RECORD_TYPE emRecordType;          
    char* szSavedFileName;                      
    NET_TIME stStartTime;                       
    NET_TIME stStopTime;                        
    fTimeDownLoadPosCallBack cbDownLoadPos;     
    LDWORD dwPosUser;                           
    fDataCallBack fDownLoadDataCallBack;        
    EM_REAL_DATA_TYPE emDataType;               
    LDWORD dwDataUser;                          
    char szEncryptPasswd[64];                   
    BOOL bOnlySupportRealUTC;                   
    NET_TIME stuStartTimeRealUTC;               
    NET_TIME stuEndTimeRealUTC;                 
    fTimeDownLoadPosCallBackEx cbDownLoadPosEx; 
    fVKInfoCallBack pVKInfoCallBack;            
    LDWORD dwVKInfoUser;                        
} NET_IN_ADAPTIVE_DOWNLOAD_BY_TIME;
typedef struct tagNET_OUT_ADAPTIVE_DOWNLOAD_BY_TIME
{
    DWORD dwSize; 
} NET_OUT_ADAPTIVE_DOWNLOAD_BY_TIME;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AdaptiveDownloadByTime(LLONG lLoginID, const NET_IN_ADAPTIVE_DOWNLOAD_BY_TIME* pstInParam, NET_OUT_ADAPTIVE_DOWNLOAD_BY_TIME* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_DOWNLOAD_BYFILE_SELFADAPT
{
    DWORD dwSize;                        
    int nChannelID;                      
    EM_QUERY_RECORD_TYPE emRecordType;   
    char szFileName[MAX_PATH];           
    unsigned int size;                   
    fDownLoadPosCallBack cbDownLoadPos;  
    LDWORD dwPosUser;                    
    fDataCallBack fDownLoadDataCallBack; 
    EM_REAL_DATA_TYPE emDataType;        
    LDWORD dwDataUser;                   
    unsigned int nFrameNum;          
    NET_TIME stuStartTime;           
    NET_TIME stuEndTime;             
    unsigned int nDriveno;           
    unsigned int nStartCluster;      
    BYTE bImportantRecID;            
    BYTE bHint;                      
    BYTE bRecType;                   
    char szEncryptPasswd[64];        
    fVKInfoCallBack pVKInfoCallBack; 
    LDWORD dwVKInfoUser;             
} NET_IN_DOWNLOAD_BYFILE_SELFADAPT;
typedef struct tagNET_OUT_DOWNLOAD_BYFILE_SELFADAPT
{
    DWORD dwSize; 
} NET_OUT_DOWNLOAD_BYFILE_SELFADAPT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadByFileSelfAdapt(LLONG lLoginID, const NET_IN_DOWNLOAD_BYFILE_SELFADAPT* pstInParam, NET_OUT_DOWNLOAD_BYFILE_SELFADAPT* pstOutParam, DWORD dwWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDisplayRegion(LLONG lPlayHandle, DWORD nRegionNum, DH_DISPLAYRREGION* pSrcRect, HWND hDestWnd, BOOL bEnable);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindFrameInfo(LLONG lLoginID, NET_IN_FIND_FRAMEINFO_PRAM* pInParam, NET_OUT_FIND_FRAMEINFO_PRAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindNextFrameInfo(LLONG lFindHandle, NET_IN_FINDNEXT_FRAMEINFO_PRAM* pInParam, NET_OUT_FINDNEXT_FRAMEINFO_PRAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FileStreamSetTags(LLONG lFindHandle, NET_IN_FILE_STREAM_TAGS_INFO* pInParam, NET_OUT_FILE_STREAM_TAGS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FileStreamGetTags(LLONG lFindHandle, NET_IN_FILE_STREAM_GET_TAGS_INFO* pInParam, NET_OUT_FILE_STREAM_GET_TAGS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FileStreamClearTags(LLONG lFindHandle, NET_IN_FILE_STREAM_TAGS_INFO* pInParam, NET_OUT_FILE_STREAM_TAGS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FileStreamFilterTags(LLONG lFindHandle, NET_IN_FILE_STREAM_FILTER_TAGS_INFO* pInParam, NET_OUT_FILE_STREAM_GET_TAGS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindFrameInfoClose(LLONG lFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FileStreamMotionMatch(LLONG lLoginID, const NET_IN_MOTIONMATCH_PARAM* pInParam, NET_OUT_MOTIONMATCH_PARAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FileStreamFindTags(LLONG lFindHandle, NET_IN_FINDTAGS_INFO* pInParam, NET_OUT_FINDTAGS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TagManagerGetTagState(LLONG lLoginID, NET_IN_TAGMANAGER_GETTAGSTATE_INFO* pInParam, NET_OUT_TAGMANAGER_GETTAGSTATE_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TagManagerStartTag(LLONG lLoginID, NET_IN_TAGMANAGER_STARTTAG_INFO* pInParam, NET_OUT_TAGMANAGER_STARTTAG_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TagManagerSetSubTag(LLONG lLoginID, NET_IN_TAGMANAGER_SETSUBTAG_INFO* pInParam, NET_OUT_TAGMANAGER_SETSUBTAG_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TagManagerStopTag(LLONG lLoginID, NET_IN_TAGMANAGER_STOPTAG_INFO* pInParam, NET_OUT_TAGMANAGER_STOPTAG_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TagManagerGetCaps(LLONG lLoginID, NET_IN_TAGMANAGER_GETCAPS_INFO* pInParam, NET_OUT_TAGMANAGER_GETCAPS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_TagManagerStartFind(LLONG lLoginID, NET_IN_TAGMANAGER_STARTFIND_INFO* pInParam, NET_OUT_TAGMANAGER_STARTFIND_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TagManagerDoFind(LLONG lFindID, NET_IN_TAGMANAGER_DOFIND_INFO* pInParam, NET_OUT_TAGMANAGER_DOFIND_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TagManagerStopFind(LLONG lFindID);
CLIENT_NET_API void CALL_METHOD CLIENT_SetDVRMessCallBack(fMessCallBack cbMessage, LDWORD dwUser);
CLIENT_NET_API void CALL_METHOD CLIENT_SetDVRMessCallBackEx1(fMessCallBackEx1 cbMessage, LDWORD dwUser);
CLIENT_NET_API void CALL_METHOD CLIENT_SetDVRMessCallBackEx2(fMessCallBackEx2 cbMessage, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartListen(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartListenEx(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopListen(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AlarmReset(LLONG lLoginID, DWORD dwAlarmType, int nChannel, void* pReserved = NULL, int nWaitTime = 1000);
typedef struct tagNET_ACTIVE_RIGST_PARAMS
{
    DWORD dwSize;       
    BOOL bManualLogout; 
} NET_ACTIVE_RIGST_PARAMS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetServerParam(NET_ACTIVE_RIGST_PARAMS* pParam);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ListenServer(char* ip, WORD port, int nTimeout, fServiceCallBack cbListen, LDWORD dwUserData);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopListenServer(LLONG lServerHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResponseDevReg(char* devSerial, char* ip, WORD port, BOOL bAccept);
typedef int(CALLBACK* fRedirectServerCallBack)(LLONG lDevHandle, char* pDevIp, WORD wDevPort, LDWORD dwUserData);
typedef struct tagNET_CB_REDIRECT_SERVER_CALLBACK_INFO
{
    char* szIP;            
    UINT nPort;            
    char szDeviceID[256];  
    BYTE byReserved[1024]; 
} NET_CB_REDIRECT_SERVER_CALLBACK_INFO;
typedef int(CALLBACK* fRedirectServerCallBackEx)(LLONG lDevHandle, NET_CB_REDIRECT_SERVER_CALLBACK_INFO* pInParam, LDWORD dwUserData);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartRedirectService(char* ip, WORD port, fRedirectServerCallBack cbListen, LDWORD dwUserData);
typedef struct tagNET_IN_START_REDIRECT_SERVICE
{
    DWORD dwSize;                       
    BYTE byReserved[4];                 
    char szIP[64];                      
    WORD nPort;                         
    BYTE byReserved1[6];                
    fRedirectServerCallBackEx cbFuncEx; 
    LDWORD dwUserData;                  
} NET_IN_START_REDIRECT_SERVICE;
typedef struct tagNET_OUT_START_REDIRECT_SERVICE
{
    DWORD dwSize; 
} NET_OUT_START_REDIRECT_SERVICE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartRedirectServiceEx(NET_IN_START_REDIRECT_SERVICE* pInParam, NET_OUT_START_REDIRECT_SERVICE* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopRedirectService(LLONG lServerHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetAutoRegisterServerInfo(LLONG lDevHandle, char* ARSIP, WORD ARSPort, WORD nRetry);
typedef enum tagEM_DEV_PUSH_STREAM_TYPE
{
    EM_DEV_PUSH_STREAM_TYPE_MAJOR,  
    EM_DEV_PUSH_STREAM_TYPE_MINOR1, 
    EM_DEV_PUSH_STREAM_TYPE_MINOR2, 
} EM_DEV_PUSH_STREAM_TYPE;
typedef struct tagNET_IN_REQUEST_START_PUSH_STREAM_TYPE
{
    DWORD dwSize;                                
    int nChannelID;                              
    EM_DEV_PUSH_STREAM_TYPE emStreamType;        
    char szSSID[MAX_PUSH_STREAM_AUTH_SSID];      
    char szReciveServerIP[DH_MAX_IPADDR_LEN_EX]; 
    int nReciveServerPort;                       
} NET_IN_REQUEST_START_PUSH_STREAM_TYPE;
typedef struct tagNET_OUT_REQUEST_START_PUSH_STREAM_TYPE
{
    DWORD dwSize; 
} NET_OUT_REQUEST_START_PUSH_STREAM_TYPE;
typedef struct tagNET_IN_REQUEST_STOP_PUSH_STREAM_TYPE
{
    DWORD dwSize;                           
    char szSSID[MAX_PUSH_STREAM_AUTH_SSID]; 
} NET_IN_REQUEST_STOP_PUSH_STREAM_TYPE;
typedef struct tagNET_OUT_REQUEST_STOP_PUSH_STREAM_TYPE
{
    DWORD dwSize; 
} NET_OUT_REQUEST_STOP_PUSH_STREAM_TYPE;
typedef struct tagNET_IN_QUERY_PUSH_STREAM_INFO
{
    DWORD dwSize;                           
    char szSSID[MAX_PUSH_STREAM_AUTH_SSID]; 
} NET_IN_QUERY_PUSH_STREAM_INFO;
typedef struct tagNET_OUT_QUERY_PUSH_STREAM_INFO
{
    DWORD dwSize;                                
    char szReciveServerIP[DH_MAX_IPADDR_LEN_EX]; 
    int nReciveServerPort;                       
} NET_OUT_QUERY_PUSH_STREAM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ReqDevStartPushStream(LLONG lLoginID, const NET_IN_REQUEST_START_PUSH_STREAM_TYPE* pInParam, NET_OUT_REQUEST_START_PUSH_STREAM_TYPE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ReqDevStopPushStream(LLONG lLoginID, const NET_IN_REQUEST_STOP_PUSH_STREAM_TYPE* pInParam, NET_OUT_REQUEST_STOP_PUSH_STREAM_TYPE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDevPushStreamInfo(LLONG lLoginID, const NET_IN_QUERY_PUSH_STREAM_INFO* pInParam, NET_OUT_QUERY_PUSH_STREAM_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_PUSH_STREAM_CONNECT_STATE
{
    EM_PUSH_STREAM_CONNECT_STATE_SETUP,    
    EM_PUSH_STREAM_CONNECT_STATE_TEARDOWN, 
} EM_PUSH_STREAM_CONNECT_STATE;
typedef void(CALLBACK* fStreamClientState)(LLONG lClientHandle, char* clientIP, int clientPort, EM_PUSH_STREAM_CONNECT_STATE clientConState, LDWORD dwUserData);
typedef void(CALLBACK* fStreamDataComing)(LLONG lClientHandle, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUserData);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartReceiveStreamService(char* ip, WORD port, fStreamClientState cbClientState, LDWORD dwUserData1, fStreamDataComing cbLiveStreamData, LDWORD dwUserData2);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopReceiveStreamService(LLONG lServerHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopStreamClient(LLONG lClientHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetStreamClientAuthID(LLONG lServerHandle, const char* pSSID);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartService(WORD wPort, char* pIp = NULL, fServiceCallBack pfscb = NULL, DWORD dwTimeOut = 0xffffffff, LDWORD dwUserData = 0);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopService(LLONG lHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDeviceMode(LLONG lLoginID, EM_USEDEV_MODE emType, void* pValue);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartTalkEx(LLONG lLoginID, pfAudioDataCallBack pfcb, LDWORD dwUser);
typedef struct tagNET_IN_START_TALK_INFO
{
    DWORD dwSize;                               
    fAudioDataCallBackEx pfAudioDataCallBackEx; 
    LDWORD dwUser;                              
} NET_IN_START_TALK_INFO;
typedef struct tagNET_OUT_START_TALK_INFO
{
    DWORD dwSize; 
} NET_OUT_START_TALK_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartTalkByDataType(LLONG lLoginID, const NET_IN_START_TALK_INFO* pInParam, NET_OUT_START_TALK_INFO* pOutParam, int nWaittime);
typedef enum EM_TALK_DIRECTION
{
    EM_TALK_DIRECTION_UNKNOWN = 0, 
    EM_TALK_DIRECTION_UNI,         
    EM_TALK_DIRECTION_BILATERAL,   
    EM_TALK_DIRECTION_LISTEN,      
} EM_TALK_DIRECTION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTalkDirection(LLONG lTalkHandle, EM_TALK_DIRECTION* pDirection);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordStart();
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordStop();
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordStartEx(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordStopEx(LLONG lLoginID);
CLIENT_NET_API LONG CALL_METHOD CLIENT_TalkSendData(LLONG lTalkHandle, char* pSendBuf, DWORD dwBufSize);
typedef void(CALLBACK* fTalkSendPosCallBack)(LLONG lTalkHandle, DWORD dwTotalSize, DWORD dwSendSize, LDWORD dwUser);
typedef struct tagNET_IN_TALK_SEND_DATA_FILE
{
    DWORD dwSize;                   
    char* pFilePath;                
    fTalkSendPosCallBack cbSendPos; 
    LDWORD dwUser;                  
    DWORD dwSendInterval; 
    BOOL bNeedHead; 
    DH_TALK_CODING_TYPE emEncodeType; 
    int nAudioBit;                    
    DWORD dwSampleRate;               
} NET_IN_TALK_SEND_DATA_FILE;
typedef struct tagNET_OUT_TALK_SEND_DATA_FILE
{
    DWORD dwSize; 
} NET_OUT_TALK_SEND_DATA_FILE;
typedef struct tagNET_IN_TALK_SEND_DATA_STREAM
{
    DWORD dwSize; 
    BYTE* pBuf;      
    DWORD dwBufSize; 
    BOOL bNeedHead; 
    DH_TALK_CODING_TYPE emEncodeType; 
    int nAudioBit;                    
    DWORD dwSampleRate;               
} NET_IN_TALK_SEND_DATA_STREAM;
typedef struct tagNET_OUT_TALK_SEND_DATA_STREAM
{
    DWORD dwSize; 
} NET_OUT_TALK_SEND_DATA_STREAM;
CLIENT_NET_API LONG CALL_METHOD CLIENT_TalkSendDataByStream(LLONG lTalkHandle, const NET_IN_TALK_SEND_DATA_STREAM* pInParam, NET_OUT_TALK_SEND_DATA_STREAM* pOutParam);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_TalkSendDataByFile(LLONG lTalkHandle, const NET_IN_TALK_SEND_DATA_FILE* pInParam, NET_OUT_TALK_SEND_DATA_FILE* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopTalkSendDataByFile(LLONG lTalkHandle);
CLIENT_NET_API void CALL_METHOD CLIENT_AudioDec(char* pAudioDataBuf, DWORD dwBufSize);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AudioDecEx(LLONG lTalkHandle, char* pAudioDataBuf, DWORD dwBufSize);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetAudioClientVolume(LLONG lTalkHandle, WORD wVolume);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopTalkEx(LLONG lTalkHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AudioBroadcastAddDev(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AudioBroadcastDelDev(LLONG lLoginID);
CLIENT_NET_API int CALL_METHOD CLIENT_InitAudioEncode(DH_AUDIO_FORMAT aft);
CLIENT_NET_API int CALL_METHOD CLIENT_AudioEncode(LLONG lTalkHandle, BYTE* lpInBuf, DWORD* lpInLen, BYTE* lpOutBuf, DWORD* lpOutLen);
CLIENT_NET_API int CALL_METHOD CLIENT_ReleaseAudioEncode();
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryLog(LLONG lLoginID, char* pLogBuffer, int maxlen, int* nLogBufferlen, int waittime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDeviceLog(LLONG lLoginID, QUERY_DEVICE_LOG_PARAM* pQueryParam, char* pLogBuffer, int nLogBufferLen, int* pRecLogNum, int waittime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDevLogCount(LLONG lLoginID, NET_IN_GETCOUNT_LOG_PARAM* pInParam, NET_OUT_GETCOUNT_LOG_PARAM* pOutParam, int waittime = 3000);
CLIENT_NET_API void CALL_METHOD CLIENT_SetSubscribeLogCallBack(fSubLogDataCallBack pLogDataCB, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartSubscribeLog(LLONG lLoginID, int nWaittime, void* pReserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopSubscribeLog(LLONG lSubLogHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRecordState(LLONG lLoginID, char* pRSBuffer, int maxlen, int* nRSBufferlen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryExtraRecordState(LLONG lLoginID, char* pRSBuffer, int maxlen, int* nRSBufferlen, void* pReserved, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDevState(LLONG lLoginID, int nType, char* pBuf, int nBufLen, int* pRetLen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRemotDevState(LLONG lLoginID, int nType, int nChannelID, char* pBuf, int nBufLen, int* pRetLen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QuerySystemInfo(LLONG lLoginID, int nSystemType, char* pSysInfoBuffer, int maxlen, int* nSysInfolen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryNewSystemInfo(LLONG lLoginID, char* szCommand, int nChannelID, char* szOutBuffer, DWORD dwOutBufferSize, int* error, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryNewSystemInfoEx(LLONG lLoginID, char* szCommand, int nChannelID, char* szOutBuffer, DWORD dwOutBufferSize, int* error, void* pExtendInfo = NULL, int waittime = 1000);
CLIENT_NET_API LONG CALL_METHOD CLIENT_GetStatiscFlux(LLONG lLoginID, LLONG lPlayHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPtzOptAttr(LLONG lLoginID, DWORD dwProtocolIndex, LPVOID lpOutBuffer, DWORD dwBufLen, DWORD* lpBytesReturned, int waittime = 500);
typedef struct tagNET_IN_REMOTE_VIDEO_IN_ANALYSE_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_REMOTE_VIDEO_IN_ANALYSE_CAPS;
typedef struct tagNET_OUT_REMOTE_VIDEO_IN_ANALYSE_CAPS
{
    DWORD dwSize;                        
    int nSceneNum;                       
    EM_SCENE_CLASS_TYPE emSceneType[32]; 
} NET_OUT_REMOTE_VIDEO_IN_ANALYSE_CAPS;
typedef struct tagNET_IN_UTC_CAPS
{
    DWORD dwSize; 
} NET_IN_UTC_CAPS;
typedef struct tagNET_OUT_UTC_CAPS
{
    DWORD dwSize;                                  
    int nSupportUTCTimingCaps;                     
    int nSupportMediaFileFindGeneralUTCCaps;       
    int nSupportPlayBackUTCCaps;                   
    int nSupportDownloadUTCCaps;                   
    int nSupportDownloadByAllSpeedUTCCaps;         
    int nSupportMediaFileFindMobileEnforceUTCCaps; 
    int nSupportAccessCardRecUTC;                  
    int nSupportAnnouncementRecUTC;                
    int nSupportVideoTalkLogRecUTC;                
    int nSupportFileStreamRecUTC;                  
    int nSupportLogRecUTC;                         
    int nSupportAccessControlAlarmRecordRecUTC;    
    int nSupportFaceDBServerRecUTC;                
    int nSupportPOSUTC;                            
} NET_OUT_UTC_CAPS;
#define NET_DEV_CAP_SEQPOWER 0x01                   
#define NET_ENCODE_CFG_CAPS 0x02                    
#define NET_VIDEOIN_FISHEYE_CAPS 0x03               
#define NET_COMPOSITE_CAPS 0x04                     
#define NET_VIDEO_DETECT_CAPS 0x05                  
#define NET_THERMO_GRAPHY_CAPS 0x06                 
#define NET_RADIOMETRY_CAPS 0x07                    
#define NET_POS_CAPS 0x08                           
#define NET_USER_MNG_CAPS 0x09                      
#define NET_MEDIAMANAGER_CAPS 0x0a                  
#define NET_VIDEO_MOSAIC_CAPS 0x0b                  
#define NET_SNAP_CFG_CAPS 0x0c                      
#define NET_VIDEOIN_CAPS 0x0d                       
#define NET_FACE_BOARD_CAPS 0x0e                    
#define NET_EXTERNALSENSOR_CAPS 0x0f                
#define NET_VIDEO_IMAGECONTROL_CAPS 0x10            
#define NET_VIDEOIN_EXPOSURE_CAPS 0x11              
#define NET_VIDEOIN_DENOISE_CAPS 0x12               
#define NET_VIDEOIN_BACKLIGHT_CAPS 0x13             
#define NET_VIDEOIN_WHITEBALANCE_CAPS 0x14          
#define NET_VIDEOIN_DAYNIGHT_CAPS 0x15              
#define NET_VIDEOIN_ZOOM_CAPS 0x16                  
#define NET_VIDEOIN_FOCUS_CAPS 0x17                 
#define NET_VIDEOIN_SHARPNESS_CAPS 0x18             
#define NET_VIDEOIN_COLOR_CAPS 0x19                 
#define NET_GET_MASTERSLAVEGROUP_CAPS 0x1a          
#define NET_FACERECOGNITIONSE_CAPS 0x1b             
#define NET_STORAGE_CAPS 0x1c                       
#define NET_VIDEOIN_RAWFRAME_CAPS 0x1d              
#define NET_COAXIAL_CONTROL_IO_CAPS 0x1e            
#define NET_FACEINFO_CAPS 0x1f                      
#define NET_ACCESSCONTROL_CAPS 0x20                 
#define NET_COAXIAL_CONTROL_IO_STATUS 0x21          
#define NET_LIGHTINGCONTROL_CAPS 0x22               
#define NET_SUPPORT_GET_AUDIO_DECODE_CAPS 0x23      
#define NET_UNIFIEDINFOCOLLECT_CAPS 0x24            
#define NET_EXALARMBOX_CAPS 0x25                    
#define NET_ALARMBOXMANAGER_CAPS 0x26               
#define NET_GET_AUDIO_DETECT_CAPS 0x27              
#define NET_SUPPORT_FACEDB_DOWNLOAD 0x28            
#define NET_GET_LENS_FUNC_CAPS 0x29                 
#define NET_VIDEO_TALK_MANAGER_CAPS 0x2a            
#define NET_VIDEO_IN_DEFOG_CAPS 0x30                
#define NET_DIAGNOSIS_CAPS 0x31                     
#define NET_LOWRATEWPAN_CAPS 0x32                   
#define NET_GET_FILE_TRANSFER_CAPS 0x33             
#define NET_AUDIO_OUTPUT_CAPS 0x34                  
#define NET_REMOTE_FACE_RECOGNITION_CAPS 0x35       
#define NET_REMOTE_COLLECT_DEVINFO_CAPS 0x36        
#define NET_MONITOR_WALL_CAPS 0x37                  
#define NET_REMOTE_SPEAK_CAPS 0x38                  
#define NET_WLAN_CAPS 0x39                          
#define NET_LOG_ONLINE_BACKUP_CAPS 0x3A             
#define NET_RECEIPT_EVENT_CAPS 0x3B                 
#define NET_ANALYSE_TASK_MANAGER_CAPS 0x3C          
#define NET_PERIPHERAL_CHIP_CAPS 0x3D               
#define NET_CITIZEN_IDENTITY_MANAGER_CAPS 0x3E      
#define NET_AROUD_4G_PROBE_SEARCH_CAPS 0x3F         
#define NET_GET_ADVERTIMENT_CAPS 0x4A               
#define NET_VIDEOIN_LIGHTING_MIX_SOLUTION_CAPS 0x40 
#define NET_IXRAY_PACKAGE_MANAGER_CAPS 0x41         
#define NET_FLOW_STAT_CAPS 0x42                     
#define NET_FIRE_CONTROL_MANAGER_CAPS 0x43          
#define NET_REMOTE_VIDEO_IN_ANALYSE_CAPS 0x44       
#define NET_SUPPORT_UTC_CAPS 0x45                   
#define NET_VIDEOIN_MODE_ICR_CAPS 0x46              
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevCaps(LLONG lLoginID, int nType, void* pInBuf, void* pOutBuf, int nWaitTime);
#define NET_QUERY_DEV_STORAGE_NAMES 0x01                            
#define NET_QUERY_DEV_STORAGE_INFOS 0x02                            
#define NET_QUERY_RECENCY_JNNCTION_CAR_INFO 0x03                    
#define NET_QUERY_LANES_STATE 0x04                                  
#define NET_QUERY_DEV_FISHEYE_WININFO 0x05                          
#define NET_QUERY_DEV_REMOTE_DEVICE_INFO 0x06                       
#define NET_QUERY_SYSTEM_INFO 0x07                                  
#define NET_QUERY_REG_DEVICE_NET_INFO 0x08                          
#define NET_QUERY_DEV_THERMO_GRAPHY_PRESET 0x09                     
#define NET_QUERY_DEV_THERMO_GRAPHY_OPTREGION 0x0a                  
#define NET_QUERY_DEV_THERMO_GRAPHY_EXTSYSINFO 0x0b                 
#define NET_QUERY_DEV_RADIOMETRY_POINT_TEMPER 0x0c                  
#define NET_QUERY_DEV_RADIOMETRY_TEMPER 0x0d                        
#define NET_QUERY_GET_CAMERA_STATE 0x0e                             
#define NET_QUERY_GET_REMOTE_CHANNEL_AUDIO_ENCODE 0x0f              
#define NET_QUERY_GET_COMM_PORT_INFO 0x10                           
#define NET_QUERY_GET_LINKCHANNELS 0x11                             
#define NET_QUERY_GET_VIDEOOUTPUTCHANNELS 0x12                      
#define NET_QUERY_GET_VIDEOINFO 0x13                                
#define NET_QUERY_GET_ALLLINKCHANNELS 0x14                          
#define NET_QUERY_VIDEOCHANNELSINFO 0x15                            
#define NET_QUERY_TRAFFICRADAR_VERSION 0x16                         
#define NET_QUERY_WORKGROUP_NAMES 0x17                              
#define NET_QUERY_WORKGROUP_INFO 0x18                               
#define NET_QUERY_WLAN_ACCESSPOINT 0x19                             
#define NET_QUERY_GPS_INFO 0x1a                                     
#define NET_QUERY_IVS_REMOTE_DEVICE_INFO 0x1b                       
#define NET_QUERY_SMART_SWITCH_INFO 0x1c                            
#define NET_QUERY_UPGRADE_STATE 0x1d                                
#define NET_QUERY_VIDEO_ENCODE_CAPS 0x1e                            
#define NET_QUERY_AUDIO_ENCODE_CAPS 0x1f                            
#define NET_QUERY_AUDIO_IN_CAPS 0x20                                
#define NET_QUERY_SMART_ENCODE_CAPS 0x21                            
#define NET_QUERY_HARDDISK_TEMPERATURE 0x22                         
#define NET_QUERY_RAWFRAMEDATA 0x23                                 
#define NET_QUERY_GETSPLICEDATA 0x24                                
#define NET_QUERY_AUDIO_DECODE_CAPS 0x25                            
#define NET_QUERY_DEVICE_ID 0x26                                    
#define NET_QUERY_REMOTE_DEVICE_CAPS 0x27                           
#define NET_QUERY_TRAFFIC_SNAP_RADAR 0x28                           
#define NET_QUERY_TRAFFIC_SNAP_STROBE 0x29                          
#define NET_QUERY_DEV_VARIABLE_CAPS_MANAGER_CHECK_START 0x30        
#define NET_QUERY_DEV_VARIABLE_CAPS_MANAGER_GET_FUNC_TYPE_LIST 0x31 
#define NET_QUERY_GET_ALL_PARKING_SPACE_STATUS 0x32                 
#define NET_QUERY_VEHICLE_STATE_INFO 0x33                           
#define NET_QUERY_HTTP_PROXY_PORT 0x34                              
#define NET_QUERY_TRAFFIC_RADAR_GET_OBJECT 0x35                     
#define NET_QUERY_PTZ_CURRENT_FOV_VALUE 0x36                        
#define NET_QUERY_DEV_IO_STATS 0x37                                 
#define NET_QUERY_VIDEO_IN_STATUS 0x38                              
#define NET_QUERY_PTZBASE_GET_HFOV_VALUE 0x39                       
#define NET_QUERY_PTZBASE_GET_CENTER_GPS 0x3a                       
#define NET_QUERY_TRAFFIC_SNAP_PARK_SCREEN 0x3b                     
#define NET_QUERY_HTTP_PROXY_INFO 0x3c                              
#define NET_QUERY_TRAFFIC_RADAR_GET_OBJECT_EX 0x3d                  
#define NET_QUERY_PTZBASE_GET_FOCUS_VALUE 0x3e                      
#define NET_QUERY_PTZBASE_GET_VFOV_VALUE 0x3f                       
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDevInfo(LLONG lLoginID, int nQueryType, void* pInBuf, void* pOutBuf, void* pReserved = NULL, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RebootDev(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ShutDownDev(LLONG lLoginID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlDevice(LLONG lLoginID, CtrlType type, void* param, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartControlDevice(LLONG lLoginID, CtrlType type, void* param);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlDeviceEx(LLONG lLoginID, CtrlType emType, void* pInBuf, void* pOutBuf = NULL, int nWaitTime = 1000);
typedef struct tagNET_IN_MANAGER_UPDATELICENSE
{
    DWORD dwSize;        
    char szAppName[128]; 
    UINT nDataLen;       
    BYTE* pLicenseData;  
} NET_IN_MANAGER_UPDATELICENSE;
typedef struct tagNET_OUT_MANAGER_UPDATELICENSE
{
    DWORD dwSize; 
} NET_OUT_MANAGER_UPDATELICENSE;
typedef struct tagNET_IN_MANAGER_GETCAPS
{
    DWORD dwSize; 
} NET_IN_MANAGER_GETCAPS;
typedef struct tagNET_OUT_MANAGER_GETCAPS
{
    DWORD dwSize;  
    BOOL bSupport; 
} NET_OUT_MANAGER_GETCAPS;
typedef struct tagNET_IN_MANAGER_GETDHOPBASICINFO
{
    DWORD dwSize; 
} NET_IN_MANAGER_GETDHOPBASICINFO;
typedef struct tagNET_MANAGER_VERSION
{
    char szDhopOs[32];    
    char szDhopSdk[32];   
    char szSocSdk[32];    
    BYTE byReserved[256]; 
} NET_MANAGER_VERSION;
typedef struct tagNET_MANAGER_SYSTEM
{
    TP_U64 nTotal;        
    TP_U64 nFree;         
    BYTE byReserved[256]; 
} NET_MANAGER_SYSTEM;
typedef struct tagNET_MANAGER_INTELLI
{
    TP_U64 nTotal;        
    TP_U64 nFree;         
    BYTE byReserved[256]; 
} NET_MANAGER_INTELLI;
typedef struct tagNET_MANAGER_MEMEORY
{
    NET_MANAGER_SYSTEM stuSystem;   
    NET_MANAGER_INTELLI stuIntelli; 
    BYTE byReserved[128];           
} NET_MANAGER_MEMORY;
typedef struct tagNET_MANAGER_FLASH
{
    TP_U64 nTotal;        
    TP_U64 nFree;         
    BYTE byReserved[128]; 
} NET_MANAGER_FLASH;
typedef struct tagNET_MANAGER_WORKCAPS
{
    double dTotal;        
    double dFree;         
    BYTE byReserved[128]; 
} NET_MANAGER_WORKCAPS;
typedef enum tagEM_NET_NETWORK_CARD_TYPE
{
    EM_NET_NETWORK_CARD_TYPE_UNKNOWN = 0, 
    EM_NET_NETWORK_CARD_TYPE_NORMAL,      
    EM_NET_NETWORK_CARD_TYPE_FIBER,       
    EM_NET_NETWORK_CARD_TYPE_WIRELESS,    
    EM_NET_NETWORK_CARD_TYPE_TD_SCDMA,    
    EM_NET_NETWORK_CARD_TYPE_WCDMA,       
    EM_NET_NETWORK_CARD_TYPE_CDMA1X,      
    EM_NET_NETWORK_CARD_TYPE_CDMA2000,    
    EM_NET_NETWORK_CARD_TYPE_GSM,         
    EM_NET_NETWORK_CARD_TYPE_GPRS,        
    EM_NET_NETWORK_CARD_TYPE_EDGE,        
    EM_NET_NETWORK_CARD_TYPE_LTE,         
    EM_NET_NETWORK_CARD_TYPE_TD_LTE,      
    EM_NET_NETWORK_CARD_TYPE_FDD_LTE,     
    EM_NET_NETWORK_CARD_TYPE_EVDO,        
} EM_NET_NETWORK_CARD_TYPE;
typedef struct tagNET_MANAGER_NETWORK
{
    EM_NET_NETWORK_CARD_TYPE emNetWorkType; 
    UINT nSpec;                             
    BYTE byReserved[128];                   
} NET_MANAGER_NETWORK;
typedef struct tagNET_OUT_MANAGER_GETDHOPBASICINFO
{
    DWORD dwSize;                     
    char szPlatform[32];              
    NET_MANAGER_VERSION stuVersion;   
    NET_MANAGER_MEMORY stuMemory;     
    NET_MANAGER_FLASH stuFlash;       
    NET_MANAGER_WORKCAPS stuWorkCaps; 
    NET_MANAGER_NETWORK stuNetWork;   
} NET_OUT_MANAGER_GETDHOPBASICINFO;
typedef enum tagEM_NET_MANAGER_CTRL_TYPE
{
    EM_MANAGER_CTRL_UPDATELICENSE,    
    EM_MANAGER_CTRL_GETCAPS,          
    EM_MANAGER_CTRL_GETDHOPBASICINFO, 
} EM_NET_MANAGER_CTRL_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ManagerInstall(LLONG lLoginID, EM_NET_MANAGER_CTRL_TYPE emType, void* pInBuf, void* pOutBuf, int nWaittime);
typedef enum tagEM_NET_NEXT_OPERATE
{
    EM_NET_NEXT_OPERATE_UNKNOWN = 0, 
    EM_NET_NEXT_OPERATE_INSTALL,     
    EM_NET_NEXT_OPERATE_UPDATE,      
} EM_NET_NEXT_OPERATE;
typedef struct tagNET_IN_INSTALL_PREPAREEX
{
    DWORD dwSize;                      
    char szAppName[32];                
    EM_NET_NEXT_OPERATE emNextOperate; 
    UINT nTotalLength;                 
    BOOL bReliable;                    
} NET_IN_INSTALL_PREPAREEX;
typedef struct tagNET_OUT_INSTALL_PREPAREEX
{
    DWORD dwSize; 
} NET_OUT_INSTALL_PREPAREEX;
typedef struct tagNET_IN_INSTALL_APPEND_DATA
{
    DWORD dwSize;      
    UINT nTotalLen;    
    UINT nAppendLen;   
    BYTE* pAppendData; 
} NET_IN_INSTALL_APPEND_DATA;
typedef struct tagNET_OUT_INSTALL_APPEND_DATA
{
    DWORD dwSize; 
} NET_OUT_INSTALL_APPEND_DATA;
typedef struct tagNET_IN_INSTALL_EXECUTE
{
    DWORD dwSize;     
    BOOL bAutoReboot; 
} NET_IN_INSTALL_EXECUTE;
typedef struct tagNET_OUT_INSTALL_EXECUTE
{
    DWORD dwSize; 
} NET_OUT_INSTALL_EXECUTE;
typedef struct tagNET_IN_INSTALL_GETSTATE
{
    DWORD dwSize; 
} NET_IN_INSTALL_GETSTATE;
typedef enum tagEM_NET_UPGRADE_STATUS
{
    EM_NET_UPGRADE_UNKNOWN = 0,     
    EM_NET_UPGRADE_PREPARING,       
    EM_NET_UPGRADE_DOWNLOADING,     
    EM_NET_UPGRADE_DOWNLOADFAILED,  
    EM_NET_UPGRADE_UPGRADING,       
    EM_NET_UPGRADE_INVALID,         
    EM_NET_UPGRADE_FAILED,          
    EM_NET_UPGRADE_SUCCEEDED,       
    EM_NET_UPGRADE_CANCELLED,       
    EM_NET_UPGRADE_NOTENOUGHMEMORY, 
    EM_NET_UPGRADE_FILEUNMATCH,     
    EM_NET_UPGRADE_UNMATCHVERSION,  
    EM_NET_UPGRADE_SAMEASOLDAPP,    
    EM_NET_UPGRADE_APPEXIST,        
} EM_NET_UPGRADE_STATUS;
typedef struct tagNET_INSTALL_OUT_GETSTATE
{
    DWORD dwSize;                          
    EM_NET_UPGRADE_STATUS emUpgradeStatus; 
    int nProgress;                         
    char szFile[MAX_COMMON_STRING_256];    
} NET_OUT_INSTALL_GETSTATE;
typedef struct tagNET_INSTALL_IN_CANCEL
{
    DWORD dwSize; 
} NET_IN_INSTALL_CANCEL;
typedef struct tagNET_OUT_INSTALL_CANCEL
{
    DWORD dwSize; 
} NET_OUT_INSTALL_CANCEL;
typedef enum tagEM_NET_UPGRADE_ACTION
{
    EM_NET_UPGRADE_ACTION_UNKNOWN = 0,        
    EM_NET_UPGRADE_ACTION_INSTALLAPP,         
    EM_NET_UPGRADE_ACTION_UPDATEAPP,          
    EM_NET_UPGRADE_ACTION_UPDATEMAINFIRMWARE, 
    EM_NET_UPGRADE_ACTION_UPDATELICENSE,      
} EM_NET_UPGRADE_ACTION;
typedef struct tagNET_IN_INSTALL_FIRMWAREEX
{
    DWORD dwSize;                          
    EM_NET_UPGRADE_ACTION emUpgradeAction; 
    char szUrlString[1024];                
    char szAppName[64];                    
} NET_IN_INSTALL_FIRMWAREEX;
typedef struct tagNET_OUT_INSTALL_FIRMWAREEX
{
    DWORD dwSize; 
} NET_OUT_INSTALL_FIRMWAREEX;
typedef enum tag_EM_NET_UPGRADE_INSTALL_TYPE
{
    EM_UPGRADER_INSTALL_PREPAREEX,   
    EM_UPGRADER_INSTALL_APPEND_DATA, 
    EM_UPGRADER_INSTALL_EXECUTE,     
    EM_UPGRADER_INSTALL_GETSTATE,    
    EM_UPGRADER_INSTALL_CANCEL,      
    EM_UPGRADER_INSTALL_FIRMWAREEX,  
} EM_NET_UPGRADE_INSTALL_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpgraderInstall(LLONG lLoginID, EM_NET_UPGRADE_INSTALL_TYPE emType, void* pInBuf, void* pOutBuf, int nWaittime);
typedef struct tagNET_IN_DHOP_START_UPLOADTOAPP
{
    DWORD dwSize;        
    char szAppName[128]; 
    INT64 nFileSize;     
    char szMd5Sum[32];   
} NET_IN_DHOP_START_UPLOADTOAPP;
typedef struct tagNET_OUT_DHOP_START_UPLOADTOAPP
{
    DWORD dwSize;     
    char szToken[64]; 
} NET_OUT_DHOP_START_UPLOADTOAPP;
typedef struct tagNET_IN_DHOP_STOP_UPLOADTOAPP
{
    DWORD dwSize;     
    char szToken[64]; 
} NET_IN_DHOP_STOP_UPLOADTOAPP;
typedef struct tagNET_OUT_DHOP_STOP_UPLOADTOAPP
{
    DWORD dwSize; 
} NET_OUT_DHOP_STOP_UPLOADTOAPP;
typedef struct tagNET_IN_DHOP_DO_UPLOADTOAPP
{
    DWORD dwSize;     
    char szToken[64]; 
    INT64 nOffset;    
    INT64 nLength;    
    BYTE* pData;      
} NET_IN_DHOP_DO_UPLOADTOAPP;
typedef struct tagNET_OUT_DHOP_DO_UPLOADTOAPP
{
    DWORD dwSize; 
} NET_OUT_DHOP_DO_UPLOADTOAPP;
typedef struct tagNET_IN_DHOP_GET_UPLOADSTATE
{
    DWORD dwSize;     
    char szToken[64]; 
} NET_IN_DHOP_GET_UPLOADSTATE;
typedef struct tagNET_OUT_DHOP_GET_UPLOADSTATE
{
    DWORD dwSize;     
    char szType[64];  
    char szUuid[64];  
    char szState[64]; 
    int nProgress;    
} NET_OUT_DHOP_GET_UPLOADSTATE;
typedef enum tagEM_DHOPFILEMANAGER_TYPE
{
    EM_DHOPFILEMANAGER_START_UPLOADTOAPP, 
    EM_DHOPFILEMANAGER_STOP_UPLOADTOAPP,  
    EM_DHOPFILEMANAGER_DO_UPLOADTOAPP,    
    EM_DHOPFILEMANAGER_GET_UPLOADSTATE,   
} EM_DHOPFILEMANAGER_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DhopFileManager(LLONG lLoginID, EM_DHOPFILEMANAGER_TYPE emType, void* pInBuf, void* pOutBuf, int nWaitTime);
#define DH_POS_EXCHANGE_GOODS_MAX 4     
#define DH_POS_EXCHANGE_FUSSY_KEY_MAX 4 
typedef enum tagEM_NET_POS_EXCHANGE_FUSSY_KEY
{
    EM_NET_POS_EXCHANGE_KEY_NULL = 0,  
    EM_NET_POS_EXCHANGE_KEY_GOODS = 1, 
} EM_NET_POS_EXCHANGE_FUSSY_KEY;
typedef struct tagNET_IN_POSEXCHANGE_STARTFIND
{
    DWORD dwSize;                                                                
    int nChannel;                                                                
    NET_TIME_EX stuStartTime;                                                    
    NET_TIME_EX stuEndTime;                                                      
    char szGoods[DH_POS_EXCHANGE_GOODS_MAX][DH_COMMON_STRING_32];                
    EM_NET_POS_EXCHANGE_FUSSY_KEY szFuzzyPattern[DH_POS_EXCHANGE_FUSSY_KEY_MAX]; 
    int nPosId; 
} NET_IN_POSEXCHANGE_STARTFIND;
typedef struct tagNET_OUT_POSEXCHANGE_STARTFIND
{
    DWORD dwSize;        
    unsigned int nToken; 
    DWORD dwTotalCount;  
} NET_OUT_POSEXCHANGE_STARTFIND;
typedef struct tagNET_IN_POSEXCHANGE_DOFIND
{
    DWORD dwSize;              
    unsigned int nToken;       
    unsigned int nBeginNumber; 
    unsigned int nCount;       
} NET_IN_POSEXCHANGE_DOFIND;
typedef struct tagNET_POSEXCHANGE_INFO
{
    NET_TIME stuExchangeTime; 
} NET_POSEXCHANGE_INFO;
typedef struct tagNET_POSEXCHANGE_INFO_EX
{
    int nPosId;          
    char cDetail[512];   
    int nDetailLen;      
    BYTE reserved[1024]; 
} NET_POSEXCHANGE_INFO_EX;
typedef struct tagNET_OUT_POSEXCHANGE_DOFIND
{
    DWORD dwSize;                                                      
    DWORD dwFound;                                                     
    NET_POSEXCHANGE_INFO arrPOSExchangeInfo[DH_MAX_POS_EXCHANGE_INFO]; 
    NET_POSEXCHANGE_INFO_EX stuInfoEx[DH_MAX_POS_EXCHANGE_INFO];       
} NET_OUT_POSEXCHANGE_DOFIND;
typedef struct tagNET_IN_POSEXCHANGE_STOPFIND
{
    DWORD dwSize;        
    unsigned int nToken; 
} NET_IN_POSEXCHANGE_STOPFIND;
typedef struct tagNET_OUT_POSEXCHANGE_STOPFIND
{
    DWORD dwSize; 
} NET_OUT_POSEXCHANGE_STOPFIND;
typedef enum tagNET_EM_BOAT_STATISTICAL_DIRECTION
{
    NET_EM_BOAT_STATISTICAL_DIRECTION_UNKNOWN,       
    NET_EM_BOAT_STATISTICAL_DIRECTION_LEFT_TO_RIGHT, 
    NET_EM_BOAT_STATISTICAL_DIRECTION_RIGHT_TO_LEFT, 
    NET_EM_BOAT_STATISTICAL_DIRECTION_ALL,           
} NET_EM_BOAT_STATISTICAL_DIRECTION;
typedef enum tagNET_EM_BOAT_STATISTICAL_TIME_KEY
{
    NET_EM_BOAT_STATISTICAL_TIME_KEY_UNKNOWN, 
    NET_EM_BOAT_STATISTICAL_TIME_KEY_MONTH,   
    NET_EM_BOAT_STATISTICAL_TIME_KEY_DAY,     
    NET_EM_BOAT_STATISTICAL_TIME_KEY_HOUR,    
} NET_EM_BOAT_STATISTICAL_TIME_KEY;
typedef struct tagNET_IN_BOAT_STATISTICAL_STARTFIND
{
    DWORD dwSize;                                  
    int nChannelNum;                               
    int nChannels[512];                            
    NET_TIME stuStartTime;                         
    NET_TIME stuEndTime;                           
    int nChannel;                                  
    NET_EM_BOAT_STATISTICAL_DIRECTION emDirection; 
    NET_EM_BOAT_STATISTICAL_TIME_KEY emTimeKey;    
} NET_IN_BOAT_STATISTICAL_STARTFIND;
typedef struct tagNET_OUT_BOAT_STATISTICAL_STARTFIND
{
    DWORD dwSize;        
    unsigned int nToken; 
} NET_OUT_BOAT_STATISTICAL_STARTFIND;
typedef struct tagNET_IN_BOAT_STATISTICAL_DOFIND
{
    DWORD dwSize;        
    unsigned int nToken; 
} NET_IN_BOAT_STATISTICAL_DOFIND;
typedef struct tagNET_BOAT_STATISTICAL_INFO
{
    NET_TIME_EX stuStartTime; 
    NET_TIME_EX stuEndTime;   
    int nLeftToRightTotal;    
    int nRightToLeftTotal;    
    char szReserved[512];     
} NET_BOAT_STATISTICAL_INFO;
typedef struct tagNET_OUT_BOAT_STATISTICAL_DOFIND
{
    DWORD dwSize;                          
    int nCount;                            
    NET_BOAT_STATISTICAL_INFO stuInfo[32]; 
} NET_OUT_BOAT_STATISTICAL_DOFIND;
typedef struct tagNET_IN_BOAT_STATISTICAL_STOPFIND
{
    DWORD dwSize;        
    unsigned int nToken; 
} NET_IN_BOAT_STATISTICAL_STOPFIND;
typedef struct tagNET_OUT_BOAT_STATISTICAL_STOPFIND
{
    DWORD dwSize; 
} NET_OUT_BOAT_STATISTICAL_STOPFIND;
typedef enum tagNET_FIND
{
    NET_FIND_RADIOMETRY,       
    NET_FIND_POS_EXCHANGE,     
    NET_FIND_BOAT_STATISTICAL, 
} NET_FIND;
typedef enum tagNET_VIDEOSTREAM_TYPE
{
    NET_VIDEOSTREAM_NORMAL, 
    NET_VIDEOSTREAM_YUV,    
} NET_VIDEOSTREAM_TYPE;
#define MAX_EVENT_LINK_QUERY_CODE_NUMBER 8 
#define MAX_EVENT_LINK_NAME_NUMBER 16      
typedef enum tagEM_NET_QUERY_CODE
{
    EM_NET_QUERY_CODE_UNKNOWN,              
    EM_NET_QUERY_CODE_CROSSLINEDETECTION,   
    EM_NET_QUERY_CODE_CROSSREGIONDETECTION, 
    EM_NET_QUERY_CODE_TAKENAWAYDETECTION,   
    EM_NET_QUERY_CODE_LEFTDETECTION,        
    EM_NET_QUERY_CODE_PARKINGDETECTION,     
    EM_NET_QUERY_CODE_WANDERDETECTION,      
    EM_NET_QUERY_CODE_MOVEDETECTION,        
    EM_NET_QUERY_CODE_FACEDETECTION,        
    EM_NET_QUERY_CODE_RETROGRADEDETECTION,  
    EM_NET_QUERY_CODE_NUMBERSTAT,           
    EM_NET_QUERY_CODE_TRAFFICJUNCTION,      
    EM_NET_QUERY_CODE_RIOTERDETECTION,      
    EM_NET_QUERY_CODE_ALARMLOCAL,           
    EM_NET_QUERY_CODE_VIDEOMOTION,          
    EM_NET_QUERY_CODE_VIDEOBLIND,           
    EM_NET_QUERY_CODE_AUDIODETECT,          
    EM_NET_QUERY_CODE_AUDIOANOMALY,         
    EM_NET_QUERY_CODE_AUDIOMUTATION,        
    EM_NET_QUERY_CODE_SCENECHANGE,          
    EM_NET_QUERY_CODE_VIDEOUNFOCUS,         
    EM_NET_QUERY_CODE_STORAGELOWSPACE,      
    EM_NET_QUERY_CODE_STORAGEFAILURE,       
    EM_NET_QUERY_CODE_LOGINFAILURE,         
    EM_NET_QUERY_CODE_STORAGENOTEXIST,      
    EM_NET_QUERY_CODE_IPCONFLICT,           
    EM_NET_QUERY_CODE_NETABORT,             
    EM_NET_QUERY_CODE_HOTPLUG,              
    EM_NET_QUERY_CODE_STORAGEFORMAT,        
    EM_NET_QUERY_CODE_EMERGENCYRECORDPULL,  
} EM_NET_QUERY_CODE;
typedef enum tagEM_NET_LINK_NAME
{
    EM_NET_LINK_NAME_UNKNOWN,                
    EM_NET_LINK_NAME_DEFAULT,                
    EM_NET_LINK_NAME_TIMESECTIONENABLE,      
    EM_NET_LINK_NAME_RECORDENABLE,           
    EM_NET_LINK_NAME_RECORDCLOUDENABLE,      
    EM_NET_LINK_NAME_ALARMOUTENABLE,         
    EM_NET_LINK_NAME_PTZLINKENABLE,          
    EM_NET_LINK_NAME_SNAPSHOTENABLE,         
    EM_NET_LINK_NAME_SNAPSHOTCLOUDENABLE,    
    EM_NET_LINK_NAME_MAILENABLE,             
    EM_NET_LINK_NAME_BEEPENABLE,             
    EM_NET_LINK_NAME_DEJITTERENABLE,         
    EM_NET_LINK_NAME_TIPENABLE,              
    EM_NET_LINK_NAME_MONITORTOURENABLE,      
    EM_NET_LINK_NAME_MMSENABLE,              
    EM_NET_LINK_NAME_SUPPORTALARMBELL,       
    EM_NET_LINK_NAME_SUPPORTACCESSCONTROL,   
    EM_NET_LINK_NAME_SIPCALLENABLE,          
    EM_NET_LINK_NAME_SUPPORTALARMSERVER,     
    EM_NET_LINK_NAME_SUPPORTPTZLINKDELAY,    
    EM_NET_LINK_NAME_SUPPORTPSTNALARMSERVER, 
    EM_NET_LINK_NAME_SUPPORTICR,             
    EM_NET_LINK_NAME_BEEPTIME,               
    EM_NET_LINK_NAME_DEJITTERRANGE,          
    EM_NET_LINK_NAME_ALARMOUTLATCH,          
    EM_NET_LINK_NAME_RECORDLATCH,            
    EM_NET_LINK_NAME_VOICEENABLE,            
    EM_NET_LINK_NAME_LOGENABLE,              
    EM_NET_LINK_NAME_SUPPORTLIGHTCONTROL,    
    EM_NET_LINK_NAME_SUPPORTVIDEOMATRIX,     
} EM_NET_LINK_NAME;
typedef struct tagNET_IN_EVENT_LINK
{
    DWORD dwSize;                                                   
    int nCodeNum;                                                   
    EM_NET_QUERY_CODE szCodeName[MAX_EVENT_LINK_QUERY_CODE_NUMBER]; 
} NET_IN_EVENT_LINK;
typedef struct tagNET_OUT_EVENT_LINK
{
    DWORD dwSize;                                                                              
    EM_NET_LINK_NAME szLinkName[MAX_EVENT_LINK_QUERY_CODE_NUMBER][MAX_EVENT_LINK_NAME_NUMBER]; 
} NET_OUT_EVENT_LINK;
typedef struct tagNET_IN_EVENT_CHANNELS
{
    DWORD dwSize;            
    unsigned int nEventCode; 
} NET_IN_EVENT_CHANNELS;
typedef struct tagNET_OUT_EVENT_CHANNELS
{
    DWORD dwSize;                
    int nChannelNum;             
    int nEventChannelList[1024]; 
    BYTE byReserved[64];         
} NET_OUT_EVENT_CHANNELS;
typedef struct tagNET_IN_VIDEOINANALYSE_GET_ENABLECHANNELS
{
    DWORD dwSize; 
} NET_IN_VIDEOINANALYSE_GET_ENABLECHANNELS;
typedef struct tagNET_OUT_VIDEOINANALYSE_GET_ENABLECHANNELS
{
    DWORD dwSize;                                  
    int nLocalChnNum;                              
    int nLocalChannel[DH_MAX_CAMERA_CHANNEL_NUM];  
    int nRemoteChnNum;                             
    int nRemoteChannel[DH_MAX_CAMERA_CHANNEL_NUM]; 
} NET_OUT_VIDEOINANALYSE_GET_ENABLECHANNELS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFind(LLONG lLoginID, NET_FIND emType, void* pInBuf, void* pOutBuf, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFind(LLONG lLoginID, NET_FIND emType, void* pInBuf, void* pOutBuf, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFind(LLONG lLoginID, NET_FIND emType, void* pInBuf, void* pOutBuf, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetupRecordState(LLONG lLoginID, char* pRSBuffer, int nRSBufferlen);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetupExtraRecordState(LLONG lLoginID, char* pRSBuffer, int nRSBufferlen, void* pReserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryIOControlState(LLONG lLoginID, DH_IOTYPE emType,
                                                           void* pState, int maxlen, int* nIOCount, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_IOControl(LLONG lLoginID, DH_IOTYPE emType, void* pState, int maxlen);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MakeKeyFrame(LLONG lLoginID, int nChannelID, int nSubChannel = 0);
typedef void(CALLBACK* fConnectMessCallBack)(LLONG lConnectHandle, NET_CLOUDSERVICE_CONNECT_RESULT* pConnectResult, void* pReserved, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ConnectCloudService(LLONG lLoginID, NET_CLOUDSERVICE_CONNECT_PARAM* pConnectParm, fConnectMessCallBack pConnectMessCB, LDWORD dwUser, void* pReserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryUserInfo(LLONG lLoginID, USER_MANAGE_INFO* info, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryUserInfoEx(LLONG lLoginID, USER_MANAGE_INFO_EX* info, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryUserInfoNew(LLONG lLoginID, USER_MANAGE_INFO_NEW* info, void* pReserved, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryUserInfoNewEx(LLONG lLoginID, NET_USER_MANAGE_INFO_NEW_EX* pstuInfo, void* pReserved, int waittime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateUserInfo(LLONG lLoginID, int nOperateType, void* opParam, void* subParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateUserInfoEx(LLONG lLoginID, int nOperateType, void* opParam, void* subParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateUserInfoNew(LLONG lLoginID, int nOperateType, void* opParam, void* subParam, void* pRetParam, int waittime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CreateTransComChannel(LLONG lLoginID, int TransComType, unsigned int baudrate, unsigned int databits, unsigned int stopbits, unsigned int parity, fTransComCallBack cbTransCom, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendTransComData(LLONG lTransComChannel, char* pBuffer, DWORD dwBufSize);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DestroyTransComChannel(LLONG lTransComChannel);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryTransComParams(LLONG lLoginID, int TransComType, DH_COMM_STATE* pCommState, int nWaitTime = 500);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartUpgrade(LLONG lLoginID, char* pchFileName, fUpgradeCallBack cbUpgrade, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartUpgradeEx(LLONG lLoginID, EM_UPGRADE_TYPE emType, char* pchFileName, fUpgradeCallBack cbUpgrade, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartUpgradeEx2(LLONG lLoginID, EM_UPGRADE_TYPE emType, char* pchFileName, fUpgradeCallBackEx cbUpgrade, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendUpgrade(LLONG lUpgradeID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopUpgrade(LLONG lUpgradeID);
typedef enum tagEM_REMOTE_UPGRADE_CB_TYPE
{
    EM_REMOTE_UPGRADE_CB_TYPE_APPENDING, 
    EM_REMOTE_UPGRADE_CB_TYPE_EXECUTE,   
    EM_REMOTE_UPGRADE_CB_TYPE_FAILED,    
    EM_REMOTE_UPGRADE_CB_TYPE_CANCEL,    
} EM_REMOTE_UPGRADE_CB_TYPE;
typedef void(CALLBACK* fRemoteUpgradeCallBack)(LLONG lLoginID, LLONG lUpgradeID, EM_REMOTE_UPGRADE_CB_TYPE emState, INT64 nParam1, INT64 nParam2, LDWORD dwUser);
typedef enum tagEM_REMOTE_DEV_PROTOCOL_TYPE
{
    EM_REMOTE_DEV_PROTOCOL_TYPE_UNKNOWN, 
    EM_REMOTE_DEV_PROTOCOL_TYPE_DAHUA,   
    EM_REMOTE_DEV_PROTOCOL_TYPE_ONVIF,   
} EM_REMOTE_DEV_PROTOCOL_TYPE;
typedef struct tagNET_REMOTE_UPGRADE_CHNL_INFO
{
    UINT nChannel;                              
    char szDeviceID[128];                       
    EM_REMOTE_DEV_PROTOCOL_TYPE emProtocolType; 
    BYTE byReserved[380];                       
} NET_REMOTE_UPGRADE_CHNL_INFO;
typedef struct tagNET_IN_START_REMOTE_UPGRADE_INFO
{
    DWORD dwSize;                           
    UINT nListNum;                          
    NET_REMOTE_UPGRADE_CHNL_INFO* pstuList; 
    void* pReserved;                        
    char szFileName[256];                   
    fRemoteUpgradeCallBack cbRemoteUpgrade; 
    LDWORD dwUser;                          
    UINT nPacketSize;                       
} NET_IN_START_REMOTE_UPGRADE_INFO;
typedef struct tagNET_OUT_START_REMOTE_UPGRADE_INFO
{
    DWORD dwSize; 
} NET_OUT_START_REMOTE_UPGRADE_INFO;
typedef struct tagNET_IN_SELECT_REMOTE_UPGRADE_DEVLIST_INFO
{
    DWORD dwSize;                           
    UINT nListNum;                          
    NET_REMOTE_UPGRADE_CHNL_INFO* pstuList; 
    void* pReserved;                        
    char szFileName[256];                   
} NET_IN_SELECT_REMOTE_UPGRADE_DEVLIST_INFO;
typedef struct tagNET_OUT_SELECT_REMOTE_UPGRADE_DEVLIST_INFO
{
    DWORD dwSize; 
} NET_OUT_SELECT_REMOTE_UPGRADE_DEVLIST_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SelectRemoteUpgraderDevList(LLONG lLoginID, const NET_IN_SELECT_REMOTE_UPGRADE_DEVLIST_INFO* pInParam, NET_OUT_SELECT_REMOTE_UPGRADE_DEVLIST_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_REMOTE_UPGRADE_STATE
{
    EM_REMOTE_UPGRADE_STATE_UNKNOWN,     
    EM_REMOTE_UPGRADE_STATE_INIT,        
    EM_REMOTE_UPGRADE_STATE_DOWNLOADING, 
    EM_REMOTE_UPGRADE_STATE_UPGRADING,   
    EM_REMOTE_UPGRADE_STATE_FAILED,      
    EM_REMOTE_UPGRADE_STATE_SUCCEEDED,   
    EM_REMOTE_UPGRADE_STATE_CANCELLED,   
    EM_REMOTE_UPGRADE_STATE_PREPARING,   
} EM_REMOTE_UPGRADE_STATE;
typedef struct tagNET_REMOTE_UPGRADER_STATE
{
    int nChannel;                    
    EM_REMOTE_UPGRADE_STATE emState; 
    int nProgress;                   
    char szDeviceID[128];            
} NET_REMOTE_UPGRADER_STATE;
typedef struct tagNET_REMOTE_UPGRADER_NOTIFY_INFO
{
    LDWORD nStateNum;                      
    NET_REMOTE_UPGRADER_STATE* pstuStates; 
    BYTE byReserved[1024];                 
} NET_REMOTE_UPGRADER_NOTIFY_INFO;
typedef void(CALLBACK* fRemoteUpgraderStateCallback)(LLONG lLoginId, LLONG lAttachHandle, NET_REMOTE_UPGRADER_NOTIFY_INFO* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_REMOTEUPGRADE_STATE
{
    DWORD dwSize;                            
    fRemoteUpgraderStateCallback cbCallback; 
    LDWORD dwUser;                           
} NET_IN_ATTACH_REMOTEUPGRADE_STATE;
typedef struct tagNET_OUT_ATTACH_REMOTEUPGRADE_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_REMOTEUPGRADE_STATE;
typedef enum tagENUM_VENDOR_TYPE
{
    ENUM_VENDOR_TYPE_UNKNOWN, 
    ENUM_VENDOR_TYPE_GENERAL, 
    ENUM_VENDOR_TYPE_DH,      
    ENUM_VENDOR_TYPE_OEM,     
    ENUM_VENDOR_TYPE_LC,      
    ENUM_VENDOR_TYPE_EZIP,    
} ENUM_VENDOR_TYPE;
typedef enum tagENUM_STANDARD_TYPE
{
    ENUM_STANDARD_TYPE_UNKNOWN,  
    ENUM_STANDARD_TYPE_PAL,      
    ENUM_STANDARD_TYPE_NTSC,     
    ENUM_STANDARD_TYPE_PAL_NTSC, 
    ENUM_STANDARD_TYPE_NTSC_PAL, 
    ENUM_STANDARD_TYPE_SECAM,    
} ENUM_STANDARD_TYPE;
typedef struct tagNET_UPGRADER_SERIAL_INFO_EX
{
    ENUM_VENDOR_TYPE emVendor;             
    ENUM_STANDARD_TYPE emStandard;         
    NET_TIME_EX stuBuild;                  
    char szChip[DH_COMMON_STRING_16];      
    char szClass[DH_COMMON_STRING_64];     
    char szSerial[DH_COMMON_STRING_256];   
    char szLanguage[DH_COMMON_STRING_128]; 
    char szSn[DH_COMMON_STRING_64];        
    char szSWVersion[DH_COMMON_STRING_64]; 
    char szTag[DH_COMMON_STRING_256];      
    BYTE byReserved[1024];                 
} NET_UPGRADER_SERIAL_INFO_EX;
typedef struct tagNET_IN_GET_REMOTEUPDATE_SERIAL_EX
{
    DWORD dwSize;   
    int nChannelId; 
} NET_IN_GET_REMOTEUPDATE_SERIAL_EX;
typedef struct tagNET_OUT_GET_REMOTEUPDATE_SERIAL_EX
{
    DWORD dwSize;                                                        
    int nRetNum;                                                         
    NET_UPGRADER_SERIAL_INFO_EX stuSerialInfo[MAX_UPGRADER_SERIAL_INFO]; 
} NET_OUT_GET_REMOTEUPDATE_SERIAL_EX;
typedef struct tagNET_REMOTEUPGRADE_DATA_PARAM
{
    char szCheckSum[128]; 
    int nCheckType;       
    BYTE byReserved[892]; 
} NET_REMOTEUPGRADE_DATA_PARAM;
typedef struct tagNET_IN_SET_REMOTEUPGRADE_URL
{
    DWORD dwSize;                          
    int nChannelNum;                       
    int nChannels[256];                    
    char szUrl[256];                       
    NET_REMOTEUPGRADE_DATA_PARAM stuParam; 
    char szSpareUrls[4][256];              
    int nSpareUrlNum;                      
} NET_IN_SET_REMOTEUPGRADE_URL;
typedef struct tagNET_OUT_SET_REMOTEUPGRADE_URL
{
    DWORD dwSize; 
} NET_OUT_SET_REMOTEUPGRADE_URL;
typedef struct tagNET_IN_GET_REMOTEUPGRADE_STATE
{
    DWORD dwSize;
} NET_IN_GET_REMOTEUPGRADE_STATE;
typedef struct tagNET_OUT_GET_REMOTEUPGRADE_STATE
{
    DWORD dwSize;
    int nMaxStateNum;                      
    LDWORD nRetStateNum;                   
    NET_REMOTE_UPGRADER_STATE* pstuStates; 
} NET_OUT_GET_REMOTEUPGRADE_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartRemoteUpgrade(LLONG lLoginID, const NET_IN_START_REMOTE_UPGRADE_INFO* pInParam, NET_OUT_START_REMOTE_UPGRADE_INFO* pOutParam, int nWaitTime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopRemoteUpgrade(LLONG lUpgradeID);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRemoteUpgradeState(LLONG lLoginID, const NET_IN_ATTACH_REMOTEUPGRADE_STATE* pInParam, NET_OUT_ATTACH_REMOTEUPGRADE_STATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRemoteUpgradeState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteUpdateSerialEx(LLONG lLoginID, const NET_IN_GET_REMOTEUPDATE_SERIAL_EX* pInParam, NET_OUT_GET_REMOTEUPDATE_SERIAL_EX* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRemoteUpgradeUrl(LLONG lLoginID, const NET_IN_SET_REMOTEUPGRADE_URL* pInParam, NET_OUT_SET_REMOTEUPGRADE_URL* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteUpgradeState(LLONG lLoginID, const NET_IN_GET_REMOTEUPGRADE_STATE* pInParam, NET_OUT_GET_REMOTEUPGRADE_STATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevConfig(LLONG lLoginID, DWORD dwCommand, LONG lChannel, LPVOID lpOutBuffer, DWORD dwOutBufferSize, LPDWORD lpBytesReturned, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDevConfig(LLONG lLoginID, DWORD dwCommand, LONG lChannel, LPVOID lpInBuffer, DWORD dwInBufferSize, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNewDevConfig(LLONG lLoginID, char* szCommand, int nChannelID, char* szOutBuffer, DWORD dwOutBufferSize, int* error, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetNewDevConfig(LLONG lLoginID, char* szCommand, int nChannelID, char* szInBuffer, DWORD dwInBufferSize, int* error, int* restart, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteDevConfig(LLONG lLoginID, NET_IN_DELETECFG* pInParam, NET_OUT_DELETECFG* pOutParam, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMemberNames(LLONG lLoginID, NET_IN_MEMBERNAME* pInParam, NET_OUT_MEMBERNAME* pOutParam, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryNetStat(LLONG lLoginID, EM_NET_QUERY_TYPE emType, void* lpInParam, int nInParamLen, void* lpOutParam, int nOutParamLen, int* pError = NULL, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoInAnalyse(LLONG lLoginID, char* szCommand, int nChannelID, EM_SCENE_CLASS_TYPE emClassType, char* szOutBuffer, DWORD dwOutBufferSize, int* error, int waittime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEventLink(LLONG lLoginID, NET_IN_EVENT_LINK* pInParam, NET_OUT_EVENT_LINK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEventChannels(LLONG lLoginID, NET_IN_EVENT_CHANNELS* pInParam, NET_OUT_EVENT_CHANNELS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoInAnalyseEnableChannels(LLONG lLoginID, const NET_IN_VIDEOINANALYSE_GET_ENABLECHANNELS* pInParam,
                                                                       NET_OUT_VIDEOINANALYSE_GET_ENABLECHANNELS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryChannelName(LLONG lLoginID, char* pChannelName, int maxlen, int* nChannelCount, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetupChannelName(LLONG lLoginID, char* pbuf, int nbuflen);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetupChannelOsdString(LLONG lLoginID, int nChannelNo, DH_CHANNEL_OSDSTRING* struOsdString, int nbuflen);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDeviceTime(LLONG lLoginID, LPNET_TIME pDeviceTime, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetupDeviceTime(LLONG lLoginID, LPNET_TIME pDeviceTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDeviceTimeEx(LLONG lLoginID, LPNET_TIME_EX pDeviceTime, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetupDeviceTimeEx(LLONG lLoginID, LPNET_TIME_EX pDeviceTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDeviceUTC(LLONG lLoginID, LPNET_UTCTIME pDeviceTime, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDeviceUTC(LLONG lLoginID, LPNET_UTCTIME pDeviceTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetMaxFlux(LLONG lLoginID, WORD wFlux);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ImportConfigFile(LLONG lLoginID, char* szFileName, fDownLoadPosCallBack cbUploadPos, LDWORD dwUserData, DWORD param = 0);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopImportCfgFile(LLONG lImportHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ExportConfigFile(LLONG lLoginID, DH_CONFIG_FILE_TYPE emConfigFileType, char* szSavedFilePath, fDownLoadPosCallBack cbDownLoadPos, LDWORD dwUserData);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopExportCfgFile(LLONG lExportHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDVRIPByResolveSvr(char* pchDVRIP, WORD wDVRPort, BYTE* sDVRName, WORD wDVRNameLen, BYTE* sDVRSerialNumber, WORD wDVRSerialLen, char* sGetIP);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SearchDevices(char* szBuf, int nBufLen, int* pRetLen, DWORD dwSearchTime, char* szLocalIp = NULL);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartSearchDevices(fSearchDevicesCB cbSearchDevices, void* pUserData, char* szLocalIp = NULL);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopSearchDevices(LLONG lSearchHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyDevice(DEVICE_NET_INFO_EX* pDevNetInfo, DWORD dwWaitTime, int* iError = NULL, char* szLocalIp = NULL, void* reserved = NULL);
typedef enum tagEM_SEND_SEARCH_TYPE
{
    EM_SEND_SEARCH_TYPE_MULTICAST_AND_BROADCAST, 
    EM_SEND_SEARCH_TYPE_MULTICAST,               
    EM_SEND_SEARCH_TYPE_BROADCAST,               
} EM_SEND_SEARCH_TYPE;
typedef struct tagNET_IN_STARTSERACH_DEVICE
{
    DWORD dwSize;                       
    char szLocalIp[MAX_LOCAL_IP_LEN];   
    fSearchDevicesCBEx cbSearchDevices; 
    void* pUserData;                    
    EM_SEND_SEARCH_TYPE emSendType;     
} NET_IN_STARTSERACH_DEVICE;
typedef struct tagNET_OUT_STARTSERACH_DEVICE
{
    DWORD dwSize; 
} NET_OUT_STARTSERACH_DEVICE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartSearchDevicesEx(NET_IN_STARTSERACH_DEVICE* pInBuf, NET_OUT_STARTSERACH_DEVICE* pOutBuf);
typedef struct tagNET_IN_MODIFY_IP
{
    DWORD dwSize;                      
    DEVICE_NET_INFO_EX2 stuDevNetInfo; 
} NET_IN_MODIFY_IP;
typedef struct tagNET_OUT_MODIFY_IP
{
    DWORD dwSize; 
} NET_OUT_MODIFY_IP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyDeviceEx(NET_IN_MODIFY_IP* pInBuf, NET_OUT_MODIFY_IP* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SearchDevicesByIPs(DEVICE_IP_SEARCH_INFO* pIpSearchInfo, fSearchDevicesCB cbSearchDevices, LDWORD dwUserData, char* szLocalIp, DWORD dwWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDeviceSearchParam(const NET_DEVICE_SEARCH_PARAM* pstParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPlatFormInfo(LLONG lLoginID, DWORD dwCommand, int nSubCommand, int nParam, LPVOID lpOutBuffer, DWORD dwOutBufferSize, LPDWORD lpBytesReturned, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlatFormInfo(LLONG lLoginID, DWORD dwCommand, int nSubCommand, int nParam, LPVOID lpInBuffer, DWORD dwInBufferSize, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FocusControl(LLONG lLoginID, int nChannelID, DWORD dwFocusCommand, double nFocus, double nZoom, void* reserved = NULL, int waittime = 500);
CLIENT_NET_API void CALL_METHOD CLIENT_SetSnapRevCallBack(fSnapRev OnSnapRevMessage, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapPicture(LLONG lLoginID, SNAP_PARAMS par);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapPictureEx(LLONG lLoginID, SNAP_PARAMS* par, int* reserved = 0);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapPictureToFile(LLONG lLoginID, const NET_IN_SNAP_PIC_TO_FILE_PARAM* pInParam, NET_OUT_SNAP_PIC_TO_FILE_PARAM* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SNAP_PIC_FROM_REC
{
    DWORD dwSize;       
    UINT nChannel;      
    int nStreamType;    
    BYTE byReserved[4]; 
    NET_TIME stuTime;   
} NET_IN_SNAP_PIC_FROM_REC;
typedef struct tagNET_OUT_SNAP_PIC_FROM_REC
{
    DWORD dwSize;       
    BYTE byReserved[4]; 
    BYTE* pPicBuf;      
    UINT nBufLen;       
    UINT nRetLen;       
} NET_OUT_SNAP_PIC_FROM_REC;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapPicFromRecord(LLONG lLoginID, const NET_IN_SNAP_PIC_FROM_REC* pInParam, NET_OUT_SNAP_PIC_FROM_REC* pOutParam, int nWaitTime);
typedef struct tagNET_IN_MANUAL_SNAP
{
    DWORD dwSize;         
    UINT nChannel;        
    UINT nCmdSerial;      
    char szFilePath[260]; 
} NET_IN_MANUAL_SNAP;
typedef enum tagEM_SNAP_ENCODE_TYPE
{
    EM_SNAP_ENCODE_TYPE_UNKNOWN, 
    EM_SNAP_ENCODE_TYPE_JPEG,    
    EM_SNAP_ENCODE_TYPE_MPEG4_I, 
} EM_SNAP_ENCODE_TYPE;
typedef struct tagNET_OUT_MANUAL_SNAP
{
    DWORD dwSize;                     
    UINT nMaxBufLen;                  
    char* pRcvBuf;                    
    UINT nRetBufLen;                  
    EM_SNAP_ENCODE_TYPE emEncodeType; 
    UINT nCmdSerial;                  
    BYTE bReserved[4];                
} NET_OUT_MANUAL_SNAP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ManualSnap(LLONG lLoginID, const NET_IN_MANUAL_SNAP* pInParam, NET_OUT_MANUAL_SNAP* pOutParam, const int nWaitTime);
typedef struct tagNET_CB_ATTACH_SNAP_INFO
{
    char* pRcvBuf;                    
    UINT nBufLen;                     
    EM_SNAP_ENCODE_TYPE emEncodeType; 
    UINT nCmdSerial;                  
    BYTE byReserved[1028];            
} NET_CB_ATTACH_SNAP_INFO;
typedef void(CALLBACK* fAttachSnapRev)(LLONG lAttachHandle, NET_CB_ATTACH_SNAP_INFO* pstAttachCbInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_INTER_SNAP
{
    DWORD dwSize;                   
    UINT nChannel;                  
    UINT nCmdSerial;                
    UINT nIntervalSnap;             
    fAttachSnapRev cbAttachSnapRev; 
    LDWORD dwUser;                  
} NET_IN_ATTACH_INTER_SNAP;
typedef struct tagNET_OUT_ATTACH_INTER_SNAP
{
    DWORD dwSize; 
} NET_OUT_ATTACH_INTER_SNAP;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSnap(LLONG lLoginID, const NET_IN_ATTACH_INTER_SNAP* pInParam, NET_OUT_ATTACH_INTER_SNAP* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSnap(LLONG lAttachHandle);
CLIENT_NET_API void CALL_METHOD CLIENT_SetSubcribeGPSCallBack(fGPSRev OnGPSMessage, LDWORD dwUser);
CLIENT_NET_API void CALL_METHOD CLIENT_SetSubcribeGPSCallBackEX(fGPSRevEx OnGPSMessage, LDWORD dwUser);
CLIENT_NET_API void CALL_METHOD CLIENT_SetSubcribeGPSCallBackEX2(fGPSRevEx2 OnGPSMessage, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SubcribeGPS(LLONG lLoginID, BOOL bStart, LONG KeepTime, LONG InterTime);
typedef struct tagNET_IN_SET_GPS_UUID_INFO
{
    DWORD dwSize;
    char szUUID[64]; 
} NET_IN_SET_GPS_UUID_INFO;
typedef struct tagNET_OUT_SET_GPS_UUID_INFO
{
    DWORD dwSize;
} NET_OUT_SET_GPS_UUID_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetGPSUuidInfo(LLONG lLoginID, NET_IN_SET_GPS_UUID_INFO* pInParam, NET_OUT_SET_GPS_UUID_INFO* pOutParam);
CLIENT_NET_API void CALL_METHOD CLIENT_SetSubcribeGPSTHCallBack(fGPSTempHumidityRev OnGPSMessage, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SubcribeGPSTempHumidity(LLONG lLoginID, BOOL bStart, int InterTime, void* Reserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryGPSLog(LLONG lLoginID, QUERY_GPS_LOG_PARAM* pQueryParam, char* pLogBuffer, int nLogBufferLen, int* pRecLogNum, BOOL* bContinue, int waittime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AttachMission(LLONG lLoginID, NET_IN_ATTACH_MISSION_PARAM* pInParam, NET_OUT_ATTACH_MISSION_PARAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachMission(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BusConfirmEvent(LLONG lLoginID, const NET_IN_BUS_CONFIRM_EVENT* pInParam, NET_OUT_BUS_CONFIRM_EVENT* pOutParam, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDevicePosition(LLONG lLoginID, const NET_IN_SET_DEVICE_POSITION* pInParam, NET_OUT_SET_DEVICE_POSITION* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevicePosition(LLONG lLoginID, const NET_IN_GET_DEVICE_POSITION* pInParam, NET_OUT_GET_DEVICE_POSITION* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapPictureByEvent(LLONG lLoginID, const NET_IN_SNAP_BY_EVENT* pInParam, NET_OUT_SNAP_BY_EVENT* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDecoderInfo(LLONG lLoginID, LPDEV_DECODER_INFO lpDecInfo, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDecoderTVInfo(LLONG lLoginID, int nMonitorID, LPDEV_DECODER_TV lpMonitorInfo, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDecEncoderInfo(LLONG lLoginID, int nDecoderID, LPDEV_ENCODER_INFO lpEncoderInfo, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDecTVOutEnable(LLONG lLoginID, BYTE* pDecTVOutEnable, int nBufLen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDecLayOutEnable(LLONG lLoginID, BYTE bDecLayOutEnable, int nChannel, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDecLayOutEnable(LLONG lLoginID, BYTE* pDecLayOutEnable, int nChannel, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetOperateCallBack(LLONG lLoginID, fMessDataCallBack cbMessData, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CtrlDecTVScreen(LLONG lLoginID, int nMonitorID, BOOL bEnable, int nSplitType, BYTE* pEncoderChannel, int nBufLen, void* userdata = NULL);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SwitchDecTVEncoder(LLONG lLoginID, int nDecoderID, LPDEV_ENCODER_INFO lpEncoderInfo, void* userdata = NULL);
CLIENT_NET_API int CALL_METHOD CLIENT_AddTourCombin(LLONG lLoginID, int nMonitorID, int nSplitType, BYTE* pEncoderChannnel, int nBufLen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelTourCombin(LLONG lLoginID, int nMonitorID, int nCombinID, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetTourCombin(LLONG lLoginID, int nMonitorID, int nCombinID, int nSplitType, BYTE* pEncoderChannel, int nBufLen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryTourCombin(LLONG lLoginID, int nMonitorID, int nCombinID, LPDEC_COMBIN_INFO lpDecCombinInfo, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDecoderTour(LLONG lLoginID, int nMonitorID, LPDEC_TOUR_COMBIN lpDecTourInfo, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDecoderTour(LLONG lLoginID, int nMonitorID, LPDEC_TOUR_COMBIN lpDecTourInfo, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDecChannelFlux(LLONG lLoginID, int nDecoderID, LPDEV_DECCHANNEL_STATE lpChannelStateInfo, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CtrlDecoderTour(LLONG lLoginID, int nMonitorID, DEC_CTRL_TOUR_TYPE emActionParam, int waittime = 1000);
typedef void(CALLBACK* fDecPlayBackPosCallBack)(LLONG lLoginID, int nEncoderID, DWORD dwTotalSize, DWORD dwPlaySize, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDecPlaybackPos(LLONG lLoginID, fDecPlayBackPosCallBack cbPlaybackPos, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DecTVPlayback(LLONG lLoginID, int nDecoderID, DEC_PLAYBACK_MODE emPlaybackMode, LPVOID lpInBuffer, DWORD dwInBufferSize, void* userdata = NULL);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CtrlDecPlayback(LLONG lLoginID, int nDecoderID, DEC_CTRL_PLAYBACK_TYPE emCtrlType, int nValue, int waittime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RealLoadPicture(LLONG lLoginID, int nChannelID, DWORD dwAlarmType, fAnalyzerDataCallBack cbAnalyzerData, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RealLoadPictureEx(LLONG lLoginID, int nChannelID,
                                                          DWORD dwAlarmType,
                                                          BOOL bNeedPicFile,
                                                          fAnalyzerDataCallBack cbAnalyzerData,
                                                          LDWORD dwUser,
                                                          void* Reserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLoadPic(LLONG lAnalyzerHandle);
typedef struct tagNET_IN_GET_CUSTOMINFO_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_CUSTOMINFO_CAPS;
typedef struct tagNET_OUT_GET_CUSTOMINFO_CAPS
{
    DWORD dwSize;                   
    BOOL bSupportXRaySubscribeRule; 
} NET_OUT_GET_CUSTOMINFO_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCustomInfoCaps(LLONG lLoginID, const NET_IN_GET_CUSTOMINFO_CAPS* pInParam, NET_OUT_GET_CUSTOMINFO_CAPS* pOutParam, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapManagerConfirmUpload(LLONG lLoginID, const NET_IN_SNAP_MANAGER_CONFIRM_UPLOAD* pstInParam, NET_OUT_SNAP_MANAGER_CONFIRM_UPLOAD* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapManagerGetCaps(LLONG lLoginID, const NET_IN_SNAP_MANAGER_GET_CAPS* pstInParam, NET_OUT_SNAP_MANAGER_GET_CAPS* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapManagerStoragePicture(LLONG lLoginID, const NET_IN_SNAP_MANAGER_STORAGE_PICTURE* pstInParam, NET_OUT_SNAP_MANAGER_STORAGE_PICTURE* pstOutParam, int waittime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_FindFileEx(LLONG lLoginID, EM_FILE_QUERY_TYPE emType, void* pQueryCondition, void* reserved, int waittime = 1000);
CLIENT_NET_API int CALL_METHOD CLIENT_FindNextFileEx(LLONG lFindHandle, int nFilecount, void* pMediaFileInfo, int maxlen, void* reserved, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindCloseEx(LLONG lFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTotalFileCount(LLONG lFindHandle, int* pTotalCount, void* reserved, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetFindingJumpOption(LLONG lFindHandle, NET_FINDING_JUMP_OPTION_INFO* pOption, void* reserved, int waittime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadMediaFile(LLONG lLoginID, EM_FILE_QUERY_TYPE emType, void* lpMediaFileInfo, char* sSavedFileName, fDownLoadPosCallBack cbDownLoadPos, LDWORD dwUserData, void* reserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopDownloadMediaFile(LLONG lFileHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DownLoadMultiFile(LLONG lLoginID, NET_IN_DOWNLOAD_MULTI_FILE* pstInParam, NET_OUT_DOWNLOAD_MULTI_FILE* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLoadMultiFile(LLONG lDownLoadHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_LoadOffLineFile(LLONG lLoginID, int nChannelID, DWORD dwAlarmType, LPNET_TIME_EX lpStartTime, LPNET_TIME_EX lpEndTime, fAnalyzerDataCallBack cbAnalyzerData, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PauseLoadPic(LLONG lLoadHadle, BOOL bPause);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TrafficSnapByNetwork(LLONG lLoginID, int nChannelID, NET_IN_SNAPSHOT* pstInParam, NET_OUT_SNAPSHOT* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TrafficForceLightState(LLONG lLoginID, int nChannelID, NET_IN_FORCELIGHTSTATE* pstInParamg, NET_OUT_FORCELIGHTSTATE* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateTrafficList(LLONG lLoginID, NET_IN_OPERATE_TRAFFIC_LIST_RECORD* pstInParam, NET_OUT_OPERATE_TRAFFIC_LIST_RECORD* pstOutParam = NULL, int waittime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartTrafficFluxStat(LLONG lLoginID, NET_IN_TRAFFICFLUXSTAT* pstInParam, NET_OUT_TRAFFICFLUXSTAT* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopTrafficFluxStat(LLONG lFluxStatHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindFluxStat(LLONG lLoginID, NET_IN_TRAFFICSTARTFINDSTAT* pstInParam, NET_OUT_TRAFFICSTARTFINDSTAT* pstOutParam);
CLIENT_NET_API int CALL_METHOD CLIENT_DoFindFluxStat(LLONG lFindHandle, NET_IN_TRAFFICDOFINDSTAT* pstInParam, NET_OUT_TRAFFICDOFINDSTAT* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindFluxStat(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindNumberStat(LLONG lLoginID, NET_IN_FINDNUMBERSTAT* pstInParam, NET_OUT_FINDNUMBERSTAT* pstOutParam);
CLIENT_NET_API int CALL_METHOD CLIENT_DoFindNumberStat(LLONG lFindHandle, NET_IN_DOFINDNUMBERSTAT* pstInParam, NET_OUT_DOFINDNUMBERSTAT* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindNumberStat(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVideoStatSummary(LLONG lLoginID, const NET_IN_ATTACH_VIDEOSTAT_SUM* pInParam, NET_OUT_ATTACH_VIDEOSTAT_SUM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVideoStatSummary(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVideoStatHeatMap(LLONG lLoginID, const NET_IN_ATTACH_VIDEOSTAT_HEATMAP* pInParam, NET_OUT_ATTACH_VIDEOSTAT_HEATMAP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoStatHeatMap(LLONG lAttachHandle, const NET_IN_GET_VIDEOSTAT_HEATMAP* pInParam, NET_OUT_GET_VIDEOSTAT_HEATMAP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVideoStatHeatMap(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateVideoAnalyseDevice(LLONG lLoginID, int nChannelID, char* szCmd, void* pstInParam, void* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_VideoAnalyseGetTemplateImage(LLONG lLoginID, const NET_IN_VIDEOANALYSE_GETTEMPLATEIMAGE* pstInParam, NET_OUT_VIDEOANALYSE_GETTEMPLATEIMAGE* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_VideoAnalyseSetTemplateImage(LLONG lLoginID, const NET_IN_VIDEOANALYSE_SETTEMPLATEIMAGE* pstInParam, NET_OUT_VIDEOANALYSE_SETTEMPLATEIMAGE* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateCommDevice(LLONG lLoginID, int nChannelID, char* szCmd, void* pstInParam, void* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlIntelliTracker(LLONG lLoginID, NET_IN_CONTROL_INTELLITRACKER* pstInParam, NET_OUT_CONTROL_INTELLITRACKER* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateMasterSlaveDevice(LLONG lLoginID, int nChannelID, char* szCmd, void* pstInParam, void* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateVideoJoin(LLONG lLoginID, NET_VIDEOJOIN_OPERATE_TYPE emType, void* pstInParam, void* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLastEventInfo(LLONG lLoginID, NET_IN_GET_LAST_EVENT_INFO* pstInParam, NET_OUT_GET_LAST_EVENT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartVideoDiagnosis(LLONG lLoginID, NET_IN_VIDEODIAGNOSIS* pstInParam, NET_OUT_VIDEODIAGNOSIS* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopVideoDiagnosis(LLONG hDiagnosisHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindDiagnosisResult(LLONG lLoginID, NET_IN_FIND_DIAGNOSIS* pstInParam, NET_OUT_FIND_DIAGNOSIS* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindDiagnosisResult(LLONG hFindHandle, NET_IN_DIAGNOSIS_INFO* pstInParam, NET_OUT_DIAGNOSIS_INFO* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindDiagnosis(LLONG hFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartRealTimeProject(LLONG lLoginID, NET_IN_START_RT_PROJECT_INFO* pstInParam, NET_OUT_START_RT_PROJECT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopRealTimeProject(LLONG lLoginID, NET_IN_STOP_RT_PROJECT_INFO* pstInParam, NET_OUT_STOP_RT_PROJECT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartManualDiagnosisProject(LLONG lLoginID, NET_IN_START_MANUAL_PROJECT_INFO* pstInParam, NET_OUT_START_MANUAL_PROJECT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopManualDiagnosisProject(LLONG lLoginID, NET_IN_STOP_MANUAL_PROJECT_INFO* pstInParam, NET_OUT_STOP_MANUAL_PROJECT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpdateProjectBackGround(LLONG lLoginID, const NET_IN_UPDATE_PROJECT_BACKGROUND_INFO* pstInParam, NET_OUT_UPDATE_PROJECT_BACKGROUND_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_TRACKER_STATE
{
    EM_TRACKER_STATE_UNKNOWN, 
    EM_TRACKER_STATE_START,   
    EM_TRACKER_STATE_STOP,    
} EM_TRACKER_STATE;
typedef enum tagEM_TRACKER_STOP_TYPE
{
    EM_TRACKER_STOP_TYPE_UNKNOWN, 
    EM_TRACKER_STOP_TYPE1,        
    EM_TRACKER_STOP_TYPE2,        
    EM_TRACKER_STOP_TYPE3,        
    EM_TRACKER_STOP_TYPE4,        
    EM_TRACKER_STOP_TYPE5,        
    EM_TRACKER_STOP_TYPE6,        
} EM_TRACKER_STOP_TYPE;
typedef struct tagNET_CB_TRACKER_STATE
{
    EM_TRACKER_STATE emState;        
    EM_TRACKER_STOP_TYPE emStopType; 
    char szReserved[256];            
} NET_CB_TRACKER_STATE;
typedef void(CALLBACK* fNotifyTrackerState)(LLONG lAttachHandle, NET_CB_TRACKER_STATE* pstuTrackerState, LDWORD dwUser);
typedef struct tagNET_IN_INTELLI_TRACKER_DETAILINFO
{
    DWORD dwSize;                             
    fNotifyTrackerState cbNotifyTrackerState; 
    int nChannelID;                           
    LDWORD dwUser;                            
} NET_IN_INTELLI_TRACKER_DETAILINFO;
typedef struct tagNET_OUT_INTELLI_TRACKER_DETAILINFO
{
    DWORD dwSize; 
} NET_OUT_INTELLI_TRACKER_DETAILINFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachIntelliTrackerDetail(LLONG lLoginID, const NET_IN_INTELLI_TRACKER_DETAILINFO* pstuInParam, NET_OUT_INTELLI_TRACKER_DETAILINFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachIntelliTrackerDetail(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_VIDEO_DIAGNOSIS_PLATFORM
{
    DWORD dwSize; 
} NET_IN_GET_VIDEO_DIAGNOSIS_PLATFORM;
typedef enum tagNET_EM_VIDEO_DIAGNOSIS_TYPE
{
    NET_EM_VIDEO_DIAGNOSIS_TYPE_UNKNOWN,           
    NET_EM_VIDEO_DIAGNOSIS_TYPE_8_SERIES_PLATFORM, 
    NET_EM_VIDEO_DIAGNOSIS_TYPE_9_SERIES_PLATFORM, 
    NET_EM_VIDEO_DIAGNOSIS_TYPE_ICC_PLATFORM,      
} NET_EM_VIDEO_DIAGNOSIS_TYPE;
typedef struct tagNET_VIDEO_DIAGNOSIS_PLATFORM_INFO
{
    NET_EM_VIDEO_DIAGNOSIS_TYPE emType; 
    char szIP[64];                      
    UINT nPort;                         
    char szUsername[64];                
    char szPassword[64];                
    char szReserved[1024];              
} NET_VIDEO_DIAGNOSIS_PLATFORM_INFO;
typedef struct tagNET_OUT_GET_VIDEO_DIAGNOSIS_PLATFORM
{
    DWORD dwSize;                              
    NET_VIDEO_DIAGNOSIS_PLATFORM_INFO stuInfo; 
} NET_OUT_GET_VIDEO_DIAGNOSIS_PLATFORM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoDiagnosisPlatform(LLONG lLoginID, const NET_IN_GET_VIDEO_DIAGNOSIS_PLATFORM* pstInParam, NET_OUT_GET_VIDEO_DIAGNOSIS_PLATFORM* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_VIDEO_DIAGNOSIS_PLATFORM
{
    DWORD dwSize;                              
    NET_VIDEO_DIAGNOSIS_PLATFORM_INFO stuInfo; 
} NET_IN_SET_VIDEO_DIAGNOSIS_PLATFORM;
typedef struct tagNET_OUT_SET_VIDEO_DIAGNOSIS_PLATFORM
{
    DWORD dwSize; 
} NET_OUT_SET_VIDEO_DIAGNOSIS_PLATFORM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetVideoDiagnosisPlatform(LLONG lLoginID, const NET_IN_SET_VIDEO_DIAGNOSIS_PLATFORM* pstInParam, NET_OUT_SET_VIDEO_DIAGNOSIS_PLATFORM* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetParkingSpaceStatus(LLONG lLoginID, NET_IN_GET_PARKINGSPACE_STATUS* pstInParam, NET_OUT_GET_PARKINGSPACE_STATUS* pstOutParam);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachParkingSpaceData(LLONG lLoginID, NET_IN_ATTACH_PARKINGSPACE* pstInParam, NET_OUT_ATTACH_PARKINGSPACE* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachParkingSpaceData(NET_IN_DETACH_PARKINGSPACE* pstInParam, NET_OUT_DETACH_PARKINGSPACE* pstOutParam);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachCarPassInfo(LLONG lLoginID, NET_IN_ATTACH_CAR_PASS_INFO* pstInParam, NET_OUT_ATTACH_CAR_PASS_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachCarPassInfo(LLONG lCarPassInfoHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachLanesState(LLONG lLoginID, NET_IN_ATTACH_LANES_STATE* pstInParam, NET_OUT_ATTACH_LANES_STATE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachLanesState(LLONG lLanesStateHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCarPortLightStatus(LLONG lLoginID, NET_IN_GET_CARPORTLIGHT_STATUS* pstInParam, NET_OUT_GET_CARPORTLIGHT_STATUS* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetCarPortLightStatus(LLONG lLoginID, NET_IN_SET_CARPORTLIGHT_STATUS* pstInParam, NET_OUT_SET_CARPORTLIGHT_STATUS* pstOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetParkingLockState(LLONG lLoginID, const NET_IN_GET_PARKINGLOCK_STATE_INFO* pstInParam, NET_OUT_GET_PARKINGLOCK_STATE_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetParkingLockState(LLONG lLoginID, const NET_IN_SET_PARKINGLOCK_STATE_INFO* pstInParm, NET_OUT_SET_PARKINGLOCK_STATE_INFO* pstOutParam, int nWaitTIme);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetParkingRule(LLONG lLoginID, const NET_IN_SET_PARKINGRULE_INFO* pstInParm, NET_OUT_SET_PARKINGRULE_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetParkingSpaceState(LLONG lLoginID, const NET_IN_SET_PARKINGSPACE_STATE_INFO* pstInParm, NET_OUT_SET_PARKINGSPACE_STATE_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetParkingRemainInfo(LLONG lLoginID, const NET_IN_SET_PARKING_REMAIN_INFO* pstInParm, NET_OUT_SET_PARKING_REMAIN_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyParkingRecord(LLONG lLoginID, const NET_IN_MODIFY_PARKINGRECORD_INFO* pstInParm, NET_OUT_MODIFY_PARKINGRECORD_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AttachVideoAnalyseState(LLONG lLoginID, NET_IN_ATTACH_VIDEOANALYSE_STATE* pstInParam, NET_OUT_ATTACH_VIDEOANALYSE_STATE* pstOutParam, int nWaittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVideoAnalyseState(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachTalkState(LLONG lLoginID, NET_IN_ATTACH_TALK_STATE* pstInParam, NET_OUT_ATTACH_TALK_STATE* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachTalkState(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVideoStatStream(LLONG lLoginID, const NET_IN_ATTACH_VIDEOSTAT_STREAM* pInParam, NET_OUT_ATTACH_VIDEOSTAT_STREAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVideoStatStream(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddVideoSynopsisTask(LLONG lLoginID, NET_IN_ADD_VIDEOSYNOPSIS* pstInParam, NET_OUT_ADD_VIDEOSYNOPSIS* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PreHandleVideoSynopsisTask(LLONG lLoginID, const NET_IN_PRE_HANDLE_VIDEOSYNOPSIS* pstInParam, NET_OUT_PRE_HANDLE_VIDEOSYNOPSIS* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddPreTaskByChannel(LLONG lLoginID, const NET_IN_PRETASK_BYCHANNEL* pstInParam, NET_OUT_PRETASK_BYCHANNEL* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoSynopsisState(LLONG lLoginID, const NET_IN_GET_VIDEOSYNOPSIS_STATE* pstInParam, NET_OUT_GET_VIDEOSYNOPSIS_STATE* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindVideoSynopsisHistory(LLONG lLoginID, const NET_IN_VIDEOSYNOPSIS_STARTFIND* pstInParam, NET_OUT_VIDEOSYNOPSIS_STARTFIND* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindVideoSynopsisHistory(LLONG lLoginID, const NET_IN_VIDEOSYNOPSIS_DOFIND* pstInParam, NET_OUT_VIDEOSYNOPSIS_DOFIND* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindVideoSynopsisHistory(LLONG lLoginID, const NET_IN_VIDEOSYNOPSIS_STOPFIND* pstInParam, NET_OUT_VIDEOSYNOPSIS_STOPFIND* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RunVideoSynopsisTask(LLONG lLoginID, const NET_IN_RUN_VIDEOSYNOPSIS_TASK* pstInParam, NET_OUT_RUN_VIDEOSYNOPSIS_TASK* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PauseVideoSynopsisTask(LLONG lLoginID, NET_IN_PAUSE_VIDEOSYNOPSIS* pstInParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveVideoSynopsisTask(LLONG lLoginID, NET_IN_REMOVE_VIDEOSYNOPSIS* pstInParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RealLoadObjectData(LLONG lLoginID, NET_IN_REALLOAD_OBJECTDATA* pstInParam, NET_OUT_REALLOAD_OBJECTDATA* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLoadObjectData(LLONG lRealLoadHandle, NET_IN_STOPLOAD_OBJECTDATA* pstInParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RealLoadSynopsisState(LLONG lLoginID, NET_IN_REALLAOD_SYNOPSISSTATE* pstInParam, NET_OUT_REALLOAD_SYNOPSISSTATE* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLoadSynopsisState(LLONG lRealLoadHandle, NET_IN_STOPLOAD_SYNOPSISSTATE* pstInParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryVideoSynopsisInfo(LLONG lLoginID, NET_IN_QUERY_VIDEOSYNOPSIS* pstInParam, NET_OUT_QUERY_VIDEOSYNOPSIS* pstuOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindSynopsisFile(LLONG lLoginID, NET_IN_FIND_SYNOPSISFILE* pstInParam, NET_OUT_FIND_SYNOPSISFILE* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindNextSynopsisFile(LLONG lFindHandle, NET_IN_FINDNEXT_SYNOPSISFILE* pstInParam, NET_OUT_FINDNEXT_SYNOPSISFILE* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SynopsisFindClose(LLONG lFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DownLoadSynosisFile(LLONG lLoginID, NET_IN_DOWNLOAD_SYNOPSISFILE* pstInParam, NET_OUT_DOWNLOAD_SYNOPSISFILE* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLoadSynosisFile(LLONG lDownLoadHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetFilePathInfo(LLONG lLoginID, NET_IN_SET_FILEPATHINFO* pstInParam);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachAddFileState(LLONG lLoginID, const NET_IN_ADDFILE_STATE* pstInParam, NET_OUT_ADDFILE_STATE* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DetachAddFileState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateFaceRecognitionDB(LLONG lLoginID, const NET_IN_OPERATE_FACERECONGNITIONDB* pstInParam, NET_OUT_OPERATE_FACERECONGNITIONDB* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BatchAppendFaceRecognition(LLONG lLoginID, const NET_IN_BATCH_APPEND_FACERECONGNITION* pstInParam, NET_OUT_BATCH_APPEND_FACERECONGNITION* pstOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindFaceRecognition(LLONG lLoginID, const NET_IN_STARTFIND_FACERECONGNITION* pstInParam, NET_OUT_STARTFIND_FACERECONGNITION* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartMultiFindFaceRecognition(LLONG lLoginID, const NET_IN_STARTMULTIFIND_FACERECONGNITION* pstInParam, NET_OUT_STARTMULTIFIND_FACERECONGNITION* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartMultiPersonFindFaceR(LLONG lLoginID, const NET_IN_STARTMULTIPERSONFIND_FACER* pstInParam, NET_OUT_STARTMULTIPERSONFIND_FACER* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindFaceRecognition(const NET_IN_DOFIND_FACERECONGNITION* pstInParam, NET_OUT_DOFIND_FACERECONGNITION* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindFaceRecognition(LLONG lFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartMultiFindFaceRecognitionRecord(LLONG lLoginID, const NET_IN_STARTMULTIFIND_FACERECONGNITIONRECORD* pstInParam, NET_OUT_STARTMULTIFIND_FACERECONGNITIONRECORD* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindFaceRecognitionRecord(const NET_IN_DOFIND_FACERECONGNITIONRECORD* pstInParam, NET_OUT_DOFIND_FACERECONGNITIONRECORD* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindFaceRecognitionRecordEx(const NET_IN_DOFIND_FACERECONGNITIONRECORD_EX* pstInParam, NET_OUT_DOFIND_FACERECONGNITIONRECORD_EX* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindFaceRecognitionRecord(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachResultOfFindHistoryByPic(LLONG lLoginID, NET_IN_ATTACH_RESULT_FINDHISTORY_BYPIC* pstInParam, NET_OUT_ATTACH_RESULT_FINDHISTORY_BYPIC* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachResultOfFindHistoryByPic(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachResultOfHumanHistoryByPic(LLONG lLoginID, NET_IN_ATTACH_RESULT_HUMAN_HISTORY_BYPIC* pstInParam, NET_OUT_ATTACH_RESULT_HUMAN_HISTORY_BYPIC* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachResultOfHumanHistoryByPic(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachResultOfVehicleHistoryByPic(LLONG lLoginID, NET_IN_ATTACH_RESULT_VEHICLE_HISTORY_BYPIC* pstInParam, NET_OUT_ATTACH_RESULT_VEHICLE_HISTORY_BYPIC* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachResultOfVehicleHistoryByPic(LLONG lFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetectFace(LLONG lLoginID, const NET_IN_DETECT_FACE* pstInParam, NET_OUT_DETECT_FACE* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateFaceRecognitionGroup(LLONG lLoginID, const NET_IN_OPERATE_FACERECONGNITION_GROUP* pstInParam, NET_OUT_OPERATE_FACERECONGNITION_GROUP* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateFaceRecognitionPersonType(LLONG lLoginID, const NET_IN_OPERATE_FACERECOGNITION_PERSON_TYPE* pstInParam, NET_OUT_OPERATE_FACERECOGNITION_PERSON_TYPE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFaceRecognitionPersonType(LLONG lLoginID, const NET_IN_GET_FACERECOGNITION_PERSON_TYPE* pstInParam, NET_OUT_GET_FACERECOGNITION_PERSON_TYPE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindGroupInfo(LLONG lLoginID, const NET_IN_FIND_GROUP_INFO* pstInParam, NET_OUT_FIND_GROUP_INFO* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetGroupInfoForChannel(LLONG lLoginID, const NET_IN_GET_GROUPINFO_FOR_CHANNEL* pstInParam, NET_OUT_GET_GROUPINFO_FOR_CHANNEL* pstOutParam, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetGroupInfoForChannel(LLONG lLoginID, const NET_IN_SET_GROUPINFO_FOR_CHANNEL* pstInParam, NET_OUT_SET_GROUPINFO_FOR_CHANNEL* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachFaceFindState(LLONG lLoginID, const NET_IN_FACE_FIND_STATE* pstInParam, NET_OUT_FACE_FIND_STATE* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachFaceFindState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRecognitionSetSearchImageInfo(LLONG lLoginID, const NET_IN_FACE_RECOGNITION_SET_SEARCH_IMAGE_INFO* pstInParam, NET_OUT_FACE_RECOGNITION_SET_SEARCH_IMAGE_INFO* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRecognitionPutDisposition(LLONG lLoginID, const NET_IN_FACE_RECOGNITION_PUT_DISPOSITION_INFO* pstInParam, NET_OUT_FACE_RECOGNITION_PUT_DISPOSITION_INFO* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRecognitionDelDisposition(LLONG lLoginID, const NET_IN_FACE_RECOGNITION_DEL_DISPOSITION_INFO* pstInParam, NET_OUT_FACE_RECOGNITION_DEL_DISPOSITION_INFO* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRecognitionDetectMultiFace(LLONG lLoginID, const NET_IN_FACE_RECOGNITION_DETECT_MULTI_FACE_INFO* pstInParam, NET_OUT_FACE_RECOGNITION_DETECT_MULTI_FACE_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachDetectMultiFaceState(LLONG lLoginID, const NET_IN_MULTIFACE_DETECT_STATE* pstInParam, NET_OUT_MULTIFACE_DETECT_STATE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachDetectMultiFaceState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRecognitionReAbstract(LLONG lLoginID, const NET_IN_FACE_RECOGNITION_REABSTRACT_INFO* pstInParam, NET_OUT_FACE_RECOGNITION_REABSTRACT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRecognitionGroupReAbstract(LLONG lLoginID, const NET_IN_FACE_RECOGNITION_GROUP_REABSTRACT_INFO* pstInParam, NET_OUT_FACE_RECOGNITION_GROUP_REABSTRACT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceRecognitionStopGroupReAbstract(LLONG lLoginID, const NET_IN_FACE_RECOGNITION_STOP_GROUP_REABSTRACT_INFO* pstInParam, NET_OUT_FACE_RECOGNITION_STOP_GROUP_REABSTRACT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFaceParam(LLONG lLoginID, const NET_IN_GET_FACE_PARAM* pstInParam, NET_OUT_GET_FACE_PARAM* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetFaceParam(LLONG lLoginID, const NET_IN_SET_FACE_PARAM* pstInParam, NET_OUT_SET_FACE_PARAM* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperatePerGroup(LLONG lLoginID, const NET_IN_OPERATE_PER_GROUP* pstInParam, NET_OUT_OPERATE_PER_GROUP* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyPermission(LLONG lLoginID, const NET_IN_MODIFY_PERMISSION* pstInParam, NET_OUT_MODIFY_PERMISSION* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindPermission(LLONG lLoginID, const NET_IN_STARTFIND_PERMISSION* pstInParam, NET_OUT_STARTFIND_PERMISSION* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindPermission(LLONG lFindHandle, const NET_IN_DOFIND_PERMISSION* pstInParam, NET_OUT_DOFIND_PERMISSION* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindPermission(LLONG lFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFaceRecognitionAppendToken(LLONG lLoginID, const NET_IN_GET_FACE_RECOGNITION_APPEND_TOKEN* pstuInParam, NET_OUT_GET_FACE_RECOGNITION_APPEND_TOKEN* pstuOutParam, int nWaitTime);
typedef struct tagNET_TRAFFIC_CAR_ATTRIBUTE_INFO
{
    int nVehicleColorArrayNums;                   
    EM_OBJECT_COLOR_TYPE emVehicleColorArray[32]; 
    int nCategoryArrayNums;                       
    EM_NET_VEHICLE_TYPE emCategoryArray[32];      
    char szVehicleSign[64];                       
    UINT nSubBrand;                               
    UINT nBrandYear;                              
    int nFurniture;                               
    int nPendant;                                 
    int nAnnualInspection;                        
    int nSunShade;                                
    char byReserved[256];                         
} NET_TRAFFIC_CAR_ATTRIBUTE_INFO;
typedef struct tagNET_FACERECOGNITION_PERSON_INFOEX2
{
    BOOL bPersonExEnable;                         
    FACERECOGNITION_PERSON_INFOEX stPersonInfoEx; 
    int nFacePicNumEx;                                         
    NET_FACE_PIC_INFO stuFacePicInfoEx[48];                    
    int nBoundingBoxNum;                                       
    NET_RECT stuBoundingBox[48];                               
    int nTrafficCarAttributeNum;                               
    NET_TRAFFIC_CAR_ATTRIBUTE_INFO stuTrafficCarAttribute[48]; 
    char szReserved[1024];                                     
} NET_FACERECOGNITION_PERSON_INFOEX2;
typedef struct tagNET_IN_STARTMULTIFIND_FACERECONGNITION_EX
{
    DWORD dwSize;
    int* pChannelID;             
    int nChannelCount;           
    EM_OBJECT_TYPE emObjectType; 
    NET_FACE_MATCH_OPTIONS stMatchOptions; 
    NET_FACE_FILTER_CONDTION stFilterInfo; 
    char* pBuffer;  
    int nBufferLen; 
    BOOL bPersonEx2Enable;                              
    NET_FACERECOGNITION_PERSON_INFOEX2 stPersonInfoEx2; 
} NET_IN_STARTMULTIFIND_FACERECONGNITION_EX;
typedef struct tagNET_COUNT_DETAIL_INFO
{
    UINT nPictureID;      
    UINT nCount;          
    char szReserved[256]; 
} NET_COUNT_DETAIL_INFO;
typedef struct tagNET_OUT_STARTMULTIFIND_FACERECONGNITION_EX
{
    DWORD dwSize;
    int nTotalCount; 
    LLONG lFindHandle; 
    int nToken;        
    int nCountDetailNum;                      
    NET_COUNT_DETAIL_INFO stuCountDetail[64]; 
} NET_OUT_STARTMULTIFIND_FACERECONGNITION_EX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartMultiFindFaceRecognitionEx(LLONG lLoginID, const NET_IN_STARTMULTIFIND_FACERECONGNITION_EX* pstuInParam, NET_OUT_STARTMULTIFIND_FACERECONGNITION_EX* pstuOutParam, int nWaitTime);
typedef struct NET_IN_DOFIND_FACERECONGNITION_EX
{
    DWORD dwSize;
    LLONG lFindHandle;                    
    int nBeginNum;                        
    int nCount;                           
    EM_NEEDED_PIC_RETURN_TYPE emDataType; 
    BOOL bPictureIDEnable; 
    UINT nPictureID;       
} NET_IN_DOFIND_FACERECONGNITION_EX;
typedef struct tagNET_HISTORY_NON_MOTOR_INFO
{
    char szUID[64];           
    NET_RECT stuBoundingBox;  
    UINT nHelmet;             
    char szCapColor[16];      
    char szCategory[32];      
    char szColor[16];         
    UINT nBasket;             
    UINT nStoragebox;         
    UINT nNumOfCycling;       
    NET_PIC_INFO_EX stuImage; 
    char szReserved[256];     
} NET_HISTORY_NON_MOTOR_INFO;
typedef struct tagNET_CANDIDATE_INFOEX2
{
    CANDIDATE_INFOEX stuCandidatesEx;                      
    UINT nSimilarity2;                                     
    int nTaskID;                                           
    NET_HISTORY_NON_MOTOR_INFO stuHistoryNonMotorInfo;     
    NET_HISTORY_TRAFFIC_CAR_INFO stuHistoryTrafficCarInfo; 
    char szReserved[256];                                  
} NET_CANDIDATE_INFOEX2;
typedef struct NET_OUT_DOFIND_FACERECONGNITION_EX
{
    DWORD dwSize;
    char* pBuffer;  
    int nBufferLen; 
    int nRetCadidateEx2Num;                   
    int nCadidateEx2Num;                      
    NET_CANDIDATE_INFOEX2* pstuCandidatesEx2; 
} NET_OUT_DOFIND_FACERECONGNITION_EX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindFaceRecognitionEx(const NET_IN_DOFIND_FACERECONGNITION_EX* pstuInParam, NET_OUT_DOFIND_FACERECONGNITION_EX* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartBurnSession(LLONG lLoginID, const NET_IN_START_BURN_SESSION* pstInParam, NET_OUT_START_BURN_SESSION* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopBurnSession(LLONG lBurnSession);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartBurn(LLONG lBurnSession, const NET_IN_START_BURN* pstInParam, NET_OUT_START_BURN* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopBurn(LLONG lBurnSession);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PauseBurn(LLONG lBurnSession, BOOL bPause);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BurnMarkTag(LLONG lBurnSession, const NET_IN_BURN_MARK_TAG* pstInParam, NET_OUT_BURN_MARK_TAG* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BurnChangeDisk(LLONG lBurnSession, const NET_IN_BURN_CHANGE_DISK* pstInParam, NET_OUT_BURN_CHANGE_DISK* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BurnGetState(LLONG lBurnSession, const NET_IN_BURN_GET_STATE* pstInParam, NET_OUT_BURN_GET_STATE* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBurnState(LLONG lLoginID, const NET_IN_ATTACH_STATE* pstInParam, NET_OUT_ATTACH_STATE* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBurnState(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartUploadFileBurned(LLONG lLoginID, const NET_IN_FILEBURNED_START* pstInParam, NET_OUT_FILEBURNED_START* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendFileBurned(LLONG lUploadHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopUploadFileBurned(LLONG lUploadHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBurnCheckState(LLONG lLoginID, const NET_IN_ATTACH_BURN_CHECK* pstInParam, NET_OUT_ATTACH_BURN_CHECK* pstOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBurnCheckState(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBurnCase(LLONG lLoginID, const NET_IN_ATTACH_BURN_CASE* pInParam, NET_OUT_ATTACH_BURN_CASE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBurnCase(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBurnDevState(LLONG lLoginID, const NET_IN_ATTACH_BURN_DEV_STATE* pInParam, NET_OUT_ATTACH_BURN_DEV_STATE* pOutParam, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBurnDevState(LLONG lAttachHandle);
typedef struct tagNET_BODY_MIND_DATA_INFO
{
    DWORD dwSize;
    UINT nECG;         
    UINT nECGMax;      
    UINT nECGMin;      
    UINT nSPO2;        
    UINT nSPO2Max;     
    UINT nSPO2Min;     
    UINT nRESP;        
    UINT nRESPMax;     
    UINT nRESPMin;     
    UINT nNIBP_SYS;    
    UINT nNIBP_SYSMax; 
    UINT nNIBP_SYSMin; 
    UINT nNIBP_AVG;    
    UINT nNIBP_AVGMax; 
    UINT nNIBP_AVGMin; 
    UINT nNIBP_DIA;    
    UINT nNIBP_DIAMax; 
    UINT nNIBP_DIAMin; 
} NET_BODY_MIND_DATA_INFO;
typedef void(CALLBACK* fBodyMindDataCallBack)(LLONG lAttachHandle, const NET_BODY_MIND_DATA_INFO* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_BODY_MIND_DATA
{
    DWORD dwSize;
    fBodyMindDataCallBack cbBodyMindData; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_BODY_MIND_DATA;
typedef struct tagNET_OUT_ATTACH_BODY_MIND_DATA
{
    DWORD dwSize;
} NET_OUT_ATTACH_BODY_MIND_DATA;
typedef struct tagNET_IN_DETACH_BODY_MIND_DATA
{
    DWORD dwSize;
} NET_IN_DETACH_BODY_MIND_DATA;
typedef struct tagNET_OUT_DETACH_BODY_MIND_DATA
{
    DWORD dwSize;
} NET_OUT_DETACH_BODY_MIND_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBodyMindData(LLONG lLoginID, const NET_IN_ATTACH_BODY_MIND_DATA* pstInParam, NET_OUT_ATTACH_BODY_MIND_DATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBodyMindData(LLONG lAttachHandle, const NET_IN_DETACH_BODY_MIND_DATA* pstInParam, NET_OUT_DETACH_BODY_MIND_DATA* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachCameraState(LLONG lLoginID, const NET_IN_CAMERASTATE* pstInParam, NET_OUT_CAMERASTATE* pstOutParam, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachCameraState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixGetCameras(LLONG lLoginID, const DH_IN_MATRIX_GET_CAMERAS* pInParam, DH_OUT_MATRIX_GET_CAMERAS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixAddCameras(LLONG lLoginID, const DH_IN_ADD_LOGIC_DEVICE_CAMERA* pInParam, DH_OUT_ADD_LOGIC_DEVICE_CAMERA* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixAddCamerasByDevice(LLONG lLoginID, const DH_IN_ADD_LOGIC_BYDEVICE_CAMERA* pInParam, DH_OUT_ADD_LOGIC_BYDEVICE_CAMERA* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixAddCamerasByGroup(LLONG lLoginID, const NET_IN_ADD_LOGIC_BYGROUP_CAMERA* pInParam, NET_OUT_ADD_LOGIC_BYGROUP_CAMERA* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixGetCameraAllByGroup(LLONG lLoginID, const NET_IN_GET_CAMERA_ALL_BY_GROUP* pInParam, NET_OUT_GET_CAMERA_ALL_BY_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixDeleteCameraByGroup(LLONG lLoginID, const NET_IN_DELETE_CAMERA_BY_GROUP* pInParam, NET_OUT_DELETE_CAMERA_BY_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoInputInfo(LLONG lLoginID, const NET_IN_GET_VIDEO_INPUT_INFO* pInParam, NET_OUT_GET_VIDEO_INPUT_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryProductionDefinition(LLONG lLoginID, DH_PRODUCTION_DEFNITION* pstuProdDef, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryMatrixCardInfo(LLONG lLoginID, DH_MATRIX_CARD_LIST* pstuCardList, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QuerySystemStatus(LLONG lLoginID, DH_SYSTEM_STATUS* pstuStatus, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitCaps(LLONG lLoginID, int nChannel, DH_SPLIT_CAPS* pstuCaps, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitSource(LLONG lLoginID, int nChannel, int nWindow, DH_SPLIT_SOURCE* pstuSplitSrc, int nMaxCount, int* pnRetCount, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitSource(LLONG lLoginID, int nChannel, int nWindow, const DH_SPLIT_SOURCE* pstuSplitSrc, int nSrcCount, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitSourceEx(LLONG lLoginID, const NET_IN_SET_SPLIT_SOURCE* pInparam, NET_OUT_SET_SPLIT_SOURCE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SplitExchangeSource(LLONG lLoginID, const NET_IN_SPLIT_EXCHANGE_SOURCE* pInParam, NET_OUT_SPLIT_EXCHANGE_SOURCE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitMode(LLONG lLoginID, int nChannel, DH_SPLIT_MODE_INFO* pstuSplitInfo, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitMode(LLONG lLoginID, int nChannel, const DH_SPLIT_MODE_INFO* pstuSplitInfo, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitGroupCount(LLONG lLoginID, int nChannel, DH_SPLIT_MODE emSplitMode, int* pnGroupCount, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoOutCaps(LLONG lLoginID, int nChannel, DH_VIDEO_OUT_CAPS* pstuCaps, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetVideoOutOption(LLONG lLoginID, int nChannel, const DH_VIDEO_OUT_OPT* pstuVideoOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryVideoOutWindows(LLONG lLoginID, int nChannel, DH_VIDEO_OUT_WINDOW* pstuWnds, int nMaxWndCount, int* pnRetWndCount, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitWindowRect(LLONG lLoginID, const DH_IN_SPLIT_SET_RECT* pInParam, DH_OUT_SPLIT_SET_RECT* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitWindowRect(LLONG lLoginID, const DH_IN_SPLIT_GET_RECT* pInParam, DH_OUT_SPLIT_GET_RECT* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OpenSplitWindow(LLONG lLoginID, const DH_IN_SPLIT_OPEN_WINDOW* pInParam, DH_OUT_SPLIT_OPEN_WINDOW* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloseSplitWindow(LLONG lLoginID, const DH_IN_SPLIT_CLOSE_WINDOW* pInParam, DH_OUT_SPLIT_CLOSE_WINDOW* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitTopWindow(LLONG lLoginID, const DH_IN_SPLIT_SET_TOP_WINDOW* pInParam, DH_OUT_SPLIT_SET_TOP_WINDOW* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitWindowsInfo(LLONG lLoginID, const DH_IN_SPLIT_GET_WINDOWS* pInParam, DH_OUT_SPLIT_GET_WINDOWS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_LoadSplitCollection(LLONG lLoginID, const DH_IN_SPLIT_LOAD_COLLECTION* pInParam, DH_OUT_SPLIT_LOAD_COLLECTION* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SaveSplitCollection(LLONG lLoginID, const DH_IN_SPLIT_SAVE_COLLECTION* pInParam, DH_OUT_SPLIT_SAVE_COLLECTION* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitCollections(LLONG lLoginID, const DH_IN_SPLIT_GET_COLLECTIONS* pInParam, DH_OUT_SPLIT_GET_COLLECTIONS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RenameSplitCollection(LLONG lLoginID, const DH_IN_SPLIT_RENAME_COLLECTION* pInParam, DH_OUT_SPLIT_RENAME_COLLECTION* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteSplitCollection(LLONG lLoginID, const DH_IN_SPLIT_DELETE_COLLECTION* pInParam, DH_OUT_SPLIT_DELETE_COLLECTION* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDecodePolicy(LLONG lLoginID, const DH_IN_SET_DEC_POLICY* pInParam, DH_OUT_SET_DEC_POLICY* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDecodePolicy(LLONG lLoginID, const DH_IN_GET_DEC_POLICY* pInParam, DH_OUT_GET_DEC_POLICY* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitAudioOuput(LLONG lLoginID, const DH_IN_SET_AUDIO_OUTPUT* pInParam, DH_OUT_SET_AUDIO_OUTPUT* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitAudioOuput(LLONG lLoginID, const DH_IN_GET_AUDIO_OUTPUT* pInParam, DH_OUT_GET_AUDIO_OUTPUT* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixSetCameras(LLONG lLoginID, const DH_IN_MATRIX_SET_CAMERAS* pInParam, DH_OUT_MATRIX_SET_CAMERAS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoInCaps(LLONG lLoginID, const DH_IN_GET_VIDEO_IN_CAPS* pInParam, DH_OUT_GET_VIDEO_IN_CAPS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_EnumVideoOutModes(LLONG lLoginID, const DH_IN_ENUM_VIDEO_OUT_MODES* pInParam, DH_OUT_ENUM_VIDEO_OUT_MODES* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitOSD(LLONG lLoginID, const DH_IN_SPLIT_GET_OSD* pInParam, DH_OUT_SPLIT_GET_OSD* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitOSD(LLONG lLoginID, const DH_IN_SPLIT_SET_OSD* pInParam, DH_OUT_SPLIT_SET_OSD* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSplitOSDEx(LLONG lLoginID, const NET_IN_SPLIT_GET_OSD_EX* pInParam, NET_OUT_SPLIT_GET_OSD_EX* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSplitOSDEx(LLONG lLoginID, const NET_IN_SPLIT_SET_OSD_EX* pInParam, NET_OUT_SPLIT_SET_OSD_EX* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetTourSource(LLONG lLoginID, const NET_IN_SET_TOUR_SOURCE* pInParam, NET_OUT_SET_TOUR_SOURCE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTourSource(LLONG lLoginID, const NET_IN_GET_TOUR_SOURCE* pInParam, NET_OUT_GET_TOUR_SOURCE* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSplitTour(LLONG lLoginID, const NET_IN_ATTACH_SPLIT_TOUR* pInParam, NET_OUT_ATTACH_SPLIT_TOUR* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSplitTour(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixSwitch(LLONG lLoginID, const NET_IN_MATRIX_SWITCH* pInParam, NET_OUT_MATRIX_SWITCH* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SplitSetMultiSource(LLONG lLoginID, const NET_IN_SPLIT_SET_MULTI_SOURCE* pInParam, NET_OUT_SPLIT_SET_MULTI_SOURCE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateSplit(LLONG lLoginID, NET_SPLIT_OPERATE_TYPE emType, void* pInParam, void* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachWindowsSource(LLONG lLoginID, const NET_IN_ATTACH_WINDOW_SOURCE* pInParam, NET_OUT_ATTACH_WINDOW_SOURCE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachWindowsSource(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WindowRegionEnlarge(LLONG lLoginID, const NET_IN_WINDOW_REGION_ENLARGE* pInParam, NET_OUT_WINDOW_REGION_ENLARGE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WindowEnlargeReduction(LLONG lLoginID, const NET_IN_WINDOW_ENLARGE_REDUCTION* pInParam, NET_OUT_WINDOW_ENLARGE_REDUCTION* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WindowButtonAction(LLONG lLoginID, const NET_IN_WINDOW_ONBUTTON_ACTION* pInParam, NET_OUT_WINDOW_ONBUTTON_ACTION* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WindowSetAnnotation(LLONG lLoginID, const NET_IN_WINDOW_SET_ANNOTATION* pInParam, NET_OUT_WINDOW_SET_ANNOTATION* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WindowClearAnnotation(LLONG lLoginID, const NET_IN_WINDOW_CLEAR_ANNOTATION* pInParam, NET_OUT_WINDOW_CLEAR_ANNOTATION* pOutParam, int nWaitTime);
typedef enum tagEM_VIDEO_EXCEPTION_LEVEL_TYPE
{
    EM_VIDEO_EXCEPTION_LEVEL_TYPE_UNKNOWN = -1, 
    EM_VIDEO_EXCEPTION_LEVEL_TYPE_NORMAL,       
    EM_VIDEO_EXCEPTION_LEVEL_TYPE_SLIGHT,       
    EM_VIDEO_EXCEPTION_LEVEL_TYPE_MEDIUM,       
    EM_VIDEO_EXCEPTION_LEVEL_TYPE_SERIOUS,      
} EM_VIDEO_EXCEPTION_LEVEL_TYPE;
typedef struct tagNET_IN_WM_SET_EXCEPTION_LEVEL_INFO
{
    DWORD dwSize;                                        
    int nChannel;                                        
    int nWindowID;                                       
    EM_VIDEO_EXCEPTION_LEVEL_TYPE emVideoExceptionLevel; 
} NET_IN_WM_SET_EXCEPTION_LEVEL_INFO;
typedef struct tagNET_OUT_WM_SET_EXCEPTION_LEVEL_INFO
{
    DWORD dwSize; 
} NET_OUT_WM_SET_EXCEPTION_LEVEL_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WindowSetExceptionLevel(LLONG lLoginID, const NET_IN_WM_SET_EXCEPTION_LEVEL_INFO* pInParam, NET_OUT_WM_SET_EXCEPTION_LEVEL_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_EXAMPLAN_START_FIND
{
    DWORD dwSize;             
    NET_TIME stuStartTime;    
    NET_TIME stuEndTime;      
    char szCourse[512];       
    char szExamRoomName[512]; 
} NET_IN_EXAMPLAN_START_FIND;
typedef struct tagNET_OUT_EXAMPLAN_START_FIND
{
    DWORD dwSize;     
    UINT nTotalCount; 
} NET_OUT_EXAMPLAN_START_FIND;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindExamPlan(LLONG lLoginID, NET_IN_EXAMPLAN_START_FIND* pInParam, NET_OUT_EXAMPLAN_START_FIND* pOutParam, int nWaitTime);
typedef struct tagNET_IN_EXAMPLAN_DO_FIND
{
    DWORD dwSize;      
    UINT nBeginNumber; 
    UINT nCount;       
} NET_IN_EXAMPLAN_DO_FIND;
typedef struct tagNET_EXAM_INFO_EX
{
    UINT nExamPlanID;             
    char szSchool[512];           
    char szExamRoomName[512];     
    NET_TIME stuStartTime;        
    NET_TIME stuEndTime;          
    char szCourse[512];           
    int nInvigilatorNum;          
    char szInvigilator[256][256]; 
    UINT nCandidateNum;           
    BYTE byReserved[1024];        
} NET_EXAM_INFO_EX;
typedef struct tagNET_OUT_EXAMPLAN_DO_FIND
{
    DWORD dwSize;                  
    UINT nFound;                   
    NET_EXAM_INFO_EX* pExamInfoEx; 
    int nMaxNum;                   
} NET_OUT_EXAMPLAN_DO_FIND;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindExamPlan(LLONG lFindHandle, NET_IN_EXAMPLAN_DO_FIND* pInParam, NET_OUT_EXAMPLAN_DO_FIND* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindExamPlan(LLONG lFindHandle);
typedef struct tagNET_EXAM_INFO
{
    char szSchool[512];           
    char szExamRoomName[512];     
    NET_TIME stuStartTime;        
    NET_TIME stuEndTime;          
    char szCourse[512];           
    int nInvigilatorNum;          
    char szInvigilator[256][256]; 
    UINT nCandidateNum;           
    BYTE byReserved[1024];        
} NET_EXAM_INFO;
typedef struct tagNET_IN_EXAM_PLAN_SERVICEE_ADD
{
    DWORD dwSize;             
    int nExamInfoNum;         
    NET_EXAM_INFO* pExamInfo; 
} NET_IN_EXAM_PLAN_SERVICE_ADD;
typedef struct tagNET_OUT_EXAM_PLAN_SERVICEE_ADD
{
    DWORD dwSize;           
    int nExamPlanIDNum;     
    UINT nExamPlanID[1024]; 
} NET_OUT_EXAM_PLAN_SERVICE_ADD;
typedef struct tagNET_IN_EXAM_PLAN_SERVICEE_UPDATE
{
    DWORD dwSize;                 
    NET_EXAM_INFO_EX stuExamInfo; 
} NET_IN_EXAM_PLAN_SERVICE_UPDATE;
typedef struct tagNET_OUT_EXAM_PLAN_SERVICEE_UPDATE
{
    DWORD dwSize; 
} NET_OUT_EXAM_PLAN_SERVICE_UPDATE;
typedef struct tagNET_IN_EXAM_PLAN_SERVICEE_REMOVE
{
    DWORD dwSize;           
    int nExamPlanIDNum;     
    UINT nExamPlanID[1024]; 
} NET_IN_EXAM_PLAN_SERVICE_REMOVE;
typedef struct tagNET_OUT_EXAM_PLAN_SERVICEE_REMOVE
{
    DWORD dwSize; 
} NET_OUT_EXAM_PLAN_SERVICE_REMOVE;
typedef enum tagNET_EM_EXAM_PLAN_SERVICE
{
    NET_EM_EXAM_PLAN_SERVICE_ADD = 0, 
    NET_EM_EXAM_PLAN_SERVICE_UPDATE,  
    NET_EM_EXAM_PLAN_SERVICE_REMOVE,  
} NET_EM_EXAM_PLAN_SERVICE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateExamPalnService(LLONG lLoginID, NET_EM_EXAM_PLAN_SERVICE emType, void* pstInParam, void* pstOutParam, int nWiatTime);
typedef enum tagNET_PLAYER_OPERATE_TYPE
{
    NET_PLAYER_OPERATE_OPEN,            
    NET_PLAYER_OPERATE_CLOSE,           
    NET_PLAYER_OPERATE_START,           
    NET_PLAYER_OPERATE_STOP,            
    NET_PLAYER_OPERATE_PAUSE,           
    NET_PLAYER_OPERATE_SEEK_TIME,       
    NET_PLAYER_OPERATE_STEP_FRAME,      
    NET_PLAYER_OPERATE_GET_STATE,       
    NET_PLAYER_OPERATE_GET_TIME,        
    NET_PLAYER_OPERATE_GET_SPEED,       
    NET_PLAYER_OPERATE_SET_SPEED,       
    NET_PLAYER_OPERATE_GET_VOLUME,      
    NET_PLAYER_OPERATE_SET_VOLUME,      
    NET_PLAYER_OPERATE_GET_PLAYLIST,    
    NET_PLAYER_OPERATE_GET_PLAYLIST_TS, 
} NET_PLAYER_OPERATE_TYPE;
typedef struct tagNET_PLAYER_OPEN_CONDITION
{
    DWORD dwSize;
    char szDevice[DH_DEV_ID_LEN];  
    int nChannel;                  
    NET_TIME stuStartTime;         
    NET_TIME stuEndTime;           
    NET_STREAM_TYPE emStreamType;  
    int nEventNum;                 
    int nEvent[MAX_IVS_EVENT_NUM]; 
} NET_PLAYER_OPEN_CONDITION;
typedef enum tagNET_EM_SPLIT_TRANS_MODE
{
    NET_EM_SPLIT_TRANS_DIRECT,   
    NET_EM_SPLIT_TRANS_TRANSFER, 
} NET_EM_SPLIT_TRANS_MODE;
typedef enum tagNET_EM_SPLIT_CONNECT_TYPE
{
    NET_EM_SPLIT_CONNECT_TCP, 
    NET_EM_SPLIT_CONNECT_UDP, 
} NET_EM_SPLIT_CONNECT_TYPE;
typedef struct tagNET_IN_PLAYER_OPEN
{
    DWORD dwSize;
    LLONG lPlayerID;                         
    const char* pszDevice;                   
    NET_PLAYER_OPEN_CONDITION stuCondition;  
    BOOL bDeviceInfo;                        
    DH_REMOTE_DEVICE stuDeviceInfo;          
    NET_EM_SPLIT_TRANS_MODE emTransferMode;  
    NET_EM_SPLIT_CONNECT_TYPE emConnectType; 
    EM_SRC_PUSHSTREAM_TYPE emPushStream;     
} NET_IN_PLAYER_OPEN;
typedef struct tagNET_OUT_PLAYER_OPEN
{
    DWORD dwSize;
} NET_OUT_PLAYER_OPEN;
typedef struct tagNET_IN_PLAYER_CLOSE
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_CLOSE;
typedef struct tagNET_OUT_PLAYER_CLOSE
{
    DWORD dwSize;
} NET_OUT_PLAYER_CLOSE;
typedef struct tagNET_IN_PLAYER_START
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_START;
typedef struct tagNET_OUT_PLAYER_START
{
    DWORD dwSize;
} NET_OUT_PLAYER_START;
typedef struct tagNET_IN_PLAYER_STOP
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_STOP;
typedef struct tagNET_OUT_PLAYER_STOP
{
    DWORD dwSize;
} NET_OUT_PLAYER_STOP;
typedef struct tagNET_IN_PLAYER_PAUSE
{
    DWORD dwSize;
    LLONG lPlayerID; 
    BOOL bPause;     
} NET_IN_PLAYER_PAUSE;
typedef struct tagNET_OUT_PLAYER_PAUSE
{
    DWORD dwSize;
} NET_OUT_PLAYER_PAUSE;
typedef struct tagNET_IN_PLAYER_SEEK_TIME
{
    DWORD dwSize;
    LLONG lPlayerID;  
    NET_TIME stuTime; 
} NET_IN_PLAYER_SEEK_TIME;
typedef struct tagNET_OUT_PLAYER_SEEK_TIME
{
    DWORD dwSize;
} NET_OUT_PLAYER_SEEK_TIME;
typedef struct tagNET_IN_PLAYER_STEP_FRAME
{
    DWORD dwSize;
    LLONG lPlayerID; 
    BOOL bForward;   
} NET_IN_PLAYER_STEP_FRAME;
typedef struct tagNET_OUT_PLAYER_STEP_FRAME
{
    DWORD dwSize;
} NET_OUT_PLAYER_STEP_FRAME;
typedef enum tagNET_PLAYER_STATE
{
    NET_PLAYER_STATE_UNKNOWN, 
    NET_PLAYER_STATE_ERROR,   
    NET_PLAYER_STATE_READING, 
    NET_PLAYER_STATE_STANDBY, 
    NET_PLAYER_STATE_RUNNING, 
    NET_PLAYER_STATE_PAUSED,  
    NET_PLAYER_STATE_CLOSED,  
} NET_PLAYER_STATE;
typedef struct tagNET_IN_PLAYER_GET_STATE
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_GET_STATE;
typedef struct tagNET_OUT_PLAYER_GET_STATE
{
    DWORD dwSize;
    NET_PLAYER_STATE emState; 
} NET_OUT_PLAYER_GET_STATE;
typedef struct tagNET_IN_PLAYER_GET_TIME
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_GET_TIME;
typedef struct tagNET_OUT_PLAYER_GET_TIME
{
    DWORD dwSize;
    NET_TIME stuTime; 
} NET_OUT_PLAYER_GET_TIME;
typedef struct tagNET_IN_PLAYER_GET_SPEED
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_GET_SPEED;
typedef struct tagNET_OUT_PLAYER_GET_SPEED
{
    DWORD dwSize;
    float fSpeed; 
} NET_OUT_PLAYER_GET_SPEED;
typedef struct tagNET_IN_PLAYER_SET_SPEED
{
    DWORD dwSize;
    LLONG lPlayerID; 
    float fSpeed;    
} NET_IN_PLAYER_SET_SPEED;
typedef struct tagNET_OUT_PLAYER_SET_SPPED
{
    DWORD dwSize;
} NET_OUT_PLAYER_SET_SPEED;
typedef struct tagNET_IN_PLAYER_GET_VOLUME
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_GET_VOLUME;
typedef struct tagNET_OUT_PLAYER_GET_VOLUME
{
    DWORD dwSize;
    int nVolume; 
} NET_OUT_PLAYER_GET_VOLUME;
typedef struct tagNET_IN_PLAYER_SET_VOLUME
{
    DWORD dwSize;
    LLONG lPlayerID; 
    int nVolume;     
} NET_IN_PLAYER_SET_VOLUME;
typedef struct tagNET_OUT_PLAYER_SET_VOLUME
{
    DWORD dwSize;
} NET_OUT_PLAYER_SET_VOLUME;
typedef struct tagNET_PLAYER_PLAYLIST
{
    DWORD dwSize;
    char szFilePath[MAX_PATH];        
    char szUrl[MAX_PATH];             
    DH_DEVICE_PROTOCOL emUrlProtocol; 
    NET_TIME stuStartTime;            
    NET_TIME stuEndTime;              
} NET_PLAYER_PLAYLIST;
typedef struct tagNET_IN_PLAYER_GET_PLAYLIST
{
    DWORD dwSize;
    LLONG lPlayerID;       
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    int nLimit;            
} NET_IN_PLAYER_GET_PLAYLIST;
typedef struct tagNET_OUT_PLAYER_GET_PLAYLIST
{
    DWORD dwSize;
    NET_PLAYER_PLAYLIST* pstuPlayLists; 
    int nMaxPlayListCount;              
    int nRetPlayListCount;              
} NET_OUT_PLAYER_GET_PLAYLIST;
typedef struct tagNET_IN_PLAYER_GET_PLAYLIST_TS
{
    DWORD dwSize;
    LLONG lPlayerID; 
} NET_IN_PLAYER_GET_PLAYLIST_TS;
typedef struct tagNET_PLAYLIST_TIMESECTION
{
    DWORD dwSize;
    int nEvent;         
    LPDH_TSECT pstuTSs; 
    DWORD unMaxTS;      
    DWORD unRetTS;      
} NET_PLAYLIST_TIMESECTION;
typedef struct tagNET_OUT_PLAYER_GET_PLAYLIST_TS
{
    DWORD dwSize;
    DWORD dwEventNum;                                  
    NET_PLAYLIST_TIMESECTION stuTS[MAX_IVS_EVENT_NUM]; 
} NET_OUT_PLAYER_GET_PLAYLIST_TS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateSplitPlayer(LLONG lLoginID, NET_PLAYER_OPERATE_TYPE emType, void* pInParam, void* pOutParam, int nWaitTime);
typedef enum tagEM_SPLIT_PLAYER_STATUS
{
    EM_SPLIT_PLAYER_STATUS_UNKNOWN,          
    EM_SPLIT_PLAYER_STATUS_FILE_CHANGED,     
    EM_SPLIT_PLAYER_STATUS_STATE_CHANGED,    
    EM_SPLIT_PLAYER_STATUS_FILELIST_CHANGED, 
} EM_SPLIT_PLAYER_STATUS;
typedef struct tagNET_SPLIT_PLAYER_STATE
{
    EM_SPLIT_PLAYER_STATUS emStatus; 
    char szReserved[508];            
} NET_SPLIT_PLAYER_STATE;
typedef void(CALLBACK* fPlayerStateCallBack)(LLONG lLoginID, LLONG lAttachHandle, const NET_SPLIT_PLAYER_STATE* pInfo, int nInfoLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_PLAYER_STATE
{
    DWORD dwSize;
    LLONG lPlayerID;               
    fPlayerStateCallBack cbNotify; 
    LDWORD dwUser;
} NET_IN_ATTACH_PLAYER_STATE;
typedef struct tagNET_OUT_ATTACH_PLAYER_STATE
{
    DWORD dwSize;
} NET_OUT_ATTACH_PLAYER_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSplitPlayerState(LLONG lLoginID, const NET_IN_ATTACH_PLAYER_STATE* pInParam, NET_OUT_ATTACH_PLAYER_STATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSplitPlayerState(LLONG hAttachHandle);
typedef struct tagNET_SPLIT_PLAYER_PROCESS
{
    double dbProcess;     
    NET_TIME stuTime;     
    char szReserved[512]; 
} NET_SPLIT_PLAYER_PROCESS;
typedef void(CALLBACK* fPlayerProcessCallBack)(LLONG lLoginID, LLONG lAttachHandle, const NET_SPLIT_PLAYER_PROCESS* pInfo, int nInfoLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_PLAYER_PROCESS
{
    DWORD dwSize;
    LLONG lPlayerID;                 
    fPlayerProcessCallBack cbNotify; 
    LDWORD dwUser;
} NET_IN_ATTACH_PLAYER_PROCESS;
typedef struct tagNET_OUT_ATTACH_PLAYER_PROCESS
{
    DWORD dwSize;
} NET_OUT_ATTACH_PLAYER_PROCESS;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSplitPlayerProcess(LLONG lLoginID, const NET_IN_ATTACH_PLAYER_PROCESS* pInParam, NET_OUT_ATTACH_PLAYER_PROCESS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSplitPlayerProcess(LLONG hAttachHandle);
typedef struct tagNET_ACCESS_LOCK_VER_IN
{
    int nChannel;       
    char reserved[128]; 
} NET_ACCESS_LOCK_VER_IN;
typedef struct tagNET_ACCESS_LOCK_VER_OUT
{
    char szVersion[32]; 
    NET_TIME stuTime;   
    char reserved[512]; 
} NET_ACCESS_LOCK_VER_OUT;
typedef struct tagNET_ACCESS_LOCK_VER
{
    DWORD dwSize;
    NET_ACCESS_LOCK_VER_IN stuIn;   
    NET_ACCESS_LOCK_VER_OUT stuOut; 
} NET_ACCESS_LOCK_VER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PowerControl(LLONG lLoginID, const DH_IN_WM_POWER_CTRL* pInParam, DH_OUT_WM_POWER_CTRL* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDisplayMode(LLONG lLoginID, const DH_IN_WM_SET_DISPLAY_MODE* pInParam, DH_OUT_WM_SET_DISPLAY_MODE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDisplayMode(LLONG lLoginID, const DH_IN_WM_GET_DISPLAY_MODE* pInParam, DH_OUT_WM_GET_DISPLAY_MODE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_LoadMonitorWallCollection(LLONG lLoginID, const DH_IN_WM_LOAD_COLLECTION* pInParam, DH_OUT_WM_LOAD_COLLECTION* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SaveMonitorWallCollection(LLONG lLoginID, const DH_IN_WM_SAVE_COLLECTION* pInParam, DH_OUT_WM_SAVE_COLLECTION* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMonitorWallCollections(LLONG lLoginID, const DH_IN_WM_GET_COLLECTIONS* pInParam, DH_OUT_WM_GET_COLLECTIONS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RenameMonitorWallCollection(LLONG lLoginID, const DH_IN_WM_RENAME_COLLECTION* pInParam, DH_OUT_WM_RENAME_COLLECTION* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallGetScene(LLONG lLoginID, const DH_IN_MONITORWALL_GET_SCENE* pInParam, DH_OUT_MONITORWALL_GET_SCENE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallSetScene(LLONG lLoginID, const DH_IN_MONITORWALL_SET_SCENE* pInParam, DH_OUT_MONITORWALL_SET_SCENE* pOutParam, int nWaitTime = 1000);
typedef struct tagNET_IN_GET_COUNT_MONITORWALL_SCENE
{
    DWORD dwSize;
    int nMonitorWallID; 
} NET_IN_GET_COUNT_MONITORWALL_SCENE;
typedef struct tagNET_OUT_GET_COUNT_MONITORWALL_SCENE
{
    DWORD dwSize;
    unsigned int nSplitSceneCount;    
    unsigned int nSplitWndCount[300]; 
} NET_OUT_GET_COUNT_MONITORWALL_SCENE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCountOfMonitorWallScene(LLONG lLoginID, const NET_IN_GET_COUNT_MONITORWALL_SCENE* pInParam, NET_OUT_GET_COUNT_MONITORWALL_SCENE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallGetAttributeCaps(LLONG lLoginID, const DH_IN_MONITORWALL_GET_ARRT_CAPS* pInParam, DH_OUT_MONITORWALL_GET_ARRT_CAPS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallAutoAdjust(LLONG lLoginID, const DH_IN_MONITORWALL_AUTO_ADJUST* pInParam, DH_OUT_MONITORWALL_AUTO_ADJUST* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallSetAttribute(LLONG lLoginID, const DH_IN_MONITORWALL_SET_ATTR* pInParam, DH_OUT_MONITORWALL_SET_ATTR* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallSetBackLight(LLONG lLoginID, const DH_IN_MONITORWALL_SET_BACK_LIGHT* pInParam, DH_OUT_MONITORWALL_SET_BACK_LIGHT* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallGetPowerSchedule(LLONG lLoginID, const NET_IN_MW_GET_POWER_SCHEDULE* pInParam, NET_OUT_MW_GET_POWER_SCHEDULE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallSetPowerSchedule(LLONG lLoginID, const NET_IN_MW_SET_POWER_SCHEDULE* pInParam, NET_OUT_MW_SET_POWER_SCHEDULE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallGetScrnCtrlParam(LLONG lLoginID, const NET_IN_MW_GET_SCRN_CTRL_PARAM* pInParam, NET_OUT_MW_GET_SCRN_CTRL_PARAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallSetScrnCtrlParam(LLONG lLoginID, const NET_IN_MW_SET_SCRN_CTRL_PARAM* pInParam, NET_OUT_MW_SET_SCRN_CTRL_PARAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallGetBackgroudColor(LLONG lLoginID, const NET_IN_MW_GET_BACKGROUDND_COLOR* pInParam, NET_OUT_MW_GET_BACKGROUDND_COLOR* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallSetBackgroudColor(LLONG lLoginID, const NET_IN_MW_SET_BACKGROUD_COLOR* pInParam, NET_OUT_MW_SET_BACKGROUD_COLOR* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_MonitorWallAttachTour(LLONG lLoginID, const NET_IN_WM_ATTACH_TOUR* pInParam, NET_OUT_WM_ATTACH_TOUR* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallDetachTour(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateMonitorWall(LLONG lLoginID, NET_MONITORWALL_OPERATE_TYPE emType, void* pInParam, void* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallSwitchDisplaySignal(LLONG lLoginID, const NET_IN_MW_SWITCH_DISPLAY_SIGNAL* pInParam, NET_OUT_MW_SWITCH_DISPLAY_SIGNAL* pOutParam, int nWaitTime);
typedef struct tagNET_IN_MW_GET_WINODW_INFO
{
    DWORD dwSize;               
    int nMonitorWallID;         
    const char* pszCompositeID; 
} NET_IN_MW_GET_WINODW_INFO;
typedef enum tagEM_NET_ENCODE_COMPRESSION
{
    EM_NET_ENCODE_COMPRESSION_UNKNOWN, 
    EM_NET_ENCODE_COMPRESSION_H264,    
    EM_NET_ENCODE_COMPRESSION_MPEG4,   
    EM_NET_ENCODE_COMPRESSION_MJPEG,   
    EM_NET_ENCODE_COMPRESSION_SVAC,    
    EM_NET_ENCODE_COMPRESSION_HIK,     
    EM_NET_ENCODE_COMPRESSION_H265,    
} EM_NET_ENCODE_COMPRESSION;
typedef struct tagNET_MW_GET_WINDOW_INFO
{
    BOOL bEnable;                            
    NET_VIDEOCHANNEL_STATE emState;          
    UINT unNetflow;                          
    UINT unBitrate;                          
    UINT nFrame;                             
    CAPTURE_SIZE emResolution;               
    UINT unRealTimeFrame;                    
    EM_NET_ENCODE_COMPRESSION emCompression; 
    EM_CAPTURE_SIZE_EX emResolutionEx;       
    BYTE byReserved[508];                    
} NET_MW_GET_WINDOW_INFO;
typedef struct tagNET_OUT_MW_GET_WINDOW_INFO
{
    DWORD dwSize;                                 
    int nVideoInfoNum;                            
    NET_MW_GET_WINDOW_INFO* pNetVideoChannelInfo; 
    int nRetVideoInfoNum;                         
} NET_OUT_MW_GET_WINDOW_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MonitorWallGetWindowInfo(LLONG lLoginID, const NET_IN_MW_GET_WINODW_INFO* pInParam, NET_OUT_MW_GET_WINDOW_INFO* pOutParam, int nWaitTime);
typedef struct tagPANO_COMPOSITE_GROUP_INFO
{
    char szGroupName[64]; 
    int nRow;              
    int nColumn;           
    int nEncChannel;       
    BYTE byReserved[1028]; 
} PANO_COMPOSITE_GROUP_INFO;
typedef struct tagNET_IN_ADD_PANO_COMPOSITE_GROUP
{
    DWORD dwSize;                                    
    BYTE byReserved[4];                              
    PANO_COMPOSITE_GROUP_INFO stuPanoCompositeGroup; 
} NET_IN_ADD_PANO_COMPOSITE_GROUP;
typedef struct tagNET_OUT_ADD_PANO_COMPOSITE_GROUP
{
    DWORD dwSize;       
    BYTE byReserved[4]; 
    char szGroupID[32]; 
} NET_OUT_ADD_PANO_COMPOSITE_GROUP;
typedef struct tagNET_IN_REMOVE_PANO_COMPOSITE_GROUP
{
    DWORD dwSize;               
    UINT nGroupNum;             
    char szGroupIdList[16][32]; 
} NET_IN_REMOVE_PANO_COMPOSITE_GROUP;
typedef struct tagNET_OUT_REMOVE_PANO_COMPOSITE_GROUP
{
    DWORD dwSize; 
} NET_OUT_REMOVE_PANO_COMPOSITE_GROUP;
typedef struct tagNET_IN_MODIFY_PANO_COMPOSITE_GROUP
{
    DWORD dwSize;                                    
    BYTE byReserved[4];                              
    char szGroupID[32];                              
    PANO_COMPOSITE_GROUP_INFO stuPanoCompositeGroup; 
} NET_IN_MODIFY_PANO_COMPOSITE_GROUP;
typedef struct tagNET_OUT_MODIFY_PANO_COMPOSITE_GROUP
{
    DWORD dwSize; 
} NET_OUT_MODIFY_PANO_COMPOSITE_GROUP;
typedef struct tagNET_IN_GET_ALL_PANO_COMPOSITE_GROUP
{
    DWORD dwSize; 
} NET_IN_GET_ALL_PANO_COMPOSITE_GROUP;
typedef struct tagPANO_COMPOSITE_GROUP_LIST_INFO
{
    char szGroupID[32];                              
    PANO_COMPOSITE_GROUP_INFO stuPanoCompositeGroup; 
    BYTE byReserved[1024];                           
} PANO_COMPOSITE_GROUP_LIST_INFO;
typedef struct tagNET_OUT_GET_ALL_PANO_COMPOSITE_GROUP
{
    DWORD dwSize;                                        
    UINT nGroupNum;                                      
    PANO_COMPOSITE_GROUP_LIST_INFO stuGroupInfoList[16]; 
} NET_OUT_GET_ALL_PANO_COMPOSITE_GROUP;
typedef enum tagEM_SOURCE_STREAM_TYPE
{
    EM_SOURCE_STREAM_UNKNOWN = -1, 
    EM_SOURCE_STREAM_MAIN,         
    EM_SOURCE_STREAM_EXTRA1,       
    EM_SOURCE_STREAM_EXTRA2,       
    EM_SOURCE_STREAM_EXTRA3,       
    EM_SOURCE_STREAM_AUTO,         
    EM_SOURCE_STREAM_PREVIEW,      
} EM_SOURCE_STREAM_TYPE;
typedef struct tagNET_SOURCE_DEVICE_INFO
{
    int nDefinition;                  
    DH_DEVICE_PROTOCOL emProtocol;    
    char szIp[32];                    
    char szUser[64];                  
    char szPwd[64];                   
    int nPort;                        
    int nVideoInputChannelNum;        
    int nAudioInputChannelNum;        
    DWORD dwHttpPort;                 
    DWORD dwRtspPort;                 
    int nHint;                        
    char szDevClass[DH_DEV_TYPE_LEN]; 
    char szDevType[DH_DEV_TYPE_LEN];  
    char szMainStreamUrl[MAX_PATH];   
    BYTE byReserved[1028];            
} NET_SOURCE_DEVICE_INFO;
typedef struct tagPANO_COMPOSITE_GROUP_SOURCE_INFO
{
    UINT nChannelID;                      
    EM_SOURCE_STREAM_TYPE emStreamType;   
    char szDeviceID[64];                  
    NET_SOURCE_DEVICE_INFO stuDeviceInfo; 
    BYTE byReserved[1024];                
} PANO_COMPOSITE_GROUP_SOURCE_INFO;
typedef struct tagNET_IN_SET_PANO_COMPOSITE_GROUP_SOURCE
{
    DWORD dwSize;                                         
    char szGroupID[32];                                   
    UINT nGroupSourceNum;                                 
    PANO_COMPOSITE_GROUP_SOURCE_INFO* pstGroupSourceInfo; 
} NET_IN_SET_PANO_COMPOSITE_GROUP_SOURCE;
typedef struct tagNET_OUT_SET_PANO_COMPOSITE_GROUP_SOURCE
{
    DWORD dwSize; 
} NET_OUT_SET_PANO_COMPOSITE_GROUP_SOURCE;
typedef struct tagNET_IN_GET_PANO_COMPOSITE_GROUP_SOURCE
{
    DWORD dwSize; 
} NET_IN_GET_PANO_COMPOSITE_GROUP_SOURCE;
typedef struct tagNET_COMPOSITE_GROUP_SOURCE_LIST
{
    char szGroupID[32];                                   
    UINT nMaxGroupSrcNum;                                 
    UINT nGroupSourceNum;                                 
    PANO_COMPOSITE_GROUP_SOURCE_INFO* pstGroupSourceInfo; 
    BYTE byReserved[1024];                                
} NET_COMPOSITE_GROUP_SOURCE_LIST;
typedef struct tagNET_OUT_GET_PANO_COMPOSITE_GROUP_SOURCE
{
    DWORD dwSize;                                           
    UINT nGroupSourceListNum;                               
    NET_COMPOSITE_GROUP_SOURCE_LIST stuGroupSourceList[16]; 
} NET_OUT_GET_PANO_COMPOSITE_GROUP_SOURCE;
typedef enum tagEM_PANOCOMPOSITE_GROUP_OPERATE_TYPE
{
    EM_PANOCOMPOSITE_GROUP_OPERATE_ADD,        
    EM_PANOCOMPOSITE_GROUP_OPERATE_REMOVE,     
    EM_PANOCOMPOSITE_GROUP_OPERATE_MODIFY,     
    EM_PANOCOMPOSITE_GROUP_OPERATE_GET_ALL,    
    EM_PANOCOMPOSITE_GROUP_OPERATE_SET_SOURCE, 
    EM_PANOCOMPOSITE_GROUP_OPERATE_GET_SOURCE, 
} EM_PANOCOMPOSITE_GROUP_OPERATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperatePanoCompositeGroup(LLONG lLoginID, EM_PANOCOMPOSITE_GROUP_OPERATE_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime);
typedef enum tagEM_LED_SET_CMD_TYPE
{
    EM_LED_SET_CMD_DISPLAY_ENABLE, 
    EM_LED_SET_CMD_DISPLAY_LOCK,   
    EM_LED_SET_CMD_DISPLAY_TEST,   
} EM_LED_SET_CMD_TYPE;
typedef enum tagEM_LED_IMAGE_TYPE
{
    EM_LED_IMAGE_UNKNOWN = -1, 
    EM_LED_IMAGE_NORMAL,       
    EM_LED_IMAGE_RED,          
    EM_LED_IMAGE_GREEN,        
    EM_LED_IMAGE_BLUE,         
    EM_LED_IMAGE_WHITE,        
    EM_LED_IMAGE_BLACK,        
    EM_LED_IMAGE_TRANSVERSE,   
    EM_LED_IMAGE_VERTICAL,     
    EM_LED_IMAGE_DIAGONAL,     
    EM_LED_IMAGE_256GREY,      
    EM_LED_IMAGE_AGINGSCREEN,  
} EM_LED_IMAGE_TYPE;
typedef struct tagNET_IN_LED_SET_DISPLAY_CTRL_PARAMS
{
    DWORD dwSize;                  
    int nChannel;                  
    EM_LED_SET_CMD_TYPE emCmdType; 
    BOOL bDisplayEnable;           
    BOOL bDisplayBlack;            
    BOOL bDisplayLock;             
    EM_LED_IMAGE_TYPE emImageType; 
} NET_IN_LED_SET_DISPLAY_CTRL_PARAMS;
typedef struct tagNET_OUT_LED_SET_DISPLAY_CTRL_PARAMS
{
    DWORD dwSize; 
} NET_OUT_LED_SET_DISPLAY_CTRL_PARAMS;
typedef struct tagNET_IN_LED_GET_DISPLAY_CTRL_PARAMS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_LED_GET_DISPLAY_CTRL_PARAMS;
typedef struct tagNET_OUT_LED_GET_DISPLAY_CTRL_PARAMS
{
    DWORD dwSize;                  
    BOOL bDisplayEnable;           
    BOOL bDisplayBlack;            
    BOOL bDisplayLock;             
    EM_LED_IMAGE_TYPE emImageType; 
} NET_OUT_LED_GET_DISPLAY_CTRL_PARAMS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetLedDisplayCtrlParams(LLONG lLoginID, const NET_IN_LED_SET_DISPLAY_CTRL_PARAMS* pInParam, NET_OUT_LED_SET_DISPLAY_CTRL_PARAMS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLedDisplayCtrlParams(LLONG lLoginID, const NET_IN_LED_GET_DISPLAY_CTRL_PARAMS* pInParam, NET_OUT_LED_GET_DISPLAY_CTRL_PARAMS* pOutParam, int nWaitTime);
#define MAX_PLAYDATES_COUNT 32     
#define MAX_SCREENTIME_COUNT 8     
#define MAX_WINDOWS_COUNT 16       
#define MAX_ELEMENTS_COUNT 8       
#define MAX_ELEMENTTEXT_LENGTH 512 
#define MAX_NOTE_COUNT 4           
#define MAX_PROGRAMMES_COUNT 32    
typedef enum tagEM_SCREEN_DATE_TYPE
{
    EM_SCREEN_DATE_UNKNOWN, 
    EM_SCREEN_DATE_MONTH,   
    EM_SCREEN_DATE_WEEK,    
    EM_SCREEN_DATE_DAY,     
} EM_SCREEN_DATE_TYPE;
typedef struct tagNET_PROGRAMME_TIME_INFO
{
    DWORD dwHour;   
    DWORD dwMinute; 
    DWORD dwSecond; 
} NET_PROGRAMME_TIME_INFO;
typedef struct tagNET_SCREEN_TIME_INFO
{
    BOOL bEnable;                         
    EM_SCREEN_DATE_TYPE emDateType;       
    UINT nDateCount;                      
    UINT nPlayDates[MAX_PLAYDATES_COUNT]; 
    NET_PROGRAMME_TIME_INFO stuOpenTime;  
    NET_PROGRAMME_TIME_INFO stuCloseTime; 
    BYTE byReserved[128];                 
} NET_SCREEN_TIME_INFO;
typedef struct NET_GUIDESCREEN_WINDOW_RECT_INFO
{
    char szWindowID[MAX_COMMON_STRING_64]; 
    NET_RECT stuRect;                      
    UINT nWindowBright;                    
    BYTE byReserved[132];                  
} NET_GUIDESCREEN_WINDOW_RECT_INFO;
typedef enum tagEM_SCREEN_STATUS_TYPE
{
    EM_SCREEN_STATUS_UNKNOWN, 
    EM_SCREEN_STATUS_ON,      
    EM_SCREEN_STATUS_OFF,     
} EM_SCREEN_STATUS_TYPE;
#define MAX_MONTH_COUNT 12 
typedef struct tagNET_SUN_RISE_SET_TIME
{
    UINT nSunrise;       
    UINT nSunset;        
    BYTE byReserved[32]; 
} NET_SUN_RISE_SET_TIME;
typedef struct tagNET_GUIDESCREEN_AUTO_BRIGHT
{
    BOOL bEnable;                                      
    UINT nLightBright;                                 
    UINT nDarkBright;                                  
    NET_SUN_RISE_SET_TIME stuSunTime[MAX_MONTH_COUNT]; 
    BYTE byReserved[128];                              
} NET_GUIDESCREEN_AUTO_BRIGHT;
typedef struct tagNET_GUIDESCREEN_ATTRIBUTE_INFO
{
    DWORD dwSize;
    char szScreenID[MAX_COMMON_STRING_64];                          
    EM_SCREEN_STATUS_TYPE emStatus;                                 
    BOOL bIsForeverOpen;                                            
    UINT nScreenTime;                                               
    NET_SCREEN_TIME_INFO stuScreenTime[MAX_SCREENTIME_COUNT];       
    UINT nBright;                                                   
    UINT nContrast;                                                 
    UINT nSaturation;                                               
    UINT nVolume;                                                   
    UINT nWidth;                                                    
    UINT nHeight;                                                   
    UINT nWindowsCount;                                             
    NET_GUIDESCREEN_WINDOW_RECT_INFO stuWindows[MAX_WINDOWS_COUNT]; 
    NET_GUIDESCREEN_AUTO_BRIGHT stuAutoBright;                      
    BYTE byReserved[512];                                           
} NET_GUIDESCREEN_ATTRIBUTE_INFO;
typedef struct tagNET_IN_SET_GUIDESCREEN_CFG
{
    DWORD dwSize;
    UINT nScreenCount;                                 
    NET_GUIDESCREEN_ATTRIBUTE_INFO* pstGuideScreenCfg; 
} NET_IN_SET_GUIDESCREEN_CFG;
typedef struct tagNET_OUT_SET_GUIDESCREEN_CFG
{
    DWORD dwSize;
} NET_OUT_SET_GUIDESCREEN_CFG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetGuideScreenCfg(LLONG lLoginID, const NET_IN_SET_GUIDESCREEN_CFG* pInParam, NET_OUT_SET_GUIDESCREEN_CFG* pstOutPqram, const int nWaitTime);
typedef struct tagNET_IN_GET_GUIDESCREEN_CFG_BYID
{
    DWORD dwSize;
    char szScreenID[MAX_COMMON_STRING_64]; 
} NET_IN_GET_GUIDESCREEN_CFG_BYID;
typedef struct tagNET_OUT_GET_GUIDESCREEN_CFG_BYID
{
    DWORD dwSize;
    NET_GUIDESCREEN_ATTRIBUTE_INFO stuGuideScreenCfg; 
} NET_OUT_GET_GUIDESCREEN_CFG_BYID;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetOneGuideScreenCfgById(
    LLONG lLoginID, const NET_IN_GET_GUIDESCREEN_CFG_BYID* pInParam,
    NET_OUT_GET_GUIDESCREEN_CFG_BYID* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_GET_ALL_GUIDESCREEN_CFG
{
    DWORD dwSize;
} NET_IN_GET_ALL_GUIDESCREEN_CFG;
typedef struct tagNET_OUT_GET_ALL_GUIDESCREEN_CFG
{
    DWORD dwSize;
    UINT nMaxScreen;                                   
    UINT nRetScreen;                                   
    NET_GUIDESCREEN_ATTRIBUTE_INFO* pstGuideScreenCfg; 
} NET_OUT_GET_ALL_GUIDESCREEN_CFG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAllGuideScreenCfg(
    LLONG lLoginID, const NET_IN_GET_ALL_GUIDESCREEN_CFG* pInParam,
    NET_OUT_GET_ALL_GUIDESCREEN_CFG* pOutParam, const int nWaitTime);
typedef enum tagEM_HORI_ALIGN_TYPE
{
    EM_HORI_ALIGN_UNKNOWN, 
    EM_HORI_ALIGN_LEFT,    
    EM_HORI_ALIGN_CENTER,  
    EM_HORI_ALIGN_RIGHT,   
} EM_HORI_ALIGN_TYPE;
typedef enum tagEM_VERT_ALIGN_TYPE
{
    EM_VERT_ALIGN_UNKNOWN, 
    EM_VERT_ALIGN_UP,      
    EM_VERT_ALIGN_CENTER,  
    EM_VERT_ALIGN_DOWN,    
} EM_VERT_ALIGN_TYPE;
typedef enum tagEM_PIC_STYLE_TYPE
{
    EM_PIC_STYLE_UNKNOWN, 
    EM_PIC_STYLE_DEFAULT, 
    EM_PIC_STYLE_UP,      
    EM_PIC_STYLE_DOWN,    
    EM_PIC_STYLE_LEFT,    
    EM_PIC_STYLE_RIGHT,   
} EM_PIC_STYLE_TYPE;
typedef struct tagNET_GUIDESCREEN_TEXT_INFO
{
    char szContent[MAX_ELEMENTTEXT_LENGTH]; 
    UINT nFontSize;                         
    NET_COLOR_RGBA stuFontColor;            
    char szFontStyle[MAX_COMMON_STRING_32]; 
    double dbLineHeight;                    
    EM_HORI_ALIGN_TYPE emHoriAlign;         
    EM_VERT_ALIGN_TYPE emVertAlign;         
    UINT nPlayTime;                         
    UINT nPlayCount;                        
    UINT nStayTime;                         
    EM_PIC_STYLE_TYPE emEnterStyle;         
    EM_PIC_STYLE_TYPE emExitStyle;          
    BYTE byReserved[128];                   
} NET_GUIDESCREEN_TEXT_INFO;
typedef struct tagNET_GUIDESCREEN_NOTE_INFO
{
    BOOL bEnable;                          
    NET_GUIDESCREEN_TEXT_INFO stuTextInfo; 
    NET_RECT stuRect;                      
    BYTE byReserved[128];                  
} NET_GUIDESCREEN_NOTE_INFO;
typedef struct tagNET_VIDEO_ELEMENT_INFO
{
    char szName[MAX_COMMON_STRING_64];                     
    BOOL bFillerState;                                     
    char szPath[MAX_COMMON_STRING_128];                    
    UINT nPlayCount;                                       
    UINT nNote;                                            
    NET_GUIDESCREEN_NOTE_INFO stuNoteInfo[MAX_NOTE_COUNT]; 
    BYTE byReserved[128];                                  
} NET_VIDEO_ELEMENT_INFO;
typedef enum tagEM_PICTURE_TYPE
{
    EM_PICTURE_TYPE_UNKNOWN = -1, 
    EM_PICTURE_TYPE_ORIGINAL,     
    EM_PICTURE_TYPE_COMPOSITE,    
} EM_PICTURE_TYPE;
typedef struct tagNET_PICTURE_ELEMENT_INFO
{
    char szName[MAX_COMMON_STRING_64];                     
    BOOL bFillerState;                                     
    char szPath[MAX_COMMON_STRING_128];                    
    UINT nPlayTime;                                        
    UINT nPlayCount;                                       
    UINT nDiaphaneity;                                     
    UINT nStayTime;                                        
    EM_PIC_STYLE_TYPE emEnterStyle;                        
    EM_PIC_STYLE_TYPE emExitStyle;                         
    UINT nNote;                                            
    NET_GUIDESCREEN_NOTE_INFO stuNoteInfo[MAX_NOTE_COUNT]; 
    EM_PICTURE_TYPE emPictureType;                         
    BYTE byReserved[124];                                  
} NET_PICTURE_ELEMENT_INFO;
typedef struct tagNET_TEXT_ELEMENT_INFO
{
    char szName[MAX_COMMON_STRING_64];                     
    BOOL bFillerState;                                     
    NET_GUIDESCREEN_TEXT_INFO stuElementsText;             
    UINT nNote;                                            
    NET_GUIDESCREEN_NOTE_INFO stuNoteInfo[MAX_NOTE_COUNT]; 
    BYTE byReserved[128];                                  
} NET_TEXT_ELEMENT_INFO;
typedef struct tagNET_PLACEHOLDER_ELEMENT_INFO
{
    char szName[MAX_COMMON_STRING_64];                     
    BOOL bFillerState;                                     
    UINT nNote;                                            
    NET_GUIDESCREEN_NOTE_INFO stuNoteInfo[MAX_NOTE_COUNT]; 
    BYTE byReserved[128];                                  
} NET_PLACEHOLDER_ELEMENT_INFO;
typedef enum tagEM_CAPTURE_TYPE
{
    EM_CAPTURE_UNKNOWN, 
    EM_CAPTURE_VIDEO,   
    EM_CAPTURE_PICTURE, 
} EM_CAPTURE_TYPE;
typedef struct tagNET_CAPTURE_OSD_INFO
{
    BOOL bEnable;                          
    NET_COLOR_RGBA stuFontColor;           
    NET_COLOR_RGBA stuBackGroundColor;     
    UINT nFontSize;                        
    char szContent[MAX_COMMON_STRING_512]; 
    BYTE byReserved[1024];                 
} NET_CAPTURE_OSD_INFO;
typedef struct tagNET_CAPTURE_ELEMENT_INFO
{
    char szName[MAX_COMMON_STRING_64];                     
    BOOL bFillerState;                                     
    char szUserName[DH_USER_NAME_LEN_EX];                  
    char szPassWord[DH_USER_PSW_LEN_EX];                   
    char szIP[DH_MAX_IPADDR_LEN_EX];                       
    UINT nPort;                                            
    UINT nChannel;                                         
    EM_CAPTURE_TYPE emCaptureType;                         
    UINT nPlayTime;                                        
    UINT nNote;                                            
    NET_GUIDESCREEN_NOTE_INFO stuNoteInfo[MAX_NOTE_COUNT]; 
    NET_CAPTURE_OSD_INFO* pstOsdInfo;                      
    BYTE byReserved[124];                                  
} NET_CAPTURE_ELEMENT_INFO;
typedef struct tagNET_PDF_ELEMENT_INFO
{
    char szName[MAX_COMMON_STRING_64];                     
    BOOL bFillerState;                                     
    char szPdfPath[MAX_COMMON_STRING_128];                 
    UINT nPlayTime;                                        
    UINT nPlayCount;                                       
    UINT nStayTime;                                        
    EM_PIC_STYLE_TYPE emEnterStyle;                        
    EM_PIC_STYLE_TYPE emExitStyle;                         
    UINT nTextNote;                                        
    NET_GUIDESCREEN_NOTE_INFO stuNoteInfo[MAX_NOTE_COUNT]; 
    BYTE byReserved[1024];                                 
} NET_PDF_ELEMENT_INFO;
typedef struct tagNET_AUDIO_ELEMENT_INFO
{
    char szName[MAX_COMMON_STRING_64];                     
    BOOL bFillerState;                                     
    char szAudioPath[MAX_COMMON_STRING_128];               
    UINT nPlayCount;                                       
    UINT nTextNote;                                        
    NET_GUIDESCREEN_NOTE_INFO stuNoteInfo[MAX_NOTE_COUNT]; 
    BYTE byReserved[1024];                                 
} NET_AUDIO_ELEMENT_INFO;
typedef enum tagEM_ELEMENTS_TYPE
{
    EM_ELEMENTS_UNKNOWN,     
    EM_ELEMENTS_VIDEO,       
    EM_ELEMENTS_PICTURE,     
    EM_ELEMENTS_TEXT,        
    EM_ELEMENTS_PLACEHOLDER, 
    EM_ELEMENTS_CAPTURE,     
    EM_ELEMENTS_PDF,         
    EM_ELEMENTS_AUDIO,       
} EM_ELEMENTS_TYPE;
typedef enum tagEM_TOURPERIOD_TYPE
{
    EM_TOURPERIOD_UNKNOWN,   
    EM_TOURPERIOD_PROGRAMME, 
    EM_TOURPERIOD_PLAN,      
    EM_TOURPERIOD_CUSTOM,    
} EM_TOURPERIOD_TYPE;
typedef struct tagNET_ELEMENT_COMMON_INFO
{
    EM_ELEMENTS_TYPE emElementsType; 
    BYTE byReserved[128];            
} NET_ELEMENT_COMMON_INFO;
typedef struct tagNET_GUIDESCREEN_WINDOW_INFO
{
    char szWindowID[MAX_COMMON_STRING_64]; 
    int nVolume;                           
    NET_COLOR_RGBA stuColor;               
    UINT nDiaphaneity;                     
    EM_TOURPERIOD_TYPE emTourPeriodType;   
    UINT nTourPeriodTime;                  
    BOOL bAutoPlay;                        
    BOOL bLoopPlay;                        
    UINT nElementsCount;                   
    char* pstElementsBuf;                  
    UINT nBufLen;                          
    BYTE byReserved[128];                  
} NET_GUIDESCREEN_WINDOW_INFO;
typedef struct tagNET_ORDINARY_INFO
{
    BOOL bTempletState;                                            
    char szDescription[MAX_COMMON_STRING_128];                     
    UINT nWhnCount;                                                
    NET_GUIDESCREEN_WINDOW_INFO stuWindowsInfo[MAX_WINDOWS_COUNT]; 
    BYTE byReserved[128];                                          
} NET_ORDINARY_INFO;
typedef struct tagNET_PROGRAMME_INFO
{
    char szProgrammeName[MAX_COMMON_STRING_64]; 
    char szProgrammeID[MAX_COMMON_STRING_64];   
    BOOL bEnable;                               
    NET_ORDINARY_INFO stuOrdinaryInfo;          
    BYTE byReserved[512];                       
} NET_PROGRAMME_INFO;
typedef struct tagNET_IN_GET_PROGRAMME_BYID
{
    DWORD dwSize;
    char szProgrammeID[MAX_COMMON_STRING_64]; 
} NET_IN_GET_PROGRAMME_BYID;
typedef struct tagNET_OUT_GET_PROGRAMME_BYID
{
    DWORD dwSize;
    NET_PROGRAMME_INFO stuProgrammeInfo; 
} NET_OUT_GET_PROGRAMME_BYID;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetOneProgrammeById(LLONG lLoginID, const NET_IN_GET_PROGRAMME_BYID* pInParam, NET_OUT_GET_PROGRAMME_BYID* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_GET_ALL_PROGRAMMES
{
    DWORD dwSize;
} NET_IN_GET_ALL_PROGRAMMES;
typedef struct tagNET_OUT_GET_ALL_PROGRAMMES
{
    DWORD dwSize;
    UINT nMaxCnt;                         
    UINT nRetCnt;                         
    NET_PROGRAMME_INFO* pstProgrammeInfo; 
} NET_OUT_GET_ALL_PROGRAMMES;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAllProgrammes(
    LLONG lLoginID, const NET_IN_GET_ALL_PROGRAMMES* pInParam,
    NET_OUT_GET_ALL_PROGRAMMES* pOutParam, const int nWaitTime);
typedef enum tagEM_BRIEFLYPROGRAM_TYPE
{
    EM_BRIEFLYPROGRAM_UNKNOWN,  
    EM_BRIEFLYPROGRAM_BAR,      
    EM_BRIEFLYPROGRAM_ORDINARY, 
} EM_BRIEFLYPROGRAM_TYPE;
typedef struct tagNET_BRIEFLY_PROGRAMME_INFO
{
    char szProgrammeName[MAX_COMMON_STRING_64]; 
    char szProgrammeID[MAX_COMMON_STRING_64];   
    EM_BRIEFLYPROGRAM_TYPE emProgrammeType;     
    BOOL bEnable;                               
    BOOL bTempletState;                         
    BYTE byReserved[512];                       
} NET_BRIEFLY_PROGRAMME_INFO;
typedef struct tagNET_IN_GET_ALL_BRIEFLYPROGRAMMES
{
    DWORD dwSize;
} NET_IN_GET_ALL_BRIEFLYPROGRAMMES;
typedef struct tagNET_OUT_GET_ALL_BRIEFLYPROGRAMMES
{
    DWORD dwSize;
    UINT nRetCnt;                                                      
    NET_BRIEFLY_PROGRAMME_INFO stuBriProgrammes[MAX_PROGRAMMES_COUNT]; 
} NET_OUT_GET_ALL_BRIEFLYPROGRAMMES;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAllBrieflyProgrammes(
    LLONG lLoginID, const NET_IN_GET_ALL_BRIEFLYPROGRAMMES* pInParam,
    NET_OUT_GET_ALL_BRIEFLYPROGRAMMES* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_ADD_ONE_PROGRAMME
{
    DWORD dwSize;
    NET_PROGRAMME_INFO stuProgrammeInfo; 
} NET_IN_ADD_ONE_PROGRAMME;
typedef struct tagNET_OUT_ADD_ONE_PROGRAMME
{
    DWORD dwSize;
    char szProgrammeID[MAX_COMMON_STRING_64]; 
} NET_OUT_ADD_ONE_PROGRAMME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddOneProgramme(LLONG lLoginID, const NET_IN_ADD_ONE_PROGRAMME* pInParam, NET_OUT_ADD_ONE_PROGRAMME* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_MODIFY_ONE_PROGRAMME
{
    DWORD dwSize;
    NET_PROGRAMME_INFO stuProgrammeInfo; 
} NET_IN_MODIFY_ONE_PROGRAMME;
typedef struct tagNET_OUT_MODIFY_ONE_PROGRAMME
{
    DWORD dwSize;
} NET_OUT_MODIFY_ONE_PROGRAMME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyOneProgrammeByID(LLONG lLoginID, const NET_IN_MODIFY_ONE_PROGRAMME* pInParam, NET_OUT_MODIFY_ONE_PROGRAMME* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_DEL_PROGRAMMES
{
    DWORD dwSize;
    UINT nProgrammeID;                                                  
    char szProGrammeIdList[MAX_PROGRAMMES_COUNT][MAX_COMMON_STRING_64]; 
} NET_IN_DEL_PROGRAMMES;
typedef struct tagNET_OUT_DEL_PROGRAMMES
{
    DWORD dwSize;
} NET_OUT_DEL_PROGRAMMES;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelMultiProgrammesById(
    LLONG lLoginID, const NET_IN_DEL_PROGRAMMES* pInParam,
    NET_OUT_DEL_PROGRAMMES* pOutParam, const int nWaitTime);
typedef struct tagNET_IMMEDIATELY_PLAN_INFO
{
    char szPlanName[MAX_COMMON_STRING_64];      
    char szPlanID[MAX_COMMON_STRING_64];        
    char szSplitScreenID[MAX_COMMON_STRING_64]; 
    BOOL bEnable;                               
    UINT nPlayTime;                             
    char szProgrammeName[MAX_COMMON_STRING_64]; 
    char szProgrammeID[MAX_COMMON_STRING_64];   
    char szTemplateType[MAX_COMMON_STRING_64];  
    BYTE byReserved[448];                       
} NET_IMMEDIATELY_PLAN_INFO;
typedef struct tagNET_PROGRAMME_DATA
{
    DWORD dwYear;  
    DWORD dwMonth; 
    DWORD dwDay;   
} NET_PROGRAMME_DATA;
typedef enum tagEM_REVIES_STATE
{
    EM_REVIES_UNKNOWN, 
    EM_REVIES_PASS,    
    EM_REVIES_NOTPASS, 
} EM_REVIES_STATE;
typedef struct tagNET_PROGRAMME_OF_PLAN
{
    char szProgrammeName[MAX_COMMON_STRING_64]; 
    char szProgrammeID[MAX_COMMON_STRING_64];   
    BOOL bIsBgProgramme;                        
    NET_PROGRAMME_TIME_INFO stuSatrtTime;       
    NET_PROGRAMME_TIME_INFO stuEndTime;         
    BYTE byReserved[128];                       
} NET_PROGRAMME_OF_PLAN;
typedef enum tagEM_TIMERPLAN_DATE_TYPE
{
    EM_TIMERPLAN_DATE_UNKNOWN, 
    EM_TIMERPLAN_DATE_MONTH,   
    EM_TIMERPLAN_DATE_WEEK,    
    EM_TIMERPLAN_DATE_DAY,     
    EM_TIMERPLAN_DATE_CUSTOM,  
} EM_TIMERPLAN_DATE_TYPE;
typedef struct tagNET_TIMER_PLAN_INFO
{
    char szPlanName[MAX_COMMON_STRING_64];                     
    char szPlanID[MAX_COMMON_STRING_64];                       
    char szSplitScreenID[MAX_COMMON_STRING_64];                
    EM_TIMERPLAN_DATE_TYPE emDataType;                         
    UINT nDataCount;                                           
    UINT nPlayDates[MAX_PLAYDATES_COUNT];                      
    NET_PROGRAMME_DATA stuSatrtDate;                           
    NET_PROGRAMME_DATA stuEndDate;                             
    EM_REVIES_STATE emReviewState;                             
    char szReviewOpinion[MAX_COMMON_STRING_64];                
    BOOL bOverdue;                                             
    UINT nProgrammes;                                          
    NET_PROGRAMME_OF_PLAN stuProgrammes[MAX_PROGRAMMES_COUNT]; 
    BYTE byReserved[512];                                      
} NET_TIMER_PLAN_INFO;
typedef struct tagNET_IN_GET_ALL_PROGRAMMEPLANS
{
    DWORD dwSize;
} NET_IN_GET_ALL_PROGRAMMEPLANS;
typedef struct tagNET_OUT_GET_ALL_PROGRAMMEPLANS
{
    DWORD dwSize;
    UINT nMaxPlanCnt;                       
    UINT nRetImmCnt;                        
    NET_IMMEDIATELY_PLAN_INFO* pstImmePlan; 
    UINT nRetTimerCnt;                      
    NET_TIMER_PLAN_INFO* pstTimerPlan;      
} NET_OUT_GET_ALL_PROGRAMMEPLANS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAllProgrammePlans(
    LLONG lLoginID, const NET_IN_GET_ALL_PROGRAMMEPLANS* pInParam,
    NET_OUT_GET_ALL_PROGRAMMEPLANS* pOutParam, const int nWaitTime);
typedef enum tagEM_PROGRAMMEPLAN_TYPE
{
    EM_PROGRAMMEPLAN_UNKNOWN, 
    EM_PROGRAMMEPLAN_IMME,    
    EM_PROGRAMMEPLAN_TIMER,   
} EM_PROGRAMMEPLAN_TYPE;
typedef struct tagNET_IN_GET_PROGRAMMEPLAN_BYID
{
    DWORD dwSize;
    char szPlanID[MAX_COMMON_STRING_64]; 
} NET_IN_GET_PROGRAMMEPLAN_BYID;
typedef struct tagNET_OUT_GET_PROGRAMMEPLAN_BYID
{
    DWORD dwSize;
    EM_PROGRAMMEPLAN_TYPE emPlanType;      
    NET_IMMEDIATELY_PLAN_INFO stuImmePlan; 
    NET_TIMER_PLAN_INFO stuTimerPlan;      
} NET_OUT_GET_PROGRAMMEPLAN_BYID;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetOneProgrammePlanByID(
    LLONG lLoginID, NET_IN_GET_PROGRAMMEPLAN_BYID* pInParam,
    NET_OUT_GET_PROGRAMMEPLAN_BYID* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_ADD_IMME_PROGRAMMEPLAN
{
    DWORD dwSize;
    NET_IMMEDIATELY_PLAN_INFO stuImmePlan; 
} NET_IN_ADD_IMME_PROGRAMMEPLAN;
typedef struct tagNET_IN_ADD_TIMER_PROGRAMMEPLAN
{
    DWORD dwSize;
    NET_TIMER_PLAN_INFO stuTimerPlan; 
} NET_IN_ADD_TIMER_PROGRAMMEPLAN;
typedef struct tagNET_OUT_ADD_PROGRAMMEPLAN
{
    DWORD dwSize;
    char szPlanID[MAX_COMMON_STRING_64]; 
} NET_OUT_ADD_PROGRAMMEPLAN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddOneImmediProgrammePlan(
    LLONG lLoginID, const NET_IN_ADD_IMME_PROGRAMMEPLAN* pInParam,
    NET_OUT_ADD_PROGRAMMEPLAN* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddOneTimerProgrammePlan(
    LLONG lLoginID, const NET_IN_ADD_TIMER_PROGRAMMEPLAN* pInParam,
    NET_OUT_ADD_PROGRAMMEPLAN* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_MODIFY_IMME_PROGRAMMEPLAN
{
    DWORD dwSize;
    NET_IMMEDIATELY_PLAN_INFO stuImmePlan; 
} NET_IN_MODIFY_IMME_PROGRAMMEPLAN;
typedef struct tagNET_OUT_MODIFY_IMME_PROGRAMMEPLAN
{
    DWORD dwSize;
} NET_OUT_MODIFY_IMME_PROGRAMMEPLAN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyOneImmediProgrammePlan(
    LLONG lLoginID, const NET_IN_MODIFY_IMME_PROGRAMMEPLAN* pInParam,
    NET_OUT_MODIFY_IMME_PROGRAMMEPLAN* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_MODIFY_TIMER_PROGRAMMEPLAN
{
    DWORD dwSize;
    NET_TIMER_PLAN_INFO stuTimerPlan; 
} NET_IN_MODIFY_TIMER_PROGRAMMEPLAN;
typedef struct tagNET_OUT_MODIFY_TIMER_PROGRAMMEPLAN
{
    DWORD dwSize;
} NET_OUT_MODIFY_TIMER_PROGRAMMEPLAN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyOneTimerProgrammePlan(
    LLONG lLoginID, const NET_IN_MODIFY_TIMER_PROGRAMMEPLAN* pInParam,
    NET_OUT_MODIFY_TIMER_PROGRAMMEPLAN* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_DEL_PROGRAMMEPLANS
{
    DWORD dwSize;
    UINT nPlanIDNum;                                           
    char szPlanID[MAX_PROGRAMMES_COUNT][MAX_COMMON_STRING_64]; 
} NET_IN_DEL_PROGRAMMEPLANS;
typedef struct tagNET_OUT_DEL_PROGRAMMEPLANS
{
    DWORD dwSize;
} NET_OUT_DEL_PROGRAMMEPLANS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelMultiProgrammePlans(
    LLONG lLoginID, const NET_IN_DEL_PROGRAMMEPLANS* pInParam,
    NET_OUT_DEL_PROGRAMMEPLANS* pOutParam, const int nWaitTime);
#define MAX_GD_COUNT 170
typedef enum tagEM_GD_COLOR_TYPE
{
    EM_GD_COLOR_RED,    
    EM_GD_COLOR_GREEN,  
    EM_GD_COLOR_YELLOW, 
} EM_GD_COLOR_TYPE;
typedef struct tagNET_IN_SET_GD_STATUS
{
    DWORD dwSize;
    char szScreenID[MAX_COMMON_STRING_64];   
    UINT nGDNum;                             
    EM_GD_COLOR_TYPE emStatus[MAX_GD_COUNT]; 
} NET_IN_SET_GD_STATUS;
typedef struct tagNET_OUT_SET_GD_STATUS
{
    DWORD dwSize;
} NET_OUT_SET_GD_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetGuideScreenGDStatus(
    LLONG lLoginID, const NET_IN_SET_GD_STATUS* pInParam,
    NET_OUT_SET_GD_STATUS* pOutParam, const int nWaitTime);
typedef struct tagNET_PROGRAM_LOGO_INFO
{
    char szLogoPath[MAX_COMMON_STRING_128]; 
    NET_RECT stuBackgroundRect;             
    UINT nDiaphaneity;                      
    BYTE byReserved[128];                   
} NET_PROGRAM_LOGO_INFO;
typedef struct tagNET_PROGRAM_BAR_INFO
{
    char szContent[MAX_COMMON_STRING_512];  
    NET_COLOR_RGBA stuFontColor;            
    UINT nFontSize;                         
    char szFontStyle[MAX_COMMON_STRING_32]; 
    UINT nPlaySpeed;                        
    NET_RECT stuBackgroundRect;             
    NET_COLOR_RGBA stuBackColor;            
    UINT nDiaphaneity;                      
    BYTE byReserved[128];                   
} NET_PROGRAM_BAR_INFO;
typedef struct tagNET_PLAYBOX_WINDOWS_INFO
{
    NET_RECT stuRect;                    
    UINT nZorder;                        
    int nVolume;                         
    NET_COLOR_RGBA stuBackColor;         
    UINT nDiaphaneity;                   
    EM_TOURPERIOD_TYPE emTourPeriodType; 
    UINT nTourPeriodTime;                
    BOOL bAutoPlay;                      
    BOOL bLoopPlay;                      
    UINT nElementsCount;                 
    char* pstElementsBuf;                
    UINT nBufLen;                        
    BYTE byReserved[128];                
} NET_PLAYBOX_WINDOWS_INFO;
typedef struct tagNET_PROGRAM_ORDINARY_INFO
{
    BOOL bTempletState;                                         
    char szDescription[MAX_COMMON_STRING_128];                  
    UINT nWidth;                                                
    UINT nHeight;                                               
    int nWinCount;                                              
    NET_PLAYBOX_WINDOWS_INFO stuWindowsInfo[MAX_WINDOWS_COUNT]; 
    BYTE byReserved[128];                                       
} NET_PROGRAM_ORDINARY_INFO;
typedef enum tagEM_PLAYBOXPROGRAM_TYPE
{
    EM_PROGRAM_ON_PLAYBOX_LOGO,     
    EM_PROGRAM_ON_PLAYBOX_BAR,      
    EM_PROGRAM_ON_PLAYBOX_ORDINARY, 
} EM_PLAYBOXPROGRAM_TYPE;
typedef struct tagNET_PROGRAM_ON_PLAYBOX
{
    char szProgrammeName[MAX_COMMON_STRING_64]; 
    char szProgrammeID[MAX_COMMON_STRING_64];   
    BOOL bEnable;                               
    EM_PLAYBOXPROGRAM_TYPE emProgramType;       
    NET_PROGRAM_LOGO_INFO stuLogoInfo;          
    NET_PROGRAM_BAR_INFO stuBarInfo;            
    NET_PROGRAM_ORDINARY_INFO stuOrdinaryInfo;  
    BYTE byReserved[512];                       
} NET_PROGRAM_ON_PLAYBOX;
typedef struct tagNET_IN_GET_ALL_PLAYBOX_PROGRAM
{
    DWORD dwSize;
} NET_IN_GET_ALL_PLAYBOX_PROGRAM;
typedef struct tagNET_OUT_GET_ALL_PLAYBOX_PROGRAM
{
    DWORD dwSize;
    UINT nMaxProgramCount;                  
    UINT nRetProgramCount;                  
    NET_PROGRAM_ON_PLAYBOX* pstProgramInfo; 
} NET_OUT_GET_ALL_PLAYBOX_PROGRAM;
typedef struct tagNET_IN_GET_PLAYBOX_PROGRAM_BYID
{
    DWORD dwSize;
    char szProgrammeID[MAX_COMMON_STRING_64]; 
} NET_IN_GET_PLAYBOX_PROGRAM_BYID;
typedef struct tagNET_OUT_GET_PLAYBOX_PROGRAM_BYID
{
    DWORD dwSize;
    NET_PROGRAM_ON_PLAYBOX stuPlayBoxProgram; 
} NET_OUT_GET_PLAYBOX_PROGRAM_BYID;
typedef struct tagNET_IN_ADD_ONE_PLAYBOX_PRAGROM
{
    DWORD dwSize;
    NET_PROGRAM_ON_PLAYBOX stuPlayBoxProgram; 
} NET_IN_ADD_ONE_PLAYBOX_PRAGROM;
typedef struct tagNET_OUT_ADD_ONE_PLAYBOX_PRAGROM
{
    DWORD dwSize;
    char szProgrammeID[MAX_COMMON_STRING_64]; 
} NET_OUT_ADD_ONE_PLAYBOX_PRAGROM;
typedef struct tagNET_IN_MODIFY_PLAYBOX_PROGRAM_BYID
{
    DWORD dwSize;
    NET_PROGRAM_ON_PLAYBOX stuPlayBoxProgram; 
} NET_IN_MODIFY_PLAYBOX_PROGRAM_BYID;
typedef struct tagNET_OUT_MODIFY_PLAYBOX_PROGRAM_BYID
{
    DWORD dwSize;
} NET_OUT_MODIFY_PLAYBOX_PROGRAM_BYID;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAllProgramOnPlayBox(
    LLONG lLoginID, const NET_IN_GET_ALL_PLAYBOX_PROGRAM* pInParam,
    NET_OUT_GET_ALL_PLAYBOX_PROGRAM* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetOneProgramByIdOnPlayBox(
    LLONG lLoginID, const NET_IN_GET_PLAYBOX_PROGRAM_BYID* pInParam,
    NET_OUT_GET_PLAYBOX_PROGRAM_BYID* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddOneProgramToPlayBox(
    LLONG lLoginID, const NET_IN_ADD_ONE_PLAYBOX_PRAGROM* pInParam,
    NET_OUT_ADD_ONE_PLAYBOX_PRAGROM* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyProgramOnPlayBoxById(
    LLONG lLoginID, const NET_IN_MODIFY_PLAYBOX_PROGRAM_BYID* pInParam,
    NET_OUT_MODIFY_PLAYBOX_PROGRAM_BYID* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OrganizationAddNodes(LLONG lLoginID, const DH_IN_ORGANIZATION_ADD_NODES* pInParam, DH_OUT_ORGANIZATION_ADD_NODES* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OrganizationDeleteNodes(LLONG lLoginID, const DH_IN_ORGANIZATION_DELETE_NODES* pInParam, DH_OUT_ORGANIZATION_DELETE_NODES* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OrganizationGetNodes(LLONG lLoginID, const DH_IN_ORGANIZATION_GET_NODES* pInParam, DH_OUT_ORGANIZATION_GET_NODES* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OrganizationSetNode(LLONG lLoginID, const DH_IN_ORGANIZATION_SET_NODE* pInParam, DH_OUT_ORGANIZATION_SET_NODE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartSniffer(LLONG lLoginID, const DH_IN_START_SNIFFER* pInParam, DH_OUT_START_SNIFFER* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopSniffer(LLONG lLoginID, LLONG lSnifferID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSnifferInfo(LLONG lLoginID, const DH_IN_GET_SNIFFER_INFO* pInParam, DH_OUT_GET_SNIFFER_INFO* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSniffer(LLONG lLoginID, const NET_IN_ATTACH_SNIFFER* pInParam, NET_OUT_ATTACH_SNIFFER* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSniffer(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSnifferCaps(LLONG lLoginID, const NET_IN_GET_SNIFFER_CAP* pInParam, NET_OUT_GET_SNIFFER_CAP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPicJPEG(LLONG lPlayHandle, BYTE* pJpegBuf, DWORD dwBufSize, DWORD* pJpegSize, int quality);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CreateRemoteFile(LLONG lLoginID, const DH_IN_CREATE_REMOTE_FILE* pInParam, DH_OUT_CREATE_REMOTE_FILE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveRemoteFiles(LLONG lLoginID, const DH_IN_REMOVE_REMOTE_FILES* pInParam, DH_OUT_REMOVE_REMOTE_FILES* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RenameRemoteFile(LLONG lLoginID, const DH_IN_RENAME_REMOTE_FILE* pInParam, DH_OUT_RENAME_REMOTE_FILE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ListRemoteFile(LLONG lLoginID, const DH_IN_LIST_REMOTE_FILE* pInParam, DH_OUT_LIST_REMOTE_FILE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UploadRemoteFile(LLONG lLoginID, const DH_IN_UPLOAD_REMOTE_FILE* pInParam, DH_OUT_UPLOAD_REMOTE_FILE* pOutParam, int nWaitTime = 1000);
typedef void(CALLBACK* fUploadFileCallBack)(LLONG lUploadFileHandle, int nTotalSize, int nSendSize, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartUploadRemoteFile(LLONG lLoginID, const DH_IN_UPLOAD_REMOTE_FILE* pInParam, DH_OUT_UPLOAD_REMOTE_FILE* pOutParam, fUploadFileCallBack cbUploadFile, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopUploadRemoteFile(LLONG lUploadFileID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PlayAudioFile(LLONG lLoginID, const NET_IN_PLAY_AUDIO_FILE* pInParam, NET_OUT_PLAY_AUDIO_FILE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DownloadRemoteFile(LLONG lLoginID, const DH_IN_DOWNLOAD_REMOTE_FILE* pInParam, DH_OUT_DOWNLOAD_REMOTE_FILE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetFileAttribute(LLONG lLoginID, const DH_IN_SET_FILEATTRIBUTE* pInParam, DH_OUT_SET_FILEATTRIBUTE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DownloadPieceFile(LLONG lLoginID, const NET_IN_DOWNLOAD_PIECE_FILE* pInParam, NET_OUT_DOWNLOAD_PIECE_FILE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMediaFileInfo(LLONG lLoginID, const NET_IN_GET_NEDIA_FILE_INFO* pInParam, NET_OUT_GET_NEDIA_FILE_INFO* pOutParam, const int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartListMediaFileInfo(LLONG lLoginID, const NET_IN_START_LIST_FILE_INFO* pInParam, NET_OUT_START_LIST_FILE_INFO* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoListMediaFileInfo(LLONG lFindHandle, const NET_IN_DO_LIST_FILE_INFO* pInParam, NET_OUT_DO_LIST_FILE_INFO* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopListMediaFileInfo(LLONG lFindHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NotifyFileUploadProgress(LLONG lLoginID, const NET_IN_NOTIFY_FILE_UPLOAD_PROGRESS_INFO* pstInParam, NET_OUT_NOTIFY_FILE_UPLOAD_PROGRESS_INFO* pstOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveMediaFilesInfo(LLONG lLoginID, const NET_IN_REMOVE_MEDIA_FILES_INFO* pstInParam, NET_OUT_REMOVE_MEDIA_FILES_INFO* pstOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetISCSITargets(LLONG lLoginID, const DH_IN_ISCSI_TARGETS* pInParam, DH_OUT_ISCSI_TARGETS* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetBitmap(LLONG lLoginID, const DH_IN_BITMAP* pInParam, DH_OUT_BITMAP* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetStorageDeviceNames(LLONG lLoginID, DH_STORAGE_DEVICE_NAME* pstuNames, int nMaxCount, int* pnRetCount, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetStorageDeviceInfo(LLONG lLoginID, const char* pszDevName, DH_STORAGE_DEVICE* pDevice, int nWaitTime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRecordInfo(LLONG lLoginID, const NET_IN_ATTACH_RECORD_INFO* pInParam, NET_OUT_ATTACH_RECORD_INFO* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRecordInfo(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_NetStorageAttachWriteInfo(LLONG lLoginID, const NET_IN_STORAGE_ATTACH_WRITE_INFO* pInParam, NET_OUT_STORAGE_ATTACH_WRITE_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NetStorageDetachWriteInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NetStorageGetWriteInfo(LLONG lLoginID, const NET_IN_STORAGE_GET_WRITE_INFO* pInParam, NET_OUT_STORAGE_GET_WRITE_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateRaid(LLONG lLoginID, NET_RAID_OPERATE_TYPE emType, void* pInBuf, void* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DevStorageFormatPartitionAsyn(LLONG lLoginID, const char* pszDevName, const NET_IN_DEVSTORAGE_FORMAT_PARTITION_ASYN* pInParam, NET_OUT_DEVSTORAGE_FORMAT_PARTITION_ASYN* pOutParam, const int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachDevStorageDevFormat(LLONG lLoginID, const NET_IN_DEVSTORAGE_ATTACH_DEV_FORMAT* pInParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachDevStorageDevFormat(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixSearch(LLONG lLoginID, const DH_IN_MATRIX_SEARCH* pInParam, DH_OUT_MATRIX_SEARCH* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMatrixTree(LLONG lLoginID, const DH_IN_GET_MATRIX_TREE* pInParam, DH_OUT_GET_MATRIX_TREE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSuperiorMatrixList(LLONG lLoginID, const DH_IN_GET_SUPERIOR_MATRIX_LIST* pInParam, DH_OUT_GET_SUPERIOR_MATRIX_LIST* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartRecordBackupRestore(LLONG lLoginID);
CLIENT_NET_API void CALL_METHOD CLIENT_StopRecordBackupRestore(LLONG lRestoreID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddRecordBackupRestoreTask(LLONG lRestoreID, const DH_IN_ADD_REC_BAK_RST_TASK* pInParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddRecordBackupRestoreRemoteTask(LLONG lRestoreID, const DH_IN_ADD_REC_BAK_RST_REMOTE_TASK* pInParam, DH_OUT_ADD_REC_BAK_RST_REMOTE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveRecordBackupRestoreTask(LLONG lRestoreID, const DH_IN_REMOVE_REC_BAK_RST_TASK* pInParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRecordBackupRestoreTask(LLONG lRestoreID, const DH_IN_QUERY_REC_BAK_RST_TASK* pInParam, DH_OUT_QUERY_REC_BAK_RST_TASK* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindRecordBackupRestoreTaskInfos(LLONG lLoginID, const NET_IN_FIND_REC_BAK_RST_TASK* pInParam, NET_OUT_FIND_REC_BAK_RST_TASK* pOutParam, int nWaitTime = 3000);
typedef enum tagEM_RECORD_BACKUP_STREAM_TYPE
{
    EM_RECORD_BACKUP_STREAM_TYPE_UNKNOWN, 
    EM_RECORD_BACKUP_STREAM_TYPE_JPG,     
    EM_RECORD_BACKUP_STREAM_TYPE_MAIN,    
} EM_RECORD_BACKUP_STREAM_TYPE;
typedef enum tagEM_RECORD_BACKUP_STATE
{
    EM_RECORD_BACKUP_STATE_UNKNOWN,  
    EM_RECORD_BACKUP_STATE_NORMAL,   
    EM_RECORD_BACKUP_STATE_RUNNING,  
    EM_RECORD_BACKUP_STATE_FINISHED, 
    EM_RECORD_BACKUP_STATE_FAILED,   
    EM_RECORD_BACKUP_STATE_PAUSE,    
} EM_RECORD_BACKUP_STATE;
typedef struct tagNET_RECORD_BACKUP_RESTORE_TASK_INFO
{
    UINT nTaskID;                                  
    char byReserved[4];                            
    char szDevice[128];                            
    int nChannelID;                                
    int nRemoteChannel;                            
    NET_TIME stuStartTime;                         
    NET_TIME stuEndTime;                           
    double dbLength;                               
    EM_RECORD_BACKUP_STREAM_TYPE emStreamType[32]; 
    int nStreamTypeNums;                           
    EM_RECORD_BACKUP_STATE emState;                
    NET_RECORD_BACKUP_PROGRESS stuProgress;        
    EM_RECORD_BACKUP_FAIL_REASON emFailReason;     
    char szReserved[252];                          
} NET_RECORD_BACKUP_RESTORE_TASK_INFO;
typedef struct tagNET_IN_GET_RECORD_BACKUP_RESTORE_TASK_INFO_OFFLINE
{
    DWORD dwSize;
} NET_IN_GET_RECORD_BACKUP_RESTORE_TASK_INFO_OFFLINE;
typedef struct tagNET_OUT_GET_RECORD_BACKUP_RESTORE_TASK_INFO_OFFLINE
{
    DWORD dwSize;
    int nMaxCount;                               
    int nReturnCount;                            
    char byReserved[4];                          
    NET_RECORD_BACKUP_RESTORE_TASK_INFO* pTasks; 
} NET_OUT_GET_RECORD_BACKUP_RESTORE_TASK_INFO_OFFLINE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRecordBackupRestoreTaskInfoOffline(LLONG lRestoreID, const NET_IN_GET_RECORD_BACKUP_RESTORE_TASK_INFO_OFFLINE* pInParam, NET_OUT_GET_RECORD_BACKUP_RESTORE_TASK_INFO_OFFLINE* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEncodePlan(LLONG lLoginID, const DH_IN_GET_ENCODE_PLAN* pInParam, DH_OUT_GET_ENCODE_PLAN* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEncodePlanByResolution(LLONG lLoginID, const NET_IN_GET_ENCODEPLANE_BY_RESOLUTION* pInParam, NET_OUT_GET_ENCODEPLANE_BY_RESOLUTION* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindRecord(LLONG lLoginID, NET_IN_FIND_RECORD_PARAM* pInParam, NET_OUT_FIND_RECORD_PARAM* pOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindNextRecord(NET_IN_FIND_NEXT_RECORD_PARAM* pInParam, NET_OUT_FIND_NEXT_RECORD_PARAM* pOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRecordCount(NET_IN_QUEYT_RECORD_COUNT_PARAM* pInParam, NET_OUT_QUEYT_RECORD_COUNT_PARAM* pOutParam, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindRecordClose(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPTZStatusProc(LLONG lLoginID, NET_IN_PTZ_STATUS_PROC* pstuInPtzStatusProc, NET_OUT_PTZ_STATUS_PROC* pstuOutPtzStatusProc, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPTZStatusProc(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachViewRangeState(LLONG lLoginID, NET_IN_VIEW_RANGE_STATE* pstuInViewRange, NET_OUT_VIEW_RANGE_STATE* pstuOutViewRange, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachViewRangeState(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachWeatherInfo(LLONG lLoginID, NET_IN_WEATHER_INFO* pstuInParam, NET_OUT_WEATHER_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachWeatherInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetViewRangeByObject(LLONG lLoginID, NET_IN_SET_VIEW_RANGE_BY_OBJECT* pInstuParam, NET_OUT_SET_VIEW_RANGE_BY_OBJECT* pstuOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetViewRangeByGPS(LLONG lLoginID, NET_IN_SET_VIEW_RANGE_BY_GPS* pInstuParam, NET_OUT_SET_VIEW_RANGE_BY_GPS* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ScenicSpotGetPointInfos(LLONG lLoginID, NET_IN_SCENICSPOT_GETPOINTINFOS_INFO* pInstuParam, NET_OUT_SCENICSPOT_GETPOINTINFOS_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ScenicSpotSetPointInfo(LLONG lLoginID, NET_IN_SCENICSPOT_SETPOINTINFO_INFO* pInstuParam, NET_OUT_SCENICSPOT_SETPOINTINFO_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ScenicSpotGetCaps(LLONG lLoginID, const NET_IN_SCENICSPOT_GETCAPS_INFO* pInstuParam, NET_OUT_SCENICSPOT_GETCAPS_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ScenicSpotTurnToPoint(LLONG lLoginID, const NET_IN_SCENICSPOT_TURNTOPOINT_INFO* pInParam, NET_OUT_SCENICSPOT_TURNTOPOINT_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetBackupSources(LLONG lLoginID, const NET_IN_SETBACKUP_SOURCES_INFO* pInstuParam, NET_OUT_SETBACKUP_SOURCES_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBusState(LLONG lLoginID, NET_IN_BUS_ATTACH* pstuInBus, NET_OUT_BUS_ATTACH* pstuOutBus, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBusState(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachAnalogAlarmData(LLONG lLoginID, const NET_IN_ANALOGALARM_DATA* pInParam, NET_OUT_ANALOGALARM_DATA* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachAnalogAlarmData(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRecordUpdater(LLONG lLoginID, const NET_IN_RECORDUPDATER_DATA* pInParam, NET_OUT_RECORDUPDATER_DATA* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRecordUpdater(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_LogOpen(LOG_SET_PRINT_INFO* pstLogPrintInfo);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_LogClose();
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryLogEx(LLONG lLoginID, DH_LOG_QUERY_TYPE logType, char* pLogBuffer, int maxlen, int* nLogBufferlen, void* reserved, int waittime = 3000);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartQueryLog(LLONG lLoginID, const NET_IN_START_QUERYLOG* pInParam, NET_OUT_START_QUERYLOG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryNextLog(LLONG lLogID, NET_IN_QUERYNEXTLOG* pInParam, NET_OUT_QUERYNEXTLOG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopQueryLog(LLONG lLogID);
CLIENT_NET_API LONG CALL_METHOD CLIENT_ControlConnectServer(LLONG lLoginID, char* RegServerIP, WORD RegServerPort, int TimeOut = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlRegisterServer(LLONG lLoginID, LONG ConnectionID, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlDisconnectRegServer(LLONG lLoginID, LONG ConnectionID);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryControlRegServerInfo(LLONG lLoginID, LPDEV_SERVER_AUTOREGISTER lpRegServerInfo, int waittime = 2000);
typedef struct tagNET_IN_REGISTER_INFO
{
    DWORD dwSize;                             
    char szRegServerIP[DH_MAX_IPADDR_LEN_EX]; 
    int nRegServerPort;                       
} NET_IN_REGISTER_INFO;
typedef struct tagNET_OUT_REGISTER_INFO
{
    DWORD dwSize; 
} NET_OUT_REGISTER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlRegisterOtherServer(LLONG lLoginID, NET_IN_REGISTER_INFO* pInParam, NET_OUT_REGISTER_INFO* pOutParam, int waittime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_FileTransmit(LLONG lLoginID, int nTransType, char* szInBuf, int nInBufLen, fTransFileCallBack cbTransFile, LDWORD dwUserData, int waittime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WatermarkVerifyForPicture(char* szFilePath, int* nResult, void* pReserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MultiRealPlay(LLONG lLoginID, DHDEV_IN_MULTIPLAY_PARAM* pInBuf, int nInBufLen, DHDEV_OUT_MULTIPLAY_PARAM* pOutBuf, int nOutBufLen, int* pRetLen);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopMultiRealPlay(LLONG* lRealHandles, int nNumOfHandles);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlaybackYUVCallBack(LLONG lPlayHandle, fYUVDataCallBack cYUVData, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNewDevConfigForWeb(LLONG lLoginID, char* szCommand, int nChannelID, char* szOutBuffer, DWORD dwOutBufferSize, int* error, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetNewDevConfigForWeb(LLONG lLoginID, char* szCommand, int nChannelID, char* szInBuffer, DWORD dwInBufferSize, int* error, int* restart, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayMethod(LLONG lRealHandle, int nStartTime, int nSlowTime, int nFastTime, int nFailedTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloseRegConnect(LLONG lHandle, char* pIp, WORD wPort, void* pParam);
typedef struct tagNET_IN_PLAYBACK_BYFILE_PROXY
{
    DWORD dwSize;
    LPNET_RECORDFILE_INFO lpRecordFile;  
    HWND hWnd;                           
    fDownLoadPosCallBack cbDownLoadPos;  
    LDWORD dwPosUser;                    
    fDataCallBack fDownLoadDataCallBack; 
    LDWORD dwDataUser;                   
    char szDstIP[DH_COMMON_STRING_128];  
} NET_IN_PLAYBACK_BYFILE_PROXY;
typedef struct tagNET_OUT_PLAYBACK_BYFILE_PROXY
{
    DWORD dwSize;
} NET_OUT_PLAYBACK_BYFILE_PROXY;
typedef struct tagNET_IN_PLAYBACK_BYTIME_PROXY
{
    DWORD dwSize;
    int nChannelID;                      
    LPNET_TIME lpStartTime;              
    LPNET_TIME lpStopTime;               
    HWND hWnd;                           
    fDownLoadPosCallBack cbDownLoadPos;  
    LDWORD dwPosUser;                    
    fDataCallBack fDownLoadDataCallBack; 
    LDWORD dwDataUser;                   
    char szDstIP[DH_COMMON_STRING_128];  
    BOOL bOnlySupportRealUTC;            
    NET_TIME stuStartTimeRealUTC;        
    NET_TIME stuEndTimeRealUTC;          
} NET_IN_PLAYBACK_BYTIME_PROXY;
typedef struct tagNET_OUT_PLAYBACK_BYTIME_PROXY
{
    DWORD dwSize;
} NET_OUT_PLAYBACK_BYTIME_PROXY;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByRecordFileProxy(LLONG lLoginID, NET_IN_PLAYBACK_BYFILE_PROXY* pInParam, NET_OUT_PLAYBACK_BYFILE_PROXY* pOutParam);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackByTimeProxy(LLONG lLoginID, NET_IN_PLAYBACK_BYTIME_PROXY* pInParam, NET_OUT_PLAYBACK_BYTIME_PROXY* pOutParam);
typedef enum tagEM_CASCADE_TYPE
{
    EM_CASCADE_TYPE_UNKNOWN = -1, 
    EM_CASCADE_TYPE_CHANNEL,      
} EM_CASCADE_TYPE;
typedef struct tagNET_CASCADE_CALL_INFO
{
    BOOL bCascadeCall;      
    EM_CASCADE_TYPE emType; 
    UINT nChannel;          
    BYTE bReserved[1020];   
} NET_CASCADE_CALL_INFO;
typedef enum tagEM_IMPORT_EXPORT_CFG_ENCRYPT_TYPE
{
    EM_IMPORT_EXPORT_CFG_ENCRYPT_NO,  
    EM_IMPORT_EXPORT_CFG_ENCRYPT_YES, 
} EM_IMPORT_EXPORT_CFG_ENCRYPT_TYPE;
typedef struct tagNET_IMPORT_CONFIG_EXTEND_PARAM
{
    DWORD dwSize;                                    
    NET_CASCADE_CALL_INFO stuCascadeCallInfo;        
    EM_IMPORT_EXPORT_CFG_ENCRYPT_TYPE emEncryptType; 
} NET_IMPORT_CONFIG_EXTEND_PARAM;
typedef struct tagNET_EXPORT_CONFIG_EXTEND_PARAM
{
    DWORD dwSize;                                    
    EM_IMPORT_EXPORT_CFG_ENCRYPT_TYPE emEncryptType; 
} NET_EXPORT_CONFIG_EXTEND_PARAM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ImportConfigFileJson(LLONG lLoginID, char* pSendBuf, int nSendBufLen, void* reserved = NULL, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ExportConfigFileJson(LLONG lLoginID, char* pOutBuffer, int maxlen, int* nRetlen, void* reserved = NULL, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSecurityKey(LLONG lPlayHandle, char* szKey, DWORD nKeyLen);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryRpcMethod(LLONG lLoginID, const char* pszMethod, BOOL* pResult, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPrivacyRecover(LLONG lPlayHandle, BOOL bRecover);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CheckBusLine(LLONG lLoginID, const NET_IN_CHECK_BUS_LINE* pstInParam, NET_OUT_CHECK_BUS_LINE* pstOutParam, int nWaitTime = 5000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DispatchBusLineInfo(LLONG lLoginID, const NET_IN_DISPATCH_BUS_LINE_INFO* pstInParam, NET_OUT_DISPATCH_BUS_LINE_INFO* pstOutParam, int nWaitTime = 5000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DispatchBusLineInfoEx(LLONG lLoginID, const NET_IN_DISPATCH_BUS_LINE_INFO_EX* pstInParam, NET_OUT_DISPATCH_BUS_LINE_INFO_EX* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DispatchBusHttpsServers(LLONG lLoginID, const NET_IN_DISPATCH_BUS_HTTPS_SERVERS_INFO* pstInParam, NET_OUT_DISPATCH_BUS_HTTPS_SERVERS_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BusSchedule(LLONG lLoginID, const NET_IN_BUS_SCHEDULE_INFO* pstInParam, NET_OUT_BUS_SCHEDULE_INFO* pstOutParam, int nWaitTime = 5000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DispatchWorkPlan(LLONG lLoginID, const NET_IN_BUS_DISPATCH_WORK_PLAN* pstInParam, NET_OUT_BUS_DISPATCH_WORK_PLAN* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DispatchDisplayInfo(LLONG lLoginID, const NET_IN_DISPATCH_DISPLAY_INFO* pstInParam, NET_OUT_DISPATCH_DISPLAY_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_WEATHERFORCAST_INFO
{
    int nHighTemperature;    
    int nLowTemperature;     
    int nCurrentTemperature; 
    char szWeatherState[64]; 
    int nWeatherCode;        
    BYTE byReserved[1024];   
} NET_WEATHERFORCAST_INFO;
typedef struct tagNET_IN_PUSH_WEATHERFORCAST
{
    DWORD dwSize;
    NET_WEATHERFORCAST_INFO stuWeatherInfo; 
} NET_IN_PUSH_WEATHERFORCAST;
typedef struct tagNET_OUT_PUSH_WEATHERFORCAST
{
    DWORD dwSize;
} NET_OUT_PUSH_WEATHERFORCAST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PushWeatherForecast(LLONG lLoginID, const NET_IN_PUSH_WEATHERFORCAST* pstInParam, NET_OUT_PUSH_WEATHERFORCAST* pstOutParam, int nWaitTime);
typedef enum tagNET_MISSION_FEEDBACK_TYPE
{
    NET_MISSION_FEEDBACK_NO = 0, 
    NET_MISSION_FEEDBACK_YES,    
} NET_MISSION_FEEDBACK_TYPE;
typedef enum tagNET_MISSION_MESSAGE_TYPE
{
    NET_MISSION_MESSAGE_TEXT = 0,                                          
    NET_MISSION_MESSAGE_AD,                                                
    NET_MISSION_MESSAGE_BROAD,                                             
    NET_MISSION_MESSAGE_DRIVER,                                            
    NET_MISSION_MESSAGE_DISPATCH,                                          
    NET_MISSION_MESSAGE_TRANSPARENT,                                       
    NET_MISSION_MESSAGE_URGENT,                                            
    NET_MISSION_MESSAGE_CALL = 7,                                          
    NET_MISSION_MESSAGE_GENERAL_ALARM,                                     
    NET_MISSION_MESSAGE_ACCESS_ONE_KEY_ALARM,                              
    NET_MISSION_MESSAGE_ABNORMAL_HUMAN_BODY_TEMPERATURE_MEASUREMENT_ALARM, 
    NET_MISSION_MESSAGE_NO_TEMPERATURE_MEASUREMENT_ALARM,                  
    NET_MISSION_MESSAGE_ABNORMAL_BREATH,                                   
    NET_MISSION_MESSAGE_ABNORMAL_HEARTBEAT,                                
    NET_MISSION_MESSAGE_ABNORMAL_GET_OUT_BED,                              
    NET_MISSION_MESSAGE_ABNORMAL_PEOPLE_NUMBER,                            
    NET_MISSION_MESSAGE_FALL = 16,                                         
    NET_MISSION_MESSAGE_DRESSING_CHANGE_REQUEST,                           
    NET_MISSION_MESSAGE_REQUEST_SUPPORT,                                   
    NET_MISSION_MESSAGE_NURSING_REQUEST,                                   
    NET_MISSION_MESSAGE_DOOR_LIGHT_CONTROL,                                
    NET_MISSION_MESSAGE_HANDLE_DISCONNECTED_ALARM,                         
    NET_MISSION_MESSAGE_MAX,
} NET_MISSION_MESSAGE_TYPE;
typedef struct tagNET_HOSPITAL_ALARM_DATA
{
    char szRoomNumber[16]; 
    char szBedNumber[8];   
    char szDeviceCode[64]; 
    UINT nUTC;             
    char szCallNumber[32]; 
    int nLightMode;        
    char szReserved[152];  
} NET_HOSPITAL_ALARM_DATA;
typedef struct tagNET_IN_ADD_MISSION
{
    DWORD dwSize;
    char szTitle[DH_COMMON_STRING_256];            
    char szMissionID[DH_COMMON_STRING_256];        
    char szComment[DH_COMMON_STRING_256];          
    NET_MISSION_FEEDBACK_TYPE emFeedBack;          
    NET_MISSION_MESSAGE_TYPE emMessageType;        
    BOOL bComment;                                 
    char szCommentEx[DH_COMMON_STRING_2048];       
    int nChannel[DH_MAX_CHANNEL_COUNT];            
    int nDuration;                                 
    int nCount;                                    
    int nHospitalAlarmsCount;                      
    NET_HOSPITAL_ALARM_DATA stuHospitalAlarms[32]; 
} NET_IN_ADD_MISSION;
typedef struct tagNET_OUT_ADD_MISSION
{
    DWORD dwSize;
} NET_OUT_ADD_MISSION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddMission(LLONG lLoginID, const NET_IN_ADD_MISSION* pstInParam, NET_OUT_ADD_MISSION* pstOutParam, int nWaitTime = 3000);
typedef struct tagNET_IN_PARKING_CONTROL_START_FIND_PARAM
{
    DWORD dwSize;                         
    BOOL bSearchCount;                    
    DWORD dwSearchCount;                  
    BOOL bBegin;                          
    NET_TIME stuBegin;                    
    BOOL bEnd;                            
    NET_TIME stuEnd;                      
    BOOL bCardType;                       
    NET_ECK_IC_CARD_USER_TYPE emCardType; 
    BOOL bFlag;                           
    NET_ECK_CAR_PASS_FLAG emFlag;         
} NET_IN_PARKING_CONTROL_START_FIND_PARAM;
typedef struct tagNET_OUT_PARKING_CONTROL_START_FIND_PARAM
{
    DWORD dwSize;       
    DWORD dwTotalCount; 
} NET_OUT_PARKING_CONTROL_START_FIND_PARAM;
typedef struct tagNET_IN_PARKING_CONTROL_DO_FIND_PARAM
{
    DWORD dwSize;      
    DWORD dwFileCount; 
} NET_IN_PARKING_CONTROL_DO_FIND_PARAM;
typedef struct tagNET_CAR_PASS_ITEM
{
    DWORD dwSize;
    NET_TIME stuTime;                     
    DWORD dwCardNo;                       
    NET_ECK_IC_CARD_USER_TYPE emCardType; 
    NET_ECK_CAR_PASS_FLAG emFlag;         
} NET_CAR_PASS_ITEM;
typedef struct tagNET_OUT_PARKING_CONTROL_DO_FIND_PARAM
{
    DWORD dwSize;                      
    NET_CAR_PASS_ITEM* pstuRecordList; 
    int nMaxRecordNum;                 
    int nRetRecordNum;                 
} NET_OUT_PARKING_CONTROL_DO_FIND_PARAM;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ParkingControlStartFind(LLONG lLoginID, NET_IN_PARKING_CONTROL_START_FIND_PARAM* pInParam, NET_OUT_PARKING_CONTROL_START_FIND_PARAM* pOutParam, int waittime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ParkingControlDoFind(LLONG lFindeHandle, NET_IN_PARKING_CONTROL_DO_FIND_PARAM* pInParam, NET_OUT_PARKING_CONTROL_DO_FIND_PARAM* pOutParam, int waittime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ParkingControlStopFind(LLONG lFindHandle);
typedef void(CALLBACK* fParkingControlRecordCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_CAR_PASS_ITEM* pInfo, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_PARKING_CONTROL_PARAM
{
    DWORD dwSize;
    fParkingControlRecordCallBack cbCallBack; 
    LDWORD dwUser;                            
} NET_IN_PARKING_CONTROL_PARAM;
typedef struct tagNET_OUT_PARKING_CONTROL_PARAM
{
    DWORD dwSize;
} NET_OUT_PARKING_CONTROL_PARAM;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ParkingControlAttachRecord(LLONG lLoginID, const NET_IN_PARKING_CONTROL_PARAM* pInParam, NET_OUT_PARKING_CONTROL_PARAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ParkingControlDetachRecord(LLONG lAttachHandle);
typedef enum tagNET_CAR_DETECTOR_STATE
{
    NET_CAR_DETECTOR_STATE_UNKNOWN = -1,
    NET_CAR_DETECTOR_STATE_OFFLINE = 0, 
    NET_CAR_DETECTOR_STATE_ONLINE,      
    NET_CAR_DETECTOR_STATE_LOOPOFFLINE, 
} NET_CAR_DETECTOR_STATE;
typedef enum tagNET_AUXILIARY_DEV_STATE
{
    NET_AUXILIARY_DEV_STATE_UNKNOWN = -1,
    NET_AUXILIARY_DEV_STATE_OFFLINE = 0, 
    NET_AUXILIARY_DEV_STATE_ONLINE,      
} NET_AUXILIARY_DEV_STATE;
typedef enum tagNET_IC_CARD_STATUS
{
    NET_IC_CARD_STATUS_UNKNOWN = -1,
    NET_IC_CARD_STATUS_NORMAL = 0, 
    NET_IC_CARD_STATUS_NOCARD,     
    NET_IC_CARD_STATUS_LOWCARD,    
    NET_IC_CARD_STATUS_FULLCARDS,  
} NET_IC_CARD_STATUS;
typedef enum tagNET_AUXILIARY_WORK_MODE
{
    NET_AUXILIARY_WORK_MODE_UNKNOWN = 0,
    NET_AUXILIARY_WORK_MODE_OFFLINE, 
    NET_AUXILIARY_WORK_MODE_ONLINE,  
} NET_AUXILIARY_WORK_MODE;
typedef struct tagALARM_AUXILIARY_DEV_STATE
{
    DWORD dwSize;
    NET_CAR_DETECTOR_STATE emDetector;       
    NET_AUXILIARY_DEV_STATE emLed;           
    NET_AUXILIARY_DEV_STATE emICDetectBoard; 
    NET_AUXILIARY_DEV_STATE emICSenderBoard; 
    NET_IC_CARD_STATUS emICCardStatus;       
    NET_AUXILIARY_WORK_MODE emWorkMode;      
} ALARM_AUXILIARY_DEV_STATE;
typedef enum tagNET_PARKING_CARD_TYPE
{
    NET_PARKING_CARD_TYPE_UNKNOWN,
    NET_PARKING_CARD_TYPE_SEND,   
    NET_PARKING_CARD_TYPE_DETECT, 
} NET_PARKING_CARD_TYPE;
typedef struct tagALARM_PARKING_CARD
{
    DWORD dwSize;
    NET_PARKING_CARD_TYPE emType;      
    DWORD dwCardNo;                    
    char szPlate[DH_COMMON_STRING_16]; 
} ALARM_PARKING_CARD;
typedef enum tagEM_ALARM_TRANSMIT_DEV_SRC_TYPE
{
    EM_ALARM_TRANSMIT_DEV_SRC_TYPE_UNKNOWN,   
    EM_ALARM_TRANSMIT_DEV_SRC_TYPE_DIGIT,     
    EM_ALARM_TRANSMIT_DEV_SRC_TYPE_ANALOG,    
    EM_ALARM_TRANSMIT_DEV_SRC_TYPE_SMARTLOCK, 
} EM_ALARM_TRANSMIT_DEV_SRC_TYPE;
typedef enum tagEM_ALARM_TRANSMIT_ALARM_TYPE
{
    EM_ALARM_TRANSMIT_ALARM_TYPE_UNKNOWN,        
    EM_ALARM_TRANSMIT_ALARM_TYPE_PREVENTREMOVE,  
    EM_ALARM_TRANSMIT_ALARM_TYPE_LOWERPOWER,     
    EM_ALARM_TRANSMIT_ALARM_TYPE_KEY,            
    EM_ALARM_TRANSMIT_ALARM_TYPE_DURESS,         
    EM_ALARM_TRANSMIT_ALARM_TYPE_BATTERYLOST,    
    EM_ALARM_TRANSMIT_ALARM_TYPE_PSTN_BREAKLINE, 
    EM_ALARM_TRANSMIT_ALARM_TYPE_EMERGENCY_HELP, 
    EM_ALARM_TRANSMIT_ALARM_TYPE_ALARMIN,        
} EM_ALARM_TRANSMIT_ALARM_TYPE;
typedef struct tagNET_LOWERPOWER_INFO
{
    int nPercent;         
    char szReserved[128]; 
} NET_LOWERPOWER_INFO;
typedef struct tagNET_ALARMIN_INFO
{
    int nChannel;         
    char szReserved[128]; 
} NET_ALARMIN_INFO;
typedef struct tagNET_SENSE_VALUE_INFO
{
    double dValue;        
    char szUnit[32];      
    char szReserved[128]; 
} NET_SENSE_VALUE_INFO;
typedef struct tagNET_CLOUD_INFO
{
    int nVideoLinkChannel; 
    char szReserved[60];   
} NET_CLOUD_INFO;
typedef struct tagNET_PROFILE_ALARM_INFO
{
    NET_LOWERPOWER_INFO stuLowerPower;  
    NET_ALARMIN_INFO stuAlarmIn;        
    NET_SENSE_VALUE_INFO stuSenseValue; 
    NET_CLOUD_INFO stuCloudInfo;        
    char szReserved[64];                
} NET_PROFILE_ALARM_INFO;
typedef struct tagALARM_PROFILE_ALARM_TRANSMIT_INFO
{
    DWORD dwSize;
    int nChannelID;                              
    int nAction;                                 
    NET_TIME stuTime;                            
    NET_SENSE_METHOD emSenseMethod;              
    char szUserID[DH_COMMON_STRING_128];         
    EM_ALARM_TRANSMIT_DEV_SRC_TYPE emDevSrcType; 
    EM_ALARM_TRANSMIT_ALARM_TYPE emAlarmType;    
    BOOL bRealUTC;                               
    NET_TIME_EX RealUTC;                         
    char szSN[32];                               
    char szSnapURL[128];                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;        
    NET_PROFILE_ALARM_INFO stuAlarmInfo;         
    char szResvered[1024];                       
} ALARM_PROFILE_ALARM_TRANSMIT_INFO;
typedef struct tagDEV_EVENT_PROFILE_ALARM_TRANSMIT_INFO
{
    int nChannelID;                              
    int nEventID;                                
    char szName[128];                            
    double PTS;                                  
    int nAction;                                 
    NET_TIME_EX stuTime;                         
    NET_SENSE_METHOD emSenseMethod;              
    EM_ALARM_TRANSMIT_DEV_SRC_TYPE emDevSrcType; 
    char szUserID[32];                           
    EM_ALARM_TRANSMIT_ALARM_TYPE emAlarmType;    
    BOOL bRealUTC;                               
    NET_TIME_EX RealUTC;                         
    NET_PROFILE_ALARM_INFO stuAlarmInfo;         
    char szSN[32];                               
    char szSnapURL[128];                         
    UINT nAlarmLevel;                            
    char szReserved[246];                        
} DEV_EVENT_PROFILE_ALARM_TRANSMIT_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SCADAAttachInfo(LLONG lLoginID, const NET_IN_SCADA_ATTACH_INFO* pInParam, NET_OUT_SCADA_ATTACH_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SCADADetachInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SCADAGetThreshold(LLONG lLoginID, const NET_IN_SCADA_GET_THRESHOLD* pInParam, NET_OUT_SCADA_GET_THRESHOLD* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SCADASetThreshold(LLONG lLoginID, const NET_IN_SCADA_SET_THRESHOLD* pInParam, NET_OUT_SCADA_SET_THRESHOLD* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindSCADA(LLONG lLoginID, const NET_IN_SCADA_START_FIND* pInParam, NET_OUT_SCADA_START_FIND* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindSCADA(LLONG lFindHandle, const NET_IN_SCADA_DO_FIND* pInParam, NET_OUT_SCADA_DO_FIND* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindSCADA(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SCADAAlarmAttachInfo(LLONG lLoginID, const NET_IN_SCADA_ALARM_ATTACH_INFO* pInParam, NET_OUT_SCADA_ALARM_ATTACH_INFO* pOutParam, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SCADAAlarmDetachInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SCADASetInfo(LLONG lLoginID, const NET_IN_SCADA_POINT_SET_INFO_LIST* pInParam, NET_OUT_SCADA_POINT_SET_INFO_LIST* pOutParam, int nWaitTime = 3000);
typedef struct tagNET_GET_CONDITION_INFO
{
    char szDeviceID[32];  
    BOOL bIsSendID;       
    char szID[256][256];  
    int nIDNum;           
    BYTE byReserved[256]; 
} NET_GET_CONDITION_INFO;
typedef struct tagNET_IN_SCADA_GET_ATTRIBUTE_INFO
{
    DWORD dwSize;                        
    NET_GET_CONDITION_INFO stuCondition; 
} NET_IN_SCADA_GET_ATTRIBUTE_INFO;
typedef enum tagEM_ATTRIBUTE_STATUS
{
    EM_ATTRIBUTE_STATUS_UNKNOWN = -1,    
    EM_ATTRIBUTE_STATUS_NORMAL,          
    EM_ATTRIBUTE_STATUS_LEVEL_1_ALARM,   
    EM_ATTRIBUTE_STATUS_LEVEL_2_ALARM,   
    EM_ATTRIBUTE_STATUS_LEVEL_3_ALARM,   
    EM_ATTRIBUTE_STATUS_LEVEL_4_ALARM,   
    EM_ATTRIBUTE_STATUS_OPERATION_EVENT, 
    EM_ATTRIBUTE_STATUS_INVALID_DATA,    
} EM_ATTRIBUTE_STATUS;
typedef struct tagNET_DISPLAY_OPTIONS_INFO
{
    BOOL bIsSwitchDisplayed;     
    BOOL bIsScrollDisplaySwitch; 
    BYTE byReserved[120];        
} NET_DISPLAY_OPTIONS_INFO;
typedef struct tagNET_ATTRIBUTE_INFO
{
    char szSignalName[128];                     
    char szUnit[20];                            
    EM_NET_SCADA_POINT_TYPE emPointType;        
    char szID[32];                              
    UINT nStartDelay;                           
    UINT nStopDelay;                            
    UINT nPeriod;                               
    float fThreshold;                           
    float fAlarmWaveVal;                        
    float fAbsoluteVal;                         
    float fRelativeVal;                         
    EM_ATTRIBUTE_STATUS emStatus;               
    NET_DISPLAY_OPTIONS_INFO stuDisplayOptions; 
    BOOL bIsValid;                              
    UINT nDelay;                                
    char szDescription[120];                    
    BYTE byReserved[136];                       
} NET_ATTRIBUTE_INFO;
typedef struct tagNET_OUT_SCADA_GET_ATTRIBUTE_INFO
{
    DWORD dwSize;                          
    UINT nMaxAttributeInfoNum;             
    NET_ATTRIBUTE_INFO* pstuAttributeInfo; 
    UINT nRetAttributeInfoNum;             
} NET_OUT_SCADA_GET_ATTRIBUTE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SCADAGetAttributeInfo(LLONG lLoginID, const NET_IN_SCADA_GET_ATTRIBUTE_INFO* pstInParam, NET_OUT_SCADA_GET_ATTRIBUTE_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachLowRateWPAN(LLONG lLoginID, const NET_IN_ATTACH_LOWRATEWPAN* pstInParam, NET_OUT_ATTACH_LOWRATEWPAN* pstOutParam, int nWaitTime = 3000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachLowRateWPAN(LLONG lAttachHandle);
CLIENT_NET_API LONG CALL_METHOD CLIENT_GetRealPlayPort(LLONG lRealPlayHandle);
CLIENT_NET_API LONG CALL_METHOD CLIENT_GetPlayBackPort(LLONG lPlayBackHandle);
typedef enum tagNET_ECK_PARK_STATE
{
    NET_ECK_PARK_STATE_UNKOWN,
    NET_ECK_PARK_STATE_PARK,   
    NET_ECK_PARK_STATE_NOPARK, 
} NET_ECK_PARK_STATE;
typedef struct tagNET_PARK_INFO_ITEM
{
    DWORD dwSize;
    char szParkNo[DH_COMMON_STRING_32]; 
    NET_ECK_PARK_STATE emState;         
    DWORD dwScreenIndex;                
    DWORD dwFreeParkNum;                
} NET_PARK_INFO_ITEM;
typedef void(CALLBACK* fParkInfoCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_PARK_INFO_ITEM* pInfo, int nBufLen, LDWORD dwUser);
typedef enum tagNET_ECK_PARK_DETECTOR_TYPE
{
    NET_ECK_PARK_DETECTOR_TYPE_SONIC,  
    NET_ECK_PARK_DETECTOR_TYPE_CAMERA, 
    NET_ECK_PARK_DETECTOR_TYPE_ALL = 2,
} NET_ECK_PARK_DETECTOR_TYPE;
typedef struct tagNET_PARK_INFO_FILTER
{
    DWORD dwSize;
    DWORD dwNum;                                                       
    NET_ECK_PARK_DETECTOR_TYPE emType[NET_ECK_PARK_DETECTOR_TYPE_ALL]; 
} NET_PARK_INFO_FILTER;
typedef struct tagNET_IN_PARK_INFO_PARAM
{
    DWORD dwSize;
    NET_PARK_INFO_FILTER stuFilter;
    fParkInfoCallBack cbCallBack; 
    LDWORD dwUser;                
} NET_IN_PARK_INFO_PARAM;
typedef struct tagNET_OUT_PARK_INFO_PARAM
{
    DWORD dwSize;
} NET_OUT_PARK_INFO_PARAM;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ParkingControlAttachParkInfo(LLONG lLoginID, const NET_IN_PARK_INFO_PARAM* pInParam, NET_OUT_PARK_INFO_PARAM* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ParkingControlDetachParkInfo(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVTPCallState(LLONG lLoginID, const NET_IN_VTP_CALL_STATE_ATTACH* pInParam, NET_OUT_VTP_CALL_STATE_ATTACH* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVTPCallState(LLONG lCallStateHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetMobileSubscribe(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY* pstuCfg, int* nError, int* nRestart, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelMobileSubscribe(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY_DEL* pstuIn, NET_OUT_DELETECFG* pstuOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMobileSubscribeCfg(LLONG lLoginID, NET_MOBILE_PUSH_NOTIFY_CFG* pstuCfg, int* nError, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetMobileSubscribeCfg(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY_CFG* pstuCfg, int* nError, int* nRestart, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelMobileSubscribeCfg(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY_CFG_DEL* pstuIn, NET_OUT_DELETECFG* pstuOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetOptimizeMode(EM_OPTIMIZE_TYPE emType, void* pParam);
typedef enum __EM_LOCAL_MODE
{
    EM_LOCAL_GDPR_SET_MODE = 100,      
    EM_LOCAL_PLAY_FLAG_MODE = 101,     
    EM_LOCAL_PLAYBACK_FLAG_MODE = 102, 
} EM_LOCAL_MODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetLocalMode(LLONG lLoginID, EM_LOCAL_MODE emType, void* pValue);
typedef enum tagEM_NET_WIDE_VIEW_CTRL
{
    EM_NET_WIDE_VIEW_CTRL_START,     
    EM_NET_WIDE_VIEW_CTRL_STOP,      
    EM_NET_WIDE_VIEW_CTRL_PROGRESS,  
    EM_NET_WIDE_VIEW_CTRL_IMAGEINFO, 
    EM_NET_WIDE_VIEW_CTRL_WV_COORD,  
    EM_NET_WIDE_VIEW_CTRL_PTZ_COORD, 
} EM_NET_WIDE_VIEW_CTRL;
typedef struct tagNET_IN_WIDE_VIEW_GENERATE_START
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_WIDE_VIEW_GENERATE_START;
typedef struct tagNET_OUT_WIDE_VIEW_GENERATE_START
{
    DWORD dwSize;
} NET_OUT_WIDE_VIEW_GENERATE_START;
typedef struct tagNET_IN_WIDE_VIEW_GENERATE_STOP
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_WIDE_VIEW_GENERATE_STOP;
typedef struct tagNET_OUT_WIDE_VIEW_GENERATE_STOP
{
    DWORD dwSize;
} NET_OUT_WIDE_VIEW_GENERATE_STOP;
typedef struct tagNET_IN_WIDE_VIEW_PROGRESS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_WIDE_VIEW_PROGRESS;
typedef struct tagNET_OUT_WIDE_VIEW_PROGRESS
{
    DWORD dwSize;
    int nProgress; 
} NET_OUT_WIDE_VIEW_PROGRESS;
typedef struct tagNET_IN_WIDE_VIEW_IMAGE
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_WIDE_VIEW_IMAGE;
typedef struct tagNET_WIDE_VIEW_IMAGE_INFO
{
    char szImageUrl[MAX_PATH]; 
} NET_WIDE_VIEW_IMAGE_INFO;
typedef struct tagNET_OUT_WIDE_VIEW_IMAGE
{
    DWORD dwSize;
    NET_WIDE_VIEW_IMAGE_INFO stuImageInfo; 
} NET_OUT_WIDE_VIEW_IMAGE;
#define NET_WIDE_VIEW_COORDINATES_MAX (64)
typedef struct tagNET_IN_WIDE_VIEW_WV
{
    DWORD dwSize;
    int nChannel;                                         
    int nNum;                                             
    PTZ_SPEED_UNIT stuPTZ[NET_WIDE_VIEW_COORDINATES_MAX]; 
} NET_IN_WIDE_VIEW_WV;
typedef struct tagNET_OUT_WIDE_VIEW_WV
{
    DWORD dwSize;
    NET_RECT stuRect[NET_WIDE_VIEW_COORDINATES_MAX]; 
} NET_OUT_WIDE_VIEW_WV;
typedef struct tagNET_IN_WIDE_VIEW_PTZ
{
    DWORD dwSize;
    int nChannel;                                    
    int nNum;                                        
    NET_RECT stuRect[NET_WIDE_VIEW_COORDINATES_MAX]; 
} NET_IN_WIDE_VIEW_PTZ;
typedef struct tagNET_OUT_WIDE_VIEW_PTZ
{
    DWORD dwSize;
    PTZ_SPEED_UNIT stuPTZ[NET_WIDE_VIEW_COORDINATES_MAX]; 
} NET_OUT_WIDE_VIEW_PTZ;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WideViewCtrl(LLONG lLoginID, EM_NET_WIDE_VIEW_CTRL emCtrlType, const void* pstuInParam, void* pstuOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetMarkFile(LLONG lLoginID, const NET_IN_SET_MARK_FILE* pInParam, NET_OUT_SET_MARK_FILE* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetMarkFileByTime(LLONG lLoginID, const NET_IN_SET_MARK_FILE_BY_TIME* pInParam, NET_OUT_SET_MARK_FILE_BY_TIME* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMarkInfo(LLONG lLoginID, const NET_IN_GET_MARK_INFO* pInParam, NET_OUT_GET_MARK_INFO* pOutParam, int nWaitTime = 1000);
typedef enum tagEM_NET_AUDIO_REC_STREAM
{
    EM_NET_AUDIO_REC_STREAM_UNKNOWN,
    EM_NET_AUDIO_REC_STREAM_MAIN,     
    EM_NET_AUDIO_REC_STREAM_EXTRA1,   
    EM_NET_AUDIO_REC_STREAM_EXTRA2,   
    EM_NET_AUDIO_REC_STREAM_EXTRA3,   
    EM_NET_AUDIO_REC_STREAM_TALKBACK, 
} EM_NET_AUDIO_REC_STREAM;
typedef struct tagNET_IN_AUDIO_REC_MNG_NAME
{
    DWORD dwSize;                     
    int nChannel;                     
    EM_NET_AUDIO_REC_STREAM emStream; 
} NET_IN_AUDIO_REC_MNG_NAME;
typedef struct tagNET_OUT_AUDIO_REC_MNG_NAME
{
    DWORD dwSize;              
    char szFileName[MAX_PATH]; 
} NET_OUT_AUDIO_REC_MNG_NAME;
typedef enum tagEM_NET_REC_EVENT
{
    EM_NET_REC_EVENT_UNKNOWN, 
    EM_NET_REC_EVENT_ALARM,   
} EM_NET_REC_EVENT;
typedef struct tagNET_IN_REC_MNG_CTRL_MPT300
{
    DWORD dwSize;            
    int nChannel;            
    EM_NET_REC_EVENT emType; 
    int nAction;             
} NET_IN_REC_MNG_CTRL_MPT300;
typedef struct tagNET_OUT_REC_MNG_CTRL_MPT300
{
    DWORD dwSize; 
} NET_OUT_REC_MNG_CTRL_MPT300;
typedef struct tagNET_IN_SNAP_MNG_SHOT
{
    DWORD dwSize; 
    int nChannel; 
    int nTime;    
} NET_IN_SNAP_MNG_SHOT;
typedef struct tagNET_OUT_SNAP_MNG_SHOT
{
    DWORD dwSize; 
} NET_OUT_SNAP_MNG_SHOT;
typedef struct tagNET_IN_LOG_MNG_CTRL
{
    DWORD dwSize; 
} NET_IN_LOG_MNG_CTRL;
typedef struct tagNET_OUT_LOG_MNG_CTRL
{
    DWORD dwSize; 
} NET_OUT_LOG_MNG_CTRL;
typedef struct tagNET_IN_TRANSMIT_DIRECTLY
{
    DWORD dwSize;                    
    char* szInBuffer;                
    DWORD dwInBufferSize;            
    NET_TRANSMIT_EXT_INFO stExtData; 
} NET_IN_TRANSMIT_DIRECTLY;
typedef struct tagNET_OUT_TRANSMIT_DIRECTLY
{
    DWORD dwSize;          
    char* szOutBuffer;     
    DWORD dwOutBufferSize; 
    DWORD dwRetBufferSize; 
} NET_OUT_TRANSMIT_DIRECTLY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClearRepeatEnter(LLONG lLoginID, const NET_IN_CLEAR_REPEAT_ENTER* pInParam, NET_OUT_CLEAR_REPEAT_ENTER* pOutParam, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetOperatorName(LLONG lLoginID, const NET_IN_GET_OPERATOR_NAME* pInParam, NET_OUT_GET_OPERATOR_NAME* pOutParam, int nWaitTime = 1000);
typedef enum tagEM_CONN_TYPE
{
    EM_CONN_TYPE_UNKNOWN, 
    EM_CONN_TYPE_NET,     
    EM_CONN_TYPE_RS232,   
    EM_CONN_TYPE_RS485,   
} EM_CONN_TYPE;
typedef enum tagEM_CONN_PROT
{
    EM_CONN_PROT_UNKNOWN, 
    EM_CONN_PROT_NONE,    
    EM_CONN_PROT_POS,     
} EM_CONN_PROT;
typedef enum tagEM_POS_STATUS
{
    EM_POS_STATUS_OTHER = -1,            
    EM_POS_STATUS_NO,                    
    EM_POS_STATUS_PROT_FORMAT,           
    EM_POS_STATUS_NET_ADDR_CONFLICT,     
    EM_POS_STATUS_RS232_ADDR_CONFLICT,   
    EM_POS_STATUS_RS485_ADDR_CONFLICT,   
    EM_POS_STATUS_LINK_CHANNEL_CONFLICT, 
    EM_POS_STATUS_NOT_EXIST,             
    EM_POS_STATUS_NUM_LIMIT,             
    EM_POS_STATUS_NAME_CONFLICT,         
} EM_POS_STATUS;
typedef struct tagNET_POS_NET_ATT
{
    char szSrcIp[DH_MAX_IPADDR_LEN_EX]; 
    int nSrcPort;                       
    char szDstIp[DH_MAX_IPADDR_LEN_EX]; 
    int nDstPort;                       
} NET_POS_NET_ATT;
typedef struct tagNET_POS_COM_ATT
{
    int nCommChannel;     
    int nAddress;         
    DH_COMM_PROP stuAttr; 
} NET_POS_COM_ATT;
typedef struct tagNET_POS_CUSTOM_PROT
{
    char szStartStr[DH_COMMON_STRING_32];      
    BOOL bAnyCharater;                         
    char szEndStr[DH_COMMON_STRING_32];        
    char szLineDelimiter[DH_COMMON_STRING_32]; 
    int nMoreLine;                             
    char szIgnoreStr[DH_COMMON_STRING_32];     
    BOOL bCaseSensitive;                       
    BYTE reserved[1024];                       
} NET_POS_CUSTOM_PROT;
typedef struct tagNET_MONITOR_TOUR
{
    BOOL bEnable;       
    int nChannels[256]; 
    int nChannelCount;  
    BYTE reserved[32];  
} NET_MONITOR_TOUR;
#define MAX_NUMBER_PTZLINK 256 
#define MAX_NUMBER_TOUR 32     
typedef struct tagNET_POS_EVENT_LINK
{
    DWORD dwSize;                                                
    DH_TSECT stuTimeSection[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
    BOOL bRecordEnable;                                          
    BOOL bRecordCloudEnable;                                     
    DWORD dwRecordMask[DH_MAX_CHANNUM];                          
    int nRecordLatch;                                            
    BOOL bAlarmOutEnable;                                        
    DWORD dwAlarmOutMask[DH_MAX_CHANNUM];                        
    int nAlarmOutLatch;                                          
    int nPtzLinkNum;                                             
    NET_PTZ_LINK stuPtzLink[MAX_NUMBER_PTZLINK];                 
    BOOL bPtzLinkEnable;                                         
    int nPtzLinkDelay;                                           
    BOOL bSnapshotEnable;                                        
    BOOL bSnapshotCloudEnable;                                   
    DWORD dwSnapshotMask[DH_MAX_CHANNUM];                        
    int nSnapshotPeriod;                                         
    int nSnapshotTimes;                                          
    BOOL bTipEnable;                                             
    BOOL bMailEnable;                                            
    BOOL bMessageEnable;                                         
    BOOL bBeepEnable;                                            
    BOOL bVoiceEnable;                                           
    DWORD dwVoiceMask[DH_MAX_CHANNUM];                           
    char szAudioFileName[MAX_PATH];                              
    int nPlayTimes;                                              
    int nDejitter;                                    
    BOOL bLogEnable;                                  
    int nMonitorTourNum;                              
    NET_MONITOR_TOUR stuMonitorTour[MAX_NUMBER_TOUR]; 
} NET_POS_EVENT_LINK;
typedef struct tagNET_POS_INFO
{
    BOOL bEnable;                  
    DWORD dwPosId;                 
    char szName[64];               
    EM_CONN_TYPE emConnType;       
    NET_POS_NET_ATT stuNetAtt;     
    NET_POS_COM_ATT stuComAtt;     
    EM_CONN_PROT emConnProt;       
    NET_POS_CUSTOM_PROT stuCustom; 
    int nTimeOut;                  
    int nLinkChannel[32];          
    int nLinkChannelNum;           
    int nPlayBackTime;             
    BOOL bPreviewBlend;  
    BYTE reserved[1020]; 
} NET_POS_INFO;
typedef struct tagNET_IN_POS_ADD
{
    DWORD dwSize;                       
    NET_POS_INFO stuPosInfo;            
    NET_POS_EVENT_LINK stuPosEventLink; 
} NET_IN_POS_ADD;
typedef struct tagNET_OUT_POS_ADD
{
    DWORD dwSize;           
    DWORD dwPosId;          
    EM_POS_STATUS emStatus; 
} NET_OUT_POS_ADD;
typedef struct tagNET_IN_POS_REMOVE
{
    DWORD dwSize;  
    DWORD dwPosId; 
} NET_IN_POS_REMOVE;
typedef struct tagNET_OUT_POS_REMOVE
{
    DWORD dwSize;           
    EM_POS_STATUS emStatus; 
} NET_OUT_POS_REMOVE;
typedef struct tagNET_IN_POS_REMOVE_MULTI
{
    DWORD dwSize;      
    DWORD dwPosId[16]; 
    int nPosNum;       
} NET_IN_POS_REMOVE_MULTI;
typedef struct tagNET_OUT_POS_REMOVE_MULTI
{
    DWORD dwSize;            
    EM_POS_STATUS emStatus;  
    DWORD dwPosIdFailed[16]; 
    int nPosNum;             
} NET_OUT_POS_REMOVE_MULTI;
typedef struct tagNET_POS_ALL_INFO
{
    DWORD dwSize;                         
    int nMaxNum;                          
    int nRetPosNum;                       
    NET_POS_INFO stuPos[256];             
    NET_POS_EVENT_LINK* pstuPosEventLink; 
} NET_POS_ALL_INFO;
typedef struct tagALARM_POS_MANAGE_INFO
{
    int nEventAction;                 
    int nType;                        
    DWORD dwPosId;                    
    char szName[DH_COMMON_STRING_64]; 
    int nLinkChannel[32];             
    int nLinkChannelNum;              
    EM_CONN_PROT emConnProt;          
    BYTE reserved[1024];              
} ALARM_POS_MANAGE_INFO;
typedef struct tagALARM_LOCK_BREAK_INFO
{
    int nDoor;           
    int nAction;         
    NET_TIME_EX UTC;     
    BYTE reserved[1024]; 
} ALARM_LOCK_BREAK_INFO;
typedef enum tagEM_POS_DATA_TYPE
{
    EM_POS_DATA_TYPE_UNKNOWN,      
    EM_POS_DATA_TYPE_STORE_INF0,   
    EM_POS_DATA_TYPE_PRODUCT_INFO, 
} EM_POS_DATA_TYPE;
typedef struct tagNET_STORE_INFO
{
    char szDealNum[MAX_DEAL_NUM_LEN];             
    char szNo[MAX_STORE_NO_LEN];                  
    char szName[MAX_STORE_NAME_LEN];              
    char szEmPloyeeID[MAX_STORE_EMPLOYEE_ID_LEN]; 
    unsigned int nSeviceType;                     
    unsigned int nAmount;                         
    BYTE byReserved[1024];                        
} NET_STORE_INFO;
typedef struct tagNET_PRODUCT_INFO
{
    char szDealNum[MAX_DEAL_NUM_LEN];          
    char szNo[MAX_PRODUCT_NO_LEN];             
    char szName[MAX_PRODUCT_NAME_LEN];         
    char szCategory[MAX_PRODUCT_CATEGORY_LEN]; 
    unsigned int nPrice;                       
    double dbQuantity;                         
    BYTE byReserved[1024];                     
} NET_PRODUCT_INFO;
typedef struct tagNET_POS_TRADE_INFO
{
    DWORD dwPosId;               
    NET_TIME stuTime;            
    BYTE* pbyComment;            
    DWORD dwCommentLen;          
    EM_POS_DATA_TYPE emDataType; 
    BOOL bEnd;                   
    void* pPosData;              
    char szOSDInfo[2048];        
    BYTE reserved[1024];         
} NET_POS_TRADE_INFO;
typedef void(CALLBACK* fPosTradeCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_POS_TRADE_INFO* pInfo, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_POS_TRADE_ATTACH
{
    DWORD dwSize;                  
    fPosTradeCallBack cbCallState; 
    LDWORD dwUser;                 
} NET_IN_POS_TRADE_ATTACH;
typedef struct tagNET_OUT_POS_TRADE_ATTACH
{
    DWORD dwSize; 
} NET_OUT_POS_TRADE_ATTACH;
typedef struct tagNET_IN_POS_GETCAPS
{
    DWORD dwSize;
} NET_IN_POS_GETCAPS;
typedef struct tagNET_OUT_POS_GETCAPS
{
    DWORD dwSize;
    EM_CONN_TYPE emConnType[10]; 
    int nConnTypeNum;            
    EM_CONN_PROT emConnProt[10]; 
    int nConnProtNum;            
    int nMaxPos;                 
    BOOL bSupportPosRecord;      
} NET_OUT_POS_GETCAPS;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPosTrade(LLONG lLoginID, const NET_IN_POS_TRADE_ATTACH* pInParam, NET_OUT_POS_TRADE_ATTACH* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPosTrade(LLONG lAttachHandle);
typedef struct tagNET_IN_USER_MNG_GETCAPS
{
    DWORD dwSize;
} NET_IN_USER_MNG_GETCAPS;
typedef struct tagNET_OUT_USER_MNG_GETCAPS
{
    DWORD dwSize;
    BOOL bAccountLimitation;                       
    BOOL bIndividualAccessFilter;                  
    DWORD dwMaxPageSize;                           
    unsigned int nMaxPwdLen;                       
    unsigned int nMinPwdLen;                       
    char szType[MAX_PWD_BASIC_CHARS_ARRAY_LEN];    
    char szCharList[MAX_PWD_SPEC_CHARS_ARRAY_LEN]; 
    int nCombine;                                  
} NET_OUT_USER_MNG_GETCAPS;
typedef struct tagNET_IN_EXTERNALSENSOR_CAPS
{
    DWORD dwSize;
} NET_IN_EXTERNALSENSOR_CAPS;
typedef struct tagNET_IN_GET_MASTERSLAVEGROUP_CAPS
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_GET_MASTERSLAVEGROUP_CAPS;
typedef enum tagEM_MASTERSLAVEGROUP_MODE
{
    EM_MASTERSLAVEGROUP_MODE_UNKNOWN,       
    EM_MASTERSLAVEGROUP_MODE_COMMANDER,     
    EM_MASTERSLAVEGROUP_MODE_PROPOSER,      
    EM_MASTERSLAVEGROUP_MODE_JUDGE,         
    EM_MASTERSLAVEGROUP_MODE_HAWKEYE,       
    EM_MASTERSLAVEGROUP_MODE_MULTISENSOR,   
    EM_MASTERSLAVEGROUP_MODE_GLOBALCAMERA,  
    EM_MASTERSLAVEGROUP_MODE_NEWCOMMANDER,  
    EM_MASTERSLAVEGROUP_MODE_NEWHAWEYE,     
    EM_MASTERSLAVEGROUP_MODE_GLOBALCAMERA2, 
    EM_MASTERSLAVEGROUP_MODE_CLOSEUP,       
} EM_MASTERSLAVEGROUP_MODE;
typedef enum tagEM_MASTERSLAVE_CALIBRATIONMODES
{
    EM_MASTERSLAVE_CALIBRATIONMODES_UNKNOWN, 
    EM_MASTERSLAVE_CALIBRATIONMODES_AUTO,    
    EM_MASTERSLAVE_CALIBRATIONMODES_MANUAL,  
} EM_MASTERSLAVE_CALIBRATIONMODES;
typedef enum tagEM_MASTERSLAVE_CALISCENCESPLIT
{
    EM_MASTERSLAVE_CALISCENCESPLIT_UNKNOWN,         
    EM_MASTERSLAVE_CALISCENCESPLIT_NOSPLIT,         
    EM_MASTERSLAVE_CALISCENCESPLIT_HORIZONTALSPLIT, 
} EM_MASTERSLAVE_CALISCENCESPLIT;
typedef enum tagEM_INTELLIGENT_SCHEME_SUPPORTMODE
{
    EM_INTELLIGENT_SCHEME_SUPPORTMODE_UNKNOWN,  
    EM_INTELLIGENT_SCHEME_SUPPORTMODE_LINK,     
    EM_INTELLIGENT_SCHEME_SUPPORTMODE_INDEPENT, 
    EM_INTELLIGENT_SCHEME_SUPPORTMODE_DEFAULT,  
} EM_INTELLIGENT_SCHEME_SUPPORTMODE;
typedef struct tagNET_MASTERSLAVE_TRACK
{
    BOOL bSupport;                                   
    int nMasterCount;                                
    int nMasterChn[16];                              
    int nSlaverCount;                                
    int nSlaverChn[16];                              
    EM_INTELLIGENT_SCHEME_SUPPORTMODE emSupportMode; 
    BYTE bReserved[508];                             
} NET_MASTERSLAVE_TRACK;
typedef struct tagNET_OUT_GET_MASTERSLAVEGROUP_CAPS
{
    DWORD dwSize;
    EM_MASTERSLAVEGROUP_MODE emRole;                       
    int nCalibrationModeCount;                             
    EM_MASTERSLAVE_CALIBRATIONMODES emCalibrationModes[4]; 
    int nCaliSceneCnt;                                     
    EM_MASTERSLAVE_CALISCENCESPLIT emCaliSceneSplit;       
    NET_MASTERSLAVE_TRACK stuMasterSlaveTrack;             
} NET_OUT_GET_MASTERSLAVEGROUP_CAPS;
typedef struct tagNET_IN_STORAGE_CAPS
{
    DWORD dwSize;
} NET_IN_STORAGE_CAPS;
typedef enum tagNET_EM_FORMAT_NEEDREBOOT
{
    EM_FORMAT_NEEDREBOOT_UNKNOWN,  
    EM_FORMAT_NEEDREBOOT_NOREBOOT, 
    EM_FORMAT_NEEDREBOOT_REBOOT    
} NET_EM_FORMAT_NEEDREBOOT;
typedef struct tagNET_OUT_STORAGE_CAPS
{
    DWORD dwSize;
    NET_EM_FORMAT_NEEDREBOOT emReboot; 
    BOOL bIsGeneralRecord;             
} NET_OUT_STORAGE_CAPS;
typedef enum tagEM_SENSOR_NERWORKING_MODE
{
    EM_SENSOR_NERWORKING_MODE_UNKNOWN, 
    EM_SENSOR_NETWORKING_MODE_RS485,   
    EM_SENSOR_NETWORKING_MODE_RFID,    
} EM_SENSOR_NERWORKING_MODE;
typedef struct tagNET_OUT_EXTERNALSENSOR_CAPS
{
    DWORD dwSize;
    BOOL bIsSupport;                            
    EM_SENSOR_NERWORKING_MODE emNetworkingMode; 
    int nChannel;                               
} NET_OUT_EXTERNALSENSOR_CAPS;
typedef enum tagEM_WIRELESS_CTRL_WORK_MODE
{
    EM_WIRELESS_CTRL_WORK_MODE_UNKNOWN, 
    EM_WIRELESS_CTRL_WORK_MODE_NORMAL,  
    EM_WIRELESS_CTRL_WORK_MODE_POLLING, 
} EM_WIRELESS_CTRL_WORK_MODE;
typedef struct tagALARM_REMOTE_CTRL_STATUS
{
    NET_TIME_EX UTC;                   
    DWORD dwID;                        
    char szName[32];                   
    char szUser[32];                   
    EM_WIRELESS_CTRL_WORK_MODE emMode; 
    BYTE reserved[1024];               
} ALARM_REMOTE_CTRL_STATUS;
typedef enum tagEM_PASSENGER_CARD_CHECK_TYPE
{
    EM_PASSENGER_CARD_CHECK_TYPE_UNKOWN = 0, 
    EM_PASSENGER_CARD_CHECK_TYPE_SIGNIN,     
    EM_PASSENGER_CARD_CHECK_TYPE_SIGNOUT,    
    EM_PASSENGER_CARD_CHECK_TYPE_NORMAL,     
} EM_PASSENGER_CARD_CHECK_TYPE;
typedef struct tagALARM_PASSENGER_CARD_CHECK
{
    BOOL bEventConfirm;                  
    char szCardNum[DH_MAX_BUSCARD_NUM];  
    NET_GPS_STATUS_INFO stuGPS;          
    NET_TIME_EX UTC;                     
    int nTime;                           
    EM_PASSENGER_CARD_CHECK_TYPE emType; 
    char szMac[DH_MAX_POS_MAC_NUM];      
    BYTE reserved[1012];                 
} ALARM_PASSENGER_CARD_CHECK;
typedef struct tagALARM_TIRED_DRIVE_CHECK_INFO
{
    BOOL bEventConfirm;         
    int nAction;                
    int nDriveTime;             
    NET_GPS_STATUS_INFO stuGPS; 
    NET_TIME_EX UTC;            
    int nTime;                  
    BYTE reserved[1024];        
} ALARM_TIRED_DRIVE_CHECK_INFO;
typedef struct tagALARM_SOUND
{
    int nChannel;        
    NET_TIME_EX UTC;     
    BYTE reserved[1024]; 
} ALARM_SOUND;
typedef struct tagNET_IN_SOUND_ALARM
{
    DWORD dwSize; 
} NET_IN_SOUND_ALARM;
typedef struct tagNET_OUT_SOUND_ALARM
{
    DWORD dwSize; 
} NET_OUT_SOUND_ALARM;
typedef struct tagNET_SILENCE_CHANNEL
{
    int nMatrix;                                    
    int nOutChannel;                                
    int nOutPutChannel[DH_MAX_AUDIO_MATRIX_OUTPUT]; 
    BYTE bReserved[512];                            
} NET_SILENCE_CHANNEL;
typedef struct tagNET_IN_AUDIO_MATRIX_SILENCE
{
    DWORD dwSize;                           
    BOOL bEnable;                           
    int nListCount;                         
    NET_SILENCE_CHANNEL* pstSlienceChannel; 
} NET_IN_AUDIO_MATRIX_SILENCE;
typedef struct tagNET_OUT_AUDIO_MATRIX_SILENCE
{
    DWORD dwSize; 
} NET_OUT_AUDIO_MATRIX_SILENCE;
typedef enum tagEM_TARGET_TYPE
{
    EM_TARGET_TYPE_CLIENT,     
    EM_TARGET_TYPE_FTP_SERVER, 
} EM_TARGET_TYPE;
typedef struct tagNET_MANUAL_UPLOAD_FILTER_INFO
{
    EM_TARGET_TYPE emTargetType;        
    char szClientIP[DH_MAX_IPADDR_LEN]; 
    NET_TIME stuStartTime;              
    NET_TIME stuEndTime;                
} NET_MANUAL_UPLOAD_FILTER_INFO;
typedef struct tagNET_IN_MANUAL_UPLOAD_PICTURE
{
    DWORD dwSize;                            
    NET_MANUAL_UPLOAD_FILTER_INFO stuFilter; 
} NET_IN_MANUAL_UPLOAD_PICTURE;
typedef struct tagNET_OUT_MANUAL_UPLOAD_PICTURE
{
    DWORD dwSize; 
} NET_OUT_MANUAL_UPLOAD_PICTURE;
typedef struct tagNET_IN_REBOOT_NET_DECODING_DEV
{
    DWORD dwSize;                         
    char szDeviceID[DH_COMMON_STRING_64]; 
    int nRebootDelayTime;                 
} NET_IN_REBOOT_NET_DECODING_DEV;
typedef struct tagNET_IN_SET_DEFENCEMODE
{
    DWORD dwSize;
    char szPassword[DH_COMMON_STRING_64]; 
    int nChannel;                         
    EM_DEFENCEMODE emDefenceMode;         
} NET_IN_SET_DEFENCEMODE;
typedef struct tagNET_OUT_SET_DEFENCEMODE
{
    DWORD dwSize;
} NET_OUT_SET_DEFENCEMODE;
typedef struct tagNET_IN_SET_SUBSYSTEMMODE
{
    DWORD dwSize;
    int nChannel;                         
    char szPassword[DH_COMMON_STRING_64]; 
    EM_DEFENCEMODE emDefenceMode;         
} NET_IN_SET_SUBSYSTEMMODE;
typedef struct tagNET_OUT_SET_SUBSYSTEMMODE
{
    DWORD dwSize;
    DWORD dwSourceNum;                
    int nSource[ARM_DISARM_ZONE_MAX]; 
    DWORD dwLinkNum;                  
    int nLink[ARM_DISARM_ZONE_MAX];   
} NET_OUT_SET_SUBSYSTEMMODE;
typedef struct tagNET_IN_GET_DEFENCEMODE
{
    DWORD dwSize;
    int nDefenceNum;               
    int anDefence[DH_MAX_ALARMIN]; 
} NET_IN_GET_DEFENCEMODE;
typedef struct tagNET_OUT_GET_DEFENCEMODE
{
    DWORD dwSize;
    int nDefenceNum;                               
    EM_DEFENCEMODE anDefenceState[DH_MAX_ALARMIN]; 
} NET_OUT_GET_DEFENCEMODE;
typedef struct tagNET_IN_GET_SUBSYSTEMMODE
{
    DWORD dwSize;
} NET_IN_GET_SUBSYSTEMMODE;
typedef struct tagNET_OUT_GET_SUBSYSTEMMODE
{
    DWORD dwSize;
    int nSubSystemNum;                                             
    EM_SUBSYSTEMMODE anSubSystemState[DH_MAX_ALARM_SUBSYSTEM_NUM]; 
} NET_OUT_GET_SUBSYSTEMMODE;
typedef struct tagNET_IN_PSTN_MANUALCHECK_STATE
{
    DWORD dwSize;
} NET_IN_PSTN_MANUALCHECK_STATE;
typedef struct tagNET_OUT_PSTN_MANUALCHECK_STATE
{
    DWORD dwSize;
    NET_THREE_STATUS_BOOL emState; 
} NET_OUT_PSTN_MANUALCHECK_STATE;
typedef struct tagNET_OUT_REBOOT_NET_DECODING_DEV
{
    DWORD dwSize; 
} NET_OUT_REBOOT_NET_DECODING_DEV;
typedef struct tagNET_IN_SET_IC_SENDER
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_IN_SET_IC_SENDER;
typedef struct tagNET_OUT_SET_IC_SENDER
{
    DWORD dwSize; 
} NET_OUT_SET_IC_SENDER;
typedef struct tagALARM_DVRIVE_AFTER_WORK
{
    BOOL bEventConfirm;         
    NET_GPS_STATUS_INFO stuGPS; 
    NET_TIME_EX stuUtc;         
    DWORD dwUtc;                
    BYTE reserved[1024];        
} ALARM_DVRIVE_AFTER_WORK;
typedef struct tagALARM_UPLOAD_PIC_FAILED_INFO
{
    int nAction;         
    BYTE reserved[1024]; 
} ALARM_UPLOAD_PIC_FAILED_INFO;
typedef struct tagNET_ROAD_LIST_INFO
{
    DWORD dwSize;               
    char szCity[32];            
    char szRoadList[2048][256]; 
    int nRoadNum;               
} NET_ROAD_LIST_INFO;
typedef enum tagEM_WIRELESS_DEV_TYPE
{
    EM_WIRELESS_DEV_TYPE_UNKNOWN, 
    EM_WIRELESS_DEV_TYPE_STATION, 
    EM_WIRELESS_DEV_TYPE_AP,      
} EM_WIRELESS_DEV_TYPE;
typedef enum tagEM_WIRELESS_AUTHENTICATION
{
    EM_WIRELESS_AUTHENTICATION_UNKNOWN,                 
    EM_WIRELESS_AUTHENTICATION_OPEN,                    
    EM_WIRELESS_AUTHENTICATION_SHARED,                  
    EM_WIRELESS_AUTHENTICATION_WPA,                     
    EM_WIRELESS_AUTHENTICATION_WPAPSK,                  
    EM_WIRELESS_AUTHENTICATION_WPA2,                    
    EM_WIRELESS_AUTHENTICATION_WPA2PSK,                 
    EM_WIRELESS_AUTHENTICATION_WPANONE,                 
    EM_WIRELESS_AUTHENTICATION_WPAPSK_WPA2PSK,          
    EM_WIRELESS_AUTHENTICATION_WPA_WPA2,                
    EM_WIRELESS_AUTHENTICATION_WPA_WPAPSK,              
    EM_WIRELESS_AUTHENTICATION_WPA2_WPA2PSK,            
    EM_WIRELESS_AUTHENTICATION_WPA_WPAPSK_WPA2_WPA2PSK, 
} EM_WIRELESS_AUTHENTICATION;
typedef enum tagEM_WIRELESS_DATA_ENCRYPT
{
    EM_WIRELESS_DATA_ENCRYPT_UNKNOWN,  
    EM_WIRELESS_DATA_ENCRYPT_NONE,     
    EM_WIRELESS_DATA_ENCRYPT_WEP,      
    EM_WIRELESS_DATA_ENCRYPT_TKIP,     
    EM_WIRELESS_DATA_ENCRYPT_AES,      
    EM_WIRELESS_DATA_ENCRYPT_TKIP_AES, 
} EM_WIRELESS_DATA_ENCRYPT;
typedef struct tagNET_WIFI_DEV_INFO
{
    char szMac[DH_MACADDR_LEN];                                              
    int nLinkQuality;                                                        
    NET_TIME_EX stuEnterTime;                                                
    NET_TIME_EX stuLeaveTime;                                                
    int nSearchedCount;                                                      
    char szSSID[24];                                                         
    NET_TIME_EX UTC;                                                         
    EM_WIRELESS_DEV_TYPE emDevType;                                          
    int nChannel;                                                            
    EM_WIRELESS_AUTHENTICATION emAuth;                                       
    EM_WIRELESS_DATA_ENCRYPT emEncrypt;                                      
    char szAPMac[DH_MACADDR_LEN];                                            
    int nAPChannel;                                                          
    char szAPSSID[24];                                                       
    EM_WIRELESS_DATA_ENCRYPT emAPEncrypt;                                    
    int nRssiQuality;                                                        
    char szManufacturer[MAX_MANUFACTURER_LEN];                               
    char szMacHistorySSID[MAX_MACHISTORY_SSID_NUM][MAX_MACHISTORY_SSID_LEN]; 
    unsigned int nRetMacHistorySSIDNum;                                      
    BYTE reserved[264];                                                      
} NET_WIFI_DEV_INFO;
typedef struct tagNET_WIFI_BASIC_INFO
{
    UINT nPeriodUTC;     
    int nDeviceSum;      
    int nCurDeviceCount; 
    BYTE reserved[500];  
} NET_WIFI_BASIC_INFO;
typedef enum tagNET_GPS_POSITION_RESULT
{
    NET_GPS_POSITION_RESULT_UNKNOWN = 0, 
    NET_GPS_POSITION_RESULT_FAILED = 1,  
    NET_GPS_POSITION_RESULT_SUCCEED = 2, 
} NET_GPS_POSITION_RESULT;
typedef struct tagNET_WIFI_GPS_INFO
{
    NET_GPS_POSITION_RESULT emPositioningResult; 
    unsigned int nLongitude;                     
    unsigned int nLatidude;                      
    unsigned int nSpeed;                         
    BYTE reserved[112];                          
} NET_WIFI_GPS_INFO;
typedef struct tagALARM_WIFI_SEARCH_INFO
{
    int nWifiNum;                        
    NET_WIFI_DEV_INFO stuWifi[1024];     
    int nChannel;                        
    NET_WIFI_BASIC_INFO stuWifiBasiInfo; 
    BOOL bGPSinfo;                       
    NET_WIFI_GPS_INFO stuWifiGPSInfo;    
    BYTE reserved[376];                  
} ALARM_WIFI_SEARCH_INFO;
typedef struct tagNET_WIFI_VIRTUALINFO
{
    NET_TIME_EX stuAccessTime;                       
    char szSrcMac[DH_MACADDR_LEN];                   
    char szDstMac[DH_MACADDR_LEN];                   
    int nProtocal;                                   
    char szUrl[DH_MAX_URL_LEN];                      
    char szDomain[MAX_VIRTUALINFO_DOMAIN_LEN];       
    char szTitle[MAX_VIRTUALINFO_TITLE_LEN];         
    char szUsrName[MAX_VIRTUALINFO_USERNAME_LEN];    
    char szPassWord[MAX_VIRTUALINFO_PASSWORD_LEN];   
    char szPhoneNum[MAX_VIRTUALINFO_PHONENUM_LEN];   
    char szImei[MAX_VIRTUALINFO_IMEI_LEN];           
    char szImsi[MAX_VIRTUALINFO_IMSI_LEN];           
    char szLatitude[MAX_VIRTUALINFO_LATITUDE_LEN];   
    char szLongitude[MAX_VIRTUALINFO_LONGITUDE_LEN]; 
    char szSrcIP[DH_MAX_IPADDR_LEN_EX];              
    char szDstIP[DH_MAX_IPADDR_LEN_EX];              
    UINT nSrcPort;                                   
    UINT nDstPort;                                   
    char szSiteNum[MAX_COMMON_STRING_16];            
    char szDevNum[MAX_COMMON_STRING_32];             
    char szUserID[MAX_COMMON_STRING_32];             
    char szIDFA[MAX_COMMON_STRING_64];               
    BYTE reserved[368];                              
} NET_WIFI_VIRTUALINFO;
typedef struct tagALARM_WIFI_VIRTUALINFO_SEARCH_INFO
{
    int nVirtualInfoNum;                                      
    NET_WIFI_VIRTUALINFO stuVirtualInfo[MAX_VIRTUALINFO_NUM]; 
    int nChannel;                                             
    BYTE reserved[512];                                       
} ALARM_WIFI_VIRTUALINFO_SEARCH_INFO;
typedef struct tagALARM_USER_LOCK_EVENT_INFO
{
    char szUser[DH_NEW_USER_NAME_LENGTH];  
    char szGroup[DH_NEW_USER_NAME_LENGTH]; 
    char szIP[DH_MAX_IPADDR_LEN_EX];       
    BYTE reserved[512];                    
} ALARM_USER_LOCK_EVENT_INFO;
typedef enum tagNET_WIRELESSDEV_LOWPOWER_TYPE
{
    NET_WIRELESSDEV_UNKNOWN = 0,    
    NET_WIRELESSDEV_CONTROL = 1,    
    NET_WIRELESSDEV_DEFENCE = 2,    
    NET_WIRELESSDEV_KEYBOARD = 3,   
    NET_WIRELESSDEV_MAGNETOMER = 4, 
    NET_WIRELESSDEV_ALARMBELL = 5,  
    NET_WIRELESSDEV_SMARTLOCK = 6,  
} NET_WIRELESSDEV_LOWPOWER_TYPE;
typedef struct tagALARM_WIRELESSDEV_LOWPOWER_INFO
{
    NET_THREE_STATUS_BOOL emResult;       
    NET_TIME stuTime;                     
    int nId;                              
    NET_WIRELESSDEV_LOWPOWER_TYPE emType; 
    char szSN[32];                        
    float fPercent;                       
    int nIndex;                           
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE reserved[984];                   
} ALARM_WIRELESSDEV_LOWPOWER_INFO;
typedef struct tagALARM_BUS_PAD_SHUTDOWN_INFO
{
    int nDelayTime;         
    BOOL bConfirm;          
    NET_TIME_EX stuUtcTime; 
    DWORD dwUtc;            
    BYTE byReserved[512];   
} ALARM_BUS_PAD_SHUTDOWN_INFO;
typedef enum tagEM_HEAT_PIC_DATA_TYPE
{
    EM_HEAT_PIC_DATA_TYPE_UNKNOWN,    
    EM_HEAT_PIC_DATA_TYPE_GRAYDATA,   
    EM_HEAT_PIC_DATA_TYPE_SOURCEDATA, 
} EM_HEAT_PIC_DATA_TYPE;
typedef struct tagNET_IN_QUERY_HEAT_MAP
{
    int nChannel;                     
    NET_TIME_EX stuBegin;             
    NET_TIME_EX stuEnd;               
    UINT nPlanID;                     
    EM_HEAT_PIC_DATA_TYPE emDataType; 
    BYTE byPtzPresetID;               
    BYTE reserved[1015];              
} NET_IN_QUERY_HEAT_MAP;
typedef struct tagNET_OUT_QUERY_HEAT_MAP
{
    int nWidth;                       
    int nHeight;                      
    char* pBufData;                   
    int nBufLen;                      
    int nBufRet;                      
    int nAverage;                     
    UINT nPlanID;                     
    EM_HEAT_PIC_DATA_TYPE emDataType; 
    UINT nPixelMax;                   
    UINT nPixelMin;                   
    BYTE byPtzPresetID;               
    BYTE reserved[1003];              
} NET_OUT_QUERY_HEAT_MAP;
typedef struct tagNET_QUERY_HEAT_MAP
{
    DWORD dwSize;                  
    NET_IN_QUERY_HEAT_MAP stuIn;   
    NET_OUT_QUERY_HEAT_MAP stuOut; 
} NET_QUERY_HEAT_MAP;
typedef struct tagNET_IN_DEV_GPS_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_DEV_GPS_INFO;
typedef enum tagNET_GPS_WORK_STATUS
{
    EM_WORK_STATE_UNKNOWN = 0,      
    EM_NO_POSITIONING,              
    EM_NO_DIFFERENTIAL_POSITIONING, 
    EM_DIFFERENTIAL_POSITIONING,    
    EM_INVALID_PPS,                 
    EM_EVALUATING,                  
} NET_GPS_WORK_STATUS;
typedef struct tagNET_OUT_DEV_GPS_INFO
{
    DWORD dwSize;                              
    NET_TIME stuLocalTime;                     
    double dbLongitude;                        
    double dbLatitude;                         
    double dbAltitude;                         
    double dbSpeed;                            
    double dbBearing;                          
    NET_THREE_STATUS_BOOL emAntennasStatus;    
    NET_THREE_STATUS_BOOL emPositioningResult; 
    DWORD dwSatelliteCount;                    
    NET_GPS_WORK_STATUS emworkStatus;          
    int nAlarmCount;                           
    int nAlarmState[128];                      
    float fHDOP;                               
} NET_OUT_DEV_GPS_INFO;
typedef struct tagNET_SET_GPS_STATUS_INFO
{
    EM_DATE_SOURCE emDateSource;               
    NET_TIME stuLocalTime;                     
    double dbLongitude;                        
    double dbLatitude;                         
    double dbAltitude;                         
    double dbSpeed;                            
    double dbBearing;                          
    NET_THREE_STATUS_BOOL emAntennasStatus;    
    NET_THREE_STATUS_BOOL emPositioningResult; 
    int nSatelliteCount;                       
    NET_GPS_WORK_STATUS emWorkStatus;          
    int nAlarmCount;                           
    int nAlarmState[128];                      
    double dbHDOP;                             
    BYTE byReserved[1024];                     
} NET_SET_GPS_STATUS_INFO;
typedef struct tagNET_IN_SET_GPS_STATUS
{
    DWORD dwSize;
    BOOL bEnable;                      
    int nChannel;                      
    NET_SET_GPS_STATUS_INFO stGPSInfo; 
} NET_IN_SET_GPS_STATUS;
typedef struct tagNET_OUT_SET_GPS_STATUS
{
    DWORD dwSize;
} NET_OUT_SET_GPS_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetGPSStatus(LLONG lLoginID, const NET_IN_SET_GPS_STATUS* pInParam, NET_OUT_SET_GPS_STATUS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_IVS_REMOTE_DEV_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_IVS_REMOTE_DEV_INFO;
typedef struct tagNET_OUT_IVS_REMOTE_DEV_INFO
{
    DWORD dwSize;        
    int nPort;           
    char szIP[64];       
    char szUser[64];     
    char szPassword[64]; 
    char szAddress[128]; 
} NET_OUT_IVS_REMOTE_DEV_INFO;
typedef struct tagNET_IN_SMART_SWITCH_INFO
{
    DWORD dwSize;                                                  
    char szSerialNumber[DH_WIRELESS_DEVICE_SERIAL_NUMBER_MAX_LEN]; 
} NET_IN_SMART_SWITCH_INFO;
typedef struct tagNET_OUT_SMART_SWITCH_INFO
{
    DWORD dwSize;                               
    BOOL bSwitchEable;                          
    double dbCurrentPower;                      
    double dbHistoryPowerUsed;                  
    double dbTodayPowerUsed;                    
    double dbMonthPowerUsed[NET_MAX_MONTH_NUM]; 
} NET_OUT_SMART_SWITCH_INFO;
typedef struct tagNET_IN_UPGRADE_STATE
{
    DWORD dwSize; 
} NET_IN_UPGRADE_STATE;
typedef enum CFG_EM_STREAM_TYPES
{
    CFG_EM_STREAMTYPE_ERR,      
    CFG_EM_STREAMTYPE_MAIN,     
    CFG_EM_STREAMTYPE_EXTRA_1,  
    CFG_EM_STREAMTYPE_EXTRA_2,  
    CFG_EM_STREAMTYPE_EXTRA_3,  
    CFG_EM_STREAMTYPE_SNAPSHOT, 
    CFG_EM_STREAMTYPE_TALKBACK, 
} CFG_EM_STREAM_TYPES;
typedef struct tagNET_IN_VIDEO_ENCODE_CAPS
{
    DWORD dwSize;                     
    int nChannel;                     
    int nGroup;                       
    CFG_EM_STREAM_TYPES stStreamType; 
} NET_IN_VIDEO_ENCODE_CAPS;
typedef enum tagEM_PRIVACY_MASKING_VERSION
{
    EM_PRIVACY_MASKING_UNKNOWN, 
    EM_PRIVACY_MASKING_V1,      
    EM_PRIVACY_MASKING_V2,      
    EM_PRIVACY_MASKING_V3,      
} EM_PRIVACY_MASKING_VERSION;
typedef enum tagEM_PRIVACY_MASKING_TYPE
{
    EM_MASKING_TYPE_UNKNOWN, 
    EM_MASKING_TYPE_RECT,    
    EM_MASKING_TYPE_POLYGON, 
} EM_PRIVACY_MASKING_TYPE;
typedef struct tagNET_COLOR_MASKING_CAPS
{
    BOOL bSupport;                            
    UINT nMaxNum;                             
    int nSupportTypeNum;                      
    EM_PRIVACY_MASKING_TYPE emSupportType[8]; 
    UINT nMaxPolygonPoints;                   
    BOOL bSetColorSupport;                    
    BOOL bSetColorIndependent;                
    BYTE byReserved[128];                     
} NET_COLOR_MASKING_CAPS;
typedef struct tagNET_MOSAIC_MASKING_CAPS
{
    BOOL bSupport;                            
    UINT nMaxNum;                             
    int nSupportTypeNum;                      
    EM_PRIVACY_MASKING_TYPE emSupportType[8]; 
    UINT nMaxPolygonPoints;                   
    int nSupportMosaicTypeNum;                
    int nSupportMosaicType[8];                
    BYTE byReserved[128];                     
} NET_MOSAIC_MASKING_CAPS;
typedef struct tagNET_SHIELD_ZOOM_CAPS
{
    BOOL bSupport;        
    int nShieldZoomMin;   
    int nShieldZoomMax;   
    BYTE byReserved[128]; 
} NET_SHIELD_ZOOM_CAPS;
typedef struct tagNET_PRIVACY_MASKING_CAPS
{
    BOOL bSupport;                                
    EM_PRIVACY_MASKING_VERSION emVersion;         
    int nSupportMaskingNum;                       
    UINT nMaxChipMaskingNum;                      
    NET_COLOR_MASKING_CAPS stuColorMaskingCaps;   
    NET_MOSAIC_MASKING_CAPS stuMosaicMaskingCaps; 
    NET_SHIELD_ZOOM_CAPS stuShieldZoom;           
    BYTE byReserved[1024];                        
} NET_PRIVACY_MASKING_CAPS;
typedef struct tagNET_OUT_VIDEO_ENCODE_CAPS
{
    DWORD dwSize;                                                      
    int nSvcEncodeTypesNum;                                            
    char szSvcEncodeTypes[DH_COMMON_STRING_32][DH_COMMON_STRING_32];   
    int nGOPCustomEncodesNum;                                          
    char szGOPCustomEncodes[DH_COMMON_STRING_32][DH_COMMON_STRING_32]; 
    int nMaxSVCTLevel;                                                 
    NET_PRIVACY_MASKING_CAPS stuPrivacyMaskingCaps;                    
} NET_OUT_VIDEO_ENCODE_CAPS;
typedef struct tagNET_IN_AUDIO_ENCODE_CAPS
{
    DWORD dwSize;                     
    int nChannel;                     
    CFG_EM_STREAM_TYPES stStreamType; 
} NET_IN_AUDIO_ENCODE_CAPS;
typedef struct tagNET_OUT_AUDIO_ENCODE_CAPS
{
    DWORD dwSize;                                                
    BOOL bSupportSourceSelect;                                   
    int nSourceTypeNum;                                          
    char szSourceType[DH_COMMON_STRING_32][DH_COMMON_STRING_32]; 
} NET_OUT_AUDIO_ENCODE_CAPS;
typedef enum EM_AUDIO_DATA_SOURCE_TYPE
{
    EM_AUDIO_DATA_SOURCE_TYPE_UNKNOWN = -1, 
    EM_AUDIO_DATA_SOURCE_TYPE_TALK,         
    EM_AUDIO_DATA_SOURCE_TYPE_NORMAL,       
    EM_AUDIO_DATA_SOURCE_TYPE_ALARM,        
} EM_AUDIO_DATA_SOURCE_TYPE;
typedef struct tagNET_IN_AUDIO_DECODE_CAPS
{
    DWORD dwSize;                           
    int nChannel;                           
    EM_AUDIO_DATA_SOURCE_TYPE emSourceType; 
} NET_IN_AUDIO_DECODE_CAPS;
typedef struct tagNET_AUDIO_DECODE_FORMAT
{
    NET_EM_AUDIO_FORMAT emCompression; 
    int nFrequency;                    
    int nDepth;                        
    int nPacketPeriod;                 
    BYTE szReserved[512];              
} NET_AUDIO_DECODE_FORMAT;
typedef struct tagNET_OUT_AUDIO_DECODE_CAPS
{
    DWORD dwSize;                                 
    NET_AUDIO_DECODE_FORMAT stuDecodeFormats[64]; 
    int nFormatsRet;                              
} NET_OUT_AUDIO_DECODE_CAPS;
typedef struct tagNET_IN_GET_ARM_MODE
{
    DWORD dwSize; 
} NET_IN_GET_ARM_MODE;
typedef enum tagEM_ARM_MODE_MODE
{
    EM_ARM_MODE_MODE_UNKNOWN,   
    EM_ARM_MODE_MODE_ARMING,    
    EM_ARM_MODE_MODE_DISARMING, 
} EM_ARM_MODE_MODE;
typedef struct NET_OUT_GET_ARM_MODE
{
    DWORD dwSize;            
    int nDelay;              
    EM_ARM_MODE_MODE emMode; 
    BYTE byReserved[4];      
} NET_OUT_GET_ARM_MODE;
typedef struct tagNET_IN_AUDIO_IN_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_AUDIO_IN_CAPS;
typedef struct tagNET_IN_AUDIO_OUT_CAPS
{
    DWORD dwSize;   
    int nMicNum;    
    int nLineInNum; 
} NET_OUT_AUDIO_IN_CAPS;
typedef struct tagSMART_ENCODE_INFO
{
    DWORD dwSize;                            
    char szCompression[MAX_COMMON_STRING_8]; 
    int nPolicy;                             
    bool bEnable;                            
    int nWidth;                              
    int nHeight;                             
    float fFPS;                              
} SMART_ENCODE_INFO;
typedef struct tagNET_IN_SMART_ENCODE_CAPS
{
    DWORD dwSize;                                        
    int nChannel;                                        
    int nStreamNum;                                      
    SMART_ENCODE_INFO stSmartEncodeInfo[MAX_STREAM_NUM]; 
} NET_IN_SMART_ENCODE_CAPS;
typedef struct tagSMART_ENCODE_CAPS_INFO
{
    DWORD dwSize;        
    int nSmartEncodeCap; 
} SMART_ENCODE_CAPS_INFO;
typedef struct tagNET_OUT_SMART_ENCODE_CAPS
{
    DWORD dwSize;                                             
    int nSmartEncodeCapsNum;                                  
    SMART_ENCODE_CAPS_INFO stSmartEncodeCaps[MAX_STREAM_NUM]; 
} NET_OUT_SMART_ENCODE_CAPS;
typedef struct tagNET_IN_DEVICE_ID
{
    DWORD dwSize; 
} NET_IN_DEVICE_ID;
typedef struct tagNET_OUT_DEVICE_ID
{
    DWORD dwSize;        
    char szDeviceID[48]; 
} NET_OUT_DEVICE_ID;
typedef struct tagNET_IN_REMOTEDEVICE_CAPS
{
    DWORD dwSize; 
} NET_IN_REMOTEDEVICE_CAPS;
typedef struct tagNET_OUT_REMOTEDEVICE_CAPS
{
    DWORD dwSize;                         
    int nRetCount;                        
    EM_DEV_PROTOCOL_TYPE snProtocal[512]; 
} NET_OUT_REMOTEDEVICE_CAPS;
typedef enum tagEM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE
{
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_UNKNOWN,        
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_FACE_DETECTION, 
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_FACE_ANALYSIS,  
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_FACE_ATTRIBUTE, 
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_FACE_COMPARE,   
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_NORMAL,         
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_OBJECT_DETECT,  
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_SMART_MOTION,   
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_ENCODE_ENHANCE, 
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_ONE_KEY_EXPAND, 
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_NUMBER_STAT,    
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE_INTELLIGENT,    
} EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE;
typedef struct tagNET_IN_DEV_VARIABLE_CAPS_MANAGER_CHECK_START_INFO
{
    DWORD dwSize;
    int nChannel;                                      
    UINT nPtzPresetID[256];                            
    UINT nPtzPresetNum;                                
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE emFuncType; 
    void* pFuncTypeInfo;                               
} NET_IN_DEV_VARIABLE_CAPS_MANAGER_CHECK_START_INFO;
typedef enum tagEM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE
{
    EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE_UNKNOWN,                
    EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE_INTELLIGENT_ALGORITHM,  
    EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE_INTELLIGENT_DECODING,   
    EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE_WEAK_DECODE,            
    EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE_NO_DECODE,              
    EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE_INSUFFICIENT_RESOURCES, 
} EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE;
typedef enum tagDEV_VARIABLE_CARS_MANAGER_REBOOT_TYPE
{
    DEV_VARIABLE_CARS_MANAGER_REBOOT_TYPE_UNKNOWN = -1, 
    DEV_VARIABLE_CARS_MANAGER_REBOOT_TYPE_NO_REBOOT,    
    DEV_VARIABLE_CARS_MANAGER_REBOOT_TYPE_REBOOT,       
} DEV_VARIABLE_CARS_MANAGER_REBOOT_TYPE;
typedef struct tagDEV_VARIABLE_CARS_MANAGER_FUN_TYPE_INFO
{
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE emMutexFuncType[1024];               
    UINT nMutexFuncTypeNum;                                                     
    UINT nPtzPresetID;                                                          
    UINT nOutofResorecesTypeNum;                                                
    EM_DEV_VARIABLE_CARS_MANAGER_OUTOF_RESOURCES_TYPE emOutofResorecesType[32]; 
    BYTE byReserved[1020];
} DEV_VARIABLE_CARS_MANAGER_FUN_TYPE_INFO;
typedef struct tagNET_OUT_DEV_VARIABLE_CAPS_MANAGER_CHECH_START_INFO
{
    DWORD dwSize;                                                
    DEV_VARIABLE_CARS_MANAGER_REBOOT_TYPE emRebootType;          
    UINT nMaxCheckStartCount;                                    
    UINT nRetCheckStartCount;                                    
    DEV_VARIABLE_CARS_MANAGER_FUN_TYPE_INFO* pstuCheckStartInfo; 
} NET_OUT_DEV_VARIABLE_CAPS_MANAGER_CHECK_START_INFO;
typedef struct tagNET_IN_DEV_VARIABLE_CAPS_MANAGER_GET_FUNC_TYPE_LIST_INFO
{
    DWORD dwSize; 
} NET_IN_DEV_VARIABLE_CAPS_MANAGER_GET_FUNC_TYPE_LIST_INFO;
typedef struct tagNET_OUT_DEV_VARIABLE_CAPS_MANAGER_GET_FUNC_TYPE_LIST_INFO
{
    DWORD dwSize;                                                
    UINT nFuncTypeNum;                                           
    EM_DEV_VARIABLE_CARS_MANAGER_FUNC_TYPE emFuncTypeList[1024]; 
} NET_OUT_DEV_VARIABLE_CAPS_MANAGER_GET_FUNC_TYPE_LIST_INFO;
typedef struct tagNET_IN_GET_ALL_PARKING_SPACE_STATUS_INFO
{
    DWORD dwSize; 
} NET_IN_GET_ALL_PARKING_SPACE_STATUS_INFO;
typedef struct tagNET_IN_VEHICLE_STATE_INFO
{
    DWORD dwSize; 
} NET_IN_VEHICLE_STATE_INFO;
typedef struct tagNET_OUT_VEHICLE_STATE_INFO
{
    DWORD dwSize;           
    char szLatitude[16];    
    char szLongitude[16];   
    char szSpeed[16];       
    char szModuleState[16]; 
    char szPosition[16];    
    char szRfState[16];     
    char szSignal[16];      
    int nBD;              
    int nGPS;             
    int nGLONASS;         
    int nBDEffect;        
    int nGPSEffect;       
    int nGLONASSEffect;   
    int nSatelliteEffect; 
    int nSatelliteTotal;  
} NET_OUT_VEHICLE_STATE_INFO;
typedef struct tagNET_IN_HTTP_PROXY_PORT
{
    DWORD dwSize;  
    int nChannel;  
    char szIp[48]; 
} NET_IN_HTTP_PROXY_PORT;
typedef struct tagNET_OUT_HTTP_PROXY_PORT
{
    DWORD dwSize;     
    int nProxyPort;   
    BOOL bProxyHttps; 
} NET_OUT_HTTP_PROXY_PORT;
typedef struct tagNET_IN_TRAFFIC_RADAR_GET_OBJECT_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_TRAFFIC_RADAR_GET_OBJECT_INFO;
typedef struct tagNET_OBJECT_RADAR_INFO
{
    UINT nID;             
    UINT nVerticalPos;    
    UINT nHorizontalPos;  
    UINT nObjectLen;      
    BYTE byReserved[256]; 
} NET_OBJECT_RADAR_INFO;
typedef struct tagNET_OUT_TRAFFIC_RADAR_GET_OBJECT_INFO
{
    DWORD dwSize;                       
    UINT nMaxObjectNum;                 
    NET_OBJECT_RADAR_INFO* pObjectInfo; 
    UINT nObjectNum;                    
} NET_OUT_TRAFFIC_RADAR_GET_OBJECT_INFO;
typedef struct tagNET_IN_PTZ_CURRENT_FOV_VALUE
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_PTZ_CURRENT_FOV_VALUE;
typedef struct tagNET_OUT_PTZ_CURRENT_FOV_VALUE
{
    DWORD dwSize;  
    int nValue;    
    int nMinValue; 
    int nMaxValue; 
} NET_OUT_PTZ_CURRENT_FOV_VALUE;
typedef struct tagNET_IN_DEV_IO_STATS
{
    DWORD dwSize; 
} NET_IN_DEV_IO_STATS;
typedef struct tagNET_DEV_IO_STAT_INFO
{
    char szDeviceName[32]; 
    UINT nReadIos;         
    UINT nReadMerges;      
    TP_U64 nReadSectors;   
    UINT nWriteIos;        
    UINT nWriteMerges;     
    TP_U64 nWriteSectors;  
    UINT nSize;            
    UINT nQueue;           
    UINT nWait;            
    UINT nSvctm;           
    UINT nUtil;            
    char szReserved1[4];   
    char szReserved[128];  
} NET_DEV_IO_STAT_INFO;
typedef struct tagNET_OUT_DEV_IO_STATS
{
    DWORD dwSize;                      
    int nInfoNum;                      
    NET_DEV_IO_STAT_INFO stuInfo[512]; 
} NET_OUT_DEV_IO_STATS;
typedef struct tagNET_IN_VIDEO_IN_STATUS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEO_IN_STATUS;
typedef struct tagNET_OUT_VIDEO_IN_STATUS
{
    DWORD dwSize;              
    int nGain[2];              
    int nBrightness[2];        
    double dbExposureValue[2]; 
} NET_OUT_VIDEO_IN_STATUS;
typedef struct tagNET_IN_PTZBASE_GET_HFOV_VALUE
{
    DWORD dwSize; 
    int nChannel; 
    float fZoom;  
} NET_IN_PTZBASE_GET_HFOV_VALUE;
typedef struct tagNET_OUT_PTZBASE_GET_HFOV_VALUE
{
    DWORD dwSize;  
    int nValue;    
    int nMinValue; 
    int nMaxValue; 
} NET_OUT_PTZBASE_GET_HFOV_VALUE;
typedef struct tagNET_IN_PTZBASE_GET_FOCUS_VALUE
{
    DWORD dwSize; 
    int nChannel; 
    float fZoom;  
} NET_IN_PTZBASE_GET_FOCUS_VALUE;
typedef struct tagNET_OUT_PTZBASE_GET_FOCUS_VALUE
{
    DWORD dwSize;  
    int nValue;    
    int nMinValue; 
    int nMaxValue; 
} NET_OUT_PTZBASE_GET_FOCUS_VALUE;
typedef struct tagNET_IN_PTZBASE_GET_VFOV_VALUE
{
    DWORD dwSize; 
    int nChannel; 
    float fZoom;  
} NET_IN_PTZBASE_GET_VFOV_VALUE;
typedef struct tagNET_OUT_PTZBASE_GET_VFOV_VALUE
{
    DWORD dwSize;  
    int nValue;    
    int nMinValue; 
    int nMaxValue; 
} NET_OUT_PTZBASE_GET_VFOV_VALUE;
typedef struct tagNET_IN_PTZBASE_GET_CENTER_GPS
{
    DWORD dwSize;        
    int nChannel;        
    BOOL bPosEnable;     
    double dPosition[2]; 
} NET_IN_PTZBASE_GET_CENTER_GPS;
typedef struct tagNET_OUT_PTZBASE_GET_CENTER_GPS
{
    DWORD dwSize;      
    double dLongitude; 
    double dLatitude;  
} NET_OUT_PTZBASE_GET_CENTER_GPS;
typedef enum tagEM_PARKING_SPACE_STATUS
{
    EM_PARKING_SPACE_UNKNOWN, 
    EM_PARKING_SPACE_PARK,    
    EM_PARKING_SPACE_N0_PARK, 
} EM_PARKING_SPACE_STATUS;
typedef enum tagEM_PARKINGSPACE_TYPE
{
    EM_PARKINGSPACE_TYPE_UNKNOWN = -1, 
    EM_PARKINGSPACE_TYPE_SMALL_CAR,    
    EM_PARKINGSPACE_TYPE_BIG_CAR,      
} EM_PARKINGSPACE_TYPE;
typedef enum tagEM_PARKING_SPACE_SCENE_TYPE
{
    EM_PARKING_SPACE_SCENE_TYPE_UNKNOWN,            
    EM_PARKING_SPACE_SCENE_TYPE_PARKING_SPACE,      
    EM_PARKING_SPACE_SCENE_TYPE_PARKING_STATISTICS, 
} EM_PARKING_SPACE_SCENE_TYPE;
typedef enum tagEM_PARKING_SPACE_STATISTICS_MODE
{
    EM_PARKING_SPACE_STATISTICS_MODE_UNKNOWN,    
    EM_PARKING_SPACE_STATISTICS_MODE_AREA_MODE,  
    EM_PARKING_SPACE_STATISTICS_MODE_SPACE_MODE, 
} EM_PARKING_SPACE_STATISTICS_MODE;
typedef struct tagNET_PARKING_SPACE_INFO
{
    int nLane;                            
    EM_PARKING_SPACE_STATUS emParkStatus; 
    char szCustomParkNo[32];              
    EM_PARKINGSPACE_TYPE emSpaceType;     
    BYTE byReserved[252];                 
} NET_PARKING_SPACE_INFO;
typedef struct tagNET_PARKING_SPACE_AREA_STATUS
{
    char szName[32];                  
    UINT nCount;                      
    EM_PARKINGSPACE_TYPE emSpaceType; 
    int nRemainCnt;                   
    char szReserved[252];             
} NET_PARKING_SPACE_AREA_STATUS;
typedef struct tagNET_OUT_GET_ALL_PARKING_SPACE_STATUS_INFO
{
    DWORD dwSize;                                      
    BYTE byReserved[4];                                
    NET_PARKING_SPACE_INFO* pstuParkingSpaceInfo;      
    int nMaxParkingSpace;                              
    int nParkingSpaceNum;                              
    EM_PARKING_SPACE_SCENE_TYPE emSceneType;           
    EM_PARKING_SPACE_STATISTICS_MODE emStatisticsMode; 
    NET_PARKING_SPACE_AREA_STATUS stuAreaStatus[10];   
    int nAreaStatusNum;                                
    char szReserved[4];                                
} NET_OUT_GET_ALL_PARKING_SPACE_STATUS_INFO;
typedef struct tagNET_IN_TRAFFIC_SNAP_RADAR_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_TRAFFIC_SNAP_RADAR_INFO;
typedef enum tagEM_TRAFFIC_SNAP_DEVICE_WORK_STATE
{
    EM_TRAFFIC_SNAP_DEVICE_WORK_STATE_UNKNOWN = -1, 
    EM_TRAFFIC_SNAP_DEVICE_WORK_STATE_FAULT,        
    EM_TRAFFIC_SNAP_DEVICE_WORK_STATE_NORMAL,       
    EM_TRAFFIC_SNAP_DEVICE_WORK_STATE_CLOSE,        
} EM_TRAFFIC_SNAP_DEVICE_WORK_STATE;
typedef enum tagEM_TRAFFIC_SNAP_RADAR_COIL_MATCH_STATE
{
    EM_TRAFFIC_SNAP_RADAR_COIL_MATCH_STATE_UNKNOWN = -1, 
    EM_TRAFFIC_SNAP_RADAR_COIL_MATCH_STATE_MISMATCH,     
    EM_TRAFFIC_SNAP_RADAR_COIL_MATCH_STATE_MATCH,        
    EM_TRAFFIC_SNAP_RADAR_COIL_MATCH_STATE_NO_DETECT,    
} EM_TRAFFIC_SNAP_RADAR_COIL_MATCH_STATE;
typedef enum tagEM_TRAFFIC_SNAP_RADAR_DETECT_CAR_STATE
{
    EM_TRAFFIC_SNAP_RADAR_DETECT_CAR_STATE_UNKNOWN = -1, 
    EM_TRAFFIC_SNAP_RADAR_DETECT_CAR_STATE_NO_CAR,       
    EM_TRAFFIC_SNAP_RADAR_DETECT_CAR_STATE_CAR,          
} EM_TRAFFIC_SNAP_RADAR_DETECT_CAR_STATE;
typedef struct tagNET_OUT_TRAFFIC_SNAP_RADAR_INFO
{
    DWORD dwSize;                                            
    char szSerialNo[128];                                    
    char szVendor[32];                                       
    char szDevType[32];                                      
    EM_TRAFFIC_SNAP_DEVICE_WORK_STATE emWorkState;           
    EM_TRAFFIC_SNAP_RADAR_COIL_MATCH_STATE emCoilMatch;      
    DH_POINT stuFakeAlarmPointInfo[64];                      
    int nRetFakeAlarmPointNum;                               
    UINT nRelayWorkCount;                                    
    EM_TRAFFIC_SNAP_RADAR_DETECT_CAR_STATE emDetectCarState; 
    UINT nCommPort;                                          
    BYTE byReserved[1020];                                   
} NET_OUT_TRAFFIC_SNAP_RADAR_INFO;
typedef struct tagNET_IN_TRAFFIC_SNAP_STROBE_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_TRAFFIC_SNAP_STROBE_INFO;
typedef enum tagEM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE
{
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_UNKNOWN,                                   
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_ENCODER_SIGNAL_EXCEPTION,                  
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_MOTOR_RUNNING_OVERTIME,                    
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_MOTOR_STALLING,                            
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_INFRARED_IS_BLOCKED_BY_OBJECTS,            
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_THE_PRESSURE_WAVE_IS_BLOCKED_BY_AN_OBJECT, 
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_INVERTER_UNIT_PROTECTION,                  
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_ACCELERATED_OVERCURRENT,                   
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_DECELERATION_OVER_CURRENT,                 
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_CONSTANT_SPEED_OVERCURRENT,                
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_ACCELERATED_OVERVOLTAGE,                   
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_DECELERATION_OVERPRESSURE,                 
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_CONSTANT_SPEED_OVERVOLTAGE,                
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_BRAKING_POWER_SUPPLY_EXCEPTION,            
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_UNDER_VOLTAGE,                             
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_FREQUENCY_CONVERTER_OVERLOAD,              
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_MOTOR_OVERLOAD,                            
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_INPUT_PHASE_LOSS,                          
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_OUTPUT_PHASE_LOSS,                         
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_MODULE_OVERHEAT,                           
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_EXTERNAL_FAULT,                            
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_RELAY_EXCEPTION,                           
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_CURRENT_DETECTION_EXCEPTION,               
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_MOTOR_TUNING_EXCEPTION,                    
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_EEPROM_READ_WRITE_EXCEPTION,               
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_INVERTER_HARDWARE_FAILURE,                 
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_MOTOR_SHORT_CIRCUIT_TO_GROUND,             
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_RUN_TIMEOUT,                               
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_THE_GATE_IS_BLOCKED,                       
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_SENSOR,                                    
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_LIMIT,                                     
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE_INTERNAL_COMMUNICATION_FAULT,              
} EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE;
typedef enum tagEM_TRAFFIC_SNAP_STROBE_RUN_STATE
{
    EM_TRAFFIC_SNAP_STROBE_RUN_STATE_UNKNOWN = -1, 
    EM_TRAFFIC_SNAP_STROBE_RUN_STATE_CLOSE,        
    EM_TRAFFIC_SNAP_STROBE_RUN_STATE_OPEN,         
    EM_TRAFFIC_SNAP_STROBE_RUN_STATE_OPENING,      
    EM_TRAFFIC_SNAP_STROBE_RUN_STATE_CLOSING,      
    EM_TRAFFIC_SNAP_STROBE_RUN_STATE_STOP,         
} EM_TRAFFIC_SNAP_STROBE_RUN_STATE;
typedef enum tagEM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE
{
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_UNKNOWN,                      
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_CONTROL_SWITCH_ON,            
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_CONTROL_SWITCH_OFF,           
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_LOOP_LOOP1_OPEN,              
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_LOOP_LOOP1_CLOSE,             
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_LOOP_LOOP2_OPEN,              
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_EXTERNAL_SWITCH_OPEN,         
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_EXTERNAL_SWITCH_CLOSE,        
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_INTERNAL_SWITCH_OPEN,         
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_INTERNAL_SWITCH_CLOSE,        
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_AUTOMATIC_DELAY_CLOSE,        
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_OBSTACLE_REBOUND_TO_OPEN,     
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_INFRARED_ANTI_SMASHING_OPEN,  
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_INFRARED_ANTI_SMASHING_CLOSE, 
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_PRESSURE_WAVE_OPEN,           
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE_PRESSURE_WAVE_CLOSE,          
} EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE;
typedef enum tagEM_TRAFFIC_SNAP_GROUND_SENSE_IN_STATE_TYPE
{
    EM_TRAFFIC_SNAP_GROUND_SENSE_IN_STATE_TYPE_UNKNOWN = -1,     
    EM_TRAFFIC_SNAP_GROUND_SENSE_IN_STATE_TYPE_NO_CAR,           
    EM_TRAFFIC_SNAP_GROUND_SENSE_IN_STATE_TYPE_CAR,              
    EM_TRAFFIC_SNAP_GROUND_SENSE_IN_STATE_TYPE_NO_SUPPORT = 255, 
} EM_TRAFFIC_SNAP_GROUND_SENSE_IN_STATE_TYPE;
typedef enum tagEM_TRAFFIC_SNAP_STROBE_IN_STATE_TYPE
{
    EM_TRAFFIC_SNAP_STROBE_IN_STATE_TYPE_UNKNOWN = -1,     
    EM_TRAFFIC_SNAP_STROBE_IN_STATE_TYPE_TO_BREAK_OFF,     
    EM_TRAFFIC_SNAP_STROBE_IN_STATE_TYPE_CLOSE,            
    EM_TRAFFIC_SNAP_STROBE_IN_STATE_TYPE_NO_SUPPORT = 255, 
} EM_TRAFFIC_SNAP_STROBE_IN_STATE_TYPE;
typedef enum tagEM_TRAFFIC_SNAP_STROBE_RAIL_STATE_TYPE
{
    TRAFFIC_SNAP_STROBE_RAIL_STATE_TYPE_UNKNOWN = -1,     
    TRAFFIC_SNAP_STROBE_RAIL_STATE_TYPE_NORMAL,           
    TRAFFIC_SNAP_STROBE_RAIL_STATE_TYPE_FALL_OFF,         
    TRAFFIC_SNAP_STROBE_RAIL_STATE_TYPE_NO_SUPPORT = 255, 
} EM_TRAFFIC_SNAP_STROBE_RAIL_STATE_TYPE;
typedef struct tagNET_OUT_TRAFFIC_SNAP_STROBE_INFO
{
    DWORD dwSize;                                                    
    char szSerialNo[128];                                            
    char szVendor[32];                                               
    char szDevType[32];                                              
    EM_TRAFFIC_SNAP_DEVICE_WORK_STATE emWorkState;                   
    EM_TRAFFIC_SNAP_STROBE_FAULT_CODE_TYPE emFaultCode;              
    UINT nOpenStrobeCount;                                           
    EM_TRAFFIC_SNAP_STROBE_RUN_STATE emRunState;                     
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE emStrobeActionReason;  
    EM_RELAY_STATE_TYPE emHeavyCurrentRelayState;                    
    EM_RELAY_STATE_TYPE emSignalRelay1State;                         
    EM_RELAY_STATE_TYPE emSignalRelay2State;                         
    EM_TRAFFIC_SNAP_GROUND_SENSE_IN_STATE_TYPE emGroundSenseInState; 
    EM_TRAFFIC_SNAP_STROBE_IN_STATE_TYPE emStrobeInPutState;         
    EM_TRAFFIC_SNAP_STROBE_RAIL_STATE_TYPE emRailState;              
    UINT nCommPort;                                                  
    BYTE byReserved[1020];                                           
} NET_OUT_TRAFFIC_SNAP_STROBE_INFO;
typedef struct tagNET_IN_TRAFFIC_SNAP_PARK_SCREEN_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_TRAFFIC_SNAP_PARK_SCREEN_INFO;
typedef enum tagNET_EM_TRAFFIC_SNAP_WORKING_STATE
{
    NET_EM_TRAFFIC_SNAP_WORKING_STATE_UNKNOWN = -1, 
    NET_EM_TRAFFIC_SNAP_WORKING_STATE_NORMAL,       
    NET_EM_TRAFFIC_SNAP_WORKING_STATE_ABNORMAL,     
    NET_EM_TRAFFIC_SNAP_WORKING_STATE_OFFLINE,      
} NET_EM_TRAFFIC_SNAP_WORKING_STATE;
typedef struct tagNET_PARK_SCREEN_INFO
{
    NET_EM_TRAFFIC_SNAP_WORKING_STATE emWokingState; 
    UINT nFaultType;                                 
    UINT nFaultScreenNo;                             
    int nEnvBrightness;                              
    double dbTemperature;                            
    UINT nRunTimes;                                  
    UINT nCommPort;                                  
    char szVersion[64];                              
    char szLastSelfCheckFinishTime[24];              
    char szResvered[1024];                           
} NET_PARK_SCREEN_INFO;
typedef struct tagNET_OUT_TRAFFIC_SNAP_PARK_SCREEN_INFO
{
    DWORD dwSize;                          
    int nCount;                            
    NET_PARK_SCREEN_INFO stuParkScreen[2]; 
} NET_OUT_TRAFFIC_SNAP_PARK_SCREEN_INFO;
typedef struct tagNET_IN_HTTP_PROXY_INFO
{
    DWORD dwSize;         
    int nChannel;         
    char szIPAddress[40]; 
} NET_IN_HTTP_PROXY_INFO;
typedef struct tagNET_TOKEN_INFO
{
    char szUserName[128];  
    char szToken[128];     
    char szResvered[1024]; 
} NET_TOKEN_INFO;
typedef struct tagNET_OUT_HTTP_PROXY_INFO
{
    DWORD dwSize;                
    UINT nProxyPort;             
    BOOL bProxyHttps;            
    NET_TOKEN_INFO stuTokenInfo; 
} NET_OUT_HTTP_PROXY_INFO;
typedef struct tagNET_IN_TRAFFIC_RADAR_GET_OBJECT_EX_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_TRAFFIC_RADAR_GET_OBJECT_EX_INFO;
typedef enum tagEMUM_VIDEO_ANALYSE_OBJECT_TYPE
{
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_UNKNOWN = -1,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_ALL,              
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_HUMAN,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_VEHICLE,          
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FIRE,             
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_SMOKE,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_PLATE,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_HUMANFACE,        
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_CONTAINER,        
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_ANIMAL,           
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_TRAFFICLIGHT,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_PASTEPAPER,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_HUMANHEAD = 11,   
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_LINE,             
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_ENTITY,           
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_BULLETHOLE,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FACEPRIVATEDATA,  
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_SIMPLEVEHICLE,    
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_NONMOTOR,         
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_SIGNALFLOW,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_PEDESTRAIN,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_DETAILSNAP,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_XRAYIMAGE = 21,   
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_SHOPPRESENCE,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FLOWBUSINESS,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_WATERLEVELRULER,  
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_BOAT,             
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FRUIT,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_BARCODE,          
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_GLOVE,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_LADDER,           
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_CURTAIN,          
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FENCE = 31,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_SIGNBOARD,        
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_ELECTRICBELT,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_PARKINGSPACE,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_RMB,              
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_KEY,              
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_SEAL,             
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FOREIGNCURRENCY,  
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_WATERFLOATING,    
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FIRELANEJAMS,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_OCR = 41,         
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_PRAM,             
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_LUGGAGE,          
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FOREIGNMATTER,    
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_PACKAGE,          
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_RADARDETECT,      
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_PLANE,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_BAG,              
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_BOX,              
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_HIGHTOSSCARD,     
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_CARD = 51,        
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_EMPTYRADAR,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_WHEEL,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_WATER,            
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_BULK,             
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_ROADCONE,         
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FIREEXTINGUISHER, 
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_UMBRELLA,         
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_FISHINGROD,       
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_HANGINGPACKAGE,   
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_TRIPCODE = 61,    
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE_UNIFORM,          
} EMUM_VIDEO_ANALYSE_OBJECT_TYPE;
typedef struct tagNET_RADAR_OBJECT_EX_INFO
{
    UINT nID;                                    
    UINT nBelongId;                              
    EMUM_VIDEO_ANALYSE_OBJECT_TYPE emObjectType; 
    UINT nRadarObjAtt;                           
    UINT nRadarObjSource;                        
    UINT nVideoObjAtt;                           
    UINT nVerticalPos;                           
    UINT nHorizontalPos;                         
    UINT nObjectLen;                             
    double dbSpeedX;                             
    double dbSpeedY;                             
    char szReserved[972];                        
} NET_RADAR_OBJECT_EX_INFO;
typedef struct tagNET_OUT_TRAFFIC_RADAR_GET_OBJECT_EX_INFO
{
    DWORD dwSize;                             
    int nObjectNum;                           
    UINT nMaxObjectNum;                       
    int nObjectCount;                         
    NET_RADAR_OBJECT_EX_INFO* pstuObjectInfo; 
} NET_OUT_TRAFFIC_RADAR_GET_OBJECT_EX_INFO;
typedef enum tagEM_TRAFFICSTROBE_STATUS
{
    NET_TRAFFICSTROBE_STATUS_UNKNOWN,
    NET_TRAFFICSTROBE_STATUS_CLOSE_COMPLETE,     
    NET_TRAFFICSTROBE_STATUS_OPEN_COMPLETE,      
    NET_TRAFFICSTROBE_STATUS_NOT_CLOSE_COMPLETE, 
    NET_TRAFFICSTROBE_STATUS_NOT_OPEN_COMPLETE,  
    NET_TRAFFICSTROBE_STATUS_NOT_STROBE_STOP,    
} EM_TRAFFICSTROBE_STATUS;
typedef struct tagALARM_TRAFFICSTROBESTATE_INFO
{
    BYTE bEventAction;                                              
    NET_TIME stuTime;                                               
    int nChannelID;                                                 
    EM_TRAFFICSTROBE_STATUS emStatus;                               
    EM_TRAFFIC_SNAP_STROBE_ACTION_REASON_TYPE emStrobeActionReason; 
    BYTE byReserved[1020];                                          
} ALARM_TRAFFICSTROBESTATE_INFO;
typedef enum tagEM_UPGRADE_PACKAGE_TYPE
{
    EM_UPGRADE_PACKAGE_TYPE_UNKNOWN,   
    EM_UPGRADE_PACKAGE_TYPE_REGULAR,   
    EM_UPGRADE_PACKAGE_TYPE_EMERGENCY, 
} EM_UPGRADE_PACKAGE_TYPE;
typedef enum tagEM_UPGRADE_STATE
{
    EM_UPGRADE_STATE_UNKNOWN,                          
    EM_UPGRADE_STATE_NONE,                             
    EM_UPGRADE_STATE_INVALID,                          
    EM_UPGRADE_STATE_NOT_ENOUGH_MEMORY,                
    EM_UPGRADE_STATE_DOWNLOADING,                      
    EM_UPGRADE_STATE_DOWNLOAD_FAILED,                  
    EM_UPGRADE_STATE_DOWNLOAD_SUCCESSED,               
    EM_UPGRADE_STATE_PREPARING,                        
    EM_UPGRADE_STATE_UPGRADING,                        
    EM_UPGRADE_STATE_UPGRADE_FAILED,                   
    EM_UPGRADE_STATE_UPGRADE_SUCCESSED,                
    EM_UPGRADE_STATE_UPGRADE_CANCELLED,                
    EM_UPGRADE_STATE_FILE_UNMATCH,                     
    EM_UPGRADE_STATE_FEATURE_ENGINE_UNMATCH,           
    EM_UPGRADE_STATE_FEATURE_FUNC_UNMATCH,             
    EM_UPGRADE_STATE_FEATURE_PARTION_UNMATCH,          
    EM_UPGRADE_STATE_NETWORK_ERROR,                    
    EM_UPGRADE_STATE_NETWORK_REMOTE_FILE_CHECK_FAILED, 
    EM_UPGRADE_STATE_PART_UPGRADED,                    
    EM_UPGRADE_STATE_FEATURE_API_UNMATCH,              
    EM_UPGRADE_STATE_FEATURE_SDK_UNMATCH,              
    EM_UPGRADE_STATE_SET_URL,                          
    EM_UPGRADE_STATE_OEM_NOT_COMPARE,                  
    EM_UPGRADE_STATE_UNMATCH_VERSION,                  
    EM_UPGRADE_STATE_LICENSE_LANGUAGE_ERROR,           
    EM_UPGRADE_STATE_LICENSE_LANGUAGE_NOT_MATCH,       
    EM_UPGRADE_STATE_SAME_VERSION,                     
    EM_UPGRADE_STATE_SAME_AS_OLD_APP,                  
} EM_UPGRADE_STATE;
typedef struct tagALARM_UPGRADE_STATE
{
    EM_UPGRADE_STATE emState;             
    int nProgress;                        
    char szFileName[DH_COMMON_STRING_64]; 
    BYTE byReserved[1024];
} ALARM_UPGRADE_STATE;
typedef enum tagEM_LABELDATA_STATE
{
    EM_LABELDATA_STATE_ENTER, 
    EM_LABELDATA_STATE_LEAVE, 
} EM_LABELDATA_STATE;
typedef struct tagALARM_LABELINFO
{
    int nChannelID;                         
    char szIndexIs[DH_COMMON_STRING_8];     
    int nVideoIndex;                        
    UINT nACK;                              
    char szReceiverID[DH_COMMON_STRING_16]; 
    char szLabelID[DH_COMMON_STRING_16];    
    NET_TIME_EX stuDateTime;                
    EM_LABELDATA_STATE emLabelDataState;    
    BYTE byReserve[1024];                   
} ALARM_LABELINFO;
typedef struct tagNET_OUT_UPGRADE_STATE
{
    DWORD dwSize;                           
    char szOldVersion[DH_COMMON_STRING_64]; 
    char szNewVersion[DH_COMMON_STRING_64]; 
    EM_UPGRADE_STATE emState;               
    EM_UPGRADE_PACKAGE_TYPE emType;         
    int nProgress;                          
} NET_OUT_UPGRADE_STATE;
typedef struct tagNET_IN_HDD_TEMPERATURE
{
    DWORD dwSize;
    char szHardDiskName[DH_COMMON_STRING_16]; 
} NET_IN_HDD_TEMPERATURE;
typedef struct tagNET_OUT_HDD_TEMPERATURE
{
    DWORD dwSize;
    int nID;                          
    char szName[DH_COMMON_STRING_64]; 
    int nCurrent;                     
    int nWorst;                       
    int nThreshold;                   
    char szRaw[DH_COMMON_STRING_32];  
    int nPredict;                     
    int nSync;                        
} NET_OUT_HDD_TEMPERATURE;
typedef struct tagNET_IN_RAWFRAMEDATA
{
    DWORD dwSize;
    int nChannel;                             
    int nSensorID;                            
    char szRawFrameType[DH_COMMON_STRING_32]; 
} NET_IN_RAWFRAMEDATA;
typedef struct tagNET_OUT_RAWFRAMEDATA
{
    DWORD dwSize;
    UINT nHeight;    
    UINT nWidth;     
    UINT nDataLen;   
    char* pszBuffer; 
    int nBufferLen;  
} NET_OUT_RAWFRAMEDARA;
#define NET_MAX_NUM_CHANNEL_WATCHER 16 
#define NET_MAX_NUM_SPLICEDATA 8       
typedef struct tagNET_IN_GETSPLICEDATA
{
    DWORD dwSize; 
} NET_IN_GETSPLICEDATA;
typedef struct tagNET_SINGLE_SPLICEDATA
{
    int nScale;           
    int nOffsetX;         
    int nOffsetY;         
    UINT nCenterX;        
    UINT nCenterY;        
    UINT nFovX;           
    UINT nFovY;           
    UINT nPanoWidth;      
    UINT nPanoHeight;     
    BYTE byReserved[104]; 
} NET_SINGLE_SPLICEDATA;
typedef enum tagEM_SPLICE_PLATFORM_TYPE
{
    EM_SPLICE_PLATFORM_TYPE_UNKNWON = -1, 
    EM_SPLICE_PLATFORM_TYPE_FPGA,         
    EM_SPLICE_PLATFORM_TYPE_HISILICON,    
} EM_SPLICE_PLATFORM_TYPE;
typedef struct tagNET_MULTIVIDEO_SPLICEINFO
{
    UINT nChannelID;                                             
    int nNumSplice;                                              
    NET_SINGLE_SPLICEDATA stuSpliceData[NET_MAX_NUM_SPLICEDATA]; 
    EM_SPLICE_PLATFORM_TYPE emPlatformType;                      
    BYTE byReserved[508];                                        
} NET_MULTIVIDEO_SPLICEINFO;
typedef struct tagNET_OUT_GETSPLICEDATA
{
    DWORD dwSize;                                                         
    int nNumChannel;                                                      
    NET_MULTIVIDEO_SPLICEINFO stuSpliceInfo[NET_MAX_NUM_CHANNEL_WATCHER]; 
} NET_OUT_GETSPLICEDATA;
typedef struct tagNET_IN_AC_CAPS
{
    DWORD dwSize; 
} NET_IN_AC_CAPS;
typedef struct tagNET_SPECIAL_DAYS_SCHEDULE_CAPS
{
    BOOL bSupport;                 
    int nMaxSpecialDaysSchedules;  
    int nMaxTimePeriodsPerDay;     
    int nMaxSpecialDayGroups;      
    int nMaxDaysInSpecialDayGroup; 
    BYTE byReserved[128];          
} NET_SPECIAL_DAYS_SCHEDULE_CAPS;
typedef enum tagEM_AC_UNLOCK_MODE
{
    EM_AC_UNLOCK_MODE_UNKNOWN = 0,                                                
    EM_AC_UNLOCK_MODE_PWD_ONLY = 1,                                               
    EM_AC_UNLOCK_MODE_CARD = 2,                                                   
    EM_AC_UNLOCK_MODE_PWD_OR_CARD = 3,                                            
    EM_AC_UNLOCK_MODE_CARD_FIRST = 4,                                             
    EM_AC_UNLOCK_MODE_PWD_FIRST = 5,                                              
    EM_AC_UNLOCK_MODE_SECTION = 6,                                                
    EM_AC_UNLOCK_MODE_FINGERPRINTONLY = 7,                                        
    EM_AC_UNLOCK_MODE_PWD_OR_CARD_OR_FINGERPRINT = 8,                             
    EM_AC_UNLOCK_MODE_PWD_AND_CARD_AND_FINGERPINT = 9,                            
    EM_AC_UNLOCK_MODE_PWD_AND_FINGERPRINT = 10,                                   
    EM_AC_UNLOCK_MODE_CARD_AND_FINGERPRINT = 11,                                  
    EM_AC_UNLOCK_MODE_MULTI_PERSON = 12,                                          
    EM_AC_UNLOCK_MODE_FACEIDCARD = 13,                                            
    EM_AC_UNLOCK_MODE_FACEIDCARD_AND_IDCARD = 14,                                 
    EM_AC_UNLOCK_MODE_FACEIDCARD_OR_CARD_OR_FINGER = 15,                          
    EM_AC_UNLOCK_MODE_FACEIPCARDANDIDCARD_OR_CARD_OR_FINGER = 16,                 
    EM_AC_UNLOCK_MODE_USERID_AND_PWD = 17,                                        
    EM_AC_UNLOCK_MODE_FACE_ONLY = 18,                                             
    EM_AC_UNLOCK_MODE_FACE_AND_PWD = 19,                                          
    EM_AC_UNLOCK_MODE_FINGERPRINT_AND_PWD = 20,                                   
    EM_AC_UNLOCK_MODE_FINGERPRINT_AND_FACE = 21,                                  
    EM_AC_UNLOCK_MODE_CARD_AND_FACE = 22,                                         
    EM_AC_UNLOCK_MODE_FACE_OR_PWD = 23,                                           
    EM_AC_UNLOCK_MODE_FINGERPRINT_OR_PWD = 24,                                    
    EM_AC_UNLOCK_MODE_FINGERPRINT_OR_FACE = 25,                                   
    EM_AC_UNLOCK_MODE_CARD_OR_FACE = 26,                                          
    EM_AC_UNLOCK_MODE_CARD_OR_FINGERPRINT = 27,                                   
    EM_AC_UNLOCK_MODE_FINGERPRINT_AND_FACE_AND_PWD = 28,                          
    EM_AC_UNLOCK_MODE_CARD_AND_FACE_AND_PWD = 29,                                 
    EM_AC_UNLOCK_MODE_CARD_AND_FINGERPRINT_AND_PWD = 30,                          
    EM_AC_UNLOCK_MODE_CARD_AND_FINGERPRINT_AND_FACE = 31,                         
    EM_AC_UNLOCK_MODE_FINGERPRINT_OR_FACE_OR_PWD = 32,                            
    EM_AC_UNLOCK_MODE_CARD_OR_FACE_OR_PWD = 33,                                   
    EM_AC_UNLOCK_MODE_CARD_OR_FINGERPRINT_OR_FACE = 34,                           
    EM_AC_UNLOCK_MODE_CARD_AND_FINGERPRINT_AND_FACE_AND_PWD = 35,                 
    EM_AC_UNLOCK_MODE_CARD_OR_FINGERPRINT_OR_FACE_OR_PWD = 36,                    
    EM_AC_UNLOCK_MODE_FACEIPCARDANDIDCARD_OR_CARD_OR_FACE = 37,                   
    EM_AC_UNLOCK_MODE_FACEIDCARD_OR_CARD_OR_FACE = 38,                            
    EM_AC_UNLOCK_MODE_CARDANDPWD_OR_FINGERPRINTANDPWD = 39,                       
    EM_AC_UNLOCK_MODE_PHOTO_OR_FACE = 40,                                         
    EM_AC_UNLOCK_MODE_FINGERPRINT = 41,                                           
    EM_AC_UNLOCK_MODE_PHOTO_AND_FINGERPRINT = 42,                                 
    EM_AC_UNLOCK_MODE_FACEIDCARD_OR_CARD_OR_FINGERPRINT_OR_FACE_OR_PASSWORD = 43, 
    EM_AC_UNLOCK_MODE_MULTI_USER_TYPE = 44,                                       
    EM_AC_UNLOCK_MODE_FACEIDCARD_OR_HEALTHCODE = 45,                              
} EM_AC_UNLOCK_MODE;
typedef enum tagEM_SUPPORT_HELMET_TYPE
{
    EM_SUPPORT_HELMET_TYPE_UNKNOWN = -1, 
    EM_SUPPORT_HELMET_TYPE_NO_SUPPORT,   
    EM_SUPPORT_HELMET_TYPE_SUPPORT,      
} EM_SUPPORT_HELMET_TYPE;
typedef struct tagNET_AC_CAPS
{
    int nChannels;                                         
    BOOL bSupAccessControlAlarmRecord;                     
    int nCustomPasswordEncryption;                         
    int nSupportFingerPrint;                               
    BOOL bHasCardAuth;                                     
    BOOL bHasFaceAuth;                                     
    BOOL bOnlySingleDoorAuth;                              
    BOOL bAsynAuth;                                        
    BOOL bUserlsoLate;                                     
    int nMaxInsertRate;                                    
    NET_SPECIAL_DAYS_SCHEDULE_CAPS stuSpecialDaysSchedule; 
    int nUnlockModes;                                      
    EM_AC_UNLOCK_MODE emUnlockModes[128];                  
    EM_SUPPORT_HELMET_TYPE emSupportHelmetType;            
    UINT nUserNameMaxLen;                                  
    BOOL bSupportASGManager;                               
    BOOL bHasIrisAuth;                                     
    BOOL bSupportDoorMultiSection;                         
    BYTE byReserved[236];                                  
} NET_AC_CAPS;
typedef struct tagNET_ACCESS_USER_CAPS
{
    int nMaxInsertRate;          
    int nMaxUsers;               
    int nMaxFingerPrintsPerUser; 
    int nMaxCardsPerUser;        
    BYTE byReserved[512];        
} NET_ACCESS_USER_CAPS;
typedef struct tagNET_ACCESS_CARD_CAPS
{
    int nMaxInsertRate;   
    int nMaxCards;        
    BYTE byReserved[512]; 
} NET_ACCESS_CARD_CAPS;
typedef struct tagNET_ACCESS_FINGERPRINT_CAPS
{
    int nMaxInsertRate;      
    int nMaxFingerprintSize; 
    int nMaxFingerprint;     
    BYTE byReserved[512];    
} NET_ACCESS_FINGERPRINT_CAPS;
typedef struct tagNET_ACCESS_FACE_CAPS
{
    int nMaxInsertRate;                 
    int nMaxFace;                       
    int nRecognitionType;               
    int nRecognitionAlgorithm;          
    DWORD dwRecognitionVersion;         
    int nMinPhotoSize;                  
    int nMaxPhotoSize;                  
    int nMaxGetPhotoNumber;             
    BOOL bIsSupportGetPhoto;            
    BOOL bIsSupportOnlyIssueFaceEigen;  
    BOOL bIsSupportOnlyImportFaceEigen; 
    BYTE byReserved[496];               
} NET_ACCESS_FACE_CAPS;
typedef struct tagNET_ACCESS_IRIS_CAPS
{
    UINT nMaxInsertRate;              
    UINT nMinIrisPhotoSize;           
    UINT nMaxIrisPhotoSize;           
    UINT nMaxIrisGroup;               
    UINT nRecognitionAlgorithmVender; 
    UINT nRecognitionVersion;         
    UINT nMaxIrisesCount;             
    BYTE byReserved[500];             
} NET_ACCESS_IRIS_CAPS;
typedef struct tagNET_ANTI_SUBMARINE_CAPS
{
    UINT nTypes;              
    UINT nMaxRouteRule;       
    UINT nOneRouteMaxNode;    
    UINT nOneNodeMaxReaderID; 
    BYTE byReserved[512];     
} NET_ANTI_SUBMARINE_CAPS;
typedef struct tagNET_INTER_LOCK_CAPS
{
    UINT nTypes;           
    UINT nMaxRule;         
    UINT nWithinMaxDoors;  
    UINT nBetweenMaxDoors; 
    BYTE byReserved[512];  
} NET_INTER_LOCK_CAPS;
typedef struct tagNET_OUT_AC_CAPS
{
    DWORD dwSize;                                   
    NET_AC_CAPS stuACCaps;                          
    NET_ACCESS_USER_CAPS stuUserCaps;               
    NET_ACCESS_CARD_CAPS stuCardCaps;               
    NET_ACCESS_FINGERPRINT_CAPS stuFingerprintCaps; 
    NET_ACCESS_FACE_CAPS stuFaceCaps;               
    NET_ACCESS_IRIS_CAPS stuIrisCaps;               
    NET_ANTI_SUBMARINE_CAPS stuAntisubmarineCaps;   
    NET_INTER_LOCK_CAPS stuInterLockCaps;           
} NET_OUT_AC_CAPS;
typedef struct tagNET_IN_LIGHTINGCONTROL_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_LIGHTINGCONTROL_CAPS;
typedef enum tagEM_LC_CONFIG_VERSION
{
    EM_LC_CONFIG_VERSION_UNKNOWN,     
    EM_LC_CONFIG_VERSION_LIGHTING,    
    EM_LC_CONFIG_VERSION_LIGHTING_V2, 
} EM_LC_CONFIG_VERSION;
typedef enum tagEM_LC_LIGHT_TYPE
{
    EM_LC_LIGHT_TYPE_UNKNOWN,       
    EM_LC_LIGHT_TYPE_INFRAREDLIGHT, 
    EM_LC_LIGHT_TYPE_WIHTELIGHT,    
    EM_LC_LIGHT_TYPE_LASERLIGHT,    
    EM_LC_LIGHT_TYPE_AIMIXLIGHT,    
    EM_LC_LIGHT_TYPE_PILOTLIGHT,    
} EM_LC_LIGHT_TYPE;
typedef enum tagEM_LC_MODE
{
    EM_LC_MODE_UNKNOWN,         
    EM_LC_MODE_MANUAL,          
    EM_LC_MODE_ZOOMPRIO,        
    EM_LC_MODE_TIMING,          
    EM_LC_MODE_AUTO,            
    EM_LC_MODE_OFF,             
    EM_LC_MODE_EXCLUSIVEMANUAL, 
    EM_LC_MODE_SMARTLIGHT,      
    EM_LC_MODE_LINKING,         
    EM_LC_MODE_DUSKTODAWN       
} EM_LC_MODE;
#define SUPPORTED_LC_COMPLEX_MODES 3 
#define SUPPORTED_AIMIX_LIGHT 8      
typedef struct tagNET_MODES_COMPLEX_LIGHT
{
    EM_LC_MODE anInfraredLight[SUPPORTED_LC_COMPLEX_MODES]; 
    int nInfraredLightLen;                                  
    EM_LC_MODE anWhiteLight[SUPPORTED_LC_COMPLEX_MODES];    
    int nWhiteLightLen;                                     
    EM_LC_MODE anLaserLight[SUPPORTED_LC_COMPLEX_MODES];    
    int nLaserLightLen;                                     
    EM_LC_MODE emAIMixLight[SUPPORTED_AIMIX_LIGHT];         
    int nAIMixLight;                                        
    BYTE byReserved[92];                                    
} NET_MODES_COMPLEX_LIGHT;
#define LC_LIGHT_COUNT 4 
typedef struct tagNET_LIGHT_TYPE_COMPLEX_DETAIL
{
    EM_LC_LIGHT_TYPE anNearLight[LC_LIGHT_COUNT];   
    int nNearLightLen;                              
    EM_LC_LIGHT_TYPE anMiddleLight[LC_LIGHT_COUNT]; 
    int nMiddleLightLen;                            
    EM_LC_LIGHT_TYPE anFarLight[LC_LIGHT_COUNT];    
    int nFarLightLen;                               
    BYTE byReserved[128];                           
} NET_LIGHT_TYPE_COMPLEX_DETAIL;
typedef enum tagEM_LC_SUPPORT_EVENTS
{
    EM_LC_SUPPORT_EVENTS_UNKNOWN,      
    EM_LC_SUPPORT_EVENTS_MOTIONDETECT, 
    EM_LC_SUPPORT_EVENTS_MASK,         
    EM_LC_SUPPORT_EVENTS_ALARM,        
    EM_LC_SUPPORT_EVENTS_ALL,          
} EM_LC_SUPPORT_EVENTS;
#define MAX_SUPPORT_EVENT_NUM 10        
#define MAX_SUPPORT_INTELLISCENE_NUM 40 
typedef struct tagNET_LINKING_ABILITY
{
    EM_LC_SUPPORT_EVENTS anSupportEvents[MAX_SUPPORT_EVENT_NUM];              
    int nSupportEventsLen;                                                    
    EM_SCENE_CLASS_TYPE anSupportIntelliScence[MAX_SUPPORT_INTELLISCENE_NUM]; 
    int nSupportIntelliScenceLen;                                             
    BYTE byReserved[128];                                                     
} NET_LINKING_ABILITY;
#define LC_LIGHT_TYPE_NUM 3 
typedef struct tagNET_FILCKER_LIGHTING
{
    BOOL bSupported;                                 
    NET_LINKING_ABILITY stuAbility;                  
    EM_LC_LIGHT_TYPE anLightType[LC_LIGHT_TYPE_NUM]; 
    int nLightTypeLen;                               
    int anFilckerIntevalTime[2];                     
    int anFilckerTimes[2];                           
    BYTE byReserved[128];                            
} NET_FILCKER_LIGHTING;
typedef struct tagNET_KEEP_LIGHTING
{
    BOOL bSupported;                                 
    NET_LINKING_ABILITY stuAbility;                  
    EM_LC_LIGHT_TYPE anLightType[LC_LIGHT_TYPE_NUM]; 
    int nLightTypeLen;                               
    BYTE byReserved[128];                            
} NET_KEEP_LIGHTING;
typedef struct tagNET_LINKING_DETAIL
{
    NET_FILCKER_LIGHTING stuFilckerLighting; 
    NET_KEEP_LIGHTING stuKeepLighting;       
    BYTE byReserved[128];                    
} NET_LINKING_DETAIL;
typedef struct tagNET_CORRECTION
{
    BOOL bSupported;      
    int nRange;           
    BYTE byReserved[128]; 
} NET_CORRECTION;
typedef struct tagNET_SENSITIVITY
{
    BOOL bSupported;      
    int nRange;           
    BYTE byReserved[128]; 
} NET_SENSITIVITY;
#define LC_POWER_NUM 3        
#define LC_ANGLECONTROL_NUM 3 
#define LC_LIGHT_MODE_NUM 20  
typedef struct tagNET_OUT_LIGHTINGCONTROL_CAPS
{
    DWORD dwSize;                                            
    BOOL bSupport;                                           
    EM_LC_CONFIG_VERSION emConfigVersion;                    
    EM_LC_LIGHT_TYPE emLightType;                            
    EM_LC_LIGHT_TYPE anLightTypeComplex[LC_LIGHT_TYPE_NUM];  
    int nLightTypeComplexLen;                                
    int nNearLightNumber;                                    
    int nMiddleLightNumber;                                  
    int nFarLightNumber;                                     
    EM_LC_MODE emDefaultMode;                                
    EM_LC_MODE anModes[LC_LIGHT_MODE_NUM];                   
    int nModesLen;                                           
    NET_MODES_COMPLEX_LIGHT stuModesComplex;                 
    NET_LIGHT_TYPE_COMPLEX_DETAIL stuLightTypeComplexDetail; 
    NET_LINKING_DETAIL stuLinkingDetail;                     
    int anPower[LC_POWER_NUM];                               
    int anAngleControl[LC_ANGLECONTROL_NUM];                 
    NET_CORRECTION stuCorrection;                            
    NET_SENSITIVITY stuSensitivity;                          
    BOOL bSupportLaserLightMove;                             
    int nLightingTimeSectionNum;                             
    BOOL bSupportByTime;                                     
    BOOL bSupportModesComplex;                               
} NET_OUT_LIGHTINGCONTROL_CAPS;
typedef struct tagNET_IN_GET_COAXIAL_CONTROL_IO_STATUS
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GET_COAXIAL_CONTROL_IO_STATUS;
typedef enum tagEM_COAXIAL_CONTROL_IO_STATUS
{
    EM_COAXIAL_CONTROL_IO_STATUS_UNKNOWN, 
    EM_COAXIAL_CONTROL_IO_STATUS_ON,      
    EM_COAXIAL_CONTROL_IO_STATUS_OFF,     
} EM_COAXIAL_CONTROL_IO_STATUS;
typedef struct tagNET_OUT_GET_COAXIAL_CONTROL_IO_STATUS
{
    DWORD dwSize;                              
    EM_COAXIAL_CONTROL_IO_STATUS emWhiteLight; 
    EM_COAXIAL_CONTROL_IO_STATUS emSpeaker;    
} NET_OUT_GET_COAXIAL_CONTROL_IO_STATUS;
typedef struct tagNET_IN_SUPPORT_GET_AUDIO_DECODE_CAPS
{
    DWORD dwSize; 
} NET_IN_SUPPORT_GET_AUDIO_DECODE_CAPS;
typedef struct tagNET_OUT_SUPPORT_GET_AUDIO_DECODE_CAPS
{
    DWORD dwSize;  
    BOOL bSupport; 
} NET_OUT_SUPPORT_GET_AUDIO_DECODE_CAPS;
typedef struct tagNET_IN_UNIFIEDINFOCOLLECT_CAPS
{
    DWORD dwSize; 
} NET_IN_UNIFIEDINFOCOLLECT_CAPS;
typedef struct tagNET_OUT_UNIFIEDINFOCOLLECT_CAPS
{
    DWORD dwSize;                    
    BOOL bSupportUnifiedInfoCollect; 
} NET_OUT_UNIFIEDINFOCOLLECT_CAPS;
typedef struct tagNET_IN_EXALARMBOX_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_EXALARMBOX_CAPS;
typedef struct tagNET_OUT_EXALARMBOX_CAPS
{
    DWORD dwSize;       
    int nAlarmIn;       
    int nAlarmOut;      
    int nRemoteControl; 
} NET_OUT_EXALARMBOX_CAPS;
typedef struct tagNET_IN_ALARMBOXMANAGER_CAPS
{
    DWORD dwSize; 
} NET_IN_ALARMBOXMANAGER_CAPS;
typedef struct tagNET_OUT_ALARMBOXMANAGER_CAPS
{
    DWORD dwSize;         
    int nMaxBoxNumber;    
    int nMaxInputPerBox;  
    int nMaxOutputPerBox; 
} NET_OUT_ALARMBOXMANAGER_CAPS;
typedef struct tagNET_IN_GET_AUDIO_DETECT_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_AUDIO_DETECT_CAPS;
typedef struct tagNET_OUT_GET_AUDIO_DETECT_CAPS
{
    DWORD dwSize;                                 
    BOOL bVolumeDetect;                           
    BOOL bAnomalyDetect;                          
    unsigned int nAnomalySensitiveRange[2];       
    BOOL bMutationDetect;                         
    unsigned int nMutationThresholdRange[2];      
    BOOL bInfantCryDetect;                        
    BOOL bIntensityDetect;                        
    unsigned int nIntensityDecibelGateRange[2];   
    BOOL bSupportSmartSoundDetect;                
    int nAudioTypeValidNum;                       
    EM_AUDIO_MUTATION_ALARM_TYPE emAudioType[32]; 
    int nConflictInteliEffectiveNum;              
    char szConflictInteli[32][32];                
} NET_OUT_GET_AUDIO_DETECT_CAPS;
typedef struct tagNET_IN_VIDEO_IN_DEFOG_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_VIDEO_IN_DEFOG_CAPS;
typedef struct tagNET_LIGHT_INTENSITY_CAPS
{
    BOOL bSupportLightMode; 
    BYTE byReserved[68];    
} NET_LIGHT_INTENSITY_CAPS;
typedef enum tagEM_IN_DEFOG_MODE
{
    EM_IN_DEFOG_MODE_UNKNOWN, 
    EM_IN_DEFOG_MODE_OFF,     
    EM_IN_DEFOG_MODE_MANUAL,  
    EM_IN_DEFOG_MODE_AUTO,    
} EM_IN_DEFOG_MODE;
typedef struct tagNET_OUT_VIDEO_IN_DEFOG_CAPS
{
    DWORD dwSize;                               
    BOOL bSupportInDefog;                       
    BOOL bSupportCamDefog;                      
    UINT nModeCount;                            
    EM_IN_DEFOG_MODE emMode[8];                 
    NET_LIGHT_INTENSITY_CAPS stuLightIntensity; 
} NET_OUT_VIDEO_IN_DEFOG_CAPS;
typedef struct tagNET_IN_SUPPORT_FACEDB_DOWNLOAD_CAPS
{
    DWORD dwSize; 
} NET_IN_SUPPORT_FACEDB_DOWNLOAD_CAPS;
typedef struct tagNET_OUT_SUPPORT_FACEDB_DOWNLOAD_CAPS
{
    DWORD dwSize;                
    BOOL bSupportFaceDbDownload; 
} NET_OUT_SUPPORT_FACEDB_DOWNLOAD_CAPS;
typedef struct tagNET_IN_DIAGNOSIS_CAPS
{
    DWORD dwSize; 
} NET_IN_DIAGNOSIS_CAPS;
typedef struct tagNET_OUT_DIAGNOSIS_CAPS
{
    DWORD dwSize;            
    BOOL bSupportReport;     
    BOOL bSupportDelInfo;    
    BOOL bSupportDelAllInfo; 
} NET_OUT_DIAGNOSIS_CAPS;
typedef struct tagNET_SMARTLOCKER_CAPS
{
    UINT nMaxFpAmount;    
    UINT nMaxPwdAmount;   
    UINT nMaxCardAmount;  
    BYTE byReserved[132]; 
} NET_SMARTLOCKER_CAPS;
typedef enum tagEM_LOWRATEWPAN_CAPS_TYPE
{
    EM_LOWRATEWPAN_CAPS_TYPE_UNKNOWN = -1, 
    EM_LOWRATEWPAN_CAPS_TYPE_SMARTLOCKER,  
} EM_LOWRATEWPAN_CAPS_TYPE;
typedef struct tagNET_IN_LOWRATEWPAN_CAPS
{
    DWORD dwSize;                    
    int nChannelID;                  
    EM_LOWRATEWPAN_CAPS_TYPE emType; 
    char szModuleSNList[16][32];     
} NET_IN_LOWRATEWPAN_CAPS;
typedef struct tagNET_OUT_LOWRATEWPAN_CAPS
{
    DWORD dwSize;                                
    NET_SMARTLOCKER_CAPS stuSmartLockerCaps[16]; 
    UINT nSmartLockerCapsRet;                    
} NET_OUT_LOWRATEWPAN_CAPS;
typedef struct tagNET_IN_STOP_ADJUSTING_ANGLE
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_STOP_ADJUSTING_ANGLE;
typedef struct tagNET_OUT_STOP_ADJUSTING_ANGLE
{
    DWORD dwSize; 
} NET_OUT_STOP_ADJUSTING_ANGLE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopAdjustingAngle(LLONG lLoginID, const NET_IN_STOP_ADJUSTING_ANGLE* pstInParam, NET_OUT_STOP_ADJUSTING_ANGLE* pstOutParam, int nWaitTime);
typedef enum tagEM_ADJUST_ANGLE_DIRECTION
{
    EM_ADJUST_ANGLE_DIRECTION_UNKNOWN,    
    EM_ADJUST_ANGLE_DIRECTION_NEGATIVE_X, 
    EM_ADJUST_ANGLE_DIRECTION_POSITIVE_X, 
    EM_ADJUST_ANGLE_DIRECTION_NEGATIVE_Y, 
    EM_ADJUST_ANGLE_DIRECTION_POSITIVE_Y, 
} EM_ADJUST_ANGLE_DIRECTION;
typedef struct tagNET_IN_ADJUST_ANGLE_CONTINUOUSLY
{
    DWORD dwSize;                          
    int nChannel;                          
    EM_ADJUST_ANGLE_DIRECTION emDirection; 
    UINT nVelocity;                        
} NET_IN_ADJUST_ANGLE_CONTINUOUSLY;
typedef struct tagNET_OUT_ADJUST_ANGLE_CONTINUOUSLY
{
    DWORD dwSize; 
} NET_OUT_ADJUST_ANGLE_CONTINUOUSLY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AdjustingAngleContinuously(LLONG lLoginID, const NET_IN_ADJUST_ANGLE_CONTINUOUSLY* pstInParam, NET_OUT_ADJUST_ANGLE_CONTINUOUSLY* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_LENS_FUNC_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_LENS_FUNC_CAPS;
typedef enum tagEM_SUPPORT_ANGLE_ADJUST
{
    EM_SUPPORT_ANGLE_ADJUST_UNKNOWN, 
    EM_SUPPORT_ANGLE_ADJUST_NO,      
    EM_SUPPORT_ANGLE_ADJUST_X,       
    EM_SUPPORT_ANGLE_ADJUST_Y,       
    EM_SUPPORT_ANGLE_ADJUST_XY,      
} EM_SUPPORT_ANGLE_ADJUST;
typedef enum tagEM_SUPPORT_SCENE_MODE
{
    EM_SUPPORT_SCENE_MODE_UNKNOWN, 
    EM_SUPPORT_SCENE_MODE_MANUAL,  
    EM_SUPPORT_SCENE_MODE_AUTO,    
} EM_SUPPORT_SCENE_MODE;
typedef struct tagNET_SCENE_CORRECTION_CAPS
{
    BOOL bSupport;                     
    int nModesCount;                   
    EM_SUPPORT_SCENE_MODE emModes[32]; 
    char szReserved[64];               
} NET_SCENE_CORRECTION_CAPS;
typedef struct tagNET_OUT_GET_LENS_FUNC_CAPS
{
    DWORD dwSize;                                 
    UINT nDepthField;                             
    EM_SUPPORT_ANGLE_ADJUST emSupportAngleAdjust; 
    UINT nMaxVelocity;                            
    NET_SCENE_CORRECTION_CAPS stuSceneCorrection; 
} NET_OUT_GET_LENS_FUNC_CAPS;
typedef struct tagNET_IN_ADJUST_DEPTH_FIELD
{
    DWORD dwSize;      
    UINT nChannel;     
    float fDepthField; 
} NET_IN_ADJUST_DEPTH_FIELD;
typedef struct tagNET_OUT_ADJUST_DEPTH_FIELD
{
    DWORD dwSize; 
} NET_OUT_ADJUST_DEPTH_FIELD;
typedef struct tagNET_IN_ADJUST_DEPTH_FIELD_CONTINUOUSLY
{
    DWORD dwSize;           
    UINT nChannel;          
    float fDepthFieldSpeed; 
} NET_IN_ADJUST_DEPTH_FIELD_CONTINUOUSLY;
typedef struct tagNET_OUT_ADJUST_DEPTH_FIELD_CONTINUOUSLY
{
    DWORD dwSize; 
} NET_OUT_ADJUST_DEPTH_FIELD_CONTINUOUSLY;
typedef struct tagNET_IN_GET_DEPTH_FIELD_STATUS
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GET_DEPTH_FIELD_STATUS;
typedef enum tagEM_DEPTH_FIELD_STATUS
{
    EM_DEPTH_FIELD_STATUS_UNKNOWN,        
    EM_DEPTH_FIELD_STATUS_NORMAL,         
    EM_DEPTH_FIELD_STATUS_AUTODEPTHFIELD, 
} EM_DEPTH_FIELD_STATUS;
typedef struct tagNET_OUT_GET_DEPTH_FIELD_STATUS
{
    DWORD dwSize;                   
    float fDepthField;              
    UINT nTotalDepthFieldSteps;     
    EM_DEPTH_FIELD_STATUS emStatus; 
} NET_OUT_GET_DEPTH_FIELD_STATUS;
typedef struct tagNET_IN_AUTO_ADJUST_DEPTH_FIELD
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_AUTO_ADJUST_DEPTH_FIELD;
typedef struct tagNET_OUT_AUTO_ADJUST_DEPTH_FIELD
{
    DWORD dwSize; 
} NET_OUT_AUTO_ADJUST_DEPTH_FIELD;
typedef enum tagEM_CORRECT_SCENE_TYPE
{
    EM_CORRECT_SCENE_TYPE_AUTO,   
    EM_CORRECT_SCENE_TYPE_MANUAL, 
} EM_CORRECT_SCENE_TYPE;
typedef enum tagEM_CORRECT_SCENE_DIRECTION
{
    EM_CORRECT_SCENE_DIRECTION_CLOCKWISE,      
    EM_CORRECT_SCENE_DIRECTION_ANTI_CLOCKWISE, 
} EM_CORRECT_SCENE_DIRECTION;
typedef enum tagEM_CORRECT_SCENE_MODE
{
    EM_CORRECT_SCENE_MODE_CONTINUOUS_ROTATION, 
    EM_CORRECT_SCENE_MODE_ANTI_INCHING,        
} EM_CORRECT_SCENE_MODE;
typedef struct tagNET_IN_CORRECT_SCENE
{
    DWORD dwSize;                           
    UINT nChannel;                          
    EM_CORRECT_SCENE_TYPE emType;           
    EM_CORRECT_SCENE_DIRECTION emDirection; 
    UINT nStep;                             
    EM_CORRECT_SCENE_MODE emMode;           
} NET_IN_CORRECT_SCENE;
typedef struct tagNET_OUT_CORRECT_SCENE
{
    DWORD dwSize; 
} NET_OUT_CORRECT_SCENE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AdjustDepthField(LLONG lLoginID, const NET_IN_ADJUST_DEPTH_FIELD* pstInParam, NET_OUT_ADJUST_DEPTH_FIELD* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AdjustDepthFieldContinuously(LLONG lLoginID, const NET_IN_ADJUST_DEPTH_FIELD_CONTINUOUSLY* pstInParam, NET_OUT_ADJUST_DEPTH_FIELD_CONTINUOUSLY* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDepthFieldStatus(LLONG lLoginID, const NET_IN_GET_DEPTH_FIELD_STATUS* pstInParam, NET_OUT_GET_DEPTH_FIELD_STATUS* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AutoAdjustDepthField(LLONG lLoginID, const NET_IN_AUTO_ADJUST_DEPTH_FIELD* pstInParam, NET_OUT_AUTO_ADJUST_DEPTH_FIELD* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CorrectScene(LLONG lLoginID, const NET_IN_CORRECT_SCENE* pstInParam, NET_OUT_CORRECT_SCENE* pstOutParam, int nWaitTime);
typedef struct tagNET_GPS_POSITION
{
    double dbLongitude;   
    double dbLatitude;    
    double dbAltitude;    
    char szReserved[128]; 
} NET_GPS_POSITION;
typedef struct tagNET_3DFLOAT_POINT
{
    float fXPosition;    
    float fYPosition;    
    float fZPosition;    
    char szReserved[28]; 
} NET_3DFLOAT_POINT;
typedef struct tagNET_3DFLOAT_SIZE
{
    float fLength;       
    float fWidth;        
    float fHeigth;       
    char szReserved[28]; 
} NET_3DFLOAT_SIZE;
typedef struct tagNET_3DFLOAT_POSTURE
{
    float fYaw;          
    float fPitch;        
    float fRool;         
    char szReserved[28]; 
} NET_3DFLOAT_POSTURE;
typedef struct tagNET_VEHICLE_FUSED_OBJECT
{
    unsigned int nObjectID;               
    EM_ANALYSE_OBJECT_TYPE emObjectType;  
    float fSpeed;                         
    NET_GPS_POSITION stuGPSPosition;      
    DH_MSG_OBJECT stuPlate;               
    DH_MSG_OBJECT stuVehicle;             
    VA_OBJECT_NONMOTOR stuNonMotor;       
    int nLaneID;                          
    float fAcceleration;                  
    NET_3DFLOAT_POINT stu3DPointPosition; 
    NET_3DFLOAT_SIZE stu3DSize;           
    NET_3DFLOAT_POSTURE stu3DPosture;     
    NET_3DFLOAT_POINT stuVelocity;        
    char szBrandYearText[64];             
    char szReserved[3864];                
} NET_VEHICLE_FUSED_OBJECT;
typedef struct tagNET_VIDEO_ANALYSE_ANALYSE_PROC
{
    int nChannelId;                           
    double dbPTS;                             
    NET_TIME_EX stuUTC;                       
    UINT nUTCMS;                              
    unsigned int nSequence;                   
    NET_VEHICLE_FUSED_OBJECT* pstuObjectList; 
    int nObjectListNum;                       
    int nEventListCount;                      
    DWORD dwEventCode[32];                    
    void* pstuEventList[32];                  
    char szReserved[1916 - 32 * POINTERSIZE]; 
} NET_VIDEO_ANALYSE_ANALYSE_PROC;
typedef void(CALLBACK* fVideoAnalyseAnalyseProc)(LLONG lAttachHandle, NET_VIDEO_ANALYSE_ANALYSE_PROC* pstuVideoAnalyseTrackProc, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VIDEO_ANALYSE_ANALYSE_PROC
{
    DWORD dwSize;                                       
    int nChannelId;                                     
    fVideoAnalyseAnalyseProc cbVideoAnalyseAnalyseProc; 
    LDWORD dwUser;                                      
} NET_IN_ATTACH_VIDEO_ANALYSE_ANALYSE_PROC;
typedef struct tagNET_OUT_ATTACH_VIDEO_ANALYSE_ANALYSE_PROC
{
    DWORD dwSize; 
} NET_OUT_ATTACH_VIDEO_ANALYSE_ANALYSE_PROC;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVideoAnalyseAnalyseProc(LLONG lLoginID, NET_IN_ATTACH_VIDEO_ANALYSE_ANALYSE_PROC* pstInParam, NET_OUT_ATTACH_VIDEO_ANALYSE_ANALYSE_PROC* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVideoAnalyseAnalyseProc(LLONG lAttachHandle);
typedef struct tagNET_VEHICLE_INOUT_ANALYSE_PROC
{
    char szName[128];                  
    double dbPTS;                      
    NET_TIME_EX stuUTC;                
    int nEventID;                      
    unsigned int nSequence;            
    int nFrameSequence;                
    NET_VEHICLE_OBJECT* pstuObjets;    
    int nObjectNum;                    
    int nStatNum;                      
    NET_TRAFFIC_FLOW_STAT stuStats[8]; 
    double dbRadarInstallAngle;        
    char szReserved[2048];             
} NET_VEHICLE_INOUT_ANALYSE_PROC;
typedef void(CALLBACK* fVehicleInOutAnalyseProc)(LLONG lAttachHandle, NET_VEHICLE_INOUT_ANALYSE_PROC* pstuVehicleInOutAnalyseProc, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_TRAFFIC_FLOW_STAT_REAL_FLOW
{
    DWORD dwSize;                                       
    char szReserved[4];                                 
    fVehicleInOutAnalyseProc cbVehicleInOutAnalyseProc; 
    LDWORD dwUser;                                      
} NET_IN_ATTACH_TRAFFIC_FLOW_STAT_REAL_FLOW;
typedef struct tagNET_OUT_ATTACH_TRAFFIC_FLOW_STAT_REAL_FLOW
{
    DWORD dwSize; 
} NET_OUT_ATTACH_TRAFFIC_FLOW_STAT_REAL_FLOW;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachTrafficFlowStatRealFlow(LLONG lLoginID, NET_IN_ATTACH_TRAFFIC_FLOW_STAT_REAL_FLOW* pstuInParam, NET_OUT_ATTACH_TRAFFIC_FLOW_STAT_REAL_FLOW* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachTrafficFlowStatRealFlow(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_FILE_TRANSFER_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_FILE_TRANSFER_CAPS;
typedef struct tagNET_OUT_GET_FILE_TRANSFER_CAPS
{
    DWORD dwSize;                          
    BOOL bSupportFaceDbDownload;           
    BOOL bSupportPlateNumberDbDownload;    
    BOOL bSupportDownloadFaceLibByGroupID; 
} NET_OUT_GET_FILE_TRANSFER_CAPS;
typedef struct tagNET_IN_AUDIO_OUTPUT_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_AUDIO_OUTPUT_CAPS;
typedef struct tagNET_AUDIO_OUTPUT_TYPE_INFO
{
    int nLineOut;          
    int nSpeaker;          
    BYTE byReserved[1016]; 
} NET_AUDIO_OUTPUT_TYPE_INFO;
typedef struct tagNET_OUT_AUDIO_OUTPUT_CAPS
{
    DWORD dwSize;                       
    NET_AUDIO_OUTPUT_TYPE_INFO stuType; 
} NET_OUT_AUDIO_OUTPUT_CAPS;
typedef struct tagNET_IN_VIDEO_TALK_MANAGER_CAPS
{
    DWORD dwSize; 
} NET_IN_VIDEO_TALK_MANAGER_CAPS;
typedef enum tagEM_VIDEO_TALK_PROTOCOL
{
    EM_VIDEO_TALK_PROTOCOL_UKNONWN, 
    EM_VIDEO_TALK_PROTOCOL_SIP,     
    EM_VIDEO_TALK_PROTOCOL_V2,      
    EM_VIDEO_TALK_PROTOCOL_V3,      
} EM_VIDEO_TALK_PROTOCOL;
typedef enum tagEM_VIDEO_TALK_CLASS
{
    EM_VIDEO_TALK_CLASS_UNKNOWN, 
    EM_VIDEO_TALK_CLASS_VTO,     
    EM_VIDEO_TALK_CLASS_VTH,     
    EM_VIDEO_TALK_CLASS_VTS,     
    EM_VIDEO_TALK_CLASS_VTNC,    
    EM_VIDEO_TALK_CLASS_VTA,     
    EM_VIDEO_TALK_CLASS_VTT,     
} EM_VIDEO_TALK_CLASS;
typedef struct tagNET_OUT_VIDEO_TALK_MANAGER_CAPS
{
    DWORD dwSize;                          
    BOOL bSupport;                         
    EM_VIDEO_TALK_CLASS emSIPClass;        
    EM_VIDEO_TALK_CLASS emV2Class;         
    EM_VIDEO_TALK_CLASS emV3Class;         
    int nProtocalNum;                      
    EM_VIDEO_TALK_PROTOCOL emProtocol[16]; 
    BOOL bSupportIssuedVTAList;            
    BOOL bSupportVTSBasicInfo;             
} NET_OUT_VIDEO_TALK_MANAGER_CAPS;
typedef enum tagNET_DOORWORK_MODE
{
    NET_DOORWORK_MODE_UNKNOWN = 0,          
    NET_DOORWORK_MODE_NORMAL = 1,           
    NET_DOORWORK_MODE_SHUTLOCK = 2,         
    NET_DOORWORK_MODE_UNUSED = 3,           
    NET_DOORWORK_MODE_OPENDOORCONTINUE = 4, 
} NET_DOORWORK_MODE;
typedef struct tagNET_GET_DOORWORK_MODE
{
    DWORD dwSize;
    int nChannel;                    
    NET_DOORWORK_MODE emControlMode; 
} NET_GET_DOORWORK_MODE;
typedef enum tagEM_AUDIO_CB_FLAG
{
    EM_AUDIO_CB_FLAG_UNKNOWN,
    EM_AUDIO_CB_FLAG_NEWCALL,       
    EM_AUDIO_CB_FLAG_REMOTE_HANGUP, 
    EM_AUDIO_CB_FLAG_DISCONNECT,    
    EM_AUDIO_CB_FLAG_RING,          
} EM_AUDIO_CB_FLAG;
typedef int(CALLBACK* pfVtEventCallBack)(LLONG instId, LLONG ulRegisterId, LLONG ulSessionId, int nEvent, char* pDataBuf, DWORD dwBufSize, LDWORD dwUser);
typedef enum tagEM_NEWCALL_ACTION
{
    EM_NEWCALL_ACTION_UNKNOWN, 
    EM_NEWCALL_ACTION_REFUSE,  
    EM_NEWCALL_ACTION_ACCEPT,  
} EM_NEWCALL_ACTION;
typedef enum tagEM_VT_PARAM_VALID
{
    EM_VT_PARAM_VALID_EVENT_CB = 0x0001,
    EM_VT_PARAM_VALID_USER_DATA = 0x0002,
    EM_VT_PARAM_VALID_MID_NUM = 0x0004,
    EM_VT_PARAM_VALID_ACTION = 0x0008,
    EM_VT_PARAM_VALID_WAITTIME = 0x0010,
    EM_VT_PARAM_VALID_VIDEOWND = 0x0020,
    EM_VT_PARAM_VALID_CSMODE = 0x0040,
    EM_VT_PARAM_VALID_AUDIO_ENCODE = 0x0080,
    EM_VT_PARAM_VALID_LOCAL_IP = 0x0100,
} EM_VT_PARAM_VALID;
typedef struct tagNET_VT_TALK_PARAM
{
    DWORD dwSize;                        
    int nValidFlag;                      
    pfVtEventCallBack pfEventCb;         
    LDWORD dwUser;                       
    char szPeerMidNum[16];               
    EM_NEWCALL_ACTION emAction;          
    int nWaitTime;                       
    HWND hVideoWnd;                      
    BOOL bClient;                        
    DHDEV_TALKDECODE_INFO stAudioEncode; 
} NET_VT_TALK_PARAM;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_VT_RegisterVto(const char* pszIp, int nPort = 13801);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_VT_UnRegisterVto(LLONG ulLongId);
typedef struct tagNET_UAV_FLY_INFO
{
    float fAltitude;        
    float fDistance;        
    float fHorizontalSpeed; 
    float fVerticalSpeed;   
    int nRCLinkQuality;     
    char reserved[512];
} NET_UAV_FLY_INFO;
typedef void(CALLBACK* fUavFlyCallBack)(LLONG lAttachHandle, NET_UAV_FLY_INFO* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_UAV_FLY
{
    DWORD dwSize;
    fUavFlyCallBack cbUavFly; 
    DWORD dwUser;             
} NET_IN_ATTACH_UAV_FLY;
typedef struct tagNET_OUT_ATTACH_UAV_FLY
{
    DWORD dwSize;
} NET_OUT_ATTACH_UAV_FLY;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachUavFly(LLONG lLoginID, const NET_IN_ATTACH_UAV_FLY* pInParam, NET_OUT_ATTACH_UAV_FLY* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachUavFly(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSelfCheckInfo(LLONG lLoginID, const NET_IN_GET_SELTCHECK_INFO* pInParam, NET_SELFCHECK_INFO* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagLASER_IN_INFO
{
    DWORD dwSize;    
    UINT nChannelID; 
} LASER_IN_INFO;
typedef struct tagLaser_OUT_INFO
{
    DWORD dwSize; 
} LASER_OUT_INFO;
typedef struct tagEIS_IN_INFO
{
    DWORD dwSize;    
    UINT nChannelID; 
} EIS_IN_INFO;
typedef struct tagEIS_OUT_INFO
{
    DWORD dwSize; 
} EIS_OUT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartLaser(LLONG lLoginID, const LASER_IN_INFO* pLaserDataIn, LASER_OUT_INFO* pLaserDataOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopLaser(LLONG lLoginID, const LASER_IN_INFO* pLaserDataIn, LASER_OUT_INFO* pLaserDataOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartEIS(LLONG lLoginID, const EIS_IN_INFO* pEISDataIn, EIS_OUT_INFO* pEISDataOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopEIS(LLONG lLoginID, const EIS_IN_INFO* pEISDataIn, EIS_OUT_INFO* pEISDataOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ManualCheckPSTN(LLONG lLoginID, const NET_IN_PSTN_MANUALCHECK_STATE* pInBuf, NET_OUT_PSTN_MANUALCHECK_STATE* pOutBuf, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
#define MAX_NUM_EX_MODULE 16    
#define MAX_NUM_ADDR_IN_BUS 256 
typedef struct tagNET_IN_EXMODULE_INFO
{
    DWORD dwSize; 
} NET_IN_EXMODULE_INFO;
typedef struct tagNET_OUT_EXMODULE_INFO
{
    NET_BUS_TYPE emBusType;         
    int nChannelID;                 
    int nAddrCount;                 
    int nAddr[MAX_NUM_ADDR_IN_BUS]; 
    char reserved[1024];            
} NET_OUT_EXMODULE_INFO;
typedef struct tagNET_OUT_EXMODULE_INFO_ALL
{
    DWORD dwSize;                                             
    int nExModuleCount;                                       
    NET_OUT_EXMODULE_INFO stuExModuleInfo[MAX_NUM_EX_MODULE]; 
} NET_OUT_EXMODULE_INFO_ALL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetExModuleState(LLONG lLoginID, const NET_IN_EXMODULE_INFO* pInParam, NET_OUT_EXMODULE_INFO_ALL* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
#define MASTERSALVE_CLASS_LEN 16
typedef struct tagNET_IN_MSGROUP_OPEN_INFO
{
    DWORD dwSize;  
    int nGroupID;  
    int nSlaveID;  
    int nMasterID; 
    int nChannel;  
} NET_IN_MSGROUP_OPEN_INFO;
typedef struct tagNET_OUT_MSGROUP_OPEN_INFO
{
    DWORD dwSize;  
    DWORD dwToken; 
} NET_OUT_MSGROUP_OPEN_INFO;
typedef struct tagNET_IN_MSGROUP_LOCATE_INFO
{
    DWORD dwSize;          
    DWORD dwToken;         
    DH_POINT stuPoint;     
    short snMasterInfo[3]; 
} NET_IN_MSGROUP_LOCATE_INFO;
typedef struct tagNET_OUT_MSGROUP_LOCATE_INTO
{
    DWORD dwSize;   
    short snPTZ[3]; 
} NET_OUT_MSGROUP_LOCATE_INTO;
typedef struct tagNET_IN_MSGROUP_TRACK_INFO
{
    DWORD dwSize;                        
    DWORD dwToken;                       
    char szClass[MASTERSALVE_CLASS_LEN]; 
    DWORD dwObjectID;                    
} NET_IN_MSGROUP_TRACK_INFO;
typedef struct tagNET_OUT_MSGROUP_TRACK_INFO
{
    DWORD dwSize; 
} NET_OUT_MSGROUP_TRACK_INFO;
typedef struct tagNET_IN_MSGROUP_CLOSE_INFO
{
    DWORD dwSize;  
    DWORD dwToken; 
} NET_IN_MSGROUP_CLOSE_INFO;
typedef struct tagNET_OUT_MSGROUP_CLOSE_INFO
{
    DWORD dwSize; 
} NET_OUT_MSGROUP_CLOSE_INFO;
typedef struct tagNET_IN_MSGROUP_RECTLOCATE_INFO
{
    DWORD dwSize;       
    DWORD dwToken;      
    NET_RECT stuRect;   
    int nRectDirection; 
} NET_IN_MSGROUP_RECTLOCATE_INFO;
typedef struct tagNET_OUT_MSGROUP_RECTLOCATE_INFO
{
    DWORD dwSize; 
    int nPTZ[3];  
} NET_OUT_MSGROUP_RECTLOCATE_INFO;
typedef struct tagNET_IN_MSGROUP_SLAVE_POSITION_TO_MASTER_INFO
{
    DWORD dwSize;     
    DWORD dwToken;    
    int nPTZ[3];      
    NET_RECT stuRect; 
} NET_IN_MSGROUP_SLAVE_POSITION_TO_MASTER_INFO;
typedef struct tagNET_OUT_MSGROUP_SLAVE_POSITION_TO_MASTER_INFO
{
    DWORD dwSize;     
    NET_RECT stuRect; 
} NET_OUT_MSGROUP_SLAVE_POSITION_TO_MASTER_INFO;
typedef struct tagNET_MSGROUP_NOTIFY_INFO
{
    DWORD dwSubscribeID;                 
    int nSlaveID;                        
    char szClass[MASTERSALVE_CLASS_LEN]; 
    DWORD dwObjectID;                    
    NET_RECT stuBoundingBox;             
    BYTE byReserved[512];                
} NET_MSGROUP_NOTIFY_INFO;
typedef void(CALLBACK* fMasterSlaveCallBack)(LLONG lAttachHandle, NET_MSGROUP_NOTIFY_INFO* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_MSGROUP_ATTACH_INFO
{
    DWORD dwSize;                  
    fMasterSlaveCallBack cbNotify; 
    LDWORD dwUser;                 
    int nGroupID;                  
    int nChannel;                  
} NET_IN_MSGROUP_ATTACH_INFO;
typedef struct tagNET_OUT_MSGROUP_ATTACH_INFO
{
    DWORD dwSize; 
} NET_OUT_MSGROUP_ATTACH_INFO;
typedef enum tagEM_MSGROUP_OPERATE_TYPE
{
    EM_MSGROUP_OPERATE_OPEN,                     
    EM_MSGROUP_OPERATE_LOCATE,                   
    EM_MSGROUP_OPERATE_TRACK,                    
    EM_MSGROUP_OPERATE_CLOSE,                    
    EM_MSGROUP_OPERATE_RECTLOCATE,               
    EM_MSGROUP_OPERATE_SLAVE_POSITION_TO_MASTER, 
} EM_MSGROUP_OPERATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateMasterSlaveGroup(LLONG lLoginID, EM_MSGROUP_OPERATE_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachMasterSlaveGroup(LLONG lLoginID, const NET_IN_MSGROUP_ATTACH_INFO* pInParam, NET_OUT_MSGROUP_ATTACH_INFO* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachMasterSlaveGroup(LLONG lAttachHandle);
#define MAX_TRAFFIC_LANE_NUM 16     
#define MAX_CAMERA_PERIPHERAL_NUM 8 
#define MAX_STORAGE_NUM 8           
#define MAX_PARTITION_NUM 8         
typedef struct tagNET_PARTITION_INFO
{
    double dbTotalBytes; 
    double dbUsedBytes;  
    BOOL bError;         
    BYTE byReserved[64]; 
} NET_PARTITION_INFO;
typedef enum tagENUM_STORAGE_STATE
{
    ENUM_STORAGE_STATE_UNKONWN,      
    ENUM_STORGAE_STATE_READ_ERROR,   
    ENUM_STORAGE_STATE_INITIALIZING, 
    ENUM_STORAGE_STATE_READ_SUCCESS, 
} ENUM_STORAGE_STATE;
typedef struct tagNET_STORAGE_INFO
{
    ENUM_STORAGE_STATE emState;                        
    int nPartitonNum;                                  
    NET_PARTITION_INFO stuPartions[MAX_PARTITION_NUM]; 
    BYTE byReserved[128];                              
} NET_STORAGE_INFO;
typedef struct tagNET_RESOURCE_STATE
{
    int nIPChanneIn;           
    int nNetRemain;            
    int nNetCapability;        
    int nRemotePreview;        
    int nRmtPlayDownload;      
    int nRemoteSendRemain;     
    int nRemoteSendCapability; 
    BYTE byReserved[32];       
} NET_RESOURCE_STATE;
typedef struct tagNET_WORKSTATE
{
    BOOL bOnline;                                 
    char szFirmwareVersion[DH_COMMON_STRING_128]; 
    float fTemperature;                           
    float fPowerDissipation;                      
    int nUtilizationOfCPU;                        
    int nStorageNum;                               
    NET_STORAGE_INFO stuStorages[MAX_STORAGE_NUM]; 
    int nUpTimeLast;                               
    int nUpTimeTotal;                              
    double dbMemInfoTotal;                         
    double dbMemInfoFree;                          
    BYTE byReserved1[4];                           
    char szDevType[32];                            
    NET_RESOURCE_STATE stuResourceStat;            
    BYTE byReserved[8];                            
} NET_WORKSTATE;
typedef struct tagNET_QUERY_WORK_STATE
{
    DWORD dwSize;               
    NET_WORKSTATE stuWorkState; 
} NET_QUERY_WORK_STATE;
typedef struct tagNET_IN_QUERY_CAPSULE_LOCKSTATE
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_QUERY_CAPSULE_LOCKSTATE;
typedef enum tagNET_EM_ONLINESTATE
{
    NET_EM_ONLINESTATE_UNKNOWN, 
    NET_EM_ONLINESTATE_ONLINE,  
    NET_EM_ONLINESTATE_OFFLINE, 
} NET_EM_ONLINESTATE;
typedef enum tagNET_EM_LOCKSTATE
{
    NET_EM_LOCKSTATE_UNKNOWN,    
    NET_EM_LOCKSTATE_Open,       
    NET_EM_LOCKSTATE_CLOSE,      
    NET_EM_LOCKSTATE_ABNORMAL,   
    NET_EM_LOCKSTATE_FAKELOCKED, 
} NET_EM_LOCKSTATE;
typedef struct tagNET_OUT_QUERY_CAPSULE_LOCKSTATE
{
    DWORD dwSize;                     
    NET_EM_LOCKSTATE emLockState;     
    NET_EM_ONLINESTATE emOnLineState; 
} NET_OUT_QUERY_CAPSULE_LOCKSTATE;
typedef struct tagNET_IN_QUERY_CAPSULE_HUMANNUM
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_QUERY_CAPSULE_HUMANNUM;
typedef struct tagNET_OUT_QUERY_CAPSULE_HUMANNUM
{
    DWORD dwSize;   
    UINT nHumanNum; 
} NET_OUT_QUERY_CAPSULE_HUMANNUM;
typedef enum tagNET_EM_RECORD_MODE
{
    NET_EM_RECORD_MODE_UNKNOWN, 
    NET_EM_RECORD_MODE_COURSE,  
    NET_EM_RECORD_MODE_NORMAL,  
} NET_EM_RECORD_MODE;
typedef struct tagNET_IN_SET_COURSE_RECORD_MODE
{
    DWORD dwSize;
    NET_EM_RECORD_MODE emRecordMode; 
    int nClassRoomID;                
} NET_IN_SET_COURSE_RECORD_MODE;
typedef struct tagNET_OUT_SET_COURSE_RECORD_MODE
{
    DWORD dwSize;
} NET_OUT_SET_COURSE_RECORD_MODE;
typedef struct tagNET_IN_GET_COURSE_RECORD_MODE
{
    DWORD dwSize;
    int nClassRoomID; 
} NET_IN_GET_COURSE_RECORD_MODE;
typedef struct tagNET_OUT_GET_COURSE_RECORD_MODE
{
    DWORD dwSize;
    NET_EM_RECORD_MODE emRecordMode; 
} NET_OUT_GET_COURSE_RECORD_MODE;
typedef struct tagNET_DEVICE_COMMON_INFO
{
    char szVendor[DH_COMMON_STRING_32];    
    char szDviceType[DH_COMMON_STRING_32]; 
    char szVersion[DH_COMMON_STRING_128];  
    char szSerialNo[DH_COMMON_STRING_128]; 
    BYTE byReserved[128];                  
} NET_DEVICE_COMMON_INFO;
typedef struct tagNET_VEHICLE_DETECTOR_INFO
{
    NET_DEVICE_COMMON_INFO stuDevice;       
    int nWokingState;                       
    int nMatchState;                        
    int nLaneNum;                           
    int nUsageOfLane[MAX_TRAFFIC_LANE_NUM]; 
    BYTE byReserved[128];                   
} NET_VEHICLE_DETECTOR_INFO;
typedef struct tagNET_SIGNAL_DETECTOR_INFO
{
    NET_DEVICE_COMMON_INFO stuDevice; 
    int nWokingState;                 
    int nMatchState;                  
    BYTE byReserved[128];             
} NET_SIGNAL_DETECTOR_INFO;
typedef struct tagNET_STROBOSCOPIC_LAMP_INFO
{
    NET_DEVICE_COMMON_INFO stuDevice; 
    int nWokingState;                 
    int nMatchState;                  
    BYTE byReserved[128];             
} NET_STROBOSCOPIC_LAMP_INFO;
typedef struct tagNET_RS485_STROBOSCOPIC_LAMP_INFO
{
    NET_DEVICE_COMMON_INFO stuDevice; 
    int nWokingState;                 
    int nMatchState;                  
    int nPeripheralAddress;   
    int nPeripheralStateCode; 
    int nLuminance;           
    int nSensibility;         
    float fPowerDissipation;  
    BYTE byReserved[128]; 
} NET_RS485_STROBOSCOPIC_LAMP_INFO;
typedef struct tagNET_FLASH_LAMP_INFO
{
    NET_DEVICE_COMMON_INFO stuDevice; 
    int nWokingState;                 
    int nMatchState;                  
    BYTE byReserved[128];             
} NET_FLASH_LAMP_INFO;
typedef struct tagNET_RS485_FLASH_LAMP_INFO
{
    NET_DEVICE_COMMON_INFO stuDevice; 
    int nWokingState;                 
    int nMatchState;                  
    int nPeripheralAddress;   
    int nPeripheralStateCode; 
    int nLuminance;           
    int nSensibility;         
    float fPowerDissipation;  
    BYTE byReserved[128]; 
} NET_RS485_FLASH_LAMP_INFO;
typedef struct tagNET_RS485_STEADY_LAMP_INFO
{
    NET_DEVICE_COMMON_INFO stuDevice; 
    int nWokingState;                 
    int nMatchState;                  
    int nPeripheralAddress;   
    int nPeripheralStateCode; 
    int nLuminance;           
    int nSensibility;         
    float fPowerDissipation;  
    BYTE byReserved[128]; 
} NET_RS485_STEADY_LAMP_INFO;
typedef struct tagNET_CAMERA_PERIPHERAL_INFO
{
    int nVehicleDetectorNum;                                                  
    NET_VEHICLE_DETECTOR_INFO stuVehicleDetectors[MAX_CAMERA_PERIPHERAL_NUM]; 
    int nSignalDetectorNum;                                                 
    NET_SIGNAL_DETECTOR_INFO stuSignalDetectors[MAX_CAMERA_PERIPHERAL_NUM]; 
    int nStroboscopicLampNum;                                                   
    NET_STROBOSCOPIC_LAMP_INFO stuStroboscopicLamps[MAX_CAMERA_PERIPHERAL_NUM]; 
    int nFlashLampNum;                                            
    NET_FLASH_LAMP_INFO stuFlashLamps[MAX_CAMERA_PERIPHERAL_NUM]; 
    int nRS485StroboscopicLampNum;                                                         
    NET_RS485_STROBOSCOPIC_LAMP_INFO stuRS485StroboscopicLamps[MAX_CAMERA_PERIPHERAL_NUM]; 
    int nRS485FlashLampNum;                                                  
    NET_RS485_FLASH_LAMP_INFO stuRS485FlashLamps[MAX_CAMERA_PERIPHERAL_NUM]; 
    int nRS485SteadyLampNum;                                                   
    NET_RS485_STEADY_LAMP_INFO stuRS485SteadyLamps[MAX_CAMERA_PERIPHERAL_NUM]; 
    BYTE byReserved[128]; 
} NET_CAMERA_PERIPHERAL_INFO;
typedef struct tagNET_REMOTECAMERA_NOTIFY_INFO
{
    int nChannelID;                            
    NET_WORKSTATE stuNative;                   
    NET_CAMERA_PERIPHERAL_INFO stuPeripherals; 
    BYTE byReserved[128];                      
} NET_REMOTECAMERA_NOTIFY_INFO;
typedef void(CALLBACK* fRemoteCameraStateCallBack)(LLONG lAttachHandle, NET_REMOTECAMERA_NOTIFY_INFO* pstuState, DWORD dwStateSize, LDWORD dwUser);
typedef struct tagNET_IN_REMOTECAMERA_ATTACH_INFO
{
    DWORD dwSize;                        
    fRemoteCameraStateCallBack cbNotify; 
    LDWORD dwUser;                       
} NET_IN_REMOTECAMERA_ATTACH_INFO;
typedef struct tagNET_OUT_REMOTECAMERA_ATTACH_INFO
{
    DWORD dwSize; 
} NET_OUT_REMOTECAMERA_ATTACH_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRemoteCameraState(LLONG lLoginID, const NET_IN_REMOTECAMERA_ATTACH_INFO* pInParam, NET_OUT_REMOTECAMERA_ATTACH_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRemoteCameraState(LLONG lAttachHandle);
typedef enum tagEM_STREAM_TYPE
{
    EM_STREAM_TYPE_UNKNOWN,  
    EM_STREAM_TYPE_MAIN,     
    EM_STREAM_TYPE_EXTRA1,   
    EM_STREAM_TYPE_EXTRA2,   
    EM_STREAM_TYPE_EXTRA3,   
    EM_STREAM_TYPE_EXTRAALL, 
} EM_STREAM_TYPE;
typedef struct tagNET_RECORDMANAGER_NOTIFY_INFO
{
    int nChannelID;              
    EM_STREAM_TYPE emStreamType; 
    BOOL bState;                 
    BYTE byReserved[128];        
} NET_RECORDMANAGER_NOTIFY_INFO;
typedef void(CALLBACK* fRecordManagerStateCallBack)(LLONG lAttachHandle, NET_RECORDMANAGER_NOTIFY_INFO* pstuState, DWORD dwStateSize, LDWORD dwUser);
typedef struct tagNET_IN_RECORDMANAGER_ATTACH_INFO
{
    DWORD dwSize;                         
    fRecordManagerStateCallBack cbNotify; 
    LDWORD dwUser;                        
} NET_IN_RECORDMANAGER_ATTACH_INFO;
typedef struct tagNET_OUT_RECORDMANAGER_ATTACH_INFO
{
    DWORD dwSize; 
} NET_OUT_RECORDMANAGER_ATTACH_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRecordManagerState(LLONG lLoginID, const NET_IN_RECORDMANAGER_ATTACH_INFO* pInParam, NET_OUT_RECORDMANAGER_ATTACH_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRecordManagerState(LLONG lAttachHandle);
typedef enum tagNET_EM_PATROL_STATUS
{
    NET_EM_PATROL_STATUS_UNKNOWN, 
    NET_EM_PATROL_STATUS_BEGIN,   
    NET_EM_PATROL_STATUS_END,     
    NET_EM_PATROL_STATUS_FAIL,    
} NET_EM_PATROL_STATUS;
typedef struct tagNET_IN_PATROL_STATUS_INFO
{
    DWORD dwSize;                        
    NET_EM_PATROL_STATUS emPatrolStatus; 
} NET_IN_PATROL_STATUS_INFO;
typedef struct tagNET_OUT_PATROL_STATUS_INFO
{
    DWORD dwSize; 
} NET_OUT_PATROL_STATUS_INFO;
typedef enum tagNET_EM_NOTIFY_TYPE
{
    NET_EM_NOTIFY_PATROL_STATUS = 1, 
} NET_EM_NOTIFY_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendNotifyToDev(LLONG lLoginID, NET_EM_NOTIFY_TYPE emNotifyType, const void* pInParam, void* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_RAWSTREAM_NOTIFY_INFO
{
    int nWidth;            
    int nHeight;           
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    char* pStream;         
    int nLength;           
    BYTE byReserved[512];  
} NET_RAWSTREAM_NOTIFY_INFO;
typedef void(CALLBACK* fRawStreamCallBack)(LLONG lAttachHandle, NET_RAWSTREAM_NOTIFY_INFO* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_RAWSTREAM_ATTACH_INFO
{
    DWORD dwSize;                
    fRawStreamCallBack cbNotify; 
    LDWORD dwUser;               
    int nChannel;                
} NET_IN_RAWSTREAM_ATTACH_INFO;
typedef struct tagNET_OUT_RAWSTREAM_ATTACH_INFO
{
    DWORD dwSize; 
} NET_OUT_RAWSTREAM_ATTACH_INFO;
typedef struct tagNET_CB_HEATMAP_GRAY_INFO
{
    UINT nWidth;           
    UINT nHeight;          
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    UINT nMax;             
    UINT nMin;             
    UINT nAverage;         
    UINT nLength;          
    char* pGrayInfo;       
    BYTE byReserved[512];  
} NET_CB_HEATMAP_GRAY_INFO;
typedef void(CALLBACK* fHeatMapGrayCallBack)(LLONG lAttachHandle, NET_CB_HEATMAP_GRAY_INFO* pstGrayInfo, LDWORD dwUser);
typedef struct tagNET_IN_GRAY_ATTACH_INFO
{
    DWORD dwSize;                       
    UINT nChannelID;                    
    fHeatMapGrayCallBack cbHeatMapGray; 
    LDWORD dwUser;                      
} NET_IN_GRAY_ATTACH_INFO;
typedef struct tagNET_OUT_GRAY_ATTACH_INFO
{
    DWORD dwSize; 
} NET_OUT_GRAY_ATTACH_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachHeatMapRawStream(LLONG lLoginID, const NET_IN_RAWSTREAM_ATTACH_INFO* pInParam, NET_OUT_RAWSTREAM_ATTACH_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachHeatMapRawStream(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachHeatMapGrayInfo(LLONG lLoginID, const NET_IN_GRAY_ATTACH_INFO* pInParam, NET_OUT_GRAY_ATTACH_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachHeatMapGrayInfo(LLONG lAttachHandle);
typedef struct tagNET_ANALYSERESULT
{
    char szPlateNumber[64]; 
    NET_RECT stuRect;       
    BYTE byReserved[128];   
} NET_ANALYSERESULT;
typedef struct tagNET_IN_SET_ANALYSERESULT_INFO
{
    DWORD dwSize;                                      
    int nChannel;                                      
    int nAnalyseResultCount;                           
    NET_ANALYSERESULT stuAnalyseResult[MAX_PLATE_NUM]; 
    unsigned int nFrameSequence;                       
    unsigned int nPhysicalLane;                        
} NET_IN_SET_ANALYSERESULT_INFO;
typedef struct tagNET_OUT_SET_ANALYSERESULT_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_ANALYSERESULT_INFO;
typedef struct tagNET_IN_ATTACH_EVENT_RESTORE
{
    DWORD dwSize;                        
    char szUuid[MAX_EVENT_RESTORE_UUID]; 
} NET_IN_ATTACH_EVENT_RESTORE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetIVSServerAnalyseResult(LLONG lLoginID, const NET_IN_SET_ANALYSERESULT_INFO* pInBuf, NET_OUT_SET_ANALYSERESULT_INFO* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCapsuleLockState(LLONG lLoginID, const NET_IN_QUERY_CAPSULE_LOCKSTATE* pInBuf, NET_OUT_QUERY_CAPSULE_LOCKSTATE* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCapsuleHumanNum(LLONG lLoginID, const NET_IN_QUERY_CAPSULE_HUMANNUM* pInBuf, NET_OUT_QUERY_CAPSULE_HUMANNUM* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetCourseRecordMode(LLONG lLoginID, const NET_IN_SET_COURSE_RECORD_MODE* pInBuf, NET_OUT_SET_COURSE_RECORD_MODE* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCourseRecordMode(LLONG lLoginID, const NET_IN_GET_COURSE_RECORD_MODE* pInBuf, NET_OUT_GET_COURSE_RECORD_MODE* pOutBuf, int nWaitTime);
typedef enum tagNET_EM_LOGIC_CHANNEL
{
    NET_EM_LOGIC_CHANNEL_INVALID = -1,       
    NET_EM_LOGIC_CHANNEL_COMPOSITE,          
    NET_EM_LOGIC_CHANNEL_PPT,                
    NET_EM_LOGIC_CHANNEL_BLACKBOARD,         
    NET_EM_LOGIC_CHANNEL_STUDENTFEATURE,     
    NET_EM_LOGIC_CHANNEL_STUDENTFULLVIEW,    
    NET_EM_LOGIC_CHANNEL_TEACHERFEATURE,     
    NET_EM_LOGIC_CHANNEL_TEACHERFULLVIEW,    
    NET_EM_LOGIC_CHANNEL_TEACHERDETECT,      
    NET_EM_LOGIC_CHANNEL_BLACKBOARDDETECT,   
    NET_EM_LOGIC_CHANNEL_BLACKBOARD1,        
    NET_EM_LOGIC_CHANNEL_BLACKBOARDDETECT1,  
    NET_EM_LOGIC_CHANNEL_VISUALPRESENTER,    
    NET_EM_LOGIC_CHANNEL_VIDEOSURVEILLANCE,  
    NET_EM_LOGIC_CHANNEL_VIDEOCONFERENCE,    
    NET_EM_LOGIC_CHANNEL_VIDEO_PRESENTATION, 
} NET_EM_LOGIC_CHANNEL;
typedef struct tagNET_LOGIC_CHANNEL_INFO
{
    int nRoomID;                         
    NET_EM_LOGIC_CHANNEL emLogicChannel; 
    BYTE byReserved[32];                 
} NET_LOGIC_CHANNEL_INFO;
typedef struct tagNET_IN_GET_REAL_PREVIEW_CHANNEL
{
    DWORD dwSize;
    int nChannelCount;                                              
    NET_LOGIC_CHANNEL_INFO stuChannelInfo[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_IN_GET_REAL_PREVIEW_CHANNEL;
typedef struct tagNET_OUT_GET_REAL_PREVIEW_CHANNEL
{
    DWORD dwSize;
    int nChannelNum;                       
    int nChannel[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_OUT_GET_REAL_PREVIEW_CHANNEL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRealPreviewChannel(LLONG lLoginID, const NET_IN_GET_REAL_PREVIEW_CHANNEL* pInBuf, NET_OUT_GET_REAL_PREVIEW_CHANNEL* pOutBuf, int nWaitTime);
typedef struct tagNET_IN_GET_DEFAULT_REAL_CHANNEL
{
    DWORD dwSize;
    int nChannelCount;                                              
    NET_LOGIC_CHANNEL_INFO stuChannelInfo[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_IN_GET_DEFAULT_REAL_CHANNEL;
typedef struct tagNET_OUT_GET_DEFAULT_REAL_CHANNEL
{
    DWORD dwSize;
    int nChannelNum;                       
    int nChannel[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_OUT_GET_DEFAULT_REAL_CHANNEL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDefaultRealChannel(LLONG lLoginID, const NET_IN_GET_DEFAULT_REAL_CHANNEL* pInBuf, NET_OUT_GET_DEFAULT_REAL_CHANNEL* pOutBuf, int nWaitTime);
typedef struct tagNET_IN_GET_COURSE_LOGIC_CHANNEL
{
    DWORD dwSize;
    int nChannelNum;                       
    int nChannel[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_IN_GET_COURSE_LOGIC_CHANNEL;
typedef struct tagNET_OUT_GET_COURSE_LOGIC_CHANNEL
{
    DWORD dwSize;
    int nChannelCount;                                              
    NET_LOGIC_CHANNEL_INFO stuChannelInfo[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_OUT_GET_COURSE_LOGIC_CHANNEL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLogicChannel(LLONG lLoginID, const NET_IN_GET_COURSE_LOGIC_CHANNEL* pInBuf, NET_OUT_GET_COURSE_LOGIC_CHANNEL* pOutBuf, int nWaitTime);
typedef struct tagNET_IN_SET_BLIND_REAL_CHANNEL
{
    DWORD dwSize;
    int nChannelNum;                                                
    int nChannel[MAX_PREVIEW_CHANNEL_NUM];                          
    NET_LOGIC_CHANNEL_INFO stuChannelInfo[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_IN_SET_BLIND_REAL_CHANNEL;
typedef struct tagNET_OUT_SET_BLIND_REAL_CHANNEL
{
    DWORD dwSize;
} NET_OUT_SET_BLIND_REAL_CHANNEL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetBlindRealChannel(LLONG lLoginID, const NET_IN_SET_BLIND_REAL_CHANNEL* pInBuf, NET_OUT_SET_BLIND_REAL_CHANNEL* pOutBuf, int nWaitTime);
typedef struct tagNET_IN_GET_INPUT_CHANNEL_MEDIA
{
    DWORD dwSize;
    int nChannelNum;                       
    int nChannel[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_IN_GET_INPUT_CHANNEL_MEDIA;
typedef enum tagNET_ENUM_INPUT_CHANNEL_MEDIA
{
    NET_ENUM_INPUT_MEDIA_UNKNOWN, 
    NET_ENUM_INPUT_MEDIA_VGA,     
    NET_ENUM_INPUT_MEDIA_HDMI,    
} NET_ENUM_INPUT_CHANNEL_MEDIA;
typedef struct tagNET_OUT_GET_INPUT_CHANNEL_MEDIA
{
    DWORD dwSize;
    int nChannelNum;                                                    
    NET_ENUM_INPUT_CHANNEL_MEDIA emInputMedia[MAX_PREVIEW_CHANNEL_NUM]; 
} NET_OUT_GET_INPUT_CHANNEL_MEDIA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetInputChannelMedia(LLONG lLoginID, const NET_IN_GET_INPUT_CHANNEL_MEDIA* pInBuf, NET_OUT_GET_INPUT_CHANNEL_MEDIA* pOutBuf, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachEventRestore(LLONG lLoginID, const NET_IN_ATTACH_EVENT_RESTORE* pInParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachEventRestore(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_LASER_DISTANCE
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_LASER_DISTANCE;
typedef struct tagNET_OUT_GET_LASER_DISTANCE
{
    DWORD dwSize;    
    UINT unDistance; 
} NET_OUT_GET_LASER_DISTANCE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLaserDistance(LLONG lLoginID, const NET_IN_GET_LASER_DISTANCE* pInBuf, NET_OUT_GET_LASER_DISTANCE* pOutBuf, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IN_GET_ATOMSPHDATA
{
    DWORD dwSize;
} NET_IN_GET_ATOMSPHDATA;
typedef struct tagNET_OUT_GET_ATOMSPHDATA
{
    DWORD dwSize;
    float fWindSpeed;     
    float fWindDirection; 
    float fHumidity;      
    float fTemperture;    
    float fAirPressure;   
    float fSunBathe;      
} NET_OUT_GET_ATOMSPHDATA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAtomsphData(LLONG lLoginID, const NET_IN_GET_ATOMSPHDATA* pInBuf, NET_OUT_GET_ATOMSPHDATA* pOutBuf, int nWaitTime);
typedef struct tagNET_IN_SET_COURSE_RECORD_STATE
{
    DWORD dwSize; 
    int nChannel; 
    int nAction;  
} NET_IN_SET_COURSE_RECORD_STATE;
typedef struct tagNET_OUT_SET_COURSE_RECORD_STATE
{
    DWORD dwSize; 
} NET_OUT_SET_COURSE_RECORD_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetCourseRecordState(LLONG lLoginID, const NET_IN_SET_COURSE_RECORD_STATE* pInBuf, NET_OUT_SET_COURSE_RECORD_STATE* pOutBuf, int nWaitTime);
typedef enum tagEM_COURSE_LOCK_TYPE
{
    EM_COURSE_LOCK_TYPE_UNKNOWN = -1, 
    EM_COURSE_LOCK_TYPE_ALL,          
    EM_COURSE_LOCK_TYPE_NON_LOCKING,  
    EM_COURSE_LOCK_TYPE_LOCK,         
} EM_COURSE_LOCK_TYPE;
typedef enum tagEM_COURSE_RECORD_TYPE
{
    EM_COURSE_RECORD_TYPE_UNKNOWN = -1,       
    EM_COURSE_RECORD_TYPE_ALL,                
    EM_COURSE_RECORD_TYPE_GUIDED_BROADCAST,   
    EM_COURSE_RECORD_TYPE_GUIDED_INTERACTION, 
} EM_COURSE_RECORD_TYPE;
typedef struct tagNET_IN_QUERY_COURSEMEDIA_FILEOPEN
{
    DWORD dwSize;                             
    NET_TIME stuStartTime;                    
    NET_TIME stuEndTime;                      
    char szKeyWord[DH_COMMON_STRING_128];     
    EM_COURSE_LOCK_TYPE emCourseLockType;     
    EM_COURSE_RECORD_TYPE emCourseRecordType; 
} NET_IN_QUERY_COURSEMEDIA_FILEOPEN;
typedef struct tagNET_OUT_QUERY_COURSEMEDIA_FILEOPEN
{
    DWORD dwSize;   
    UINT ntotalNum; 
    UINT nfindID;   
} NET_OUT_QUERY_COURSEMEDIA_FILEOPEN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OpenQueryCourseMediaFile(LLONG lLoginID, const NET_IN_QUERY_COURSEMEDIA_FILEOPEN* pInBuf, NET_OUT_QUERY_COURSEMEDIA_FILEOPEN* pOutBuf, int nWaitTime);
typedef struct tagNET_IN_QUERY_COURSEMEDIA_FILE
{
    DWORD dwSize; 
    UINT nfindID; 
    int nOffset;  
    int nCount;   
} NET_IN_QUERY_COURSEMEDIA_FILE;
typedef enum tagEM_COURSE_RECORD_COMPRESSION_TYPE
{
    EM_COURSE_RECORD_COMPRESSION_TYPE_UNKNOWN, 
    EM_COURSE_RECORD_COMPRESSION_TYPE_H264,    
    EM_COURSE_RECORD_COMPRESSION_TYPE_H265,    
} EM_COURSE_RECORD_COMPRESSION_TYPE;
typedef struct tagNET_RECORD_INFO
{
    int nRealChannel;                                
    NET_TIME stuStartTime;                           
    NET_TIME stuEndTime;                             
    UINT nFileLen;                                   
    UINT nFileLenEx;                                 
    UINT nTime;                                      
    UINT nFileType;                                  
    EM_COURSE_RECORD_COMPRESSION_TYPE emCompression; 
    BYTE byReserved[60];                             
} NET_RECORD_INFO;
typedef struct tagNET_COURSE_INFO
{
    char szCourseName[DH_COMMON_STRING_64];    
    char szTeacherName[DH_COMMON_STRING_64];   
    char szIntroduction[DH_COMMON_STRING_128]; 
    BYTE byReserved[64];                       
} NET_COURSE_INFO;
typedef struct tagNET_COURSEMEDIA_FILE_INFO
{
    int nID;                               
    NET_COURSE_INFO stuCourseInfo;         
    int nChannelNum;                       
    int nRecordNum[64];                    
    NET_RECORD_INFO stuRecordInfo[64][16]; 
    BYTE byReserved[128];                  
} NET_COURSEMEDIA_FILE_INFO;
typedef struct tagNET_OUT_QUERY_COURSEMEDIA_FILE
{
    DWORD dwSize;                                     
    int nCountResult;                                 
    NET_COURSEMEDIA_FILE_INFO stuCourseMediaFile[64]; 
} NET_OUT_QUERY_COURSEMEDIA_FILE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoQueryCourseMediaFile(LLONG lLoginID, const NET_IN_QUERY_COURSEMEDIA_FILE* pInBuf, NET_OUT_QUERY_COURSEMEDIA_FILE* pOutBuf, int nWaitTime);
typedef struct tagNET_IN_QUERY_COURSEMEDIA_FILECLOSE
{
    DWORD dwSize; 
    UINT nFindID; 
} NET_IN_QUERY_COURSEMEDIA_FILECLOSE;
typedef struct tagNET_OUT_QUERY_COURSEMEDIA_FILECLOSE
{
    DWORD dwSize; 
} NET_OUT_QUERY_COURSEMEDIA_FILECLOSE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloseQueryCourseMediaFile(LLONG lLoginID, const NET_IN_QUERY_COURSEMEDIA_FILECLOSE* pInBuf, NET_OUT_QUERY_COURSEMEDIA_FILECLOSE* pOutBuf, int nWaitTime);
typedef enum tagNET_EM_AIO_FILE_STATUS
{
    NET_EM_AIO_FILE_STATUS_UNKNOWN,
    NET_EM_AIO_FILE_STATUS_BEGIN,     
    NET_EM_AIO_FILE_STATUS_UPLOADING, 
    NET_EM_AIO_FILE_STATUS_END,       
} NET_EM_AIO_FILE_STATUS;
typedef enum tagNET_EM_AIO_FILE_TYPE
{
    NET_EM_AIO_FILE_TYPE_UNKNOWN,
    NET_EM_AIO_FILE_TYPE_UPSYSTEM, 
    NET_EM_AIO_FILE_TYPE_UPAPP,    
} NET_EM_AIO_FILE_TYPE;
typedef struct tagNET_IN_UPLOAD_AIO_FILE
{
    DWORD dwSize;
    char* pszFileSrc;            
    char* pszFileDst;            
    char* pszFolderDst;          
    unsigned int nPacketLen;     
    NET_EM_AIO_FILE_TYPE emType; 
} NET_IN_UPLOAD_AIO_FILE;
typedef struct tagNET_OUT_UPLOAD_AIO_FILE
{
    DWORD dwSize;
} NET_OUT_UPLOAD_AIO_FILE;
typedef struct tagNET_CB_AIOFILEPROC
{
    DWORD dwSize;
    NET_EM_AIO_FILE_STATUS emStatus; 
    NET_EM_AIO_FILE_TYPE emType;     
    unsigned int dwLength; 
    char* pbFileBuf;       
    DWORD dwBufSize;       
} NET_CB_AIOFILEPROC;
typedef void(CALLBACK* fAttachAIOFileprocCB)(LLONG lAttachHandle, NET_CB_AIOFILEPROC* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_AIO
{
    DWORD dwSize;
    fAttachAIOFileprocCB cbNotify; 
    LDWORD dwUser;                 
} NET_IN_ATTACH_AIO;
typedef struct tagNET_OUT_ATTACH_AIO
{
    DWORD dwSize;
} NET_OUT_ATTACH_AIO;
typedef enum tagNET_EM_ADVERT_ACTION
{
    NET_EM_ADVERT_ACTION_UNKNOWN = 0,
    NET_EM_ADVERT_ACTION_START, 
    NET_EM_ADVERT_ACTION_STOP,  
} NET_EM_ADVERT_ACTION;
typedef enum tagNET_EM_ADVERT_POSITION
{
    NET_EM_ADVERT_POSITION_UNKNOWN = 0,
    NET_EM_ADVERT_POSITION_TOP,    
    NET_EM_ADVERT_POSITION_MIDDLE, 
    NET_EM_ADVERT_POSITION_BOTTOM, 
} NET_EM_ADVERT_POSITION;
typedef struct tagNET_IN_SET_ADVERT
{
    DWORD dwSize;
    NET_EM_ADVERT_ACTION emAction;     
    int nSpeed;                        
    NET_EM_ADVERT_POSITION emPosition; 
} NET_IN_SET_ADVERT;
typedef struct tagNET_OUT_SET_ADVERT
{
    DWORD dwSize;
} NET_OUT_SET_ADVERT;
typedef struct tagNET_IN_AIO_SCREEN
{
    DWORD dwSize;
} NET_IN_AIO_SCREEN;
typedef struct tagNET_OUT_AIO_SCREEN
{
    DWORD dwSize;
    char szName[DH_COMMON_STRING_256]; 
} NET_OUT_AIO_SCREEN;
typedef struct tagNET_IN_CONTROL_ANDROID_ADB
{
    DWORD dwSize;
    BOOL bEnable; 
} NET_IN_CONTROL_ANDROID_ADB;
typedef struct tagNET_OUT_CONTROL_ANDROID_ADB
{
    DWORD dwSize;
} NET_OUT_CONTROL_ANDROID_ADB;
typedef struct tagNET_CFG_LINKGROUP_INFO
{
    BOOL bEnable;                         
    char szGroupID[64];                   
    BYTE bySimilarity;                    
    BYTE bReserved1[3];                   
    char szColorName[32];                 
    BOOL bShowTitle;                      
    BOOL bShowPlate;                      
    NET_ALARM_MSG_HANDLE stuEventHandler; 
    BYTE bReserved[512];                  
} NET_CFG_LINKGROUP_INFO;
typedef struct tagNET_CFG_STRANGERMODE_INFO
{
    BOOL bEnable;                         
    char szColorHex[8];                   
    BOOL bShowTitle;                      
    BOOL bShowPlate;                      
    NET_ALARM_MSG_HANDLE stuEventHandler; 
    BYTE bReserved[512];                  
} NET_CFG_STRANGERMODE_INFO;
typedef struct tagNET_CFG_CALIBRATEBOX_INFO
{
    POINTCOORDINATE stuCenterPoint; 
    float fRatio;                   
} NET_CFG_CALIBRATEBOX_INFO;
typedef struct tagNET_CFG_SIZE
{
    union
    {
        float nWidth; 
        float nArea;  
    };
    float nHeight; 
} NET_CFG_SIZE;
typedef struct tagNET_CFG_SIZEFILTER_INFO
{
    int nCalibrateBoxNum;                           
    NET_CFG_CALIBRATEBOX_INFO stuCalibrateBoxs[10]; 
    bool bMeasureModeEnable;                        
    BYTE bMeasureMode;                              
    bool bFilterTypeEnable;                         
    BYTE bFilterType;          
    bool bFilterMinSizeEnable; 
    bool bFilterMaxSizeEnable; 
    bool abByArea;
    bool abMinArea;
    bool abMaxArea;
    bool abMinAreaSize;
    bool abMaxAreaSize;
    bool bByArea;                  
    NET_CFG_SIZE stuFilterMinSize; 
    NET_CFG_SIZE stuFilterMaxSize; 
    float nMinArea;                
    float nMaxArea;                
    NET_CFG_SIZE stuMinAreaSize;   
    NET_CFG_SIZE stuMaxAreaSize;   
    bool abByRatio;
    bool abMinRatio;
    bool abMaxRatio;
    bool abMinRatioSize;
    bool abMaxRatioSize;
    bool bByRatio; 
    bool bReserved1[2];
    double dMinRatio;                                    
    double dMaxRatio;                                    
    NET_CFG_SIZE stuMinRatioSize;                        
    NET_CFG_SIZE stuMaxRatioSize;                        
    int nAreaCalibrateBoxNum;                            
    NET_CFG_CALIBRATEBOX_INFO stuAreaCalibrateBoxs[10];  
    int nRatioCalibrateBoxs;                             
    NET_CFG_CALIBRATEBOX_INFO stuRatioCalibrateBoxs[10]; 
    bool abBySize;                                       
    bool bBySize;                                        
    BYTE bReserved[518];                                 
} NET_CFG_SIZEFILTER_INFO;
typedef enum tagEM_SENSOR_TYPE
{
    EM_SENSOR_TYPE_UNKNOWN, 
    EM_SENSOR_TYPE_NC,      
    EM_SENSOR_TYPE_NO,      
} EM_SENSOR_TYPE;
typedef struct tagNET_LOCAL_EXT_ALARM_INFO
{
    DWORD dwSize;                              
    BOOL bEnable;                              
    char szName[MAX_LOCAL_EXT_ALARM_NAME_LEN]; 
    EM_SENSOR_TYPE emSensorType;               
    NET_CFG_ALARM_MSG_HANDLE stuEventHandler;  
} NET_LOCAL_EXT_ALARM_INFO;
typedef enum tagNET_EM_FIREWARNING_MODE_TYPE
{
    NET_EM_FIREWARNING_TYPE_PTZPRESET,    
    NET_EM_FIREWARNING_TYPE_SPACEEXCLUDE, 
} NET_EM_FIREWARNING_MODE_TYPE;
typedef struct tagNET_FIREWARNING_MODE_INFO
{
    DWORD dwSize;                                   
    NET_EM_FIREWARNING_MODE_TYPE emFireWarningMode; 
} NET_FIREWARNING_MODE_INFO;
typedef enum tagNET_EM_FIREWARNING_DETECTMODE_TYPE
{
    NET_EM_FIREWARNING_DETECTMODE_TYPE_AUTO,   
    NET_EM_FIREWARNING_DETECTMODE_TYPE_NORMAL, 
} NET_EM_FIREWARNING_DETECTMODE_TYPE;
typedef enum tagNET_EM_FIREWARNING_DETECTTARGET_TYPE
{
    NET_EM_FIREWARNING_DETECTTARGET_TYPE_FIRE,  
    NET_EM_FIREWARNING_DETECTTARGET_TYPE_SMOKE, 
} NET_EM_FIREWARNING_DETECTTARGET_TYPE;
#define MAX_FIREWARNING_DETECTRGN_NUM 32 
#define MAX_FIREWARNING_RULE_NUM 32      
#define MAX_FIREWARNING_DETECTWND_NUM 8  
typedef struct tagNET_FIREWARN_EVENTHANDLE_INFO
{
    NET_CFG_TIME_SCHEDULE stuTimeSection; 
    BOOL bRecordEnable;                   
    int nRecordChannelNum;                
    int nRecordChannels[32];              
    int nRecordLatch;                     
    BOOL bAlarmOutEnable;                 
    int nAlarmOutChannelNum;              
    int nAlarmOutChannels[32];            
    int nAlarmOutLatch;                   
    int nPtzLinkNum;                      
    DH_PTZ_LINK struPtzLink[16];          
    BOOL bPtzLinkEnable;                  
    BOOL bSnapshotEnable;                 
    int nSnapshotChannelNum;              
    int nSnapshotChannels[32];            
    BOOL bMailEnable;                     
    BYTE byReserved[1024];                
} NET_FIREWARN_EVENTHANDLE_INFO;
typedef struct tagNET_FIREWARN_DETECTWND_INFO
{
    int nRgnNum;                                   
    BYTE byReservedAlign[4];                       
    INT64 nRegions[MAX_FIREWARNING_DETECTRGN_NUM]; 
    NET_POSTIONF stuPostion;                       
    int nTargetSize;                               
    int nSensitivity;                              
    int nWindowsID;                                
    char szName[32];                               
    BYTE byReserved[256];                          
} NET_FIREWARN_DETECTWND_INFO;
typedef struct tagNET_FIREWARN_RULE_INFO
{
    BOOL bEnable;                                                       
    int nPresetId;                                                      
    int nRow;                                                           
    int nCol;                                                           
    NET_EM_FIREWARNING_DETECTMODE_TYPE emFireWarningDetectMode;         
    NET_EM_FIREWARNING_DETECTTARGET_TYPE emFireWarningDetectTragetType; 
    BOOL bTimeDurationEnable;                                           
    int nFireDuration;                                                  
    NET_FIREWARN_EVENTHANDLE_INFO stuEventHandler;                           
    int nDetectWindowNum;                                                    
    NET_FIREWARN_DETECTWND_INFO stuDetectWnd[MAX_FIREWARNING_DETECTWND_NUM]; 
    BYTE byReserved[256];                                                    
} NET_FIREWARN_RULE_INFO;
typedef struct tagNET_FIRE_WARNING_INFO
{
    DWORD dwSize;                                                     
    int nFireWarnRuleNum;                                             
    NET_FIREWARN_RULE_INFO stuFireWarnRule[MAX_FIREWARNING_RULE_NUM]; 
} NET_FIRE_WARNING_INFO;
typedef enum tagEM_HOT_ALARM_CONDITION
{
    EM_HOT_ALARM_CONDITION_UNKNOWN,                 
    EM_HOT_ALARM_CONDITION_ABOVE_MAX,               
    EM_HOT_ALARM_CONDITION_ABOVE_MAX_AND_BELOW_MIN, 
} EM_HOT_ALARM_CONDITION;
typedef enum tagEM_COLD_ALARM_CONDITION
{
    EM_COLD_ALARM_CONDITION_UNKNOWN,                 
    EM_COLD_ALARM_CONDITION_BELOW_MIN,               
    EM_COLD_ALARM_CONDITION_ABOVE_MAX_AND_BELOW_MIN, 
} EM_COLD_ALARM_CONDITION;
typedef struct tagNET_HOT_COLD_SPOT_WARNING_INFO
{
    DWORD dwSize;                                 
    BOOL bHotAlarmEnable;                         
    BOOL bColdAlarmEnable;                        
    EM_HOT_ALARM_CONDITION emHotAlarmCondition;   
    EM_COLD_ALARM_CONDITION emColdAlarmCondition; 
    BYTE byReserved[4];                           
    double dHotThreshold;                         
    double dColdThreshold;                        
    BOOL bHotSpotLinkEnable;                      
    BOOL bColdSpotLinkEnable;                     
    NET_CFG_ALARM_MSG_HANDLE stuEventHandler;     
} NET_HOT_COLD_SPOT_WARNING_INFO;
typedef enum tagEM_ALARM_OUT_MODE
{
    EM_ALARM_OUT_MODE_UNKNOWN = -1, 
    EM_ALARM_OUT_MODE_AUTO,         
    EM_ALARM_OUT_MODE_FORCED,       
    EM_ALARM_OUT_MODE_CLOSE,        
} EM_ALARM_OUT_MODE;
typedef struct tagNET_CFG_REMOTE_ALARM_BELL_INFO
{
    DWORD dwSize;             
    EM_ALARM_OUT_MODE emMode; 
} NET_CFG_REMOTE_ALARM_BELL_INFO;
typedef struct tagNET_CFG_ACCESSCTL_BLACKLIST
{
    DWORD dwSize;
    BOOL bEnable; 
} NET_CFG_ACCESSCTL_BLACKLIST;
typedef struct tagNET_CFG_VSP_HONEYWELL_INFO
{
    DWORD dwSize;         
    BOOL bEnable;         
    char szIPAddress[64]; 
    int nPort;            
    char szUserName[128]; 
    char szPassword[128]; 
    char szUserCode[8];   
} NET_CFG_VSP_HONEYWELL_INFO;
typedef struct tagNET_CFG_LOG_GROUP_INFO
{
    UINT nSize;          
    UINT nBatch;         
    UINT nDelay;         
    BYTE byReserved[32]; 
} NET_CFG_LOG_GROUP_INFO;
typedef struct tagNET_CFG_LOG_SERVER_INFO
{
    BOOL bEnable;                       
    char szIP[40];                      
    UINT nPort;                         
    UINT nProtocol;                     
    UINT nSerial;                       
    NET_CFG_LOG_GROUP_INFO stuLogGroup; 
    BYTE byReserved[256];               
} NET_CFG_LOG_SERVER_INFO;
typedef struct tagNET_CFG_LOG_APPEND_INFO
{
    BOOL bSequence;      
    BOOL bDate;          
    BOOL bTime;          
    char szCustom[32];   
    BYTE byReserved[32]; 
} NET_CFG_LOG_APPEND_INFO;
typedef struct tagNET_CFG_SERIALPUSHLOG_INFO
{
    DWORD dwSize;                              
    BOOL bEnable;                              
    NET_CFG_LOG_SERVER_INFO stuServerInfo[16]; 
    int nServerCount;                          
    NET_CFG_LOG_APPEND_INFO stuAppendInfo[16]; 
    int nAppendCount;                          
} NET_CFG_SERIALPUSHLOG_INFO;
typedef struct tagNET_CFG_COAXIAL_ALARMLOCAL
{
    BOOL bEnable;                         
    char szName[64];                      
    NET_SENSE_METHOD emSenseMethod;       
    NET_ALARM_MSG_HANDLE stuEventHandler; 
    BYTE byReserved[1024];                
} NET_CFG_COAXIAL_ALARMLOCAL;
typedef struct tagNET_COAXIAL_ALARMLOCAL_INFO
{
    DWORD dwSize;                              
    NET_CFG_COAXIAL_ALARMLOCAL* pstuAlaramCfg; 
    int nCount;                                
    int nCountRet;                             
} NET_COAXIAL_ALARMLOCAL_INFO;
typedef struct tagNET_CFG_STORAGE_HEALTH_ABNORMAL
{
    DWORD dwSize;                         
    BOOL bEnable;                         
    NET_ALARM_MSG_HANDLE stuEventHandler; 
} NET_CFG_STORAGE_HEALTH_ABNORMAL;
typedef struct tagNET_CFG_STORAGE_GLOBAL
{
    DWORD dwSize;             
    UINT nFileHoldTime;       
    BOOL bLogRecordSearch;    
    BOOL bLogPictureSearch;   
    BOOL bShareStorageWizard; 
    UINT nDiskCheckTime;      
} NET_CFG_STORAGE_GLOBAL;
typedef enum tagEM_CFG_NAS_DIRECTORY_PROTOCAL
{
    EM_CFG_NAS_DIRECTORY_PROTOCAL_UNKNOWN, 
    EM_CFG_NAS_DIRECTORY_PROTOCAL_NFS,     
    EM_CFG_NAS_DIRECTORY_PROTOCAL_FTP,     
    EM_CFG_NAS_DIRECTORY_PROTOCAL_SAMBA,   
    EM_CFG_NAS_DIRECTORY_PROTOCAL_ISCSI,   
    EM_CFG_NAS_DIRECTORY_PROTOCAL_NONE,    
} EM_CFG_NAS_DIRECTORY_PROTOCAL;
typedef enum tagEM_CFG_NAS_DIRECTORY_CACHE_TYPE
{
    EM_CFG_NAS_DIRECTORY_CACHE_TYPE_UNKNOWN,  
    EM_CFG_NAS_DIRECTORY_CACHE_TYPE_DIRECT,   
    EM_CFG_NAS_DIRECTORY_CACHE_TYPE_INDIRECT, 
} EM_CFG_NAS_DIRECTORY_CACHE_TYPE;
typedef struct tagNAS_DIRECTORY_CFG_INFO
{
    DWORD dwSize;                                
    char szName[16];                             
    char szGroupName[32];                        
    char szUserName[64][32];                     
    int nUserAuth[64];                           
    char szMemo[1024];                           
    char szValidIP[16];                          
    int nUserNameRealNum;                        
    int nUserAuthRealNum;                        
    UINT nTotalSpace;                            
    UINT nBlockSize;                             
    EM_CFG_NAS_DIRECTORY_PROTOCAL emProtocal;    
    EM_CFG_NAS_DIRECTORY_CACHE_TYPE emCacheType; 
} NAS_DIRECTORY_CFG_INFO;
typedef struct tagNET_CFG_NAS_DIRECTORY
{
    DWORD dwSize;                              
    char szReserved[4];                        
    int nNeedNASDirectoryInfoNum;              
    int nNASCfgRealNum;                        
    NAS_DIRECTORY_CFG_INFO* pNASDirectoryInfo; 
} NET_CFG_NAS_DIRECTORY;
typedef struct tagNET_DISK_FIRMWARE_INFO
{
    char szModule[32];    
    char szBUS[8];        
    char szFirmware[32];  
    char szReserved[512]; 
} NET_DISK_FIRMWARE_INFO;
typedef struct tagNET_CFG_DISK_FIRMWARE_INFO
{
    DWORD dwSize;                       
    int nInfoCount;                     
    NET_DISK_FIRMWARE_INFO stuInfo[16]; 
} NET_CFG_DISK_FIRMWARE_INFO;
typedef struct tagNET_CFG_LORA_GATEWAY_BASIC
{
    DWORD dwSize;               
    UINT nKeepAliveInterval;    
    char szGatewayID[32];       
    UINT nStatusReportInterval; 
    UINT nPushTimeout;          
} NET_CFG_LORA_GATEWAY_BASIC;
typedef enum tagEM_LORA_GATEWAY_ACCESS_METHOD
{
    EM_LORA_GATEWAY_ACCESS_METHOD_UNKNOWN,    
    EM_LORA_GATEWAY_ACCESS_METHOD_SEMTECHUDP, 
    EM_LORA_GATEWAY_ACCESS_METHOD_MQTT,       
} EM_LORA_GATEWAY_ACCESS_METHOD;
typedef struct tagNET_SEMTECHUDP_INFO
{
    char szNSAddress[64];  
    UINT nNSUpPort;        
    UINT nNSDownPort;      
    BYTE byReserved[1024]; 
} NET_SEMTECHUDP_INFO;
typedef struct tagNET_MQTT_INFO
{
    char szHost[64];       
    char szAccount[256];   
    char szPassword[256];  
    UINT nPort;            
    BYTE byReserved[1024]; 
} NET_MQTT_INFO;
typedef struct tagNET_CFG_LORA_GATEWAY_ACCESS
{
    DWORD dwSize;                           
    EM_LORA_GATEWAY_ACCESS_METHOD emMethod; 
    NET_SEMTECHUDP_INFO stuSemtechUDPInfo;  
    NET_MQTT_INFO stuMQTTInfo;              
} NET_CFG_LORA_GATEWAY_ACCESS;
typedef struct tagNET_LORAGATEWAYRADIO_INFO
{
    BOOL bEnable;          
    UINT nFreqMin;         
    UINT nFreqMax;         
    BYTE byReserved[1024]; 
} NET_LORAGATEWAYRADIO_INFO;
typedef struct tagNET_CFG_LORA_GATEWAY_RADIO
{
    DWORD dwSize;                        
    BOOL bEnable;                        
    NET_LORAGATEWAYRADIO_INFO stuRxInfo; 
    NET_LORAGATEWAYRADIO_INFO stuTxInfo; 
} NET_CFG_LORA_GATEWAY_RADIO;
typedef struct tagNET_CFG_VTS_DEVICE_INFO
{
    char szDeviceName[64];     
    char szAddress[40];        
    char szMachineAddress[64]; 
    char szUsername[36];       
    char szPassword[36];       
    BOOL bEnable;              
    BYTE byReserved[508];      
} NET_CFG_VTS_DEVICE_INFO;
typedef struct tagNET_CFG_VTS_INFO
{
    DWORD dwSize;                                
    int nDeviceNum;                              
    NET_CFG_VTS_DEVICE_INFO stuVTSDeviceInfo[8]; 
} NET_CFG_VTS_INFO;
typedef struct tagNET_CFG_VTS_BUILDING_INFO
{
    char szLocalNumber[16]; 
    BOOL bEnableSection;    
    BOOL bEnableBuilding;   
    BOOL bEnableUnit;       
    int nBuildingNumBit;    
    char szReserved[512];   
} NET_CFG_VTS_BUILDING_INFO;
typedef struct tagNET_CFG_VTS_BASIC_INFO
{
    DWORD dwSize;                                 
    int nRole;                                    
    char szDevID[16];                             
    char szName[64];                              
    NET_CFG_VTS_BUILDING_INFO stuVTSBuildingInfo; 
    int nScene;                                   
} NET_CFG_VTS_BASIC_INFO;
typedef struct tagNET_ALWAYS_ONTIME_SECTION
{
    DH_TSECT stuTimeSection; 
    UINT nBacklightLevel;    
    char szReserved[256];    
} NET_ALWAYS_ONTIME_SECTION;
typedef struct tagNET_CFG_HOSPITAL_BACKLIGHT_PLAN
{
    DWORD dwSize;                                        
    UINT nDefaultBacklightLevel;                         
    int nTimeSectionCount;                               
    NET_ALWAYS_ONTIME_SECTION stuAlwaysOnTimeSection[5]; 
} NET_CFG_HOSPITAL_BACKLIGHT_PLAN;
typedef struct tagNET_CFG_HOSPITAL_INTRODUCE_INFO
{
    DWORD dwSize;                 
    char szHospitalIntroURL[512]; 
    char szSectionIntroURL[512];  
    char szHospitalIntroPic[512]; 
    char szSectionIntroPic[512];  
} NET_CFG_HOSPITAL_INTRODUCE_INFO;
typedef struct tagNET_CFG_HOSPITAL_CHECKLIST_INFO
{
    DWORD dwSize;               
    char szCheckInfoDoc[512];   
    char szExpenseInfoDoc[512]; 
    char szCheckInfoPic[512];   
    char szExpenseInfoPic[512]; 
} NET_CFG_HOSPITAL_CHECKLIST_INFO;
typedef struct tagNET_HOSPITAL_VIDEO_LIST
{
    char szSnapURL[512];  
    char szVideoURL[512]; 
    char szName[512];     
    char szDuration[32];  
    char szReserved[256]; 
} NET_HOSPITAL_VIDEO_LIST;
typedef struct tagNET_HOSPITAL_MEDIA_VIDEO_INFO
{
    char szGroupName[256];                  
    int nRetVideoListCount;                 
    int nVideoListNum;                      
    NET_HOSPITAL_VIDEO_LIST* pstuVideoList; 
    char szReserved[256];                   
} NET_HOSPITAL_MEDIA_VIDEO_INFO;
typedef struct tagNET_CFG_HOSPITAL_MEDIA_INFO
{
    DWORD dwSize;                                   
    int nVideoNum;                                  
    NET_HOSPITAL_MEDIA_VIDEO_INFO stuVideoInfo[50]; 
} NET_CFG_HOSPITAL_MEDIA_INFO;
typedef struct tagNET_CFG_VTH_ALPA_CLOUD
{
    DWORD dwSize;         
    char szParam1[32];    
    char szParam2[32];    
    int nStatus;          
    BYTE byReserved[128]; 
} NET_CFG_VTH_ALPA_CLOUD;
typedef struct tagNET_CFG_VTH_FETCHINFO
{
    DWORD dwSize;         
    char szFtp[32];       
    char szUser[32];      
    char szPassword[32];  
    int nPort;            
    BOOL bEnable;         
    char szFtpPath[256];  
    BYTE byReserved[512]; 
} NET_CFG_VTH_FETCHINFO;
typedef struct tagNET_CFG_CUSTOMER_DEVICEINFO
{
    DWORD dwSize;              
    char szAuthCheckCode[128]; 
    char szOrgId[32];          
    char szDeviceId[64];       
    char szRegUrl[256];        
    char szInformUrl[256];     
} NET_CFG_CUSTOMER_DEVICEINFO;
typedef enum tagEM_ADDRESS_TYPE
{
    EM_ADDRESS_TYPE_UNKNOWN = 0, 
    EM_ADDRESS_TYPE_PUBLIC,      
    EM_ADDRESS_TYPE_RANDOM,      
} EM_ADDRESS_TYPE;
typedef struct tagNET_BLUETOOTH_INFO
{
    char szName[64];               
    char szMac[20];                
    char szPin[20];                
    EM_ADDRESS_TYPE emAddressType; 
    BYTE byReserved[512];          
} NET_BLUETOOTH_INFO;
typedef struct tagNET_CFG_BLUE_TOOTH
{
    DWORD dwSize;                             
    BOOL bEnable;                             
    char szModulName[32];                     
    int nBlueDeviceNum;                       
    NET_BLUETOOTH_INFO stuBlueDeviceInfo[16]; 
} NET_CFG_BLUE_TOOTH;
typedef enum tagEM_AUDIO_COMPRESS_FORMAT
{
    EM_AUDIO_COMPRESS_UNKNOWN = 0, 
    EM_AUDIO_COMPRESS_PCM,         
    EM_AUDIO_COMPRESS_ADPCM,       
    EM_AUDIO_COMPRESS_G711AM,      
    EM_AUDIO_COMPRESS_G711MU,      
    EM_AUDIO_COMPRESS_G726,        
    EM_AUDIO_COMPRESS_G729,        
    EM_AUDIO_COMPRESS_MPEG2,       
    EM_AUDIO_COMPRESS_AMR,         
} EM_AUDIO_COMPRESS_FORMAT;
typedef struct tagNET_TALKBACK_INFO
{
    EM_AUDIO_COMPRESS_FORMAT emAudioCompresFormat; 
    UINT nFrequency;                               
    UINT nDepth;                                   
    UINT nPacketPeriod;                            
    int nMode;                                     
    NET_EM_PACK_TYPE emPackFormat;                 
    BYTE byReserved[512];                          
} NET_TALKBACK_INFO;
typedef struct tagNET_CFG_TALKBACK
{
    DWORD dwSize;                          
    int nChannelNum;                       
    NET_TALKBACK_INFO stuTalkBackInfo[16]; 
} NET_CFG_TALKBACK;
typedef enum tagEM_SYS_MODE
{
    EM_SYS_MODE_UNKNOWN = 0,    
    EM_SYS_MODE_FACECOLLECT,    
    EM_SYS_MODE_JOINCOLLECT,    
    EM_SYS_MODE_VISITORVERIFY,  
    EM_SYS_MODE_CITIZENCOMPARE, 
    EM_SYS_MODE_CITIZENIDCHECK, 
    EM_SYS_MODE_OTHER,          
} EM_SYS_MODE;
typedef struct tagNET_CFG_FORNT_COVER_DISPLAY_TEXT
{
    DWORD dwSize;              
    int nTextLineNum;          
    char szTextLines[10][256]; 
    BYTE byReserved[512];      
} NET_CFG_FORNT_COVER_DISPLAY_TEXT;
typedef struct tagNET_CFG_CITIZENPICTURECOMPARE
{
    DWORD dwSize;          
    int nThreshold;        
    BOOL bUnlockEnable;    
    BOOL bFuncEnable;      
    BOOL bCitizenIDCheck;  
    EM_SYS_MODE emSysMode; 
} NET_CFG_CITIZENPICTURECOMPARE;
typedef enum tagEM_SIGNLIGHT_TYPE
{
    EM_SIGNLIGHT_TYPE_UNKNOWN = 0, 
    EM_SIGNLIGHT_TYPE_AUTO,        
    EM_SIGNLIGHT_TYPE_TIMING,      
    EM_SIGNLIGHT_TYPE_OFF,         
    EM_SIGNLIGHT_TYPE_ON,          
} EM_SIGNLIGHT_TYPE;
typedef struct tagNET_SIGNLIGHT_INFO
{
    EM_SIGNLIGHT_TYPE emSignLightType; 
    int nTimeSectionsNum;              
    DH_TSECT stuTimeSection[6];        
    BYTE bReserved[64];                
} NET_VIDEOTALK_SIGNLIGHT_INFO;
typedef struct tagNET_CFG_SIGNLIGHT
{
    DWORD dwSize;                                      
    int nSignLightNum;                                 
    NET_VIDEOTALK_SIGNLIGHT_INFO stuSignLightInfo[16]; 
} NET_CFG_VIDEOTALK_SIGNLIGHT;
typedef enum tagEM_STARTCHECK_MODE
{
    EM_STARTCHECK_MODE_UNKNOWN = 0, 
    EM_STARTCHECK_MODE_FACE,        
    EM_STARTCHECK_MODE_CARD,        
} EM_STARTCHECK_MODE;
typedef struct tagNET_HAND_INFO
{
    UINT nHighValue;    
    UINT nLowValue;     
    BYTE bReserved[64]; 
} NET_HAND_INFO;
typedef struct tagNET_LEFT_FOOT_INFO
{
    UINT nHighValue;    
    UINT nLowValue;     
    BYTE bReserved[64]; 
} NET_LEFT_FOOT_INFO;
typedef struct tagNET_RIGHT_FOOT_INFO
{
    UINT nHighValue;    
    UINT nLowValue;     
    BYTE bReserved[64]; 
} NET_RIGHT_FOOT_INFO;
typedef struct tagNET_CFG_ESD_COMMSETTING
{
    DWORD dwSize;                        
    EM_STARTCHECK_MODE emStartCheckMode; 
    NET_HAND_INFO stuHand;               
    NET_LEFT_FOOT_INFO stuLeftFoot;      
    NET_RIGHT_FOOT_INFO stuRightFoot;    
} NET_CFG_ESD_COMMSETTING;
typedef enum tagEM_MAIN_PAGE_STATE
{
    EM_MAIN_PAGE_STATE_UNKNOWN = 0,   
    EM_MAIN_PAGE_STATE_NORMAL,        
    EM_MAIN_PAGE_STATE_STANDBY,       
    EM_MAIN_PAGE_STATE_CHANNELCLOSED, 
    EM_MAIN_PAGE_STATE_FORBIDENTER,   
    EM_MAIN_PAGE_STATE_URGENTEVACUATE 
} EM_MAIN_PAGE_STATE;
typedef struct tagNET_CFG_BSCCUSTOM
{
    DWORD dwSize;                       
    UINT nSamePersonInterval;           
    EM_MAIN_PAGE_STATE emMainPageState; 
    char szReserved[4];                 
} NET_CFG_BSCCUSTOM;
typedef struct tagNET_CFG_ACCESS_FACE_RECOGNITION
{
    DWORD dwSize;               
    UINT nFaceRecogInterval;    
    BOOL bSecondConfirm;        
    UINT nSecondConfirmTimeout; 
    BOOL bIDAndFaceMode;        
    BOOL bFaceCollectionEnable; 
} NET_CFG_ACCESS_FACE_RECOGNITION;
typedef struct tagNET_CUSTOM_WEATHER_INFO
{
    char szDate[20];               
    char byReserved[4];            
    char szWeather[32];            
    char szDayWeather[32];         
    char szNightWeather[32];       
    double dbTemperature;          
    double dbMinTemperature;       
    double dbMaxTemperature;       
    char szWindForce[32];          
    char szDayWindForce[32];       
    char szNightWindForce[32];     
    char szWindDirection[32];      
    char szDayWindDirection[32];   
    char szNightWindDirection[32]; 
    char szWeatherImage[512];      
    char szReserved[128];          
} NET_CUSTOM_WEATHER_INFO;
typedef struct tagNET_CFG_CUSTOM_WEATHER_INFO
{
    DWORD dwSize;                               
    BOOL bEnable;                               
    UINT nWeatherDataNums;                      
    NET_CUSTOM_WEATHER_INFO stuWeatherData[32]; 
} NET_CFG_CUSTOM_WEATHER_INFO;
typedef struct tagNET_CFG_HOSPITAL_LOGO_INFO
{
    DWORD dwSize;         
    char szBitmap[10240]; 
    char szName[256];     
} NET_CFG_HOSPITAL_LOGO_INFO;
typedef struct tagNET_HOME_PAGE
{
    BOOL bButtonMainMenuVisible; 
    BOOL bButtonPasswordVisible; 
    BOOL bButtonQRCodeVisible;   
    BOOL bButtonCallVisible;     
    UINT nButtonCallType;        
} NET_HOME_PAGE;
typedef struct tagNET_ADVERTISE_DISPLAY
{
    UINT nAdvertiseVideoDisplay; 
    UINT nAdvertisePicDisplay;   
    char szReserved[128];        
} NET_ADVERTISE_DISPLAY;
typedef struct tagNET_ADVERTISE_SPLITLIST
{
    UINT nAdvertiseSplitID;         
    char szAdvertiseSplitName[256]; 
    char szReserved[128];           
} NET_ADVERTISE_SPLITLIST;
typedef struct tagNET_CFG_ACCESS_DISPLAY_INFO
{
    DWORD dwSize;                                      
    NET_HOME_PAGE stuHomePage;                         
    UINT nAdvertiseSplitType;                          
    UINT nAccessDisplayObject;                         
    NET_ADVERTISE_DISPLAY stuAdvertiseDisplay;         
    NET_ADVERTISE_SPLITLIST stuAdvertiseSplitList[32]; 
    int nAdvertiseSplitListNum;                        
} NET_CFG_ACCESS_DISPLAY_INFO;
typedef struct tagNET_CFG_ACCESS_CONFIG_INFO
{
    DWORD dwSize;         
    UINT nPhotoGraph;     
    UINT nFingerprintPic; 
    UINT nPrivacyMask;    
} NET_CFG_ACCESS_CONFIG_INFO;
typedef struct tagNET_CFG_SOUND
{
    DWORD dwSize;               
    char szAlarmSoundPath[256]; 
    UINT nAlarmSoundDuration;   
} NET_CFG_SOUND;
typedef struct tagNET_VOICE_PLAY_PLAN_INFO
{
    BOOL bEnable;                          
    int nPlayTimes;                        
    char szVoicePath[128];                 
    NET_CFG_TIME_SCHEDULE stuTimeSchedule; 
    char szReserved[512];                  
} NET_VOICE_PLAY_PLAN_INFO;
typedef struct tagNET_CFG_VOICE_PLAY_PLAN_INFO
{
    DWORD dwSize;                                  
    unsigned int nVoicePlayPlanCount;              
    NET_VOICE_PLAY_PLAN_INFO stuVoicePlayPlan[32]; 
} NET_CFG_VOICE_PLAY_PLAN;
typedef struct tagSMART_SOUND_DETECT_INFO
{
    BOOL bEnable;                                  
    int nAudioTypeValidNum;                        
    EM_AUDIO_MUTATION_ALARM_TYPE emSoundTypes[32]; 
    UINT nSensitive;                               
    UINT nThreshold;                               
    NET_CFG_ALARM_MSG_HANDLE stuEventHandler;      
    char szReserved[512];                          
} SMART_SOUND_DETECT_INFO;
typedef struct tagNET_CFG_SMART_SOUND_DETECT_INFO
{
    DWORD dwSize;                                   
    UINT nSoundDetectChannelNum;                    
    SMART_SOUND_DETECT_INFO* pSmartSoundDetectInfo; 
} NET_CFG_SMART_SOUND_DETECT;
typedef enum tagEM_DISPLAY_MODE
{
    EM_DISPLAY_MODE_UNKNOWN,   
    EM_DISPLAY_MODE_ROLL,      
    EM_DISPLAY_MODE_INTERCEPT, 
} EM_DISPLAY_MODE;
typedef enum tagEM_DISPLAY_COLOR
{
    EM_DISPLAY_COLOR_UNKNOWN, 
    EM_DISPLAY_COLOR_RED,     
    EM_DISPLAY_COLOR_GREEN,   
    EM_DISPLAY_COLOR_YELLOW,  
} EM_DISPLAY_COLOR;
typedef struct tagNET_LOGIC_SCREEN
{
    NET_RECT stuRegion;              
    EM_DISPLAY_MODE emDisplayMode;   
    EM_DISPLAY_COLOR emDisplayColor; 
    BYTE byReserved[512];            
} NET_LOGIC_SCREEN;
typedef enum tagEM_ROLL_SPEED_LEVEL
{
    EM_ROLL_SPEED_LEVEL_UNKNOWN, 
    EM_ROLL_SPEED_LEVEL_SLOW,    
    EM_ROLL_SPEED_LEVEL_SLOWER,  
    EM_ROLL_SPEED_LEVEL_MEDIUM,  
    EM_ROLL_SPEED_LEVEL_FASTER,  
    EM_ROLL_SPEED_LEVEL_FAST     
} EM_ROLL_SPEED_LEVEL;
typedef struct tagNET_CFG_LATTICE_SCREEN_CONFIG
{
    UINT nAddress;                        
    EM_ROLL_SPEED_LEVEL emRollSpeedLevel; 
    int nLogicScreenNum;                  
    NET_LOGIC_SCREEN stuLogicScreens[8];  
    int nOutPutVoiceVolume;               
    int nOutPutVoiceSpeed;                
    BYTE byReserved[1024];                
} NET_CFG_LATTICE_SCREEN_CONFIG;
typedef enum tagEM_DHRS_DEVICE_TYPE
{
    EM_DHRS_DEVICE_TYPE_UNKNOWN,        
    EM_DHRS_DEVICE_TYPE_STEADYLIGHT,    
    EM_DHRS_DEVICE_TYPE_STROBELIGHT,    
    EM_DHRS_DEVICE_TYPE_POWERMODULE,    
    EM_DHRS_DEVICE_TYPE_LATTICESCREEN,  
    EM_DHRS_DEVICE_TYPE_INDICATORLIGHT, 
    EM_DHRS_DEVICE_TYPE_RAINBRUSH,      
    EM_DHRS_DEVICE_TYPE_FLASHLAMP,      
    EM_DHRS_DEVICE_TYPE_RFID,           
    EM_DHRS_DEVICE_TYPE_COMMON,         
} EM_DHRS_DEVICE_TYPE;
typedef struct tagNET_CFG_DHRS_DEVICE_INFO
{
    BOOL bEnable;                                         
    EM_DHRS_DEVICE_TYPE emType;                           
    NET_CFG_LATTICE_SCREEN_CONFIG stuLatticeScreenConfig; 
    BYTE byReserved[4096];                                
} NET_CFG_DHRS_DEVICE_INFO;
typedef struct tagNET_CFG_DHRS_INFO
{
    int nDeviceNum;                                 
    NET_CFG_DHRS_DEVICE_INFO stuDHRSDeviceInfo[32]; 
} NET_CFG_DHRS_INFO;
typedef struct tagNET_CFG_DHRS
{
    DWORD dwSize;                      
    int nDHRSNum;                      
    NET_CFG_DHRS_INFO stuDHRSInfo[32]; 
} NET_CFG_DHRS;
typedef struct tagNET_CFG_ADVERT_PLAY_RULE
{
    DWORD dwSize;                               
    NET_CFG_TIME_SCHEDULE stPlayTimeSchedule;   
    NET_CFG_TIME_SCHEDULE stSilentTimeSchedule; 
} NET_CFG_ADVERT_PLAY_RULE;
typedef enum tagEM_XRAY_UPLOAD_PLATFORM_CURRENT_TYPE
{
    EM_XRAY_UPLOAD_PLATFORM_CURRENT_TYPE_UNKNOWN = -1,    
    EM_XRAY_UPLOAD_PLATFORM_CURRENT_TYPE_BY_DANGER_LEVEL, 
    EM_XRAY_UPLOAD_PLATFORM_CURRENT_TYPE_BY_DANGER_GROUP, 
} EM_XRAY_UPLOAD_PLATFORM_CURRENT_TYPE;
typedef struct tagNET_XRAY_UPLOAD_PLATFORM_BY_DANGER_LEVEL
{
    BOOL bHigh;           
    BOOL bWarning;        
    BOOL bSafety;         
    BOOL bUnknown;        
    BYTE byReserved[512]; 
} NET_XRAY_UPLOAD_PLATFORM_BY_DANGER_LEVEL;
typedef struct tagNET_XRAY_OBJECT_INFO
{
    EM_INSIDE_OBJECT_TYPE emType; 
    BOOL bEnable;                 
    UINT nDetectThreshold;        
    char szType[32];              
    char szReserved[224];         
} NET_XRAY_OBJECT_INFO;
typedef struct tagNET_XRAY_UPLOAD_PLATFORM_BY_DANGER_GROUP
{
    EM_INSIDE_OBJECT_TYPE emGroupType;   
    BOOL bGroupEnable;                   
    NET_XRAY_OBJECT_INFO stuObjects[64]; 
    int nObjectsNum;                     
    char szGroupType[32];                
    BYTE byReserved[480];                
} NET_XRAY_UPLOAD_PLATFORM_BY_DANGER_GROUP;
typedef struct tagNET_CFG_XRAY_UPLOAD_PLATFORM
{
    DWORD dwSize;                                                  
    EM_XRAY_UPLOAD_PLATFORM_CURRENT_TYPE emCurrentType;            
    NET_XRAY_UPLOAD_PLATFORM_BY_DANGER_LEVEL stuByDangerLevel;     
    NET_XRAY_UPLOAD_PLATFORM_BY_DANGER_GROUP stuByDangerGroup[64]; 
    int nByDangerGroupNum;                                         
} NET_CFG_XRAY_UPLOAD_PLATFORM;
typedef struct tagNET_XRAY_OVERLAY_INFO
{
    UINT nStyle;                   
    UINT nxBackground;             
    UINT nxConfidence;             
    UINT nxPackageBorder;          
    UINT nxTrackEnable;            
    UINT nxTrackName;              
    UINT nObjectCenterPointRadius; 
    UINT nObjectBorderWidth;       
    UINT nFontSize;                
    char szReserved[256];          
} NET_XRAY_OVERLAY_INFO;
typedef struct tagNET_CFG_XRAY_OVERLAY_INFO
{
    DWORD dwSize;                            
    int nXRayOverlayNum;                     
    NET_XRAY_OVERLAY_INFO stuXRayOverlay[8]; 
} NET_CFG_XRAY_OVERLAY_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_attachAIOFileProc(LLONG lLoginID, const NET_IN_ATTACH_AIO* pstInParam, NET_OUT_ATTACH_AIO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_detachAIOFileproc(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SetAIOAdvert(LLONG lLoginID, const NET_IN_SET_ADVERT* pstInParam, NET_OUT_SET_ADVERT* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AIOScreen(LLONG lLoginID, const NET_IN_AIO_SCREEN* pstInParam, NET_OUT_AIO_SCREEN* pstOutParam, int nWaitTime);
typedef void(CALLBACK* fUploadAIOFileCallBack)(LLONG lUploadFileHandle, int nTotalSize, int nSendSize, LDWORD dwUser, int nError);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartUploadAIOFile(LLONG lLoginID, const NET_IN_UPLOAD_AIO_FILE* pInParam, NET_OUT_UPLOAD_AIO_FILE* pOutParam, fUploadAIOFileCallBack cbUploadFile, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopUploadAIOFile(LLONG lUploadFileID);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ControlAndroidAdb(LLONG lLoginID, const NET_IN_CONTROL_ANDROID_ADB* pstInParam, NET_OUT_CONTROL_ANDROID_ADB* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetConfig(LLONG lLoginID, NET_EM_CFG_OPERATE_TYPE emCfgOpType, int nChannelID,
                                                 void* szOutBuffer, DWORD dwOutBufferSize, int waittime = NET_INTERFACE_DEFAULT_TIMEOUT, void* reserve = NULL);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetConfig(LLONG lLoginID, NET_EM_CFG_OPERATE_TYPE emCfgOpType, int nChannelID,
                                                 void* szInBuffer, DWORD dwInBufferSize, int waittime = NET_INTERFACE_DEFAULT_TIMEOUT, int* restart = NULL, void* reserve = NULL);
typedef struct tagNET_IN_BUFFER_POLICY
{
    DWORD dwSize;
    DH_RealPlayType emRealPlayType; 
    UINT nPolicy;                   
} NET_IN_BUFFER_POLICY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRealplayBufferPolicy(LLONG lPlayHandle, NET_IN_BUFFER_POLICY* pInBuf, int nWaitTime);
typedef enum tagEM_TESTOSD_OPERATE_TYPE
{
    EM_TESTOSD_ADD_TEXT,       
    EM_TESTOSD_GET_TEXT,       
    EM_TESTOSD_MODIFY_TEXT,    
    EM_TESTOSD_DELETE_TEXT,    
    EM_TESTOSD_ADD_PICTURE,    
    EM_TESTOSD_GET_PICTURE,    
    EM_TESTOSD_DELETE_PICTURE, 
} EM_TESTOSD_OPERATE_TYPE;
typedef struct tagNET_TEXT_OSD
{
    char szText[DH_COMMON_STRING_256]; 
    DH_POINT stuPoint;                 
    NET_COLOR_RGBA stuTextColor;       
    int nFontSize;                     
    BYTE byReserved[44];               
} NET_TEXT_OSD;
typedef enum tagEM_OSDPIC_TYPE
{
    EM_OSDPIC_UNKNOWN,    
    EM_OSDPIC_HEADONFACE, 
    EM_OSDPIC_SIDEFACE,   
    EM_OSDPIC_MAP,        
} EM_OSDPIC_TYPE;
typedef struct tagNET_PICTURE_OSD
{
    EM_OSDPIC_TYPE emPictureType; 
    NET_RECT stuPictureLocation;  
    BYTE byReserved[48];          
} NET_PICTURE_OSD;
typedef struct tagNET_IN_TESTOSD_ADD_TEXT
{
    DWORD dwSize;
    int nMaxCount;              
    NET_TEXT_OSD* pstuTextInfo; 
} NET_IN_TESTOSD_ADD_TEXT;
typedef struct tagNET_OUT_TESTOSD_ADD_TEXT
{
    DWORD dwSize;
    int nReturnCount;  
    int* pnTextID;     
    int* pnReturnCode; 
} NET_OUT_TESTOSD_ADD_TEXT;
typedef struct tagNET_IN_TESTOSD_GET_TEXT
{
    DWORD dwSize;
    int nMaxCount; 
    int* pnTextID; 
} NET_IN_TESTOSD_GET_TEXT;
typedef struct tagNET_OUT_TESTOSD_GET_TEXT
{
    DWORD dwSize;
    int nReturnCount;           
    NET_TEXT_OSD* pstuTextInfo; 
} NET_OUT_TESTOSD_GET_TEXT;
typedef struct tagNET_IN_TESTOSD_MODIFY_TEXT
{
    DWORD dwSize;
    int nMaxCount;              
    int* pnTextID;              
    NET_TEXT_OSD* pstuTextInfo; 
} NET_IN_TESTOSD_MODIFY_TEXT;
typedef struct tagNET_OUT_TESTOSD_MODIFY_TEXT
{
    DWORD dwSize;
    int nReturnCount;  
    int* pnReturnCode; 
} NET_OUT_TESTOSD_MODIFY_TEXT;
typedef struct tagNET_IN_TESTOSD_DELETE_TEXT
{
    DWORD dwSize;
    int nMaxCount; 
    int* pnTextID; 
} NET_IN_TESTOSD_DELETE_TEXT;
typedef struct tagNET_OUT_TESTOSD_DELETE_TEXT
{
    DWORD dwSize;
    int nReturnCount;  
    int* pnReturnCode; 
} NET_OUT_TESTOSD_DELETE_TEXT;
typedef struct tagNET_IN_TESTOSD_ADD_PIC
{
    DWORD dwSize;
    int nMaxCount;                 
    char (*pszFilePath)[MAX_PATH]; 
    NET_PICTURE_OSD* pstuPicture;
} NET_IN_TESTOSD_ADD_PIC;
typedef struct tagNET_OUT_TESTOSD_ADD_PIC
{
    DWORD dwSize;
    int nReturnCount;  
    int* pnReturnCode; 
} NET_OUT_TESTOSD_ADD_PIC;
typedef struct tagNET_IN_TESTOSD_GET_PIC
{
    DWORD dwSize;
    int nCount; 
} NET_IN_TESTOSD_GET_PIC;
typedef struct tagNET_OUT_TESTOSD_GET_PIC
{
    DWORD dwSize;
    int nReturnCount;              
    char (*pszFilePath)[MAX_PATH]; 
    NET_PICTURE_OSD* pstuPicture;
} NET_OUT_TESTOSD_GET_PIC;
typedef struct tagNET_IN_TESTOSD_DELETE_PIC
{
    DWORD dwSize;
    int nMaxCount;                 
    char (*pszFilePath)[MAX_PATH]; 
} NET_IN_TESTOSD_DELETE_PIC;
typedef struct tagNET_OUT_TESTOSD_DELETE_PIC
{
    DWORD dwSize;
    int nReturnCount;  
    int* pnReturnCode; 
} NET_OUT_TESTOSD_DELETE_PIC;
typedef struct tagNET_IN_GET_ALARM_EVENT_LOG
{
    DWORD dwSize;
    UINT nEventID; 
} NET_IN_GET_ALARM_EVENT_LOG;
typedef struct tagNET_OUT_GET_ALARM_EVENT_LOG
{
    DWORD dwSize;
    DWORD dwAlarmType; 
    BYTE* byAlarmData; 
    int nMaxDataLen;   
    int nRetDataLen;   
} NET_OUT_GET_ALARM_EVENT_LOG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEventLog(LLONG lLoginID, const NET_IN_GET_ALARM_EVENT_LOG* pstuInParam, NET_OUT_GET_ALARM_EVENT_LOG* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateTestOSD(LLONG lLoginID, EM_TESTOSD_OPERATE_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime);
typedef struct tagNET_IN_COURSECOMPOSITE_LOCK_CONTROL
{
    DWORD dwSize;
    BOOL bLock;        
    int nClassRoomID;  
    int nLogicChannel; 
} NET_IN_COURSECOMPOSITE_LOCK_CONTROL;
typedef struct tagNET_OUT_COURSECOMPOSITE_LOCK_CONTROL
{
    DWORD dwSize;
} NET_OUT_COURSECOMPOSITE_LOCK_CONTROL;
typedef struct tagNET_IN_COURSECOMPOSITE_GET_LOCKINFO
{
    DWORD dwSize;
    int nClassRoomID;  
    int nLogicChannel; 
} NET_IN_COURSECOMPOSITE_GET_LOCKINFO;
typedef struct tagNET_OUT_COURSECOMPOSITE_GET_LOCKINFO
{
    DWORD dwSize;
    BOOL bState; 
} NET_OUT_COURSECOMPOSITE_GET_LOCKINFO;
typedef struct tagNET_IN_GET_ADVERTIMENT_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_ADVERTIMENT_CAPS;
typedef enum tagEM_FILE_STORAGE_TYPE
{
    EM_FILE_STORAGE_TYPE_UNKNOWN, 
    EM_FILE_STORAGE_TYPE_LOCAL,   
    EM_FILE_STORAGE_TYPE_FTP,     
    EM_FILE_STORAGE_TYPE_HTTP,    
} EM_FILE_STORAGE_TYPE;
typedef struct tagNET_LOCAL_STORAGE_INFO
{
    char szPath[256];     
    BYTE byReserved[128]; 
} NET_LOCAL_STORAGE_INFO;
typedef enum tagEM_ADVERTISEMENT_STREAM_TYPE
{
    EM_ADVERTISEMENT_STREAM_TYPE_UNKNOWN,       
    EM_ADVERTISEMENT_STREAM_TYPE_H264,          
    EM_ADVERTISEMENT_STREAM_TYPE_H264_PRIVATE,  
    EM_ADVERTISEMENT_STREAM_TYPE_H265,          
    EM_ADVERTISEMENT_STREAM_TYPE_H265_PRIVATE,  
    EM_ADVERTISEMENT_STREAM_TYPE_MPEG4,         
    EM_ADVERTISEMENT_STREAM_TYPE_MPEG4_PRIVATE, 
} EM_ADVERTISEMENT_STREAM_TYPE;
typedef struct tagNET_ADVERTISEMENT_VIDEO
{
    BOOL bSupport;                                        
    int nStreamTypeNum;                                   
    EM_ADVERTISEMENT_STREAM_TYPE emAdvertiseMentType[32]; 
    UINT nMinWidth;                                       
    UINT nMaxWidth;                                       
    UINT nMinHeight;                                      
    UINT nMaxHeight;                                      
    BYTE byReserved[128];                                 
} NET_ADVERTISEMENT_VIDEO;
typedef enum tagEM_DEPTH_NUM
{
    EM_DEPTH_NUM_UNKNOWN,         
    EM_DEPTH_NUM_EIGHT = 8,       
    EM_DEPTH_NUM_SIXTEEN = 16,    
    EM_DEPTH_NUM_TWENTYFOUR = 24, 
} EM_DEPTH_NUM;
typedef struct tagNET_FORMATS_INFO
{
    EM_SPEAK_AUDIO_TYPE emCompressionType; 
    UINT nFrequency;                       
    EM_DEPTH_NUM emDepthNum;               
    int nPacketPeriod;                     
    BYTE byReserved[128];                  
} NET_FORMATS_INFO;
typedef struct tagNET_AUDIO_INFO
{
    BOOL bSupport;                      
    int nFormatNum;                     
    NET_FORMATS_INFO stuFormatInfo[64]; 
} NET_AUDIO_INFO;
typedef enum tagEM_ADVETTISEMENT_PICTURE_TYPE
{
    EM_PICTURE_ADVETTISEMENT_TYPE_UNKNOWN, 
    EM_PICTURE_ADVETTISEMENT_TYPE_PNG,     
    EM_PICTURE_ADVETTISEMENT_TYPE_JPG,     
    EM_PICTURE_ADVETTISEMENT_TYPE_BMP,     
} EM_ADVETTISEMENT_PICTURE_TYPE;
typedef struct tagNET_PICTURE_INFO
{
    BOOL bSupport;                                     
    int nPictureNum;                                   
    EM_ADVETTISEMENT_PICTURE_TYPE emAdPictureType[32]; 
    UINT nMinWidth;                                    
    UINT nMaxWidth;                                    
    UINT nMinHeight;                                   
    UINT nMaxHeight;                                   
    UINT nOnePicMaxSize;                               
    UINT nMaxPicNums;                                  
    BYTE byReserved[128];                              
} NET_PICTURE_INFO;
typedef struct tagNET_OUT_GET_ADVERTIMENT_CAPS
{
    DWORD dwSize;                                
    BOOL bSupport;                               
    int nFileStorageTypeNum;                     
    EM_FILE_STORAGE_TYPE emFileStorageType[32];  
    NET_LOCAL_STORAGE_INFO stuLocalStorage;      
    NET_ADVERTISEMENT_VIDEO stuAdvertimentVideo; 
    NET_AUDIO_INFO stuAudio;                     
    UINT nOneAVFileMaxSize;                      
    UINT nMaxAVFileNums;                         
    NET_PICTURE_INFO stuPicture;                 
} NET_OUT_GET_ADVERTIMENT_CAPS;
typedef struct tagNET_IN_CTRL_QUERY_DELIVERYE_FILE
{
    DWORD dwSize; 
} NET_IN_CTRL_QUERY_DELIVERYE_FILE;
typedef struct tagNET_IN_CTRL_QUERY_DELIVERYE_FILE_EX
{
    DWORD dwSize; 
} NET_IN_CTRL_QUERY_DELIVERYE_FILE_EX;
typedef struct tagNET_QUERY_DELIVERY_FILE_INFO
{
    BOOL bDownloaded;                 
    EM_DELIVERY_FILE_TYPE emFileType; 
    char szLocalPath[128];            
    int nSustain;                     
    char szURL[128];                  
    char szURLEx[512];                
    BYTE bReserved[512];              
} NET_QUERY_DELIVERY_FILE_INFO;
typedef struct tagNET_QUERY_DELIVERY_FILE_INFOEX
{
    BOOL bDownloaded;                     
    EM_DELIVERY_FILE_TYPE emFileType;     
    char szLocalPath[128];                
    int nSustain;                         
    char szURL[128];                      
    char szURLEx[512];                    
    NET_CFG_TIME_SCHEDULE stuTimeSection; 
    int nSize;                            
    int nID;                              
    BYTE bReserved[1024];                 
} NET_QUERY_DELIVERY_FILE_INFOEX;
typedef struct tagNET_OUT_CTRL_QUERY_DELIVERYE_FILE
{
    DWORD dwSize;                                                          
    BOOL bEnable;                                                          
    NET_TIME stuStartPlayTime;                                             
    NET_TIME stuStopPlayTime;                                              
    char szMode[20];                                                       
    int nFileCount;                                                        
    NET_QUERY_DELIVERY_FILE_INFO stuFileInfo[MAX_VIDEO_FILE_LIST_NUM];     
    EM_VIDEO_PLAY_MODE_TYPE emPlayMode;                                    
    int nFileCountEx;                                                      
    NET_QUERY_DELIVERY_FILE_INFOEX stuFileInfoEx[MAX_VIDEO_FILE_LIST_NUM]; 
    char szName[128];                                                      
    int nNumber;                                                           
    NET_CFG_TIME_SCHEDULE stuTimeSection;                                  
} NET_OUT_CTRL_QUERY_DELIVERYE_FILE;
typedef struct tagNET_OUT_CTRL_QUERY_DELIVERYE_FILE_EX
{
    DWORD dwSize;                                      
    int nFileNum;                                      
    int nRetFileNum;                                   
    NET_OUT_CTRL_QUERY_DELIVERYE_FILE* pDeliveredFile; 
} NET_OUT_CTRL_QUERY_DELIVERYE_FILE_EX;
typedef struct tagNET_IN_COURSECOMPOSITE_GET_INFO
{
    DWORD dwSize;
    int nClassRoomId; 
} NET_IN_COURSECOMPOSITE_GET_INFO;
typedef enum tagEM_COMPOSITECHANNEL_MODE
{
    EM_COMPOSITECHANNEL_CUSTOMER = -1, 
    EM_COMPOSITECHANNEL_INVALID,       
    EM_COMPOSITECHANNEL_MOVIE,         
    EM_COMPOSITECHANNEL_NORMALCY,      
    EM_COMPOSITECHANNEL_PICK,          
} EM_COMPOSITECHANNEL_MODE;
typedef struct tagNET_COMPOSITECHANNEL_INFO
{
    char szCourseName[DH_COMMON_STRING_128];   
    char szTeacherName[DH_COMMON_STRING_64];   
    int nCompositeChannelMode;                 
    int nChannelNum;                           
    BOOL bCanStream[MAX_COURSE_LOGIC_CHANNEL]; 
    BYTE byReserved[256];
} NET_COMPOSITECHANNEL_INFO;
typedef struct tagNET_OUT_COURSECOMPOSITE_GET_INFO
{
    DWORD dwSize;
    NET_COMPOSITECHANNEL_INFO stuChannelInfo; 
} NET_OUT_COURSECOMPOSITE_GET_INFO;
typedef struct tagNET_IN_COURSECOMPOSITE_SET_INFO
{
    DWORD dwSize;
    int nClassRoomId;                         
    NET_COMPOSITECHANNEL_INFO stuChannelInfo; 
} NET_IN_COURSECOMPOSITE_SET_INFO;
typedef struct tagNET_OUT_COURSECOMPOSITE_SET_INFO
{
    DWORD dwSize;
} NET_OUT_COURSECOMPOSITE_SET_INFO;
typedef struct tagNET_IN_COURSECOMPOSITE_UPDATE_INFO
{
    DWORD dwSize;
    int nClassRoomId; 
    NET_TIME stuTime; 
} NET_IN_COURSECOMPOSITE_UPDATE_INFO;
typedef struct tagNET_OUT_COURSECOMPOSITE_UPDATE_INFO
{
    DWORD dwSize;
} NET_OUT_COURSECOMPOSITE_UPDATE_INFO;
typedef enum tagEM_COURSECOMPOSITE_OPERATE_TYPE
{
    EM_COURSECOMPOSITE_TYPE_LOCK_CONTROL, 
    EM_COURSECOMPOSITE_TYPE_GET_LOCKINFO, 
    EM_COURSECOMPOSITE_TYPE_GET_INFO,     
    EM_COURSECOMPOSITE_TYPE_SET_INFO,     
    EM_COURSECOMPOSITE_TYPE_UPDATE_INFO,  
} EM_COURSECOMPOSITE_OPERATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateCourseCompositeChannel(LLONG lLoginID, EM_COURSECOMPOSITE_OPERATE_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime);
#define NET_MAX_WINDOWS_NUMBER 64 
#define NET_MAX_MODE_NUMBER 64    
typedef struct tagNET_COMPOSITECHANNELMODE_WINDOWS
{
    DH_RECT stRect;      
    int nLogicChannel;   
    int nZOrder;         
    BYTE byReserved[64]; 
} NET_COMPOSITECHANNELMODE_WINDOWS;
typedef struct tagNET_COMPOSITECHANNELMODE_INFO
{
    char szName[DH_COMMON_STRING_128];                                  
    int nWindowNum;                                                     
    NET_COMPOSITECHANNELMODE_WINDOWS stWindows[NET_MAX_WINDOWS_NUMBER]; 
    BYTE byReserved[64];                                                
} NET_COMPOSITECHANNELMODE_INFO;
typedef struct tagNET_IN_COURSECOMPOSITE_CHANNEL_MODE_ADD
{
    DWORD dwSize;                                                  
    int nCount;                                                    
    NET_COMPOSITECHANNELMODE_INFO stModeInfo[NET_MAX_MODE_NUMBER]; 
} NET_IN_COURSECOMPOSITE_CHANNEL_MODE_ADD;
typedef struct tagNET_COURSECOMPOSITE_CHANNEL_MODE_ADD_RESULT
{
    int nMode;           
    int nReturnCode;     
    BYTE byReserved[64]; 
} NET_COURSECOMPOSITE_CHANNEL_MODE_ADD_RESULT;
typedef struct tagNET_OUT_COURSECOMPOSITE_CHANNEL_MODE_ADD
{
    DWORD dwSize;                                                              
    int nCount;                                                                
    NET_COURSECOMPOSITE_CHANNEL_MODE_ADD_RESULT stResult[NET_MAX_MODE_NUMBER]; 
} NET_OUT_COURSECOMPOSITE_CHANNEL_MODE_ADD;
typedef struct tagNET_IN_COURSECOMPOSITE_CHANNEL_MODE_DELETE
{
    DWORD dwSize;                   
    int nModeNum;                   
    int nMode[NET_MAX_MODE_NUMBER]; 
} NET_IN_COURSECOMPOSITE_CHANNEL_MODE_DELETE;
typedef struct tagNET_OUT_COURSECOMPOSITE_CHANNEL_MODE_DELETE
{
    DWORD dwSize;                         
    int nReturnNum;                       
    int nReturnCode[NET_MAX_MODE_NUMBER]; 
} NET_OUT_COURSECOMPOSITE_CHANNEL_MODE_DELETE;
typedef struct tagNET_IN_COURSECOMPOSITE_CHANNEL_MODE_MODIFY
{
    DWORD dwSize;                                                  
    int nModeNum;                                                  
    int nMode[NET_MAX_MODE_NUMBER];                                
    NET_COMPOSITECHANNELMODE_INFO stModeInfo[NET_MAX_MODE_NUMBER]; 
} NET_IN_COURSECOMPOSITE_CHANNEL_MODE_MODIFY;
typedef struct tagNET_OUT_COURSECOMPOSITE_CHANNEL_MODE_MODIFY
{
    DWORD dwSize;                         
    int nReturnNum;                       
    int nReturnCode[NET_MAX_MODE_NUMBER]; 
} NET_OUT_COURSECOMPOSITE_CHANNEL_MODE_MODIFY;
typedef struct tagNET_IN_COURSECOMPOSITE_CHANNEL_MODE_GET
{
    DWORD dwSize; 
    int nCount;   
} NET_IN_COURSECOMPOSITE_CHANNEL_MODE_GET;
typedef struct tagNET_OUT_COURSECOMPOSITE_CHANNEL_MODE_GET
{
    DWORD dwSize;                                                  
    int nReturnNum;                                                
    int nMode[NET_MAX_MODE_NUMBER];                                
    NET_COMPOSITECHANNELMODE_INFO stModeInfo[NET_MAX_MODE_NUMBER]; 
} NET_OUT_COURSECOMPOSITE_CHANNEL_MODE_GET;
typedef enum tagNET_COURSECOMPOSITE_MODE_OPERATE_TYPE
{
    NET_COURSECOMPOSITE_MODE_ADD,    
    NET_COURSECOMPOSITE_MODE_DELETE, 
    NET_COURSECOMPOSITE_MODE_MODIFY, 
    NET_COURSECOMPOSITE_MODE_GET,    
} NET_COURSECOMPOSITE_MODE_OPERATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateCourseCompositeChannelMode(LLONG lLoginID, NET_COURSECOMPOSITE_MODE_OPERATE_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime);
#define NET_UPGRADE_COUNT_MAX 256 
typedef struct tagNET_IN_UPGRADER_GETSERIAL
{
    DWORD dwSize; 
} NET_IN_UPGRADER_GETSERIAL;
typedef struct tagNET_UPGRADER_SERIAL_INO
{
    ENUM_VENDOR_TYPE emVendor;             
    ENUM_STANDARD_TYPE emStandard;         
    NET_TIME_EX stuBuild;                  
    char szChip[DH_COMMON_STRING_16];      
    char szSerial[DH_COMMON_STRING_256];   
    char szLanguage[DH_COMMON_STRING_128]; 
    char szSn[DH_COMMON_STRING_64];        
    char szSWVersion[DH_COMMON_STRING_64]; 
    char szTag[DH_COMMON_STRING_256];      
    char szTag2[DH_COMMON_STRING_256];     
    char reserved[1024];
} NET_UPGRADER_SERIAL_INO;
typedef struct tagNET_OUT_UPGRADER_GETSERIAL
{
    DWORD dwSize;                                                    
    NET_UPGRADER_SERIAL_INO stuSerialInfo[MAX_UPGRADER_SERIAL_INFO]; 
    int nRetNum;                                                     
} NET_OUT_UPGRADER_GETSERIAL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetUpdateSerial(LLONG lLoginID, NET_IN_UPGRADER_GETSERIAL* pstuInGetSerial, NET_OUT_UPGRADER_GETSERIAL* pstuOutGetSerial, int nWaitTime);
typedef struct tagNET_IN_CLOUD_UPGRADER_CHECK
{
    DWORD dwSize;
    ENUM_VENDOR_TYPE emVendor;                    
    ENUM_STANDARD_TYPE emStandard;                
    NET_TIME_EX stuBuild;                         
    char szUrl[DH_COMMON_STRING_1024];            
    char szClass[DH_COMMON_STRING_64];            
    char szSerial[DH_COMMON_STRING_256];          
    char szLanguage[DH_COMMON_STRING_128];        
    char szSN[DH_COMMON_STRING_64];               
    char szSWVersion[DH_COMMON_STRING_64];        
    char szTag1[DH_COMMON_STRING_256];            
    char szTag2[DH_COMMON_STRING_256];            
    char szAccessKeyId[DH_COMMON_STRING_128];     
    char szSecretAccessKey[DH_COMMON_STRING_128]; 
} NET_IN_CLOUD_UPGRADER_CHECK;
typedef struct tagNET_OUT_CLOUD_UPGRADER_CHECK
{
    DWORD dwSize;
    BOOL bHasNewVersion;                      
    char szVersion[DH_COMMON_STRING_64];      
    char szAttention[DH_COMMON_STRING_1024];  
    char szPackageUrl[DH_COMMON_STRING_1024]; 
    char szPackageId[DH_COMMON_STRING_64];    
} NET_OUT_CLOUD_UPGRADER_CHECK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUpgraderCheck(NET_IN_CLOUD_UPGRADER_CHECK* pIn, NET_OUT_CLOUD_UPGRADER_CHECK* pOut, DWORD dwWaitTime);
typedef enum tagemCloudDownloadState
{
    emCloudDownloadState_Unknown,           
    emCloudDownloadState_Success,           
    emCloudDownloadState_Failed,            
    emCloudDownloadState_Downloading,       
    emCloudDownloadState_NoEnoughDiskSpace, 
} emCloudDownloadState;
typedef void(CALLBACK* fCloudDownload_Process_callback)(LLONG lDownHandle, emCloudDownloadState emState, double dwDownloadSpeed, DWORD dwProgressPercentage, LDWORD dwUser);
typedef struct tagNET_IN_CLOUD_UPGRADER_DOWN
{
    DWORD dwSize;
    char szPackageUrl[DH_COMMON_STRING_1024];          
    char szSaveFile[DH_COMMON_STRING_1024];            
    fCloudDownload_Process_callback pfProcessCallback; 
    LDWORD dwUser;                                     
} NET_IN_CLOUD_UPGRADER_DOWN;
typedef struct tagNET_OUT_CLOUD_UPGRADER_DOWN
{
    DWORD dwSize;
} NET_OUT_CLOUD_UPGRADER_DOWN;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CloudUpgraderDownLoad(NET_IN_CLOUD_UPGRADER_DOWN* pIn, NET_OUT_CLOUD_UPGRADER_DOWN* pOut);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUpgraderStop(LLONG lDownloadHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUpgraderPause(LLONG lDownloadHandle, BOOL bPause);
typedef enum tagNET_UPGRADE_REPORT_RESULT
{
    NET_UPGRADE_REPORT_RESULT_UNKNWON, 
    NET_UPGRADE_REPORT_RESULT_SUCCESS, 
    NET_UPGRADE_REPORT_RESULT_FAILED,  
} NET_UPGRADE_REPORT_RESULT;
typedef struct tagNET_UPGRADE_REPORT
{
    int nDeviceNum;                                                
    char szDevSerial[NET_UPGRADE_COUNT_MAX][MAX_COMMON_STRING_64]; 
    char szPacketID[MAX_COMMON_STRING_128];                        
    NET_UPGRADE_REPORT_RESULT emResult;                            
    char szCode[MAX_COMMON_STRING_128];                            
    char reserved[256];
} NET_UPGRADE_REPORT;
typedef struct tagNET_IN_UPGRADE_REPORT
{
    DWORD dwSize;
    int nCount;                                   
    NET_UPGRADE_REPORT* pstuUpgradeReport;        
    char szAccessKeyId[DH_COMMON_STRING_128];     
    char szSecretAccessKey[DH_COMMON_STRING_128]; 
    char szUrl[DH_COMMON_STRING_1024];            
} NET_IN_UPGRADE_REPORT;
typedef struct tagNET_OUT_UPGRADE_REPORT
{
    DWORD dwSize;
} NET_OUT_UPGRADE_REPORT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUpgraderReport(NET_IN_UPGRADE_REPORT* pIn, NET_OUT_UPGRADE_REPORT* pOut, DWORD dwWaitTime);
typedef struct tagNET_CLOUD_UPGRADER_STATE
{
    DWORD dwSize;
    EM_UPGRADE_STATE emState;              
    int nProgress;                         
    char szFileName[DH_COMMON_STRING_128]; 
    TP_U64 nTotalLen;                      
    char szFileNameEx[256];                
    char szReserved[1024];                 
} NET_CLOUD_UPGRADER_STATE;
typedef void(CALLBACK* fUpgraderStateCallback)(LLONG lLoginId, LLONG lAttachHandle, NET_CLOUD_UPGRADER_STATE* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_CLOUD_UPGRADER_ATTACH_STATE
{
    DWORD dwSize;
    fUpgraderStateCallback cbUpgraderState;
    LDWORD dwUser;
} NET_IN_CLOUD_UPGRADER_ATTACH_STATE;
typedef struct tagNET_OUT_CLOUD_UPGRADER_ATTACH_STATE
{
    DWORD dwSize;
} NET_OUT_CLOUD_UPGRADER_ATTACH_STATE;
typedef struct tagNET_IN_CLOUD_UPGRADER_GET_STATE
{
    DWORD dwSize;
} NET_IN_CLOUD_UPGRADER_GET_STATE;
typedef struct tagNET_OUT_CLOUD_UPGRADER_GET_STATE
{
    DWORD dwSize;
    EM_UPGRADE_STATE emState;              
    int nProgress;                         
    char szFileName[DH_COMMON_STRING_128]; 
} NET_OUT_CLOUD_UPGRADER_GET_STATE;
typedef struct tagNET_IN_UPGRADER_GET_CAPS
{
    DWORD dwSize;
} NET_IN_UPGRADER_GET_CAPS;
typedef enum tagEM_EXTERN_DEVICE_UPGRADE_TYPE
{
    EM_EXTERN_DEVICE_UPGRADE_TYPE_UNKNOWN = -1, 
    EM_EXTERN_DEVICE_UPGRADE_TYPE_NO_SUPPORT,   
    EM_EXTERN_DEVICE_UPGRADE_TYPE_SUPPORT,      
} EM_EXTERN_DEVICE_UPGRADE_TYPE;
typedef struct tagNET_UPGRADER_CAPS
{
    UINT nOfflineTransfer; 
    UINT nRemoteDownload;  
    UINT nProtocol;        
    EM_EXTERN_DEVICE_UPGRADE_TYPE emExternDeviceUpgrade; 
    BYTE byReserved[120];                                
} NET_UPGRADER_CAPS;
typedef struct tagNET_OUT_UPGRADER_GET_CAPS
{
    DWORD dwSize;
    NET_UPGRADER_CAPS stuCaps; 
} NET_OUT_UPGRADER_GET_CAPS;
typedef struct tagNET_IN_UPGRADER_CANCEL
{
    DWORD dwSize;
} NET_IN_UPGRADER_CANCEL;
typedef struct tagNET_OUT_UPGRADER_CANCEL
{
    DWORD dwSize;
} NET_OUT_UPGRADER_CANCEL;
typedef enum tagEM_CHIP_TYPE
{
    EM_CHIP_TYPE_UNKNOWN,       
    EM_CHIP_TYPE_MAIN,          
    EM_CHIP_TYPE_SUB,           
    EM_CHIP_TYPE_GEOGRAPHY,     
    EM_CHIP_TYPE_EXTEND_TANK_N, 
    EM_CHIP_TYPE_EXTERN_DEVICE, 
} EM_CHIP_TYPE;
typedef struct tagNET_IN_UPGRADER_CHOSE_CHIP_INFO
{
    DWORD dwSize;            
    EM_CHIP_TYPE emChipType; 
} NET_IN_UPGRADER_CHOSE_CHIP_INFO;
typedef struct tagNET_OUT_UPGRADER_CHOSE_CHIP_INFO
{
    DWORD dwSize; 
} NET_OUT_UPGRADER_CHOSE_CHIP_INFO;
typedef enum tagEM_UPGRADE_FILE_TYPE
{
    EM_UPGRADE_FILE_TYPE_UNKNOWN,     
    EM_UPGRADE_FILE_TYPE_APPLICATION, 
    EM_UPGRADE_FILE_TYPE_SYSTEM,      
    EM_UPGRADE_FILE_TYPE_FIRMWARE,    
} EM_UPGRADE_FILE_TYPE;
typedef enum tagEM_CHECK_SUM_TYPE
{
    EM_CHECK_SUM_TYPE_UNKNOWN, 
    EM_CHECK_SUM_TYPE_MD5,     
} EM_CHECK_SUM_TYPE;
typedef struct tagNET_IN_UPGRADER_SET_EXTERN_DEVICE_INFO
{
    DWORD dwSize;                       
    EM_UPGRADE_FILE_TYPE emUpgradeType; 
    int nFileLength;                    
    EM_CHECK_SUM_TYPE emCheckSumType;   
    char szCheckSum[128];               
    int nSessionID;                     
} NET_IN_UPGRADER_SET_EXTERN_DEVICE_INFO;
typedef struct tagNET_OUT_UPGRADER_SET_EXTERN_DEVICE_INFO
{
    DWORD dwSize; 
} NET_OUT_UPGRADER_SET_EXTERN_DEVICE_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CloudUpgraderAttachState(LLONG lLoginID, const NET_IN_CLOUD_UPGRADER_ATTACH_STATE* pInParam, NET_OUT_CLOUD_UPGRADER_ATTACH_STATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUpgraderDetachState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUpgraderGetState(LLONG lLoginID, const NET_IN_CLOUD_UPGRADER_GET_STATE* pInParam, NET_OUT_CLOUD_UPGRADER_GET_STATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpgraderGetCaps(LLONG lLoginID, const NET_IN_UPGRADER_GET_CAPS* pInParam, NET_OUT_UPGRADER_GET_CAPS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpgraderCancel(LLONG lLoginID, const NET_IN_UPGRADER_CANCEL* pInParam, NET_OUT_UPGRADER_CANCEL* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpgraderChooseChip(LLONG lLoginID, const NET_IN_UPGRADER_CHOSE_CHIP_INFO* pInParam, NET_OUT_UPGRADER_CHOSE_CHIP_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpgraderSetExternDeviceInfo(LLONG lLoginID, const NET_IN_UPGRADER_SET_EXTERN_DEVICE_INFO* pInParam, NET_OUT_UPGRADER_SET_EXTERN_DEVICE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_UPGRADER_GET_CHIPLIST_INFO
{
    DWORD dwSize; 
} NET_IN_UPGRADER_GET_CHIPLIST_INFO;
typedef struct tagNET_OUT_UPGRADER_GET_CHIPLIST_INFO
{
    DWORD dwSize;        
    int nListNum;        
    char szList[32][16]; 
} NET_OUT_UPGRADER_GET_CHIPLIST_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpgraderGetChipList(LLONG lLoginID, const NET_IN_UPGRADER_GET_CHIPLIST_INFO* pstuInParam, NET_OUT_UPGRADER_GET_CHIPLIST_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_CLOUDUPLOAD_GETCAPS
{
    DWORD dwSize; 
} NET_IN_CLOUDUPLOAD_GETCAPS;
typedef struct tagNET_OUT_CLOUDUPLOAD_GETCAPS
{
    DWORD dwSize;      
    BOOL bAsyncUpload; 
} NET_OUT_CLOUDUPLOAD_GETCAPS;
typedef struct tagNET_IN_CLOUD_UPLOAD_PICTURE
{
    DWORD dwSize;
    int nChannelID;                              
    int nServerType;                             
    int nPicType;                                
    char szFileName[256];                        
    char szAccessKeyId[DH_COMMON_STRING_64];     
    char szAccessKeySecret[DH_COMMON_STRING_64]; 
    char szBucketName[DH_COMMON_STRING_32];      
    char szFileKey[256];                         
    char szEndPoint[DH_COMMON_STRING_64];        
    UINT nFileLength; 
    char* pFileData;  
} NET_IN_CLOUD_UPLOAD_PICTURE;
typedef struct tagNET_OUT_CLOUD_UPLOAD_PICTURE
{
    DWORD dwSize;
    char szFileName[256];                  
    char szFileURL[DH_COMMON_STRING_2048]; 
    BOOL bAsyncUploadPic;                  
} NET_OUT_CLOUD_UPLOAD_PICTURE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUploadPicture(LLONG lLoginID, const NET_IN_CLOUD_UPLOAD_PICTURE* pInParam, NET_OUT_CLOUD_UPLOAD_PICTURE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_CLOUD_UPLOAD_VIDEO
{
    DWORD dwSize;
    int nChannelID;                              
    int nServerType;                             
    int nAction;                                 
    int nStrategy;                               
    char szAccessKeyId[DH_COMMON_STRING_64];     
    char szAccessKeySecret[DH_COMMON_STRING_64]; 
    char szBucketName[DH_COMMON_STRING_32];      
    char szFileKey[256];                         
    char szEndPoint[DH_COMMON_STRING_64];        
} NET_IN_CLOUD_UPLOAD_VIDEO;
typedef struct tagNET_OUT_CLOUD_UPLOAD_VIDEO
{
    DWORD dwSize;
    BOOL bAsyncUploadVideo; 
} NET_OUT_CLOUD_UPLOAD_VIDEO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CloudUploadVideo(LLONG lLoginID, const NET_IN_CLOUD_UPLOAD_VIDEO* pInParam, NET_OUT_CLOUD_UPLOAD_VIDEO* pOutParam, int nWaitTime);
typedef struct tagNET_SNAPPIC_INFO
{
    char szFileName[256];  
    BOOL bState;           
    char szUrl[2048];      
    BYTE byReserved[1024]; 
} NET_SNAPPIC_INFO;
typedef struct tagNET_VIDEO_INFO
{
    char szFileName[256];  
    unsigned int nChannel; 
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    BOOL bState;           
    BYTE byReserved[1024]; 
} NET_VIDEO_INFO;
typedef struct tagNET_CLOUDUPLOAD_STATE
{
    NET_SNAPPIC_INFO stuSnapPicInfo; 
    NET_VIDEO_INFO stuVideoInfo;     
    BYTE byReserved[2048];           
} NET_CLOUDUPLOAD_STATE;
typedef void(CALLBACK* fCloudUploadStateCallBack)(LLONG lLoginID, LLONG lAttachHandle, NET_CLOUDUPLOAD_STATE* pBuf, int nBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CLOUDUPLOAD_STATE
{
    DWORD dwSize;
    fCloudUploadStateCallBack cbCloudUploadState; 
    LDWORD dwUser;                                
} NET_IN_ATTACH_CLOUDUPLOAD_STATE;
typedef struct tagNET_OUT_ATTACH_CLOUDUPLOAD_STATE
{
    DWORD dwSize;
} NET_OUT_ATTACH_CLOUDUPLOAD_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachCloudUploadState(LLONG lLoginID, NET_IN_ATTACH_CLOUDUPLOAD_STATE* pInBuf, NET_OUT_ATTACH_CLOUDUPLOAD_STATE* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachCloudUploadState(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_RECORD_STATE
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_RECORD_STATE;
typedef struct tagNET_OUT_GET_RECORD_STATE
{
    DWORD dwSize; 
    BOOL bState;  
} NET_OUT_GET_RECORD_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRecordState(LLONG lLoginID, const NET_IN_GET_RECORD_STATE* pInParam, NET_OUT_GET_RECORD_STATE* pOutParam, int nWaitTime);
typedef struct tagNET_DELETE_CONDITION_INFO
{
    NET_TIME stuStartTime;       
    NET_TIME stuStopTime;        
    int nChannels[64];           
    int nChannelNum;             
    EM_STREAM_TYPE emStreamType; 
    BYTE byReserved[1024];       
} NET_DELETE_CONDITION_INFO;
typedef struct tagNET_IN_DELETE_RECORD_FILE_INFO
{
    DWORD dwSize;                                 
    BYTE byReserved[4];                           
    NET_DELETE_CONDITION_INFO stuDeleteCondition; 
} NET_IN_DELETE_RECORD_FILE_INFO;
typedef struct tagNET_OUT_DELETE_RECORD_FILE_INFO
{
    DWORD dwSize; 
} NET_OUT_DELETE_RECORD_FILE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteRecordFile(LLONG lLoginID, const NET_IN_DELETE_RECORD_FILE_INFO* pInParam, NET_OUT_DELETE_RECORD_FILE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_EXAM_RECORDING_PLAN_INFO
{
    char szName[64];        
    char szNumber[64];      
    int nCameraIPNum;       
    char szCameraIP[8][32]; 
    NET_TIME stuStartTime;  
    NET_TIME stuEndTime;    
    char szResvered[256];   
} NET_EXAM_RECORDING_PLAN_INFO;
typedef struct tagNET_IN_SET_EXAM_RECORDING_PLANS
{
    DWORD dwSize;                            
    int nPlansNum;                           
    NET_EXAM_RECORDING_PLAN_INFO* pstuPlans; 
} NET_IN_SET_EXAM_RECORDING_PLANS;
typedef struct tagNET_OUT_SET_EXAM_RECORDING_PLANS
{
    DWORD dwSize; 
} NET_OUT_SET_EXAM_RECORDING_PLANS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetExamRecordingPlans(LLONG lLoginID, const NET_IN_SET_EXAM_RECORDING_PLANS* pstuInParam, NET_OUT_SET_EXAM_RECORDING_PLANS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_COURSERECORD_GETINFO
{
    DWORD dwSize;
    int nClassRoomID; 
} NET_IN_COURSERECORD_GETINFO;
typedef struct tagNET_OUT_COURSERECORD_GETINFO
{
    DWORD dwSize;
    int nChannelNum;                          
    int nCanRecord[MAX_COURSE_LOGIC_CHANNEL]; 
} NET_OUT_COURSERECORD_GETINFO;
typedef struct tagNET_IN_COURSERECORD_SETINFO
{
    DWORD dwSize;
    int nClassRoomID;                         
    int nChannelNum;                          
    int nCanRecord[MAX_COURSE_LOGIC_CHANNEL]; 
} NET_IN_COURSERECORD_SETINFO;
typedef struct tagNET_OUT_COURSERECORD_SETINFO
{
    DWORD dwSize;
} NET_OUT_COURSERECORD_SETINFO;
typedef struct tagNET_IN_COURSERECORD_UPDATE_INFO
{
    DWORD dwSize;
    int nClassRoomID; 
    NET_TIME stuTime; 
} NET_IN_COURSERECORD_UPDATE_INFO;
typedef struct tagNET_OUT_COURSERECORD_UPDATE_INFO
{
    DWORD dwSize;
} NET_OUT_COURSERECORD_UPDATE_INFO;
typedef struct tagNET_IN_COURSERECORD_GET_TIME
{
    DWORD dwSize;
    int nClassRoomID; 
} NET_IN_COURSERECORD_GET_TIME;
typedef struct tagNET_OUT_COURSERECORD_GET_TIME
{
    DWORD dwSize;
    UINT nTime; 
} NET_OUT_COURSERECORD_GET_TIME;
typedef enum tagEM_COURSERECORD_OPERATE_TYPE
{
    EM_COURSERECORDE_TYPE_GET_INFO,    
    EM_COURSERECORDE_TYPE_SET_INFO,    
    EM_COURSERECORDE_TYPE_UPDATE_INFO, 
    EM_COURSERECORDE_TYPE_GET_TIME,    
} EM_COURSERECORD_OPERATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateCourseRecordManager(LLONG lLoginID, EM_COURSERECORD_OPERATE_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime);
typedef void(CALLBACK* fConfigChangeCallBack)(LLONG lAttachHandle, char* szCommand, char* szBuffer, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CONFIGCHANNGE
{
    DWORD dwSize;
    char* szCfgName;                
    fConfigChangeCallBack cbNotify; 
    LDWORD dwUser;                  
} NET_IN_ATTACH_CONFIGCHANNGE;
typedef struct tagNET_OUT_ATTACH_CONFIGCHANNGE
{
    DWORD dwSize;
} NET_OUT_ATTACH_CONFIGCHANNGE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachConfigChange(LLONG lLoginID, NET_IN_ATTACH_CONFIGCHANNGE* pInBuf, NET_OUT_ATTACH_CONFIGCHANNGE* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachConfigChange(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_RINGFILELIST
{
    DWORD dwSize;
} NET_IN_GET_RINGFILELIST;
typedef struct tagNET_OUT_GET_RINGFILELIST
{
    DWORD dwSize;
    UINT nRingFileNum;                                          
    char szRingFileList[MAX_RINGFILE_NUM][DH_COMMON_STRING_64]; 
} NET_OUT_GET_RINGFILELIST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRingFileList(LLONG lLoginID, NET_IN_GET_RINGFILELIST* pstuInParam, NET_OUT_GET_RINGFILELIST* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GETCONNECTION_STATUS
{
    DWORD dwSize;
} NET_IN_GETCONNECTION_STATUS;
typedef struct tagNET_OUT_GETCONNECTION_STATUS
{
    DWORD dwSize;
    int nChannelNum;                      
    int nStatus[MAX_ALARMEXT_MODULE_NUM]; 
} NET_OUT_GETCONNECTION_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetConnectionStatus(LLONG lLoginID, const NET_IN_GETCONNECTION_STATUS* pstuInParam, NET_OUT_GETCONNECTION_STATUS* pstuOutParam, int nWaitTime);
#define MAX_ALARM_BOX_VIDEO_NUM 16
typedef struct tagNET_IN_GETALARMBOXVIDEOCONNECTION_STATUS
{
    DWORD dwSize;
} NET_IN_GETALARMBOXVIDEOCONNECTION_STATUS;
typedef struct tagNET_OUT_GETALARMBOXVIDEOCONNECTION_STATUS
{
    DWORD dwSize;
    int nChannelNum;                      
    int nStatus[MAX_ALARM_BOX_VIDEO_NUM]; 
} NET_OUT_GETALARMBOXVIDEOCONNECTION_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAlarmBoxVideoConnectionStatus(LLONG lLoginID, const NET_IN_GETALARMBOXVIDEOCONNECTION_STATUS* pstuInParam, NET_OUT_GETALARMBOXVIDEOCONNECTION_STATUS* pstuOutParam, int nWaitTime);
typedef enum tagEM_GETUSERINFOBYCONDITION_USER_TYPE
{
    EM_GETUSERINFOBYCONDITION_USER_TYPE_UNKNOWN,       
    EM_GETUSERINFOBYCONDITION_USER_TYPE_KEYPAD,        
    EM_GETUSERINFOBYCONDITION_USER_TYPE_ICCARD,        
    EM_GETUSERINFOBYCONDITION_USER_TYPE_REMOTECONTROL, 
    EM_GETUSERINFOBYCONDITION_USER_TYPE_MOBILE,        
    EM_GETUSERINFOBYCONDITION_USER_TYPE_KEY,           
} EM_GETUSERINFOBYCONDITION_USER_TYPE;
typedef enum tagEM_GETUSERINFOBYCONDITION_USER_STATUS
{
    EM_GETUSERINFOBYCONDITION_USER_STATUS_UNKNOWN,     
    EM_GETUSERINFOBYCONDITION_USER_STATUS_NOPRESENT,   
    EM_GETUSERINFOBYCONDITION_USER_STATUS_INACTIVATED, 
    EM_GETUSERINFOBYCONDITION_USER_STATUS_ACTIVATED,   
} EM_GETUSERINFOBYCONDITION_USER_STATUS;
typedef struct tagNET_IN_GETALARMUSERINFO_BY_CONDITION
{
    DWORD dwSize;
    EM_GETUSERINFOBYCONDITION_USER_TYPE emUserType;     
    EM_GETUSERINFOBYCONDITION_USER_STATUS emUserStatus; 
} NET_IN_GETALARMUSERINFO_BY_CONDITION;
typedef enum tagEM_ALARM_USERAUTHORITY
{
    EM_ALARM_USERAUTHORITY_UNKNOWN,         
    EM_ALARM_USERAUTHORITY_ARMING,          
    EM_ALARM_USERAUTHORITY_FORCEARMING,     
    EM_ALARM_USERAUTHORITY_DISARM,          
    EM_ALARM_USERAUTHORITY_BYPASS,          
    EM_ALARM_USERAUTHORITY_PERMANENTBYPASS, 
    EM_ALARM_USERAUTHORITY_ALARMCONFIRM,    
    EM_ALARM_USERAUTHORITY_QUERYLOG,        
    EM_ALARM_USERAUTHORITY_DEBUGMODE,       
    EM_ALARM_USERAUTHORITY_UPGRADE,         
    EM_ALARM_USERAUTHORITY_SYSTEMCONFIG,    
    EM_ALARM_USERAUTHORITY_USERMANAGEMENT,  
} EM_ALARM_USERAUTHORITY;
typedef enum tagEM_ALARM_USER_GROUP
{
    EM_ALARM_USER_GROUP_UNKNOWN,      
    EM_ALARM_USER_GROUP_ADMIN,        
    EM_ALARM_USER_GROUP_INSTALLER,    
    EM_ALARM_USER_GROUP_MANUFACTURER, 
    EM_ALARM_USER_GROUP_OPERATOR,     
} EM_ALARM_USER_GROUP;
typedef enum tagEM_ALARM_ONECLICKARMING_FUNCTION
{
    EM_ALARM_ONECLICKARMING_FUNCTION_UNKNOWN, 
    EM_ALARM_ONECLICKARMING_FUNCTION_ONOFF,   
    EM_ALARM_ONECLICKARMING_FUNCTION_ONONLY,  
    EM_ALARM_ONECLICKARMING_FUNCTION_OFFONLY, 
} EM_ALARM_ONECLICKARMING_FUNCTION;
typedef enum tagEM_ALARM_ONECLICKARMING_TRIGGEROPTION
{
    EM_ALARM_ONECLICKARMING_TRIGGEROPTION_UNKNOWN,  
    EM_ALARM_ONECLICKARMING_TRIGGEROPTION_IMPULSE,  
    EM_ALARM_ONECLICKARMING_TRIGGEROPTION_BISTABLE, 
} EM_ALARM_ONECLICKARMING_TRIGGEROPTION;
typedef enum tagEM_ARM_TYPE
{
    EM_ARM_TYPE_UNKNOWN,         
    EM_ARM_TYPE_TOTAL_ARMING,    
    EM_ARM_TYPE_PARTIAL1_ARMING, 
    EM_ARM_TYPE_PARTIAL2_ARMING, 
    EM_ARM_TYPE_PARTIAL_ARMING,  
    EM_ARM_TYPE_DENFENCE_ARMING, 
    EM_ARM_TYPE_DISARMING,       
} EM_ARM_TYPE;
typedef enum tagNET_EM_SCENE_MODE
{
    NET_EM_SCENE_MODE_UNKNOWN,  
    NET_EM_SCENE_MODE_OUTDOOR,  
    NET_EM_SCENE_MODE_INDOOR,   
    NET_EM_SCENE_MODE_WHOLE,    
    NET_EM_SCENE_MODE_RIGHTNOW, 
    NET_EM_SCENE_MODE_AUTO,     
    NET_EM_SCENE_MODE_FORCE,    
    NET_EM_SCENE_MODE_CUSTOM,   
    NET_EM_SCENE_MODE_SLEEPING, 
} NET_EM_SCENE_MODE;
typedef struct tagNET_ALARM_USER_ONECLICKARMING
{
    BOOL bEnable;                                          
    EM_ALARM_ONECLICKARMING_FUNCTION emFunction;           
    EM_ALARM_ONECLICKARMING_TRIGGEROPTION emTriggerOption; 
    NET_EM_SCENE_MODE emArmProfile;                        
    EM_ARM_TYPE emArmMode;                                 
    BYTE byReserved[256];                                  
} NET_ALARM_USER_ONECLICKARMING;
typedef struct tagNET_ALARM_USER_EXTERN
{
    char szDuressPassword[64]; 
    char szCard[64][32];       
    int nCardNum;              
    char szReserved[1020];     
} NET_ALARM_USER_EXTERN;
typedef struct tagNET_ALARM_USER
{
    char szID[32];                                      
    EM_GETUSERINFOBYCONDITION_USER_STATUS emUserStatus; 
    char szName[64];                                    
    char szPassword[64];                                
    int nAuthorityListNum;                              
    EM_ALARM_USERAUTHORITY emAuthorityList[32];         
    EM_ALARM_USER_GROUP emGroup;                        
    BOOL bReserved;                                     
    EM_GETUSERINFOBYCONDITION_USER_TYPE emUserType;     
    UINT nInterval;                                     
    NET_TIME stuAccessAllowTimeStart;                   
    NET_TIME stuAccessAllowTimeEnd;                     
    char szMemo[32];                                    
    int nSubSystemNum;                                  
    int nSubSystems[64];                                
    int nZoneNum;                                       
    int nZones[256];                                    
    NET_ALARM_USER_ONECLICKARMING stuOneClickArming;    
    NET_ALARM_USER_EXTERN* pstuAlarmUserExtern;         
    BYTE byReserved[256 - POINTERSIZE];                 
} NET_ALARM_USER;
typedef struct tagNET_OUT_GETALARMUSERINFO_BY_CONDITION
{
    DWORD dwSize;                    
    UINT nUserInfoNum;               
    NET_ALARM_USER stuUserInfo[512]; 
} NET_OUT_GETALARMUSERINFO_BY_CONDITION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAlarmUserInfoByCondition(LLONG lLoginID, const NET_IN_GETALARMUSERINFO_BY_CONDITION* pstuInParam, NET_OUT_GETALARMUSERINFO_BY_CONDITION* pstuOutParam, int nWaitTime);
typedef enum tagNET_ATTENDANCE_AUTHORITY
{
    NET_ATTENDANCE_AUTHORITY_UNKNOWN = -1,
    NET_ATTENDANCE_AUTHORITY_CUSTOMER,       
    NET_ATTENDANCE_AUTHORITY_ADMINISTRATORS, 
} NET_ATTENDANCE_AUTHORITY;
#define MAX_ATTENDANCE_USERNAME_LEN 36
typedef struct tagNET_ATTENDANCE_USERINFO
{
    char szUserID[MAX_COMMON_STRING_32];          
    char szUserName[MAX_ATTENDANCE_USERNAME_LEN]; 
    char szCardNo[MAX_COMMON_STRING_32];          
    NET_ATTENDANCE_AUTHORITY emAuthority;         
    char szPassword[MAX_COMMON_STRING_32];        
    int nPhotoLength;                             
    char szClassNumber[MAX_CLASS_NUMBER_LEN];     
    char szPhoneNumber[MAX_PHONENUMBER_LEN];      
    NET_ACCESSCTLCARD_TYPE emCardType;            
    BYTE byReserved[204];                         
} NET_ATTENDANCE_USERINFO;
typedef struct tagNET_IN_FINGERPRINT_INSERT_BY_USERID
{
    DWORD dwSize;
    char szUserID[DH_COMMON_STRING_32]; 
    int nSinglePacketLen;               
    int nPacketCount;                   
    char* szFingerPrintInfo;            
} NET_IN_FINGERPRINT_INSERT_BY_USERID;
typedef struct tagNET_OUT_FINGERPRINT_INSERT_BY_USERID
{
    DWORD dwSize;
    int nFingerPrintID[DH_MAX_FINGER_PRINT]; 
    int nReturnedCount;                      
    int nFailedCode;                         
} NET_OUT_FINGERPRINT_INSERT_BY_USERID;
typedef struct tagNET_CTRL_IN_FINGERPRINT_REMOVE_BY_USERID
{
    DWORD dwSize;
    char szUserID[DH_COMMON_STRING_32]; 
} NET_CTRL_IN_FINGERPRINT_REMOVE_BY_USERID;
typedef struct tagNET_CTRL_OUT_FINGERPRINT_REMOVE_BY_USERID
{
    DWORD dwSize;
} NET_CTRL_OUT_FINGERPRINT_REMOVE_BY_USERID;
typedef struct tagNET_CTRL_IN_FINGERPRINT_REMOVE
{
    DWORD dwSize;
    int nFingerPrintID; 
} NET_CTRL_IN_FINGERPRINT_REMOVE;
typedef struct tagNET_CTRL_OUT_FINGERPRINT_REMOVE
{
    DWORD dwSize;
} NET_CTRL_OUT_FINGERPRINT_REMOVE;
typedef struct tagNET_CTRL_IN_FINGERPRINT_GET
{
    DWORD dwSize;
    int nFingerPrintID; 
} NET_CTRL_IN_FINGERPRINT_GET;
typedef struct tagNET_CTRL_OUT_FINGERPRINT_GET
{
    DWORD dwSize;
    char szUserID[DH_COMMON_STRING_32];          
    char szFingerPrintName[DH_COMMON_STRING_32]; 
    int nFingerPrintID;                          
    int nRetLength;                              
    int nMaxFingerDataLength;                    
    char* szFingerPrintInfo;                     
} NET_CTRL_OUT_FINGERPRINT_GET;
typedef struct tagNET_IN_ATTENDANCE_FINDUSER
{
    DWORD dwSize;
    int nOffset;          
    int nPagedQueryCount; 
} NET_IN_ATTENDANCE_FINDUSER;
typedef struct tagNET_OUT_ATTENDANCE_FINDUSER
{
    DWORD dwSize;
    int nTotalUser;                       
    int nMaxUserCount;                    
    NET_ATTENDANCE_USERINFO* stuUserInfo; 
    int nRetUserCount;                    
    int nMaxPhotoDataLength;              
    int nRetPhoteLength;                  
    BYTE* pbyPhotoData;                   
} NET_OUT_ATTENDANCE_FINDUSER;
typedef struct tagNET_IN_FINGERPRINT_GETBYUSER
{
    DWORD dwSize;
    char szUserID[MAX_COMMON_STRING_32]; 
} NET_IN_FINGERPRINT_GETBYUSER;
typedef struct tagNET_OUT_FINGERPRINT_GETBYUSER
{
    DWORD dwSize;
    int nFingerPrintIDs[DH_MAX_FINGER_PRINT]; 
    int nRetFingerPrintCount;                 
    int nSinglePacketLength;                  
    int nMaxFingerDataLength;                 
    int nRetFingerDataLength;                 
    BYTE* pbyFingerData;                      
} NET_OUT_FINGERPRINT_GETBYUSER;
typedef struct tagNET_IN_ATTENDANCE_ADDUSER
{
    DWORD dwSize;
    NET_ATTENDANCE_USERINFO stuUserInfo; 
    BYTE* pbyPhotoData;                  
} NET_IN_ATTENDANCE_ADDUSER;
typedef struct tagNET_OUT_ATTENDANCE_ADDUSER
{
    DWORD dwSize;
} NET_OUT_ATTENDANCE_ADDUSER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_AddUser(LLONG lLoginID, NET_IN_ATTENDANCE_ADDUSER* pstuInAddUser, NET_OUT_ATTENDANCE_ADDUSER* pstuOutAddUser, int nWaitTime);
typedef struct tagNET_IN_ATTENDANCE_DELUSER
{
    DWORD dwSize;
    char szUserID[MAX_COMMON_STRING_32]; 
} NET_IN_ATTENDANCE_DELUSER;
typedef struct tagNET_OUT_ATTENDANCE_DELUSER
{
    DWORD dwSize;
} NET_OUT_ATTENDANCE_DELUSER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_DelUser(LLONG lLoginID, NET_IN_ATTENDANCE_DELUSER* pstuInDelUser, NET_OUT_ATTENDANCE_DELUSER* pstuOutDelUser, int nWaitTime);
typedef struct tagNET_IN_ATTENDANCE_ModifyUSER
{
    DWORD dwSize;
    NET_ATTENDANCE_USERINFO stuUserInfo; 
    BYTE* pbyPhotoData;                  
} NET_IN_ATTENDANCE_ModifyUSER;
typedef struct tagNET_OUT_ATTENDANCE_ModifyUSER
{
    DWORD dwSize;
} NET_OUT_ATTENDANCE_ModifyUSER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_ModifyUser(LLONG lLoginID, NET_IN_ATTENDANCE_ModifyUSER* pstuInModifyUser, NET_OUT_ATTENDANCE_ModifyUSER* pstuOutModifyUser, int nWaitTime);
typedef struct tagNET_IN_ATTENDANCE_GetUSER
{
    DWORD dwSize;
    char szUserID[MAX_COMMON_STRING_32]; 
} NET_IN_ATTENDANCE_GetUSER;
typedef struct tagNET_OUT_ATTENDANCE_GetUSER
{
    DWORD dwSize;
    NET_ATTENDANCE_USERINFO stuUserInfo; 
    int nMaxLength;                      
    BYTE* pbyPhotoData;                  
} NET_OUT_ATTENDANCE_GetUSER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_GetUser(LLONG lLoginID, NET_IN_ATTENDANCE_GetUSER* pstuInGetUser, NET_OUT_ATTENDANCE_GetUSER* pstuOutGetUser, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_InsertFingerByUserID(LLONG lLoginID, NET_IN_FINGERPRINT_INSERT_BY_USERID* pstuInInsert, NET_OUT_FINGERPRINT_INSERT_BY_USERID* pstuOutInsert, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_RemoveFingerByUserID(LLONG lLoginID, NET_CTRL_IN_FINGERPRINT_REMOVE_BY_USERID* pstuInRemove, NET_CTRL_OUT_FINGERPRINT_REMOVE_BY_USERID* pstuOutRemove, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_GetFingerRecord(LLONG lLoginID, NET_CTRL_IN_FINGERPRINT_GET* pstuInGet, NET_CTRL_OUT_FINGERPRINT_GET* pstuOutGet, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_RemoveFingerRecord(LLONG lLoginID, NET_CTRL_IN_FINGERPRINT_REMOVE* pstuInRemove, NET_CTRL_OUT_FINGERPRINT_REMOVE* pstuOutRemove, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_FindUser(LLONG lLoginID, NET_IN_ATTENDANCE_FINDUSER* pstuInFindUser, NET_OUT_ATTENDANCE_FINDUSER* pstuOutFindUser, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_GetFingerByUserID(LLONG lLoginID, NET_IN_FINGERPRINT_GETBYUSER* pstuIn, NET_OUT_FINGERPRINT_GETBYUSER* pstuOut, int nWaitTime);
typedef enum tagEM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE
{
    EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE_UNKNOWN = -1, 
    EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE_NONE = 0,     
    EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE_ONVIF,        
    EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE_UPNP,         
} EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE;
typedef struct tagNET_DEVICE_DISCOVERY_INFO
{
    DWORD dwSize;
    char szMachineName[DH_COMMON_STRING_32];          
    char szDeviceClass[DH_COMMON_STRING_32];          
    char szDeviceType[DH_COMMON_STRING_32];           
    char szSerialNo[DH_COMMON_STRING_32];             
    char szVersion[DH_COMMON_STRING_32];              
    char szMac[DH_COMMON_STRING_32];                  
    int nVideoInputChannels;                          
    int nRemoteVideoInputChannels;                    
    int nVideoOutputChannels;                         
    int nAlarmInputChannels;                          
    int nAlarmOutputChannels;                         
    int nAudioInputChannels;                          
    int nPort;                                        
    char szVendor[DH_COMMON_STRING_32];               
    int nInit;                                        
    char szIPv4Address[DH_COMMON_STRING_32];          
    char szIPv4SubnetMask[DH_COMMON_STRING_32];       
    char szIPv4DefaultGateway[DH_COMMON_STRING_32];   
    BOOL bIPv4DhcpEnable;                             
    char szIPv6Address[DH_COMMON_STRING_32];          
    char szIPv6DefaultGateway[DH_COMMON_STRING_32];   
    char szIPv6LinkLocalAddress[DH_COMMON_STRING_32]; 
    BOOL bIPv6DhcpEnable;                             
    char szProtocol[DH_COMMON_STRING_32];             
} NET_DEVICE_DISCOVERY_INFO;
typedef void(CALLBACK* fAttachDeviceDiscoveryCB)(LLONG lAttachHandle, NET_DEVICE_DISCOVERY_INFO* pDeviceInfo, int nDeviceNum, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_DEVICE_DISCOVERY
{
    DWORD dwSize;
    EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE emSubClassID; 
    fAttachDeviceDiscoveryCB cbNotify;                    
    LDWORD dwUser;                                        
} NET_IN_ATTACH_DEVICE_DISCOVERY;
typedef struct tagNET_OUT_ATTACH_DEVICE_DISCOVERY
{
    DWORD dwSize;
} NET_OUT_ATTACH_DEVICE_DISCOVERY;
typedef struct tagNET_IN_START_DEVICE_DISCOVERY
{
    DWORD dwSize;
    EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE emSubClassID; 
    int nTimeOut;                                         
} NET_IN_START_DEVICE_DISCOVERY;
typedef struct tagNET_OUT_START_DEVICE_DISCOVERY
{
    DWORD dwSize;
} NET_OUT_START_DEVICE_DISCOVERY;
typedef struct tagNET_IN_STOP_DEVICE_DISCOVERY
{
    DWORD dwSize;
    EM_NET_DEVICE_DISCOVERY_SUBCLASSID_TYPE emSubClassID; 
} NET_IN_STOP_DEVICE_DISCOVERY;
typedef struct tagNET_OUT_STOP_DEVICE_DISCOVERY
{
    DWORD dwSize;
} NET_OUT_STOP_DEVICE_DISCOVERY;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachDeviceDiscovery(LLONG lLoginID, const NET_IN_ATTACH_DEVICE_DISCOVERY* pInParam, NET_OUT_ATTACH_DEVICE_DISCOVERY* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachDeviceDiscovery(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartDeviceDiscovery(LLONG lLoginID, const NET_IN_START_DEVICE_DISCOVERY* pInParam, NET_OUT_START_DEVICE_DISCOVERY* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopDeviceDiscovery(LLONG lLoginID, const NET_IN_STOP_DEVICE_DISCOVERY* pInParam, NET_OUT_STOP_DEVICE_DISCOVERY* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDefenceArmMode(LLONG lLoginID, NET_IN_SET_DEFENCEMODE* pInBuf, NET_OUT_SET_DEFENCEMODE* pOutBuf = NULL, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDefenceArmMode(LLONG lLoginID, NET_IN_GET_DEFENCEMODE* pInBuf, NET_OUT_GET_DEFENCEMODE* pOutBuf, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSubSystemArmMode(LLONG lLoginID, NET_IN_SET_SUBSYSTEMMODE* pInBuf, NET_OUT_SET_SUBSYSTEMMODE* pOutBuf = NULL, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSubSystemArmMode(LLONG lLoginID, NET_IN_GET_SUBSYSTEMMODE* pInBuf, NET_OUT_GET_SUBSYSTEMMODE* pOutBuf, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetArmMode(LLONG lLoginID, NET_IN_GET_ARM_MODE* pInBuf, NET_OUT_GET_ARM_MODE* pOutBuf, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InsertAccessControlCards(LLONG lLoginID, int nInsertCount, const NET_RECORDSET_ACCESS_CTL_CARD* pInsertCards, int* pRecNo, void* reserved = NULL, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IMAGE_COMPARE_INFO
{
    DWORD dwoffset;       
    DWORD dwLength;       
    DWORD dwWidth;        
    DWORD dwHeight;       
    BYTE byReserved[128]; 
} NET_IMAGE_COMPARE_INFO;
typedef struct tagNET_MATCH_TWO_FACE_IN
{
    DWORD dwSize;
    NET_IMAGE_COMPARE_INFO stuOriginalImage; 
    NET_IMAGE_COMPARE_INFO stuCompareImage;  
    char* pSendBuf;                          
    DWORD dwSendBufLen;                      
} NET_MATCH_TWO_FACE_IN;
typedef struct tagNET_MATCH_TWO_FACE_OUT
{
    DWORD dwSize;
    int nSimilarity; 
} NET_MATCH_TWO_FACE_OUT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatchTwoFaceImage(LLONG lLoginID, const NET_MATCH_TWO_FACE_IN* pstInParam, NET_MATCH_TWO_FACE_OUT* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef enum tagEM_DECODE_FRAME_TYPE
{
    EM_FRAME_TYPE_UNKNOWN = -1, 
    EM_FRAME_TYPE_VIDEO = 0,    
    EM_FRAME_TYPE_AUDIO = 1,    
} EM_DECODE_FRAME_TYPE;
typedef struct tagNET_FRAME_INFO_EX
{
    DWORD dwSize;
    EM_DECODE_FRAME_TYPE emFrameType; 
    int nFrameSeq;                    
    int nStamp;                       
    int nWidth;                       
    int nHeight;                      
    int nFrameRate;                   
    int nChannels;                    
    int nBitPerSample;                
    int nSamplesPerSec;               
    int nRemainData;                  
    NET_TIME_EX nDataTime;            
} NET_FRAME_INFO_EX;
typedef struct tagNET_FRAME_DECODE_INFO
{
    DWORD dwSize;
    EM_DECODE_FRAME_TYPE emFrameType; 
    void* pAudioData;  
    int nAudioDataLen; 
    void* pVideoData[3]; 
    int nStride[3];      
    int nWidth[3];       
    int nHeight[3];      
} NET_FRAME_DECODE_INFO;
typedef void(CALLBACK* fDecCallBack)(LLONG lLoginID, LLONG lPlayHandle, NET_FRAME_DECODE_INFO* pFrameDecodeInfo, NET_FRAME_INFO_EX* pFrameInfo, LDWORD dwUserData, LLONG nReserved);
CLIENT_NET_API void CALL_METHOD CLIENT_SetDecCallBack(fDecCallBack cbDecCallBack, LDWORD dwUserData, LLONG nReserved = 0);
CLIENT_NET_API void CALL_METHOD CLIENT_SetDecCallBackEx(fDecCallBack cbDecCallBack, LDWORD dwUserData, NET_VIDEOSTREAM_TYPE emVideoStreamType, LLONG nReserved);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevDefaultConfig(LLONG lLoginID, NET_EM_CFG_OPERATE_TYPE emCfgOpType, int nChannelID,
                                                           LPVOID lpOutBuffer, DWORD dwOutBufferSize, int nWaittime);
#define NET_CUSTOM_PARKING_SPACE_NUMBER_MAX_LEN 32 
typedef enum tagEM_PARKINGSPACE_LIGHT_COLOR
{
    EM_PARKINGSPACE_LIGHT_COLOR_UNKNOWN, 
    EM_PARKINGSPACE_LIGHT_COLOR_RED,     
    EM_PARKINGSPACE_LIGHT_COLOR_YELLOW,  
    EM_PARKINGSPACE_LIGHT_COLOR_GREEN,   
    EM_PARKINGSPACE_LIGHT_COLOR_BLUE,    
    EM_PARKINGSPACE_LIGHT_COLOR_PURPLE,  
    EM_PARKINGSPACE_LIGHT_COLOR_WHITE,   
    EM_PARKINGSPACE_LIGHT_COLOR_PINK,    
} EM_PARKINGSPACE_LIGHT_COLOR;
typedef enum tagEM_PARKINGSPACE_LIGHT_STATE
{
    EM_PARKINGSPACE_LIGHT_STATE_UNKNOWN = -1, 
    EM_PARKINGSPACE_LIGHT_STATE_OFF,          
    EM_PARKINGSPACE_LIGHT_STATE_ON,           
    EM_PARKINGSPACE_LIGHT_STATE_GLINT,        
    EM_PARKINGSPACE_LIGHT_STATE_LAST_STATE,   
} EM_PARKINGSPACE_LIGHT_STATE;
typedef struct tagNET_PARKING_SPACE_LIGHT_PLAN_INFO
{
    EM_PARKINGSPACE_LIGHT_COLOR emColor; 
    EM_PARKINGSPACE_LIGHT_STATE emState; 
    int nKeepTime;                       
    BYTE byReserved[128];                
} NET_PARKING_SPACE_LIGHT_PLAN_INFO;
typedef struct tagNET_IN_SET_PARKING_SPACE_LIGHT_PLAN
{
    DWORD dwSize;                                                 
    int nPhysicalLane;                                            
    char szCustomParkNo[NET_CUSTOM_PARKING_SPACE_NUMBER_MAX_LEN]; 
    int nLightPlanNum;                                            
    NET_PARKING_SPACE_LIGHT_PLAN_INFO* pstuLightPlan;             
} NET_IN_SET_PARKING_SPACE_LIGHT_PLAN;
typedef struct tagNET_OUT_SET_PARKING_SPACE_LIGHT_PLAN
{
    DWORD dwSize; 
} NET_OUT_SET_PARKING_SPACE_LIGHT_PLAN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetParkingSpaceLightPlan(LLONG lLoginID, const NET_IN_SET_PARKING_SPACE_LIGHT_PLAN* pNetDataIn, NET_OUT_SET_PARKING_SPACE_LIGHT_PLAN* pNetDataOut, int nWaitTime);
typedef struct tagNET_IN_SYNC_PARKING_INFO
{
    DWORD dwSize;          
    int nChannel;          
    char szParkingNum[32]; 
    DWORD dwPresetNum;     
    BOOL bHaveCar;         
    BOOL bParkingFault;    
    int nSnapTimes;        
    int nSnapIntervel;     
} NET_IN_SYNC_PARKING_INFO;
typedef struct tagNET_OUT_SYNC_PARKING_INFO
{
    DWORD dwSize; 
} NET_OUT_SYNC_PARKING_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SyncParkingInfo(LLONG lLoginID, const NET_IN_SYNC_PARKING_INFO* pNetIn, NET_OUT_SYNC_PARKING_INFO* pNetOut, int nWaitTime);
typedef struct tagDEV_ALARM_OBJECTSTRUCTLIZE_PIC_INFO
{
    char szCutPicPath[MAX_PATH]; 
    DWORD dwWidth;               
    DWORD dwHeight;              
    BYTE byReserved[256];        
} DEV_ALARM_OBJECTSTRUCTLIZE_PIC_INFO;
typedef struct tagDEV_PERSON_CONDITION_RESULT_FEATURE_INFO
{
    EM_DEV_EVENT_FACEDETECT_SEX_TYPE emSex;         
    BYTE byAge;                                     
    BYTE byCall;                                    
    BYTE byHat;                                     
    BYTE byBag;                                     
    BYTE byUmbrella;                                
    BYTE byGlasses;                                 
    BYTE byReserved1[2];                            
    EM_DEV_EVENT_FACEDETECT_FEATURE_TYPE emEmotion; 
    NET_COLOR_RGBA stuUpperBodyColor;               
    NET_COLOR_RGBA stuLowerBodyColor;               
    BYTE byReserved[256];                           
} DEV_PERSON_CONDITION_FEATURE_INFO, DEV_PERSON_RESULT_FEATURE_INFO;
typedef struct tagDEV_EVENT_OBJECTSTRUCTLIZE_PERSON_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    BYTE bReserved1[4];             
    double dbPTS;                   
    NET_TIME_EX stuUTC;             
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nEventAction;               
    char szFilePath[MAX_PATH];                        
    DEV_PERSON_RESULT_FEATURE_INFO stuPersonFeatrue;  
    NET_RECT stuBoundingBoxRect;                      
    DEV_ALARM_OBJECTSTRUCTLIZE_PIC_INFO stuImageInfo; 
    int nImageIndex;      
    DWORD dwSnapFlagMask; 
    BYTE bReserved[1024]; 
} DEV_EVENT_OBJECTSTRUCTLIZE_PERSON_INFO;
typedef struct tagDEV_EVENT_OBJECTSTRUCTLIZE_NONMOTOR_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    BYTE bReserved1[4];             
    double dbPTS;                   
    NET_TIME_EX stuUTC;             
    int nEventID;                   
    DH_EVENT_FILE_INFO stuFileInfo; 
    int nEventAction;               
    char szFilePath[MAX_PATH];                        
    char szPlateNumber[DH_MAX_PLATE_NUMBER_LEN];      
    DEV_PERSON_RESULT_FEATURE_INFO stuPersonFeatrue;  
    NET_RECT stuBoundingBoxRect;                      
    DEV_ALARM_OBJECTSTRUCTLIZE_PIC_INFO stuImageInfo; 
    int nImageIndex;      
    DWORD dwSnapFlagMask; 
    BYTE bReserved[1024]; 
} DEV_EVENT_OBJECTSTRUCTLIZE_NONMOTOR_INFO;
typedef struct tagALARM_TUMBLE_DETECTION_INFO
{
    int nAction;                            
    int nChannelID;                         
    double PTS;                             
    NET_TIME_EX UTC;                        
    int nEventID;                           
    int UTCMS;                              
    EM_CLASS_TYPE emClassType;              
    int nObjectID;                          
    char szObjectType[DH_COMMON_STRING_16]; 
    NET_RECT stuBoundingBox;                
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
    int nTriggerType;                       
    int nSubType;                           
    char szMac[32];                         
    BYTE byReserved[984];                   
} ALARM_TUMBLE_DETECTION_INFO;
typedef struct tagDEV_EVENT_TUMBLE_DETECTION_INFO
{
    int nChannelID;                 
    char szName[DH_EVENT_NAME_LEN]; 
    int nAction;                    
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    int UTCMS;                      
    EM_CLASS_TYPE emClassType;              
    int nObjectID;                          
    char szObjectType[DH_COMMON_STRING_16]; 
    NET_RECT stuBoundingBox;                
    char szSerialUUID[22];                  
    SCENE_IMAGE_INFO stuSceneImage;         
    NET_IMAGE_INFO_EX2* pstuImageInfo;      
    int nImageInfoNum;                      
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
    int nDetectRegionNum;                   
    NET_POINT_EX stuDetectRegion[20];       
    BYTE bReserved[834];                    
} DEV_EVENT_TUMBLE_DETECTION_INFO;
typedef struct tagDEV_EVENT_SPILLEDMATERIAL_DETECTION_INFO
{
    int nChannelID;    
    char szName[128];  
    char bReserved[4]; 
    double PTS;        
    NET_TIME_EX UTC;   
    int nEventID;      
    DH_MSG_OBJECT_EX stuObjects[MAX_OBJECT_NUM_EX]; 
    int nObjectNum;                                 
    DH_EVENT_FILE_INFO stuFileInfo;                 
    DH_POINT stuDetectLine[DH_MAX_DETECT_LINE_NUM]; 
    int nDetectLineNum;                             
    DH_POINT stuTrackLine[DH_MAX_TRACK_LINE_NUM];   
    int nTrackLineNum;                              
    BYTE bEventAction;                              
    BYTE bReserved1[3];                             
    NET_CROSSLINE_DIRECTION_INFO emDirection;       
    int nImageIndex;                                
    DWORD dwSnapFlagMask;                           
    int nSourceIndex;                               
    char szSourceDevice[MAX_PATH];                  
    unsigned int nOccurrenceCount;                  
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;     
    NET_EXTENSION_INFO stuExtensionInfo;            
    BYTE byReserved[1028];                          
} DEV_EVENT_SPILLEDMATERIAL_DETECTION_INFO;
typedef struct tagCITIZEN_PICTURE_COMPARE_IMAGE_INFO
{
    DWORD dwOffSet;       
    DWORD dwFileLenth;    
    WORD wWidth;          
    WORD wHeight;         
    BYTE byReserved[256]; 
} CITIZEN_PICTURE_COMPARE_IMAGE_INFO;
typedef enum tagCITIZEN_PICTURE_COMPARE_TYPE
{
    CITIZEN_PICTURE_COMPARE_TYPE_UNKNOWN = -1,
    CITIZEN_PICTURE_COMPARE_TYPE_LOCAL,   
    CITIZEN_PICTURE_COMPARE_TYPE_FACEMAP, 
} CITIZEN_PICTURE_COMPARE_TYPE;
typedef struct tagCITIZEN_PICTURE_COMPARE_IMAGE_INFO_EX
{
    CITIZEN_PICTURE_COMPARE_TYPE emType; 
    DWORD dwOffSet;                      
    DWORD dwFileLenth;                   
    WORD wWidth;                         
    WORD wHeight;                        
    BYTE byReserved[64];                 
} CITIZEN_PICTURE_COMPARE_IMAGE_INFO_EX;
typedef struct tagNET_CARDNOARRAY_INFO
{
    int nCardNum;           
    char szCardInfo[5][64]; 
    BYTE byReserved[1024];  
} NET_CARDNOARRAY_INFO;
typedef struct tagNET_FINGERPRINT_INFO
{
    int nFingerNum;             
    char szFingerInfo[8][2048]; 
    BYTE byReserved[1024];      
} NET_FINGERPRINT_INFO;
typedef enum tagEM_CARD_TYPE
{
    EM_CARD_TYPE_UNKNOWN,       
    EM_CARD_TYPE_NORMAL,        
    EM_CARD_TYPE_ID,            
    EM_CARD_TYPE_CPU,           
    EM_CARD_TYPE_IDENTITY,      
    EM_CARD_TYPE_ENCRYPTION_IC, 
} EM_CARD_TYPE;
typedef struct tagDEV_EVENT_CITIZEN_PICTURE_COMPARE_INFO
{
    int nChannelID;                 
    int nEventAction;               
    double dbPTS;                   
    char szName[DH_EVENT_NAME_LEN]; 
    NET_TIME_EX stuUTC;             
    int nEventID;                   
    bool bCompareResult;                                     
    BYTE nSimilarity;                                        
    BYTE nThreshold;                                         
    EM_CITIZENIDCARD_SEX_TYPE emSex;                         
    int nECType;                                             
    char szCitizen[DH_COMMON_STRING_64];                     
    char szAddress[DH_COMMON_STRING_256];                    
    char szNumber[DH_COMMON_STRING_64];                      
    char szAuthority[DH_COMMON_STRING_256];                  
    NET_TIME stuBirth;                                       
    NET_TIME stuValidityStart;                               
    BOOL bLongTimeValidFlag;                                 
    NET_TIME stuValidityEnd;                                 
    CITIZEN_PICTURE_COMPARE_IMAGE_INFO stuImageInfo[2];      
    char szCardNo[DH_COMMON_STRING_32];                      
    char szCellPhone[DH_COMMON_STRING_20];                   
    NET_EXTENSION_INFO stuExtensionInfo;                     
    CITIZEN_PICTURE_COMPARE_IMAGE_INFO_EX stuImageInfoEx[6]; 
    char szCallNumber[20];                                   
    NET_ACCESS_DOOROPEN_METHOD emDoorOpenMethod;             
    UINT nEventGroupID;                                      
    UINT nEventType;                                         
    char szUserID[32];                                       
    char szBuildingNo[16];                                   
    char szBuildingUnitNo[16];                               
    char szBuildingRoomNo[16];                               
    UINT nFaceIndex;                                         
    EM_MASK_STATE_TYPE emMask;                               
    BOOL bManTemperature;                                    
    NET_MAN_TEMPERATURE_INFO stuManTemperatureInfo;          
    double dbBulkOilQuantity;                                
    int nScore;                                              
    NET_CARDNOARRAY_INFO* pstuCardNoArray;                   
    NET_FINGERPRINT_INFO* pstuFingerPrint;                   
    char szIDPhysicalNumber[20];                             
    EM_CARD_TYPE emCardType;                                 
    int nCardTypeNum;                                        
    EM_CARD_TYPE arrCardTypeArray[5];                        
    UINT nVisitorNumber;                                     
    char szTrafficPlate[32];                                 
    char szRespondentsName[32];                              
    char szStudentNum[32];                                   
} DEV_EVENT_CITIZEN_PICTURE_COMPARE_INFO;
typedef struct tagDEV_EVENT_TRAFFIC_PARKING_ON_RIGHT_TURN_ROUTE_INFO
{
    int nChannelID;                 
    int nAction;                    
    double dbPTS;                   
    char szName[DH_EVENT_NAME_LEN]; 
    NET_TIME_EX stuUTC;             
    UINT nEventID;                  
    UINT nRuleID;                                    
    DH_MSG_OBJECT stuObject;                         
    DH_MSG_OBJECT stuVehicle;                        
    int nLane;                                       
    DH_EVENT_FILE_INFO stuFileInfo;                  
    NET_TIME_EX stuStartParkingTime;                 
    int nTriggerType;                                
    int nMark;                                       
    int nSource;                                     
    int nFrameSequence;                              
    int nSequence;                                   
    int nAlarmIntervalTime;                          
    int nParkingAllowedTime;                         
    int nDetectRegionNum;                            
    DH_POINT DetectRegion[DH_MAX_DETECT_REGION_NUM]; 
    DWORD dwSnapFlagMask;                            
    DH_RESOLUTION_INFO stuResolution;                
    EVENT_INTELLI_COMM_INFO stuIntelliCommInfo;      
    NET_GPS_INFO stuGPSInfo;                         
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stuTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                     
    BOOL bHasNonMotor;                               
    VA_OBJECT_NONMOTOR stuNonMotor;                  
    UINT nParkingDuration;                           
    BYTE byPreAlarm;                                 
    char szReserved[1024];                           
} DEV_EVENT_TRAFFIC_PARKING_ON_RIGHT_TURN_ROUTE_INFO;
typedef struct tagNET_DEV_EVENT_COLLISION_CONFLICT_INFO
{
    int nChannelID;                         
    int nAction;                            
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
    char szName[128];                       
    NET_TIME_EX stuUTC;                     
    UINT nEventID;                          
    NET_3DFLOAT_POINT stuPosition;          
    NET_GPS_POSITION stuGPSPosition;        
    NET_VEHICLE_FUSED_OBJECT stuObjects[4]; 
    int nObjectsCount;                      
    UINT nLeftTime;                         
    UINT nType;                             
    float fConflictLevel;                   
    float fConfidence;                      
    char szReserved[1020];                  
} NET_DEV_EVENT_COLLISION_CONFLICT_INFO;
typedef struct tagNET_DEV_EVENT_PHOTOGRAPH_DETECTION_INFO
{
    int nChannelID;                       
    int nAction;                          
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    char szName[128];                     
    char szClass[16];                     
    UINT nRuleID;                         
    int nGroupID;                         
    int nCountInGroup;                    
    int nIndexInGroup;                    
    double dbPTS;                         
    NET_TIME_EX stuUTC;                   
    UINT nEventID;                        
    UINT nPresetID;                       
    int nDetectRegionCount;               
    NET_POINT_EX stuDetectRegion[20];     
    char szResvered1[4];                  
    int nObjectCount;                     
    DH_MSG_OBJECT* pstuObjects;           
    SCENE_IMAGE_INFO_EX stuSceneImage;    
    char szDriverID[32];                  
    NET_GPS_INFO stuGPSInfo;              
    char szReserved[1024];                
} NET_DEV_EVENT_PHOTOGRAPH_DETECTION_INFO;
typedef struct tagNET_DEV_EVENT_REFUELING_GUN_PERSON_INFO
{
    int nChannelID;                         
    int nAction;                            
    NET_EVENT_INFO_EXTEND stuEventInfoEx;   
    char szName[128];                       
    char szClass[16];                       
    INT64 nGroupID;                         
    int nCountInGroup;                      
    int nIndexInGroup;                      
    double dbPTS;                           
    NET_TIME_EX stuUTC;                     
    UINT nEventID;                          
    SCENE_IMAGE_INFO_EX stuSceneImage;      
    NET_VAOBJECT_ANIMAL_INFO stuObjects[8]; 
    int nObjectCount;                       
    int nDetectRegionCount;                 
    NET_POINT_EX stuDetectRegion[20];       
    char szUserName[32];                    
    UINT nPresetID;                         
    int nType;                              
    int nSex;                               
    int nAgeSeg;                            
    char szReserved[1024];                  
} NET_DEV_EVENT_REFUELING_GUN_PERSON_INFO;
typedef enum tagEM_CURRENT_OPERATE_MODE
{
    EM_CURRENT_OPERATE_UNKNOWN,               
    EM_CURRENT_OPERATE_MULPERIOD,             
    EM_CURRENT_OPERATE_MANUAL_CONTROL,        
    EM_CURRENT_OPERATE_TURNOFFLIGHT_CONTROL,  
    EM_CURRENT_OPERATE_ALLRED_CONTROL,        
    EM_CURRENT_OPERATE_ADAPTFILTER_CONTROL,   
    EM_CURRENT_OPERATE_INDUCTION_CONTROL,     
    EM_CURRENT_OPERATE_YELLOWFLASH_CONTROL,   
    EM_CURRENT_OPERATE_SINGAL_ADAPTINVE,      
    EM_CURRENT_OPERATE_TMPPLATFORM_PLAN,      
    EM_CURRENT_OPERATE_TEMP_HAND,             
    EM_CURRENT_OPERATE_REALTIME_CONTROL,      
    EM_CURRENT_OPERATE_LIGHT_OFF,             
    EM_CURRENT_OPERATE_RED_FLASH,             
    EM_CURRENT_OPERATE_GREEN_FLASH,           
    EM_CURRENT_OPERATE_PEDESTRAIN_PRIORITY,   
    EM_CURRENT_OPERATE_CONFGOVERFLOW_CONTROL, 
    EM_CURRENT_OPERATE_NIGHT_REQUEST,         
} EM_CURRENT_OPERATE_MODE;
typedef enum tagEM_CAMERA_STATUS
{
    EM_CAMERA_UNKNOWN,      
    EM_CAMERA_RED,          
    EM_CAMERA_YELLOW,       
    EM_CAMERA_GREEN,        
    EM_CAMERA_RED_FLASH,    
    EM_CAMERA_YELLOW_FLASH, 
    EM_CAMERA_GREEN_FLASH,  
    EM_CAMERA_LIGHT_OFF,    
} EM_CAMERA_STATUS;
typedef struct tagRUN_PHASE_INFO
{
    int nPhaseNum;                   
    int nPhaseOrder;                 
    unsigned int nCarLamp;           
    unsigned int nPsgLamp;           
    EM_CAMERA_STATUS emCameraStatus; 
    int nCntDown;                    
    BYTE byReserved[512];            
} RUN_PHASE_INFO;
typedef struct tagALARM_RTSC_PHASE_RUNNING_INFO
{
    int nChannelID;                           
    int nEventAction;                         
    EM_CURRENT_OPERATE_MODE emCurOperateMode; 
    int nRunPhaseNum;                         
    RUN_PHASE_INFO stRunPhaseInfo[16];        
    BYTE byReserved[512];                     
} ALARM_RTSC_PHASE_RUNNING_INFO;
typedef struct tagRUN_LAMP_INFO
{
    int nLampNum;                    
    EM_CAMERA_STATUS emCameraStatus; 
    int nCntDown;                    
    BYTE byReserved[256];            
} RUN_LAMP_INFO;
typedef struct tagALARM_RTSC_LAMP_RUNNING_INFO
{
    int nChannelID;                           
    int nEventAction;                         
    EM_CURRENT_OPERATE_MODE emCurOperateMode; 
    int nRunLampNum;                          
    RUN_LAMP_INFO stuRunLampInfo[16];         
    BYTE byReserved[512];                     
} ALARM_RTSC_LAMP_RUNNING_INFO;
typedef enum tagEM_STATUS
{
    EM_STATUS_UNKNOWN = -1, 
    EM_STATUS_INVALID,      
    EM_STATUS_NORMAL,       
    EM_STATUS_FAULT,        
    EM_STATUS_OTHER,        
} EM_STATUS;
typedef enum tagEM_LAMP_TYPE
{
    EM_LAMP_TYPE_UNKNOWN,                 
    EM_LAMP_TYPE_STRAIGHT,                
    EM_LAMP_TYPE_LEFT,                    
    EM_LAMP_TYPE_RIGHT,                   
    EM_LAMP_TYPE_MOTORVEHICLE,            
    EM_LAMP_TYPE_LEFT_NOMOTOR,            
    EM_LAMP_TYPE_RIGHT_NOMOTOR,           
    EM_LAMP_TYPE_NOMOTOR,                 
    EM_LAMP_TYPE_SIDEWALK,                
    EM_LAMP_TYPE_TURNAROUND,              
    EM_LAMP_TYPE_LANE,                    
    EM_LAMP_TYPE_CROSSING,                
    EM_LAMP_TYPE_FLASH_WARN,              
    EM_LAMP_TYPE_TRAM_DEDICATED_STRAIGHT, 
    EM_LAMP_TYPE_TRAM_DEDICATED_LEFT,     
    EM_LAMP_TYPE_TRAM_DEDICATED_RIGHT,    
} EM_LAMP_TYPE;
typedef struct tagSTEP_SEQUENCE_INFO
{
    int nLampColorCount;  
    int nLampColor[4];    
    int nTime;            
    BYTE byReserved[128]; 
} STEP_SEQUENCE_INFO;
typedef struct tagLAMP_INFO
{
    EM_LAMP_TYPE emLampType;                    
    int nLampNo;                                
    int nStepNumber;                            
    int nStepSequenceInfoNum;                   
    STEP_SEQUENCE_INFO stuStepSequenceInfo[10]; 
    BYTE byReserved[256];                       
} LAMP_INFO;
typedef struct tagLAMP_GROUP_INFO
{
    int nLampNo;             
    EM_LAMP_TYPE emLampType; 
    int nRemainTime;         
    int nLampColorCount;     
    int nLampColor[4];       
    BYTE byReserved[128];    
} LAMP_GROUP_INFO;
typedef struct tagENTER_INFO
{
    int nEnterDir;                        
    int nLampNumber;                      
    int nLampGroupNum;                    
    LAMP_GROUP_INFO stuLampGroupInfo[48]; 
    BYTE byReserved[64];                  
} ENTER_INFO;
typedef struct tagLAMP_STATE
{
    int nEnterNumber;           
    int nEnterInfoNum;          
    ENTER_INFO stuEnterInfo[8]; 
    BYTE byReserved[128];       
} LAMP_STATE;
typedef enum tagEM_CONTROL_MODE
{
    EM_CONTROL_UNKNOWN,               
    EM_CONTROL_YELLOW_FLASH,          
    EM_CONTROL_MULITI_TIME,           
    EM_CONTROL_MANUAL,                
    EM_CONTROL_INDUCTION,             
    EM_CONTROL_WIRELESS_COORDINATION, 
    EM_CONTROL_SINGLE_OPTIMIZATION,   
    EM_CONTROL_BUS_SINGAL,            
    EM_CONTROL_EMERGENCY_SINGAL,      
    EM_CONTROL_OTHER,                 
} EM_CONTROL_MODE;
typedef struct tagLANE_INFO_EX
{
    DWORD nLaneType;     
    BYTE byReserved[64]; 
} LANE_INFO_EX;
typedef enum tagEM_LANE_RUNING_STATE
{
    EM_LANE_RUNING_UNKNOWN,            
    EM_LANE_RUNING_UNBLOCKED,          
    EM_LANE_RUNING_BASIC_UNBLOCKED,    
    EM_LANE_RUNING_LIGHT_CONGESTION,   
    EM_LANE_RUNING_MIDDLE_CONGESTION,  
    EM_LANE_RUNING_SERIOUS_CONGESTION, 
} EM_LANE_RUNING_STATE;
typedef struct tagLANE_STATE_INFO
{
    UINT nType;                          
    EM_LANE_RUNING_STATE emLaneRunState; 
    BYTE byReserved[128];                
} LANE_STATE_INFO;
typedef struct tagLANE_STATE_INFO_EX
{
    UINT nType;           
    BYTE byReserved[128]; 
} LANE_STATE_INFO_EX;
typedef struct tagENTER_LANE_STATE
{
    int nEnterDir;                       
    int nLaneNumber;                     
    int nLaneInfoNum;                    
    LANE_STATE_INFO_EX stuLaneInfoEx[8]; 
    BYTE byReserved[128];                
} ENTER_LANE_STATE;
typedef struct tagLANE_STATE
{
    int nEnterNumber;                          
    int nEnterLaneStateNum;                    
    ENTER_LANE_STATE stuEnterLaneStateInfo[8]; 
    BYTE byReserved[128];                      
} LANE_STATE;
typedef struct tagCTRL_INFO
{
    DWORD nType;          
    int nNo;              
    int nDir;             
    int nStatus;          
    BYTE byReserved[128]; 
} CTRL_INFO;
typedef struct tagLANE_CTRL_STATE
{
    int nNumber;               
    int nCtrlNum;              
    CTRL_INFO stuCtrlInfo[64]; 
    BYTE byReserved[128];      
} LANE_CTRL_STATE;
typedef struct tagSTEP_INFO
{
    int nEnterDir;             
    int nEnterLampNumber;      
    int nLampInfoNum;          
    LAMP_INFO stuLampInfo[10]; 
    BYTE byReserved[128];      
} STEP_INFO;
typedef struct tagCUR_STEP_INFO
{
    int nLampNumber;          
    int nEnterNumber;         
    int nStepInfoNum;         
    STEP_INFO stuStepInfo[8]; 
    BYTE byReserved[128];     
} CUR_STEP_INFO;
typedef struct tagNEXT_STEP_INFO
{
    int nLampNumber;          
    int nEnterNumber;         
    int nStepInfoNum;         
    STEP_INFO stuStepInfo[8]; 
    BYTE byReserved[128];     
} NEXT_STEP_INFO;
typedef struct tagALARM_RTSC_RUNNING_INFO
{
    int nChannelID;                       
    int nEventAction;                     
    DWORD dwReportState;                  
    int nLongitudeNum;                    
    double dbLongitude[3];                
    int nLatitudeNum;                     
    double dbLatitude[3];                 
    double dbAltitude;                    
    NET_TIME_EX UTC;                      
    EM_STATUS emStatus;                   
    EM_CONTROL_MODE emControlMode;        
    LAMP_STATE stuLampStateInfo;          
    LANE_STATE stuLaneStateInfo;          
    LANE_CTRL_STATE stuLaneCtrlStateInfo; 
    CUR_STEP_INFO stuCurStepInfo;         
    NEXT_STEP_INFO stuNextStepInfo;       
    BYTE byReserved[256];                 
} ALARM_RTSC_RUNNING_INFO;
typedef struct tagLAN_TRAFFIC_INFO
{
    int nPeriod;               
    int nLaneType;             
    int nTrafficFlux;          
    int nAverageSpeed;         
    int nIntervalAverageSpeed; 
    int nTimeOccupyRatio;      
    int nSpaceOccupyRatio;     
    int nQueueLen;             
    BYTE byReserved[128];      
} LAN_TRAFFIC_INFO;
typedef struct tagENTER_TRAFFIC_INFO
{
    int nEnterDir;                         
    int nEnterLaneNumbner;                 
    int nLanTrafficInfoNum;                
    LAN_TRAFFIC_INFO stuLanTrafficInfo[8]; 
    BYTE byReserved[128];                  
} ENTER_TRAFFIC_INFO;
typedef struct tagTRAFFIC_INFO
{
    int nEnterNumber;                          
    int nEnterTrafficInfoNum;                  
    ENTER_TRAFFIC_INFO stuEnterTrafficInfo[8]; 
    BYTE byReserved[128];                      
} TRAFFIC_INFO;
typedef struct tagENTER_STATE_INFO
{
    int nEnterDir;                       
    int nLaneNumber;                     
    int nLaneStateInfoNum;               
    LANE_STATE_INFO stuLaneStateInfo[8]; 
    BYTE byReserved[128];                
} ENTER_STATE_INFO;
typedef struct tagTRAFFIC_STATE
{
    int nEnterNumber;                      
    int nEnterStateInfoNum;                
    ENTER_STATE_INFO stuEnterStateInfo[8]; 
    int nPeriod;                           
    BYTE byReserved[124];                  
} TRAFFIC_STATE;
typedef enum tagEM_TRAFFIC_EVENT
{
    EM_TRAFFIC_EVENT_UNKNOWN,           
    EM_TRAFFIC_EVENT_ACCIDENT,          
    EM_TRAFFIC_EVENT_ROAD_BARRIERS,     
    EM_TRAFFIC_EVENT_ROAD_AREAWATER,    
    EM_TRAFFIC_EVENT_ROAD_SLIPPERY,     
    EM_TRAFFIC_EVENT_ROAD_ICY,          
    EM_TRAFFIC_EVENT_ROAD_CONSTRUCTION, 
} EM_TRAFFIC_EVENT;
typedef struct tagTRAFFIC_EVENT
{
    char szCarId[128];               
    char szPlateNumber[128];         
    int nDrivingDir;                 
    EM_TRAFFIC_EVENT emTrafficEvent; 
    BYTE byReserved[128];            
} TRAFFIC_EVENT;
typedef struct tagCAR_INFO
{
    char szCarId[128];       
    char szPlateNumber[128]; 
    EM_CAR_TYPE emCarType;   
    int nSpeed;              
    int nAcceleration;       
    int nHeadDirAngle;       
    int nAlarm;              
    BYTE byReserved[256];    
} CAR_INFO;
typedef struct tagALARM_RTSC_TRAFFIC_INFO
{
    int nChannelID;                
    int nEventAction;              
    DWORD dwReportState;           
    int nLongitudeNum;             
    double dbLongitude[3];         
    int nLatitudeNum;              
    double dbLatitude[3];          
    double dbAltitude;             
    NET_TIME_EX UTC;               
    TRAFFIC_INFO stuTrafficInfo;   
    TRAFFIC_STATE stuTrafficState; 
    CAR_INFO stuCarInfo;           
    TRAFFIC_EVENT stuTrafficEvent; 
    BYTE byReserved[256];          
} ALARM_RTSC_TRAFFIC_INFO;
typedef enum tagEM_HY_VIOLATION_TYPE
{
    EM_HY_VIOLATION_TYPE_UNKNWON = -1, 
    EM_HY_VIOLATION_TYPE_MOTOR_ALARM,  
    EM_HY_VIOLATION_TYPE_MOTOR_WARN,   
} EM_HY_VIOLATION_TYPE;
typedef struct tagDEV_EVENT_HY_FIRE_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nPresetID;     
    EM_CLASS_TYPE emClassType;                      
    EM_TRIGGER_TYPE emTriggerType;                  
    DH_MSG_OBJECT stuVehicle;                       
    DH_MSG_OBJECT stuObject;                        
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nSequence;                                  
    UINT nCount;                                    
    int nDetectRegionNum;                           
    DH_POINT DetectRegion[20];                      
    PTZ_POSITION_UNIT stuPtzPostion;                
    float fDistance[2];                             
    SCENE_IMAGE_INFO_EX stuSceneImage;              
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                    
    BYTE byReserve[1024];                           
} DEV_EVENT_HY_FIRE_DETECTION_INFO;
typedef struct tagALARM_HY_FIRE_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nPresetID;     
    EM_TRIGGER_TYPE emTriggerType;                  
    DH_MSG_OBJECT stuVehicle;                       
    DH_MSG_OBJECT stuObject;                        
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nSequence;                                  
    UINT nCount;                                    
    int nDetectRegionNum;                           
    DH_POINT DetectRegion[20];                      
    PTZ_POSITION_UNIT stuPtzPostion;                
    float fDistance[2];                             
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                    
    BYTE byReserve[1024];                           
} ALARM_HY_FIRE_DETECTION_INFO;
typedef struct tagDEV_EVENT_HY_SMOG_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nPresetID;     
    EM_CLASS_TYPE emClassType;                      
    EM_TRIGGER_TYPE emTriggerType;                  
    int nRuleID;                                    
    DH_MSG_OBJECT stuVehicle;                       
    DH_MSG_OBJECT stuObject;                        
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nSequence;                                  
    UINT nCount;                                    
    int nDetectRegionNum;                           
    DH_POINT DetectRegion[20];                      
    SCENE_IMAGE_INFO_EX stuSceneImage;              
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                    
    BYTE byReserved[1024];                          
} DEV_EVENT_HY_SMOG_DETECTION_INFO;
typedef struct tagALARM_HY_SMOG_DETECTION_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    UINT nEventID;      
    int nGroupID;       
    int nCountInGroup;  
    int nIndexInGroup;  
    UINT nPresetID;     
    EM_TRIGGER_TYPE emTriggerType;                  
    int nRuleID;                                    
    DH_MSG_OBJECT stuVehicle;                       
    DH_MSG_OBJECT stuObject;                        
    int nMark;                                      
    int nSource;                                    
    int nFrameSequence;                             
    int nSequence;                                  
    UINT nCount;                                    
    int nDetectRegionNum;                           
    DH_POINT DetectRegion[20];                      
    DEV_EVENT_TRAFFIC_TRAFFICCAR_INFO stTrafficCar; 
    EVENT_COMM_INFO stuCommInfo;                    
    BYTE byReserved[1024];                          
} ALARM_HY_SMOG_DETECTION_INFO;
typedef struct tagDEV_EVENT_HY_INFIRE_PASSAGE_DETECTION_INFO
{
    int nChannelID;        
    int nEventAction;      
    char szName[128];      
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nEventID;         
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    UINT nPresetID;        
    char szPresetName[64]; 
    EM_CLASS_TYPE emClassType;            
    int nRuleID;                          
    UINT nObjectNum;                      
    DH_MSG_OBJECT stuObjects[64];         
    int nDetectRegionNum;                 
    DH_POINT DetectRegion[20];            
    UINT nCount;                          
    EM_EVENT_LEVEL emEventLevel;          
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    BYTE byReserved[1024];                
} DEV_EVENT_HY_INFIRE_PASSAGE_DETECTION_INFO;
typedef struct tagALARM_HY_INFIRE_PASSAGE_DETECTION_INFO
{
    int nChannelID;        
    int nEventAction;      
    char szName[128];      
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nEventID;         
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    UINT nPresetID;        
    char szPresetName[64]; 
    int nRuleID;                          
    UINT nObjectNum;                      
    DH_MSG_OBJECT stuObjects[64];         
    int nDetectRegionNum;                 
    DH_POINT DetectRegion[20];            
    UINT nCount;                          
    EM_EVENT_LEVEL emEventLevel;          
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
    BYTE byReserved[1024];                
} ALARM_HY_INFIRE_PASSAGE_DETECTION_INFO;
typedef struct tagDEV_EVENT_HY_OUTFIRE_PASSAGE_DETECTION_INFO
{
    int nChannelID;        
    int nEventAction;      
    char szName[128];      
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nEventID;         
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    UINT nPresetID;        
    char szPresetName[64]; 
    EM_CLASS_TYPE emClassType;                 
    int nAlarmNum;                             
    int nNoMotorNum;                           
    int nCount;                                
    UINT nObjectNum;                           
    DH_MSG_OBJECT stuObjects[64];              
    int nDetectRegionNum;                      
    DH_POINT DetectRegion[20];                 
    EM_HY_VIOLATION_TYPE emViolationAlarmType; 
    UINT nParkingDuration;                     
    char szSourceID[32];                       
    PTZ_POSITION_UNIT stuPtzPostion;           
    SCENE_IMAGE_INFO stuSceneImage;            
    BYTE byReserved[1024];                     
} DEV_EVENT_HY_OUTFIRE_PASSAGE_DETECTION_INFO;
typedef struct tagALARM_HY_OUTFIRE_PASSAGE_DETECTION_INFO
{
    int nChannelID;        
    int nEventAction;      
    char szName[128];      
    double dbPTS;          
    NET_TIME_EX stuUTC;    
    UINT nEventID;         
    int nGroupID;          
    int nCountInGroup;     
    int nIndexInGroup;     
    UINT nPresetID;        
    char szPresetName[64]; 
    UINT nAlarmNum;                            
    UINT nNoMotorNum;                          
    UINT nCount;                               
    UINT nObjectNum;                           
    DH_MSG_OBJECT stuObjects[64];              
    int nDetectRegionNum;                      
    DH_POINT DetectRegion[20];                 
    EM_HY_VIOLATION_TYPE emViolationAlarmType; 
    UINT nParkingDuration;                     
    char szSourceID[32];                       
    PTZ_POSITION_UNIT stuPtzPostion;           
    BYTE byReserved[1024];                     
} ALARM_HY_OUTFIRE_PASSAGE_DETECTION_INFO;
typedef struct tagDEV_EVENT_HY_MAN_LEAVING_DETECTION_INFO
{
    int nChannelID;      
    int nEventAction;    
    char szName[128];    
    double dbPTS;        
    BYTE byReserved1[4]; 
    NET_TIME_EX stuUTC;  
    UINT nEventID;       
    UINT nPresetID;      
    EM_CLASS_TYPE emClassType;        
    UINT nAreaID;                     
    int nDetectType;                  
    UINT nPrevNumber;                 
    UINT nCurrentNumber;              
    int nManListCount;                
    MAN_NUM_LIST_INFO stuManList[10]; 
    char szSourceID[32];              
    BYTE byReserved[1024];            
} DEV_EVENT_HY_MAN_LEAVING_DETECTION_INFO;
typedef struct tagALARM_HY_MAN_LEAVING_DETECTION_INFO
{
    int nChannelID;      
    int nEventAction;    
    char szName[128];    
    double dbPTS;        
    BYTE byReserved1[4]; 
    NET_TIME_EX stuUTC;  
    int nEventID;        
    UINT nPresetID;      
    UINT nAreaID;                     
    int nDetectType;                  
    UINT nPrevNumber;                 
    UINT nCurrentNumber;              
    int nManListCount;                
    MAN_NUM_LIST_INFO stuManList[10]; 
    char szSourceID[32];              
    BYTE byReserved[1024];            
} ALARM_HY_MAN_LEAVING_DETECTION_INFO;
typedef enum tagEM_HY_FIRE_CONTROL_DEVICE_TYPE
{
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_UNKNOWN,                 
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_WIRELESSALARMHOST,       
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_INTELLIELECMONITORDEV,   
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_IMAGETYPESMOKEDETECTOR,  
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_FLAMERECOGNITIONCAMERA,  
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_SMOKEFIREDETECTOR,       
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_TEMPERATUREFIREDETECTOR, 
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_COMBUSTIBLEGASDETECTOR,  
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_HANDLEALARMBUTTON,       
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_SOUNDLIGHTALARM,         
    EM_HY_FIRE_CONTROL_DEVICE_TYPE_FAULTELECTRICARCSENSOR,  
} EM_HY_FIRE_CONTROL_DEVICE_TYPE;
typedef struct tagALARM_HY_FIRE_CONTROL_OFFLINE_FAULT_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szAddress[256];                         
    char szChildNodeName[128];                   
    char szChildNodeSN[64];                      
    EM_HY_FIRE_CONTROL_DEVICE_TYPE emDeviceType; 
    NET_TIME_EX stuTime;                         
    BYTE byReserved[1024];                       
} ALARM_HY_FIRE_CONTROL_OFFLINE_FAULT_INFO;
typedef enum tagEM_HY_SMOKE_DEVICE_TYPE
{
    EM_HY_SMOKE_DEVICE_TYPE_UNKNOWN,             
    EM_HY_SMOKE_DEVICE_TYPE_SURPLUS_ELECTRICITY, 
    EM_HY_SMOKE_DEVICE_TYPE_ELECTRICITY,         
    EM_HY_SMOKE_DEVICE_TYPE_TEMPERATURE,         
} EM_HY_SMOKE_DEVICE_TYPE;
typedef struct tagALARM_HY_FIRE_CONTROL_SENSOR_FAULT_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szAddress[256];                  
    char szChildNodeName[128];            
    char szChildNodeSN[64];               
    EM_HY_SMOKE_DEVICE_TYPE emDeviceType; 
    NET_TIME_EX stuTime;                  
    NET_EVENT_INFO_EXTEND stuEventInfoEx; 
    BYTE byReserved[1024];                
} ALARM_HY_FIRE_CONTROL_SENSOR_FAULT_INFO;
typedef struct tagALARM_HY_FIRE_CONTROL_DISMANTLE_FAULT_INFO
{
    int nChannelID;     
    int nEventAction;   
    char szName[128];   
    double dbPTS;       
    NET_TIME_EX stuUTC; 
    int nEventID;       
    char szAddress[256];                         
    char szSN[64];                               
    EM_HY_FIRE_CONTROL_DEVICE_TYPE emDeviceType; 
    NET_TIME_EX stuTime;                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;        
    BYTE byReserved[1024];                       
} ALARM_HY_FIRE_CONTROL_DISMANTLE_FAULT_INFO;
typedef struct tagDEV_OBJECT_FIND_SCOPE_INFO
{
    BOOL bEnable;  
    int nMinValue; 
    int nMaxValue; 
} DEV_OBJECT_FIND_SCOPE_INFO;
typedef struct tagDEV_OBJECT_SUNSHIELD_FIND_SCOPE_INFO
{
    BYTE byFindType;                   
    int nMinSunShieldNum;              
    int nMaxSunShieldNum;              
    NET_SUNSHADE_STATE emMasterShield; 
    NET_SUNSHADE_STATE emSlaveShield;  
} DEV_OBJECT_SUNSHIELD_FIND_SCOPE_INFO;
typedef struct tagDEV_VEHICLE_CONDITION_FEATURE_INFO
{
    char szPlateNumber[DH_MAX_PLATE_NUMBER_LEN]; 
    EM_NET_PLATE_TYPE emPlateType;               
    NET_COLOR_RGBA stuPlateColor;                
    EM_NET_VEHICLE_TYPE emVehicleType;           
    NET_COLOR_RGBA stuVehicleColor;              
    char szVehicleLogo[32];                      
    WORD wVehicleSubBrand;                       
    WORD wVehicleYearModel;                      
    EM_VEHICLE_DIRECTION emVehicleDirection;     
    NET_SAFEBELT_STATE emMainSeat;                         
    NET_SAFEBELT_STATE emSlaveSeat;                        
    DEV_OBJECT_SUNSHIELD_FIND_SCOPE_INFO stuSunShieldInfo; 
    DEV_OBJECT_FIND_SCOPE_INFO stuDropInfo;                
    DEV_OBJECT_FIND_SCOPE_INFO stuPaperBoxInfo;            
    DEV_OBJECT_FIND_SCOPE_INFO stuAnnualInspectionInfo;    
    BYTE byReserved[256];                                  
} DEV_VEHICLE_CONDITION_FEATURE_INFO;
typedef struct tagDEV_VEHICLE_RESULT_FEATURE_INFO
{
    char szPlateNumber[DH_MAX_PLATE_NUMBER_LEN]; 
    EM_NET_PLATE_TYPE emPlateType;               
    NET_COLOR_RGBA stuPlateColor;                
    NET_COLOR_RGBA stuVehicleColor;              
    char szVehicleLogo[32];                      
    WORD wVehicleSubBrand;                       
    WORD wVehicleYearModel;                      
    int nVehicleWindowNum;                       
    NET_RECT stuVehicleWindow[4];                
    EM_VEHICLE_DIRECTION emVehicleDirection;     
    NET_SAFEBELT_STATE emMainSeat;   
    NET_SAFEBELT_STATE emSlaveSeat;  
    NET_RECT stuMasterShield;        
    NET_RECT stuSlaveShield;         
    int nAnnualInspectionNum;        
    NET_RECT stuAnnualInspection[8]; 
    int nDropNum;                    
    NET_RECT stuDrop[4];             
    int nPaperBoxNum;                
    NET_RECT stuPaperBox[4];         
    BYTE byReserved[256];            
} DEV_VEHICLE_RESULT_FEATURE_INFO;
typedef enum tagEM_PIC_FEATURE_TYPE
{
    EM_PIC_FEATURE_TYPE_UNKOWN,       
    EM_PIC_FEATURE_TYPE_GLOBAL_SENCE, 
    EM_PIC_FEATURE_TYPE_SMALL,        
} EM_PIC_FEATURE_TYPE;
typedef struct tagDEV_IMAGE_REQUEST_FEATURE_INFO
{
    EM_PIC_FEATURE_TYPE emPicType; 
    DWORD dwoffset;                
    DWORD dwLength;                
    DWORD dwWidth;                 
    DWORD dwHeight;                
    BOOL bEnableRect;              
    NET_RECT stuRect;              
    BYTE byReserved[256];          
} DEV_IMAGE_REQUEST_FEATURE_INFO;
typedef struct tagDEV_IMAGE_RESULT_FEATURE_INFO
{
    DWORD dwSimilarity; 
    NET_TIME stuTime;   
    DWORD dwObjectOffset;            
    DWORD dwObjectLength;            
    char szObjectFilePath[MAX_PATH]; 
    DWORD dwSceneOffset;            
    DWORD dwSceneLength;            
    char szSceneFilePath[MAX_PATH]; 
    NET_RECT stuObjectRect; 
    BYTE byReserved[256];   
} DEV_IMAGE_RESULT_FEATURE_INFO;
typedef struct tagNET_IN_OBJECTSTRUCTLIZE_DETECT_PIC
{
    DWORD dwSize;
    int nWidth;     
    int nHeight;    
    char* pBuffer;  
    int nBufferLen; 
} NET_IN_OBJECTSTRUCTLIZE_DETECT_PIC;
typedef struct tagNET_OBJECT_DETECTED_INFO
{
    DH_POINT stuPoint;                                
    DWORD dwWidth;                                    
    DWORD dwHeight;                                   
    char szObjectType[16];                            
    char szObjectSubType[32];                         
    DEV_PERSON_RESULT_FEATURE_INFO stuPersonResult;   
    DEV_VEHICLE_RESULT_FEATURE_INFO stuVehicleResult; 
    BYTE byReserved[512];                             
} NET_OBJECT_DETECTED_INFO;
typedef struct tagNET_OUT_OBJECTSTRUCTLIZE_DETECT_PIC
{
    DWORD dwSize;
    int nObjectNum;                                              
    NET_OBJECT_DETECTED_INFO stuObjectinfos[DH_MAX_OBJECT_LIST]; 
} NET_OUT_OBJECTSTRUCTLIZE_DETECT_PIC;
typedef struct tagNET_CB_OBJECTSTRUCTLIZE_FIND_STATE
{
    DWORD dwSize;
    int nToken;        
    int nProgress;     
    int nCurrentCount; 
} NET_OBJECTSTRUCTLIZE_FIND_STATE;
typedef void(CALLBACK* fObjectStructlizeFindState)(LLONG lLoginID, LLONG lAttachHandle, NET_OBJECTSTRUCTLIZE_FIND_STATE* pstStates, int nStateNum, LDWORD dwUser);
typedef struct tagNET_IN_OBJECTSTRUCTLIZE_FIND_STATE
{
    DWORD dwSize; 
    int nTokenNum;                                 
    int nTokens[8];                                
    fObjectStructlizeFindState cbObjectSFindState; 
    LDWORD dwUser;                                 
} NET_IN_OBJECTSTRUCTLIZE_FIND_STATE;
typedef struct tagNET_OUT_OBJECTSTRUCTLIZE_FIND_STATE
{
    DWORD dwSize;
} NET_OUT_OBJECTSTRUCTLIZE_FIND_STATE;
typedef struct tagNET_IN_STARTFIND_OBJECTSTRUCTLIZE
{
    DWORD dwSize;
    int nChannelNum;      
    int stuChannelID[16]; 
    BOOL bTimeEnable;     
    NET_TIME stStartTime; 
    NET_TIME stEndTime;   
    char szObjectType[16];    
    char szObjectSubType[32]; 
    int nSimilarity;          
    DEV_PERSON_CONDITION_FEATURE_INFO stuPersonCondition;   
    DEV_VEHICLE_CONDITION_FEATURE_INFO stuVehicleCondition; 
    DEV_IMAGE_REQUEST_FEATURE_INFO stuImageRequestInfo;     
    int nRectNum;                                           
    NET_RECT stuRect[4];                                    
    char* pBuffer;  
    int nBufferLen; 
} NET_IN_STARTFIND_OBJECTSTRUCTLIZE;
typedef struct tagNET_OUT_STARTFIND_OBJECTSTRUCTLIZE
{
    DWORD dwSize;
    int nTotalCount; 
    LLONG lFindHandle; 
    int nToken;        
} NET_OUT_STARTFIND_OBJECTSTRUCTLIZE;
typedef struct tagNET_IN_DOFIND_OBJECTSTRUCTLIZE
{
    DWORD dwSize;
    LLONG lFindHandle;                      
    int nBeginNum;                          
    int nCount;                             
    EM_NEEDED_PIC_RETURN_TYPE emNeededData; 
} NET_IN_DOFIND_OBJECTSTRUCTLIZE;
typedef struct tagNET_DODBFIND_OBJECT_DETECTED_INFO
{
    int nChannelID;                                   
    char szObjectType[16];                            
    char szObjectSubType[32];                         
    DEV_PERSON_RESULT_FEATURE_INFO stuPersonResult;   
    DEV_VEHICLE_RESULT_FEATURE_INFO stuVehicleResult; 
    int nImageNum;                                    
    DEV_IMAGE_RESULT_FEATURE_INFO stuImageResults[4]; 
    BYTE byReserved[512];                             
} NET_DODBFIND_OBJECT_DETECTED_INFO;
typedef struct tagNET_OUT_DOFIND_OBJECTSTRUCTLIZE
{
    DWORD dwSize;
    int nfoundNum;                                                        
    int nObjectNum;                                                       
    NET_DODBFIND_OBJECT_DETECTED_INFO stuObjectinfos[DH_MAX_OBJECT_LIST]; 
    char* pBuffer;  
    int nBufferLen; 
    int nBufRet;    
} NET_OUT_DOFIND_OBJECTSTRUCTLIZE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetectObjectStructlize(LLONG lLoginID, const NET_IN_OBJECTSTRUCTLIZE_DETECT_PIC* pstInParam, NET_OUT_OBJECTSTRUCTLIZE_DETECT_PIC* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachObjectStructlizeFindState(LLONG lLoginID, const NET_IN_OBJECTSTRUCTLIZE_FIND_STATE* pstInParam, NET_OUT_OBJECTSTRUCTLIZE_FIND_STATE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachObjectStructlizeFindState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindObjectStructlize(LLONG lLoginID, const NET_IN_STARTFIND_OBJECTSTRUCTLIZE* pstInParam, NET_OUT_STARTFIND_OBJECTSTRUCTLIZE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindObjectStructlize(const NET_IN_DOFIND_OBJECTSTRUCTLIZE* pstInParam, NET_OUT_DOFIND_OBJECTSTRUCTLIZE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindObjectStructlize(LLONG lFindHandle);
typedef struct tagNET_IN_GET_SUBMODULES_INFO
{
    DWORD dwSize;
} NET_IN_GET_SUBMODULES_INFO;
typedef enum tagEM_STATE_SUBMODULE
{
    EM_STATE_SUBMODULES_UNKNOWN,
    EM_STATE_SUBMODULES_NORMAL,    
    EM_STATE_SUBMODULES_EXCEPTION, 
} EM_STATE_SUBMODULE;
typedef struct tagNET_SUBMODULES_INFO
{
    char szModuleName[DH_COMMON_STRING_32];      
    char szHardwareVersion[DH_COMMON_STRING_64]; 
    char szSoftwareVersion[DH_COMMON_STRING_64]; 
    EM_STATE_SUBMODULE emState;                  
    BYTE byReserve[512];
} NET_SUBMODULES_INFO;
typedef struct tagNET_SUBMODULES_INFO_EX
{
    char szGMChipUpdateInfo[512]; 
    int nGMChipUpdateInfoLen;     
    BYTE byReserve[1020];         
} NET_SUBMODULES_INFO_EX;
typedef struct tagNET_OUT_GET_SUBMODULES_INFO
{
    DWORD dwSize;
    int nRetNum;                                                  
    NET_SUBMODULES_INFO stuSubModuleInfo[MAX_SUBMODULE_NUM];      
    NET_SUBMODULES_INFO_EX stuSubModuleInfoEx[MAX_SUBMODULE_NUM]; 
} NET_OUT_GET_SUBMODULES_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSubModuleInfo(LLONG lLoginID, const NET_IN_GET_SUBMODULES_INFO* pstInParam, NET_OUT_GET_SUBMODULES_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_SOFTWAREVERSION_INFO
{
    DWORD dwSize; 
} NET_IN_GET_SOFTWAREVERSION_INFO;
typedef enum tagEM_PERIPHERAL_TYPE
{
    EM_PERIPHERAL_NUKNOWN,                      
    EM_PERIPHERAL_ASG_CONTROLLER,               
    EM_PERIPHERAL_ASG_MOTOR,                    
    EM_PERIPHERAL_SECURITYGATE_DOOR_CONTROLLER, 
    EM_PERIPHERAL_INFRARED_TEMPERATURE_UNIT,    
    EM_PERIPHERAL_ASG_VOICE,                    
    EM_PERIPHERAL_ASG_READER,                   
    EM_PERIPHERAL_RTSCCOMMBOARD,                
    EM_PERIPHERAL_SINGLECHIPMICROCOMPUTER,      
    EM_PERIPHERAL_RECLOSING,                    
    EM_PERIPHERAL_AIRSWITCHVERSION,             
    EM_PERIPHERAL_COS,                          
} EM_PERIPHERAL_TYPE;
typedef struct tagNET_PERIPHERAL_VERSIONS
{
    char szVersion[32];                  
    EM_PERIPHERAL_TYPE emPeripheralType; 
    char szBuildDate[24];                
    BYTE byReserved[228];                
} NET_PERIPHERAL_VERSIONS;
typedef struct tagNET_OUT_GET_SOFTWAREVERSION_INFO
{
    DWORD dwSize;                                      
    char szVersion[DH_COMMON_STRING_64];               
    NET_TIME stuBuildDate;                             
    char szWebVersion[DH_COMMON_STRING_16];            
    char szSecurityVersion[DH_COMMON_STRING_64];       
    int nPeripheralNum;                                
    NET_PERIPHERAL_VERSIONS stuPeripheralVersions[32]; 
    char szAlgorithmTrainingVersion[64];               
} NET_OUT_GET_SOFTWAREVERSION_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSoftwareVersion(LLONG lLoginID, const NET_IN_GET_SOFTWAREVERSION_INFO* pstInParam, NET_OUT_GET_SOFTWAREVERSION_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DEVICETYPE_INFO
{
    DWORD dwSize; 
} NET_IN_GET_DEVICETYPE_INFO;
typedef struct tagNET_OUT_GET_DEVICETYPE_INFO
{
    DWORD dwSize;                        
    char szType[DH_COMMON_STRING_32];    
    char szTypeEx[DH_COMMON_STRING_256]; 
} NET_OUT_GET_DEVICETYPE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDeviceType(LLONG lLoginID, const NET_IN_GET_DEVICETYPE_INFO* pstInParam, NET_OUT_GET_DEVICETYPE_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DEVICESERIALNO_INFO
{
    DWORD dwSize; 
} NET_IN_GET_DEVICESERIALNO_INFO;
typedef struct tagNET_OUT_GET_DEVICESERIALNO_INFO
{
    DWORD dwSize;  
    char szSN[64]; 
} NET_OUT_GET_DEVICESERIALNO_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDeviceSerialNo(LLONG lLoginID, const NET_IN_GET_DEVICESERIALNO_INFO* pstInParam, NET_OUT_GET_DEVICESERIALNO_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_MACHINENAME_INFO
{
    DWORD dwSize; 
} NET_IN_GET_MACHINENAME_INFO;
typedef struct tagNET_OUT_GET_MACHINENAME_INFO
{
    DWORD dwSize;    
    char szName[64]; 
} NET_OUT_GET_MACHINENAME_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMachineName(LLONG lLoginID, const NET_IN_GET_MACHINENAME_INFO* pstInParam, NET_OUT_GET_MACHINENAME_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_STATIS_GRANULARITY
{
    EM_STATIS_GRANULARITY_UNKNOWN,  
    EM_STATIS_GRANULARITY_BY_HOUR,  
    EM_STATIS_GRANULARITY_BY_DAY,   
    EM_STATIS_GRANULARITY_BY_MONTH, 
} EM_STATIS_GRANULARITY;
typedef struct tagNET_IN_STARTFIND_EXTERNALSENSOR
{
    DWORD dwSize;
    NET_TIME stStartTime;                
    NET_TIME stEndTime;                  
    EM_STATIS_GRANULARITY emGranularity; 
    UINT nVideoChannel;                  
    UINT nIndex;                         
    UINT nRecordHour;                    
} NET_IN_STARTFIND_EXTERNALSENSOR;
typedef struct tagNET_OUT_STARTFIND_EXTERNALSENSOR
{
    DWORD dwSize;
    UINT nToken;      
    UINT nTotalCount; 
} NET_OUT_STARTFIND_EXTERNALSENSOR;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindExternalSensor(LLONG lLoginID, const NET_IN_STARTFIND_EXTERNALSENSOR* pstInParam, NET_OUT_STARTFIND_EXTERNALSENSOR* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_DOFIND_EXTERNALSENSOR
{
    DWORD dwSize;
    UINT nToken; 
    UINT nBegin; 
    UINT nCount; 
} NET_IN_DOFIND_EXTERNALSENSOR;
typedef struct tagNET_FIND_EXTERNALSENSOR_INFO
{
    UINT nVideoChannel;    
    UINT nIndex;           
    NET_TIME stRecordTime; 
    double dbData;         
    BYTE byReserve[1024];  
} NET_FIND_EXTERNALSENSOR_INFO;
typedef struct tagNET_OUT_DOFIND_EXTERNALSENSOR
{
    DWORD dwSize;
    UINT nFound;                            
    UINT nMazNum;                           
    NET_FIND_EXTERNALSENSOR_INFO* pstuInfo; 
} NET_OUT_DOFIND_EXTERNALSENSOR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindExternalSensor(LLONG lFindHandle, const NET_IN_DOFIND_EXTERNALSENSOR* pstInParam, NET_OUT_DOFIND_EXTERNALSENSOR* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindExternalSensor(LLONG lFindHandle);
typedef struct tagNET_CFG_TRACKBOX
{
    int nVideoChannel;  
    BOOL bTargetBox;    
    BOOL bTrackBox;     
    BOOL bTargetNumber; 
    BYTE byReserved[1024];
} NET_CFG_TRACKBOX;
typedef struct tagNET_IN_GET_TRACKBOX
{
    DWORD dwSize;
    int nVideoChannel; 
} NET_IN_GET_TRACKBOX;
typedef struct tagNET_OUT_GET_TRACKBOX
{
    DWORD dwSize;
    NET_CFG_TRACKBOX stuGetTrackBox;
} NET_OUT_GET_TRACKBOX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTrackBox(LLONG lLoginID, const NET_IN_GET_TRACKBOX* pstInParam, NET_OUT_GET_TRACKBOX* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_TRACKBOX
{
    DWORD dwSize;
    NET_CFG_TRACKBOX stuSetTrackBox;
} NET_IN_SET_TRACKBOX;
typedef struct tagNET_OUT_SET_TRACKBOX
{
    DWORD dwSize;
} NET_OUT_SET_TRACKBOX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetTrackBox(LLONG lLoginID, const NET_IN_SET_TRACKBOX* pstInParam, NET_OUT_SET_TRACKBOX* pstOutParam, int nWaitTime);
typedef enum tagEM_TRACK_MODE
{
    EM_TRACK_MODE_UNKNOWN = -1, 
    EM_TRACK_MODE_AUTO,         
    EM_TRACK_MODE_SINGLE,       
    EM_TRACK_MODE_MANUAL,       
    EM_TRACK_MODE_ALARM         
} EM_TRACK_MODE;
typedef struct tagNET_CFG_TRACKMODE
{
    int nVideoChannel;         
    EM_TRACK_MODE emTrackMode; 
    BYTE byReserved[1024];     
} NET_CFG_TRACKMODE;
typedef struct tagNET_IN_GET_TRACKMODE
{
    DWORD dwSize;
    int nVideoChannel; 
} NET_IN_GET_TRACKMODE;
typedef struct tagNET_OUT_GET_TRACKMODE
{
    DWORD dwSize;
    NET_CFG_TRACKMODE stuGetTrackMode;
} NET_OUT_GET_TRACKMODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTrackMode(LLONG lLoginID, const NET_IN_GET_TRACKMODE* pstInParam, NET_OUT_GET_TRACKMODE* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_TRACKMODE
{
    DWORD dwSize;
    NET_CFG_TRACKMODE stuSetTrackMode;
} NET_IN_SET_TRACKMODE;
typedef struct tagNET_OUT_SET_TRACKMODE
{
    DWORD dwSize;
} NET_OUT_SET_TRACKMODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetTrackMode(LLONG lLoginID, const NET_IN_SET_TRACKMODE* pstInParam, NET_OUT_SET_TRACKMODE* pstOutParam, int nWaitTime);
typedef struct tagNET_CFG_LINKPOS
{
    int nVideoChannel;                  
    char szBallip[DH_COMMON_STRING_64]; 
    unsigned short nX;                  
    unsigned short nY;                  
    float fZoom;                        
    BYTE byReserved[1024];              
} NET_CFG_LINKPOS;
typedef struct tagNET_IN_SET_LINKPOS
{
    DWORD dwSize;
    NET_CFG_LINKPOS stuSetLinkPos;
} NET_IN_SET_LINKPOS;
typedef struct tagNET_OUT_SET_LINKPOS
{
    DWORD dwSize;
} NET_OUT_SET_LINKPOS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetLinkPos(LLONG lLoginID, const NET_IN_SET_LINKPOS* pstInParam, NET_OUT_SET_LINKPOS* pstOutParam, int nWaitTime);
typedef struct tagNET_BUCKET_NAME_INFO
{
    char szName[DH_COMMON_STRING_64]; 
    BYTE byReserved[256];             
} NET_BUCKET_NAME_INFO;
typedef struct tagNET_IN_FIND_BUCKET_NAME
{
    DWORD dwSize; 
    UINT nOffset; 
    UINT nCount;  
} NET_IN_FIND_BUCKET_NAME;
typedef struct tagNET_OUT_FIND_BUCKET_NAME
{
    DWORD dwSize;                      
    UINT nTotalCount;                  
    UINT nFindCount;                   
    NET_BUCKET_NAME_INFO* pBucketName; 
    UINT nNameCount;                   
} NET_OUT_FIND_BUCKET_NAME;
typedef struct tagNET_BUCKET_FILE_NAME_INFO
{
    char szName[DH_COMMON_STRING_1024]; 
    BYTE byReserved[256];               
} NET_BUCKET_FILE_NAME_INFO;
typedef struct tagNET_IN_FIND_BUCKET_FILE_NAME
{
    DWORD dwSize;                           
    UINT nOffset;                           
    UINT nCount;                            
    char szBucketName[DH_COMMON_STRING_64]; 
} NET_IN_FIND_BUCKET_FILE_NAME;
typedef struct tagNET_OUT_FIND_BUCKET_FILE_NAME
{
    DWORD dwSize;                         
    UINT nTotalCount;                     
    UINT nFindCount;                      
    NET_BUCKET_FILE_NAME_INFO* pFileName; 
    UINT nFileCount;                      
} NET_OUT_FIND_BUCKET_FILE_NAME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindBucketName(LLONG lLoginID, const NET_IN_FIND_BUCKET_NAME* pstInParam, NET_OUT_FIND_BUCKET_NAME* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindBucketFileName(LLONG lLoginID, const NET_IN_FIND_BUCKET_FILE_NAME* pstInParam, NET_OUT_FIND_BUCKET_FILE_NAME* pstOutParam, int nWaitTime);
typedef void(CALLBACK* pfAudioBroadcastDataCallBack)(LLONG lSpeakHandle, char* pDataBuf, DWORD dwBufSize, int nToken, LDWORD dwUser);
typedef struct tagNET_IN_START_CHANNEL_INFO
{
    DWORD dwSize;
    int nChannelCount;                 
    int nChannel[32];                  
    pfAudioBroadcastDataCallBack pfcb; 
    LDWORD dwUser;                     
} NET_IN_START_CHANNEL_INFO;
typedef struct tagNET_OUT_START_CHANNEL_INFO
{
    DWORD dwSize;
    int nToken;                            
    int nFrequency;                        
    int nDepth;                            
    DH_TALK_CODING_TYPE emCompressionType; 
} NET_OUT_START_CHANNEL_INFO;
typedef struct tagNET_TALK_CHANNEL_SENDDATA_IN
{
    DWORD dwSize;
    char* pSendBuf;  
    int nSendBufLen; 
} NET_TALK_CHANNEL_SENDDATA_IN;
typedef struct tagNET_TALK_CHANNEL_SENDDATA_OUT
{
    DWORD dwSize;
} NET_TALK_CHANNEL_SENDDATA_OUT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartTalkChannel(LLONG lLoginID, const NET_IN_START_CHANNEL_INFO* pstInParam, NET_OUT_START_CHANNEL_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TalkChannelSendData(LLONG lSpeakHandle, const NET_TALK_CHANNEL_SENDDATA_IN* pstInParam, NET_TALK_CHANNEL_SENDDATA_OUT* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopTalkChannel(LLONG lSpeakHandle);
typedef struct tagNET_IN_INIT_DEVICE_ACCOUNT
{
    DWORD dwSize;                                
    char szMac[DH_MACADDR_LEN];                  
    char szUserName[MAX_USER_NAME_LEN];          
    char szPwd[MAX_PWD_LEN];                     
    char szCellPhone[MAX_CELL_PHONE_NUMBER_LEN]; 
    char szMail[MAX_MAIL_LEN];                   
    BYTE byInitStatus;                           
    BYTE byPwdResetWay;                          
    BYTE byReserved[2];                          
} NET_IN_INIT_DEVICE_ACCOUNT;
typedef struct tagNET_OUT_INIT_DEVICE_ACCOUNT
{
    DWORD dwSize; 
} NET_OUT_INIT_DEVICE_ACCOUNT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitDevAccount(const NET_IN_INIT_DEVICE_ACCOUNT* pInitAccountIn, NET_OUT_INIT_DEVICE_ACCOUNT* pInitAccountOut, DWORD dwWaitTime, char* szLocalIp);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitDevAccountByIP(const NET_IN_INIT_DEVICE_ACCOUNT* pInitAccountIn, NET_OUT_INIT_DEVICE_ACCOUNT* pInitAccountOut, DWORD dwWaitTime, const char* szLocalIp, const char* szDeviceIP);
typedef struct tagNET_IN_INIT_DEVICE_SET_LOCALITY_CONFIG_INFO
{
    DWORD dwSize;                      
    char szMac[40];                    
    char szCountry[3];                 
    char szReserved[1];                
    EM_VIDEO_STANDARD emVideoStandard; 
} NET_IN_INIT_DEVICE_SET_LOCALITY_CONFIG_INFO;
typedef struct tagNET_OUT_INIT_DEVICE_SET_LOCALITY_CONFIG_INFO
{
    DWORD dwSize; 
} NET_OUT_INIT_DEVICE_SET_LOCALITY_CONFIG_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitDevSetLocalityConfig(const NET_IN_INIT_DEVICE_SET_LOCALITY_CONFIG_INFO* pstuInParam, NET_OUT_INIT_DEVICE_SET_LOCALITY_CONFIG_INFO* pstuOutParam, DWORD dwWaitTime, char* szLocalIp);
typedef struct tagNET_IN_INIT_DEVICE_ACCESS
{
    DWORD dwSize;                       
    char szMac[DH_MACADDR_LEN];         
    char szUserName[MAX_USER_NAME_LEN]; 
    char szPwd[MAX_PWD_LEN];            
    BYTE byNetAccess;                   
    BYTE byUpgradeCheck;                
    BYTE byReserved[2];                 
    EM_VIDEO_STANDARD emVideoStandard;  
} NET_IN_INIT_DEVICE_ACCESS;
typedef struct tagNET_OUT_INIT_DEVICE_ACCESS
{
    DWORD dwSize; 
} NET_OUT_INIT_DEVICE_ACCESS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitDevAccess(const NET_IN_INIT_DEVICE_ACCESS* pInitAccessIn, NET_OUT_INIT_DEVICE_ACCESS* pInitAccessOut, DWORD dwWaitTime, char* szLocalIp);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitDevAccessByIp(const NET_IN_INIT_DEVICE_ACCESS* pInitAccessIn, NET_OUT_INIT_DEVICE_ACCESS* pInitAccessOut, DWORD dwWaitTime, char* szLocalIp, const char* szDeviceIP);
typedef struct tagNET_IN_DESCRIPTION_FOR_RESET_PWD
{
    DWORD dwSize;                       
    char szMac[DH_MACADDR_LEN];         
    char szUserName[MAX_USER_NAME_LEN]; 
    BYTE byInitStatus;                  
    BYTE byReserved[3];                 
} NET_IN_DESCRIPTION_FOR_RESET_PWD;
typedef struct tagNET_OUT_DESCRIPTION_FOR_RESET_PWD
{
    DWORD dwSize;                                
    char szCellPhone[MAX_CELL_PHONE_NUMBER_LEN]; 
    char szMailAddr[MAX_MAIL_LEN];               
    char* pQrCode;                               
    unsigned int nQrCodeLen;                     
    unsigned int nQrCodeLenRet;                  
} NET_OUT_DESCRIPTION_FOR_RESET_PWD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDescriptionForResetPwd(const NET_IN_DESCRIPTION_FOR_RESET_PWD* pDescriptionIn, NET_OUT_DESCRIPTION_FOR_RESET_PWD* pDescriptionOut, DWORD dwWaitTime, char* szLocalIp);
typedef struct tagNET_IN_RESET_PWD
{
    DWORD dwSize;                           
    char szMac[DH_MACADDR_LEN];             
    char szUserName[MAX_USER_NAME_LEN];     
    char szPwd[MAX_PWD_LEN];                
    char szSecurity[MAX_SECURITY_CODE_LEN]; 
    BYTE byInitStaus;                       
    BYTE byPwdResetWay;                     
    BYTE byReserved[2];                     
    char szContact[MAX_CONTACT_LEN];        
    BOOL bSetContact;                       
} NET_IN_RESET_PWD;
typedef struct tagNET_OUT_RESET_PWD
{
    DWORD dwSize; 
} NET_OUT_RESET_PWD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResetPwd(const NET_IN_RESET_PWD* pResetPwdIn, NET_OUT_RESET_PWD* pResetPwdOut, DWORD dwWaitTime, char* szLocalIp);
typedef enum tagEM_ACCOUNT_TYPE
{
    EM_ACCOUNT_TYPE_UNKNOWN, 
    EM_ACCOUNT_TYPE_SDK,     
    EM_ACCOUNT_TYPE_WEB,     
} EM_ACCOUNT_TYPE;
typedef struct tagNET_IN_INIT_ACCOUNT
{
    DWORD dwSize;                   
    char szUser[MAX_USER_NAME_LEN]; 
    char szPwd[MAX_PWD_LEN];        
    char szMac[DH_MACADDR_LEN];     
    EM_ACCOUNT_TYPE emAccountType;  
} NET_IN_INIT_ACCOUNT;
typedef struct tagNET_OUT_INIT_ACCOUNT
{
    DWORD dwSize; 
} NET_OUT_INIT_ACCOUNT;
typedef struct tagNET_IN_REST_WEB_PWD
{
    DWORD dwSize;                      
    char szWebUser[MAX_USER_NAME_LEN]; 
    char szWebPwd[MAX_PWD_LEN];        
} NET_IN_REST_WEB_PWD;
typedef struct tagNET_OUT_REST_WEB_PWD
{
    DWORD dwSize; 
} NET_OUT_REST_WEB_PWD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitAccount(const NET_IN_INIT_ACCOUNT* pInitAccountIn, NET_OUT_INIT_ACCOUNT* pInitAccountOut, int nWaitTime, char* szLocalIp);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InitAccountByIP(const NET_IN_INIT_ACCOUNT* pInitAccountIn, NET_OUT_INIT_ACCOUNT* pInitAccountOut, int nWaitTime, char* szLocalIp, const char* szDeviceIP);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResetWebPwd(LLONG lLoginID, const NET_IN_REST_WEB_PWD* pstInParam, NET_OUT_REST_WEB_PWD* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_CHECK_AUTHCODE
{
    DWORD dwSize;                           
    char szMac[DH_MACADDR_LEN];             
    char szSecurity[MAX_SECURITY_CODE_LEN]; 
    char szContact[MAX_CONTACT_LEN];        
} NET_IN_CHECK_AUTHCODE;
typedef struct tagNET_OUT_CHECK_AUTHCODE
{
    DWORD dwSize; 
} NET_OUT_CHECK_AUTHCODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CheckAuthCode(const NET_IN_CHECK_AUTHCODE* pCheckAuthCodeIn, NET_OUT_CHECK_AUTHCODE* pCheckAuthCodeOut, DWORD dwWaitTime, char* szLocalIp);
typedef struct tagNET_IN_SET_EVEREST360_MEDIAMODE
{
    DWORD dwSize;
    UINT nMediaMode; 
} NET_IN_SET_EVEREST360_MEDIAMODE;
typedef struct tagNET_OUT_SET_EVEREST360_MEDIAMODE
{
    DWORD dwSize;
} NET_OUT_SET_EVEREST360_MEDIAMODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetEverest360MediaMode(LLONG lLoginID, const NET_IN_SET_EVEREST360_MEDIAMODE* pstInParam, NET_OUT_SET_EVEREST360_MEDIAMODE* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_PWD_SPECI
{
    DWORD dwSize;               
    char szMac[DH_MACADDR_LEN]; 
} NET_IN_PWD_SPECI;
typedef struct tagNET_OUT_PWD_SPECI
{
    DWORD dwSize;                                  
    unsigned int nMaxPwdLen;                       
    unsigned int nMinPwdLen;                       
    char szType[MAX_PWD_BASIC_CHARS_ARRAY_LEN];    
    char szCharList[MAX_PWD_SPEC_CHARS_ARRAY_LEN]; 
    int nCombine;                                  
} NET_OUT_PWD_SPECI;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPwdSpecification(const NET_IN_PWD_SPECI* pPwdSpeciIn, NET_OUT_PWD_SPECI* pPwdSpeciOut, DWORD dwWaitTime, char* szLocalIp);
typedef struct tagNET_IN_GET_SECURITY_ENCRYPT_INFO
{
    DWORD dwSize; 
} NET_IN_GET_SECURITY_ENCRYPT_INFO;
typedef struct tagNET_OUT_GET_SECURITY_ENCRYPT_INFO
{
    DWORD dwSize;      
    char szCipher[32]; 
} NET_OUT_GET_SECURITY_ENCRYPT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSecurityEncryptInfo(LLONG lLoginID, const NET_IN_GET_SECURITY_ENCRYPT_INFO* pstInParam, NET_OUT_GET_SECURITY_ENCRYPT_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_LOWRATEWPAN_POWER
{
    DWORD dwSize;                              
    int nPower;                                
    char szSmartLockNum[MAX_COMMON_STRING_32]; 
} NET_IN_SET_LOWRATEWPAN_POWER;
typedef struct tagNET_OUT_SET_LOWRATEWPAN_POWER
{
    DWORD dwSize; 
} NET_OUT_SET_LOWRATEWPAN_POWER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetLowRateWPANPower(LLONG lLoginID, const NET_IN_SET_LOWRATEWPAN_POWER* pstInParam, NET_OUT_SET_LOWRATEWPAN_POWER* pstOutParam, int nWaitTime);
typedef enum tagNET_EM_ACCESS_CTL_MANAGER
{
    NET_EM_ACCESS_CTL_MANAGER_ADDDEVICE,      
    NET_EM_ACCESS_CTL_MANAGER_MODIFYDEVICE,   
    NET_EM_ACCESS_CTL_MANAGER_REMOVEDEVICE,   
    NET_EM_ACCESS_CTL_GETSUBCONTROLLER_INFO,  
    NET_EM_ACCESS_CTL_GETSUBCONTROLLER_STATE, 
    NET_EM_ACCESS_CTL_SET_REPEAT_ENTERROUTE,  
    NET_EM_ACCESS_CTL_GET_REPEAT_ENTERROUTE,  
    NET_EM_ACCESS_CTL_SET_ABLOCK_ROUTE,       
    NET_EM_ACCESS_CTL_GET_ABLOCK_ROUTE,       
    NET_EM_ACCESS_CTL_GET_LOGSTATUS,          
    NET_EM_ACCESS_CTL_SYNCHRO_OFFLINE_LOG,    
    NET_EM_ACCESS_CTL_SYNCHRO_TIME,           
    NET_EM_ACCESS_CTL_SET_QRCODEDECODE_INFO,  
} NET_EM_ACCESS_CTL_MANAGER;
typedef struct tagNET_IN_ACCESS_CTL_MANAGER_ADDDEVICE
{
    DWORD dwSize;
    int nSubControllerID;                            
    char szSubControllerName[MAX_COMMON_STRING_128]; 
} NET_IN_ACCESS_CTL_MANAGER_ADDDEVICE;
typedef struct tagNET_OUT_ACCESS_CTL_MANAGER_ADDDEVICE
{
    DWORD dwSize;
    int nErrorCode; 
} NET_OUT_ACCESS_CTL_MANAGER_ADDDEVICE;
typedef struct tagNET_IN_ACCESS_CTL_MANAGER_MODIFYDEVICE
{
    DWORD dwSize;
    int nSubControllerID;                            
    char szSubControllerName[MAX_COMMON_STRING_128]; 
} NET_IN_ACCESS_CTL_MANAGER_MODIFYDEVICE;
typedef struct tagNET_OUT_ACCESS_CTL_MANAGER_MODIFYDEVICE
{
    DWORD dwSize;
} NET_OUT_ACCESS_CTL_MANAGER_MODIFYDEVICE;
typedef struct tagNET_IN_ACCESS_CTL_MANAGER_REMOVEDEVICE
{
    DWORD dwSize;
    int nSubControllerID[MAX_ACCESSSUBCONTROLLER_NUM]; 
    int nSubControllerNum;                             
} NET_IN_ACCESS_CTL_MANAGER_REMOVEDEVICE;
typedef struct tagNET_REMOVEDEVICE_RESULT
{
    int nSubControllerID; 
    int nErrorCode;       
    BYTE byReserved[128];
} NET_REMOVEDEVICE_RESULT;
typedef struct tagNET_OUT_ACCESS_CTL_MANAGER_REMOVEDEVICE
{
    DWORD dwSize;
    int nResultNum;
    NET_REMOVEDEVICE_RESULT stuResult[MAX_ACCESSSUBCONTROLLER_NUM];
} NET_OUT_ACCESS_CTL_MANAGER_REMOVEDEVICE;
typedef struct tagNET_IN_GET_SUB_CONTROLLER_INFO
{
    DWORD dwSize;
    int nSubControllerID[MAX_ACCESSSUBCONTROLLER_NUM]; 
    int nSubControllerNum;                             
} NET_IN_GET_SUB_CONTROLLER_INFO;
typedef enum tagNET_EM_ACCESS_PROPERTY
{
    NET_EM_ACCESS_PROPERTY_UNKNOWN,   
    NET_EM_ACCESS_PROPERTY_BIDIRECT,  
    NET_EM_ACCESS_PROPERTY_UNIDIRECT, 
} NET_ACCESS_PROPERTY;
typedef struct tagNET_CARDREAD_INFO
{
    int nDoor;                                                 
    int nReadNum;                                              
    char szReadID[MAX_ACCESS_READER_NUM][DH_COMMON_STRING_32]; 
    BYTE byReserved[64];
} NET_CARDREAD_INFO;
typedef struct tagNET_SUB_CONTROLLER_INFO
{
    int nSubControllerID;                                
    char szSubControllerName[MAX_COMMON_STRING_128];     
    NET_ACCESS_PROPERTY emProperty;                      
    char szDeviceType[MAX_COMMON_STRING_128];            
    char szVesion[MAX_COMMON_STRING_128];                
    int nDoorNum;                                        
    NET_CARDREAD_INFO stuReaderInfo[MAX_ACCESSDOOR_NUM]; 
    BYTE byReserved[128];
} NET_SUB_CONTROLLER_INFO;
typedef struct tagNET_OUT_GET_SUB_CONTROLLER_INFO
{
    DWORD dwSize;
    NET_SUB_CONTROLLER_INFO stuSubControllerInfo[MAX_ACCESSSUBCONTROLLER_NUM]; 
    int nRetNum;                                                               
} NET_OUT_GET_SUB_CONTROLLER_INFO;
typedef struct tagNET_IN_GET_SUB_CONTROLLER_STATE
{
    DWORD dwSize;
    int nSubControllerID[MAX_ACCESSSUBCONTROLLER_NUM]; 
    int nSubControllerNum;                             
} NET_IN_GET_SUB_CONTROLLER_STATE;
typedef struct tagNET_SUB_CONTROLLER_STATE
{
    int nSubControllerID; 
    int nState;           
    BYTE byReserved[128];
} NET_SUB_CONTROLLER_STATE;
typedef struct tagNET_OUT_GET_SUB_CONTROLLER_STATE
{
    DWORD dwSize;
    NET_SUB_CONTROLLER_STATE stuSubControllerState[MAX_ACCESSSUBCONTROLLER_NUM]; 
    int nRetNum;                                                                 
} NET_OUT_GET_SUB_CONTROLLER_STATE;
typedef struct tagNET_POINT_READER_INFO
{
    int nReaderNum;                                              
    char szReaderID[MAX_ACCESS_READER_NUM][DH_COMMON_STRING_32]; 
    BYTE byReserved[128];
} NET_POINT_READER_INFO;
typedef struct tagNET_IN_SET_REPEAT_ENTERROUTE
{
    DWORD dwSize;
    UINT nIndex;                                              
    int nPointNum;                                            
    NET_POINT_READER_INFO stuPointInfo[MAX_ACCESS_POINT_NUM]; 
    int nTimeSection;                                         
    BOOL bFlag;                                               
    char szRouteName[MAX_COMMON_STRING_128];                  
} NET_IN_SET_REPEAT_ENTERROUTE;
typedef struct tagNET_OUT_SET_REPEAT_ENTERROUTE
{
    DWORD dwSize;
} NET_OUT_SET_REPEAT_ENTERROUTE;
typedef struct tagNET_IN_GET_REPEAT_ENTERROUTE
{
    DWORD dwSize;
    UINT nIndex; 
} NET_IN_GET_REPEAT_ENTERROUTE;
typedef struct tagNET_OUT_GET_REPEAT_ENTERROUTE
{
    DWORD dwSize;
    int nPointNum;                                            
    NET_POINT_READER_INFO stuPointInfo[MAX_ACCESS_POINT_NUM]; 
    int nTimeSection;                                         
    BOOL bFlag;                                               
    char szRouteName[MAX_COMMON_STRING_128];                  
} NET_OUT_GET_REPEAT_ENTERROUTE;
typedef struct tagNET_POINT_DOOR_INFO
{
    int nDoorNum;                    
    int nDoorID[MAX_ACCESSDOOR_NUM]; 
    BYTE byReserved[128];
} NET_POINT_DOOR_INFO;
typedef struct tagNET_IN_SET_ABLOCK_ROUTE
{
    DWORD dwSize;
    UINT nIndex;                                            
    int nPointNum;                                          
    NET_POINT_DOOR_INFO stuPointInfo[MAX_ACCESS_POINT_NUM]; 
    int nTimeSection;                                       
    BOOL bFlag;                                             
    char szRouteName[MAX_COMMON_STRING_128];                
} NET_IN_SET_ABLOCK_ROUTE;
typedef struct tagNET_OUT_SET_ABLOCK_ROUTE
{
    DWORD dwSize;
} NET_OUT_SET_ABLOCK_ROUTE;
typedef struct tagNET_IN_GET_ABLOCK_ROUTE
{
    DWORD dwSize;
    UINT nIndex; 
} NET_IN_GET_ABLOCK_ROUTE;
typedef struct tagNET_OUT_GET_ABLOCK_ROUTE
{
    DWORD dwSize;
    int nPointNum;                                          
    NET_POINT_DOOR_INFO stuPointInfo[MAX_ACCESS_POINT_NUM]; 
    int nTimeSection;                                       
    BOOL bFlag;                                             
    char szRouteName[MAX_COMMON_STRING_128];                
} NET_OUT_GET_ABLOCK_ROUTE;
typedef struct tagNET_IN_GET_LOGSTATUS
{
    DWORD dwSize;
    int nControllerID; 
} NET_IN_GET_LOGSTATUS;
typedef struct tagNET_OUT_GET_LOGSTATUS
{
    DWORD dwSize;
    BOOL bsynchronize; 
} NET_OUT_GET_LOGSTATUS;
typedef struct tagNET_IN_SYNCHRO_OFFLINE_LOG
{
    DWORD dwSize;
    int nControllerID; 
} NET_IN_SYNCHRO_OFFLINE_LOG;
typedef struct tagNET_OUT_SYNCHRO_OFFLINE_LOG
{
    DWORD dwSize;
} NET_OUT_SYNCHRO_OFFLINE_LOG;
typedef struct tagNET_IN_SYNCHRO_CONTROLLER_TIME
{
    DWORD dwSize;
    int nSubControllerID[MAX_ACCESSSUBCONTROLLER_NUM]; 
    int nSubControllerNum;                             
} NET_IN_SYNCHRO_CONTROLLER_TIME;
typedef struct tagNET_OUT_SYNCHRO_CONTROLLER_TIME
{
    DWORD dwSize;
    int nSubControllerID[MAX_ACCESSSUBCONTROLLER_NUM]; 
    int nRetNum;                                       
} NET_OUT_SYNCHRO_CONTROLLER_TIME;
typedef enum tagNET_ENUM_QRCODE_CIPHER
{
    NET_ENUM_QRCODE_CIPHER_UNKNOWN,
    NET_ENUM_QRCODE_CIPHER_AES256, 
} NET_ENUM_QRCODE_CIPHER;
typedef struct tagNET_IN_SET_QRCODE_DECODE_INFO
{
    DWORD dwSize;
    NET_ENUM_QRCODE_CIPHER emCipher; 
    char szKey[33];                  
    BYTE byReserved[3];              
} NET_IN_SET_QRCODE_DECODE_INFO;
typedef struct tagNET_OUT_SET_QRCODE_DECODE_INFO
{
    DWORD dwSize;
} NET_OUT_SET_QRCODE_DECODE_INFO;
typedef struct tagNET_IN_SET_SAFE_LEVEL
{
    DWORD dwSize;       
    BYTE byLevel;       
    BYTE byReserved[3]; 
} NET_IN_SET_SAFE_LEVEL;
typedef struct tagNET_OUT_SET_SAFE_LEVEL
{
    DWORD dwSize;
} NET_OUT_SET_SAFE_LEVEL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateAccessControlManager(LLONG lLoginID, NET_EM_ACCESS_CTL_MANAGER emtype, const void* pstInParam, void* pstOutParam, int nWaitTime);
typedef enum tagNET_EM_RTMP_MANAGER_OPER_TYPE
{
    NET_EM_RTMP_MANAGER_OPER_TYPE_GETCAPS,   
    NET_EM_RTMP_MANAGER_OPER_TYPE_ADD,       
    NET_EM_RTMP_MANAGER_OPER_TYPE_REMOVE,    
    NET_EM_RTMP_MANAGER_OPER_TYPE_START,     
    NET_EM_RTMP_MANAGER_OPER_TYPE_STOP,      
    NET_EM_RTMP_MANAGER_OPER_TYPE_PAUSE,     
    NET_EM_RTMP_MANAGER_OPER_TYPE_RESUME,    
    NET_EM_RTMP_MANAGER_OPER_TYPE_SET_SPEED, 
} NET_EM_RTMP_MANAGER_OPER_TYPE;
typedef struct tagNET_IN_RTMP_MANAGER_GETCAPS
{
    DWORD dwSize; 
} NET_IN_RTMP_MANAGER_GETCAPS;
typedef struct tagNET_OUT_RTMP_MANAGER_GETCAPS
{
    DWORD dwSize;    
    UINT nMaxLive;   
    UINT nMaxRecord; 
} NET_OUT_RTMP_MANAGER_GETCAPS;
typedef enum tagNET_EM_RTMP_MANAGER_ADD_TYPE
{
    NET_EM_RTMP_MANAGER_ADD_TYPE_UNKNOWN = -1,  
    NET_EM_RTMP_MANAGER_ADD_TYPE_LIVE_STREAM,   
    NET_EM_RTMP_MANAGER_ADD_TYPE_RECORD_STREAM, 
} NET_EM_RTMP_MANAGER_ADD_TYPE;
typedef enum tagNET_EM_RTMP_MANAGER_STREAM_TYPE
{
    NET_EM_RTMP_MANAGER_STREAM_TYPE_UNKNOWN = -1,          
    NET_EM_RTMP_MANAGER_STREAM_TYPE_MAINCODE_STREAM,       
    NET_EM_RTMP_MANAGER_STREAM_TYPE_SECONDARYCODE_STREAM1, 
    NET_EM_RTMP_MANAGER_STREAM_TYPE_SECONDARYCODE_STREAM2, 
} NET_EM_RTMP_MANAGER_STREAM_TYPE;
typedef struct tagNET_RTMP_MANAGER_LIVE_STREAM
{
    int nChannel;                                 
    NET_EM_RTMP_MANAGER_STREAM_TYPE emStreamType; 
    BYTE byReserved[1024];                        
} NET_RTMP_MANAGER_LIVE_STREAM;
typedef struct tagNET_RTMP_MANAGER_RECORD_STREAM
{
    char szFilePath[260];                         
    char szStartTime[20];                         
    char szEndTime[20];                           
    int nChannel;                                 
    NET_EM_RTMP_MANAGER_STREAM_TYPE emStreamType; 
    BYTE byReserved[1024];                        
} NET_RTMP_MANAGER_RECORD_STREAM;
typedef struct tagNET_IN_RTMP_MANAGER_ADD
{
    DWORD dwSize;                                   
    NET_EM_RTMP_MANAGER_ADD_TYPE emType;            
    NET_RTMP_MANAGER_LIVE_STREAM stuLiveStream;     
    NET_RTMP_MANAGER_RECORD_STREAM stuRecordStream; 
    char szUrl[512];                                
} NET_IN_RTMP_MANAGER_ADD;
typedef enum tagNET_EM_RTMP_MANAGER_ADD_ERRCODE
{
    NET_EM_RTMP_MANAGER_ADD_ERRCODE_UNKNOWN = -1,             
    NET_EM_RTMP_MANAGER_ADD_ERRCODE_NOERROR,                  
    NET_EM_RTMP_MANAGER_ADD_ERRCODE_LIVECHANNEL_NOT_ONLINE,   
    NET_EM_RTMP_MANAGER_ADD_ERRCODE_RECORDVIDEO_NOT_FOUND,    
    NET_EM_RTMP_MANAGER_ADD_ERRCODE_EXCEED_MAX_LIVECHANNEL,   
    NET_EM_RTMP_MANAGER_ADD_ERRCODE_EXCEED_MAX_RECORDCHANNEL, 
    NET_EM_RTMP_MANAGER_ADD_ERRCODE_OTHER_ERRORS,             
} NET_EM_RTMP_MANAGER_ADD_ERRCODE;
typedef struct tagNET_OUT_RTMP_MANAGER_ADD
{
    DWORD dwSize;                              
    UINT nPushId;                              
    NET_EM_RTMP_MANAGER_ADD_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_ADD;
typedef struct tagNET_IN_RTMP_MANAGER_REMOVE
{
    DWORD dwSize; 
    UINT nPushId; 
} NET_IN_RTMP_MANAGER_REMOVE;
typedef enum tagNET_EM_RTMP_MANAGER_ERRCODE
{
    NET_EM_RTMP_MANAGER_ERRCODE_UNKNOWN,            
    NET_EM_RTMP_MANAGER_ERRCODE_NOERROR,            
    NET_EM_RTMP_MANAGER_ERRCODE_STREAMID_NOT_EXIST, 
    NET_EM_RTMP_MANAGER_ERRCODE_OTHER_ERRORS,       
} NET_EM_RTMP_MANAGER_ERRCODE;
typedef struct tagNET_OUT_RTMP_MANAGER_REMOVE
{
    DWORD dwSize;                          
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_REMOVE;
typedef struct tagNET_IN_RTMP_MANAGER_START
{
    DWORD dwSize; 
    UINT nPushId; 
} NET_IN_RTMP_MANAGER_START;
typedef struct tagNET_OUT_RTMP_MANAGER_START
{
    DWORD dwSize;                          
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_START;
typedef struct tagNET_IN_RTMP_MANAGER_STOP
{
    DWORD dwSize; 
    UINT nPushId; 
} NET_IN_RTMP_MANAGER_STOP;
typedef struct tagNET_OUT_RTMP_MANAGER_STOP
{
    DWORD dwSize;                          
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_STOP;
typedef struct tagNET_IN_RTMP_MANAGER_PAUSE
{
    DWORD dwSize; 
    UINT nPushId; 
} NET_IN_RTMP_MANAGER_PAUSE;
typedef struct tagNET_OUT_RTMP_MANAGER_PAUSE
{
    DWORD dwSize;                          
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_PAUSE;
typedef struct tagNET_IN_RTMP_MANAGER_RESUME
{
    DWORD dwSize; 
    UINT nPushId; 
} NET_IN_RTMP_MANAGER_RESUME;
typedef struct tagNET_OUT_RTMP_MANAGER_RESUME
{
    DWORD dwSize;                          
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_RESUME;
typedef struct tagNET_IN_RTMP_MANAGER_SET_SPEED
{
    DWORD dwSize;   
    UINT nPushId;   
    double dbSpeed; 
} NET_IN_RTMP_MANAGER_SET_SPEED;
typedef struct tagNET_OUT_RTMP_MANAGER_SET_SPEED
{
    DWORD dwSize;                          
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_SET_SPEED;
typedef enum tagNET_EM_RTMP_MANAGER_STATUS
{
    NET_EM_RTMP_MANAGER_STATUS_UNKNOWN = -1,           
    NET_EM_RTMP_MANAGER_STATUS_NOT_ENABLED,            
    NET_EM_RTMP_MANAGER_STATUS_PUSH_FLOW,              
    NET_EM_RTMP_MANAGER_STATUS_PUSH_FLOW_END_NORMALLY, 
    NET_EM_RTMP_MANAGER_STATUS_FAILED,                 
    NET_EM_RTMP_MANAGER_STATUS_STOP,                   
} NET_EM_RTMP_MANAGER_STATUS;
typedef struct tagNET_CB_RTMP_MANAGER_INFO
{
    UINT nPushId;                          
    NET_EM_RTMP_MANAGER_STATUS emStatus;   
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
    BYTE bReserved[256];                   
} NET_CB_RTMP_MANAGER_INFO;
typedef struct tagNET_CB_RTMP_STATUS_INFO
{
    UINT nSID;                        
    NET_CB_RTMP_MANAGER_INFO stuInfo; 
    BYTE bReserved[1024];             
} NET_CB_RTMP_STATUS_INFO;
typedef int(CALLBACK* fRTMPAttachStatusCallBack)(LLONG lHandle, NET_CB_RTMP_STATUS_INFO* pstuRTMPStatusInfo, LDWORD dwUser);
typedef struct tagNET_IN_RTMP_MANAGER_ATTACH_STATUS
{
    DWORD dwSize;                                         
    UINT nPushId;                                         
    fRTMPAttachStatusCallBack cbRTMPAttachStatusCallBack; 
    LDWORD dwUser;                                        
} NET_IN_RTMP_MANAGER_ATTACH_STATUS;
typedef struct tagNET_OUT_RTMP_MANAGER_ATTACH_STATUS
{
    DWORD dwSize;                          
    UINT nSID;                             
    NET_EM_RTMP_MANAGER_ERRCODE emErrCode; 
} NET_OUT_RTMP_MANAGER_ATTACH_STATUS;
typedef struct tagNET_IN_RTMP_MANAGER_DETACH_STATUS
{
    DWORD dwSize; 
    UINT nPushId; 
} NET_IN_RTMP_MANAGER_DETACH_STATUS;
typedef struct tagNET_OUT_RTMP_MANAGER_DETACH_STATUS
{
    DWORD dwSize; 
} NET_OUT_RTMP_MANAGER_DETACH_STATUS;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachStatusRTMPManager(LLONG lLoginID, NET_IN_RTMP_MANAGER_ATTACH_STATUS* pstuInParam, NET_OUT_RTMP_MANAGER_ATTACH_STATUS* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DetachStatusRTMPManager(LLONG lAttachStatusHandle, NET_IN_RTMP_MANAGER_DETACH_STATUS* pstuInParam, NET_OUT_RTMP_MANAGER_DETACH_STATUS* pstuOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateRTMPManager(LLONG lLoginID, NET_EM_RTMP_MANAGER_OPER_TYPE emtype, const void* pstInParam, void* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_RTMP_MANAGER_GETPUSHINFOS
{
    DWORD dwSize; 
} NET_IN_RTMP_MANAGER_GETPUSHINFOS;
typedef struct tagNET_RTMP_MANAGER_PUSHINFOS
{
    UINT nPushId;                        
    NET_EM_RTMP_MANAGER_ADD_TYPE emType; 
    NET_EM_RTMP_MANAGER_STATUS emStatus; 
    char szReserved[1028];               
} NET_RTMP_MANAGER_PUSHINFOS;
typedef struct tagNET_OUT_RTMP_MANAGER_GETPUSHINFOS
{
    DWORD dwSize;                                
    int nPushInfosNum;                           
    NET_RTMP_MANAGER_PUSHINFOS stuPushInfos[32]; 
} NET_OUT_RTMP_MANAGER_GETPUSHINFOS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPushInfosRTMPManager(LLONG lLoginID, NET_IN_RTMP_MANAGER_GETPUSHINFOS* pstuInParam, NET_OUT_RTMP_MANAGER_GETPUSHINFOS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_SMART_LOCK_USERNAME
{
    DWORD dwSize;                              
    NET_ACCESS_METHOD emType;                  
    char szSerialNumber[MAX_COMMON_STRING_32]; 
    char szUserID[MAX_COMMON_STRING_16];       
    char szName[MAX_COMMON_STRING_32];         
} NET_IN_SET_SMART_LOCK_USERNAME;
typedef struct tagNET_OUT_SET_SMART_LOCK_USERNAME
{
    DWORD dwSize; 
} NET_OUT_SET_SMART_LOCK_USERNAME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSmartLockUsername(LLONG lLoginID, const NET_IN_SET_SMART_LOCK_USERNAME* pstInParam, NET_OUT_SET_SMART_LOCK_USERNAME* pstOutParam, int nWaitTime);
#define MAX_NUMBER_REGISTER_INFO 32
typedef struct tagNET_IN_GET_SMART_LOCK_REGISTER_INFO
{
    DWORD dwSize;                              
    char szSerialNumber[MAX_COMMON_STRING_32]; 
    int nOffset;                               
} NET_IN_GET_SMART_LOCK_REGISTER_INFO;
typedef struct tagNET_SMART_LOCK_REGISTER_INFO
{
    NET_ACCESS_METHOD emType;            
    char szUserID[MAX_COMMON_STRING_16]; 
    char szName[MAX_COMMON_STRING_32];   
    BYTE byReserved[512];                
} NET_SMART_LOCK_REGISTER_INFO;
typedef struct tagNET_OUT_GET_SMART_LOCK_REGISTER_INFO
{
    DWORD dwSize;                                                           
    int nTotalCount;                                                        
    int nReturnCount;                                                       
    NET_SMART_LOCK_REGISTER_INFO stuRegisterInfo[MAX_NUMBER_REGISTER_INFO]; 
} NET_OUT_GET_SMART_LOCK_REGISTER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSmartLockRegisterInfo(LLONG lLoginID, const NET_IN_GET_SMART_LOCK_REGISTER_INFO* pstInParam, NET_OUT_GET_SMART_LOCK_REGISTER_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_SMARTLOCK_CARDINFO
{
    NET_ACCESS_METHOD emType;          
    int nIndex;                        
    char szCardNo[32];                 
    NET_ACCESSCTLCARD_TYPE emCardType; 
    char szReserve[512];               
} NET_SMARTLOCK_CARDINFO;
typedef struct tagNET_SMARTLOCK_PWDINFO
{
    NET_ACCESS_METHOD emType; 
    int nIndex;               
    char szPassword[32];      
    UINT dwUseTime;           
    char szReserve[512];      
} NET_SMARTLOCK_PWDINFO;
typedef struct tagNET_SMARTLOCK_FPINFO
{
    NET_ACCESS_METHOD emType; 
    int nIndex;               
    int nFingerprintLen;      
    char* pFingerprintData;   
    char szReserve[512];      
} NET_SMARTLOCK_FPINFO;
typedef struct tagNET_IN_SMARTLOCK_UPDATE_USER_INFO
{
    DWORD dwSize;                               
    char szSerialNumber[32];                    
    char szCredentialHolder[16];                
    char szUserName[32];                        
    NET_TIME stuStartTime;                      
    NET_TIME stuEndTime;                        
    char szReserve[512];                        
    int nCardInfoNum;                           
    NET_SMARTLOCK_CARDINFO stuCardInfo[4];      
    int nPwdInfoNum;                            
    NET_SMARTLOCK_PWDINFO stuPwdInfo[4];        
    int nFingerPrintInfoNum;                    
    NET_SMARTLOCK_FPINFO stuFingerPrintInfo[4]; 
    int nTaskID;                                
} NET_IN_SMARTLOCK_UPDATE_USER_INFO;
typedef struct tagNET_OUT_SMARTLOCK_UPDATE_USER_INFO
{
    DWORD dwSize; 
} NET_OUT_SMARTLOCK_UPDATE_USER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpdateSmartLockUser(LLONG lLoginID, const NET_IN_SMARTLOCK_UPDATE_USER_INFO* pstInParam, NET_OUT_SMARTLOCK_UPDATE_USER_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SMARTLOCK_REMOVE_USER_INFO
{
    DWORD dwSize;                
    char szSerialNumber[32];     
    char szCredentialHolder[16]; 
    NET_ACCESS_METHOD emType;    
    int nIndex;                  
    int nTaskID;                 
} NET_IN_SMARTLOCK_REMOVE_USER_INFO;
typedef struct tagNET_OUT_SMARTLOCK_REMOVE_USER_INFO
{
    DWORD dwSize; 
} NET_OUT_SMARTLOCK_REMOVE_USER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveSmartLockUser(LLONG lLoginID, const NET_IN_SMARTLOCK_REMOVE_USER_INFO* pstInParam, NET_OUT_SMARTLOCK_REMOVE_USER_INFO* pstOutParam, int nWaitTime);
typedef struct tagMATRIX_CAMERA_USERS_INFO
{
    unsigned int nChannel;          
    char szUser[MAX_USER_NAME_LEN]; 
    char szPwd[MAX_PWD_LEN];        
    char szReserve[512];            
} MATRIX_CAMERA_USERS_INFO;
typedef struct tagNET_IN_MATRIX_GET_CAMERA_USERS
{
    DWORD dwSize;               
    unsigned int nStartChannel; 
    unsigned int nChannelCount; 
} NET_IN_MATRIX_GET_CAMERA_USERS;
typedef struct tagNET_OUT_MATRIX_GET_CAMERA_USERS
{
    DWORD dwSize;                           
    MATRIX_CAMERA_USERS_INFO* pstuUserInfo; 
    unsigned int nChannelCountRet;          
} NET_OUT_MATRIX_GET_CAMERA_USERS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MatrixGetCameraUsers(LLONG lLoginID, const NET_IN_MATRIX_GET_CAMERA_USERS* pInParam, NET_OUT_MATRIX_GET_CAMERA_USERS* pOutParam, DWORD dwWaitTime);
typedef struct tagNET_MPT_STATUS
{
    EM_MPT_STATE eState;                      
    char szSerialNumber[DH_COMMON_STRING_32]; 
    BYTE byReserved[256];                     
} NET_MPT_STATUS;
typedef struct tagNET_IN_GET_MPT_STATUS
{
    DWORD dwSize; 
    UINT nOffset; 
    UINT nCount;  
} NET_IN_GET_MPT_STATUS;
#define MAX_MPT_STATUS_NUM (64) 
typedef struct tagNET_OUT_GET_MPT_STATUS
{
    DWORD dwSize;                                 
    UINT nTotalUsbNum;                            
    UINT nStatusNum;                              
    NET_MPT_STATUS stuStatus[MAX_MPT_STATUS_NUM]; 
} NET_OUT_GET_MPT_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMPTStatus(LLONG lLoginID, const NET_IN_GET_MPT_STATUS* pstInParam, NET_OUT_GET_MPT_STATUS* pstOutParam, DWORD dwWaitTime);
typedef enum tagEM_MPTSTATUS_TYPE
{
    EM_MPTSTATUS_UNKNOWN,    
    EM_MPTSTATUS_MPTBASE,    
    EM_MPTSTATUS_EXTCAMERA,  
    EM_MPTSTATUS_NETCONNECT, 
} EM_MPTSTATUS_TYPE;
typedef enum tagNEM_MPTBASE_TYPE
{
    NEM_MPTBASE_UNKNOWN, 
    NEM_MPTBASE_ON,      
    NEM_MPTBASE_OFF,     
} NEM_MPTBASE_TYPE;
typedef enum tagEM_EXTCAMERA_TYPE
{
    EM_EXTCAMERA_UNKNOWN,  
    EM_EXTCAMERA_NORMAL,   
    EM_EXTCAMERA_ABNORMAL, 
} EM_EXTCAMERA_TYPE;
typedef enum tagEM_NETCONNECT_TYPE
{
    EM_NETCONNECT_UNKNOWN, 
    EM_NETCONNECT_WIFI,    
    EM_NETCONNECT_MOBILE,  
    EM_NETCONNECT_CABLE,   
    EM_NETCONNECT_MPTBASE, 
} EM_NETCONNECT_TYPE;
typedef struct tagNET_MPTBASE_STATUS_INFO
{
    DWORD dwSize;               
    NEM_MPTBASE_TYPE emMptBase; 
} NET_MPTBASE_STATUS_INFO;
typedef struct tagNET_EXTCAMERA_STATUS_INFO
{
    DWORD dwSize;                  
    EM_EXTCAMERA_TYPE emExtCamera; 
} NET_EXTCAMERA_STATUS_INFO;
typedef struct tagNET_NETCONNECT_STATUS_INFO
{
    DWORD dwSize;                    
    EM_NETCONNECT_TYPE emNetConnect; 
} NET_NETCONNECT_STATUS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryMPTStatus(LLONG lLoginID, const EM_MPTSTATUS_TYPE emStatusType, void* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_GET_POSITIONMANAGER_STATUS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_POSITIONMANAGER_STATUS;
typedef struct tagNET_OUT_GET_POSITIONMANAGER_STATUS
{
    DWORD dwSize;                         
    NET_GPS_STATUS_INFO stuGPSStatusInfo; 
} NET_OUT_GET_POSITIONMANAGER_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPositionManagerStatus(LLONG lLoginID, const NET_IN_GET_POSITIONMANAGER_STATUS* pstuInParam, NET_OUT_GET_POSITIONMANAGER_STATUS* pstuOutParam, DWORD dwWaitTime);
#define MAX_POLICE_ID_NUM 32 
typedef struct tagNET_WRITE_POLICE_ID_INFO
{
    int nUsbSlot;                                            
    int nPoliceIDCount;                                      
    char szPoliceID[MAX_POLICE_ID_NUM][DH_COMMON_STRING_32]; 
    BYTE byReserved[512];                                    
} NET_WRITE_POLICE_ID_INFO;
#define MAX_POLICE_ID_INFO_NUM 64 
typedef struct tagNET_IN_WRITE_POLICE_ID
{
    DWORD dwSize;                                               
    int nIDInfoNum;                                             
    NET_WRITE_POLICE_ID_INFO stuIDInfo[MAX_POLICE_ID_INFO_NUM]; 
} NET_IN_WRITE_POLICE_ID;
typedef struct tagNET_OUT_WRITE_POLICE_ID
{
    DWORD dwSize;                         
    int nResultCount;                     
    BOOL bResult[MAX_POLICE_ID_INFO_NUM]; 
} NET_OUT_WRITE_POLICE_ID;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WritePoliceID(LLONG lLoginID, const NET_IN_WRITE_POLICE_ID* pstInParam, NET_OUT_WRITE_POLICE_ID* pstOutParam, DWORD dwWaitTime);
#define MAX_MPT_MEDIA_TYPE_NUM 64 
typedef enum tagNET_EM_HORIZONTAL_ROTATION_GROUP_LIMITMODE_TYPE
{
    NET_EM_HORIZONTAL_ROTATION_GROUP_LIMITMODE_TYPE_UNKNOWN, 
    NET_EM_HORIZONTAL_ROTATION_GROUP_LIMITMODE_TYPE_LEFT,    
    NET_EM_HORIZONTAL_ROTATION_GROUP_LIMITMODE_TYPE_RIGHT,   
    NET_EM_HORIZONTAL_ROTATION_GROUP_LIMITMODE_TYPE_UP,      
    NET_EM_HORIZONTAL_ROTATION_GROUP_LIMITMODE_TYPE_DOWN,    
} NET_EM_HORIZONTAL_ROTATION_GROUP_LIMITMODE_TYPE;
typedef struct tagNET_IN_MARK_MPT_RECORD_FILE
{
    DWORD dwSize;                           
    int nChannelID;                         
    NET_TIME stuStartTime;                  
    NET_TIME stuEndTime;                    
    int nMediaTypeCount;                    
    int nMediaType[MAX_MPT_MEDIA_TYPE_NUM]; 
    int nCrimeType;                         
    int nCrimeTag;                          
    char szComment[DH_COMMON_STRING_256];   
} NET_IN_MARK_MPT_RECORD_FILE;
typedef struct tagNET_OUT_MARK_MPT_RECORD_FILE
{
    DWORD dwSize; 
} NET_OUT_MARK_MPT_RECORD_FILE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MarkMPTRecordFile(LLONG lLoginID, const NET_IN_MARK_MPT_RECORD_FILE* pstInParam, NET_OUT_MARK_MPT_RECORD_FILE* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_QUERY_DIAGNOSIS_INFO
{
    DWORD dwSize; 
    UINT nOffset; 
    UINT nCount;  
} NET_IN_QUERY_DIAGNOSIS_INFO;
typedef struct tagNET_DIAGNOSIS_ITEM_INFO
{
    NET_TIME stuOccurTime; 
    UINT nFaultCode;       
    BYTE byReserved[256];  
} NET_DIAGNOSIS_ITEM_INFO;
typedef struct tagNET_OUT_QUERY_DIAGNOSIS_INFO
{
    DWORD dwSize;                          
    UINT nTotalCount;                      
    NET_DIAGNOSIS_ITEM_INFO* pstuItemInfo; 
    UINT nMaxCount;                        
    UINT nRetCount;                        
} NET_OUT_QUERY_DIAGNOSIS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryDiagnosisInfo(LLONG lLoginID, const NET_IN_QUERY_DIAGNOSIS_INFO* pstInParam, NET_OUT_QUERY_DIAGNOSIS_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_RESET_SYSTEM
{
    DWORD dwSize;
} NET_IN_RESET_SYSTEM;
typedef struct tagNET_OUT_RESET_SYSTEM
{
    DWORD dwSize;
} NET_OUT_RESET_SYSTEM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResetSystem(LLONG lLoginID, const NET_IN_RESET_SYSTEM* pstInParam, NET_OUT_RESET_SYSTEM* pstOutParam, int nWaitTime);
#define MAX_IMSI_LEN 32  
#define MAX_ICCID_LEN 32 
typedef enum tagEM_WIRELESS_MODE
{
    EM_WIRELESS_UNKNOWN,
    EM_WIRELESS_3G,
    EM_WIRELESS_3G1,
    EM_WIRELESS_3G2,
    EM_WIRELESS_3G3,
} EM_WIRELESS_MODE;
typedef struct tagNET_IN_GET_IMSI
{
    DWORD dwSize;
    EM_WIRELESS_MODE emMode; 
} NET_IN_GET_IMSI;
typedef struct tagNET_OUT_GET_IMSI
{
    DWORD dwSize;
    char szIMSI[MAX_IMSI_LEN];   
    char szICCID[MAX_ICCID_LEN]; 
} NET_OUT_GET_IMSI;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MobileGetIMSI(LLONG lLoginID, const NET_IN_GET_IMSI* pstInParam, NET_OUT_GET_IMSI* pstOutParam, int nWaitTime); 
typedef struct tagNET_IN_SIMINFO_GET_IMSI
{
    DWORD dwSize;            
    EM_WIRELESS_MODE emMode; 
} NET_IN_SIMINFO_GET_IMSI;
typedef struct tagNET_OUT_SIMINFO_GET_IMSI
{
    DWORD dwSize;                
    char szIMSI[MAX_IMSI_LEN];   
    char szICCID[MAX_ICCID_LEN]; 
} NET_OUT_SIMINFO_GET_IMSI;
typedef enum tagEM_SIMSTATE_MODE
{
    EM_SIMSTATE_UNKNOWN, 
    EM_SIMSTATE_UNEXIST, 
    EM_SIMSTATE_EXIST,   
    EM_SIMSTATE_UNMATCH, 
    EM_SIMSTATE_PINLOCK, 
    EM_SIMSTATE_PUKLOCK, 
} EM_SIMSTATE_MODE;
typedef struct tagNET_IN_SIMINFO_GET_SIM_STATE
{
    DWORD dwSize;            
    EM_WIRELESS_MODE emMode; 
} NET_IN_SIMINFO_GET_SIMSTATE;
typedef struct tagNET_OUT_SIMINFO_GET_SIM_STATE
{
    DWORD dwSize;            
    EM_SIMSTATE_MODE emMode; 
} NET_OUT_SIMINFO_GET_SIMSTATE;
typedef enum tagEM_SIMINFO_TYPE
{
    EM_SIMINFO_TYPE_GET_IMSI,     
    EM_SIMINFO_TYPE_GET_SIMState, 
} EM_SIMINFO_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMobileSIMInfo(LLONG lLoginID, EM_SIMINFO_TYPE emType, void* pInParam, void* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_MOBILE_MODULE_STATE
{
    DWORD dwSize;
    EM_WIRELESS_MODE emMode; 
} NET_IN_GET_MOBILE_MODULE_STATE;
typedef enum tagEM_MOBILE_MODULE_STATE
{
    EM_MOBILE_MODULE_STATE_UNKNOWN = -1, 
    EM_MOBILE_MODULE_STATE_OFF,          
    EM_MOBILE_MODULE_STATE_STARTING,     
    EM_MOBILE_MODULE_STATE_STARTED,      
    EM_MOBILE_MODULE_STATE_WORKING,      
} EM_MOBILE_MODULE_STATE;
typedef struct tagNET_OUT_GET_MOBILE_MODULE_STATE
{
    DWORD dwSize;
    EM_MOBILE_MODULE_STATE emState; 
} NET_OUT_GET_MOBILE_MODULE_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMobileModuleState(LLONG lLoginID, const NET_IN_GET_MOBILE_MODULE_STATE* pInParam, NET_OUT_GET_MOBILE_MODULE_STATE* pOutParam, int nWaitTime);
typedef enum tagEM_RPC_NETAPP_TYPE
{
    EM_RPC_NETAPP_TYPE_GET_NET_RESOURCE_STAT, 
    EM_RPC_NETAPP_TYPE_GET_MOBILE_RSSI,       
    EM_PRC_NETAPP_TYPE_GET_MOBILE_INTERFACE,  
    EM_PRC_NETAPP_TYPE_GET_DIAL_INFO,         
} EM_RPC_NETAPP_TYPE;
typedef struct tagNET_IN_NETAPP_GET_NET_RESOURCE_STAT
{
    DWORD dwSize;
} NET_IN_NETAPP_GET_NET_RESOURCE_STAT;
typedef struct tagNET_OUT_NETAPP_GET_NET_RESOURCE_STAT
{
    DWORD dwSize;
    int nIPChanneIn;            
    int nNetRemain;             
    int nNetCapability;         
    int nRemotePreview;         
    int nRemotePlayAndDownload; 
    int nRemoteSendRemain;      
    int nRemoteSendCapability;  
} NET_OUT_NETAPP_GET_NET_RESOURCE_STAT;
typedef struct tagNET_IN_NETAPP_GET_MOBILE_INTERFACE
{
    DWORD dwSize;
} NET_IN_NETAPP_GET_MOBILE_INTERFACE;
typedef struct tagNET_OUT_NETAPP_GET_MOBILE_INTERFACE
{
    DWORD dwSize;
    int nInterfaceNum;                        
    DHDEV_NETINTERFACE_INFO stuInterface[64]; 
} NET_OUT_NETAPP_GET_MOBILE_INTERFACE;
typedef struct tagNET_IN_NETAPP_GET_MOBILE_RSSI
{
    DWORD dwSize;
    EM_WIRELESS_MODE emName; 
} NET_IN_NETAPP_GET_MOBILE_RSSI;
typedef struct tagNET_OUT_NETAPP_GET_MOBILE_RSSI
{
    DWORD dwSize;
    EM_WIRELESS_WORK_MODE emWorkMode; 
    int nTDSCDMA;                     
    int nWCDMA;                       
    int nCDMA1x;                      
    int nEDGE;                        
    int nEVDO;                        
    int nTDLTE;                       
    int nFDDLTE;                      
    int nNR;                          
} NET_OUT_NETAPP_GET_MOBILE_RSSI;
typedef enum tagEM_DIAL_INTERFACE
{
    EM_DIAL_INTERFACE_UNKNOWN, 
    EM_DIAL_INTERFACE_ETH0,    
    EM_DIAL_INTERFACE_ETH2,    
    EM_DIAL_INTERFACE_3G,      
} EM_DIAL_INTERFACE;
typedef struct tagNET_IN_NETAPP_GET_DIAL_INFO
{
    DWORD dwSize;
    EM_DIAL_INTERFACE emName; 
} NET_IN_NETAPP_GET_DIAL_INFO;
typedef struct tagNET_OUT_NETAPP_GET_DIAL_INFO
{
    DWORD dwSize;
    char szIP[48];                      
    char szSubnetMask[40];              
    char szDefaultGateway[40];          
    char szDnsServers[2][40];           
    char szIPv6Address[48];             
    char szIPv6DefaultGateway[40];      
    UINT nIPv6Prefix;                   
    char szIPv6DnsServers[2][40];       
    char szIPv6LinkLocalAddress[48];    
    char szVendor[64];                  
    EM_NET_NETWORK_CARD_TYPE emNetwork; 
    int nState;                         
} NET_OUT_NETAPP_GET_DIAL_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RPC_NetApp(LLONG lLoginID, EM_RPC_NETAPP_TYPE emType, const void* pstuIn, void* pstuOut, int nWaitTime = 1000);
#define MAX_ROOMNUM_COUNT 32 
#define MAX_FACE_COUTN 20    
typedef struct tagNET_FACE_RECORD_INFO
{
    char szUserName[MAX_USER_NAME_LEN];                    
    int nRoom;                                             
    char szRoomNo[MAX_ROOMNUM_COUNT][DH_COMMON_STRING_16]; 
    int nFaceData;                                         
    char szFaceData[MAX_FACE_COUTN][MAX_FACE_DATA_LEN];    
    int nFaceDataLen[MAX_FACE_COUTN];                      
    int nFacePhoto;                                        
    int nFacePhotoLen[MAX_PHOTO_COUNT];                    
    char* pszFacePhoto[MAX_PHOTO_COUNT];                   
    BOOL bValidDate;                                       
    NET_TIME stuValidDateStart;                            
    NET_TIME stuValidDateEnd;                              
    int nValidCounts;                                      
    BOOL bValidCountsEnable;                               
    BOOL bFaceDataExEnable;                                
    char* pszFaceDataEx[MAX_FACE_COUTN];                   
    BYTE byReserved[240];                                  
} NET_FACE_RECORD_INFO;
typedef struct tagNET_IN_ADD_FACE_INFO
{
    DWORD dwSize;
    char szUserID[DH_MAX_USERID_LEN]; 
    NET_FACE_RECORD_INFO stuFaceInfo; 
} NET_IN_ADD_FACE_INFO;
typedef struct tagNET_OUT_ADD_FACE_INFO
{
    DWORD dwSize;
} NET_OUT_ADD_FACE_INFO;
typedef struct tagNET_IN_GET_FACE_INFO
{
    DWORD dwSize;
    char szUserID[DH_MAX_USERID_LEN]; 
} NET_IN_GET_FACE_INFO;
typedef struct tagNET_OUT_GET_FACE_INFO
{
    DWORD dwSize;
    int nFaceData;                                      
    char szFaceData[MAX_FACE_COUTN][MAX_FACE_DATA_LEN]; 
    int nPhotoData;                                     
    int nInPhotoDataLen[MAX_PHOTO_COUNT];               
    int nOutPhotoDataLen[MAX_PHOTO_COUNT];              
    char* pPhotoData[MAX_PHOTO_COUNT];                  
} NET_OUT_GET_FACE_INFO;
typedef struct tagNET_IN_UPDATE_FACE_INFO
{
    DWORD dwSize;
    char szUserID[DH_MAX_USERID_LEN]; 
    NET_FACE_RECORD_INFO stuFaceInfo; 
} NET_IN_UPDATE_FACE_INFO;
typedef struct tagNET_OUT_UPDATE_FACE_INFO
{
    DWORD dwSize;
} NET_OUT_UPDATE_FACE_INFO;
typedef struct tagNET_IN_REMOVE_FACE_INFO
{
    DWORD dwSize;
    char szUserID[DH_MAX_USERID_LEN]; 
} NET_IN_REMOVE_FACE_INFO;
typedef struct tagNET_OUT_REMOVE_FACE_INFO
{
    DWORD dwSize;
} NET_OUT_REMOVE_FACE_INFO;
typedef struct tagNET_IN_CLEAR_FACE_INFO
{
    DWORD dwSize;
} NET_IN_CLEAR_FACE_INFO;
typedef struct tagNET_OUT_CLEAR_FACE_INFO
{
    DWORD dwSize;
} NET_OUT_CLEAR_FACE_INFO;
typedef struct tagNET_IN_GETFACEEIGEN_INFO
{
    DWORD dwSize;
    int nPhotoDataLen;  
    char* pszPhotoData; 
} NET_IN_GETFACEEIGEN_INFO;
typedef struct tagNET_OUT_GETFACEEIGEN_INFO
{
    DWORD dwSize;
    int nInFaceEigenLen;  
    int nOutFaceEigenLen; 
    char* pszFaceEigen;   
} NET_OUT_GETFACEEIGEN_INFO;
typedef enum tagEM_FACEINFO_OPREATE_TYPE
{
    EM_FACEINFO_OPREATE_ADD,          
    EM_FACEINFO_OPREATE_GET,          
    EM_FACEINFO_OPREATE_UPDATE,       
    EM_FACEINFO_OPREATE_REMOVE,       
    EM_FACEINFO_OPREATE_CLEAR,        
    EM_FACEINFO_OPREATE_GETFACEEIGEN, 
} EM_FACEINFO_OPREATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceInfoOpreate(LLONG lLoginID, EM_FACEINFO_OPREATE_TYPE emType, void* pInParam, void* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagFINGER_PRINT_INFO
{
    char szFingerprintData[2048]; 
    BYTE byReserved[1024];        
} FINGER_PRINT_INFO;
typedef struct tagCARD_INFO
{
    char szCardNo[64];    
    BYTE byReserved[512]; 
} CARD_INFO;
typedef struct tagNET_CITIZENIDENTTIFY_USER_INFO
{
    char szCitizenID[20];                    
    char szCitizen[30];                      
    EM_CITIZENIDCARD_SEX_TYPE emSexType;     
    EM_CITIZENIDCARD_EC_TYPE emECType;       
    char szBirth[12];                        
    char szAddress[108];                     
    char szValidStart[12];                   
    char szValidEnd[12];                     
    int nTime;                               
    int nFingerPrintInfoNum;                 
    FINGER_PRINT_INFO stuFingerprintInfo[8]; 
    int nCardInfoNum;                        
    CARD_INFO stuCardInfo[5];                
    int nFaceNum;                            
    int nPacketLen;                          
    int nFaceInfoNum;                        
    SCENE_IMAGE_INFO stuFaceInfo[4];         
    char szStudentNum[32];                   
    BYTE byReserved[2016];                   
} NET_CITIZENIDENTTIFY_USER_INFO;
typedef struct tagNET_IN_CITIZENIDENTTIFY_SERVICE_INSERT
{
    DWORD dwSize;                              
    int nInfoNum;                              
    NET_CITIZENIDENTTIFY_USER_INFO* pUserInfo; 
    int nFaceDataLen;                          
    char* pFaceData;                           
} NET_IN_CITIZENIDENTTIFY_SERVICE_INSERT;
typedef struct tagNET_OUT_CITIZENIDENTTIFY_SERVICE_INSERT
{
    DWORD dwSize;   
    int nMaxRetNum; 
} NET_OUT_CITIZENIDENTTIFY_SERVICE_INSERT;
typedef struct tagNET_IN_CITIZEN_IDENTIFY_MANAGER_REMOVE
{
    DWORD dwSize;              
    int nUserNum;              
    char szCitizenID[100][32]; 
} NET_IN_CITIZEN_IDENTIFY_MANAGER_REMOVE;
typedef struct tagNET_OUT_CITIZEN_IDENTIFY_MANAGER_REMOVE
{
    DWORD dwSize;   
    int nMaxRetNum; 
} NET_OUT_CITIZEN_IDENTIFY_MANAGER_REMOVE;
typedef struct tagNET_IN_CITIZEN_IDENTIFY_MANAGER_CLEAR
{
    DWORD dwSize; 
} NET_IN_CITIZEN_IDENTIFY_MANAGER_CLEAR;
typedef struct tagNET_OUT_CITIZEN_IDENTIFY_MANAGER_CLEAR
{
    DWORD dwSize; 
} NET_OUT_CITIZEN_IDENTIFY_MANAGER_CLEAR;
typedef struct tagNET_IN_CITIZEN_IDENTIFY_MANAGER_UPDATE
{
    DWORD dwSize;                              
    int nInfoNum;                              
    NET_CITIZENIDENTTIFY_USER_INFO* pUserInfo; 
    int nFaceDataLen;                          
    char* pFaceData;                           
} NET_IN_CITIZEN_IDENTIFY_MANAGER_UPDATE;
typedef struct tagNET_OUT_CITIZEN_IDENTIFY_MANAGER_UPDATE
{
    DWORD dwSize;   
    int nMaxRetNum; 
} NET_OUT_CITIZEN_IDENTIFY_MANAGER_UPDATE;
typedef enum tagNET_EM_CITIZENIDENTTIFY_OPREATE_TYPE
{
    NET_EM_CITIZENIDENTTIFY_SERVICE_INSERT = 0, 
    NET_EM_CITIZENIDENTTIFY_SERVICE_UPDATE,     
    NET_EM_CITIZENIDENTTIFY_SERVICE_REMOVE,     
    NET_EM_CITIZENIDENTTIFY_SERVICE_CLEAR,      
} NET_EM_CITIZENIDENTTIFY_OPREATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CitizenIdentifyService(LLONG lLoginID, NET_EM_CITIZENIDENTTIFY_OPREATE_TYPE emType, void* pInParam, void* pOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IN_COLLECTINFO_START_FIND
{
    DWORD dwSize;         
    char szCitizenID[20]; 
    int nTime;            
} NET_IN_COLLECTINFO_START_FIND;
typedef struct tagNET_OUT_COLLECTINFO_START_FIND
{
    DWORD dwSize;           
    int nTotal;             
    int nMaxSupportPerFind; 
} NET_OUT_COLLECTINFO_START_FIND;
typedef struct tagNET_IN_COLLECTINFO_DO_FIND
{
    DWORD dwSize; 
    int nStartNo; 
    int nCount;   
} NET_IN_COLLECTINFO_DO_FIND;
typedef struct tagNET_OUT_COLLECTINFO_DO_FIND
{
    DWORD dwSize;                                 
    int nRetNum;                                  
    NET_CITIZENIDENTTIFY_USER_INFO* pCollectInfo; 
    int nMaxNum;                                  
    int nBinDataMaxLen;                           
    int nBinDataRetLen;                           
    char* pBinData;                               
} NET_OUT_COLLECTINFO_DO_FIND;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindCollectInfo(LLONG lLoginID, NET_IN_COLLECTINFO_START_FIND* pstIn, NET_OUT_COLLECTINFO_START_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindCollectInfo(LLONG lFindHandle, NET_IN_COLLECTINFO_DO_FIND* pstIn, NET_OUT_COLLECTINFO_DO_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindCollectInfo(LLONG lFindHandle);
typedef struct tagNET_IN_CITIZENIDENTTIFY_GET_CUSTOM
{
    DWORD dwSize;          
    int nType;             
    char szCitizenID[32];  
    char szName[64];       
    char szRandomNum[256]; 
} NET_IN_CITIZENIDENTTIFY_GET_CUSTOM;
typedef struct tagNET_OUT_CITIZENIDENTTIFY_GET_CUSTOM
{
    DWORD dwSize;                  
    char szCitizenCheckData[2048]; 
} NET_OUT_CITIZENIDENTTIFY_GET_CUSTOM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CitizenIdentifyGetCustomData(LLONG lLoginID, NET_IN_CITIZENIDENTTIFY_GET_CUSTOM* pstIn, NET_OUT_CITIZENIDENTTIFY_GET_CUSTOM* pstOut, int nWaitTime);
typedef struct tagNET_IN_FACEINFO_START_FIND
{
    DWORD dwSize;
    char szUserID[DH_MAX_USERID_LEN]; 
} NET_IN_FACEINFO_START_FIND;
typedef struct tagNET_OUT_FACEINFO_START_FIND
{
    DWORD dwSize;
    UINT nTotalCount; 
} NET_OUT_FACEINFO_START_FIND;
typedef struct tagNET_IN_FACEINFO_DO_FIND
{
    DWORD dwSize;
    int nStartNo; 
    int nCount;   
} NET_IN_FACEINFO_DO_FIND;
typedef struct tagNET_FACEINFO
{
    char szUserID[DH_MAX_USERID_LEN];   
    int nMD5;                           
    char szMD5[5][DH_COMMON_STRING_64]; 
    int nEigenMD5;                      
    char szEigenMD5[5][64];             
    BYTE byReserved[188];
} NET_FACEINFO;
typedef struct tagNET_OUT_FACEINFO_DO_FIND
{
    DWORD dwSize;
    int nRetNum;            
    NET_FACEINFO* pstuInfo; 
    int nMaxNum;            
    BYTE byReserved[4];
} NET_OUT_FACEINFO_DO_FIND;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindFaceInfo(LLONG lLoginID, NET_IN_FACEINFO_START_FIND* pstIn, NET_OUT_FACEINFO_START_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindFaceInfo(LLONG lFindHandle, NET_IN_FACEINFO_DO_FIND* pstIn, NET_OUT_FACEINFO_DO_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindFaceInfo(LLONG lFindHandle);
typedef enum tagEM_TYPE_OF_CERTIFICATE
{
    EM_TYPE_OF_CERTIFICATE_UNKNOWN,            
    EM_TYPE_OF_CERTIFICATE_IDCARD,             
    EM_TYPE_OF_CERTIFICATE_HKMRPERMIT,         
    EM_TYPE_OF_CERTIFICATE_CHNPASSPORT,        
    EM_TYPE_OF_CERTIFICATE_FORPASSPORT,        
    EM_TYPE_OF_CERTIFICATE_PERRESIDENCE_PERMI, 
    EM_TYPE_OF_CERTIFICATE_OTHER = 9,          
} EM_TYPE_OF_CERTIFICATE;
typedef struct tagNET_ACCESS_USER_INFO_EX
{
    char szConsumptionTimeSections[42][34]; 
    BYTE byReserved[1024];                  
} NET_ACCESS_USER_INFO_EX;
typedef struct tagNET_MULTI_TIMESECTION_INFO
{
    int nDoor;                          
    int nTimeSectionNum;                
    UINT nTimeSectionList[128];         
    UINT nSpecialDaysScheduleList[128]; 
    int nSpecialDaysScheduleNum;        
    char szReserved[508];               
} NET_MULTI_TIMESECTION_INFO;
typedef struct tagNET_ACCESS_USER_INFO_EX2
{
    char szProjects[30][64];                             
    int nProjectNum;                                     
    int nMultiTimeSectionNum;                            
    NET_MULTI_TIMESECTION_INFO stuMultiTimeSection[128]; 
    char szReserved[2048];                               
} NET_ACCESS_USER_INFO_EX2;
typedef struct tagNET_ACCESS_USER_INFO
{
    char szUserID[DH_MAX_USERID_LEN];                          
    char szName[MAX_COMMON_STRING_32];                         
    NET_ENUM_USER_TYPE emUserType;                             
    UINT nUserStatus;                                          
    int nUserTime;                                             
    char szCitizenIDNo[MAX_COMMON_STRING_32];                  
    char szPsw[DH_MAX_CARDPWD_LEN];                            
    int nDoorNum;                                              
    int nDoors[DH_MAX_DOOR_NUM];                               
    int nTimeSectionNum;                                       
    int nTimeSectionNo[DH_MAX_TIMESECTION_NUM];                
    int nSpecialDaysScheduleNum;                               
    int nSpecialDaysSchedule[MAX_ACCESSDOOR_NUM];              
    NET_TIME stuValidBeginTime;                                
    NET_TIME stuValidEndTime;                                  
    BOOL bFirstEnter;                                          
    int nFirstEnterDoorsNum;                                   
    int nFirstEnterDoors[DH_MAX_DOOR_NUM];                     
    NET_ATTENDANCE_AUTHORITY emAuthority;                      
    int nRepeatEnterRouteTimeout;                              
    int nFloorNum;                                             
    char szFloorNo[MAX_ACCESS_FLOOR_NUM][DH_COMMON_STRING_16]; 
    int nRoom;                                                 
    char szRoomNo[MAX_ROOMNUM_COUNT][DH_COMMON_STRING_16];     
    BOOL bFloorNoExValid;                                      
    int nFloorNumEx;                                           
    char szFloorNoEx[256][4];                                  
    char szClassInfo[256];                                     
    char szStudentNo[64];                                      
    char szCitizenAddress[128];                                
    NET_TIME stuBirthDay;                                      
    NET_ACCESSCTLCARD_SEX emSex;                               
    char szDepartment[128];                                    
    char szSiteCode[32];                                       
    char szPhoneNumber[32];                                    
    char szDefaultFloor[8];                                    
    BOOL bFloorNoEx2Valid;                                     
    NET_FLOORS_INFO* pstuFloorsEx2;                            
    BOOL bHealthStatus;                                        
    int nUserTimeSectionsNum;                                  
    char szUserTimeSections[6][20];                            
    char szECType[64];                                         
    EM_TYPE_OF_CERTIFICATE emTypeOfCertificate;                
    char szCountryOrAreaCode[8];                               
    char szCountryOrAreaName[64];                              
    char szCertificateVersionNumber[64];                       
    char szApplicationAgencyCode[64];                          
    char szIssuingAuthority[64];                               
    char szStartTimeOfCertificateValidity[64];                 
    char szEndTimeOfCertificateValidity[64];                   
    int nSignNum;                                              
    char szActualResidentialAddr[108];                         
    char szWorkClass[256];                                     
    NET_TIME stuStartTimeInPeriodOfValidity;                   
    EM_TEST_ITEMS emTestItems;                                 
    BOOL bUseNameEx;                                           
    char szNameEx[128];                                        
    BOOL bUserInfoExValid;                                     
    NET_ACCESS_USER_INFO_EX* pstuUserInfoEx;                   
    UINT nAuthOverdueTime;                                     
    EM_GREENCNHEALTH_STATUS emGreenCNHealthStatus;             
    EM_ALLOW_PERMIT_FLAG emAllowPermitFlag;                    
    int nHolidayGroupIndex;                                    
    NET_TIME stuUpdateTime;                                    
    char szValidFroms[8][24];                                  
    int nValidFromsNum;                                        
    int nValidTosNum;                                          
    char szValidTos[8][24];                                    
    char szUserIDEx[128];                                      
    BOOL bUserIDEx;                                            
    int nFinancialUserType;                                    
    int nCustomUserType;                                       
    UINT nCustomUserTypeValue;                                 
    NET_TIME_EX stuAllowCheckInTime;           
    NET_TIME_EX stuAllowCheckOutTime;          
    NET_ACCESS_USER_INFO_EX2* pstuUserInfoEx2; 
    BOOL bUserInfoEx2Valid;                    
    BYTE byReserved[660 - 2 * POINTERSIZE];    
} NET_ACCESS_USER_INFO;
typedef struct tagNET_IN_ACCESS_USER_SERVICE_INSERT
{
    DWORD dwSize;                    
    int nInfoNum;                    
    NET_ACCESS_USER_INFO* pUserInfo; 
} NET_IN_ACCESS_USER_SERVICE_INSERT;
typedef enum tagNET_EM_FAILCODE
{
    NET_EM_FAILCODE_NOERROR,                              
    NET_EM_FAILCODE_UNKNOWN,                              
    NET_EM_FAILCODE_INVALID_PARAM,                        
    NET_EM_FAILCODE_INVALID_PASSWORD,                     
    NET_EM_FAILCODE_INVALID_FP,                           
    NET_EM_FAILCODE_INVALID_FACE,                         
    NET_EM_FAILCODE_INVALID_CARD,                         
    NET_EM_FAILCODE_INVALID_USER,                         
    NET_EM_FAILCODE_FAILED_GET_SUBSERVICE,                
    NET_EM_FAILCODE_FAILED_GET_METHOD,                    
    NET_EM_FAILCODE_FAILED_GET_SUBCAPS,                   
    NET_EM_FAILCODE_ERROR_INSERT_LIMIT,                   
    NET_EM_FAILCODE_ERROR_MAX_INSERT_RATE,                
    NET_EM_FAILCODE_FAILED_ERASE_FP,                      
    NET_EM_FAILCODE_FAILED_ERASE_FACE,                    
    NET_EM_FAILCODE_FAILED_ERASE_CARD,                    
    NET_EM_FAILCODE_NO_RECORD,                            
    NET_EM_FAILCODE_NOMORE_RECORD,                        
    NET_EM_FAILCODE_RECORD_ALREADY_EXISTS,                
    NET_EM_FAILCODE_MAX_FP_PERUSER,                       
    NET_EM_FAILCODE_MAX_CARD_PERUSER,                     
    NET_EM_FAILCODE_EXCEED_MAX_PHOTOSIZE,                 
    NET_EM_FAILCODE_INVALID_USERID,                       
    NET_EM_FAILCODE_EXTRACTFEATURE_FAIL,                  
    NET_EM_FAILCODE_PHOTO_EXIST,                          
    NET_EM_FAILCODE_PHOTO_OVERFLOW,                       
    NET_EM_FAILCODE_INVALID_PHOTO_FORMAT,                 
    NET_EM_FAILCODE_EXCEED_ADMINISTRATOR_LIMIT,           
    NET_EM_FAILECODE_FACE_FEATURE_ALREADY_EXIST,          
    NET_EM_FAILECODE_FINGERPRINT_EXIST,                   
    NET_EM_FAILECODE_CITIZENID_EXIST,                     
    NET_EM_FAILECODE_NORMAL_USER_NOTSUPPORT,              
    NET_EM_FAILCODE_NO_FACE_DETECTED,                     
    NET_EM_FAILCODE_MULTI_FACE_DETECTED,                  
    NET_EM_FAILCODE_PICTURE_DECODING_ERROR,               
    NET_EM_FAILCODE_LOW_PICTURE_QUALITY,                  
    NET_EM_FAILCODE_NOT_RECOMMENDED,                      
    NET_EM_FAILCODE_FACE_ANGLE_OVER_THRESHOLDS,           
    NET_EM_FAILCODE_FACE_RADIO_EXCEEDS_RANGE,             
    NET_EM_FAILCODE_FACE_OVER_EXPOSED,                    
    NET_EM_FAILCODE_FACE_UNDER_EXPOSED,                   
    NET_EM_FAILCODE_BRIGHTNESS_IMBALANCE,                 
    NET_EM_FAILCODE_FACE_LOWER_CONFIDENCE,                
    NET_EM_FAILCODE_FACE_LOW_ALIGN,                       
    NET_EM_FAILCODE_FRAGMENTARY_FACE_DETECTED,            
    NET_EM_FAILCODE_PUPIL_DISTANCE_NOT_ENOUGH,            
    NET_EM_FAILCODE_FACE_DATA_DOWNLOAD_FAILED,            
    NET_EM_FAILCODE_FACE_FFE_FAILED,                      
    NET_EM_FAILCODE_PHOTO_FEATURE_FAILED_FOR_FA,          
    NET_EM_FAILCODE_FACE_DATA_PHOTO_INCOMPLETE,           
    NET_EM_FAILCODE_DATABASE_ERROR_INSERT_OVERFLOW,       
    NET_EM_CARD_NOT_EXIST,                                
    NET_EM_FAILCODE_USER_EXIST,                           
    NET_EM_FAILCODE_CARD_NUM_EXIST,                       
    NET_EM_FAILCODE_FINGERPRINT_DOWNLOAD_FAIL,            
    NET_EM_FAILCODE_ACCOUNT_IN_USE,                       
    NET_EM_FAILCODE_IRIS_INFO_NOT_EXISTED,                
    NET_EM_FAILCODE_INVALID_IRIS_DATA,                    
    NET_EM_FAILCODE_IRIS_ALREADY_EXIST,                   
    NET_EM_FAILCODE_ERASE_IRIS_FAILED,                    
    NET_EM_FAILCODE_EXCEED_MAX_IRIS_GROUP_COUNT_PER_USER, 
    NET_EM_FAILCODE_EXCEED_MAX_IRIS_COUNT_PER_GROUP,      
} NET_EM_FAILCODE;
typedef struct tagNET_OUT_ACCESS_USER_SERVICE_INSERT
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_USER_SERVICE_INSERT;
typedef struct tagNET_IN_ACCESS_USER_SERVICE_GET
{
    DWORD dwSize;              
    int nUserNum;              
    char szUserID[100][32];    
    char szUserIDEx[100][128]; 
    BOOL bUserIDEx;            
} NET_IN_ACCESS_USER_SERVICE_GET;
typedef struct tagNET_OUT_ACCESS_USER_SERVICE_GET
{
    DWORD dwSize;                    
    int nMaxRetNum;                  
    NET_ACCESS_USER_INFO* pUserInfo; 
    NET_EM_FAILCODE* pFailCode;      
} NET_OUT_ACCESS_USER_SERVICE_GET;
typedef struct tagNET_IN_ACCESS_USER_SERVICE_REMOVE
{
    DWORD dwSize;              
    int nUserNum;              
    char szUserID[100][32];    
    char szUserIDEx[100][128]; 
    BOOL bUserIDEx;            
} NET_IN_ACCESS_USER_SERVICE_REMOVE;
typedef struct tagNET_OUT_ACCESS_USER_SERVICE_REMOVE
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_USER_SERVICE_REMOVE;
typedef struct tagNET_IN_ACCESS_USER_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_IN_ACCESS_USER_SERVICE_CLEAR;
typedef struct tagNET_OUT_ACCESS_USER_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_OUT_ACCESS_USER_SERVICE_CLEAR;
typedef enum tagNET_EM_ACCESS_CTL_USER_SERVICE
{
    NET_EM_ACCESS_CTL_USER_SERVICE_INSERT = 0, 
    NET_EM_ACCESS_CTL_USER_SERVICE_GET,        
    NET_EM_ACCESS_CTL_USER_SERVICE_REMOVE,     
    NET_EM_ACCESS_CTL_USER_SERVICE_CLEAR,      
} NET_EM_ACCESS_CTL_USER_SERVICE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateAccessUserService(LLONG lLoginID, NET_EM_ACCESS_CTL_USER_SERVICE emtype, void* pstInParam, void* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_USERINFO_START_FIND
{
    DWORD dwSize;                        
    char szUserID[MAX_COMMON_STRING_32]; 
} NET_IN_USERINFO_START_FIND;
typedef struct tagNET_OUT_USERINFO_START_FIND
{
    DWORD dwSize;    
    int nTotalCount; 
    int nCapNum;     
} NET_OUT_USERINFO_START_FIND;
typedef struct tagNET_IN_USERINFO_DO_FIND
{
    DWORD dwSize; 
    int nStartNo; 
    int nCount;   
} NET_IN_USERINFO_DO_FIND;
typedef struct tagNET_OUT_USERINFO_DO_FIND
{
    DWORD dwSize;                   
    int nRetNum;                    
    NET_ACCESS_USER_INFO* pstuInfo; 
    int nMaxNum;                    
    BYTE byReserved[4];
} NET_OUT_USERINFO_DO_FIND;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindUserInfo(LLONG lLoginID, NET_IN_USERINFO_START_FIND* pstIn, NET_OUT_USERINFO_START_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindUserInfo(LLONG lFindHandle, NET_IN_USERINFO_DO_FIND* pstIn, NET_OUT_USERINFO_DO_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindUserInfo(LLONG lFindHandle);
typedef struct tagNET_ACCESS_CARD_INFO
{
    char szCardNo[DH_MAX_CARDNO_LEN]; 
    char szUserID[DH_MAX_USERID_LEN]; 
    NET_ACCESSCTLCARD_TYPE emType;    
    char szDynamicCheckCode[16];      
    NET_TIME stuUpdateTime;           
    char szUserIDEx[128];             
    BOOL bUserIDEx;                   
    BYTE byReserved[3940];            
} NET_ACCESS_CARD_INFO;
typedef struct tagNET_IN_ACCESS_CARD_SERVICE_INSERT
{
    DWORD dwSize;                    
    int nInfoNum;                    
    NET_ACCESS_CARD_INFO* pCardInfo; 
} NET_IN_ACCESS_CARD_SERVICE_INSERT;
typedef struct tagNET_OUT_ACCESS_CARD_SERVICE_INSERT
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
    BYTE byReserved[4];
} NET_OUT_ACCESS_CARD_SERVICE_INSERT;
typedef struct tagNET_IN_ACCESS_CARD_SERVICE_GET
{
    DWORD dwSize;           
    int nCardNum;           
    char szCardNo[100][32]; 
} NET_IN_ACCESS_CARD_SERVICE_GET;
typedef struct tagNET_OUT_ACCESS_CARD_SERVICE_GET
{
    DWORD dwSize;                    
    int nMaxRetNum;                  
    NET_ACCESS_CARD_INFO* pCardInfo; 
    NET_EM_FAILCODE* pFailCode;      
} NET_OUT_ACCESS_CARD_SERVICE_GET;
typedef struct tagNET_IN_ACCESS_CARD_SERVICE_UPDATE
{
    DWORD dwSize;                    
    int nInfoNum;                    
    NET_ACCESS_CARD_INFO* pCardInfo; 
} NET_IN_ACCESS_CARD_SERVICE_UPDATE;
typedef struct tagNET_OUT_ACCESS_CARD_SERVICE_UPDATE
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
    BYTE byReserved[4];
} NET_OUT_ACCESS_CARD_SERVICE_UPDATE;
typedef struct tagNET_IN_ACCESS_CARD_SERVICE_REMOVE
{
    DWORD dwSize;           
    int nCardNum;           
    char szCardNo[100][32]; 
} NET_IN_ACCESS_CARD_SERVICE_REMOVE;
typedef struct tagNET_OUT_ACCESS_CARD_SERVICE_REMOVE
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
    BYTE byReserved[4];
} NET_OUT_ACCESS_CARD_SERVICE_REMOVE;
typedef struct tagNET_IN_ACCESS_CARD_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_IN_ACCESS_CARD_SERVICE_CLEAR;
typedef struct tagNET_OUT_ACCESS_CARD_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_OUT_ACCESS_CARD_SERVICE_CLEAR;
typedef enum tagNET_EM_ACCESS_CTL_CARD_SERVICE
{
    NET_EM_ACCESS_CTL_CARD_SERVICE_INSERT = 0, 
    NET_EM_ACCESS_CTL_CARD_SERVICE_GET,        
    NET_EM_ACCESS_CTL_CARD_SERVICE_UPDATE,     
    NET_EM_ACCESS_CTL_CARD_SERVICE_REMOVE,     
    NET_EM_ACCESS_CTL_CARD_SERVICE_CLEAR,      
} NET_EM_ACCESS_CTL_CARD_SERVICE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateAccessCardService(LLONG lLoginID, NET_EM_ACCESS_CTL_CARD_SERVICE emtype, void* pstInParam, void* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_CARDINFO_START_FIND
{
    DWORD dwSize;                  
    char szUserID[32];             
    char szCardNo[32];             
    NET_ACCESSCTLCARD_TYPE emType; 
} NET_IN_CARDINFO_START_FIND;
typedef struct tagNET_OUT_CARDINFO_START_FIND
{
    DWORD dwSize;    
    int nTotalCount; 
    int nCapNum;     
} NET_OUT_CARDINFO_START_FIND;
typedef struct tagNET_IN_CARDINFO_DO_FIND
{
    DWORD dwSize; 
    int nStartNo; 
    int nCount;   
} NET_IN_CARDINFO_DO_FIND;
typedef struct tagNET_OUT_CARDINFO_DO_FIND
{
    DWORD dwSize;                   
    int nRetNum;                    
    NET_ACCESS_CARD_INFO* pstuInfo; 
    int nMaxNum;                    
    BYTE byReserved[4];             
} NET_OUT_CARDINFO_DO_FIND;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindCardInfo(LLONG lLoginID, NET_IN_CARDINFO_START_FIND* pstIn, NET_OUT_CARDINFO_START_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindCardInfo(LLONG lFindHandle, NET_IN_CARDINFO_DO_FIND* pstIn, NET_OUT_CARDINFO_DO_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindCardInfo(LLONG lFindHandle);
typedef struct tagNET_ACCESS_FINGERPRINT_INFO
{
    char szUserID[DH_MAX_USERID_LEN]; 
    int nPacketLen;                   
    int nPacketNum;                   
    char* szFingerPrintInfo;          
    int nDuressIndex;                 
    char szUserIDEx[128];             
    BOOL bUserIDEx;                   
    BYTE byReserved[3964];            
} NET_ACCESS_FINGERPRINT_INFO;
typedef struct tagNET_IN_ACCESS_FINGERPRINT_SERVICE_INSERT
{
    DWORD dwSize;                                  
    int nFpNum;                                    
    NET_ACCESS_FINGERPRINT_INFO* pFingerPrintInfo; 
} NET_IN_ACCESS_FINGERPRINT_SERVICE_INSERT;
typedef struct tagNET_OUT_ACCESS_FINGERPRINT_SERVICE_INSERT
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_FINGERPRINT_SERVICE_INSERT;
typedef struct tagNET_IN_ACCESS_FINGERPRINT_SERVICE_UPDATE
{
    DWORD dwSize;                                  
    int nFpNum;                                    
    NET_ACCESS_FINGERPRINT_INFO* pFingerPrintInfo; 
} NET_IN_ACCESS_FINGERPRINT_SERVICE_UPDATE;
typedef struct tagNET_OUT_ACCESS_FINGERPRINT_SERVICE_UPDATE
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_FINGERPRINT_SERVICE_UPDATE;
typedef struct tagNET_IN_ACCESS_FINGERPRINT_SERVICE_GET
{
    DWORD dwSize;                     
    char szUserID[DH_MAX_USERID_LEN]; 
    char szUserIDEx[128];             
    BOOL bUserIDEx;                   
} NET_IN_ACCESS_FINGERPRINT_SERVICE_GET;
typedef struct tagNET_OUT_ACCESS_FINGERPRINT_SERVICE_GET
{
    DWORD dwSize;             
    int nRetFingerPrintCount; 
    int nSinglePacketLength;  
    int nDuressIndex;         
    int nMaxFingerDataLength; 
    int nRetFingerDataLength; 
    BYTE* pbyFingerData;      
    NET_TIME stuUpdateTime;   
} NET_OUT_ACCESS_FINGERPRINT_SERVICE_GET;
typedef struct tagNET_IN_ACCESS_FINGERPRINT_SERVICE_REMOVE
{
    DWORD dwSize;              
    int nUserNum;              
    char szUserID[100][32];    
    char szUserIDEx[100][128]; 
    BOOL bUserIDEx;            
} NET_IN_ACCESS_FINGERPRINT_SERVICE_REMOVE;
typedef struct tagNET_OUT_ACCESS_FINGERPRINT_SERVICE_REMOVE
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_FINGERPRINT_SERVICE_REMOVE;
typedef struct tagNET_IN_ACCESS_FINGERPRINT_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_IN_ACCESS_FINGERPRINT_SERVICE_CLEAR;
typedef struct tagNET_OUT_ACCESS_FINGERPRINT_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_OUT_ACCESS_FINGERPRINT_SERVICE_CLEAR;
typedef enum tagNET_EM_ACCESS_CTL_FINGERPRINT_SERVICE
{
    NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_INSERT = 0, 
    NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_GET,        
    NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_UPDATE,     
    NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_REMOVE,     
    NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE_CLEAR,      
} NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateAccessFingerprintService(LLONG lLoginID, NET_EM_ACCESS_CTL_FINGERPRINT_SERVICE emtype, void* pstInParam, void* pstOutParam, int nWaitTime);
typedef struct tagNET_ACCESS_FACE_INFO
{
    char szUserID[32];                       
    int nFaceData;                           
    char szFaceData[20][2048];               
    int nFaceDataLen[20];                    
    int nFacePhoto;                          
    int nInFacePhotoLen[5];                  
    int nOutFacePhotoLen[5];                 
    char* pFacePhoto[5];                     
    BOOL bFaceDataExEnable;                  
    int nMaxFaceDataLen[20];                 
    int nRetFaceDataLen[20];                 
    char* pFaceDataEx[20];                   
    NET_TIME stuUpdateTime;                  
    char szUserIDEx[128];                    
    BOOL bUserIDEx;                          
    int nEigenData;                          
    int nInEigenDataLen[5];                  
    int nOutEigenDataLen[5];                 
    char* pEigenData[5];                     
    BYTE byReserved[1600 - POINTERSIZE * 5]; 
} NET_ACCESS_FACE_INFO;
typedef struct tagNET_IN_ACCESS_FACE_SERVICE_INSERT
{
    DWORD dwSize;                    
    int nFaceInfoNum;                
    NET_ACCESS_FACE_INFO* pFaceInfo; 
} NET_IN_ACCESS_FACE_SERVICE_INSERT;
typedef struct tagNET_OUT_ACCESS_FACE_SERVICE_INSERT
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_FACE_SERVICE_INSERT;
typedef struct tagNET_IN_ACCESS_FACE_SERVICE_GET
{
    DWORD dwSize;              
    int nUserNum;              
    char szUserID[100][32];    
    char szUserIDEx[100][128]; 
    BOOL bUserIDEx;            
} NET_IN_ACCESS_FACE_SERVICE_GET;
typedef struct tagNET_OUT_ACCESS_FACE_SERVICE_GET
{
    DWORD dwSize;                    
    int nMaxRetNum;                  
    NET_ACCESS_FACE_INFO* pFaceInfo; 
    NET_EM_FAILCODE* pFailCode;      
} NET_OUT_ACCESS_FACE_SERVICE_GET;
typedef struct tagNET_IN_ACCESS_FACE_SERVICE_UPDATE
{
    DWORD dwSize;                    
    int nFaceInfoNum;                
    NET_ACCESS_FACE_INFO* pFaceInfo; 
} NET_IN_ACCESS_FACE_SERVICE_UPDATE;
typedef struct tagNET_OUT_ACCESS_FACE_SERVICE_UPDATE
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_FACE_SERVICE_UPDATE;
typedef struct tagNET_IN_ACCESS_FACE_SERVICE_REMOVE
{
    DWORD dwSize;              
    int nUserNum;              
    char szUserID[100][32];    
    char szUserIDEx[100][128]; 
    BOOL bUserIDEx;            
} NET_IN_ACCESS_FACE_SERVICE_REMOVE;
typedef struct tagNET_OUT_ACCESS_FACE_SERVICE_REMOVE
{
    DWORD dwSize;               
    int nMaxRetNum;             
    NET_EM_FAILCODE* pFailCode; 
} NET_OUT_ACCESS_FACE_SERVICE_REMOVE;
typedef struct tagNET_IN_ACCESS_FACE_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_IN_ACCESS_FACE_SERVICE_CLEAR;
typedef struct tagNET_OUT_ACCESS_FACE_SERVICE_CLEAR
{
    DWORD dwSize; 
} NET_OUT_ACCESS_FACE_SERVICE_CLEAR;
typedef enum tagNET_EM_ACCESS_CTL_FACE_SERVICE
{
    NET_EM_ACCESS_CTL_FACE_SERVICE_INSERT = 0, 
    NET_EM_ACCESS_CTL_FACE_SERVICE_GET,        
    NET_EM_ACCESS_CTL_FACE_SERVICE_UPDATE,     
    NET_EM_ACCESS_CTL_FACE_SERVICE_REMOVE,     
    NET_EM_ACCESS_CTL_FACE_SERVICE_CLEAR,      
} NET_EM_ACCESS_CTL_FACE_SERVICE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateAccessFaceService(LLONG lLoginID, NET_EM_ACCESS_CTL_FACE_SERVICE emtype, void* pstInParam, void* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_ACCESS_FACEINFO_START_FIND
{
    DWORD dwSize;      
    char szUserID[32]; 
} NET_IN_ACCESS_FACEINFO_START_FIND;
typedef struct tagNET_OUT_ACCESS_FACEINFO_START_FIND
{
    DWORD dwSize;    
    int nCapNum;     
    int nTotalCount; 
} NET_OUT_ACCESS_FACEINFO_START_FIND;
typedef struct tagNET_IN_ACCESS_FACEINFO_DO_FIND
{
    DWORD dwSize; 
    int nStartNo; 
    int nCount;   
} NET_IN_ACCESS_FACEINFO_DO_FIND;
typedef struct tagNET_OUT_ACCESS_FACEINFO_DO_FIND
{
    DWORD dwSize;           
    int nRetNum;            
    NET_FACEINFO* pstuInfo; 
    int nMaxNum;            
    BYTE byReserved[4];
} NET_OUT_ACCESS_FACEINFO_DO_FIND;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AccessStartFindFaceInfo(LLONG lLoginID, NET_IN_ACCESS_FACEINFO_START_FIND* pstIn, NET_OUT_ACCESS_FACEINFO_START_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AccessDoFindFaceInfo(LLONG lFindHandle, NET_IN_ACCESS_FACEINFO_DO_FIND* pstIn, NET_OUT_ACCESS_FACEINFO_DO_FIND* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AccessStopFindFaceInfo(LLONG lFindHandle);
typedef struct tagNET_USER_PARTNER_INFO
{
    char szUserID[32];                      
    BYTE byReserved[4];                     
    int nCompanionInfo;                     
    NET_COMPANION_INFO stuCompanionInfo[6]; 
    BYTE byReserved1[256];                  
} NET_USER_PARTNER_INFO;
typedef struct tagNET_IN_REFRESH_USER_PARTNER_INFO
{
    DWORD dwSize;
    int nUserPartner;                       
    NET_USER_PARTNER_INFO* pstuUserPartner; 
} NET_IN_REFRESH_USER_PARTNER_INFO;
typedef struct tagNET_OUT_REFRESH_USER_PARTNER_INFO
{
    DWORD dwSize;
} NET_OUT_REFRESH_USER_PARTNER_INFO;
typedef struct tagNET_IN_LIST_USER_PARTNER_INFO
{
    DWORD dwSize;
    int nCntUserID;         
    char szUserID[100][32]; 
} NET_IN_LIST_USER_PARTNER_INFO;
typedef struct tagNET_OUT_LIST_USER_PARTNER_INFO
{
    DWORD dwSize;
    int nUserPartner;                       
    NET_USER_PARTNER_INFO* pstuUserPartner; 
    int nRetUserPartner;                    
    BYTE byReserved[4];                     
} NET_OUT_LIST_USER_PARTNER_INFO;
typedef struct tagNET_IN_DEL_USER_PARTNER_INFO
{
    DWORD dwSize;
    int nCntUserID;         
    char szUserID[100][32]; 
} NET_IN_DEL_USER_PARTNER_INFO;
typedef struct tagNET_OUT_DEL_USER_PARTNER_INFO
{
    DWORD dwSize;
} NET_OUT_DEL_USER_PARTNER_INFO;
typedef enum tagNET_EM_OPERATE_USER_PARTNER
{
    NET_EM_OPERATE_USER_PARTNER_UNKNOWN, 
    NET_EM_OPERATE_USER_PARTNER_REFRESH, 
    NET_EM_OPERATE_USER_PARTNER_LIST,    
    NET_EM_OPERATE_USER_PARTNER_DEL,     
} NET_EM_OPERATE_USER_PARTNER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateAccessUserPartner(LLONG lLoginID, NET_EM_OPERATE_USER_PARTNER emtype, const void* pstIn, void* pstOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RenderPrivateData(LLONG lPlayHandle, BOOL bTrue);
typedef struct tagNET_IN_ATTENDANCE_GETDEVSTATE
{
    DWORD dwSize;
} NET_IN_ATTENDANCE_GETDEVSTATE;
typedef struct tagNET_OUT_ATTENDANCE_GETDEVSTATE
{
    DWORD dwSize;
    int nState; 
} NET_OUT_ATTENDANCE_GETDEVSTATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Attendance_GetDevState(LLONG lLoginID, const NET_IN_ATTENDANCE_GETDEVSTATE* pstuInParam, NET_OUT_ATTENDANCE_GETDEVSTATE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DEV_SELF_TEST
{
    DWORD dwSize;       
    UINT nSelfTestItem; 
} NET_IN_GET_DEV_SELF_TEST;
typedef struct tagNET_OUT_GET_DEV_SELF_TEST
{
    DWORD dwSize;         
    UINT nSelfTestResult; 
} NET_OUT_GET_DEV_SELF_TEST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevSelfTest(LLONG lLoginID, const NET_IN_GET_DEV_SELF_TEST* pstInParam, NET_OUT_GET_DEV_SELF_TEST* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_UPGRADER_SETURL
{
    DWORD dwSize;                          
    char szUrl[DH_COMMON_STRING_256];      
    UINT nCheckType;                       
    char szCheckSum[DH_COMMON_STRING_128]; 
    int nSpareUrl;                         
    char szSpareUrl[4][256];               
} NET_IN_UPGRADER_SETURL;
typedef struct tagNET_OUT_UPGRADER_SETURL
{
    DWORD dwSize; 
} NET_OUT_UPGRADER_SETURL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Upgrader_SetUrl(LLONG lLoginID, NET_IN_UPGRADER_SETURL* pInParam, NET_OUT_UPGRADER_SETURL* pOutParam, int nWaitTime);
typedef struct tagNET_XRAY_PACK_CONDITION
{
    NET_TIME_EX stuStartTime; 
    NET_TIME_EX stuEndTime;   
    BYTE byReserved[1024];    
} NET_XRAY_PACK_CONDITION;
typedef struct tagNET_IN_XRAY_GETPACKTOTALINFO
{
    DWORD dwSize;                          
    int nChannelNum;                       
    int nChannelsID[MAX_XRAY_CHANNEL_NUM]; 
    NET_XRAY_PACK_CONDITION stuCondition;  
} NET_IN_XRAY_GETPACKTOTALINFO;
typedef struct tagNET_GRADE_PACK_NUM_INFO
{
    unsigned int nNormalPackNum; 
    unsigned int nWarnPackNum;   
    unsigned int nDangerPackNum; 
    BYTE byReserved[20];         
} NET_GRADE_PACK_NUM_INFO;
typedef struct tagNET_PACK_TYPE_NUM_INFO
{
    unsigned int nUnknownNum;            
    unsigned int nKnifeNum;              
    unsigned int nBottleLiquidNum;       
    unsigned int nGunNum;                
    unsigned int nUmbrellaNum;           
    unsigned int nPhoneNum;              
    unsigned int nNotebookNum;           
    unsigned int nPowerbankNum;          
    unsigned int nShoesNum;              
    unsigned int nRodNum;                
    unsigned int nMetalNum;              
    unsigned int nExplosiveNum;          
    unsigned int nContainerSprayNum;     
    unsigned int nExplosiveFireworksNum; 
    unsigned int nLighterNum;            
    unsigned int nStickNum;              
    unsigned int nBrassknuckleNum;       
    unsigned int nHandcuffsNum;          
    unsigned int nIvoryNum;              
    BYTE byReserved[996];                
} NET_PACK_TYPE_NUM_INFO;
typedef struct tagNET_XRAY_PACKINFO
{
    unsigned int nTotalNum;                      
    NET_GRADE_PACK_NUM_INFO stuGradePackNumInfo; 
    NET_PACK_TYPE_NUM_INFO stuPackTypeNumInfo;   
    int nChannel;                                
    BYTE byReserved[1024];                       
} NET_XRAY_PACKINFO;
typedef struct tagNET_OUT_XRAY_GETPACKTOTALINFO
{
    DWORD dwSize;                                            
    NET_XRAY_PACKINFO stuXrayPackInfo[MAX_XRAY_CHANNEL_NUM]; 
    int nRetXrayPackInfoNum;                                 
} NET_OUT_XRAY_GETPACKTOTALINFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Xray_GetPackTotalInfo(LLONG lLoginID, const NET_IN_XRAY_GETPACKTOTALINFO* pInParam, NET_OUT_XRAY_GETPACKTOTALINFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_PACKAGE_STATISTICS_BYGRADE
{
    EM_DANGER_GRADE_TYPE emGrade; 
    UINT nCount;                  
    BYTE byReserved[64];          
} NET_IN_PACKAGE_STATISTICS_BYGRADE;
typedef struct tagNET_IN_PACKAGE_STATISTICS_BYTYPE
{
    EM_INSIDE_OBJECT_TYPE emType; 
    UINT nCount;                  
    char szType[32];              
    BYTE byReserved[32];          
} NET_IN_PACKAGE_STATISTICS_BYTYPE;
typedef struct tagNET_IN_XRAY_STATISTICS_INFO
{
    char szUUID[36];                                                
    UINT nStatisticsInfoID;                                         
    NET_TIME_EX stuBeginTime;                                       
    NET_TIME_EX stuEndTime;                                         
    UINT nTotalCount;                                               
    UINT nStatisticsInfoByGradeNum;                                 
    NET_IN_PACKAGE_STATISTICS_BYGRADE stuStatisticsInfoByGrade[16]; 
    UINT nStatisticsInfoByTypeNum;                                  
    NET_IN_PACKAGE_STATISTICS_BYTYPE stuStatisticsInfoByType[64];   
    BYTE byReserved[1024];                                          
} NET_IN_XRAY_PACKAGE_STATISTICS_INFO;
typedef void(CALLBACK* fXRayAttachPackageStatistics)(LLONG lAttachHandle, NET_IN_XRAY_PACKAGE_STATISTICS_INFO* pInfo, LDWORD dwUser);
typedef struct tagNET_IN_XRAY_ATTACH_PACKAGE_STATISTICS
{
    DWORD dwSize;                          
    char szUUID[36];                       
    fXRayAttachPackageStatistics cbNotify; 
    LDWORD dwUser;                         
} NET_IN_XRAY_ATTACH_PACKAGE_STATISTICS;
typedef struct tagNET_OUT_XRAY_ATTACH_PACKAGE_STATISTICS
{
    DWORD dwSize; 
} NET_OUT_XRAY_ATTACH_PACKAGE_STATISTICS;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_XRayAttachPackageStatistics(LLONG lLoginID, const NET_IN_XRAY_ATTACH_PACKAGE_STATISTICS* pInParam, NET_OUT_XRAY_ATTACH_PACKAGE_STATISTICS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_XRayDetachPackageStatistics(LLONG lAttachHandle);
typedef enum tagEM_XRAY_PERIPHERAL_TYPE
{
    EM_XRAY_PERIPHERAL_TYPE_UNKNOWN,         
    EM_XRAY_PERIPHERAL_TYPE_FLUID_DETECTION, 
    EM_XRAY_PERIPHERAL_TYPE_BLAST_DETECTION, 
} EM_XRAY_PERIPHERAL_TYPE;
typedef struct tagNET_XRAY_PERIPHERAL_DEVICE_INFO
{
    char szIp[64];                  
    EM_XRAY_PERIPHERAL_TYPE emType; 
    BYTE byReserved[444];           
} NET_XRAY_PERIPHERAL_DEVICE_INFO;
typedef void(CALLBACK* fAttachXRayPeripheralDeviceList)(LLONG lAttachHandle, NET_XRAY_PERIPHERAL_DEVICE_INFO* pDevList, int nDevListNum, LDWORD dwUser);
typedef struct tagNET_IN_XRAY_GET_PERIPHERAL_DEVICE_LIST
{
    DWORD dwSize; 
} NET_IN_XRAY_GET_PERIPHERAL_DEVICE_LIST;
typedef struct tagNET_OUT_XRAY_GET_PERIPHERAL_DEVICE_LIST
{
    DWORD dwSize;                                    
    int nRetDevNum;                                  
    NET_XRAY_PERIPHERAL_DEVICE_INFO stuDevList[256]; 
} NET_OUT_XRAY_GET_PERIPHERAL_DEVICE_LIST;
typedef struct tagNET_IN_XRAY_ATTACH_PERIPHERAL_DEVICE_LIST
{
    DWORD dwSize;                             
    fAttachXRayPeripheralDeviceList cbNotify; 
    LDWORD dwUser;                            
} NET_IN_XRAY_ATTACH_PERIPHERAL_DEVICE_LIST;
typedef struct tagNET_OUT_XRAY_ATTACH_PERIPHERAL_DEVICE_LIST
{
    DWORD dwSize; 
} NET_OUT_XRAY_ATTACH_PERIPHERAL_DEVICE_LIST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_XRay_GetPeripheralDeviceList(LLONG lLoginID, const NET_IN_XRAY_GET_PERIPHERAL_DEVICE_LIST* pInParam, NET_OUT_XRAY_GET_PERIPHERAL_DEVICE_LIST* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_XRay_AttachPeripheralDeviceList(LLONG lLoginID, const NET_IN_XRAY_ATTACH_PERIPHERAL_DEVICE_LIST* pInParam, NET_OUT_XRAY_ATTACH_PERIPHERAL_DEVICE_LIST* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_XRay_DetachPeripheralDeviceList(LLONG lAttachHandle);
typedef struct tagNET_XRARY_UNPACKING_INFO
{
    char szPackageTag[32];                    
    int nMainViewInsideNum;                   
    NET_INSIDE_OBJECT stuMainViewInside[32];  
    int nSlaveViewInsideNum;                  
    NET_INSIDE_OBJECT stuSlaveViewInside[32]; 
    char reserved[1024];
} NET_XRARY_UNPACKING_INFO;
typedef struct tagNET_IN_XRAY_REQ_UNPACKING
{
    DWORD dwSize;                        
    NET_XRARY_UNPACKING_INFO stuPackage; 
} NET_IN_XRAY_REQ_UNPACKING;
typedef struct tagNET_OUT_XRAY_REQ_UNPACKING
{
    DWORD dwSize; 
} NET_OUT_XRAY_REQ_UNPACKING;
typedef void(CALLBACK* fXRayUnpackingResult)(LLONG lAttachHandle, NET_XRARY_UNPACKING_INFO* pInfo, LDWORD dwUser);
typedef struct tagNET_IN_XRAY_ATTACH_UNPACKING
{
    DWORD dwSize;                  
    fXRayUnpackingResult cbNotify; 
    LDWORD dwUser;                 
} NET_IN_XRAY_ATTACH_UNPACKING;
typedef struct tagNET_OUT_XRAY_ATTACH_UNPACKING
{
    DWORD dwSize; 
} NET_OUT_XRAY_ATTACH_UNPACKING;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_XRay_RequstUnpacking(LLONG lLoginID, const NET_IN_XRAY_REQ_UNPACKING* pInParam, NET_OUT_XRAY_REQ_UNPACKING* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_XRay_AttachUnpackingResult(LLONG lLoginID, const NET_IN_XRAY_ATTACH_UNPACKING* pInParam, NET_OUT_XRAY_ATTACH_UNPACKING* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_XRay_DetachUnpackingResult(LLONG lAttachHandle);
typedef enum tagNET_TEMPERATURE_TYPE
{
    NET_TEMPERATURE_TYPE_CPU, 
} NET_TEMPERATURE_TYPE;
typedef struct tagNET_IN_GET_HISTORY_TEMPERATURE
{
    DWORD dwSize;                           
    NET_TEMPERATURE_TYPE emTemperatureType; 
} NET_IN_GET_HISTORY_TEMPERATURE;
typedef struct tagNET_TEMPERATURE_VALUE
{
    double dbHistoryTemperature[MAX_HISTORY_TEMPERATURE_NUM]; 
    int nRetHistoryTemperatureNum;                            
    BYTE byReserved[4];                                       
} NET_TEMPERATURE_VALUE;
typedef struct tagNET_HISTORY_TEMPERATURE_INFO
{
    int nRetMonitorPointNum;                                                     
    BYTE byReserved[4];                                                          
    NET_TEMPERATURE_VALUE stuMonitorPointTemperature[MAX_TEMPERATURE_POINT_NUM]; 
    BYTE byReserved1[1024];                                                      
} NET_HISTORY_TEMPERATURE_INFO;
typedef struct tagNET_OUT_GET_HISTORY_TEMPERATURE
{
    DWORD dwSize;                                           
    BYTE byReserved[4];                                     
    NET_HISTORY_TEMPERATURE_INFO stuHistoryTemperatureInfo; 
} NET_OUT_GET_HISTORY_TEMPERATURE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceBoard_GetHistoryTemperature(LLONG lLoginID, const NET_IN_GET_HISTORY_TEMPERATURE* pInParam, NET_OUT_GET_HISTORY_TEMPERATURE* pOutParam, int nWaitTime);
typedef enum tagEM_TEMPERATUREEX_TYPE
{
    EM_TEMPERATUREEX_TYPE_UNKNOWN,   
    EM_TEMPERATUREEX_TYPE_ALL,       
    EM_TEMPERATUREEX_TYPE_POWER,     
    EM_TEMPERATUREEX_TYPE_CABINET,   
    EM_TEMPERATUREEX_TYPE_GLOBAL,    
    EM_TEMPERATUREEX_TYPE_MAINBOARD, 
    EM_TEMPERATUREEX_TYPE_CARD,      
    EM_TEMPERATUREEX_TYPE_BACKBOARD, 
    EM_TEMPERATUREEX_TYPE_CPU,       
} EM_TEMPERATUREEX_TYPE;
typedef struct tagNET_IN_GET_TEMPERATUREEX
{
    DWORD dwSize;                            
    EM_TEMPERATUREEX_TYPE emTemperatureType; 
} NET_IN_GET_TEMPERATUREEX;
typedef struct tagNET_TEMPERATUREEX_VALUE
{
    EM_TEMPERATUREEX_TYPE emTemperatureType;         
    int nRetTemperatureNum;                          
    float fTemperature[MAX_HISTORY_TEMPERATURE_NUM]; 
    BYTE byReserved[128];                            
} NET_TEMPERATUREEX_VALUE;
typedef struct tagNET_OUT_GET_TEMPERATUREEX
{
    DWORD dwSize;                                                          
    int nRetMonitorPointNum;                                               
    NET_TEMPERATUREEX_VALUE stuTemperatureEx[MAX_TEMPERATUREEX_POINT_NUM]; 
} NET_OUT_GET_TEMPERATUREEX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceBoard_GetTemperatureEx(LLONG lLoginID, const NET_IN_GET_TEMPERATUREEX* pInParam, NET_OUT_GET_TEMPERATUREEX* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_ALARM_OUT_STATE
{
    DWORD dwSize; 
} NET_IN_GET_ALARM_OUT_STATE;
#define MAX_OUT_STATE_COUNT 32
typedef struct tagNET_OUT_GET_ALARM_OUT_STATE
{
    DWORD dwSize;                    
    int nState[MAX_OUT_STATE_COUNT]; 
} NET_OUT_GET_ALARM_OUT_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAlarmOutState(LLONG lLoginID, const NET_IN_GET_ALARM_OUT_STATE* pInParam, NET_OUT_GET_ALARM_OUT_STATE* pOutParam, int nWaitTime);
typedef enum tagNET_EM_2DCODE_TYPE
{
    NET_EM_2DCODE_TYPE_OZVISION,    
    NET_EM_2DCODE_TYPE_LCWEBSITE,   
    NET_EM_2DCODE_TYPE_EASY4IP,     
    NET_EM_2DCODE_TYPE_DMSS,        
    NET_EM_2DCODE_TYPE_VIDEOTALK,   
    NET_EM_2DCODE_TYPE_APPREGISTER, 
    NET_EM_2DCODE_TYPE_DEVAUTH,     
} NET_EM_2DCODE_TYPE;
typedef struct tagNET_IN_WORKDIRECTORY_GETGROUP_INFO
{
    DWORD dwSize;
    char szDirectoryName[DH_COMMON_STRING_256]; 
} NET_IN_WORKDIRECTORY_GETGROUP_INFO;
typedef struct tagNET_OUT_WORKDIRECTORY_GETGROUP_INFO
{
    DWORD dwSize;
    char szGroupName[DH_COMMON_STRING_256]; 
} NET_OUT_WORKDIRECTORY_GETGROUP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WorkDirectoryGetGroup(LLONG lLoginID, const NET_IN_WORKDIRECTORY_GETGROUP_INFO* pInParam, NET_OUT_WORKDIRECTORY_GETGROUP_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_WORKDIRECTORY_SETGROUP_INFO
{
    DWORD dwSize;
    char szGroupName[DH_COMMON_STRING_256];     
    char szDirectoryName[DH_COMMON_STRING_256]; 
} NET_IN_WORKDIRECTORY_SETGROUP_INFO;
typedef struct tagNET_OUT_WORKDIRECTORY_SETGROUP_INFO
{
    DWORD dwSize;
} NET_OUT_WORKDIRECTORY_SETGROUP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_WorkDirectorySetGroup(LLONG lLoginID, const NET_IN_WORKDIRECTORY_SETGROUP_INFO* pInParam, NET_OUT_WORKDIRECTORY_SETGROUP_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_2DCODE
{
    DWORD dwSize;                    
    NET_EM_2DCODE_TYPE em2DCodeType; 
} NET_IN_GET_2DCODE;
typedef struct tagNET_OUT_GET_2DCODE
{
    DWORD dwSize;                        
    char sz2DCode[DH_COMMON_STRING_512]; 
} NET_OUT_GET_2DCODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Get2DCode(LLONG lLoginID, const NET_IN_GET_2DCODE* pInParam, NET_OUT_GET_2DCODE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_2DCODE
{
    DWORD dwSize;                        
    NET_EM_2DCODE_TYPE em2DCodeType;     
    char sz2DCode[DH_COMMON_STRING_512]; 
} NET_IN_SET_2DCODE;
typedef struct tagNET_OUT_SET_2DCODE
{
    DWORD dwSize; 
} NET_OUT_SET_2DCODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Set2DCode(LLONG lLoginID, const NET_IN_SET_2DCODE* pInParam, NET_OUT_SET_2DCODE* pOutParam, int nWaitTime);
typedef enum tagEM_IMPORT_FACEDB_STATE
{
    EM_IMPORT_FACEDB_UNKNOWN,              
    EM_IMPORT_FACEDB_ONGING,               
    EM_IMPORT_FACEDB_END,                  
    EM_IMPORT_FACEDB_BUSY,                 
    EM_IMPORT_FACEDB_DATAERROR,            
    EM_IMPORT_FACEDB_INVALID,              
    EM_IMPORT_FACEDB_SYNC_SUCCESS,         
    EM_IMPORT_FACEDB_SYNC_FALIED,          
    EM_IMPORT_FACEDB_DBFULL,               
    EM_IMPORT_FACEDB_SDFULL,               
    EM_IMPORT_FACEDB_CIPHER_ERROR,         
    EM_IMPORT_FACEDB_SEND_FAIL,            
    EM_IMPORT_FACEDB_UPLOAD_FAIL,          
    EM_IMPORT_FACEDB_UPLOAD_NO_PERMISSION, 
} EM_IMPORT_FACEDB_STATE;
typedef enum tagEM_FACEDB_PROGRESS_TYPE
{
    EM_FACEDB_PROGRESS_IMPORT, 
    EM_FACEDB_PROGRESS_DEPLOY, 
} EM_FACEDB_PROGRESS_TYPE;
typedef struct tagNET_IMPORT_FACEDB_STATE
{
    unsigned int nProgress;         
    EM_FACEDB_PROGRESS_TYPE emType; 
    EM_IMPORT_FACEDB_STATE emState; 
    int nLogicChannel;              
    int nDeploySuccessNum;          
    int nTotalNum;                  
    BYTE byReserved[500];           
} NET_IMPORT_FACEDB_STATE;
typedef void(CALLBACK* fImportFaceDbCallBack)(LLONG lImportFaceDbHandle, NET_IMPORT_FACEDB_STATE* pstFaceDbState, LDWORD dwUser);
typedef struct tagNET_IN_IMPORT_FACE_DB
{
    DWORD dwSize;                         
    char szGroupId[DH_COMMON_STRING_64];  
    char szPassWord[DH_COMMON_STRING_64]; 
    char* pszFaceDBPath;                  
    fImportFaceDbCallBack cbImportState;  
    LDWORD dwUser;                        
    int nWaitTime;                        
    UINT nFaceDBFileNum;                  
    char szFaceDBFilePath[32][256];       
    int nLogicChannelNum;                 
    int nLogicChannels[10];               
} NET_IN_IMPORT_FACE_DB;
typedef struct tagNET_OUT_IMPORT_FACE_DB
{
    DWORD dwSize; 
} NET_OUT_IMPORT_FACE_DB;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ImportFaceDB(LLONG lLoginID, const NET_IN_IMPORT_FACE_DB* pInParam, NET_OUT_IMPORT_FACE_DB* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopImportFaceDB(LLONG lImportFaceDbHandle);
typedef enum tagEM_EXPORT_FACEDB_ERRORCODE
{
    EM_EXPORT_FACEDB_REQUEST_SUCCESS = 1, 
    EM_EXPORT_FACEDB_NO_AUTHORITY = 2,    
    EM_EXPORT_FACEDB_NO_THIS_FILE = 3,    
    EM_EXPORT_FACEDB_EXPORT_END = 4,      
    EM_EXPORT_FACEDB_EXPORTING = 5,       
    EM_EXPORT_FACEDB_FILE_READY = 8,      
    EM_EXPORT_FACEDB_FILE_FAILED = 9,     
    EM_EXPORT_FACEDB_WAIT_FILE = 10,      
    EM_EXPORT_FACEDB_SYSTEM_BUSY = 11,    
    EM_EXPORT_FACEDB_NO_PASSWORD = 12,    
} EM_EXPORT_FACEDB_ERRORCODE;
typedef struct tagNET_EXPORT_FACEDB_STATE
{
    unsigned int nProgress;                 
    EM_EXPORT_FACEDB_ERRORCODE emErrorCode; 
    char* pDataBuf;                         
    DWORD dwDataLen;                        
    int nLogicChannel;                      
    BYTE byReserved[508];                   
} NET_EXPORT_FACEDB_STATE;
typedef void(CALLBACK* fExportStateCallBack)(LLONG lExportFaceDbHandle, NET_EXPORT_FACEDB_STATE* pstFaceDbState, LDWORD dwUser);
typedef struct tagNET_IN_EXPORT_FACE_DB
{
    DWORD dwSize;                                
    char szGroupId[DH_COMMON_STRING_64];         
    char szPassWord[DH_COMMON_STRING_64];        
    fExportStateCallBack cbExportFaceDbCallBack; 
    LDWORD dwUser;                               
    int nWaitTime;                               
    int nLogicChannel;                           
} NET_IN_EXPORT_FACE_DB;
typedef struct tagNET_OUT_EXPORT_FACE_DB
{
    DWORD dwSize; 
} NET_OUT_EXPORT_FACE_DB;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ExportFaceDB(LLONG lLoginID, const NET_IN_EXPORT_FACE_DB* pInParam, NET_OUT_EXPORT_FACE_DB* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopExportFaceDB(LLONG lExportFaceDbHandle);
typedef struct tagNET_DETECT_WINDOW_IFNO
{
    int nRegionID;                               
    char szRegionName[DH_COMMON_STRING_128];     
    int nThreshold;                              
    int nSensitive;                              
    int nRegionRow;                              
    int nRegionCol;                              
    BYTE byRegion[DH_MOTION_ROW][DH_MOTION_COL]; 
    int nLevel;                                  
    BYTE byReserved[508];                        
} NET_DETECT_WINDOW_IFNO;
typedef enum tagEM_PIR_LIGHT_LINK_TYPE
{
    EM_PIR_LIGHT_LINK_TYPE_UNKNOWN,      
    EM_PIR_LIGHT_LINK_TYPE_FILCKER,      
    EM_PIR_LIGHT_LINK_TYPE_KEEPLIGHTING, 
} EM_PIR_LIGHT_LINK_TYPE;
typedef struct tagNET_LIGHTINGLINK_INFO
{
    BOOL bEnable;                                                          
    EM_PIR_LIGHT_LINK_TYPE emLightLinkType;                                
    int nFilckerIntevalTime;                                               
    int nLightDuration;                                                    
    DH_TSECT stuWhiteLightTimeSection[DH_TSCHE_DAY_NUM][DH_TSCHE_SEC_NUM]; 
    BYTE byReserved[512];                                                  
} NET_LIGHTINGLINK_INFO;
typedef struct tagNET_PIR_LINK_INFO
{
    BOOL bRecordEnable;                        
    BOOL bAlarmOutEnable;                      
    BOOL bSnapshotEnable;                      
    BOOL bMailEnable;                          
    BOOL bAlarmBellEnable;                     
    BOOL bLogEnable;                           
    int nRecordChannelNum;                     
    int nRecordChannels[DH_COMMON_STRING_64];  
    int nRecordLatch;                          
    int nAlarmOutChannelNum;                   
    int AlarmOutChannels[DH_COMMON_STRING_32]; 
    int nAlarmOutLatch;                        
    int nSnapshotChannelNum;                   
    int SnapshotChannels[DH_COMMON_STRING_32]; 
    int nAlarmBellLatch;                       
    int nDejitter;                             
    NET_LIGHTINGLINK_INFO stLightingLink;      
    NET_CFG_TIME_SCHEDULE stTimeShecule;       
    BYTE byReserved1[512];                     
} NET_PIR_LINK_INFO;
#define MAX_DETECT_WINDOW 4
typedef struct tagNET_PIR_ALARM_INFO
{
    BOOL bEnable;
    int nDetectWindowCount;                                   
    NET_DETECT_WINDOW_IFNO stDetectWindow[MAX_DETECT_WINDOW]; 
    NET_PIR_LINK_INFO stPirLink;                              
} NET_PIR_ALARM_INFO;
typedef struct tagNET_IN_GET_PIR_ALARM_PARAM
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_GET_PIR_ALARM_PARAM;
typedef struct tagNET_OUT_GET_PIR_ALARM_PARAM
{
    DWORD dwSize;
    NET_PIR_ALARM_INFO stPirAlarmInfo;                     
    int nPirAlarmNum;                                      
    NET_PIR_ALARM_INFO stPirAlarmInfoEx[MAX_PIRPARAM_NUM]; 
} NET_OUT_GET_PIR_ALARM_PARAM;
typedef struct tagNET_IN_SET_PIR_ALARM_PARAM
{
    DWORD dwSize;
    int nChannel;                                          
    NET_PIR_ALARM_INFO stPirAlarmInfo;                     
    int nPirAlarmNum;                                      
    NET_PIR_ALARM_INFO stPirAlarmInfoEx[MAX_PIRPARAM_NUM]; 
} NET_IN_SET_PIR_ALARM_PARAM;
typedef struct tagNET_OUT_SET_PIR_ALARM_PARAM
{
    DWORD dwSize;
} NET_OUT_SET_PIR_ALARM_PARAM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPirAlarmParam(LLONG lLoginID, const NET_IN_GET_PIR_ALARM_PARAM* pstInParam, NET_OUT_GET_PIR_ALARM_PARAM* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPirAlarmParam(LLONG lLoginID, const NET_IN_SET_PIR_ALARM_PARAM* pstInParam, NET_OUT_SET_PIR_ALARM_PARAM* pstOutParam, int nWaitTime);
typedef enum tagEM_GROUP_TYPE
{
    EM_GROUP_TYPE_UNKNOWN,   
    EM_GROUP_TYPE_ADMIN,     
    EM_GROUP_TYPE_OPERATOR,  
    EM_GROUP_TYPE_USER,      
    EM_GROUP_TYPE_ANONYMOUS, 
} EM_GROUP_TYPE;
typedef struct tagNET_MOTION_DATA
{
    int nRegionID;        
    int nThreshold;       
    BYTE byReserved[512]; 
} NET_MOTION_DATA;
typedef struct tagNET_ONVIF_USER_INFO
{
    char szName[DH_COMMON_STRING_128];     
    char szPassword[DH_COMMON_STRING_128]; 
    NET_TIME stuPasswordModifiedTime;      
    EM_GROUP_TYPE emGroupType;             
    BOOL bReserved;                        
    BYTE byReserved[512];                  
} NET_ONVIF_USER_INFO;
typedef struct tagNET_IN_ADD_ONVIF_USER_INFO
{
    DWORD dwSize;              
    char szName[128];          
    char szPassword[128];      
    EM_GROUP_TYPE emGroupType; 
} NET_IN_ADD_ONVIF_USER_INFO;
typedef struct tagNET_OUT_ADD_ONVIF_USER_INFO
{
    DWORD dwSize; 
} NET_OUT_ADD_ONVIF_USER_INFO;
typedef struct tagNET_IN_MODIFYONVIF_USER_INFO
{
    DWORD dwSize;                      
    char szName[DH_COMMON_STRING_128]; 
    NET_ONVIF_USER_INFO stUserInfo;    
} NET_IN_MODIFYONVIF_USER_INFO;
typedef struct tagNET_OUT_MODIFYONVIF_USER_INFO
{
    DWORD dwSize; 
} NET_OUT_MODIFYONVIF_USER_INFO;
typedef struct tagNET_IN_GETONVIF_USERINFO_ALL_INFO
{
    DWORD dwSize; 
} NET_IN_GETONVIF_USERINFO_ALL_INFO;
typedef struct tagNET_OUT_GETONVIF_USERINFO_ALL_INFO
{
    DWORD dwSize;                                        
    int nRetUserInfoNumber;                              
    NET_ONVIF_USER_INFO stuUserInfo[MAX_ONVIF_USER_NUM]; 
} NET_OUT_GETONVIF_USERINFO_ALL_INFO;
typedef struct tagNET_IN_MODIFYONVIF_PASSWORD_INFO
{
    DWORD dwSize;                        
    char szName[DH_COMMON_STRING_128];   
    char szPwd[DH_COMMON_STRING_128];    
    char szPwdOld[DH_COMMON_STRING_128]; 
} NET_IN_MODIFYONVIF_PASSWORD_INFO;
typedef struct tagNET_OUT_MODIFYONVIF_PASSWORD_INFO
{
    DWORD dwSize; 
} NET_OUT_MODIFYONVIF_PASSWORD_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddOnvifUser(LLONG lLoginID, const NET_IN_ADD_ONVIF_USER_INFO* pstuInParam, NET_OUT_ADD_ONVIF_USER_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyOnvifUser(LLONG lLoginID, const NET_IN_MODIFYONVIF_USER_INFO* pstInParam, NET_OUT_MODIFYONVIF_USER_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetOnvifUserInfoAll(LLONG lLoginID, const NET_IN_GETONVIF_USERINFO_ALL_INFO* pstInParam, NET_OUT_GETONVIF_USERINFO_ALL_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyOnvifUserPassword(LLONG lLoginID, const NET_IN_MODIFYONVIF_PASSWORD_INFO* pstInParam, NET_OUT_MODIFYONVIF_PASSWORD_INFO* pstOutParam, int nWaitTime);
#define MAX_MOTION_DATA_COUNT 4 
typedef struct tagNET_CB_MOTION_DATA
{
    DWORD dwSize;
    int nMotionDataCount;                                
    NET_MOTION_DATA stMotionData[MAX_MOTION_DATA_COUNT]; 
    int nRegionRow;                                      
    int nRegionCol;                                      
    BYTE byRegion[DH_MOTION_ROW][DH_MOTION_COL];         
} NET_CB_MOTION_DATA;
typedef void(CALLBACK* fAttachMotionDataCB)(LLONG lAttachHandle, NET_CB_MOTION_DATA* pBuf, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_MOTION_DATA
{
    DWORD dwSize;
    int nChannel;                 
    fAttachMotionDataCB cbNotify; 
    LDWORD dwUser;                
} NET_IN_ATTACH_MOTION_DATA;
typedef struct tagNET_OUT_ATTACH_MOTION_DATA
{
    DWORD dwSize;
} NET_OUT_ATTACH_MOTION_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachMotionData(LLONG lLoginID, const NET_IN_ATTACH_MOTION_DATA* pstInParam, NET_OUT_ATTACH_MOTION_DATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachMotionData(LLONG lAttachHandle);
typedef enum tagEM_SRC_INSRUCTION
{
    EM_SRC_INSRUCTION_VTO_CALL,        
    EM_SRC_INSRUCTION_VTO_CARD,        
    EM_SRC_INSRUCTION_LIFT_CARD,       
    EM_SRC_INSRUCTION_VTH_CALL,        
    EM_SRC_INSRUCTION_VTO_FINGERPRINT, 
    EM_SRC_INSRUCTION_VTO_PSW,         
} EM_SRC_INSRUCTION;
typedef struct tagNET_IN_LIFTCONTROL_CALLLIFT_INFO
{
    DWORD dwSize;
    char szFloorNo[4];                  
    char szRoomNo[12];                  
    char szUserID[8];                   
    char szCardNo[32];                  
    EM_SRC_INSRUCTION emSrcInstruction; 
} NET_IN_LIFTCONTROL_CALLLIFT_INFO;
typedef struct tagNET_OUT_LIFTCONTROL_CALLLIFT_INFO
{
    DWORD dwSize;
} NET_OUT_LIFTCONTROL_CALLLIFT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CallLift(LLONG lLoginID, const NET_IN_LIFTCONTROL_CALLLIFT_INFO* pstInParam, NET_OUT_LIFTCONTROL_CALLLIFT_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_LIFTCONTROL_CONTROLLIFT_INFO
{
    DWORD dwSize;
    int nFloorNum;                      
    char szFloorNo[32][4];              
    char szRoomNo[12];                  
    char szUserID[8];                   
    char szCardNo[32];                  
    EM_SRC_INSRUCTION emSrcInstruction; 
} NET_IN_LIFTCONTROL_CONTROLLIFT_INFO;
typedef struct tagNET_OUT_LIFTCONTROL_CONTROLLIFT_INFO
{
    DWORD dwSize;
} NET_OUT_LIFTCONTROL_CONTROLLIFT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlLift(LLONG lLoginID, const NET_IN_LIFTCONTROL_CONTROLLIFT_INFO* pstInParam, NET_OUT_LIFTCONTROL_CONTROLLIFT_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_FLOOR_INFO
{
    DWORD dwSize;          
    int nFloorNum;         
    char szFloors[128][8]; 
} NET_IN_GET_FLOOR_INFO;
typedef struct tagNET_FLOOR_INFO
{
    char szFloor[16];          
    UINT nControlModuleToken;  
    UINT nControlModulePort;   
    UINT nCallLiftModuleToken; 
    UINT nCallLiftModulePort;  
    BYTE byReserved[256];      
} NET_FLOOR_INFO;
typedef struct tagNET_OUT_GET_FLOOR_INFO
{
    DWORD dwSize;                     
    int nFloorInfoNum;                
    NET_FLOOR_INFO stuFloorInfo[128]; 
} NET_OUT_GET_FLOOR_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFloorInfo(LLONG lLoginID, const NET_IN_GET_FLOOR_INFO* pstInParam, NET_OUT_GET_FLOOR_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_ELEVATOR_WORK_INFO
{
    DWORD dwSize;         
    int nChannel;         
    char szReserved[256]; 
} NET_IN_GET_ELEVATOR_WORK_INFO;
typedef struct tagNET_OUT_GET_ELEVATOR_WORK_INFO
{
    DWORD dwSize;             
    UINT nElevatorWorkState;  
    char szElevatorFloor[32]; 
    UINT nElevatorWorkSpeed;  
    BOOL bIsCheckFloor;       
    char szReserved[256];     
} NET_OUT_GET_ELEVATOR_WORK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetElevatorWorkInfo(LLONG lLoginID, const NET_IN_GET_ELEVATOR_WORK_INFO* pstuInParam, NET_OUT_GET_ELEVATOR_WORK_INFO* pstuOutParam, int nWaitTime);
typedef enum tagNET_ENUM_LOWRATEWPAN_CONFIG
{
    NET_ENUM_LOWRATEWPAN_ACCESS_WORKMODE, 
} NET_ENUM_LOWRATEWPAN_CONFIG;
typedef enum tagNET_ENUM_LOWRATEWPAN_WORKMODE
{
    NET_ENUM_LOWRATEWPAN_WORKMODE_UNKNOWN,     
    NET_ENUM_LOWRATEWPAN_WORKMODE_NORMAL,      
    NET_ENUM_LOWRATEWPAN_WORKMODE_CLEAN,       
    NET_ENUM_LOWRATEWPAN_WORKMODE_DECORATION,  
    NET_ENUM_LOWRATEWPAN_WORKMODE_UNUSED,      
    NET_ENUM_LOWRATEWPAN_WORKMODE_OUTSTANDING, 
} NET_ENUM_LOWRATEWPAN_WORKMODE;
typedef struct tagNET_LOWRATEWPAN_WORKMODE
{
    DWORD dwSize;
    NET_ENUM_LOWRATEWPAN_WORKMODE emWorkMode; 
} NET_LOWRATEWPAN_WORKMODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLowRateWPANConfig(LLONG lLoginID, NET_ENUM_LOWRATEWPAN_CONFIG emType, char* SN, void* szOutBuffer, DWORD dwOutBufferSize, int nWaitTime, void* reserve);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetLowRateWPANConfig(LLONG lLoginID, NET_ENUM_LOWRATEWPAN_CONFIG emType, char* SN, void* szInBuffer, DWORD dwInBufferSize, int nWaitTime, int* restart, void* reserve);
typedef struct tagNET_IN_GET_VIDEODIAGNOSIS_STATE
{
    DWORD dwSize;        
    char szProject[128]; 
} NET_IN_GET_VIDEODIAGNOSIS_STATE;
typedef struct tagVIDEODIAGNOSIS_STATE
{
    BOOL bEnable;                    
    BOOL bRunning;                   
    char szCurrentProject[MAX_PATH]; 
    char szCurrentTask[MAX_PATH];    
    char szCurrentProfile[MAX_PATH]; 
    int nCurrentSourceCount;         
    int nCurrentSourceIndex;         
    DH_TSECT stCurrentTimeSection;   
    int nTaskCountOfProject;         
    int nIndexOfCurrentTask;         
    int nIncompleteCause;            
    int nTaskState;                  
    BYTE byReserved[504];            
} VIDEODIAGNOSIS_STATE;
typedef struct tagNET_OUT_GET_VIDEODIAGNOSIS_STATE
{
    DWORD dwSize;                     
    VIDEODIAGNOSIS_STATE stuState[2]; 
} NET_OUT_GET_VIDEODIAGNOSIS_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoDiagnosisState(LLONG lLoginID, const NET_IN_GET_VIDEODIAGNOSIS_STATE* pstInParam, NET_OUT_GET_VIDEODIAGNOSIS_STATE* pstOutParam, int nWaitTime);
#define LOGIN_TYPE_DEVICE_NOT_SUPPORT 100 
typedef struct tagNET_POST_LOGIN_TASK
{
    LLONG lLoginID;                  
    char* pchDVRIP;                  
    LONG nDVRPort;                   
    BOOL bOnline;                    
    NET_DEVICEINFO_Ex stuDeviceInfo; 
    int nError;                      
    char szReserve[1024];            
} NET_POST_LOGIN_TASK;
typedef void(CALLBACK* fPostLoginTask)(DWORD dwTaskID, NET_POST_LOGIN_TASK* pOutParam, LDWORD dwUser);
typedef enum tagEM_TCP_LOGIN_CONFIG_TYPE
{
    EM_TCP_LOGIN_CONFIG_TYPE_UNKNOWN = 0, 
    EM_TCP_LOGIN_CONFIG_TYPE_MULTICAST,   
} EM_TCP_LOGIN_CONFIG_TYPE;
typedef struct tagNET_IN_POST_LOGIN_TASK
{
    DWORD dwSize;                          
    char szReserve1[4];                    
    char* szIp;                            
    unsigned int nPort;                    
    char szReserve2[4];                    
    char* szName;                          
    char* szPwd;                           
    EM_LOGIN_SPAC_CAP_TYPE emSpecCap;      
    EM_TCP_LOGIN_CONFIG_TYPE emConfigType; 
    fPostLoginTask cbLogin;                
    void* pUser;                           
    BOOL bHighLevelSecurity;               
    EM_LOGIN_TLS_TYPE emTLSCap;            
    char byReserved[128];                  
} NET_IN_POST_LOGIN_TASK;
typedef struct tagNET_OUT_POST_LOGIN_TASK
{
    DWORD dwSize; 
} NET_OUT_POST_LOGIN_TASK;
CLIENT_NET_API DWORD CALL_METHOD CLIENT_PostLoginTask(const NET_IN_POST_LOGIN_TASK* pInParam, NET_OUT_POST_LOGIN_TASK* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CancelLoginTask(DWORD dwTaskID);
typedef struct tagNET_IN_GET_ALARMCAPS
{
    DWORD dwSize; 
} NET_IN_GET_ALARMCAPS;
typedef struct tagNET_PARTIAL_ARM
{
    BOOL bEnable;        
    int nIndex;          
    BYTE byReserved[64]; 
} NET_PARTIAL_ARM;
typedef struct tagNET_AREA_ARM_MODE
{
    BOOL bOutDoor;                    
    BOOL bAtHome;                     
    BOOL bTotalArm;                   
    int nPartialArmNum;               
    NET_PARTIAL_ARM stuPartialArm[4]; 
    BOOL bDisArm;                     
    BYTE byReserved[516];             
} NET_AREA_ARM_MODE;
typedef struct tagNET_SUPPORT_MULITSIM_CARDS
{
    int nIndex;         
    BOOL bEnable;       
    BYTE bReserved[64]; 
} NET_SUPPORT_MULITSIM_CARDS;
typedef enum tagEM_BYPASSMODE_TYPE
{
    EM_BYPASSMODE_TYPE_UNKNOWN,  
    EM_BYPASSMODE_TYPE_OFF,      
    EM_BYPASSMODE_TYPE_ACTIVE,   
    EM_BYPASSMODE_TYPE_BYPASSED, 
    EM_BYPASSMODE_TYPE_ISOLATED, 
    EM_BYPASSMODE_TYPE_TEST,     
} EM_BYPASSMODE_TYPE;
typedef struct tagNET_OUT_GET_ALARMCAPS
{
    DWORD dwSize; 
    int nSiren;   
    int nAlarmIn;                                          
    int nAlarmOut;                                         
    int nRemoteControl;                                    
    int nICCard;                                           
    int nKeypad;                                           
    int nTelephoneNumber;                                  
    int nKeypadUserCount;                                  
    int nAlarmAreas;                                       
    BOOL bSupportOneClickArmMode;                          
    BOOL bSupportDefenceArmMode;                           
    BOOL bSupportArmProfile;                               
    NET_AREA_ARM_MODE stuAreaArmMode;                      
    int nZoomNum;                                          
    EM_BYPASSMODE_TYPE emZoomMode[16];                     
    BOOL bSupportAlarmClear;                               
    int nNetworkUserCount;                                 
    int nSupportMultiSIMCardsNum;                          
    NET_SUPPORT_MULITSIM_CARDS stuSupportMultiSIMCards[8]; 
} NET_OUT_GET_ALARMCAPS;
typedef struct tagNET_IN_GET_ALARMMODE
{
    DWORD dwSize; 
} NET_IN_GET_ALARMMODE;
typedef struct tagNET_ARMMODE_INFO
{
    EM_ARM_STATE emArmState; 
    BYTE byReserved[1024];   
} NET_ARMMODE_INFO;
typedef struct tagNET_OUT_GET_ALARMMODE
{
    DWORD dwSize;                                      
    int nArmModeRet;                                   
    NET_ARMMODE_INFO stuArmMode[MAX_AREA_NUMBER];      
    int nArmModeRetEx;                                 
    NET_ARMMODE_INFO stuArmModeEx[MAX_AREA_NUMBER_EX]; 
} NET_OUT_GET_ALARMMODE;
typedef struct tagNET_ARM_OPTIONS
{
    NET_EM_SCENE_MODE emSceneMode;               
    EM_AREAARM_TRIGGERMODE emAreaarmTriggerMode; 
    int nId;                                     
    char szName[64];                             
    char szClientAddress[64];                    
    BYTE bReserved[132];                         
} NET_ARM_OPTIONS;
typedef struct tagNET_DETAIL_INFO
{
    NET_ARM_OPTIONS stuArmOption; 
    BYTE byReserved[128];         
} NET_DETAIL_INFO;
typedef struct tagNET_IN_SET_ALARMMODE
{
    DWORD dwSize;                       
    EM_ARM_TYPE emArmType;              
    char szPwd[256];                    
    int nAreaNum;                       
    int arrAreas[MAX_AREA_NUMBER];      
    NET_DETAIL_INFO stuDetail;          
    int nAreaNumEx;                     
    int arrAreasEx[MAX_AREA_NUMBER_EX]; 
} NET_IN_SET_ALARMMODE;
typedef struct tagARM_FAILED_DETAIL
{
    int nArea;                           
    int nAlarmSourceRet;                 
    int arrAlarmSource[MAX_ZONE_NUMBER]; 
    BYTE byReserved[1024];               
} ARM_FAILED_DETAIL;
typedef struct tagNET_ZONE_ABNORMAL_INFO
{
    int nIndex;           
    char szName[32];      
    char szReason[32];    
    BYTE byReserved[188]; 
} NET_ZONE_ABNORMAL_INFO;
typedef struct tagARM_FAILED_DETAIL_EX
{
    int nArea;                                    
    int nAlarmSourceRetEx;                        
    int arrAlarmSourceEx[256];                    
    int nZoneAbnormalNum;                         
    NET_ZONE_ABNORMAL_INFO stuZoneAbnormal[1024]; 
} ARM_FAILED_DETAIL_EX;
typedef struct tagNET_DEVICE_FAULT_INFO
{
    char szName[32];      
    char szReason[32];    
    BYTE byReserved[512]; 
} NET_DEVICE_FAULT_INFO;
typedef struct tagNET_OUT_SET_ALARMMODE
{
    DWORD dwSize;                                       
    int nArmResult;                                     
    int nFailedAreaRet;                                 
    ARM_FAILED_DETAIL stuFailedDetail[MAX_AREA_NUMBER]; 
    int nFailedDetailNum;                               
    ARM_FAILED_DETAIL_EX* pstuFailedDetailEx;           
    int nDeviceFaultNum;                                
    NET_DEVICE_FAULT_INFO stuDeviceFault[256];          
} NET_OUT_SET_ALARMMODE;
typedef struct tagNET_IN_SET_BYPASSMODE
{
    DWORD dwSize;                       
    char szPwd[256];                    
    EM_BYPASSMODE_TYPE emType;          
    int nZoneNum;                       
    int arrZones[MAX_ZONE_NUMBER];      
    int nZoneNumEx;                     
    int arrZonesEx[MAX_ZONE_NUMBER_EX]; 
} NET_IN_SET_BYPASSMODE;
typedef struct tagNET_OUT_SET_BYPASSMODE
{
    DWORD dwSize; 
} NET_OUT_SET_BYPASSMODE;
typedef struct tagNET_IN_GET_BYPASSMODE
{
    DWORD dwSize;                       
    int nZoneNum;                       
    int arrZones[MAX_ZONE_NUMBER];      
    int nZoneNumEx;                     
    int arrZonesEx[MAX_ZONE_NUMBER_EX]; 
} NET_IN_GET_BYPASSMODE;
typedef struct tagNET_OUT_GET_BYPASSMODE
{
    DWORD dwSize;                                      
    int nZoneRet;                                      
    EM_BYPASSMODE_TYPE arrModes[MAX_ZONE_NUMBER];      
    int nZoneRetEx;                                    
    EM_BYPASSMODE_TYPE arrModesEx[MAX_ZONE_NUMBER_EX]; 
} NET_OUT_GET_BYPASSMODE;
typedef struct tagNET_IN_GET_AREAZONES
{
    DWORD dwSize;                      
    int nAreaNum;                      
    int arrArea[MAX_AREA_NUMBER];      
    int nAreaNumEx;                    
    int arrAreaEx[MAX_AREA_NUMBER_EX]; 
} NET_IN_GET_AREAZONES;
typedef struct tagNET_AREA_INFO
{
    int nArea;                     
    int nZoneRet;                  
    int arrZones[MAX_ZONE_NUMBER]; 
    BYTE byReserved[1024];         
} NET_AREA_INFO;
typedef struct tagNET_ZONES_INFO
{
    int nIndex;           
    char szName[128];     
    UINT nSupPartial;     
    BYTE byReserved[512]; 
} NET_ZONES_INFO;
typedef struct tagNET_AREA_INFO_EX
{
    int nArea;                          
    int nZoneRetEx;                     
    int arrZonesEx[MAX_ZONE_NUMBER_EX]; 
    BYTE byReserved[1024];              
} NET_AREA_INFO_EX;
typedef struct tagNET_AREA_INFO_EX_SUPPLEMENT
{
    NET_ZONES_INFO stuZonesInfo[MAX_ZONE_NUMBER_EX]; 
    char szAreaName[128];                            
    BYTE byReserved[1024];                           
} NET_AREA_INFO_EX_SUPPLEMENT;
typedef struct tagNET_OUT_GET_AREAZONES
{
    DWORD dwSize;                                                            
    int nAreaRet;                                                            
    NET_AREA_INFO stuAreaInfo[MAX_AREA_NUMBER];                              
    int nAreaRetEx;                                                          
    NET_AREA_INFO_EX stuAreaInfoEx[MAX_AREA_NUMBER_EX];                      
    NET_AREA_INFO_EX_SUPPLEMENT stuAreaInfoExSupplement[MAX_AREA_NUMBER_EX]; 
} NET_OUT_GET_AREAZONES;
typedef struct tagNET_IN_GET_ALLINSLOTS
{
    DWORD dwSize; 
} NET_IN_GET_ALLINSLOTS;
typedef struct tagNET_OUT_GET_ALLINSLOTS
{
    DWORD dwSize;  
    int nLocol;    
    int nWired;    
    int nWireless; 
} NET_OUT_GET_ALLINSLOTS;
typedef struct tagNET_IN_GET_ALLOUTSLOTS
{
    DWORD dwSize; 
} NET_IN_GET_ALLOUTSLOTS;
typedef struct tagNET_OUT_GET_ALLOUTSLOTS
{
    DWORD dwSize;  
    int nLocol;    
    int nWired;    
    int nWireless; 
} NET_OUT_GET_ALLOUTSLOTS;
typedef struct tagNET_IN_GET_CONNECTIONSTATUS
{
    DWORD dwSize; 
} NET_IN_GET_CONNECTIONSTATUS;
typedef struct tagNET_OUT_GET_CONNECTIONSTATUS
{
    DWORD dwSize;                             
    int nZoneRet;                             
    bool arrZoneStates[MAX_ZONE_NUMBER];      
    int nZoonRetEx;                           
    BOOL arrZoneStatesEx[MAX_ZONE_NUMBER_EX]; 
} NET_OUT_GET_CONNECTIONSTATUS;
typedef enum tagEM_GET_AREASSTATUS_TYPE
{
    EM_GET_AREASSTATUS_TYPE_UNKNOWN, 
    EM_GET_AREASSTATUS_TYPE_ACTIVE,  
    EM_GET_AREASSTATUS_TYPE_OPEN,    
} EM_GET_AREASSTATUS_TYPE;
typedef struct tagNET_IN_GET_AREAS_STATUS
{
    DWORD dwSize;                   
    EM_GET_AREASSTATUS_TYPE emType; 
} NET_IN_GET_AREAS_STATUS;
typedef enum tagEM_ZONE_STATUS
{
    EM_ZONE_STATUS_UNKNOWN, 
    EM_ZONE_STATUS_ALARM,   
    EM_ZONE_STATUS_TAMPER,  
    EM_ZONE_STATUS_MASK,    
    EM_ZONE_STATUS_SHORT,   
    EM_ZONE_STATUS_NORMAL,  
} EM_ZONE_STATUS;
typedef struct tagNET_ZONE_STATUS
{
    int nIndex;              
    EM_ZONE_STATUS emStatus; 
    BYTE byReserved[1024];   
} NET_ZONE_STATUS;
typedef struct tagNET_AREA_STATUS
{
    int nArea;                                      
    int nZoneRet;                                   
    NET_ZONE_STATUS stuZoneStatus[MAX_ZONE_NUMBER]; 
    BYTE byReserved[1024];                          
} NET_AREA_STATUS;
typedef struct tagNET_AREA_STATUS_EX
{
    int nArea;                                           
    int nZoneRetEx;                                      
    NET_ZONE_STATUS stuZoneStatusEx[MAX_ZONE_NUMBER_EX]; 
    BYTE byReserved[1024];                               
} NET_AREA_STATUS_EX;
typedef struct tagNET_OUT_GET_AREAS_STATUS
{
    DWORD dwSize;                                           
    int nAreaRet;                                           
    NET_AREA_STATUS stuAreaStatus[MAX_AREA_NUMBER];         
    int nAreaRetEx;                                         
    NET_AREA_STATUS_EX stuAreaStatusEx[MAX_AREA_NUMBER_EX]; 
} NET_OUT_GET_AREAS_STATUS;
typedef enum tagEM_OUTPUT_TYPE
{
    EM_OUTPUT_TYPE_UNKNOWN,  
    EM_OUTPUT_TYPE_SIREN,    
    EM_OUTPUT_TYPE_ALARMOUT, 
} EM_OUTPUT_TYPE;
typedef struct tagNET_IN_GET_OUTPUT_STATE
{
    DWORD dwSize;          
    EM_OUTPUT_TYPE emType; 
} NET_IN_GET_OUTPUT_STATE;
typedef struct tagNET_OUT_GET_OUTPUT_STATE
{
    DWORD dwSize;                         
    int nStateRet;                        
    bool arrStates[82];                   
    BYTE byReserved[6];                   
    int nStateRetEx;                      
    BOOL arrStatesEx[MAX_ZONE_NUMBER_EX]; 
    BYTE byReserved1[4];                  
} NET_OUT_GET_OUTPUT_STATE;
typedef struct tagNET_IN_SET_OUTPUT_STATE
{
    DWORD dwSize;          
    EM_OUTPUT_TYPE emType; 
    int nChannel;          
    bool action;           
    BYTE byReserved[3];    
} NET_IN_SET_OUTPUT_STATE;
typedef struct tagNET_OUT_SET_OUTPUT_STATE
{
    DWORD dwSize; 
} NET_OUT_SET_OUTPUT_STATE;
typedef struct tagNET_IN_GET_ZONES_TROUBLE
{
    DWORD dwSize; 
} NET_IN_GET_ZONES_TROUBLE;
typedef enum tagEM_ZONE_TROUBLE_TYPE
{
    EM_ZONE_TROUBLE_TYPE_UNKNOWN, 
    EM_ZONE_TROUBLE_TYPE_TAMPER,  
    EM_ZONE_TROUBLE_TYPE_MASK,    
    EM_ZONE_TROUBLE_TYPE_SHORT,   
    EM_ZONE_TROUBLE_TYPE_ALARM,   
    EM_ZONE_TROUBLE_TYPE_NORMAL,  
} EM_ZONE_TROUBLE_TYPE;
typedef struct tagNET_ZONE_TROUBLE_INFO
{
    int nIndex;                         
    EM_ZONE_TROUBLE_TYPE emTroubleType; 
    BYTE byReserved[1024];              
} NET_ZONE_TROUBLE_INFO;
typedef struct tagNET_OUT_GET_ZONES_TROUBLE
{
    DWORD dwSize;                                               
    int nZoneRet;                                               
    NET_ZONE_TROUBLE_INFO stuTroubleInfo[MAX_ZONE_NUMBER];      
    int nZoneRetEx;                                             
    NET_ZONE_TROUBLE_INFO stuTroubleInfoEx[MAX_ZONE_NUMBER_EX]; 
} NET_OUT_GET_ZONES_TROUBLE;
typedef enum tagEM_CHANNELS_STATE_TYPE
{
    EM_CHANNELS_STATE_TYPE_UNKNOWN,  
    EM_CHANNELS_STATE_TYPE_ALL,      
    EM_CHANNELS_STATE_TYPE_ALARMIN,  
    EM_CHANNELS_STATE_TYPE_ALARMOUT, 
    EM_CHANNELS_STATE_TYPE_SIREN,    
} EM_CHANNELS_STATE_TYPE;
typedef struct tagNET_GET_CHANNELS_STATE_CONDITION
{
    EM_CHANNELS_STATE_TYPE emType; 
    BYTE byReserved[1020];         
} NET_CHANNELS_STATE_CONDITION;
typedef struct tagNET_IN_GET_CHANNELS_STATE
{
    DWORD dwSize;                              
    NET_CHANNELS_STATE_CONDITION stuCondition; 
} NET_IN_GET_CHANNELS_STATE;
typedef enum tagEM_DEV_STATUS
{
    EM_DEV_STATUS_UNKNOWN = -1, 
    EM_DEV_STATUS_OFFLINE,      
    EM_DEV_STATUS_ONLINE,       
} EM_DEV_STATUS;
typedef enum tagEM_OUTPUT_STATE
{
    EM_OUTPUT_STATE_UNKNOWN = -1, 
    EM_OUTPUT_STATE_CLOSE,        
    EM_OUTPUT_STATE_OPEN,         
} EM_OUTPUT_STATE;
typedef struct tagNET_SENSOR_STATE
{
    int nExPowerState;    
    int nTamper;          
    int nLowPowerState;   
    char szReserved[244]; 
} NET_SENSOR_STATE;
typedef struct tagNET_CHANNELS_STATE
{
    EM_CHANNELS_STATE_TYPE emType;   
    UINT nIndex;                     
    EM_DEV_STATUS emOnlineState;     
    EM_ZONE_STATUS emAlarmState;     
    EM_OUTPUT_STATE emOutputState;   
    char szName[64];                 
    char szSN[32];                   
    NET_SENSOR_STATE stuSensorState; 
    BYTE byReserved[60];             
} NET_CHANNELS_STATE;
typedef struct tagNET_OUT_GET_CHANNELS_STATE
{
    DWORD dwSize;                               
    UINT nChannelsStatesCount;                  
    NET_CHANNELS_STATE stuChannelsStates[1024]; 
} NET_OUT_GET_CHANNELS_STATE;
typedef enum tagNET_EM_ACCESSORY_TYPE
{
    NET_EM_ACCESSORY_TYPE_UNKNOWN,              
    NET_EM_ACCESSORY_TYPE_Keypad,               
    NET_EM_ACCESSORY_TYPE_MBUSExpansionModule,  
    NET_EM_ACCESSORY_TYPE_RS485ExpansionModule, 
    NET_EM_ACCESSORY_TYPE_MBUSMotherBoard,      
} NET_EM_ACCESSORY_TYPE;
typedef struct tagNET_IN_GET_ACCESSORY_INFO
{
    DWORD dwSize;                          
    NET_EM_ACCESSORY_TYPE emAccessoryType; 
} NET_IN_GET_ACCESSORY_INFO;
typedef struct tagNET_ACCESSORY_GAPS
{
    BYTE bySupportSensitivity; 
    BYTE byReserved[63];       
} NET_ACCESSORY_GAPS;
typedef struct tagNET_ACCESSORY_INFO
{
    NET_EM_ACCESSORY_TYPE emType;        
    int nChannel;                        
    UINT nAddr;                          
    UINT nAlarmInCount;                  
    int nAlarmInChannels[16];            
    BYTE byReserved[4];                  
    UINT nAlarmOutCount;                 
    int nAlarmOutChannels[16];           
    char szModel[32];                    
    char szName[64];                     
    char szVersion[64];                  
    NET_ACCESSORY_GAPS stuAccessoryCaps; 
    BYTE byReserved1[232];               
} NET_ACCESSORY_INFO;
typedef struct tagNET_OUT_GET_ACCESSORY_INFO
{
    DWORD dwSize;                           
    UINT nMaxAccessoryInfo;                 
    NET_ACCESSORY_INFO* pstuAccessoryInfos; 
    UINT nRetAccessoryInfo;                 
} NET_OUT_GET_ACCESSORY_INFO;
typedef enum tagNET_EM_GET_ALARMREGION_INFO
{
    NET_EM_GET_ALARMREGION_INFO_UNKNOWN,               
    NET_EM_GET_ALARMREGION_INFO_ALARMCAPS,             
    NET_EM_GET_ALARMREGION_INFO_ARMMODE,               
    NET_EM_GET_ALARMREGION_INFO_BYPASSMODE,            
    NET_EM_GET_ALARMREGION_INFO_AREAZONES,             
    NET_EM_GET_ALARMREGION_INFO_ALLINSLOTS,            
    NET_EM_GET_ALARMREGION_INFO_ALLOUTSLOTS,           
    NET_EM_GET_ALARMREGION_INFO_ZONECONNECTIONSSTATUS, 
    NET_EM_GET_ALARMREGION_INFO_AREASTATUS,            
    NET_EM_GET_ALARMREGION_INFO_OUTPUTSTATE,           
    NET_EM_GET_ALARMREGION_INFO_ZONESTROUBLE,          
    NET_EM_GET_ALARMREGION_INFO_CHANNELSSTATE,         
    NET_EM_GET_ALARMREGION_INFO_ACCESSORY,             
} NET_EM_GET_ALARMREGION_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAlarmRegionInfo(LLONG lLoginID, NET_EM_GET_ALARMREGION_INFO emType, const void* pstuInParam, void* pstuOutParam, int nWaitTime);
typedef enum tagNET_EM_SET_ALARMREGION_INFO
{
    NET_EM_SET_ALARMREGION_INFO_UNKNOWN,     
    NET_EM_SET_ALARMREGION_INFO_ARMMODE,     
    NET_EM_SET_ALARMREGION_INFO_BYPASSMODE,  
    NET_EM_SET_ALARMREGION_INFO_OUTPUTSTATE, 
} NET_EM_SET_ALARMREGION_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetAlarmRegionInfo(LLONG lLoginID, NET_EM_SET_ALARMREGION_INFO emType, const void* pstuInParam, void* pstuOutParam, int nWaitTime);
typedef enum tagEM_DEVICE_NOTIFY_TYPE
{
    EM_DEVICE_NOTIFY_TYPE_UNKNOWN, 
    EM_DEVICE_NOTIFY_TYPE_NEW,     
    EM_DEVICE_NOTIFY_TYPE_UPDATE,  
    EM_DEVICE_NOTIFY_TYPE_REMOVE,  
    EM_DEVICE_NOTIFY_TYPE_CONNECT, 
} EM_DEVICE_NOTIFY_TYPE;
typedef struct tagNET_CB_ATTACH_DEVICE_STATE
{
    EM_DEVICE_NOTIFY_TYPE emNotifyType;                      
    int nRetCount;                                           
    char szDeviceIDs[MAX_LINK_DEVICE_NUM][DH_DEV_ID_LEN_EX]; 
    BYTE byReserved[512];                                    
} NET_CB_ATTACH_DEVICE_STATE;
typedef void(CALLBACK* fDeviceStateCallBack)(LLONG lAttachHandle, NET_CB_ATTACH_DEVICE_STATE* pstDeviceState, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_DEVICE_STATE
{
    DWORD dwSize;
    fDeviceStateCallBack cbDeviceState; 
    LDWORD dwUser;                      
} NET_IN_ATTACH_DEVICE_STATE;
typedef struct tagNET_OUT_ATTACH_DEVICE_STATE
{
    DWORD dwSize;
} NET_OUT_ATTACH_DEVICE_STATE;
typedef struct tagNET_IN_ASYNC_ADD_DEVICE
{
    DWORD dwSize;
    int nCount;                                             
    char szUrls[MAX_ADD_DEVICE_NUM][MAX_COMMON_STRING_512]; 
} NET_IN_ASYNC_ADD_DEVICE;
typedef struct tagNET_OUT_ASYNC_ADD_DEVICE
{
    DWORD dwSize;
    UINT nTaskID; 
} NET_OUT_ASYNC_ADD_DEVICE;
typedef enum tagEM_CUSTOM_DEV_PROTOCOL_TYPE
{
    EM_CUSTOM_DEV_PROTOCOL_TYPE_PRIVATE,   
    EM_CUSTOM_DEV_PROTOCOL_TYPE_DAHUA2,    
    EM_CUSTOM_DEV_PROTOCOL_TYPE_DAHUA3,    
    EM_CUSTOM_DEV_PROTOCOL_TYPE_GENERAL,   
    EM_CUSTOM_DEV_PROTOCOL_TYPE_ONVIF,     
    EM_CUSTOM_DEV_PROTOCOL_TYPE_ONVIFS,    
    EM_CUSTOM_DEV_PROTOCOL_TYPE_GB28181,   
    EM_CUSTOM_DEV_PROTOCOL_TYPE_EHOME,     
    EM_CUSTOM_DEV_PROTOCOL_TYPE_DAHUA_REG, 
} EM_CUSTOM_DEV_PROTOCOL_TYPE;
typedef enum tagEM_VIDEOINPUTS_SERVICE_TYPE
{
    EM_VIDEOINPUTS_SERVICE_TYPE_AUTO,      
    EM_VIDEOINPUTS_SERVICE_TYPE_TCP,       
    EM_VIDEOINPUTS_SERVICE_TYPE_UDP,       
    EM_VIDEOINPUTS_SERVICE_TYPE_MULTICAST, 
} EM_VIDEOINPUTS_SERVICE_TYPE;
typedef struct tagNET_CUSTOM_DEV_VIDEO_INPUTS
{
    char szMainStreamUrl[256];                 
    char szExtraStreamUrl[256];                
    EM_VIDEOINPUTS_SERVICE_TYPE emServiceType; 
    BYTE byReserved[508];                      
} NET_CUSTOM_DEV_VIDEO_INPUTS;
typedef struct tagNET_IN_ASYNC_ADD_CUSTOM_DEVICE
{
    DWORD dwSize;
    int nPort;                                  
    char szAddress[128];                        
    char szUserName[128];                       
    char szPassword[128];                       
    EM_CUSTOM_DEV_PROTOCOL_TYPE emProtocolType; 
    int nRemoteChannelNum;                      
    int nRemoteChannels[512];                   
    BOOL bSetLogicChannelStart;                 
    int nLogicChannelStart;                     
    NET_CUSTOM_DEV_VIDEO_INPUTS stuVideoInput;  
} NET_IN_ASYNC_ADD_CUSTOM_DEVICE;
typedef struct tagNET_OUT_ASYNC_ADD_CUSTOM_DEVICE
{
    DWORD dwSize;
    int nLogicChannelNum;    
    int nLogicChannels[128]; 
    char szDeviceID[128];    
} NET_OUT_ASYNC_ADD_CUSTOM_DEVICE;
typedef enum tagEM_DEVICE_ADD_STATE
{
    EM_DEVICE_ADD_STATE_UNKNOWN, 
    EM_DEVICE_ADD_STATE_WAIT,    
    EM_DEVICE_ADD_STATE_CONNECT, 
    EM_DEVICE_ADD_STATE_FAILURE, 
    EM_DEVICE_ADD_STATE_SUCCESS, 
    EM_DEVICE_ADD_STATE_STOP,    
} EM_DEVICE_ADD_STATE;
typedef struct tagNET_CB_ATTACH_ADD_DEVICE
{
    UINT nTaskID;                   
    EM_DEVICE_ADD_STATE emAddState; 
    UINT nIndex;                    
    BYTE byReserved[512];           
} NET_CB_ATTACH_ADD_DEVICE;
typedef void(CALLBACK* fAddDeviceCallBack)(LLONG lAttachHandle, NET_CB_ATTACH_ADD_DEVICE* pstAddDevice, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_ADD_DEVICE
{
    DWORD dwSize;
    fAddDeviceCallBack cbAddDevice; 
    LDWORD dwUser;                  
} NET_IN_ATTACH_ADD_DEVICE;
typedef struct tagNET_OUT_ATTACH_ADD_DEVICE
{
    DWORD dwSize;
} NET_OUT_ATTACH_ADD_DEVICE;
typedef struct tagNET_IN_GET_ADD_DEVICE_LIST_INFO
{
    DWORD dwSize;
    UINT nTaskID;                    
    int nCount;                      
    UINT nIndex[MAX_ADD_DEVICE_NUM]; 
} NET_IN_GET_ADD_DEVICE_LIST_INFO;
typedef struct tagNET_GET_ADD_DEVICE_INFO
{
    char szDeviceID[DH_DEV_ID_LEN_EX]; 
    char szUrl[DH_COMMON_STRING_512];  
    EM_DEVICE_ADD_STATE emAddState;    
    UINT nErrorCode;                   
    BYTE byReserved[512];              
} NET_GET_ADD_DEVICE_INFO;
typedef struct tagNET_OUT_GET_ADD_DEVICE_LIST_INFO
{
    DWORD dwSize;
    int nRetCount;                                             
    NET_GET_ADD_DEVICE_INFO stuDeviceInfo[MAX_ADD_DEVICE_NUM]; 
} NET_OUT_GET_ADD_DEVICE_LIST_INFO;
typedef struct tagNET_IN_GET_DEVICE_LIST_INFO
{
    DWORD dwSize;
    int nCount;                                              
    char szDeviceIDs[MAX_LINK_DEVICE_NUM][DH_DEV_ID_LEN_EX]; 
} NET_IN_GET_DEVICE_LIST_INFO;
typedef struct tagNET_GET_DEVICE_INFO
{
    char szDeviceID[DH_DEV_ID_LEN_EX];            
    char szUrl[DH_COMMON_STRING_512];             
    char szSerialNo[DH_COMMON_STRING_32];         
    char szDeviceType[DH_COMMON_STRING_64];       
    char szDeviceClass[DH_DEV_CLASS_LEN];         
    int nMacCount;                                
    char szMacs[MAX_MACADDR_NUM][DH_MACADDR_LEN]; 
    char szDevSoftVersion[DH_COMMON_STRING_128];  
    char szDeviceName[DH_DEV_NAME_LEN];           
    char szDetail[DH_COMMON_STRING_512];          
    UINT nVideoInputCh;                           
    UINT nVideoOutputCh;                          
    UINT nAudioInputCh;                           
    UINT nAudioOutputCh;                          
    UINT nAlarmInputCh;                           
    UINT nAlarmOutputCh;                          
    UINT nErrorCode;                              
    UINT nVtoDoors;                               
    BYTE byOnline;                                
    BYTE byReserved[511];                         
} NET_GET_DEVICE_INFO;
typedef struct tagNET_OUT_GET_DEVICE_LIST_INFO
{
    DWORD dwSize;
    int nMaxCount;                       
    int nRetCount;                       
    NET_GET_DEVICE_INFO* pstuDeviceInfo; 
} NET_OUT_GET_DEVICE_LIST_INFO;
typedef struct tagNET_IN_SET_CONNECT_CHANNEL
{
    DWORD dwSize;
    char szDeviceID[DH_DEV_ID_LEN_EX];      
    int nCount;                             
    UINT nChannels[MAX_DEVICE_CHANNEL_NUM]; 
} NET_IN_SET_CONNECT_CHANNEL;
typedef struct tagNET_OUT_SET_CONNECT_CHANNEL
{
    DWORD dwSize;
} NET_OUT_SET_CONNECT_CHANNEL;
typedef struct tagNET_IN_GET_CHANNEL_INFO
{
    DWORD dwSize;
    char szDeviceID[DH_DEV_ID_LEN_EX]; 
} NET_IN_GET_CHANNEL_INFO;
typedef struct tagNET_GET_CHANNEL_INFO
{
    UINT nRemoteChannel;                         
    int nLogicChannel;                           
    char szName[DH_DEV_NAME_LEN];                
    char szDetail[DH_COMMON_STRING_512];         
    char szDeviceType[DH_COMMON_STRING_64];      
    char szDeviceClass[DH_DEV_CLASS_LEN];        
    char szIP[DH_MAX_IPADDR_LEN];                
    char szMac[DH_MACADDR_LEN];                  
    char szSerialNo[DH_DEV_SERIALNO_LEN];        
    char szDevSoftVersion[DH_COMMON_STRING_128]; 
    UINT nVideoInputCh;                          
    UINT nVideoOutputCh;                         
    UINT nAudioInputCh;                          
    UINT nAudioOutputCh;                         
    UINT nAlarmInputCh;                          
    UINT nAlarmOutputCh;                         
    BYTE byOnline;                               
    BYTE byUsed;                                 
    BYTE byReserved[510];                        
} NET_GET_CHANNEL_INFO;
typedef struct tagNET_OUT_GET_CHANNEL_INFO
{
    DWORD dwSize;
    int nMaxCount;                         
    int nRetCount;                         
    NET_GET_CHANNEL_INFO* pstuChannelInfo; 
} NET_OUT_GET_CHANNEL_INFO;
typedef struct tagNET_IN_REMOVE_DEVICE
{
    DWORD dwSize;
    int nCount;                                              
    char szDeviceIDs[MAX_LINK_DEVICE_NUM][DH_DEV_ID_LEN_EX]; 
} NET_IN_REMOVE_DEVICE;
typedef struct tagNET_OUT_REMOVE_DEVICE
{
    DWORD dwSize;
} NET_OUT_REMOVE_DEVICE;
typedef struct tagNET_IN_CANCEL_ADD_TASK
{
    DWORD dwSize;
    UINT nTaskID; 
} NET_IN_CANCEL_ADD_TASK;
typedef struct tagNET_OUT_CANCEL_ADD_TASK
{
    DWORD dwSize;
} NET_OUT_CANCEL_ADD_TASK;
typedef struct tagNET_IN_CONFIRM_ADD_TASK
{
    DWORD dwSize;
    UINT nTaskID; 
} NET_IN_CONFIRM_ADD_TASK;
typedef struct tagNET_OUT_CONFIRM_ADD_TASK
{
    DWORD dwSize;
} NET_OUT_CONFIRM_ADD_TASK;
typedef struct tagNET_IN_GET_NMPDEV_INFO
{
    DWORD dwSize; 
} NET_IN_GET_NMPDEV_INFO;
typedef struct tagNET_NEM_CONNECT_DEVICE_INFO
{
    char szAddress[40];      
    char szProtocolType[32]; 
    char szDeviceType[64];   
    char szMac[18];          
    char szName[64];         
    char szVendor[32];       
    BYTE byReserved[126];    
} NET_NEM_CONNECT_DEVICE_INFO;
typedef struct tagNET_NEIGHBORS_INFO
{
    char szRemotePortId[64];                   
    char szRemoteDevice[128];                  
    NET_NEM_CONNECT_DEVICE_INFO stuDeviceInfo; 
    BYTE byReserved[128];                      
} NET_NEIGHBORS_INFO;
typedef enum tagEM_PORT_STATUS
{
    EM_PORT_STATUS_UNKNOWN = -1, 
    EM_PORT_STATUS_DOWN,         
    EM_PORT_STATUS_UP,           
} EM_PORT_STATUS;
typedef enum tagEM_MEDIA_TYPE
{
    EM_MEDIA_TYPE_UNKNOWN, 
    EM_MEDIA_TYPE_COPPER,  
    EM_MEDIA_TYPE_FIBER,   
} EM_MEDIA_TYPE;
typedef enum tagEM_DUPLEX_MODE
{
    EM_DUPLEX_MODE_UNKNOWN,    
    EM_DUPLEX_MODE_HALFDUPLEX, 
    EM_DUPLEX_MODE_FULLDUPLEX, 
} EM_DUPLEX_MODE;
typedef enum tagEM_POE_STATUS
{
    EM_POE_STATUS_UNKNOWN = -1, 
    EM_POE_STATUS_NONENABLE,    
    EM_POE_STATUS_ENABLE,       
    EM_POE_STATUS_UNSUPPORTED,  
} EM_POE_STATUS;
typedef enum tagEM_FLOW_STATUS
{
    EM_FLOW_STATUS_UNKNOWN = -1, 
    EM_FLOW_STATUS_NORMAL,       
    EM_FLOW_STATUS_ABNORMAL,     
} EM_FLOW_STATUS;
typedef enum tagEM_PORT_ENABLE_STATUS
{
    EM_PORT_ENABLE_STATUS_UNKONWON = -1, 
    EM_PORT_ENABLE_STATUS_OFF,           
    EM_PORT_ENABLE_STATUS_ON,            
} EM_PORT_ENABLE_STATUS;
typedef enum tagEM_PORT_DUPLEX_MODE
{
    EM_PORT_DUPLEX_MODE_UNKNOWN, 
    EM_PORT_DUPLEX_MODE_AUTO,    
    EM_PORT_DUPLEX_MODE_HALF,    
    EM_PORT_DUPLEX_MODE_FULL,    
} EM_PORT_DUPLEX_MODE;
typedef enum tagEM_PORT_DISTANCE_STATUS
{
    EM_PORT_DISTANCE_STATUS_UNKNOWN = -1, 
    EM_PORT_DISTANCE_STATUS_OFF,          
    EM_PORT_DISTANCE_STATUS_ON,           
    EM_PORT_DISTANCE_STATUS_UNSUPPORT,    
} EM_PORT_DISTANCE_STATUS;
typedef enum tagEM_PORT_FLOW_STATUS
{
    EM_PORT_FLOW_STATUS_UNKNOWN = -1, 
    EM_PORT_FLOW_STATUS_OFF,          
    EM_PORT_FLOW_STATUS_ON,           
} EM_PORT_FLOW_STATUS;
typedef enum tagEM_PORT_FLOW_ENABLE_STATUS
{
    EM_PORT_FLOW_ENABLE_STATUS_UNKNOWN = -1, 
    EM_PORT_FLOW_ENABLE_STATUS_OFF,          
    EM_PORT_FLOW_ENABLE_STATUS_ON,           
} EM_PORT_FLOW_ENABLE_STATUS;
typedef enum tagEM_PDALIVE_ENABLE_STATUS
{
    EM_PDALIVE_ENABLE_STATUS_UNKNOWN = -1, 
    EM_PDALIVE_ENABLE_STATUS_OFF,          
    EM_PDALIVE_ENABLE_STATUS_ON,           
} EM_PDALIVE_ENABLE_STATUS;
typedef struct tagNET_SPEED_DUPLEX_CAP
{
    UINT nSpeedCap;                          
    UINT nPortDuplexModeNum;                 
    EM_PORT_DUPLEX_MODE emPortDuplexMode[4]; 
} NET_SPEED_DUPLEX_CAP;
typedef struct tagNET_NMPDEVPORT_INFO
{
    DWORD dwLocalPortId;                          
    EM_POE_STATUS emPoEStatus;                    
    char szLocalPortDescr[64];                    
    int nChassisId;                               
    int nSlotId;                                  
    char szAliasName[64];                         
    DWORD dwAggregationId;                        
    DWORD dwSpeed;                                
    EM_PORT_STATUS emStatus;                      
    EM_MEDIA_TYPE emMedia;                        
    EM_DUPLEX_MODE emDuplexMode;                  
    float fPoEPower;                              
    TP_U64 dwInUcastPkts;                         
    TP_U64 dwOutUcastPkts;                        
    TP_U64 dwInBroadcastPkts;                     
    TP_U64 dwOutBroadcastPkts;                    
    TP_U64 dwInMulticastPkts;                     
    TP_U64 dwOutMulticastPkts;                    
    TP_U64 dwInDiscardPkts;                       
    TP_U64 dwOutDiscardPkts;                      
    INT64 nInPausePkts;                           
    INT64 nOutPausePkts;                          
    INT64 nInFilterPkts;                          
    TP_U64 dwInOctets;                            
    TP_U64 dwOutOctets;                           
    TP_U64 dwInRate;                              
    TP_U64 dwOutRate;                             
    EM_FLOW_STATUS emFlowStatus;                  
    int nRetNeighborsNum;                         
    NET_NEIGHBORS_INFO stuNeighbors[255];         
    EM_PORT_ENABLE_STATUS emPortEnableStatus;     
    UINT nPortSpeedStatus;                        
    EM_PORT_DUPLEX_MODE emPortDuplexMode;         
    EM_PORT_DISTANCE_STATUS emPortDistanceStatus; 
    EM_PORT_FLOW_STATUS emPortFlowStatus;         
    EM_PORT_FLOW_ENABLE_STATUS emPortFlowEnable;  
    EM_PDALIVE_ENABLE_STATUS emPDaliveEnable;     
    UINT nInPortUsage;                            
    UINT nOutPortUsage;                           
    UINT nInThreshold;                            
    UINT nOutThreshold;                           
    UINT nRetSpeedDuplexCap;                      
    NET_SPEED_DUPLEX_CAP stuSpeedDuplexCap[32];   
    TP_U64 nInTopRate;                            
    TP_U64 nOutTopRate;                           
    int nMediaCap;                                
    BYTE byReserved[188];                         
} NET_NMPDEVPORT_INFO;
typedef struct tagNET_NMPDEV_INFO
{
    char szAddress[40];               
    char szDeviceClass[64];           
    char szDeviceType[64];            
    char szMac[18];                   
    BYTE byReserved2[6];              
    char szProtocolType[32];          
    char szVersion[32];               
    char szSerialNo[64];              
    char szName[64];                  
    DWORD dwRetPortNum;               
    int nPortListMaxNum;              
    NET_NMPDEVPORT_INFO* pstuPorList; 
    BOOL bPoESupport;                 
    float fPoETotalPower;             
    float fPoERemainPower;            
    DWORD dwUptime;                   
    int nCPUUsage;                    
    EM_DEV_STATUS emStatus;           
    char szSubnetMask[40];            
    char szParent[128];               
    char szVendor[32];                
    DWORD dwPortNumber;               
    float fPoETopPower;               
    int nMemUsage;                    
    BYTE byReserved[1012];            
} NET_NMPDEV_INFO;
typedef struct tagNET_OUT_GET_NMPDEV_INFO
{
    DWORD dwSize;                  
    BYTE byReserved[4];            
    NET_NMPDEV_INFO stuNMPDevInfo; 
} NET_OUT_GET_NMPDEV_INFO;
typedef struct tagNET_IN_GET_NMPDEV_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_NMPDEV_CAPS;
typedef struct tagNET_OUT_GET_NMPDEV_CAPS
{
    DWORD dwSize;      
    BOOL bSupportPage; 
} NET_OUT_GET_NMPDEV_CAPS;
typedef struct tagNET_IN_GET_NMPPORT_BY_PAGE
{
    DWORD dwSize;  
    UINT nOffset;  
    UINT nPortNum; 
} NET_IN_GET_NMPPORT_BY_PAGE;
typedef struct tagNET_OUT_GET_NMPPORT_BY_PAGE
{
    DWORD dwSize;                     
    UINT nTotalSize;                  
    UINT nMaxPortCount;               
    UINT nRetPortCount;               
    NET_NMPDEVPORT_INFO* pstPortList; 
} NET_OUT_GET_NMPPORT_BY_PAGE;
typedef struct tagNET_LOCAL_PORT_INFO
{
    UINT nLocalPortId;                    
    char szLocalPortDescr[64];            
    UINT nRetNeighborsNum;                
    NET_NEIGHBORS_INFO stuNeighbors[256]; 
} NET_LOCAL_PORT_INFO;
typedef struct tagNET_IN_GET_NMPNEIGHBOR_BY_PAGE
{
    DWORD dwSize;      
    UINT nOffset;      
    UINT nNeighborNum; 
} NET_IN_GET_NMPNEIGHBOR_BY_PAGE;
typedef struct tagNET_OUT_GET_NMPNEIGHBOR_BY_PAGE
{
    DWORD dwSize;                          
    UINT nTotalSize;                       
    UINT nMatchSize;                       
    UINT nMaxLocalPortNum;                 
    NET_LOCAL_PORT_INFO* pstLocalPortList; 
    UINT nRetLocalPortNum;                 
} NET_OUT_GET_NMPNEIGHBOR_BY_PAGE;
typedef struct tagNET_NMP_PORT_STATUS
{
    UINT nLocalPortId;           
    EM_PORT_STATUS emPortStatus; 
    BYTE byReserved[1024];       
} NET_NMP_PORT_STATUS;
typedef struct tagNET_CB_NMP_PORT_STATUS_INFO
{
    char szAddress[64];                     
    char szMAC[24];                         
    NET_NMP_PORT_STATUS* pstPortStatusList; 
    UINT nRetPortNum;                       
    BYTE byReserved[1020];                  
} NET_CB_NMP_PORT_STATUS_INFO;
typedef void(CALLBACK* fNMPPortStatusCallBack)(LLONG lAttachHandle, NET_CB_NMP_PORT_STATUS_INFO* pstNMPPortStatus, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_NMP_PORT_STATUS
{
    DWORD dwSize;                                  
    BYTE byReserved[4];                            
    fNMPPortStatusCallBack cbNMPPortStatusCallBac; 
    LDWORD dwUser;                                 
} NET_IN_ATTACH_NMP_PORT_STATUS;
typedef struct tagNET_IN_CLEAR_PORT_STATISTICS_INFO
{
    DWORD dwSize; 
    UINT nPortID; 
} NET_IN_CLEAR_PORT_STATISTICS_INFO;
typedef struct tagNET_OUT_CLEAR_PORT_STATISTICS_INFO
{
    DWORD dwSize; 
} NET_OUT_CLEAR_PORT_STATISTICS_INFO;
typedef enum tagEM_DUPLEX_STATE
{
    EM_DUPLEX_STATE_UNKNOWN = -1, 
    EM_DUPLEX_STATE_DOWN,         
    EM_DUPLEX_STATE_AUTO,         
    EM_DUPLEX_STATE_10M_HALF,     
    EM_DUPLEX_STATE_10M_FULL,     
    EM_DUPLEX_STATE_100M_HALF,    
    EM_DUPLEX_STATE_100M_FULL,    
    EM_DUPLEX_STATE_1000M_FULL,   
    EM_DUPLEX_STATE_2_5G_FULL,    
    EM_DUPLEX_STATE_5G_FULL,      
    EM_DUPLEX_STATE_10G_FULL,     
    EM_DUPLEX_STATE_25G_FULL,     
    EM_DUPLEX_STATE_40G_FULL,     
    EM_DUPLEX_STATE_100G_FULL,    
} EM_DUPLEX_STATE;
typedef enum tagEM_POE_ENABLE_STATUS
{
    EM_POE_ENABLE_STATUS_UNKNOWN = -1, 
    EM_POE_ENABLE_STATUS_OFF,          
    EM_POE_ENABLE_STATUS_ON,           
} EM_POE_ENABLE_STATUS;
typedef struct tagNET_PORT_CFG_INFO
{
    char szPortDescribe[64];                    
    UINT nPortID;                               
    EM_DUPLEX_STATE emDuplexState;              
    EM_PORT_FLOW_ENABLE_STATUS emFlowEnableCfg; 
    EM_POE_ENABLE_STATUS emPoeEnableCfg;        
    EM_PORT_ENABLE_STATUS emPortEnableCfg;      
    UINT nSpeedCfg;                             
    EM_PORT_DUPLEX_MODE emDuplexModeCfg;        
    EM_PORT_DISTANCE_STATUS emLongDistanceCfg;  
    EM_PDALIVE_ENABLE_STATUS emPDAliveCfg;      
    BYTE byReserved[2044];                      
} NET_PORT_CFG_INFO;
typedef struct tagNET_IN_PORTMANAGER_SET_PORT_INFO
{
    DWORD dwSize;                      
    UINT nPortCfgNum;                  
    NET_PORT_CFG_INFO* pstPortCfgInfo; 
} NET_IN_PORTMANAGER_SET_PORT_INFO;
typedef struct tagNET_OUT_PORTMANAGER_SET_PORT_INFO
{
    DWORD dwSize; 
} NET_OUT_PORTMANAGER_SET_PORT_INFO;
typedef enum tagEM_PORT_CONGESTION_STATUS
{
    EM_PORT_CONGESTION_UNKNOWN, 
    EM_PORT_CONGESTION_NO,      
    EM_PORT_CONGESTION_IN,      
    EM_PORT_CONGESTION_OUT,     
    EM_PORT_CONGESTION_ALL,     
} EM_PORT_CONGESTION_STATUS;
typedef struct tagNET_PORT_CONGESTION_INFO
{
    UINT nLocalPortId;                            
    EM_PORT_CONGESTION_STATUS emCongestionStatus; 
    TP_U64 nInRate;                               
    TP_U64 nOutRate;                              
    BYTE byReserved[1024];                        
} NET_PORT_CONGESTION_INFO;
typedef struct tagNET_CB_NMP_PORT_CONGESTION_INFO
{
    char szMAC[24];                                      
    NET_PORT_CONGESTION_INFO stuPortCongestionInfo[256]; 
    UINT nRetPortNum;                                    
    BYTE byReserved[1020];                               
} NET_CB_NMP_PORT_CONGESTION_INFO;
typedef void(CALLBACK* fNMPPortCongestionCallBack)(LLONG lAttachHandle, NET_CB_NMP_PORT_CONGESTION_INFO* pstNMPCongestion, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_NMP_PORT_CONGESTION
{
    DWORD dwSize;                                   
    BYTE byReserved[4];                             
    fNMPPortCongestionCallBack cbNMPPortCongestion; 
    LDWORD dwUser;                                  
} NET_IN_ATTACH_NMP_PORT_CONGESTION;
typedef struct tagNET_IP_CONFICT_ALARM_INFO
{
    char szAddress[64];    
    UINT nMacNum;          
    char szMac[128][24];   
    UINT nVlanId;          
    char szVlanIP[64];     
    BYTE byReserved[1024]; 
} NET_IP_CONFICT_ALARM_INFO;
typedef struct tagNET_NMP_LOOP_DETECT_INFO
{
    UINT nLoopNum;         
    UINT nLoopGroup[256];  
    BYTE byReserved[1020]; 
} NET_NMP_LOOP_DETECT_INFO;
typedef struct tagNET_NMP_ALARM_INFO
{
    NET_NMP_LOOP_DETECT_INFO stuLoopDetect[128];      
    UINT nLoopDetectNum;                              
    UINT nIPConfictAlarmNum;                          
    NET_IP_CONFICT_ALARM_INFO stuIPConfictAlarm[128]; 
    BYTE byReserved[1024];                            
} NET_NMP_ALARM_INFO;
typedef struct tagNET_CB_NMP_ALARM_INFO
{
    char szMAC[24];                     
    NET_NMP_ALARM_INFO stuNmpAlarmInfo; 
    BYTE byReserved[1024];              
} NET_CB_NMP_ALARM_INFO;
typedef void(CALLBACK* fNMPAlarmInfoCallBack)(LLONG lAttachHandle, NET_CB_NMP_ALARM_INFO* pstNMPAlarmInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_NMP_ALARM_INFO
{
    DWORD dwSize;                         
    BYTE byReserved[4];                   
    fNMPAlarmInfoCallBack cbNMPAlarmInfo; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_NMP_ALARM_INFO;
typedef struct tagNET_IN_GET_DEVICE_INFO_EX
{
    DWORD dwSize;              
    int nCount;                
    char szDeviceIDs[32][128]; 
} NET_IN_GET_DEVICE_INFO_EX;
typedef enum tagEM_DEVICE_ATTRIBUTE
{
    EM_DEVICE_ATTRIBUTE_UNKNOWN,   
    EM_DEVICE_ATTRIBUTE_MASTER,    
    EM_DEVICE_ATTRIBUTE_ASSISTANT, 
} EM_DEVICE_ATTRIBUTE;
typedef enum tagEM_NET_SERVER_TYPE
{
    EM_NET_SERVER_TYPE_UNKNOWN = -1, 
    EM_NET_SERVER_TYPE_AUTO,         
    EM_NET_SERVER_TYPE_TCP,          
    EM_NET_SERVER_TYPE_UDP,          
    EM_NET_SERVER_TYPE_MULTICAST,    
} EM_NET_SERVER_TYPE;
typedef enum tagEM_CHANNEL_PROTOCOL_TYPE
{
    EM_CHANNEL_PROTOCOL_TYPE_UNKNOWN, 
    EM_CHANNEL_PROTOCOL_TYPE_ONVIF,   
    EM_CHANNEL_PROTOCOL_TYPE_GB28181, 
    EM_CHANNEL_PROTOCOL_TYPE_RTSP,    
    EM_CHANNEL_PROTOCOL_TYPE_GB35114, 
} EM_CHANNEL_PROTOCOL_TYPE;
typedef struct tagNET_DEVICE_CHANNEL_INFO
{
    UINT nRemoteChannel;                     
    int nLogicChannel;                       
    char szChannelID[32];                    
    char szGbCode[32];                       
    char szName[128];                        
    char szDetail[512];                      
    char szDeviceType[64];                   
    char szDeviceClass[16];                  
    UINT nOnline;                            
    UINT nUsed;                              
    char szIP[40];                           
    char szMac[18];                          
    char szReserved1[6];                     
    char szSN[32];                           
    char szSoftwareVersion[128];             
    UINT nVideoInChannels;                   
    UINT nVideoOutChannels;                  
    UINT nAudioInChannels;                   
    UINT nAudioOutChannels;                  
    UINT nAlarmInChannels;                   
    UINT nAlarmOutChannels;                  
    UINT nMaxExtraStream;                    
    EM_NET_SERVER_TYPE emNetServerType;      
    EM_CHANNEL_PROTOCOL_TYPE emProtocolType; 
    char szReserved2[4];                     
    double dbTemperature;                    
    NET_TIME stuStateChangeTime;             
    char szVideoImageChannelID[32];          
    char szPlatformDoID[32];                 
    char szReserved[1024];                   
} NET_DEVICE_CHANNEL_INFO;
typedef struct tagNET_GET_DEVICE_INFO_EX
{
    char szDeviceID[128];                      
    char szUrl[512];                           
    char szSerialNo[64];                       
    char szGBCode[32];                         
    char szOrgCode[64];                        
    char szDeviceType[64];                     
    char szDeviceClass[16];                    
    int nMacCount;                             
    char szMacs[8][18];                        
    char szDevSoftVersion[128];                
    char szDeviceName[128];                    
    char szDetail[512];                        
    UINT nVideoInChannel;                      
    UINT nVideoOutChannel;                     
    UINT nAudioInChannel;                      
    UINT nAudioOutChannel;                     
    UINT nAlarmIn;                             
    UINT nAlarmOut;                            
    UINT nOnline;                              
    UINT nErrorCode;                           
    UINT nVtoDoors;                            
    UINT nIsPoeDevice;                         
    UINT nPoePort;                             
    BOOL bSupportedFR;                         
    BOOL bControlSpeaker;                      
    EM_DEVICE_ATTRIBUTE emDeviceAttribute;     
    BOOL bSupportedStatistic;                  
    BOOL bIsMainProtocolExist;                 
    BOOL bIsVideoImageEnable;                  
    UINT nVideoImageOnline;                    
    UINT nVideoImageErrorCode;                 
    char szVideoImageRegID[32];                
    int nMaxChannelCount;                      
    int nRetChannelCount;                      
    NET_DEVICE_CHANNEL_INFO* pstuChannelsInfo; 
    BOOL bControlLighter;                      
    char szReserved[1024];                     
} NET_GET_DEVICE_INFO_EX;
typedef struct tagNET_OUT_GET_DEVICE_INFO_EX
{
    DWORD dwSize;                           
    int nMaxCount;                          
    int nRetCount;                          
    NET_GET_DEVICE_INFO_EX* pstuDeviceInfo; 
} NET_OUT_GET_DEVICE_INFO_EX;
typedef struct tagNET_IN_SET_DEVICE_CHANNEL_INFO
{
    DWORD dwSize;                   
    char szDeviceID[128];           
    UINT nRemoteChannel;            
    char szName[128];               
    char szDetail[512];             
    char szMainStreamUrl[256];      
    char szChannelID[32];           
    char szVideoImageChannelID[32]; 
} NET_IN_SET_DEVICE_CHANNEL_INFO;
typedef struct tagNET_OUT_SET_DEVICE_CHANNEL_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_DEVICE_CHANNEL_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachDeviceState(LLONG lLoginID, const NET_IN_ATTACH_DEVICE_STATE* pInParam, NET_OUT_ATTACH_DEVICE_STATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachDeviceState(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AsyncAddDevice(LLONG lLoginID, const NET_IN_ASYNC_ADD_DEVICE* pInParam, NET_OUT_ASYNC_ADD_DEVICE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AsyncAddCustomDevice(LLONG lLoginID, const NET_IN_ASYNC_ADD_CUSTOM_DEVICE* pInParam, NET_OUT_ASYNC_ADD_CUSTOM_DEVICE* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachAddDevice(LLONG lLoginID, const NET_IN_ATTACH_ADD_DEVICE* pInParam, NET_OUT_ATTACH_ADD_DEVICE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachAddDevice(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAddDeviceInfo(LLONG lLoginID, const NET_IN_GET_ADD_DEVICE_LIST_INFO* pInParam, NET_OUT_GET_ADD_DEVICE_LIST_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDeviceInfo(LLONG lLoginID, const NET_IN_GET_DEVICE_LIST_INFO* pInParam, NET_OUT_GET_DEVICE_LIST_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetConnectChannel(LLONG lLoginID, const NET_IN_SET_CONNECT_CHANNEL* pInParam, NET_OUT_SET_CONNECT_CHANNEL* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetChannelInfo(LLONG lLoginID, const NET_IN_GET_CHANNEL_INFO* pInParam, NET_OUT_GET_CHANNEL_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveDevice(LLONG lLoginID, const NET_IN_REMOVE_DEVICE* pInParam, NET_OUT_REMOVE_DEVICE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CancelAddDeviceTask(LLONG lLoginID, const NET_IN_CANCEL_ADD_TASK* pInParam, NET_OUT_CANCEL_ADD_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ConfirmAddDeviceTask(LLONG lLoginID, const NET_IN_CONFIRM_ADD_TASK* pInParam, NET_OUT_CONFIRM_ADD_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNMPDevInfo(LLONG lLoginID, const NET_IN_GET_NMPDEV_INFO* pInParam, NET_OUT_GET_NMPDEV_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNMPDevCaps(LLONG lLoginID, const NET_IN_GET_NMPDEV_CAPS* pInParam, NET_OUT_GET_NMPDEV_CAPS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNMPPortInfoByPage(LLONG lLoginID, const NET_IN_GET_NMPPORT_BY_PAGE* pInParam, NET_OUT_GET_NMPPORT_BY_PAGE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNMPNeighborInfoByPage(LLONG lLoginID, const NET_IN_GET_NMPNEIGHBOR_BY_PAGE* pInParam, NET_OUT_GET_NMPNEIGHBOR_BY_PAGE* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachNMPPortStatus(LLONG lLoginID, const NET_IN_ATTACH_NMP_PORT_STATUS* pInParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachNMPPortStatus(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClearPortStatisticsInfo(LLONG lLoginID, const NET_IN_CLEAR_PORT_STATISTICS_INFO* pInParam, NET_OUT_CLEAR_PORT_STATISTICS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PortManagerSetPortInfo(LLONG lLoginID, const NET_IN_PORTMANAGER_SET_PORT_INFO* pInParam, NET_OUT_PORTMANAGER_SET_PORT_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachNMPPortCongestion(LLONG lLoginID, const NET_IN_ATTACH_NMP_PORT_CONGESTION* pInParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachNMPPortCongestion(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachNMPAlarmInfo(LLONG lLoginID, const NET_IN_ATTACH_NMP_ALARM_INFO* pInParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachNMPAlarmInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDeviceInfoEx(LLONG lLoginID, const NET_IN_GET_DEVICE_INFO_EX* pstuInParam, NET_OUT_GET_DEVICE_INFO_EX* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDeviceChannelInfo(LLONG lLoginID, const NET_IN_SET_DEVICE_CHANNEL_INFO* pstuInParam, NET_OUT_SET_DEVICE_CHANNEL_INFO* pstuOutParam, int nWaitTime);
#define MAX_BOARD_NUM 2 
typedef enum tagNET_EM_BOARD_STATE
{
    NET_EM_BOARD_STATE_UNKNOWN = 0, 
    NET_EM_BOARD_STATE_MASTER,      
    NET_EM_BOARD_STATE_SLAVE        
} NET_EM_BOARD_STATE;
typedef struct tagNET_BOARD_STATE_INFO
{
    char szTarget[DH_COMMON_STRING_64]; 
    NET_EM_BOARD_STATE emState;         
    int nBoardSlot;                     
    BYTE byReserved[1024];              
} NET_BOARD_STATE_INFO;
typedef struct tagNET_IN_GET_BOARD_STATE
{
    DWORD dwSize; 
} NET_IN_GET_BOARD_STATE;
typedef struct tagNET_OUT_GET_BOARD_STATE
{
    DWORD dwSize;                                          
    int nBoardRet;                                         
    NET_BOARD_STATE_INFO stuBoardStateList[MAX_BOARD_NUM]; 
} NET_OUT_GET_BOARD_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDCSDoubleDevBoardState(LLONG lLoginID, const NET_IN_GET_BOARD_STATE* pInParam, NET_OUT_GET_BOARD_STATE* pOutParam, int waittime);
typedef struct tagNET_IN_GET_ENCRYPT_SYSTEM_INFO
{
    DWORD dwSize;
} NET_IN_GET_ENCRYPT_SYSTEM_INFO;
typedef struct tagNET_OUT_GET_ENCRYPT_SYSTEM_INFO
{
    DWORD dwSize;
    char szEncryptContent[MAX_ENCRYPT_SYSTEM_INFO_CONTENT_LEN]; 
} NET_OUT_GET_ENCRYPT_SYSTEM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDiagnosisEncryptSystemInfo(LLONG lLoginID, const NET_IN_GET_ENCRYPT_SYSTEM_INFO* pInParam, NET_OUT_GET_ENCRYPT_SYSTEM_INFO* pOutParam, int nWaitTime);
#define MAX_LOG_LIST_COUNT 100
typedef enum tagEM_QUERY_EVENT_LOG_TYPE
{
    EM_QUERY_EVENT_LOG_TYPE_UNKNOWN,           
    EM_QUERY_EVENT_LOG_TYPE_MOTION_DETECT,     
    EM_QUERY_EVENT_LOG_TYPE_INPUT_ALARM,       
    EM_QUERY_EVENT_LOG_TYPE_VIDEO_LOSS,        
    EM_QUERY_EVENT_LOG_TYPE_NO_DISK,           
    EM_QUERY_EVENT_LOG_TYPE_DISK_ERROR,        
    EM_QUERY_EVENT_LOG_TYPE_DISK_FULL,         
    EM_QUERY_EVENT_LOG_TYPE_NET_ABORT,         
    EM_QUERY_EVENT_LOG_TYPE_IP_CONFLICT,       
    EM_QUERY_EVENT_LOG_TYPE_TEMPERATURE_ALARM, 
    EM_QUERY_EVENT_LOG_TYPE_POWER_FAULT,       
} EM_QUERY_EVENT_LOG_TYPE;
typedef struct tagNET_LOG_LIST_INFO
{
    EM_QUERY_EVENT_LOG_TYPE emEventType; 
    int nChannel;                        
    NET_TIME stStartTime;                
    BYTE byReserved[1024];               
} NET_LOG_LIST_INFO;
typedef struct tagNET_IN_QUERY_EVENT_LOG
{
    DWORD dwSize;                       
    char szUUID[MAX_COMMON_STRING_128]; 
} NET_IN_QUERY_EVENT_LOG;
typedef struct tagNET_OUT_QUERY_EVENT_LOG
{
    DWORD dwSize;                                    
    int nLogListCount;                               
    NET_LOG_LIST_INFO stLogList[MAX_LOG_LIST_COUNT]; 
    char szDeviceName[MAX_COMMON_STRING_64];         
    int nQueryID;                                    
} NET_OUT_QUERY_EVENT_LOG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryEventLog(LLONG lLoginID, const NET_IN_QUERY_EVENT_LOG* pInParam, NET_OUT_QUERY_EVENT_LOG* pOutParam, int nWaitTime);
typedef struct tagNET_IN_CONFIRM_EVENT_LOG
{
    DWORD dwSize;                      
    char szUUID[MAX_COMMON_STRING_64]; 
    int nQueryID;                      
} NET_IN_CONFIRM_EVENT_LOG;
typedef struct tagNET_OUT_CONFIRM_EVENT_LOG
{
    DWORD dwSize; 
} NET_OUT_CONFIRM_EVENT_LOG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ConfirmEventLog(LLONG lLoginID, const NET_IN_CONFIRM_EVENT_LOG* pInParam, NET_OUT_CONFIRM_EVENT_LOG* pOutParam, int nWaitTime);
#define DH_MAX_DISKLISK_NUM 1024 
typedef struct tagNET_IN_GET_BOUND_TIMEEX
{
    DWORD dwSize;                       
    int nDiskCount;                     
    int nDiskList[DH_MAX_DISKLISK_NUM]; 
} NET_IN_GET_BOUND_TIMEEX;
typedef struct tagNET_BOUND_TIME_INFO
{
    UINT nDiskNO;             
    NET_TIME_EX stuStartTime; 
    NET_TIME_EX stuEndTime;   
    BYTE byReserved[1024];    
} NET_BOUND_TIME_INFO;
typedef struct tagNET_OUT_GET_BOUND_TIMEEX
{
    DWORD dwSize;                                          
    int nRetDiskCount;                                     
    NET_BOUND_TIME_INFO stuBoundTime[DH_MAX_DISKLISK_NUM]; 
} NET_OUT_GET_BOUND_TIMEEX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetStorageBoundTimeEx(LLONG lLoginID, const NET_IN_GET_BOUND_TIMEEX* pInParam, NET_OUT_GET_BOUND_TIMEEX* pOutParam, int waittime);
typedef struct tagNET_IN_GET_PORTINFO
{
    DWORD dwSize; 
} NET_IN_GET_PORTINFO;
typedef struct tagNET_OUT_GET_PORTINFO
{
    DWORD dwSize;  
    UINT nTotal;   
    UINT nPlug;    
    UINT nMask;    
    UINT nBadDisk; 
    UINT nIDEDisk; 
    UINT nESATA;   
    UINT nUSB2;    
    UINT nUSB3;    
} NET_OUT_GET_PORTINFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetStoragePortInfo(LLONG lLoginID, const NET_IN_GET_PORTINFO* pInParam, NET_OUT_GET_PORTINFO* pOutParam, int waittime);
#define MAX_NASFILE_COUNT 1024
typedef enum tagEM_NAS_FILE_OPERATE_TYPE
{
    EM_NAS_FILE_OPERATE_TYPE_COPY,   
    EM_NAS_FILE_OPERATE_TYPE_MOVE,   
    EM_NAS_FILE_OPERATE_TYPE_REMOVE, 
} EM_NAS_FILE_OPERATE_TYPE;
typedef enum tagEM_NAS_FILE_OPTION
{
    EM_NAS_FILE_OPTION_UNKNOWN, 
    EM_NAS_FILE_OPTION_U,       
    EM_NAS_FILE_OPTION_F,       
} EM_NAS_FILE_OPTION;
typedef struct tagNET_IN_COPY_NAS_FILE
{
    DWORD dwSize;
    char szID[MAX_COMMON_STRING_128];                         
    int nSrcNum;                                              
    char szSrcList[MAX_NASFILE_COUNT][MAX_COMMON_STRING_128]; 
    char szDstPath[MAX_COMMON_STRING_128];                    
    EM_NAS_FILE_OPTION emOption;                              
} NET_IN_COPY_NAS_FILE;
typedef struct tagNET_OUT_COPY_NAS_FILE
{
    DWORD dwSize;
} NET_OUT_COPY_NAS_FILE;
typedef struct tagNET_IN_MOVE_NAS_FILE
{
    DWORD dwSize;
    char szID[MAX_COMMON_STRING_128];                         
    int nSrcNum;                                              
    char szSrcList[MAX_NASFILE_COUNT][MAX_COMMON_STRING_128]; 
    char szDstPath[MAX_COMMON_STRING_128];                    
    EM_NAS_FILE_OPTION emOption;                              
} NET_IN_MOVE_NAS_FILE;
typedef struct tagNET_OUT_MOVE_NAS_FILE
{
    DWORD dwSize;
} NET_OUT_MOVE_NAS_FILE;
typedef struct tagNET_IN_REMOVE_NAS_FILE
{
    DWORD dwSize;
    char szID[MAX_COMMON_STRING_128];                          
    int nFileNum;                                              
    char szFileName[MAX_NASFILE_COUNT][MAX_COMMON_STRING_128]; 
} NET_IN_REMOVE_NAS_FILE;
typedef struct tagNET_OUT_REMOVE_NAS_FILE
{
    DWORD dwSize;
} NET_OUT_REMOVE_NAS_FILE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateNASFile(LLONG lLoginID, EM_NAS_FILE_OPERATE_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime);
#define MAX_FILE_COMPRESS_COUNT 8 
typedef enum tagEM_COMPRESS_TYPE
{
    EM_COMPRESS_TYPE_UNKNWON, 
    EM_COMPRESS_TYPE_ZIP,     
} EM_COMPRESS_TYPE;
typedef struct tagNET_IN_COMPRESS_FILE
{
    DWORD dwSize;
    char szID[MAX_COMMON_STRING_128];                                   
    int nSrcNum;                                                        
    char szSrcFileList[MAX_FILE_COMPRESS_COUNT][MAX_COMMON_STRING_128]; 
    char szDstFile[MAX_COMMON_STRING_128];                              
    char szPassword[MAX_COMMON_STRING_64];                              
    EM_COMPRESS_TYPE emCompressType;                                    
} NET_IN_COMPRESS_FILE;
typedef struct tagNET_OUT_COMPRESS_FILE
{
    DWORD dwSize;
} NET_OUT_COMPRESS_FILE;
typedef struct tagNET_IN_DECOMPRESS_FILE
{
    DWORD dwSize;
    char szID[MAX_COMMON_STRING_128];      
    char szSrcFile[MAX_COMMON_STRING_128]; 
    char szDstPath[MAX_COMMON_STRING_128]; 
    char szPassword[MAX_COMMON_STRING_64]; 
} NET_IN_DECOMPRESS_FILE;
typedef struct tagNET_OUT_DECOMPRESS_FILE
{
    DWORD dwSize;
} NET_OUT_DECOMPRESS_FILE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateFileCompress(LLONG lLoginID, EM_FILE_COMPRESS_TYPE emOperateType, void* pInParam, void* pOutParam, int nWaitTime);
#define MAX_GROUP_CHANNEL_NUM 1024 
#define MAX_GROUPID_LEN 64         
#define MAX_GROUPNAME_LEN 128      
typedef struct tagNET_NUMBERSTATGROUP_SUBTOTAL
{
    int nTotal;              
    int nHour;               
    int nToday;              
    int nTotalInTimeSection; 
    BYTE byReserved[252];
} NET_NUMBERSTATGROUP_SUBTOTAL;
typedef struct tagNET_NUMBERSTATGROUP_SUMMARY
{
    char szGroupID[MAX_GROUPID_LEN];                 
    char szGroupName[MAX_GROUPNAME_LEN];             
    int nChannelNum;                                 
    int arChannelList[MAX_GROUP_CHANNEL_NUM];        
    NET_TIME_EX stuUTC;                              
    int nTimeZone;                                   
    NET_NUMBERSTATGROUP_SUBTOTAL stuEnteredSubtotal; 
    NET_NUMBERSTATGROUP_SUBTOTAL stuExitedSubtotal;  
    int nInsideSubtotal;                             
    BYTE byReserved[1024];                           
} NET_NUMBERSTATGROUP_SUMMARY;
typedef void(CALLBACK* fNumberStatGroupSumCallBack)(LLONG lAttachHandle, NET_NUMBERSTATGROUP_SUMMARY* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_NUMBERSTATGROUP_SUM
{
    DWORD dwSize;                                     
    fNumberStatGroupSumCallBack cbNumberStatGroupSum; 
    LDWORD dwUser;                                    
} NET_IN_ATTACH_NUMBERSTATGROUP_SUM;
typedef struct tagNET_OUT_ATTACH_NUMBERSTATGROUP_SUM
{
    DWORD dwSize; 
} NET_OUT_ATTACH_NUMBERSTATGROUP_SUM;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachNumberStatGroupSummary(LLONG lLoginID, const NET_IN_ATTACH_NUMBERSTATGROUP_SUM* pInParam, NET_OUT_ATTACH_NUMBERSTATGROUP_SUM* pOutParam, int waittime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachNumberStatGroupSummary(LLONG lAttachHandle);
typedef struct tagNET_IN_ADD_NUMBERSTATGROUP_INFO
{
    DWORD dwSize;                             
    char szGroupName[MAX_GROUPNAME_LEN];      
    int nChannelNum;                          
    int arChannelList[MAX_GROUP_CHANNEL_NUM]; 
} NET_IN_ADD_NUMBERSTATGROUP_INFO;
typedef struct tagNET_OUT_ADD_NUMBERSTATGROUP_INFO
{
    DWORD dwSize;                    
    char szGroupID[MAX_GROUPID_LEN]; 
} NET_OUT_ADD_NUMBERSTATGROUP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddNumberStatGroup(LLONG lLoginID, const NET_IN_ADD_NUMBERSTATGROUP_INFO* pInParam, NET_OUT_ADD_NUMBERSTATGROUP_INFO* pOutParam, int waittime);
typedef struct tagNET_IN_DEL_NUMBERSTATGROUP_INFO
{
    DWORD dwSize;                    
    char szGroupID[MAX_GROUPID_LEN]; 
} NET_IN_DEL_NUMBERSTATGROUP_INFO;
typedef struct tagNET_OUT_DEL_NUMBERSTATGROUP_INFO
{
    DWORD dwSize; 
} NET_OUT_DEL_NUMBERSTATGROUP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelNumberStatGroup(LLONG lLoginID, const NET_IN_DEL_NUMBERSTATGROUP_INFO* pInParam, NET_OUT_DEL_NUMBERSTATGROUP_INFO* pOutParam, int waittime);
typedef struct tagNET_NUMBERSTATGROUP_INFO
{
    char szGroupID[MAX_GROUPID_LEN];          
    char szGroupName[MAX_GROUPNAME_LEN];      
    int nChannelNum;                          
    int arChannelList[MAX_GROUP_CHANNEL_NUM]; 
    BYTE byReserved[512];                     
} NET_NUMBERSTATGROUP_INFO;
typedef struct tagNET_IN_MODIFY_NUMBERSTATGROUP_INFO
{
    DWORD dwSize; 
    NET_NUMBERSTATGROUP_INFO stuGroupInfo;
} NET_IN_MODIFY_NUMBERSTATGROUP_INFO;
typedef struct tagNET_OUT_MODIFY_NUMBERSTATGROUP_INFO
{
    DWORD dwSize; 
} NET_OUT_MODIFY_NUMBERSTATGROUP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyNumberStatGroup(LLONG lLoginID, const NET_IN_MODIFY_NUMBERSTATGROUP_INFO* pInParam, NET_OUT_MODIFY_NUMBERSTATGROUP_INFO* pOutParam, int waittime);
typedef struct tagNET_IN_NUMBERSTATGROUPS_INFO
{
    DWORD dwSize;                    
    char szGroupID[MAX_GROUPID_LEN]; 
} NET_IN_NUMBERSTATGROUPS_INFO;
typedef struct tagNET_OUT_NUMBERSTATGROUPS_INFO
{
    DWORD dwSize;                            
    int nGroupsRetNum;                       
    int nGroupsMaxNum;                       
    NET_NUMBERSTATGROUP_INFO* pstuGroupList; 
} NET_OUT_NUMBERSTATGROUPS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNumberStatGroups(LLONG lLoginID, const NET_IN_NUMBERSTATGROUPS_INFO* pInParam, NET_OUT_NUMBERSTATGROUPS_INFO* pOutParam, int waittime);
typedef struct tagNET_IN_NUMBERSTATGROUPSUMMARY_INFO
{
    DWORD dwSize;                    
    char szGroupID[MAX_GROUPID_LEN]; 
} NET_IN_NUMBERSTATGROUPSUMMARY_INFO;
typedef struct tagNET_OUT_NUMBERSTATGROUPSUMMARY_INFO
{
    DWORD dwSize;                           
    NET_NUMBERSTATGROUP_SUMMARY stuSummary; 
} NET_OUT_NUMBERSTATGROUPSUMMARY_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNumberStatGroupSummary(LLONG lLoginID, const NET_IN_NUMBERSTATGROUPSUMMARY_INFO* pInParam, NET_OUT_NUMBERSTATGROUPSUMMARY_INFO* pOutParam, int waittime);
typedef enum tagEM_NUMBERSTATGROUP_RULE_TYPE
{
    EM_NUMBERSTATGROUP_RULE_UNKNOWN = 0,
    EM_NUMBERSTATGROUP_RULE_NUMBERSTAT,         
    EM_NUMBERSTATGROUP_RULE_MANNUMBERDETECTION, 
} EM_NUMBERSTATGROUP_RULE_TYPE;
typedef enum tagEM_GRANULARITY_TYPE
{
    EM_GRANULARITY_UNKNOWN = 0,
    EM_GRANULARITY_MINUTE, 
    EM_GRANULARITY_HOUR,   
    EM_GRANULARITY_DAY,    
    EM_GRANULARITY_WEEK,   
    EM_GRANULARITY_MONTH,  
    EM_GRANULARITY_SEASON, 
    EM_GRANULARITY_YEAR    
} EM_GRANULARITY_TYPE;
typedef struct tagNET_IN_NUMBERSTATGROUP_START_FIND_INFO
{
    DWORD dwSize;                            
    char szGroupID[MAX_GROUPID_LEN];         
    NET_TIME stStartTime;                    
    NET_TIME stEndTime;                      
    EM_NUMBERSTATGROUP_RULE_TYPE emRuleType; 
    EM_GRANULARITY_TYPE emGranularity;       
    UINT nPlanID;                            
} NET_IN_NUMBERSTATGROUP_START_FIND_INFO;
typedef struct tagNET_OUT_NUMBERSTATGROUP_START_FIND_INFO
{
    DWORD dwSize;     
    UINT nTotalCount; 
} NET_OUT_NUMBERSTATGROUP_START_FIND_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindNumberStatGroup(LLONG lLoginID, const NET_IN_NUMBERSTATGROUP_START_FIND_INFO* pInParam, NET_OUT_NUMBERSTATGROUP_START_FIND_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_NUMBERSTATGROUP_RECORD
{
    char szGroupID[MAX_GROUPID_LEN];          
    char szGroupName[MAX_GROUPNAME_LEN];      
    int nChannelNum;                          
    int arChannelList[MAX_GROUP_CHANNEL_NUM]; 
    EM_NUMBERSTATGROUP_RULE_TYPE emRuleName;  
    NET_TIME_EX stuStartTime;                 
    NET_TIME_EX stuEndTime;                   
    UINT nEnteredSubtotal; 
    UINT nExitedSubtotal;  
    UINT nInsideSubtotal;  
    BYTE byReserved[1024]; 
} NET_NUMBERSTATGROUP_RECORD;
typedef struct tagNET_IN_NUMBERSTATGROUP_DO_FIND_INFO
{
    DWORD dwSize;
    int nStartNo; 
    int nCount;   
} NET_IN_NUMBERSTATGROUP_DO_FIND_INFO;
typedef struct tagNET_OUT_NUMBERSTATGROUP_DO_FIND_INFO
{
    DWORD dwSize;
    int nRetNum;                          
    int nMaxNum;                          
    NET_NUMBERSTATGROUP_RECORD* pstuInfo; 
} NET_OUT_NUMBERSTATGROUP_DO_FIND_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindNumberStatGroup(LLONG lFindHandle, const NET_IN_NUMBERSTATGROUP_DO_FIND_INFO* pInParam, NET_OUT_NUMBERSTATGROUP_DO_FIND_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindNumberStatGroup(LLONG lFindHandle);
#define MAX_SECONDARY_ANALYSE_TASK_NUM 32 
#define MAX_SECONDARY_ANALYSE_RULE_NUM 8  
#define MAX_SECONDARY_ANALYSE_EVENT_NUM 8 
typedef enum tagEM_SECONDARY_ANALYSE_STATE
{
    EM_SECONDARY_ANALYSE_UNKNOWN,            
    EM_SECONDARY_ANALYSE_WAIT_DOWNLOAD,      
    EM_SECONDARY_ANALYSE_DOWNLOADING,        
    EM_SECONDARY_ANALYSE_WAIT_ANALYSE,       
    EM_SECONDARY_ANALYSE_ANALYSING,          
    EM_SECONDARY_ANALYSE_FINISH_ANALYSE,     
    EM_SECONDARY_ANALYSE_DOWNLOAD_FAILED,    
    EM_SECONDARY_ANALYSE_CANCELLED,          
    EM_SECONDARY_ANALYSE_NOTENOUGH_ANALYSER, 
    EM_SECONDARY_ANALYSE_ANALYSER_ERROR,     
    EM_SECONDARY_ANALYSE_PAUSE_DOWNLOAD,     
    EM_SECONDARY_ANALYSE_PAUSE_ANALYSE,      
} EM_SECONDARY_ANALYSE_STATE;
typedef struct tagNET_ANALYSE_TASK_INFO
{
    UINT nTaskID;                              
    EM_SECONDARY_ANALYSE_STATE emAnalyseState; 
    char szTaskName[DH_COMMON_STRING_128];     
    UINT nProgress;                            
    BYTE byReserved[516];                      
} NET_ANALYSE_TASK_INFO;
typedef struct tagNET_CB_SECONDARY_ANALYSE_INFO
{
    int nRetAnalyseTaskCount;                                                 
    BYTE byReserved1[4];                                                      
    NET_ANALYSE_TASK_INFO stuAnalyseTaskInfo[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
    LDWORD dwUser;                                                            
    BYTE byReserved[512];                                                     
} NET_CB_SECONDARY_ANALYSE_INFO;
typedef int(CALLBACK* fSecondaryAnalyseCallBack)(LLONG lAnalyseHandle, NET_CB_SECONDARY_ANALYSE_INFO* pstSecondaryAnalyseInfo);
typedef struct tagNET_IN_ATTACH_SECONDARY_ANALYSE_STATE
{
    DWORD dwSize;                                 
    BYTE byReserved[4];                           
    fSecondaryAnalyseCallBack cbSecondaryAnalyse; 
    LDWORD dwUser;                                
} NET_IN_ATTACH_SECONDARY_ANALYSE_STATE;
typedef struct tagNET_OUT_ATTACH_SECONDARY_ANALYSE_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECONDARY_ANALYSE_STATE;
typedef struct tagNET_ANALYSE_RULE_FACE_ANALYSIS_INFO
{
    UINT nSimilarity;                                     
    UINT nGroupNum;                                       
    char szGroupID[MAX_FACE_DB_NUM][DH_COMMON_STRING_64]; 
    BYTE byReserved[1024];                                
} NET_ANALYSE_RULE_FACE_ANALYSIS_INFO;
typedef enum tagEM_ANALYSE_RULE_TYPE
{
    EM_ANALYSE_RULE_UNKNOWN,        
    EM_ANALYSE_RULE_FACE_ANALYSIS,  
    EM_ANALYSE_RULE_FACE_ATTRIBUTE, 
} EM_ANALYSE_RULE_TYPE;
typedef enum tagEM_ANALYSE_EVENT_TYPE
{
    EM_ANALYSE_EVENT_UNKNOWN,                         
    EM_ANALYSE_EVENT_ALL,                             
    EM_ANALYSE_EVENT_FACE_DETECTION,                  
    EM_ANALYSE_EVENT_FACE_RECOGNITION,                
    EM_ANALYSE_EVENT_TRAFFICJUNCTION,                 
    EM_ANALYSE_EVENT_HUMANTRAIT,                      
    EM_ANALYSE_EVENT_XRAY_DETECTION,                  
    EM_ANALYSE_EVENT_WORKCLOTHESDETECT,               
    EM_ANALYSE_EVENT_WORKSTATDETECTION,               
    EM_ANALYSE_EVENT_CORSSLINEDETECTION,              
    EM_ANALYSE_EVENT_CROSSREGIONDETECTION,            
    EM_ANALYSE_EVENT_FEATURE_ABSTRACT,                
    EM_ANALYSE_EVENT_ELECTRIC_GLOVE_DETECT,           
    EM_ANALYSE_EVENT_ELECTRIC_LADDER_DETECT,          
    EM_ANALYSE_EVENT_ELECTRIC_CURTAIN_DETECT,         
    EM_ANALYSE_EVENT_ELECTRIC_FENCE_DETECT,           
    EM_ANALYSE_EVENT_ELECTRIC_SIGNBOARD_DETECT,       
    EM_ANALYSE_EVENT_ELECTRIC_BELT_DETECT,            
    EM_ANALYSE_EVENT_BANNER_DETECTION,                
    EM_ANALYSE_EVENT_SMART_KITCHEN_CLOTHES_DETECTION, 
    EM_ANALYSE_EVENT_WATER_STAGE_MONITOR,             
    EM_ANALYSE_EVENT_FLOATINGOBJECT_DETECTION,        
    EM_ANALYSE_EVENT_IVS_RIOTERDETECTION,             
    EM_ANALYSE_EVENT_IVS_LEFTDETECTION,               
    EM_ANALYSE_EVENT_IVS_PARKINGDETECTION,            
    EM_ANALYSE_EVENT_IVS_WANDERDETECTION,             
    EM_ANALYSE_EVENT_IVS_VIDEOABNORMALDETECTION,      
    EM_ANALYSE_EVENT_MOVEDETECTION,                   
    EM_ANALYSE_EVENT_VIDEO_NORMAL_DETECTION,          
    EM_ANALYSE_EVENT_CONVEYER_BELT_BULK,              
    EM_ANALYSE_EVENT_CONVEYER_BELT_NONLOAD,           
    EM_ANALYSE_EVENT_CONVEYER_BELT_RUNOFF,            
    EM_ANALYSE_EVENT_CONVEYER_BELT_BLOCK,             
    EM_ANALYSE_EVENT_NUMBER_STAT,                     
    EM_ANALYSE_EVENT_FIGHTDETECTION,                  
    EM_ANALYSE_EVENT_SMOKEDETECTION,                  
    EM_ANALYSE_EVENT_FIREDETECTION,                   
    EM_ANALYSE_EVENT_PHONECALL_DETECT,                
    EM_ANALYSE_EVENT_SMOKING_DETECT,                  
    EM_ANALYSE_EVENT_TUMBLE_DETECTION,                
    EM_ANALYSE_EVENT_WATER_LEVEL_DETECTION,           
    EM_ANALYSE_EVENT_CLIMBDETECTION,                  
    EM_ANALYSE_EVENT_MAN_NUM_DETECTION,               
    EM_ANALYSE_EVENT_DIALRECOGNITION,                 
    EM_ANALYSE_EVENT_ELECTRICFAULT_DETECT,            
    EM_ANALYSE_EVENT_IVS_TRAFFIC_ROAD_BLOCK,          
    EM_ANALYSE_EVENT_IVS_TRAFFIC_ROAD_CONSTRUCTION,   
    EM_ANALYSE_EVENT_IVS_TRAFFIC_FLOWSTATE,           
    EM_ANALYSE_EVENT_IVS_TRAFFIC_OVERSPEED,           
    EM_ANALYSE_EVENT_IVS_TRAFFIC_UNDERSPEED,          
    EM_ANALYSE_EVENT_IVS_TRAFFIC_OVERYELLOWLINE,      
    EM_ANALYSE_EVENT_IVS_TRAFFIC_CROSSLANE,           
    EM_ANALYSE_EVENT_IVS_TRAFFICJAM,                  
    EM_ANALYSE_EVENT_IVS_TRAFFIC_PEDESTRAIN,          
    EM_ANALYSE_EVENT_IVS_TRAFFIC_THROW,               
    EM_ANALYSE_EVENT_IVS_TRAFFIC_RETROGRADE,          
    EM_ANALYSE_EVENT_IVS_TRAFFICACCIDENT,             
    EM_ANALYSE_EVENT_IVS_TRAFFIC_BACKING,             
    EM_ANALYSE_EVENT_IVS_FOG_DETECTION,               
    EM_ANALYSE_EVENT_IVS_CROSSREGIONDETECTION,        
    EM_ANALYSE_EVENT_IVS_TRAFFIC_PARKING,             
    EM_ANALYSE_EVENT_IVS_FINANCE_CASH_TRANSACTION,    
    EM_ANALYSE_EVENT_IVS_LEAVEDETECTION,              
    EM_ANALYSE_EVENT_IVS_LADLE_NO_DETECTION,          
    EM_ANALYSE_EVENT_IVS_STAYDETECTION,               
    EM_ANALYSE_EVENT_IVS_NEAR_OBJECT_DETECT,          
    EM_ANALYSE_EVENT_IVS_CRANE_LOAD_STAY_DETECTION,   
    EM_ANALYSE_EVENT_IVS_PIC_COMPARE_DETECTION,       
    EM_ANALYSE_EVENT_CONVEYOR_ARTICLE_TYPE,           
    EM_ANALYSE_EVENT_CROSSLINEDETECTION_EX = 2000, 
} EM_ANALYSE_EVENT_TYPE;
typedef struct tagNET_ANALYSE_INFO
{
    EM_ANALYSE_RULE_TYPE emAnalyseType; 
    BYTE byReserved1[4];                
    void* pRuleInfo;                    
    BYTE byReserved[512];               
} NET_ANALYSE_INFO;
typedef struct tagNET_SECONDARY_ANALYSE_TASK_INFO
{
    char szRecordPath[DH_COMMON_STRING_256];                         
    int nAnalyseCount;                                               
    NET_ANALYSE_INFO stuAnalyseInfo[MAX_SECONDARY_ANALYSE_RULE_NUM]; 
    char szTaskName[DH_COMMON_STRING_128];                           
    BOOL bNeedSave;                                                  
    BYTE byReserved[1024];                                           
} NET_SECONDARY_ANALYSE_TASK_INFO;
typedef struct tagNET_IN_SECONDARY_ANALYSE_ADDTASK
{
    DWORD dwSize;                                                                       
    int nAnalyseTaskCount;                                                              
    NET_SECONDARY_ANALYSE_TASK_INFO stuAnalyseTaskInfo[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
} NET_IN_SECONDARY_ANALYSE_ADDTASK;
typedef struct tagNET_TASK_ADD_RESULT_INFO
{
    UINT nTaskID;                           
    char szLocalPath[DH_COMMON_STRING_256]; 
    BYTE byReserved[1024];                  
} NET_TASK_ADD_RESULT_INFO;
typedef struct tagNET_OUT_SECONDARY_ANALYSE_ADDTASK
{
    DWORD dwSize;                                                           
    UINT nRetTaskResultNum;                                                 
    NET_TASK_ADD_RESULT_INFO stuResultInfo[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
} NET_OUT_SECONDARY_ANALYSE_ADDTASK;
typedef struct tagNET_IN_SECONDARY_ANALYSE_STARTTASK
{
    DWORD dwSize;                                 
    UINT nTaskIdNum;                              
    UINT nTaskID[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
} NET_IN_SECONDARY_ANALYSE_STARTTASK;
typedef struct tagNET_OUT_SECONDARY_ANALYSE_STARTTASK
{
    DWORD dwSize; 
} NET_OUT_SECONDARY_ANALYSE_STARTTASK;
typedef struct tagNET_IN_SECONDARY_ANALYSE_PAUSETASK
{
    DWORD dwSize;                                 
    UINT nTaskIdNum;                              
    UINT nTaskID[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
} NET_IN_SECONDARY_ANALYSE_PAUSETASK;
typedef struct tagNET_OUT_SECONDARY_ANALYSE_PAUSETASK
{
    DWORD dwSize; 
} NET_OUT_SECONDARY_ANALYSE_PAUSETASK;
typedef struct tagNET_IN_SECONDARY_ANALYSE_REMOVETASK
{
    DWORD dwSize;                                 
    UINT nTaskIdNum;                              
    UINT nTaskID[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
} NET_IN_SECONDARY_ANALYSE_REMOVETASK;
typedef struct tagNET_OUT_SECONDARY_ANALYSE_REMOVETASK
{
    DWORD dwSize; 
} NET_OUT_SECONDARY_ANALYSE_REMOVETASK;
typedef struct tagNET_IN_SECONDARY_ANALYSE_STARTFIND_TASK
{
    DWORD dwSize;                                 
    UINT nTaskNum;                                
    UINT nTaskID[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
} NET_IN_SECONDARY_ANALYSE_STARTFIND_TASK;
typedef struct tagNET_OUT_SECONDARY_ANALYSE_STARTFIND_TASK
{
    DWORD dwSize;     
    UINT nTotalCount; 
} NET_OUT_SECONDARY_ANALYSE_STARTFIND_TASK;
typedef struct tagNET_SECONDARY_ANALYSE_TASK_STATE_INFO
{
    UINT nTaskID;                                                    
    char szTaskName[DH_COMMON_STRING_256];                           
    char szRecordPath[DH_COMMON_STRING_256];                         
    BOOL bNeedSave;                                                  
    char szLoaclPath[DH_COMMON_STRING_256];                          
    EM_SECONDARY_ANALYSE_STATE emAnalyseState;                       
    NET_TIME stuStartTime;                                           
    NET_TIME stuFinishTime;                                          
    UINT nProgress;                                                  
    int nAnalyseCount;                                               
    NET_ANALYSE_INFO stuAnalyseInfo[MAX_SECONDARY_ANALYSE_RULE_NUM]; 
    BYTE byReserved[1024];                                           
} NET_SECONDARY_ANALYSE_TASK_STATE_INFO;
typedef struct tagNET_IN_SECONDARY_ANALYSE_DOFIND_TASK
{
    DWORD dwSize;      
    UINT nBeginNumber; 
    UINT nCount;       
} NET_IN_SECONDARY_ANALYSE_DOFIND_TASK;
typedef struct tagNET_OUT_SECONDARY_ANALYSE_DOFIND_TASK
{
    DWORD dwSize;                                                                             
    UINT nFoundCount;                                                                         
    NET_SECONDARY_ANALYSE_TASK_STATE_INFO stuAnalyseTaskInfo[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
} NET_OUT_SECONDARY_ANALYSE_DOFIND_TASK;
typedef struct tagNET_SECONDARY_ANALYSE_EVENT_INFO
{
    EM_ANALYSE_EVENT_TYPE emEventType; 
    BYTE byReserved1[4];               
    void* pstEventInfo;                
    BYTE byReserved[1024];             
} NET_SECONDARY_ANALYSE_EVENT_INFO;
typedef struct tagNET_CB_ANALYSE_RESULT_INFO
{
    UINT nTaskID;                                                                   
    NET_TIME stuPicTime;                                                            
    int nRetEventCount;                                                             
    NET_SECONDARY_ANALYSE_EVENT_INFO stuEventInfo[MAX_SECONDARY_ANALYSE_EVENT_NUM]; 
    LDWORD dwUser;                                                                  
    char szUserData[64];                                                            
    BYTE byReserved[960];                                                           
} NET_CB_ANALYSE_RESULT_INFO;
typedef int(CALLBACK* fAnalyseResultCallBack)(LLONG lAnalyseHandle, NET_CB_ANALYSE_RESULT_INFO* pstAnalyseResultInfo, BYTE* pBuffer, DWORD dwBufSize);
typedef struct tagNET_IN_ATTACH_SECONDARY_ANALYSE_RESULT
{
    DWORD dwSize;                                                      
    int nTaskNum;                                                      
    UINT nTaskID[MAX_SECONDARY_ANALYSE_TASK_NUM];                      
    int nEventCount;                                                   
    EM_ANALYSE_EVENT_TYPE emEventType[MAX_SECONDARY_ANALYSE_TASK_NUM]; 
    BOOL bNeedPicData;                                                 
    fAnalyseResultCallBack cbAnalyseResult;                            
    LDWORD dwUser;                                                     
} NET_IN_ATTACH_SECONDARY_ANALYSE_RESULT;
typedef struct tagNET_OUT_ATTACH_SECONDARY_ANALYSE_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECONDARY_ANALYSE_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRecordSecondaryAnalyseTaskState(LLONG lLoginID, NET_IN_ATTACH_SECONDARY_ANALYSE_STATE* pstInParam, NET_OUT_ATTACH_SECONDARY_ANALYSE_STATE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRecordSecondaryAnalyseState(LLONG lAnalyseHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordSecondaryAnalyseAddTask(LLONG lLoginID, NET_IN_SECONDARY_ANALYSE_ADDTASK* pstInParam, NET_OUT_SECONDARY_ANALYSE_ADDTASK* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordSecondaryAnalyseStartTask(LLONG lLoginID, NET_IN_SECONDARY_ANALYSE_STARTTASK* pstInParam, NET_OUT_SECONDARY_ANALYSE_STARTTASK* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordSecondaryAnalysePauseTask(LLONG lLoginID, NET_IN_SECONDARY_ANALYSE_PAUSETASK* pstInParam, NET_OUT_SECONDARY_ANALYSE_PAUSETASK* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordSecondaryAnalyseRemoveTask(LLONG lLoginID, NET_IN_SECONDARY_ANALYSE_REMOVETASK* pstInParam, NET_OUT_SECONDARY_ANALYSE_REMOVETASK* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RecordSecondaryAnalyseStartFindTask(LLONG lLoginID, NET_IN_SECONDARY_ANALYSE_STARTFIND_TASK* pstInParam, NET_OUT_SECONDARY_ANALYSE_STARTFIND_TASK* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordSecondaryAnalyseDoFindTask(LLONG lFindHandle, NET_IN_SECONDARY_ANALYSE_DOFIND_TASK* pstInParam, NET_OUT_SECONDARY_ANALYSE_DOFIND_TASK* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecordSecondaryAnalyseStopFindTask(LLONG lFindHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRecordSecondaryAnalyseResult(LLONG lLoginID, NET_IN_ATTACH_SECONDARY_ANALYSE_RESULT* pstInParam, NET_OUT_ATTACH_SECONDARY_ANALYSE_RESULT* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRecordSecondaryAnalyseResult(LLONG lAttachHandle);
typedef enum tagEM_COMPARE_RESULT
{
    EM_COMPARE_RESULT_UNKNOWN = -1,                  
    EM_COMPARE_RESULT_SUCCESS,                       
    EM_COMPARE_RESULT_OTHERERROR,                    
    EM_COMPARE_RESULT_NOTINDATABASE,                 
    EM_COMPARE_RESULT_EXCEED_SINGLE_DAY_ENTER_TIMES, 
    EM_COMPARE_RESULT_NO_ENTER_RECORD_LEAVE_FAIL,    
    EM_COMPARE_RESULT_AREA_FULL,                     
    EM_COMPARE_RESULT_REPEATENTER_CHECK_FAIL,        
} EM_COMPARE_RESULT;
typedef enum tagEM_FACE_OPEN_DOOR_TYPE
{
    EM_FACE_OPEN_DOOR_TYPE_UNKNOWN = 0, 
    EM_FACE_OPEN_DOOR_TYPE_REMOTEFACE,  
    EM_FACE_OPEN_DOOR_TYPE_REMOTEQRCODE 
} EM_FACE_OPEN_DOOR_TYPE;
typedef enum tagEM_EDUCATION_INFO_TYPE
{
    EM_EDUCATION_INFO_TYPE_UNKNOWN,                  
    EM_EDUCATION_INFO_TYPE_CHECK_IN,                 
    EM_EDUCATION_INFO_TYPE_SIGN_BACK,                
    EM_EDUCATION_INFO_TYPE_ROLL_CALL,                
    EM_EDUCATION_INFO_TYPE_LEARNING_ABNORMAL,        
    EM_EDUCATION_INFO_TYPE_EXAMINATION,              
    EM_EDUCATION_INFO_TYPE_END_OF_STUDY,             
    EM_EDUCATION_INFO_TYPE_EXPERIENCE_LEARNING,      
    EM_EDUCATION_INFO_TYPE_NOT_LEARNING,             
    EM_EDUCATION_INFO_TYPE_MIDWAY_IN,                
    EM_EDUCATION_INFO_TYPE_MIDWAY_LEAVE,             
    EM_EDUCATION_INFO_TYPE_CAMPUS_TIPS,              
    EM_EDUCATION_INFO_TYPE_PHOTO_REPEAT,             
    EM_EDUCATION_INFO_TYPE_LOW_FACE_QUALITY,         
    EM_EDUCATION_INFO_TYPE_FACE_BRIGHTNESS_TOO_LOW,  
    EM_EDUCATION_INFO_TYPE_FACE_BRIGHTNESS_TOO_HIGH, 
    EM_EDUCATION_INFO_TYPE_FACE_BRIGHTNESS_UNEVEN,   
    EM_EDUCATION_INFO_TYPE_PROVIDE_FRONT_FACE_PHOTO, 
    EM_EDUCATION_INFO_TYPE_UNCLEAR_FACE,             
    EM_EDUCATION_INFO_TYPE_EYE_BEEN_COVERED,         
    EM_EDUCATION_INFO_TYPE_FACE_TOO_SMALL,           
    EM_EDUCATION_INFO_TYPE_PROVIDE_COLOR_PHOTO,      
    EM_EDUCATION_INFO_TYPE_ABSENCE_OF_FACE,          
    EM_EDUCATION_INFO_TYPE_NOT_WEAR_MASK,            
    EM_EDUCATION_INFO_TYPE_PHOTO_TOO_BIG,            
    EM_EDUCATION_INFO_TYPE_PHOTO_TOO_SAMLL,          
} EM_EDUCATION_INFO_TYPE;
typedef enum tagEM_CUSTOM_EDUCATION_VOICE_TYPE
{
    EM_CUSTOM_EDUCATION_VOICE_TYPE_UNKNOWN,                                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE_LEAVE_SCHOOL_TIMEOUT,                       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ENTER_SCHOOL_TIMEOUT,                       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_LEAVE_SCHOOL,                               
    EM_CUSTOM_EDUCATION_VOICE_TYPE_CARD_NOT_BIND,                              
    EM_CUSTOM_EDUCATION_VOICE_TYPE_BOARDER,                                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE_PARENT_CARD_REPORT_LOST,                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ENTER_SCHOOL_OVERDUE,                       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_PACKAGE_TO_PICKUP,                          
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ASKFORLEAVE,                                
    EM_CUSTOM_EDUCATION_VOICE_TYPE_RETURN_SCHOOL_TIMEOUT_WHEN_ASKFORLEAVE,     
    EM_CUSTOM_EDUCATION_VOICE_TYPE_INANDOUT_SCHOOL_TIMENOTUP_WHEN_ASKFORLEAVE, 
    EM_CUSTOM_EDUCATION_VOICE_TYPE_REFUSE_LEAVE_SCHOOL_WHEN_ASKFORLEAVE,       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_REFUSE_ENTER_SCHOOL_WHEN_ASKFORLEAVE,       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ASKFORLEAVE_IN_REVIEW,                      
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ASKFORLEAVE_EXPIRED,                        
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ASKFORLEAVE_APPROVED,                       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_FORBID_LEAVE_SCHOOL_WITH_LEAVE_INVALID,     
    EM_CUSTOM_EDUCATION_VOICE_TYPE_TIME_ISNOT_UP,                              
    EM_CUSTOM_EDUCATION_VOICE_TYPE_NOT_APPOINT,                                
    EM_CUSTOM_EDUCATION_VOICE_TYPE_NO_PASSAGE_IN_NONPERMIT_TIMESECTION,        
    EM_CUSTOM_EDUCATION_VOICE_TYPE_INVALID_CARD,                               
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ALREADY_APPOINTED,                          
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ALLOW_BACK_SCHOOL,                          
    EM_CUSTOM_EDUCATION_VOICE_TYPE_GOODBYE,                                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ENTER_SCHOOL_NORMALLY,                      
    EM_CUSTOM_EDUCATION_VOICE_TYPE_REPEAT_LEAVE_SCHOOLL,                       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_REPEAT_ENTER_SCHOOLL,                       
    EM_CUSTOM_EDUCATION_VOICE_TYPE_DAY_STUDENT,                                
    EM_CUSTOM_EDUCATION_VOICE_TYPE_WELCOME,                                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE_FACULTY,                                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE_TEACHER,                                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE_HELLO_TEACHER,                              
    EM_CUSTOM_EDUCATION_VOICE_TYPE_ALLOW_ACCESS = 33,                          
    EM_CUSTOM_EDUCATION_VOICE_TYPE_TTS_TEXT_VOICE_OUTPUT = 50,                 
} EM_CUSTOM_EDUCATION_VOICE_TYPE;
typedef struct tagNET_CUSTOM_EDUCATION_INFO
{
    EM_EDUCATION_INFO_TYPE emInfoType;          
    int nStudentSeatNumber;                     
    char szInfoContent[128];                    
    EM_CUSTOM_EDUCATION_VOICE_TYPE emVoiceType; 
} NET_CUSTOM_EDUCATION_INFO;
typedef struct tagNET_EPIDEMIC_AREA_EXPERIENCE
{
    char szAddress[128];  
    NET_TIME stuTime;     
    BYTE byReserved[256]; 
} NET_EPIDEMIC_AREA_EXPERIENCE;
typedef enum tagEM_HEALTH_CODE_STATUS
{
    EM_HEALTH_CODE_STATUS_UNKNOWN = 0, 
    EM_HEALTH_CODE_STATUS_RED,         
    EM_HEALTH_CODE_STATUS_GREEN,       
    EM_HEALTH_CODE_STATUS_YELLOW,      
    EM_HEALTH_CODE_STATUS_INVALID,     
    EM_HEALTH_CODE_STATUS_GREY,        
    EM_HEALTH_CODE_STATUS_ORANGE,      
    EM_HEALTH_CODE_STATUS_PURPLE,      
} EM_HEALTH_CODE_STATUS;
typedef struct tagNET_HEALTH_CODE_INFO
{
    char szCitizenID[32];                                       
    char szCitizenName[128];                                    
    char szPermanentAddr[128];                                  
    char szCurrentAddr[128];                                    
    EM_HEALTH_CODE_STATUS emHealthCodeStatus;                   
    char szPhoneNumber[32];                                     
    char szAbnormalCodeReason[256];                             
    NET_TIME stuQueryTime;                                      
    int nEpidemicAreaExperience;                                
    NET_EPIDEMIC_AREA_EXPERIENCE stuEpidemicAreaExperience[10]; 
    BYTE byReserved[512];                                       
} NET_HEALTH_CODE_INFO;
typedef enum tagEM_IDCARD_MSG_TYPE
{
    EM_IDCARD_MSG_TYP_UNKNOWN = 0,       
    EM_IDCARD_MSG_TYP_QUERY,             
    EM_IDCARD_MSG_TYPE_ISSUE_PERMISSION, 
} EM_IDCARD_MSG_TYPE;
typedef struct tagNET_IDCARD_INFO
{
    EM_IDCARD_MSG_TYPE emIDCardMsgType;  
    char szCitizenName[32];              
    EM_CITIZENIDCARD_SEX_TYPE emSexType; 
    int nMZ;
    NET_TIME stuBirthday;       
    char szAddress[128];        
    char szCitizenID[32];       
    char szAuthority[48];       
    NET_TIME stuBeginValidTime; 
    NET_TIME stuEndValidTime;   
    int nEventGroupID;          
    BYTE byReserved[1024];      
} NET_IDCARD_INFO;
typedef enum tagEM_ALCOHOL_STATE
{
    EM_ALCOHOL_STATE_UNKNOWN, 
    EM_ALCOHOL_STATE_NORMAL,  
    EM_ALCOHOL_STATE_DRINK,   
} EM_ALCOHOL_STATE;
typedef enum tagEM_BUS_REPAIR_STATE
{
    EM_BUS_REPAIR_STATE_UNKNOWN,    
    EM_BUS_REPAIR_STATE_NOT_REPAIR, 
    EM_BUS_REPAIR_STATE_REPAIRING,  
} EM_BUS_REPAIR_STATE;
typedef enum tagEM_BUS_OIL_STATE
{
    EM_BUS_OIL_STATE_UNKNOWN,    
    EM_BUS_OIL_STATE_REFUELED,   
    EM_BUS_OIL_STATE_NOT_REFUEL, 
} EM_BUS_OIL_STATE;
typedef enum tagEM_BUS_WASH_STATE
{
    EM_BUS_WASH_STATE_UNKNOWN,  
    EM_BUS_WASH_STATE_WASHED,   
    EM_BUS_WASH_STATE_NOT_WASH, 
} EM_BUS_WASH_STATE;
typedef enum tagEM_BUS_CASH_STATE
{
    EM_BUS_CASH_STATE_UNKNOWN,   
    EM_BUS_CASH_STATE_COLLECTED, 
    EM_BUS_CASH_STATE_UNCOLLECT, 
} EM_BUS_CASH_STATE;
typedef enum tagEM_SCHEDULE_STATE
{
    EM_SCHEDULE_STATE_UNKNOWN,      
    EM_SCHEDULE_STATE_SCHEDULED,    
    EM_SCHEDULE_STATE_NOT_SCHEDULE, 
} EM_SCHEDULE_STATE;
typedef struct tagNET_BUS_STATION_INFO
{
    char szBusNo[64];                  
    char szParkPosition[64];           
    EM_ALCOHOL_STATE emAlcoholState;   
    EM_BUS_REPAIR_STATE emRepairState; 
    EM_BUS_OIL_STATE emOilState;       
    EM_BUS_WASH_STATE emWashState;     
    EM_BUS_CASH_STATE emCashState;     
    EM_SCHEDULE_STATE emScheduleState; 
    BYTE byReserved[1024];             
} NET_BUS_STATION_INFO;
typedef struct tagNET_CUSTOM_WORKER_INFO
{
    char szSex[8];             
    char szRole[32];           
    char szProjNo[32];         
    char szProjName[64];       
    char szBuilderName[64];    
    char szBuilderID[32];      
    char szBuilderType[32];    
    char szBuliderTypeID[8];   
    char szPictureID[64];      
    char szContractID[16];     
    char szWorkerTypeID[8];    
    char szWorkerTypeName[32]; 
    BOOL bPersonStatus;        
    BOOL bProjNameEx;          
    char szProjNameEx[256];    
    BYTE bReserved[1388];      
} NET_CUSTOM_WORKER_INFO;
typedef struct tagNET_CUSTOM_VISITOR_INFO
{
    char szVisitorName[128];       
    char szVisitorTel[32];         
    char szVisitorStartTime[32];   
    char szVisitorEndTime[32];     
    char szVisitorAccessFor[256];  
    char szVisitorCitizenID[32];   
    char szRespondentName[128];    
    char szRespondentTel[32];      
    char szRespondentCompany[128]; 
    char szRespondentSection[64];  
    char szReserved[1024];         
} NET_CUSTOM_VISITOR_INFO;
typedef enum tagEM_CUSTOM_MEDICAL_VOICE_TYPE
{
    EM_CUSTOM_MEDICAL_VOICE_TYPE_UNKNOWN, 
    EM_CUSTOM_MEDICAL_VOICE_TYPE_1,       
    EM_CUSTOM_MEDICAL_VOICE_TYPE_2,       
    EM_CUSTOM_MEDICAL_VOICE_TYPE_3,       
    EM_CUSTOM_MEDICAL_VOICE_TYPE_4,       
    EM_CUSTOM_MEDICAL_VOICE_TYPE_5,       
    EM_CUSTOM_MEDICAL_VOICE_TYPE_6,       
    EM_CUSTOM_MEDICAL_VOICE_TYPE_7,       
} EM_CUSTOM_MEDICAL_VOICE_TYPE;
typedef struct tagNET_OPENDOOR_MATCHINFO_EX
{
    char szUserNameEx[128];                   
    EM_CUSTOM_MEDICAL_VOICE_TYPE emVoiceType; 
    NET_ANTIGEN_INFO stuAntigenInfo;          
    char szVoiceTTSMessage[128];              
    UINT nCheckLocal;                         
    BYTE bReserved[1616];                     
} NET_OPENDOOR_MATCHINFO_EX;
typedef struct tagNET_OPENDOOR_MATCHINFO
{
    char szUserID[32];                                  
    char szUserName[32];                                
    EM_USER_TYPE emUserType;                            
    char szName[64];                                    
    UINT nMatchRate;                                    
    EM_FACE_OPEN_DOOR_TYPE emOpenDoorType;              
    NET_TIME stuActivationTime;                         
    NET_TIME stuExpiryTime;                             
    int nScore;                                         
    char szCompanyName[MAX_COMPANY_NAME_LEN];           
    char szCompanionName[120];                          
    char szCompanionCompany[MAX_COMPANY_NAME_LEN];      
    char szPermissibleArea[MAX_COMMON_STRING_128];      
    char szSection[200];                                
    NET_CUSTOM_EDUCATION_INFO* pstuCustomEducationInfo; 
    NET_HEALTH_CODE_INFO* pstuHealthCodeInfo;           
    char szRoomNo[32];                                  
    NET_IDCARD_INFO* pstuIDCardInfo;                    
    NET_BUS_STATION_INFO* pstuBusStationInfo;           
    NET_CUSTOM_WORKER_INFO* pstuCustomWorkerInfo;       
    BOOL bUseMatchInfoEx;                               
    NET_OPENDOOR_MATCHINFO_EX* pstuMatchInfoEx;         
    NET_HSJC_INFO* pstuHSJCInfo;                        
    NET_VACCINE_INFO* pstuVaccineInfo;                  
    NET_TRAVEL_INFO* pstuTravelInfo;                    
    NET_CUSTOM_VISITOR_INFO* pstuCustomVisitorInfo;     
    BYTE byReserved[8];                                 
} NET_OPENDOOR_MATCHINFO;
typedef struct tagNET_OPENDOOR_IMAGEINFO
{
    int nLibImageLen;      
    int nSnapImageLen;     
    char* pLibImage;       
    char* pSnapImage;      
    BYTE byReserved[1024]; 
} NET_OPENDOOR_IMAGEINFO;
typedef struct tagNET_IN_FACE_OPEN_DOOR
{
    DWORD dwSize;
    UINT nChannel;                       
    EM_COMPARE_RESULT emCompareResult;   
    NET_OPENDOOR_MATCHINFO stuMatchInfo; 
    NET_OPENDOOR_IMAGEINFO stuImageInfo; 
} NET_IN_FACE_OPEN_DOOR;
typedef struct tagNET_OUT_FACE_OPEN_DOOR
{
    DWORD dwSize;
} NET_OUT_FACE_OPEN_DOOR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceOpenDoor(LLONG lLoginID, NET_IN_FACE_OPEN_DOOR* pInParam, NET_OUT_FACE_OPEN_DOOR* pOutParam, int nWaitTime);
typedef enum tagEM_LOGIC_VOLUME_STATUS
{
    EM_LOGIC_VOLUME_STATUS_UNKNOWN = -1,       
    EM_LOGIC_VOLUME_STATUS_NOT_NEED_REPAIR,    
    EM_LOGIC_VOLUME_STATUS_LV_NEED_REPAIR,     
    EM_LOGIC_VOLUME_STATUS_LV_REPAIRING,       
    EM_LOGIC_VOLUME_STATUS_LV_REPAIR_COMPLETE, 
} EM_LOGIC_VOLUME_STATUS;
typedef struct tagNET_IN_NAS_GETLOGICVOLUMESTATUS
{
    DWORD dwSize; 
} NET_IN_NAS_GETLOGICVOLUMESTATUS;
typedef struct tagNET_OUT_NAS_GETLOGICVOLUMESTATUS
{
    DWORD dwSize;                                    
    EM_LOGIC_VOLUME_STATUS emLVStatus;               
    char szLvName[MAX_LV_NAME_NUM][MAX_LV_NAME_LEN]; 
    int nRetLvNameNum;                               
} NET_OUT_NAS_GETLOGICVOLUMESTATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NASGetLogicVolumeStatus(LLONG lLoginID, const NET_IN_NAS_GETLOGICVOLUMESTATUS* pInParam, NET_OUT_NAS_GETLOGICVOLUMESTATUS* pOutParam, int nWaitTime);
typedef enum tagEM_LOGIC_VOLUME_REPAIR_STATUS
{
    EM_LOGIC_VOLUME_REPAIR_STATUS_UNKNOWN = -1, 
    EM_LOGIC_VOLUME_REPAIR_STATUS_FAILED,       
    EM_LOGIC_VOLUME_REPAIR_STATUS_SUCCESS,      
} EM_LOGIC_VOLUME_REPAIR_STATUS;
typedef struct tagNET_LV_STATE
{
    EM_LOGIC_VOLUME_REPAIR_STATUS emLVRepairStatus;  
    char szLvName[MAX_LV_NAME_NUM][MAX_LV_NAME_LEN]; 
    int nRetLvNameNum;                               
    BYTE byReserved[1024];                           
} NET_LV_STATE;
typedef void(CALLBACK* fLVRepairStateCallBack)(LLONG lAttachHandle, NET_LV_STATE* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_NAS_REPAIRSTATE
{
    DWORD dwSize;                           
    fLVRepairStateCallBack cbLVRepairState; 
    BYTE byReserved[4];                     
    LDWORD dwUser;                          
} NET_IN_ATTACH_NAS_REPAIRSTATE;
typedef struct tagNET_OUT_ATTACH_NAS_REPAIRSTATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_NAS_REPAIRSTATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachNASRepairState(LLONG lLoginID, const NET_IN_ATTACH_NAS_REPAIRSTATE* pInParam, NET_OUT_ATTACH_NAS_REPAIRSTATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachNASRepairState(LLONG lAttachHandle);
typedef struct tagNET_FILE_FINEDER
{
    unsigned int nRetFileListsCount;                        
    char szFileLists[MAX_FILE_LIST_NUM][MAX_FILE_LIST_LEN]; 
    BOOL bFindFinished;                                     
    BYTE byReserved[1024];                                  
} NET_FILE_FINEDER;
typedef void(CALLBACK* fNasFileFinderCallback)(LLONG lAttachHandle, NET_FILE_FINEDER* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACHNASFILEFINDER
{
    DWORD dwSize;                                                         
    int nFindPathsNum;                                                    
    char szFindPaths[MAX_FILE_FINDER_PATH_NUM][MAX_FILE_FINDER_PATH_LEN]; 
    char szKey[MAX_KEY_LEN];                                              
    unsigned int nOffset;                                                 
    unsigned int nCount;                                                  
    fNasFileFinderCallback cbNasFileFinder;                               
    LDWORD dwUser;                                                        
} NET_IN_ATTACHNASFILEFINDER;
typedef struct tagNET_OUT_ATTACHNASFILEFINDER
{
    DWORD dwSize; 
} NET_OUT_ATTACHNASFILEFINDER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachNASFileFinder(LLONG lLoginID, const NET_IN_ATTACHNASFILEFINDER* pInParam, NET_OUT_ATTACHNASFILEFINDER* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachNASFileFinder(LLONG lAttachHandle);
typedef enum tagEM_PLAYBACK_STREAM_TYPE
{
    EM_PLAYBACK_STREAM_TYPE_UNKNOWN = -1,    
    EM_PLAYBACK_STREAM_TYPE_ORIGINAL_STREAM, 
    EM_PLAYBACK_STREAM_TYPE_MAX,             
} EM_PLAYBACK_STREAM_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayBackStreamType(LLONG lLoginID, EM_PLAYBACK_STREAM_TYPE emStreamType);
typedef struct tagNET_IN_GET_FINGERPRINTCAPS
{
    DWORD dwSize; 
} NET_IN_GET_FINGERPRINTCAPS;
typedef struct tagNET_OUT_GET_FINGERPRINTCAPS
{
    DWORD dwSize;             
    BOOL bSupportFingerprint; 
} NET_OUT_GET_FINGERPRINTCAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFingerprintCaps(LLONG lLoginID, NET_IN_GET_FINGERPRINTCAPS* pInParam, NET_OUT_GET_FINGERPRINTCAPS* pOutParam, int nWaitTime);
typedef enum tagEM_DEVICE_MARKET_AREA
{
    EM_DEVICE_MARKET_AREA_UNKNOWN,  
    EM_DEVICE_MARKET_AREA_MAINLAND, 
    EM_DEVICE_MARKET_AREA_OVERSEA,  
} EM_DEVICE_MARKET_AREA;
typedef struct tagNET_IN_GET_MARKET_AREA
{
    DWORD dwSize; 
} NET_IN_GET_MARKET_AREA;
typedef struct tagNET_OUT_GET_MARKET_AREA
{
    DWORD dwSize;                       
    EM_DEVICE_MARKET_AREA emMarketArea; 
} NET_OUT_GET_MARKET_AREA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMarketArea(LLONG lLoginID, const NET_IN_GET_MARKET_AREA* pInParam, NET_OUT_GET_MARKET_AREA* pOutParam, int nWaitTime);
typedef struct tagNET_IN_RADAR_STARTUPGRADE
{
    DWORD dwSize; 
} NET_IN_RADAR_STARTUPGRADE;
typedef struct tagNET_OUT_RADAR_STARTUPGRADE
{
    DWORD dwSize; 
} NET_OUT_RADAR_STARTUPGRADE;
typedef struct tagNET_IN_RADAR_GETCAPS
{
    DWORD dwSize;       
    int nChannel;       
    char szRadarIP[32]; 
} NET_IN_RADAR_GETCAPS;
typedef struct tagNET_RADAR_CAPACITY_CAP
{
    BOOL bSupport;         
    int nListNum;          
    int nDistanceList[24]; 
    BYTE byReserved[224];  
} NET_RADAR_CAPACITY_CAP;
typedef struct tagNET_RADAR_SCENE_CAP
{
    BOOL bSupport;        
    BYTE byReserved[252]; 
} NET_RADAR_SCENE_CAP;
typedef struct tagNET_RADAR_CHANNEL_CAP
{
    BOOL bSupport;        
    int nListNum;         
    int nChannelList[24]; 
    BYTE byReserved[224]; 
} NET_RADAR_CHANNEL_CAP;
typedef struct tagNET_RADAR_MOVEDDETECT_CAP
{
    BOOL bSupport;        
    BYTE byReserved[252]; 
} NET_RADAR_MOVEDDETECT_CAP;
typedef struct tagNET_RADAR_PROTOCAL_CAP
{
    BOOL bSupport;            
    UINT nProtocalNum;        
    char szPtotoList[10][32]; 
    int nLongitude;           
    int nLatitude;            
    int nAngle;               
    BYTE byReserved[1020];    
} NET_RADAR_PROTOCAL_CAP;
typedef enum tagEM_RADAR_GETCAPS_AREASUB_TYPE
{
    EM_RADAR_GETCAPS_AREASUB_TYPE_UNKNOWN, 
    EM_RADAR_GETCAPS_AREASUB_TYPE_SECTOR,  
    EM_RADAR_GETCAPS_AREASUB_TYPE_ELLIPSE, 
} EM_RADAR_GETCAPS_AREASUB_TYPE;
typedef enum tagEM_RADAR_GETCAPS_RADAR_TYPE
{
    EM_RADAR_GETCAPS_RADAR_TYPE_UNKNOWN, 
    EM_RADAR_GETCAPS_RADAR_TYPE1,        
    EM_RADAR_GETCAPS_RADAR_TYPE2,        
    EM_RADAR_GETCAPS_RADAR_TYPE3,        
    EM_RADAR_GETCAPS_RADAR_TYPE4,        
    EM_RADAR_GETCAPS_RADAR_TYPE5,        
} EM_RADAR_GETCAPS_RADAR_TYPE;
typedef struct tagNET_OUT_RADAR_GETCAPS
{
    DWORD dwSize;                                
    int nDetectionRange;                         
    int nDetectionAngle;                         
    int nDetectionHuman;                         
    BOOL bExValid;                               
    NET_RADAR_CAPACITY_CAP stuCapacityCap;       
    NET_RADAR_SCENE_CAP stuSceneCap;             
    NET_RADAR_CHANNEL_CAP stuChannelCap;         
    NET_RADAR_MOVEDDETECT_CAP stuMovedDetectCap; 
    NET_RADAR_PROTOCAL_CAP stuProtocalCap;       
    EM_RADAR_GETCAPS_AREASUB_TYPE emAreaSubType; 
    EM_RADAR_GETCAPS_RADAR_TYPE emRadarType;     
} NET_OUT_RADAR_GETCAPS;
typedef struct tagNET_IN_RADAR_GETSTATUS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_RADAR_GETSTATUS;
typedef enum tagEM_RADAR_STATUS
{
    EM_RADAR_STATUS_UNKNOWN,  
    EM_RADAR_STATUS_NORMAL,   
    EM_RADAR_STATUS_ABNORMAL, 
} EM_RADAR_STATUS;
typedef struct tagNET_OUT_RADAR_GETSTATUS
{
    DWORD dwSize;                  
    EM_RADAR_STATUS emRadarStatus; 
} NET_OUT_RADAR_GETSTATUS;
typedef struct tagNET_RADAR_PIXELLINE
{
    int nLeftX;          
    int nLeftY;          
    int nRightX;         
    int nRightY;         
    BYTE byReserved[64]; 
} NET_RADAR_PIXELLINE;
typedef struct tagNET_IN_RADAR_CALCULATEREALSIZE
{
    DWORD dwSize;                     
    int nChannel;                     
    NET_RADAR_PIXELLINE stuPixelLine; 
    double dDistance;                 
} NET_IN_RADAR_CALCULATEREALSIZE;
typedef struct tagNET_OUT_RADAR_CALCULATEREALSIZE
{
    DWORD dwSize;       
    int nRealMapLength; 
    int nRealMapWidth;  
} NET_OUT_RADAR_CALCULATEREALSIZE;
typedef struct tagNET_RADAR_PIXELPOINT
{
    int nPixelPointX; 
    int nPixelPointY; 
} NET_RADAR_PIXELPOINT;
typedef struct tagNET_IN_RADAR_SETCALIBRATION
{
    DWORD dwSize;                       
    BYTE byReserved[4];                 
    NET_RADAR_PIXELPOINT stuPixelPoint; 
    double dInstallHeigt;               
} NET_IN_RADAR_SETCALIBRATION;
typedef struct tagNET_OUT_RADAR_SETCALIBRATION
{
    DWORD dwSize; 
} NET_OUT_RADAR_SETCALIBRATION;
typedef enum tagEM_RADAR_OPERATE_TYPE
{
    EM_RADAR_OPERATE_TYPE_STARTUPGRADE = 0,      
    EM_RADAR_OPERATE_TYPE_GETCAPS = 1,           
    EM_RADAR_OPERATE_TYPE_GETSTATUS = 2,         
    EM_RADAR_OPERATE_TYPE_CALCULATEREALSIZE = 3, 
    EM_RADAR_OPERATE_TYPE_SETCALIBRATION = 4,    
} EM_RADAR_OPERATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadarOperate(LLONG lLoginID, EM_RADAR_OPERATE_TYPE emType, void* pInBuf, void* pOutBuf, int nWaitTime);
#define NET_RADAR_MAX_NUM_ALARMPOINT 64 
typedef enum tagEM_RADAR_POINTTYPE
{
    EM_RADAR_POINTTYPE_UNKNOWN,             
    EM_RADAR_POINTTYPE_ALARMPOINT,          
    EM_RADAR_POINTTYPE_LINKMONITORPOINT,    
    EM_RADAR_POINTTYPE_DISAPPEARTRACKPOINT, 
} EM_RADAR_POINTTYPE;
typedef enum tagEM_RADAR_OBJECTTYPE
{
    EM_RADAR_OBJECTTYPE_UNKNOWN,                
    EM_RADAR_OBJECTTYPE_PERSON,                 
    EM_RADAR_OBJECTTYPE_VEHICLE,                
    EM_RADAR_OBJECTTYPE_TREE,                   
    EM_RADAR_OBJECTTYPE_BUILIDING,              
    EM_RADAR_OBJECTTYPE_SCREEN,                 
    EM_RADAR_OBJECTTYPE_ANIMAL,                 
    EM_RADAR_OBJECTTYPE_BIG_SHIP,               
    EM_RADAR_OBJECTTYPE_MID_SHIP,               
    EM_RADAR_OBJECTTYPE_SMALL_SHIP,             
    EM_RADAR_OBJECTTYPE_STATIONARY_TARGET_TYPE, 
} EM_RADAR_OBJECTTYPE;
typedef struct tagNET_RADAR_ALARMPOINT_INFO
{
    EM_RADAR_POINTTYPE emPointType; 
    int nPointType;                 
    int nRegionNumber;                
    EM_RADAR_OBJECTTYPE emObjectType; 
    int nTrackID;                     
    int nDistance;                    
    int nAngle;                       
    int nSpeed;                       
    int nLongitude;                   
    int nLatitude;                    
    char szTrackerIP[16];             
    BYTE byReserved[488];             
} NET_RADAR_ALARMPOINT_INFO;
typedef struct tagNET_RADAR_RULE_INFO
{
    int nRuleID;         
    int nPointNumber;    
    UINT nTrackerIP;     
    char byReserved[60]; 
} NET_RADAR_RULE_INFO;
typedef struct tagNET_RADAR_NOTIFY_ALARMPOINTINFO
{
    int nNumAlarmPoint;                                                    
    NET_RADAR_ALARMPOINT_INFO stuAlarmPoint[NET_RADAR_MAX_NUM_ALARMPOINT]; 
    int nChannel;                                                          
    UINT nRuleNum;                                                         
    NET_RADAR_RULE_INFO stuRuleInfo[10];                                   
    NET_TIME stuRealUTC;                                                   
    BYTE byReserved[272];                                                  
} NET_RADAR_NOTIFY_ALARMPOINTINFO;
typedef void(CALLBACK* fRadarAlarmPointInfoCallBack)(LLONG lLoginId, LLONG lAttachHandle, const NET_RADAR_NOTIFY_ALARMPOINTINFO* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_RADAR_ALARMPOINTINFO
{
    DWORD dwSize;                                  
    fRadarAlarmPointInfoCallBack cbAlarmPointInfo; 
    LDWORD dwUser;                                 
    int nChannel;                                  
} NET_IN_RADAR_ALARMPOINTINFO;
typedef struct tagNET_OUT_RADAR_ALARMPOINTINFO
{
    DWORD dwSize; 
} NET_OUT_RADAR_ALARMPOINTINFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRadarAlarmPointInfo(LLONG lLoginID, const NET_IN_RADAR_ALARMPOINTINFO* pstInParam, NET_OUT_RADAR_ALARMPOINTINFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRadarAlarmPointInfo(LLONG lAttachHandle);
typedef struct tagNET_MINI_RADAR_ALARMPOINT_INFO
{
    UINT nHeartRate;      
    UINT nBreathe;        
    BOOL bGetUpStatus;    
    BOOL bAFBStatus;      
    BOOL bTurnOverStatus; 
    UINT nSleepQuality;   
    BOOL bPosture;        
    UINT nNum;            
    int nId;              
    int nXPosNum;         
    int nXPos[32];        
    int nYPosNum;         
    int nYPos[32];        
    int nSpeedNum;        
    int nSpeed[32];       
    int nTypeNum;         
    int nType[32];        
    UINT nHeartRateLevel; 
    UINT nDistance;       
    int nGetUpTimes;      
    int nTurnTimes;       
    char szReserved[248]; 
} NET_MINI_RADAR_ALARMPOINT_INFO;
typedef struct tagNET_RADAR_REGION_INFO
{
    int nRegionID;       
    BOOL bAction;        
    char byReserved[24]; 
} NET_RADAR_REGION_INFO;
typedef struct tagNET_MINI_RADAR_NOTIFY_ALARMPOINTINFO
{
    UINT nSID;                                        
    int nAlarmPointNum;                               
    NET_MINI_RADAR_ALARMPOINT_INFO stuAlarmPoint[64]; 
    int nRegionRealNum;                               
    NET_RADAR_REGION_INFO stuRegionInfo[4];           
    char szReserved[124];                             
} NET_MINI_RADAR_NOTIFY_ALARMPOINTINFO;
typedef void(CALLBACK* fMiniRadarAlarmPointInfoCallBack)(LLONG lLoginId, LLONG lAttachHandle, const NET_MINI_RADAR_NOTIFY_ALARMPOINTINFO* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_MINI_RADAR_ALARMPOINTINFO
{
    DWORD dwSize;                                      
    fMiniRadarAlarmPointInfoCallBack cbAlarmPointInfo; 
    LDWORD dwUser;                                     
} NET_IN_MINI_RADAR_ALARMPOINTINFO;
typedef struct tagNET_OUT_MINI_RADAR_ALARMPOINTINFO
{
    DWORD dwSize; 
    UINT nSID;    
} NET_OUT_MINI_RADAR_ALARMPOINTINFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachMiniRadarAlarmPointInfo(LLONG lLoginID, const NET_IN_MINI_RADAR_ALARMPOINTINFO* pstuInParam, NET_OUT_MINI_RADAR_ALARMPOINTINFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachMiniRadarAlarmPointInfo(LLONG lAttachHandle);
typedef struct tagNET_IN_RADAR_GET_LINKSTATE
{
    DWORD dwSize;                          
    int nChannel;                          
    int nSDLinkNum;                        
    char szSDLinkIP[MAX_RADAR_SD_NUM][32]; 
} NET_IN_RADAR_GET_LINKSTATE;
typedef enum tagNET_EM_RADAR_LINK_SD_STATE
{
    NET_EM_RADAR_LINK_SD_STATE_UNKNOWN = -1, 
    NET_EM_RADAR_LINK_SD_STATE_NORMAL,       
    NET_EM_RADAR_LINK_SD_STATE_TIMEOUT,      
    NET_EM_RADAR_LINK_SD_STATE_OFFLINE,      
    NET_EM_RADAR_LINK_SD_STATE_NOT_LINK,     
} NET_EM_RADAR_LINK_SD_STATE;
typedef struct tagNET_LINKSTATE_INFO
{
    char szSDLinkIP[32];                
    NET_EM_RADAR_LINK_SD_STATE emState; 
    int nVirtualChannel;                
    BYTE byReserved[1020];              
} NET_LINKSTATE_INFO;
typedef struct tagNET_OUT_RADAR_GET_LINKSTATE
{
    DWORD dwSize;                                        
    int nSDLinkNum;                                      
    NET_LINKSTATE_INFO stuSDLinkState[MAX_RADAR_SD_NUM]; 
} NET_OUT_RADAR_GET_LINKSTATE;
typedef struct tagNET_RADARLINKDEVICE_ADD_INFO
{
    char szSDLinkIP[32];  
    char szUserName[128]; 
    char szPassword[32];  
    int nPort;            
    BYTE byReserved[316]; 
} NET_RADARLINKDEVICE_ADD_INFO;
typedef struct tagNET_IN_RADAR_ADD_RADARLINKSD
{
    DWORD dwSize;                                              
    int nChannelID;                                            
    NET_RADARLINKDEVICE_ADD_INFO stuDevices[MAX_RADAR_SD_NUM]; 
    int nDevicesNum;                                           
} NET_IN_RADAR_ADD_RADARLINKSD;
typedef enum tagNET_EM_RADARLINKDEVICE_ADD_ERRORCODE
{
    EM_EM_RADARLINKDEVICE_ADD_UNKNOWN = -1, 
    EM_EM_RADARLINKDEVICE_ADD_SUCCESS = 0,  
    EM_EM_RADARLINKDEVICE_ADD_TIMEOUT,      
    EM_EM_RADARLINKDEVICE_ADD_ACCOUNTERROR, 
    EM_EM_RADARLINKDEVICE_ADD_NOTSUPPORT,   
} NET_EM_RADARLINKDEVICE_ADD_ERRORCODE;
typedef struct tagNET_RADARLINKDEVICE_ADD_RESULT
{
    NET_EM_RADARLINKDEVICE_ADD_ERRORCODE emErrorCode; 
    BYTE byReserved[252];                             
} NET_RADARLINKDEVICE_ADD_RESULT;
typedef struct tagNET_OUT_RADAR_ADD_RADARLINKSD
{
    DWORD dwSize;                                                  
    int nRetResultNum;                                             
    NET_RADARLINKDEVICE_ADD_RESULT stuAddResult[MAX_RADAR_SD_NUM]; 
} NET_OUT_RADAR_ADD_RADARLINKSD;
typedef struct tagNET_RADARLINKDEVICE_DEL_INFO
{
    char szSDLinkIP[32];  
    BYTE byReserved[224]; 
} NET_RADARLINKDEVICE_DEL_INFO;
typedef struct tagNET_IN_RADAR_DEL_RADARLINKSD
{
    DWORD dwSize;                                              
    int nChannelID;                                            
    NET_RADARLINKDEVICE_DEL_INFO stuDevices[MAX_RADAR_SD_NUM]; 
    int nDevicesNum;                                           
} NET_IN_RADAR_DEL_RADARLINKSD;
typedef struct tagNET_OUT_RADAR_DEL_RADARLINKSD
{
    DWORD dwSize; 
} NET_OUT_RADAR_DEL_RADARLINKSD;
typedef struct tagNET_IN_RADAR_MANUAL_LOCATE
{
    DWORD dwSize;             
    int nChannelID;           
    NET_POINT stuLocatePoint; 
} NET_IN_RADAR_MANUAL_LOCATE;
typedef struct tagNET_OUT_RADAR_MANUAL_LOCATE
{
    DWORD dwSize; 
} NET_OUT_RADAR_MANUAL_LOCATE;
typedef enum tagNET_EM_RADAR_RFIDCARD_ACTION
{
    EM_RADAR_RFIDCARD_ACTION_UNKNOWN = 0, 
    EM_RADAR_RFIDCARD_ACTION_LEAVE,       
    EM_RADAR_RFIDCARD_ACTION_ENTER,       
} NET_EM_RADAR_RFIDCARD_ACTION;
typedef struct tagNET_RADAR_RFIDCARD_INFO
{
    char szCardID[24];                         
    NET_EM_RADAR_RFIDCARD_ACTION emCardAction; 
    UINT nCardEntryTime;                       
    UINT nCardQuitTime;                        
    BYTE byReserved[116];                      
} NET_RADAR_RFIDCARD_INFO;
typedef struct tagNET_RADAR_NOTIFY_RFIDCARD_INFO
{
    int nChannel;
    int nCardNum;
    NET_RADAR_RFIDCARD_INFO stuCardInfo[256]; 
    BYTE byReserved[1024];                    
} NET_RADAR_NOTIFY_RFIDCARD_INFO;
typedef void(CALLBACK* fRadarRFIDCardInfoCallBack)(LLONG lLoginId, LLONG lAttachHandle, const NET_RADAR_NOTIFY_RFIDCARD_INFO* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RADAR_RFIDCARD_INFO
{
    DWORD dwSize;                              
    int nChannelID;                            
    fRadarRFIDCardInfoCallBack cbRFIDCardInfo; 
    LDWORD dwUser;                             
} NET_IN_ATTACH_RADAR_RFIDCARD_INFO;
typedef struct tagNET_OUT_ATTACH_RADAR_RFIDCARD_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_RADAR_RFIDCARD_INFO;
typedef struct tagNET_IN_RADAR_GET_RFID_MODE
{
    DWORD dwSize; 
} NET_IN_RADAR_GET_RFID_MODE;
typedef struct tagNET_OUT_RADAR_GET_RFID_MODE
{
    DWORD dwSize; 
    int nMode;    
} NET_OUT_RADAR_GET_RFID_MODE;
typedef struct tagNET_IN_RADAR_SET_RFID_MODE
{
    DWORD dwSize; 
    int nMode;    
} NET_IN_RADAR_SET_RFID_MODE;
typedef struct tagNET_OUT_RADAR_SET_RFID_MODE
{
    DWORD dwSize; 
} NET_OUT_RADAR_SET_RFID_MODE;
typedef struct tagNET_MAP_BUILDING_INFO
{
    char szRadarIP[32];                 
    NET_EM_RADAR_LINK_SD_STATE emState; 
    char szReserved[252];               
} NET_MAP_BUILDING_INFO;
typedef struct tagNET_IN_RADAR_MAP_BUILDING
{
    DWORD dwSize;           
    int nCount;             
    char szRadarIP[24][32]; 
    int nAction[24];        
} NET_IN_RADAR_MAP_BUILDING;
typedef struct tagNET_OUT_RADAR_MAP_BUILDING
{
    DWORD dwSize;                         
    int nCount;                           
    NET_MAP_BUILDING_INFO stuMapInfo[24]; 
} NET_OUT_RADAR_MAP_BUILDING;
typedef struct tagNET_IN_RADAR_MANUAL_TRACK
{
    DWORD dwSize;         
    char szSDIP[32];      
    int nTrackID;         
    int nTime;            
    int nAction;          
    int arrCoordinate[2]; 
    int nAlarmType;       
    int nSpeed;           
    int nAzimuth;         
} NET_IN_RADAR_MANUAL_TRACK;
typedef struct tagNET_OUT_RADAR_MANUAL_TRACK
{
    DWORD dwSize;    
    char szSDIP[32]; 
    int nEventID;    
} NET_OUT_RADAR_MANUAL_TRACK;
typedef struct tagNET_RADAR_NOTIFY_AIS_INFO
{
    int nDataLength;       
    UINT nData[512];       
    int nSID;              
    BYTE byReserved[1024]; 
} NET_RADAR_NOTIFY_AIS_INFO;
typedef void(CALLBACK* fRadarAISInfoCallBack)(LLONG lLoginId, LLONG lAttachHandle, const NET_RADAR_NOTIFY_AIS_INFO* pBuf, DWORD dwBufLen, void* pReserved, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RADAR_AIS_INFO
{
    DWORD dwSize;                    
    fRadarAISInfoCallBack cbAISInfo; 
    LDWORD dwUser;                   
} NET_IN_ATTACH_RADAR_AIS_INFO;
typedef struct tagNET_OUT_ATTACH_RADAR_AIS_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_RADAR_AIS_INFO;
typedef struct tagNET_RADAR_SET_TRACK_INFO
{
    int nTrackID;        
    int nAISMatch;       
    char szReserved[64]; 
} NET_RADAR_SET_TRACK_INFO;
typedef struct tagNET_IN_RADAR_SET_TRACK_INFO
{
    DWORD dwSize;                          
    int nInfoNum;                          
    NET_RADAR_SET_TRACK_INFO stuInfo[128]; 
} NET_IN_RADAR_SET_TRACK_INFO;
typedef struct tagNET_OUT_RADAR_SET_TRACK_INFO
{
    DWORD dwSize; 
} NET_OUT_RADAR_SET_TRACK_INFO;
typedef struct tagNET_IN_RADAR_SET_DEVICE_POWER
{
    DWORD dwSize; 
    int nType;    
} NET_IN_RADAR_SET_DEVICE_POWER;
typedef struct tagNET_OUT_RADAR_SET_DEVICE_POWER
{
    DWORD dwSize; 
} NET_OUT_RADAR_SET_DEVICE_POWER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRadarLinkSDState(LLONG lLoginID, const NET_IN_RADAR_GET_LINKSTATE* pstInParam, NET_OUT_RADAR_GET_LINKSTATE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddRadarLinkSD(LLONG lLoginID, const NET_IN_RADAR_ADD_RADARLINKSD* pstInParam, NET_OUT_RADAR_ADD_RADARLINKSD* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelRadarLinkSD(LLONG lLoginID, const NET_IN_RADAR_DEL_RADARLINKSD* pstInParam, NET_OUT_RADAR_DEL_RADARLINKSD* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadarManualLocate(LLONG lLoginID, const NET_IN_RADAR_MANUAL_LOCATE* pstInParam, NET_OUT_RADAR_MANUAL_LOCATE* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRadarRFIDCardInfo(LLONG lLoginID, const NET_IN_ATTACH_RADAR_RFIDCARD_INFO* pstInParam, NET_OUT_ATTACH_RADAR_RFIDCARD_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRadarRFIDCardInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRadarRFIDMode(LLONG lLoginID, const NET_IN_RADAR_GET_RFID_MODE* pstInParam, NET_OUT_RADAR_GET_RFID_MODE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRadarRFIDMode(LLONG lLoginID, const NET_IN_RADAR_SET_RFID_MODE* pstInParam, NET_OUT_RADAR_SET_RFID_MODE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MapRadarBuilding(LLONG lLoginID, const NET_IN_RADAR_MAP_BUILDING* pstInParam, NET_OUT_RADAR_MAP_BUILDING* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RadarManualTrack(LLONG lLoginID, const NET_IN_RADAR_MANUAL_TRACK* pstInParam, NET_OUT_RADAR_MANUAL_TRACK* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRadarAISInfo(LLONG lLoginID, const NET_IN_ATTACH_RADAR_AIS_INFO* pstInParam, NET_OUT_ATTACH_RADAR_AIS_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRadarAISInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRadarTrackInfo(LLONG lLoginID, const NET_IN_RADAR_SET_TRACK_INFO* pstInParam, NET_OUT_RADAR_SET_TRACK_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDevicePower(LLONG lLoginID, const NET_IN_RADAR_SET_DEVICE_POWER* pstInParam, NET_OUT_RADAR_SET_DEVICE_POWER* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_WATERRADAR_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_WATERRADAR_CAPS;
typedef struct tagNET_OUT_GET_WATERRADAR_CAPS
{
    DWORD dwSize;  
    BOOL bSupport; 
} NET_OUT_GET_WATERRADAR_CAPS;
typedef struct tagNET_IN_GET_WATERRADAR_OBJECTINFO
{
    DWORD dwSize; 
} NET_IN_GET_WATERRADAR_OBJECTINFO;
typedef struct tagNET_OUT_GET_WATERRADAR_OBJECTINFO
{
    DWORD dwSize;      
    float fWaterLevel; 
} NET_OUT_GET_WATERRADAR_OBJECTINFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetWaterRadarCaps(LLONG lLoginID, const NET_IN_GET_WATERRADAR_CAPS* pInParam, NET_OUT_GET_WATERRADAR_CAPS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetWaterRadarObjectInfo(LLONG lLoginID, const NET_IN_GET_WATERRADAR_OBJECTINFO* pInParam, NET_OUT_GET_WATERRADAR_OBJECTINFO* pOutParam, int nWaitTime);
typedef struct tagNET_RADAR_REGIONDETECTION_RFIDCARD_INFO
{
    char szCardID[24];    
    char byReserved[256]; 
} NET_RADAR_REGIONDETECTION_RFIDCARD_INFO;
typedef struct tagALARM_RADAR_REGIONDETECTION_INFO
{
    int nAction;                                              
    NET_TIME_EX stuTime;                                      
    int nChannelID;                                           
    int nObjectNum;                                           
    NET_RADAR_DETECT_OBJECT stuObjects[100];                  
    char szName[128];                                         
    int nPresetID;                                            
    int nDetectRegionNum;                                     
    NET_POINT stuDetectRegion[20];                            
    EM_RADAR_ALARM_TYPE emAlarmType;                          
    int nLongitude;                                           
    int nLatitude;                                            
    UINT nRuleID;                                             
    int nCardNum;                                             
    NET_RADAR_REGIONDETECTION_RFIDCARD_INFO stuCardInfo[256]; 
    UINT nAlarmLevel;                                         
    int nAlarmFlag;                                           
    int nAlarmChannel;                                        
    UINT nEventID;                                            
    int nSpeed;                                               
    int nTrackID;                                             
    int nObjectType;                                          
    int nUpDownGoing;                                         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;                     
    int nDistance;                                            
    int nAngle;                                               
    char byReserved[992];                                     
} ALARM_RADAR_REGIONDETECTION_INFO;
typedef struct tagALARM_RADAR_LINEDETECTION_INFO
{
    int nChannelID;                          
    int nAction;                             
    char szName[128];                        
    NET_TIME_EX stuTime;                     
    int nObjectNum;                          
    NET_RADAR_DETECT_OBJECT stuObjects[100]; 
    int nPresetID;                           
    int nDetectRegionNum;                    
    NET_POINT stuDetectRegion[20];           
    int nLongitude;                          
    int nLatitude;                           
    UINT nAlarmLevel;                        
    int nAlarmFlag;                          
    EM_RADAR_ALARM_TYPE emAlarmType;         
    NET_EVENT_INFO_EXTEND stuEventInfoEx;    
    char byReserved[1012];                   
} ALARM_RADAR_LINEDETECTION_INFO;
typedef struct tagNET_RADAR_PLACE_INFO
{
    int nRadarPixel[2];   
    double dbRadarAngle;  
    char byReserved[512]; 
} NET_RADAR_PLACE_INFO;
typedef struct tagNET_CFG_RADAR_MAPPARA_INFO
{
    DWORD dwSize;                              
    BYTE byReserved[4];                        
    NET_RADAR_PIXELLINE stuPixelLine;          
    double dDistance;                          
    NET_RADAR_PIXELPOINT stuPixelPoint;        
    double dRadarDirectionAngle;               
    UINT nLongitudeNum;                        
    int nLongitude[4];                         
    UINT nLatitudeNum;                         
    int nLatitude[4];                          
    char byReserved1[4];                       
    UINT nRadarPlaceNum;                       
    NET_RADAR_PLACE_INFO stuRadarPlaceInfo[4]; 
} NET_CFG_RADAR_MAPPARA_INFO;
typedef struct tagNET_RADAR_CALIBRATIONPOS
{
    NET_RADAR_PIXELPOINT stuPixelPoint; 
    double dPositionX;                  
    double dPositionY;                  
    double dZoom;                       
    BYTE byReserved[512];               
} NET_RADAR_CALIBRATIONPOS;
typedef struct tagNET_RADAR_CALIBRATION_PARAS
{
    int nCalibrationPosNum;                        
    BYTE byReserved1[4];                           
    NET_RADAR_CALIBRATIONPOS stuCalibrationPos[4]; 
    char szSDLinkIP[32];                           
    double dLinkSDHeight;                          
    double dTiltRecoupAngle;                       
    BYTE byReserved[1024];                         
} NET_RADAR_CALIBRATION_PARAS;
typedef struct tagNET_CFG_RADAR_CALIBRATION_INFO
{
    DWORD dwSize;                                                      
    int nCalibrationParasNum;                                          
    NET_RADAR_CALIBRATION_PARAS stuCalibrationParas[MAX_RADAR_SD_NUM]; 
    double dInstallHeight;                                             
    double dSlopeAngle;                                                
} NET_CFG_RADAR_CALIBRATION_INFO;
typedef struct tagNET_CFG_RADAR_LINKSD_INFO
{
    DWORD dwSize;    
    BOOL bRadarLink; 
} NET_CFG_RADAR_LINKSD_INFO;
#define NET_RADAR_MAX_NUM_RULELINE 10 
#define NET_RADAR_MAX_NUM_POLYGON 24  
typedef enum tagEM_RADAR_RULETYPE
{
    EM_RADAR_RULETYPE_UNKNOWN,   
    EM_RADAR_RULETYPE_ALARM,     
    EM_RADAR_RULETYPE_SHIELD,    
    EM_RADAR_RULETYPE_HIGHALARM, 
} EM_RADAR_RULETYPE;
#define RADAR_TARGET_FILTER_HUMAN 0x01  
#define RADAR_TARGET_FILTER_CAR 0x02    
#define RADAR_TARGET_FILTER_ANIMAL 0x04 
typedef struct tagNET_RADAR_RULELINE
{
    char szName[DH_COMMON_STRING_128];       
    int nRegionNumber;                       
    BOOL bEnable;                            
    EM_RADAR_RULETYPE emRuleType;            
    DH_POINT stuPolygon[DH_MAX_POLYGON_NUM]; 
    int nPolygonPointNum;                    
    int nTargetFilter;                       
    int nAlarmOutNumber;                     
    int nLongitudeNum;                       
    int nLongitude[21];                      
    int nLatitudeNum;                        
    int nLatitude[21];                       
    int nRadarPolygonNum;                    
    int nRadarPolygon[20][2];                
    BYTE byReserved[164];                    
} NET_RADAR_RULELINE;
typedef struct tagNET_CFG_RADAR_RULELINE_INFO
{
    DWORD dwSize;                                               
    int nNumRuleLine;                                           
    NET_RADAR_RULELINE stuRuleLine[NET_RADAR_MAX_NUM_RULELINE]; 
    BOOL bUseEx;                                                
    int nNumRuleLineEx;                                         
    NET_RADAR_RULELINE stuRuleLineEx[25];                       
} NET_CFG_RADAR_RULELINE_INFO;
typedef struct tagNET_RADAR_ANALYSERULE
{
    char szSDLinkIP[32];                      
    int nAlarmOutNumber;                      
    BOOL bEnable;                             
    NET_CFG_ALARM_MSG_HANDLE stuEventHandler; 
    BYTE byReserved[1024];                    
} NET_RADAR_ANALYSERULE;
typedef struct tagNET_CFG_RADAR_ANALYSERULE_INFO
{
    DWORD dwSize;                                            
    int nAnalyseRuleNum;                                     
    NET_RADAR_ANALYSERULE stuAnalyseRules[MAX_RADAR_SD_NUM]; 
} NET_CFG_RADAR_ANALYSERULE_INFO;
typedef enum tagEM_RADAR_TRACKSWITCHMODE
{
    EM_RADAR_TRACKSWITCHMODE_UNKNOWN,       
    EM_RADAR_TRACKSWITCHMODE_ROTATION,      
    EM_RADAR_TRACKSWITCHMODE_TIMEFIRST,     
    EM_RADAR_TRACKSWITCHMODE_DISTANCEFIRST, 
} EM_RADAR_TRACKSWITCHMODE;
typedef struct tagNET_CFG_RADAR_TRACKGLOBALCONFIG_INFO
{
    DWORD dwSize;                               
    BOOL bSectorDisable;                        
    int nTrajectoryTime;                        
    int nTrackSwitchTime;                       
    EM_RADAR_TRACKSWITCHMODE emTrackSwitchMode; 
} NET_CFG_RADAR_TRACKGLOBALCONFIG_INFO;
typedef enum tagNET_EM_RADAR_SCENE_TYPE
{
    NET_EM_RADAR_SCENE_UNKNOWN = 0, 
    NET_EM_RADAR_SCENE_DEFAULT,     
    NET_EM_RADAR_SCENE_SHRUB,       
    NET_EM_RADAR_SCENE_ROOMY,       
    NET_EM_RADAR_SCENE_CUSTOM,      
} NET_EM_RADAR_SCENE_TYPE;
typedef struct tagNET_RADAR_SCENE
{
    NET_EM_RADAR_SCENE_TYPE emType; 
    BYTE byReserved[508];           
} NET_RADAR_SCENE;
typedef struct tagNET_RADAR_STRUCTURED
{
    BOOL bEnable;         
    BYTE byReserved[508]; 
} NET_RADAR_STRUCTURED;
typedef struct tagNET_RADAR_CAPACITY
{
    int nPower;           
    BYTE byReserved[508]; 
} NET_RADAR_CAPACITY;
typedef struct tagNET_RADAR_RADARCHANNEL
{
    int nRoute;           
    BYTE byReserved[508]; 
} NET_RADAR_RADARCHANNEL;
typedef struct tagNET_RADAR_TARGETRATIO
{
    int nRatio;          
    BYTE byReserved[60]; 
} NET_RADAR_TARGETRATIO;
typedef struct tagNET_CFG_RADAR_RADARPARA_INFO
{
    DWORD dwSize;                           
    NET_RADAR_SCENE stuScene;               
    NET_RADAR_STRUCTURED stuStructured;     
    NET_RADAR_CAPACITY stuCapacity;         
    NET_RADAR_RADARCHANNEL stuRadarChannel; 
    NET_RADAR_TARGETRATIO stuTargetRatio;   
} NET_CFG_RADAR_RADARPARA_INFO;
typedef struct tagNET_REMOTESDLINK_INFO
{
    char szSDLinkIP[32];  
    BOOL bRadarLink;      
    BYTE byReserved[476]; 
} NET_REMOTESDLINK_INFO;
typedef struct tagNET_CFG_RADAR_REMOTESDLINK_INFO
{
    DWORD dwSize;                                         
    int nLinkNum;                                         
    NET_REMOTESDLINK_INFO stuLinkInfos[MAX_RADAR_SD_NUM]; 
} NET_CFG_RADAR_REMOTESDLINK_INFO;
typedef struct tagNET_RADARLINKDEVICE_INFO
{
    char szSDLinkIP[32];    
    char szVendor[32];      
    int nPort;              
    char szUserName[128];   
    char szPassword[32];    
    char szDeviceType[32];  
    char szDeviceName[128]; 
    BYTE byReserved[124];   
} NET_RADARLINKDEVICE_INFO;
typedef struct tagNET_CFG_RADAR_RADARLINKDEVICE_INFO
{
    DWORD dwSize;                                          
    int nDevNum;                                           
    NET_RADARLINKDEVICE_INFO stuDevInfo[MAX_RADAR_SD_NUM]; 
} NET_CFG_RADAR_RADARLINKDEVICE_INFO;
typedef enum tagNET_EM_OSD_AREA
{
    NET_EM_OSD_AREA_UNKNOWN,      
    NET_EM_OSD_AREA_LEFT_TOP,     
    NET_EM_OSD_AREA_MID_TOP,      
    NET_EM_OSD_AREA_RIGHT_TOP,    
    NET_EM_OSD_AREA_MID_LEFT,     
    NET_EM_OSD_AREA_MID_RIGHT,    
    NET_EM_OSD_AREA_LEFT_BOTTOM,  
    NET_EM_OSD_AREA_MID_BOTTOM,   
    NET_EM_OSD_AREA_RIGHT_BOTTOM, 
} NET_EM_OSD_AREA;
typedef struct tagNET_CFG_RADAR_MAPOSDPARA_INFO
{
    DWORD dwSize;              
    NET_EM_OSD_AREA emOSDArea; 
} NET_CFG_RADAR_MAPOSDPARA_INFO;
typedef struct tagNET_RADAR_DEVICE_INFO
{
    char szProtocalType[32]; 
    char szRadarIP[32];      
    char szDeviceType[32];   
    char szDeviceName[32];   
    char szRadarVer[16];     
    char szUserName[128];    
    char szPassWord[32];     
    int nPort;               
    int nLongitude;          
    int nLatitude;           
    int nAngle;              
    int nDectAngle;          
    int nDectDistance;       
    BYTE bReserved[1016];    
} NET_RADAR_DEVICE_INFO;
typedef struct tagNET_CFG_RADAR_DEVLIST_INFO
{
    DWORD dwSize;                              
    UINT nRadarDevNum;                         
    NET_RADAR_DEVICE_INFO stuRadarDevList[10]; 
} NET_CFG_RADAR_DEVLIST_INFO;
typedef struct tagNET_RADAR_RULE_BIND_SD_RELATION
{
    char szSDIP[32];      
    int nRuleId;          
    BYTE bReserved[1020]; 
} NET_RADAR_RULE_BIND_SD_RELATION;
typedef struct tagNET_CFG_RADAR_RULE_BIND_SD_INFO
{
    DWORD dwSize;                                          
    UINT nRuleSdRelationNum;                               
    NET_RADAR_RULE_BIND_SD_RELATION stuRuleSdRelation[10]; 
} NET_CFG_RADAR_RULE_BIND_SD_INFO;
typedef struct tagNET_RADAR_SCREEN_RULE
{
    char szRuleName[512];    
    int nDisplayColor;       
    int nDisplayMode;        
    int nDisplaySpeed;       
    char szDisplayText[512]; 
    int nRuleID;             
    char szReserved[1024];   
} NET_RADAR_SCREEN_RULE;
typedef struct tagNET_CFG_RADAR_SCREEN_RULE_INFO
{
    DWORD dwSize;                            
    UINT nScreenRuleNum;                     
    NET_RADAR_SCREEN_RULE stuScreenRule[10]; 
} NET_CFG_RADAR_SCREEN_RULE_INFO;
typedef struct tagNET_RADAR_ALGORITHM_PARAM
{
    char szName[64]; 
    int nValue;      
} NET_RADAR_ALGORITHM_PARAM;
typedef struct tagNET_CFG_RADAR_ALGORITHM_PARAM_INFO
{
    DWORD dwSize;                                         
    UINT nRadarAlgorithmParamNum;                         
    NET_RADAR_ALGORITHM_PARAM stuRadarAlgorithmParam[20]; 
} NET_CFG_RADAR_ALGORITHM_PARAM_INFO;
typedef struct tagNET_RADAR_TRACK_FREQUENCY
{
    int nFrequency; 
} NET_RADAR_TRACK_FREQUENCY;
typedef struct tagNET_CFG_RADAR_TRACK_FREQUENCY_INFO
{
    DWORD dwSize;                                     
    NET_RADAR_TRACK_FREQUENCY stuRadarTrackFrequency; 
} NET_CFG_RADAR_TRACK_FREQUENCY_INFO;
typedef struct tagNET_TRACK_MOVE_MODE_TIMESECTION
{
    BOOL bEnable;         
    char szTime[32];      
    char szReserved[252]; 
} NET_TRACK_MOVE_MODE_TIMESECTION;
typedef struct tagNET_RADAR_TRACK_MOVE_MODE_INFO
{
    int nMode;                                      
    BOOL bAllDayUse;                                
    NET_TRACK_MOVE_MODE_TIMESECTION stuTimeSection; 
    int nDayDistance;                               
    int nNightDistance;                             
    BOOL bEnable;                                   
    BOOL bRelayTrack;                               
    char szReserved[1024];                          
} NET_RADAR_TRACK_MOVE_MODE_INFO;
typedef struct tagNET_CFG_CFG_RADAR_TRACK_MOVE_MODE_INFO
{
    DWORD dwSize;                                        
    int nTrackMoveModeNum;                               
    NET_RADAR_TRACK_MOVE_MODE_INFO stuTrackMoveMode[10]; 
} NET_CFG_CFG_RADAR_TRACK_MOVE_MODE_INFO;
typedef struct tagNET_CFG_MINIRADAR_DECT_PARAM_INFO
{
    DWORD dwSize;         
    UINT nSensitivity;    
    UINT nReportInterval; 
} NET_CFG_MINIRADAR_DECT_PARAM_INFO;
typedef struct tagNET_CFG_MINIRADAR_BREATHE
{
    BOOL bEnable;          
    UINT nMax;             
    UINT nMin;             
    UINT nDelay;           
    UINT nAlarmOutMask;    
    char szReserved[1020]; 
} NET_CFG_MINIRADAR_BREATHE;
typedef struct tagNET_CFG_MINIRADAR_HEATERATE
{
    BOOL bEnable;          
    UINT nMax;             
    UINT nMin;             
    UINT nDelay;           
    UINT nAlarmOutMask;    
    char szReserved[1020]; 
} NET_CFG_MINIRADAR_HEATERATE;
typedef struct tagNET_CFG_MINIRADAR_AFBSTATUS
{
    BOOL bEnable;          
    UINT nAFBFlag;         
    UINT nDelay;           
    UINT nAlarmOutMask;    
    char szReserved[1024]; 
} NET_CFG_MINIRADAR_AFBSTATUS;
typedef struct tagNET_CFG_MINIRADAR_FALLALARM
{
    BOOL bEnable;          
    UINT nDelay;           
    UINT nAlarmOutMask;    
    char szReserved[1020]; 
} NET_CFG_MINIRADAR_FALLALARM;
typedef struct tagNET_CFG_MINIRADAR_NUMALARM
{
    BOOL bEnable;          
    UINT nMax;             
    UINT nMin;             
    UINT nDelay;           
    UINT nAlarmOutMask;    
    char szReserved[1020]; 
} NET_CFG_MINIRADAR_NUMALARM;
typedef struct tagNET_CFG_MINIRADAR_RESIDENTALARM
{
    BOOL bEnable;          
    UINT nTime;            
    UINT nDelay;           
    UINT nAlarmOutMask;    
    char szReserved[1024]; 
} NET_CFG_MINIRADAR_RESIDENTALARM;
typedef struct tagNET_CFG_MINIRADAR_INDOOR_ALARM_INFO
{
    DWORD dwSize;                                     
    NET_CFG_MINIRADAR_BREATHE stuBreathe;             
    NET_CFG_MINIRADAR_HEATERATE stuHeateRate;         
    NET_CFG_MINIRADAR_AFBSTATUS stuAFBStatus;         
    NET_CFG_MINIRADAR_FALLALARM stuFallAlarm;         
    NET_CFG_MINIRADAR_NUMALARM stuNumAlarm;           
    NET_CFG_MINIRADAR_RESIDENTALARM stuResidentAlarm; 
} NET_CFG_MINIRADAR_INDOOR_ALARM_INFO;
typedef struct tagNET_CFG_MINIRADAR_COMP_INFO
{
    DWORD dwSize;    
    int nRollAngle;  
    int nPitchAngle; 
    int nYawAngle;   
} NET_CFG_MINIRADAR_COMP_INFO;
typedef struct tagNET_CFG_MINIRADAR_INSTALL_INFO
{
    DWORD dwSize;       
    UINT nInstallType;  
    UINT nInstallHeigh; 
    int nInstallAngle;  
} NET_CFG_MINIRADAR_INSTALL_INFO;
typedef struct tagNET_CFG_MINIRADAR_REGION_DETECT_INFO
{
    DWORD dwSize;       
    UINT nFrontDecDis;  
    UINT nBehindDecDis; 
    UINT nLeftDecDis;   
    UINT nRightDecDis;  
} NET_CFG_MINIRADAR_REGION_DETECT_INFO;
typedef struct tagNET_MINIRADAR_SCREEN_CONFIG
{
    char szStatus[64];      
    char szUIPrompts[1024]; 
    UINT nMax;              
    UINT nMin;              
    char szResvered[1024];  
} NET_MINIRADAR_SCREEN_CONFIG;
typedef struct tagNET_CFG_MINIRADAR_SCREEN_CONFIG_INFO
{
    DWORD dwSize;                             
    int nConfigNum;                           
    NET_MINIRADAR_SCREEN_CONFIG stuConfig[6]; 
} NET_CFG_MINIRADAR_SCREEN_CONFIG_INFO;
#define MAX_ACTIVITY_ANALYSE_GROUP 128 
typedef enum tagNET_EM_VS_TYPE
{
    NET_EM_VS_TYPE_ACTIVITY_ANALYSE = 0,        
    NET_EM_VS_TYPE_CROWD_DISTRI_MAP = 1,        
    NET_EM_VS_TYPE_INTELLIG_PARKING = 3,        
    NET_EM_VS_TYPE_HEAD_LIFT_DETECTION = 4,     
    NET_EM_VS_TYPE_TANK_CAPACITY_DETECTION = 5, 
} NET_EM_VS_TYPE;
typedef enum tagNET_EM_VS_DATA_TYPE
{
    NET_EM_VS_DATA_TYPE_X = 0, 
} NET_EM_VS_DATA_TYPE;
typedef struct tagNET_VIDEOSTAT_INSIDESUBTOTAL_INFO
{
    int nPosXs[32];       
    int nPoxXsNum;        
    BYTE byReserved[988]; 
} NET_VIDEOSTAT_INSIDESUBTOTAL_INFO;
typedef struct tagNET_VIDEOSTAT_SUMMARY_STEREO
{
    NET_TIME_EX UTC;                                     
    int nChannelID;                                      
    int nPtzPresetId;                                    
    NET_EM_VS_DATA_TYPE emType;                          
    NET_VIDEOSTAT_INSIDESUBTOTAL_INFO stuInsideSubtotal; 
    BYTE reserved[1024];                                 
} NET_VIDEOSTAT_SUMMARY_STEREO;
typedef struct tagNET_PEOPLE_REGION_INFO
{
    char szRegionName[128]; 
    UINT nRegionPeopleNum;  
    BYTE reserved[1020];    
} NET_PEOPLE_REGION_INFO;
typedef struct tagNET_VIDEOSTAT_CROWD_DISTRI_MAP
{
    NET_TIME_EX UTC;                          
    UINT nChannelID;                          
    UINT nPtzPresetId;                        
    UINT nRegionNum;                          
    NET_PEOPLE_REGION_INFO stuRegionList[16]; 
    BYTE reserved[1024];                      
} NET_VIDEOSTAT_CROWD_DISTRI_MAP;
typedef enum tagNET_EM_INTELLIPARKING_DATA_TYPE
{
    NET_EM_INTELLIPARKING_DATA_TYPE_PLANAREA = 0, 
    NET_EM_INTELLIPARKING_DATA_TYPE_OPENAREA,     
} NET_EM_INTELLIPARKING_DATA_TYPE;
typedef struct tagNET_INTELLIPARKING_PLANAREA_IDINFO
{
    int nID;            
    UINT nIsUsed;       
    BYTE reserved[512]; 
} NET_INTELLIPARKING_PLANAREA_IDINFO;
typedef struct tagNET_INTELLIPARKING_PLANAREA_INFO
{
    int nIDInfoNum;                                  
    NET_INTELLIPARKING_PLANAREA_IDINFO stIDInfo[32]; 
    BYTE reserved[512];                              
} NET_INTELLIPARKING_PLANAREA_INFO;
typedef struct tagNET_INTELLIPARKING_OPENAREA_INFO
{
    int nID;            
    int nParkingNum;    
    BYTE reserved[512]; 
} NET_INTELLIPARKING_OPENAREA_INFO;
typedef struct tagNET_VIDEOSTAT_SUMMARY_INTELLIPARKING
{
    NET_TIME_EX UTC;                             
    int nChannelID;                              
    int nPtzPresetId;                            
    NET_EM_INTELLIPARKING_DATA_TYPE emType;      
    NET_INTELLIPARKING_PLANAREA_INFO stPlanArea; 
    NET_INTELLIPARKING_OPENAREA_INFO stOpenArea; 
    BYTE reserved[1024];                         
} NET_VIDEOSTAT_SUMMARY_INTELLIPARKING;
typedef struct tagNET_VIDEOSTAT_SUMMARY_HEAD_LIFT_DETECTION
{
    int nChannelID;        
    int nPtzPresetId;      
    NET_TIME_EX UTC;       
    UINT nFaceCount;       
    UINT nHumanCount;      
    char szReserved[1024]; 
} NET_VIDEOSTAT_SUMMARY_HEAD_LIFT_DETECTION;
typedef struct tagNET_VIDEOSTAT_SUMMARY_TANK_CAPACITY_DETECTION
{
    int nChannelID;              
    EM_TANK_STATUS emTankStatus; 
    NET_TIME_EX stuUTC;          
    UINT nCurrentRatio;          
    char szReserved[1024];       
} NET_VIDEOSTAT_SUMMARY_TANK_CAPACITY_DETECTION;
typedef void(CALLBACK* fVideoStatisticsInfoCallBack)(LLONG lAttachHandle, NET_EM_VS_TYPE emType, void* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VIDEO_STATISTICS
{
    DWORD dwSize;                            
    int nChannelID;                          
    fVideoStatisticsInfoCallBack cbCallBack; 
    LDWORD dwUser;                           
    NET_EM_VS_TYPE emType;                   
} NET_IN_ATTACH_VIDEO_STATISTICS;
typedef struct tagNET_OUT_ATTACH_VIDEO_STATISTICS
{
    DWORD dwSize; 
} NET_OUT_ATTACH_VIDEO_STATISTICS;
typedef struct tagNET_ACTIVITY_ANALYSE_DATA
{
    BYTE byVersion;                            
    BYTE byChannelID;                          
    BYTE byPtzPresetID;                        
    BYTE byReserved;                           
    DWORD dwNumOfBranches;                     
    DWORD dwDatas[MAX_ACTIVITY_ANALYSE_GROUP]; 
    BYTE byReserved1[1024];                    
} NET_ACTIVITY_ANALYSE_DATA;
typedef struct tagNET_VIDEOSTAT_DATA_INFO
{
    int nType;             
    int nPartitionNum;     
    BYTE byReserved[1024]; 
} NET_VIDEOSTAT_DATA_INFO;
typedef struct tagNET_GET_VIDEO_STATISTICS_DATA_CONDITION
{
    int nChannelID;                               
    int nPtzPresetId;                             
    NET_TIME stuStartTime;                        
    NET_TIME stuEndTime;                          
    NET_VIDEOSTAT_DATA_INFO stuVideoStatDataInfo; 
} NET_GET_VIDEO_STATISTICS_DATA_CONDITION;
typedef struct tagNET_IN_GET_VIDEO_STATISTICS_DATA
{
    DWORD dwSize;                                         
    NET_GET_VIDEO_STATISTICS_DATA_CONDITION stuCondition; 
} NET_IN_GET_VIDEO_STATISTICS_DATA;
typedef struct tagNET_OUT_GET_VIDEO_STATISTICS_DATA
{
    DWORD dwSize;                      
    NET_ACTIVITY_ANALYSE_DATA stuData; 
} NET_OUT_GET_VIDEO_STATISTICS_DATA;
typedef struct tagNET_GET_HEAD_LIFT_DATA_CONDITION
{
    int nChannelID;        
    int nPtzPresetId;      
    char szReserved[1024]; 
} NET_GET_HEAD_LIFT_DATA_CONDITION;
typedef struct tagNET_IN_GET_VIDEO_STATISTICS_HEAD_LIFT_DATA
{
    DWORD dwSize;                                  
    NET_GET_HEAD_LIFT_DATA_CONDITION stuCondition; 
} NET_IN_GET_VIDEO_STATISTICS_HEAD_LIFT_DATA;
typedef struct tagNET_OUT_GET_VIDEO_STATISTICS_HEAD_LIFT_DATA
{
    DWORD dwSize;     
    UINT nFaceCount;  
    UINT nHumanCount; 
} NET_OUT_GET_VIDEO_STATISTICS_HEAD_LIFT_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVideoStatistics(LLONG lLoginID, const NET_IN_ATTACH_VIDEO_STATISTICS* pstInParam, NET_OUT_ATTACH_VIDEO_STATISTICS* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVideoStatistics(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoStatisticsData(LLONG lLoginID, const NET_IN_GET_VIDEO_STATISTICS_DATA* pstInParam, NET_OUT_GET_VIDEO_STATISTICS_DATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoStatisticsHeadLiftData(LLONG lLoginID, const NET_IN_GET_VIDEO_STATISTICS_HEAD_LIFT_DATA* pstuInParam, NET_OUT_GET_VIDEO_STATISTICS_HEAD_LIFT_DATA* pstuOutParam, int nWaitTime);
#define NET_CFG_MAX_CTRLTYPE_NUM 16   
#define NET_MAX_ALL_SNAP_CAR_COUNT 32 
typedef enum tagNET_EM_CFG_TRAFFICSTROBE_CTRTYPE
{
    NET_EM_CFG_CTRTYPE_UNKNOWN = 0,      
    NET_EM_CFG_CTRTYPE_TRAFFICTRUSTLIST, 
    NET_EM_CFG_CTRTYPE_ALLSNAPCAR,       
    NET_EM_CFG_CTRTYPE_ORDER,            
} NET_EM_CFG_TRAFFICSTROBE_CTRTYPE;
typedef enum tagNET_EM_CFG_ALL_SNAP_CAR
{
    NET_EM_CFG_ALL_SNAP_CAR_UNKNOWN, 
    NET_EM_CFG_ALL_SNAP_CAR_PLATE,   
    NET_EM_CFG_ALL_SNAP_CAR_NOPLATE, 
} NET_EM_CFG_ALL_SNAP_CAR;
typedef struct tagNET_CFG_STATIONARY_OPEN
{
    BOOL bEnable;                        
    NET_CFG_TIME_SCHEDULE stTimeShecule; 
} NET_CFG_STATIONARY_OPEN;
typedef struct tagNET_CFG_TRAFFICSTROBE_INFO
{
    DWORD dwSize;                                                          
    BOOL bEnable;                                                          
    int nCtrlTypeCount;                                                    
    NET_EM_CFG_TRAFFICSTROBE_CTRTYPE emCtrlType[NET_CFG_MAX_CTRLTYPE_NUM]; 
    int nAllSnapCarCount;                                                  
    NET_EM_CFG_ALL_SNAP_CAR emAllSnapCar[NET_MAX_ALL_SNAP_CAR_COUNT];      
    NET_ALARM_MSG_HANDLE stuEventHandler;                                  
    NET_ALARM_MSG_HANDLE stuEventHandlerClose;                             
    char szOrderIP[DH_MAX_IPADDR_EX_LEN];                                  
    NET_EM_CFG_TRAFFICSTROBE_CTRTYPE emCtrlTypeOnDisconnect;               
    NET_CFG_STATIONARY_OPEN stuStationaryOpen;                             
} NET_CFG_TRAFFICSTROBE_INFO;
typedef struct tagNET_IN_DIALRECOGNITION_ADD_TASK
{
    DWORD dwSize;           
    unsigned int nChannel;  
    unsigned int nPresetID; 
} NET_IN_DIALRECOGNITION_ADD_TASK;
typedef enum tagEM_ADD_RESULT
{
    EM_ADD_RESULT_UNKNOWN,      
    EM_ADD_RESULT_SUCCESS,      
    EM_ADD_RESULT_PRESET_ERROR, 
} EM_ADD_RESULT;
typedef struct tagNET_OUT_DIALRECOGNITION_ADD_TASK
{
    DWORD dwSize;                   
    EM_ADD_RESULT emAddResult;      
    char szTaskID[MAX_TASK_ID_LEN]; 
} NET_OUT_DIALRECOGNITION_ADD_TASK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DialRecognitionAddTask(LLONG lLoginID, const NET_IN_DIALRECOGNITION_ADD_TASK* pInParam, NET_OUT_DIALRECOGNITION_ADD_TASK* pOutParam, int nWaitTime);
typedef enum tagEM_DIAL_RECOGNITION_TASK_TYPE
{
    EM_DIAL_RECOGNITION_TASK_TYPE_UNKNOWN,     
    EM_DIAL_RECOGNITION_TASK_TYPE_DIALCHECK,   
    EM_DIAL_RECOGNITION_TASK_TYPE_QRCODECHECK, 
} EM_DIAL_RECOGNITION_TASK_TYPE;
typedef struct tagNET_IN_DIALRECOGNITION_ADD_TASK_EX
{
    DWORD dwSize;                         
    unsigned int nChannel;                
    unsigned int nPresetID;               
    EM_DIAL_RECOGNITION_TASK_TYPE emType; 
} NET_IN_DIALRECOGNITION_ADD_TASK_EX;
typedef struct tagNET_OUT_DIALRECOGNITION_ADD_TASK_EX
{
    DWORD dwSize;                   
    EM_ADD_RESULT emAddResult;      
    char szTaskID[MAX_TASK_ID_LEN]; 
} NET_OUT_DIALRECOGNITION_ADD_TASK_EX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DialRecognitionAddTaskEx(LLONG lLoginID, const NET_IN_DIALRECOGNITION_ADD_TASK_EX* pInParam, NET_OUT_DIALRECOGNITION_ADD_TASK_EX* pOutParam, int nWaitTime);
typedef enum tagEM_CURRENT_TASK_STATE
{
    EM_CURRENT_TASK_STATE_UNKNWON,   
    EM_CURRENT_TASK_STATE_FAILED,    
    EM_CURRENT_TASK_STATE_SUCCEEDED, 
} EM_CURRENT_TASK_STATE;
typedef enum tagEM_ERROR_CODE_TYPE
{
    EM_ERROR_CODE_TYPE_UNKNOWN,           
    EM_ERROR_CODE_TYPE_NORMAL,            
    EM_ERROR_CODE_TYPE_GET_PICTURE_ERROR, 
    EM_ERROR_CODE_TYPE_ALGO_ERROR,        
} EM_ERROR_CODE_TYPE;
typedef struct tagNET_NODE_INFO
{
    unsigned int nChannel;                           
    unsigned int nPresetID;                          
    EM_INSTRUMENT_TYPE emInstrumentType;             
    NET_IMAGE_INFO stuImgaeInfo[MAX_IMAGE_INFO_NUM]; 
    int nRetImageInfoNum;                            
    char szDialResult[MAX_DIAL_RESULT_LEN];          
} NET_NODE_INFO;
typedef enum tagEM_NODE_INFO_TYPE
{
    EM_NODE_INFO_TYPE_UNKNOWN,               
    EM_NODE_INFO_TYPE_DIAL_RECOGNITION,      
    EM_NODE_INFO_TYPE_ELECTRIC_FAULT_DETECT, 
    EM_NODE_INFO_TYPE_QRCODE_CHECK,          
} EM_NODE_INFO_TYPE;
typedef struct tagNET_ELECTRIC_FAULT_DETECT_INFO
{
    EM_CLASS_TYPE emClassType;      
    UINT nChannel;                  
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    UINT nPresetID;                 
    int nEnableRulesNum;                              
    ELECTRIC_FAULT_ENABLE_RULES emEnableRules[16];    
    int nAirborneDetectNum;                           
    NET_AIRBORNE_DETECT stuAirborneDetectInfo[8];     
    int nNestDetectNum;                               
    NET_NEST_DETECT stuNestDetectInfo[8];             
    int nDialDetectNum;                               
    NET_DIAL_DETECT stuDialDetectInfo[8];             
    int nLeakageDetectNum;                            
    NET_LEAKAGE_DETECT stuLeakageDetectInfo[8];       
    int nDoorDetectNum;                               
    NET_DOOR_DETECT stuDoorDetectInfo[8];             
    int nRespiratorDetectNum;                         
    NET_RESPIRATOR_DETECT stuRespiratorDetectInfo[8]; 
    SCENE_IMAGE_INFO stuSceneImageInfo;               
    int nSmokingDetectNum;                                   
    NET_SMOKING_DETECT stuSmokingDetectInfo[8];              
    int nInsulatorDetectNum;                                 
    NET_INSULATOR_DETECT stuInsulatorDetectInfo[8];          
    int nCoverPlateDetectNum;                                
    NET_COVER_PLATE_DETECT stuCoverPlateDetectInfo[8];       
    int nPressingPlateDetectNum;                             
    NET_PRESSING_PLATE_DETECT stuPressingPlateDetectInfo[8]; 
    BYTE bReserved[1024];                                    
} NET_ELECTRIC_FAULT_DETECT_INFO;
typedef struct tagNET_QRCODE_CHECK_INFO
{
    EM_CLASS_TYPE emClassType;      
    UINT nChannel;                  
    char szName[DH_EVENT_NAME_LEN]; 
    double PTS;                     
    NET_TIME_EX UTC;                
    int nEventID;                   
    UINT nPresetID;                 
    BYTE byReserved1[4];            
    char szQRCode[512];    
    BYTE byReserved[1024]; 
} NET_QRCODE_CHECK_INFO;
typedef struct tagNET_TASK_STATE
{
    char szTaskID[MAX_TASK_ID_LEN];    
    EM_CURRENT_TASK_STATE emTaskState; 
    EM_ERROR_CODE_TYPE emErrorCode;    
    NET_NODE_INFO stuNodeInfo;         
    EM_NODE_INFO_TYPE emNodeInfoType;  
    void* pstuNodeInfo;                
} NET_TASK_STATE;
typedef void(CALLBACK* fTaskStateCallback)(LLONG lAttachHandle, NET_TASK_STATE* pBuf, BYTE* pBuffer, DWORD dwBufSize, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_TASK_PROC
{
    DWORD dwSize;                   
    BYTE byReserved[4];             
    fTaskStateCallback cbTaskState; 
    LDWORD dwUser;                  
} NET_IN_ATTACH_TASK_PROC;
typedef struct tagNET_OUT_ATTACH_TASK_PROC
{
    DWORD dwSize; 
} NET_OUT_ATTACH_TASK_PROC;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachDialRecognitionTaskProc(LLONG lLoginID, const NET_IN_ATTACH_TASK_PROC* pInParam, NET_OUT_ATTACH_TASK_PROC* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachDialRecognitionTaskProc(LLONG lAttachHandle);
typedef enum tagEM_LOCAL_CERTIFICATE_TYPE
{
    EM_LOCAL_CERTIFICATE_TYPE_UNKNOWN,            
    EM_LOCAL_CERTIFICATE_TYPE_IDENTITY_AUTH_CERT, 
    EM_LOCAL_CERTIFICATE_TYPE_DATA_AUTH_CERT,     
} EM_LOCAL_CERTIFICATE_TYPE;
typedef enum tagEM_NETWORK_TYPE
{
    EM_NETWORK_TYPE_PUBLIC_SECURITY_INFO_NETWORK, 
    EM_NETWORK_TYPE_VIDEO_PRIVATE_NETWORK,        
} EM_NETWORK_TYPE;
typedef enum tagEM_DIGITAL_CERTIFICATE_TYPE
{
    EM_DIGITAL_CERTIFICATE_TYPE_UNKNOWN, 
    EM_DIGITAL_CERTIFICATE_TYPE_GM,      
    EM_DIGITAL_CERTIFICATE_TYPE_GENERAL, 
    EM_DIGITAL_CERTIFICATE_TYPE_MAX, 
} EM_DIGITAL_CERTIFICATE_TYPE;
typedef struct tagNET_IN_GET_CERT_REQINFO
{
    DWORD dwSize;                                         
    EM_LOCAL_CERTIFICATE_TYPE emLocalCertType;            
    int nForm;                                            
    char szCountry[MAX_COUNTRY_CODE_LEN];                 
    char szProvince[MAX_PROVINCE_CODE_LEN];               
    char szCity[MAX_CITY_CODE_LEN];                       
    char szArea[MAX_AREA_CODE_LEN];                       
    EM_NETWORK_TYPE emSpecificNetworkType;                
    EM_DIGITAL_CERTIFICATE_TYPE emDigitalCertificateType; 
    char szCommonName[160];                               
    char szOrganization[64];                              
    char szOrganizationUnit[64];                          
    int nPubKeyType;                                      
} NET_IN_GET_CERT_REQINFO;
typedef struct tagNET_OUT_GET_CERT_REQINFO
{
    DWORD dwSize;                     
    int nReqInfoLen;                  
    char szReqInfo[MAX_REQ_INFO_LEN]; 
    char szSigInfo[1024];             
    char szSigAlg[64];                
    char szCACertSN[40];              
    char szIssuer[512];               
} NET_OUT_GET_CERT_REQINFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCertReqInfo(LLONG lLoginID, NET_IN_GET_CERT_REQINFO* pstInParam, NET_OUT_GET_CERT_REQINFO* pstOutParam, int nWaitTime);
typedef enum tagEM_CERT_TYPE
{
    EM_CERT_TYPE_UNKNWON,                   
    EM_CERT_TYPE_CA_CERT,                   
    EM_CERT_TYPE_ADMIN_CERT,                
    EM_CERT_TYPE_IDENTITY_AUTH_CERT,        
    EM_CERT_TYPE_DATA_AUTH_CERT,            
    EM_CERT_TYPE_REMOTE_IDENTITY_AUTH_CERT, 
    EM_CERT_TYPE_REMOTE_DATA_AUTH_CERT,     
    EM_CERT_TYPE_MAX,                       
} EM_CERT_TYPE;
typedef enum tagEM_CERT_SERVER_NAME
{
    EM_CERT_SERVER_NAME_GENERAL, 
    EM_CERT_SERVER_NAME_802_1X,  
    EM_CERT_SERVER_NAME_HTTPS,   
    EM_CERT_SERVER_NAME_MAX, 
} EM_CERT_SERVER_NAME;
typedef struct tagNET_IN_IMPORT_CERT
{
    DWORD dwSize;                                         
    EM_CERT_TYPE emCertType;                              
    char* pszCert;                                        
    int nCertLen;                                         
    BOOL bActiveCert;                                     
    char szUserName[64];                                  
    EM_DIGITAL_CERTIFICATE_TYPE emDigitalCertificateType; 
    int nKeyLen;                                          
    char* pszKey;                                         
    char szKeyPassword[64];                               
    int nKeyPasswordLen;                                  
    EM_CERT_SERVER_NAME emServerNames[8];                 
    int nServerNameNum;                                   
} NET_IN_IMPORT_CERT;
typedef struct tagNET_SUPPORT_CERT_LIST_INFO
{
    EM_CERT_TYPE emCertType;      
    NET_TIME stuEffectiveDate;    
    NET_TIME stuExpirationDate;   
    char szCertSN[40];            
    char szDeviceIdentifier[160]; 
    char szRealCertSN[80];        
    int nPubKeyType;              
    int nCertUse;                 
    BYTE byReserved[936];         
} NET_SUPPORT_CERT_LIST_INFO;
typedef struct tagNET_OUT_IMPORT_CERT
{
    DWORD dwSize;                                     
    int nRetSupportCertListNum;                       
    NET_SUPPORT_CERT_LIST_INFO stuSupportCertList[8]; 
} NET_OUT_IMPORT_CERT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ImportCert(LLONG lLoginID, NET_IN_IMPORT_CERT* pstInParam, NET_OUT_IMPORT_CERT* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_IMPORT_CRL
{
    DWORD dwSize;                                         
    int nCRLLen;                                          
    char* pszCRL;                                         
    EM_DIGITAL_CERTIFICATE_TYPE emDigitalCertificateType; 
    BYTE byReserved[4];                                   
} NET_IN_IMPORT_CRL;
typedef struct tagNET_OUT_IMPORT_CRL
{
    DWORD dwSize; 
} NET_OUT_IMPORT_CRL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ImportCRL(LLONG lLoginID, NET_IN_IMPORT_CRL* pstInParam, NET_OUT_IMPORT_CRL* pstOutParam, int nWaitTime);
typedef enum tagEM_PROTOCOL_NAME
{
    EM_PROTOCOL_NAME_UNKNOWN, 
    EM_PROTOCOL_NAME_GB28181, 
    EM_PROTOCOL_NAME_MAX,     
} EM_PROTOCOL_NAME;
typedef struct tagNET_IN_GET_VERSION
{
    DWORD dwSize;                    
    EM_PROTOCOL_NAME emProtocolName; 
} NET_IN_GET_VERSION;
typedef struct tagNET_OUT_GET_VERSION
{
    DWORD dwSize;                                        
    char szGB28181Version[MAX_GB28181_PROTOCOL_VERSION]; 
} NET_OUT_GET_VERSION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_IntervideoManagerGetVersion(LLONG lLoginID, NET_IN_GET_VERSION* pstInParam, NET_OUT_GET_VERSION* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_USER_AUTH_INFO
{
    DWORD dwSize;                              
    char szPassword[DH_COMMON_STRING_128];     
    char szPasswordHint[DH_COMMON_STRING_128]; 
    char szPhoneNo[DH_COMMON_STRING_32];       
    char szEmail[DH_COMMON_STRING_128];        
} NET_IN_SET_USER_AUTH_INFO;
typedef struct tagNET_OUT_SET_USER_AUTH_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_USER_AUTH_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NASFileSetUserAuthInfo(LLONG lLoginID, const NET_IN_SET_USER_AUTH_INFO* pInParam, NET_OUT_SET_USER_AUTH_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_MODIFY_PASSWORD
{
    DWORD dwSize;                              
    char szOldPassword[DH_COMMON_STRING_128];  
    char szNewPassword[DH_COMMON_STRING_128];  
    char szPasswordHint[DH_COMMON_STRING_128]; 
} NET_IN_MODIFY_PASSWORD;
typedef struct tagNET_OUT_MODIFY_PASSWORD
{
    DWORD dwSize; 
} NET_OUT_MODIFY_PASSWORD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NASFileModifyPassword(LLONG lLoginID, const NET_IN_MODIFY_PASSWORD* pInParam, NET_OUT_MODIFY_PASSWORD* pOutParam, int nWaitTime);
typedef struct tagNET_IN_AUTHENTICATE
{
    DWORD dwSize;                          
    char szPassword[DH_COMMON_STRING_128]; 
} NET_IN_AUTHENTICATE;
typedef struct tagNET_OUT_AUTHENTICATE
{
    DWORD dwSize; 
} NET_OUT_AUTHENTICATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NASFileAuthenticate(LLONG lLoginID, const NET_IN_AUTHENTICATE* pInParam, NET_OUT_AUTHENTICATE* pOutParam, int nWaitTime);
typedef enum tagEM_EXMODULE_TYPE
{
    EM_EXMODULE_TYPE_UNKNOWN, 
    EM_EXMODULE_TYPE_M_BUS,   
    EM_EXMODULE_TYPE_RS_485,  
} EM_EXMODULE_TYPE;
typedef struct tagNET_IN_GETEXMODULEDETAIL
{
    DWORD dwSize;            
    EM_EXMODULE_TYPE emType; 
    int nAddr;               
} NET_IN_GETEXMODULEDETAIL;
typedef struct tagNET_OUT_GETEXMODULEDETAIL
{
    DWORD dwSize;              
    int nAlarmInChannelCount;  
    int alarmInChannels[16];   
    int nAlarmOutChannelCount; 
    int alarmOutChannels[16];  
} NET_OUT_GETEXMODULEDETAIL;
typedef enum tagNET_EM_GET_EXMODULE_INFO
{
    NET_EM_GET_EXMODULE_INFO_UNKNOWN, 
    NET_EM_GET_EXMODULE_INFO_DETAIL,  
    NET_EM_GET_EXMODULE_INFO_STATE,   
} NET_EM_GET_EXMODULE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetExModuleInfo(LLONG lLoginID, NET_EM_GET_EXMODULE_INFO emType, const void* pstuInParam, void* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_NATIONINFO
{
    DWORD dwSize; 
} NET_IN_GET_NATIONINFO;
#define NET_COUNTRYZONE_LENGTH 64 
#define NET_COUNTRYABBR_LENGTH 4  
#define NET_LANGUAGE_LENGTH 12    
#define NET_TIMEZONE_LENGTH 80    
typedef struct tagNET_NATION_INFO
{
    char szCountry[NET_COUNTRYZONE_LENGTH];      
    char szAbbreviation[NET_COUNTRYABBR_LENGTH]; 
    char szLanguage[NET_LANGUAGE_LENGTH];        
    EM_VIDEO_STANDARD emVideoStandard;           
    char szTimeZoneDesc[NET_TIMEZONE_LENGTH];    
    char szLanguageEx[32];                       
    BYTE byReserved[96];                         
} NET_NATION_INFO;
typedef struct tagNET_OUT_GET_NATIONINFO
{
    DWORD dwSize;                       
    int nNationInfoCnt;                 
    NET_NATION_INFO arrNationInfo[300]; 
} NET_OUT_GET_NATIONINFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNationInfo(LLONG lLoginID, NET_IN_GET_NATIONINFO* pInParam, NET_OUT_GET_NATIONINFO* pOutParam, int waittime);
typedef struct tagNET_IN_GET_LANGUAGELIST
{
    DWORD dwSize; 
} NET_IN_GET_LANGUAGELIST;
#define NET_LANGUAGELIST_LENGTH 12 
typedef struct tagNET_OUT_GET_LANGUAGELIST
{
    DWORD dwSize;                                      
    int nLangueListCnt;                                
    char arrLanguageList[50][NET_LANGUAGELIST_LENGTH]; 
    int nLangueListCntEx;                              
    char arrLanguageListEx[50][24];                    
} NET_OUT_GET_LANGUAGELIST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLanguageList(LLONG lLoginID, NET_IN_GET_LANGUAGELIST* pInParam, NET_OUT_GET_LANGUAGELIST* pOutParam, int waittime);
#define MAX_SCENEID_LEN 32 
typedef struct tagNET_IN_CONFIRMSCENECHANGERESULT_INFO
{
    DWORD dwSize;                    
    char szSceneID[MAX_SCENEID_LEN]; 
    BOOL bResult;                    
} NET_IN_CONFIRMSCENECHANGERESULT_INFO;
typedef struct tagNET_OUT_CONFIRMSCENECHANGERESULT_INFO
{
    DWORD dwSize; 
} NET_OUT_CONFIRMSCENECHANGERESULT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ConfirmSceneChangeResult(LLONG lLoginID, const NET_IN_CONFIRMSCENECHANGERESULT_INFO* pstuInParam, NET_OUT_CONFIRMSCENECHANGERESULT_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_CONFIRM_AUTHORIZED_RESULT
{
    DWORD dwSize;     
    int nResult;      
    char* pszQRCode;  
    BOOL bIsTest;     
    UINT nTimeout;    
    UINT nExpiryTime; 
} NET_IN_CONFIRM_AUTHORIZED_RESULT;
typedef struct tagNET_OUT_CONFIRM_AUTHORIZED_RESULT
{
    DWORD dwSize; 
} NET_OUT_CONFIRM_AUTHORIZED_RESULT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ConfirmAuthorizedResult(LLONG lLoginID, const NET_IN_CONFIRM_AUTHORIZED_RESULT* pstInParam, NET_OUT_CONFIRM_AUTHORIZED_RESULT* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_SENSOR_COLLECT_SUPPORT_LIST
{
    DWORD dwSize; 
} NET_IN_GET_SENSOR_COLLECT_SUPPORT_LIST;
typedef enum tagEM_SENSOR_MEDIA_TYPE
{
    EM_SENSOR_MEDIA_TYPE_UNKNOWN, 
    EM_SENSOR_MEDIA_TYPE_COAXIAL, 
    EM_SENSOR_MEDIA_TYPE_433,     
} EM_SENSOR_MEDIA_TYPE;
typedef enum tagEM_WIRELESS_SENSOR_TYPE
{
    EM_WIRELESS_SENSOR_TYPE_UNKNOWN,          
    EM_WIRELESS_SENSOR_TYPE_HUMIDITY_SENSOR,  
    EM_WIRELESS_SENSOR_TYPE_TEMP_SENSOR,      
    EM_WIRELESS_SENSOR_TYPE_DOOR_MAGNETISM,   
    EM_WIRELESS_SENSOR_TYPE_URGENCY_BUTTON,   
    EM_WIRELESS_SENSOR_TYPE_PASSIVE_INFRARED, 
    EM_WIRELESS_SENSOR_TYPE_CURTAIN_SENSOR,   
    EM_WIRELESS_SENSOR_TYPE_WATER_SENSOR,     
    EM_WIRELESS_SENSOR_TYPE_SMOKING_SENSOR,   
    EM_WIRELESS_SENSOR_TYPE_COAXIAL_EXTALARM, 
} EM_WIRELESS_SENSOR_TYPE;
typedef struct tagNET_SENSOR_ID_INFO
{
    EM_SENSOR_MEDIA_TYPE emMediaType;      
    DWORD nAPIndex;                        
    DWORD nAlarmChannel;                   
    NET_WIRELESS_DEVICE_TYPE emDeviceType; 
    EM_WIRELESS_SENSOR_TYPE emSensorType;  
    BYTE byReserved[128];                  
} NET_SENSOR_ID_INFO;
#define MAX_SENSOR_ID_COUNT 256
typedef struct tagNET_OUT_GET_SENSOR_COLLECT_SUPPORT_LIST
{
    DWORD dwSize;                                   
    int nCount;                                     
    NET_SENSOR_ID_INFO stInfo[MAX_SENSOR_ID_COUNT]; 
} NET_OUT_GET_SENSOR_COLLECT_SUPPORT_LIST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSensorCollectSupportList(LLONG lLoginID, const NET_IN_GET_SENSOR_COLLECT_SUPPORT_LIST* pInParam, NET_OUT_GET_SENSOR_COLLECT_SUPPORT_LIST* pOutParam, int nWaitTime);
typedef struct tagNET_IN_START_REMOTELOWRATEWPAN_ALARMBELL
{
    DWORD dwSize;   
    int nChannelID; 
} NET_IN_START_REMOTELOWRATEWPAN_ALARMBELL;
typedef struct tagNET_OUT_START_REMOTELOWRATEWPAN_ALARMBELL
{
    DWORD dwSize; 
} NET_OUT_START_REMOTELOWRATEWPAN_ALARMBELL;
typedef struct tagNET_IN_STOP_REMOTELOWRATEWPAN_ALARMBELL
{
    DWORD dwSize;   
    int nChannelID; 
} NET_IN_STOP_REMOTELOWRATEWPAN_ALARMBELL;
typedef struct tagNET_OUT_STOP_REMOTELOWRATEWPAN_ALARMBELL
{
    DWORD dwSize; 
} NET_OUT_STOP_REMOTELOWRATEWPAN_ALARMBELL;
typedef enum tagEM_CALL_STATUS
{
    EM_CALL_STATUS_UNKNOWN,
    EM_CALL_STATUS_TRYING,                  
    EM_CALL_STATUS_RINGING,                 
    EM_CALL_STATUS_PREPARECONNECTED,        
    EM_CALL_STATUS_CONNECTED,               
    EM_CALL_STATUS_CALLED,                  
    EM_CALL_STATUS_PREPARELEAVINGMESSAGE,   
    EM_CALL_STATUS_LEAVINGMESSAGECONNECTED, 
    EM_CALL_STATUS_CALLEND,                 
    EM_CALL_STATUS_CALLTRANSFER,            
    EM_CALL_STATUS_CALLTRANSFERCONNECTED,   
    EM_CALL_STATUS_HELD,                    
    EM_CALL_STATUS_RESUME,                  
    EM_CALL_STATUS_DND,                     
    EM_CALL_STATUS_REMOTESDPCHANGE,         
    EM_CALL_STATUS_REFUSE,                  
} EM_CALL_STATUS;
typedef struct tagNET_IN_VTP_THIRDCALL_STATUS
{
    DWORD dwSize;
    EM_CALL_STATUS emCallStatus; 
} NET_IN_VTP_THIRDCALL_STATUS;
typedef struct tagNET_OUT_VTP_THIRDCALL_STATUS
{
    DWORD dwSize;
    char szCallID[64]; 
} NET_OUT_VTP_THIRDCALL_STATUS;
typedef struct tagNET_IN_ACCESS_CLEAR_STATUS
{
    DWORD dwSize;
} NET_IN_ACCESS_CLEAR_STATUS;
typedef struct tagNET_OUT_ACCESS_CLEAR_STATUS
{
    DWORD dwSize;
    BOOL bClearResult; 
} NET_OUT_ACCESS_CLEAR_STATUS;
typedef enum tagEM_ACCESS_DEAL_RECORD_STATUS
{
    EM_ACCESS_DEAL_RECORD_STATUS_NO,    
    EM_ACCESS_DEAL_RECORD_STATUS_ENTRY, 
    EM_ACCESS_DEAL_RECORD_STATUS_EXIT,  
} EM_ACCESS_DEAL_RECORD_STATUS;
typedef struct tagNET_IN_ACCESS_DEAL_RECORD
{
    DWORD dwSize;
    char szUserID[32];                     
    int nType;                             
    EM_ACCESS_DEAL_RECORD_STATUS emStatus; 
} NET_IN_ACCESS_DEAL_RECORD;
typedef struct tagNET_OUT_ACCESS_DEAL_RECORD
{
    DWORD dwSize;
    BOOL bDealResult;                      
    EM_ACCESS_DEAL_RECORD_STATUS emStatus; 
} NET_OUT_ACCESS_DEAL_RECORD;
typedef struct tagNET_PROXY_SERVER_INFO
{
    char szIP[DH_MAX_IPADDR_LEN_EX]; 
    UINT nPort;                      
    BYTE byReserved[84];
} NET_PROXY_SERVER_INFO;
typedef struct tagNET_IN_CHECK_CLOUD_UPGRADER
{
    DWORD dwSize;                  
    UINT nWay;                     
    NET_PROXY_SERVER_INFO stProxy; 
} NET_IN_CHECK_CLOUD_UPGRADER;
typedef enum tagEM_CLOUD_UPGRADER_CHECK_STATE
{
    EM_CLOUD_UPGRADER_CHECK_STATE_UNKNOWN,   
    EM_CLOUD_UPGRADER_CHECK_STATE_NONE,      
    EM_CLOUD_UPGRADER_CHECK_STATE_REGULAR,   
    EM_CLOUD_UPGRADER_CHECK_STATE_EMERGENCY, 
    EM_CLOUD_UPGRADER_CHECK_STATE_AUTOMATIC, 
} EM_CLOUD_UPGRADER_CHECK_STATE;
typedef enum tagEM_CLOUD_UPGRADER_PACKAGE_TYPE
{
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_UNKNOWN,    
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_ALL,        
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_PTZ,        
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_WEB,        
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_LOGO,       
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_CUSTOM,     
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_GUI,        
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_PD,         
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_DATA,       
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_PTZ_POWER,  
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_PTZ_LIGHT,  
    EM_CLOUD_UPGRADER_PACKAGE_TYPE_PTZ_HEATER, 
} EM_CLOUD_UPGRADER_PACKAGE_TYPE;
typedef struct tagNET_OUT_CHECK_CLOUD_UPGRADER
{
    DWORD dwSize;                                 
    EM_CLOUD_UPGRADER_CHECK_STATE emState;        
    EM_CLOUD_UPGRADER_PACKAGE_TYPE emPackageType; 
    char szOldVersion[MAX_COMMON_STRING_64];      
    char szNewVersion[MAX_COMMON_STRING_64];      
    char szAttention[MAX_COMMON_STRING_2048];     
    char szPackageURL[MAX_COMMON_STRING_256];     
    char szPackageID[MAX_COMMON_STRING_64];       
    char szCheckSum[MAX_COMMON_STRING_64];        
    char szBuildTime[MAX_COMMON_STRING_32];       
} NET_OUT_CHECK_CLOUD_UPGRADER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CheckCloudUpgrader(LLONG lLoginID, const NET_IN_CHECK_CLOUD_UPGRADER* pInParam, NET_OUT_CHECK_CLOUD_UPGRADER* pOutParam, int nWaitTime);
typedef struct tagNET_CLOUD_UPGRADER_INFO
{
    char szPackageURL[MAX_COMMON_STRING_256]; 
    char szPackageID[MAX_COMMON_STRING_64];   
    char szCheckSum[MAX_COMMON_STRING_64];    
    BYTE byReserved[1024];                    
} NET_CLOUD_UPGRADER_INFO;
typedef struct tagNET_IN_EXECUTE_CLOUD_UPGRADER
{
    DWORD dwSize;                            
    char szNewVersion[MAX_COMMON_STRING_64]; 
    UINT nWay;                               
    NET_PROXY_SERVER_INFO stProxy;           
    NET_CLOUD_UPGRADER_INFO stInfo;          
} NET_IN_EXECUTE_CLOUD_UPGRADER;
typedef struct tagNET_OUT_EXECUTE_CLOUD_UPGRADER
{
    DWORD dwSize; 
} NET_OUT_EXECUTE_CLOUD_UPGRADER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ExecuteCloudUpgrader(LLONG lLoginID, const NET_IN_EXECUTE_CLOUD_UPGRADER* pInParam, NET_OUT_EXECUTE_CLOUD_UPGRADER* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CLOUD_UPGRADER_STATE
{
    DWORD dwSize; 
} NET_IN_GET_CLOUD_UPGRADER_STATE;
typedef enum tagEM_CLOUD_UPGRADER_STATE
{
    EM_CLOUD_UPGRADER_STATE_UNKNOWN,        
    EM_CLOUD_UPGRADER_STATE_NOUPGRADE,      
    EM_CLOUD_UPGRADER_STATE_PREPARING,      
    EM_CLOUD_UPGRADER_STATE_DOWNLOADING,    
    EM_CLOUD_UPGRADER_STATE_DOWNLOADFAILED, 
    EM_CLOUD_UPGRADER_STATE_UPGRADING,      
    EM_CLOUD_UPGRADER_STATE_INVALID,        
    EM_CLOUD_UPGRADER_STATE_FAILED,         
    EM_CLOUD_UPGRADER_STATE_SUCCEEDED,      
} EM_CLOUD_UPGRADER_STATE;
typedef struct tagNET_OUT_GET_CLOUD_UPGRADER_STATE
{
    DWORD dwSize;                    
    EM_CLOUD_UPGRADER_STATE emState; 
    UINT nProgress;                  
} NET_OUT_GET_CLOUD_UPGRADER_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCloudUpgraderState(LLONG lLoginID, const NET_IN_GET_CLOUD_UPGRADER_STATE* pInParam, NET_OUT_GET_CLOUD_UPGRADER_STATE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CLOUD_UPGRADER_AUTO_CHECK
{
    DWORD dwSize; 
} NET_IN_GET_CLOUD_UPGRADER_AUTO_CHECK;
typedef struct tagNET_OUT_GET_CLOUD_UPGRADER_AUTO_CHECK
{
    DWORD dwSize; 
    BOOL bFlag;   
} NET_OUT_GET_CLOUD_UPGRADER_AUTO_CHECK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCloudUpgraderAutoCheck(LLONG lLoginID, const NET_IN_GET_CLOUD_UPGRADER_AUTO_CHECK* pstuInParam, NET_OUT_GET_CLOUD_UPGRADER_AUTO_CHECK* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_CLOUD_UPGRADER_AUTO_CHECK
{
    DWORD dwSize; 
    BOOL bFlag;   
} NET_IN_SET_CLOUD_UPGRADER_AUTO_CHECK;
typedef struct tagNET_OUT_SET_CLOUD_UPGRADER_AUTO_CHECK
{
    DWORD dwSize; 
} NET_OUT_SET_CLOUD_UPGRADER_AUTO_CHECK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetCloudUpgraderAutoCheck(LLONG lLoginID, const NET_IN_SET_CLOUD_UPGRADER_AUTO_CHECK* pstuInParam, NET_OUT_SET_CLOUD_UPGRADER_AUTO_CHECK* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_SUPPORT_CHANNEL_NUM
{
    DWORD dwSize; 
} NET_IN_GET_SUPPORT_CHANNEL_NUM;
typedef struct tagNET_OUT_GET_SUPPORT_CHANNEL_NUM
{
    DWORD dwSize; 
    int nCount;   
} NET_OUT_GET_SUPPORT_CHANNEL_NUM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoDiagnosisChannelNumber(LLONG lLoginID, const NET_IN_GET_SUPPORT_CHANNEL_NUM* pInParam, NET_OUT_GET_SUPPORT_CHANNEL_NUM* pOutParam, int nWaitTime);
#define MAX_VIDEO_CHANNEL_COUNT 128 
typedef struct tagNET_IN_GET_REMOTELOWRATEWPAN_CAPS
{
    DWORD dwSize;                            
    int nChannelCount;                       
    int stChannels[MAX_VIDEO_CHANNEL_COUNT]; 
} NET_IN_GET_REMOTELOWRATEWPAN_CAPS;
typedef struct tagNET_REMOTE_LOW_RATE_WPAN_CAPS
{
    BOOL bSupportWirelessGateway; 
    BYTE byRevserved[256];        
} NET_REMOTE_LOW_RATE_WPAN_CAPS;
typedef enum tagEM_RETURN_CODE_TYPE
{
    EM_RETURN_CODE_TYPE_UNKNOWN, 
    EM_RETURN_CODE_TYPE_OK,      
    EM_RETURN_CODE_TYPE_FAILED,  
    EM_RETURN_CODE_TYPE_TIMEOUT, 
} EM_RETURN_CODE_TYPE;
typedef struct tagNET_OUT_GET_REMOTELOWRATEWPAN_CAPS
{
    DWORD dwSize;                                                  
    int nRetChannelCount;                                          
    NET_REMOTE_LOW_RATE_WPAN_CAPS stCaps[MAX_VIDEO_CHANNEL_COUNT]; 
    int nRetCodeCount;                                             
    EM_RETURN_CODE_TYPE stReturnCode[MAX_VIDEO_CHANNEL_COUNT];     
} NET_OUT_GET_REMOTELOWRATEWPAN_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteLowRateWPANCaps(LLONG lLoginID, const NET_IN_GET_REMOTELOWRATEWPAN_CAPS* pInParam, NET_OUT_GET_REMOTELOWRATEWPAN_CAPS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_COAXIAL_SENSOR_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_COAXIAL_SENSOR_INFO;
typedef enum tagEM_SENSOR_CLASS_TYPE
{
    EM_SENSOR_CLASS_TYPE_UNKOWN,      
    EM_SENSOR_CLASS_TYPE_ALARM_IN,    
    EM_SENSOR_CLASS_TYPE_ALARM_OUT,   
    EM_SENSOR_CLASS_TYPE_ANALOGALARM, 
} EM_SENSOR_CLASS_TYPE;
#define MAX_COAXIAL_SENSOR_INFO_COUNT 256 
typedef struct tagNET_COAXIAL_SENSOR_INFO
{
    NET_SENSOR_ID_INFO stSensorID;           
    BOOL bIsOnLine;                          
    char szAlarmName[MAX_COMMON_STRING_128]; 
    EM_SENSOR_CLASS_TYPE emSensorClass;      
    char szSN[MAX_COMMON_STRING_32];         
    BYTE byRevserved[256];                   
} NET_COAXIAL_SENSOR_INFO;
typedef struct tagNET_OUT_GET_COAXIAL_SENSOR_INFO
{
    DWORD dwSize;                                                        
    int nRetCount;                                                       
    NET_COAXIAL_SENSOR_INFO stSensorInfo[MAX_COAXIAL_SENSOR_INFO_COUNT]; 
} NET_OUT_GET_COAXIAL_SENSOR_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCoaxialSensorInfo(LLONG lLoginID, const NET_IN_GET_COAXIAL_SENSOR_INFO* pInParam, NET_OUT_GET_COAXIAL_SENSOR_INFO* pOutParam, int nWaitTime);
#define MAX_VIDEO_URL_LEN 256 
typedef struct tagNET_VIDEO_SOURCE_INFO
{
    EM_DEV_PROTOCOL_TYPE emProtocolType;    
    char szIp[DH_MAX_IPADDR_OR_DOMAIN_LEN]; 
    int nPort;                              
    char szUser[DH_NEW_USER_NAME_LENGTH];   
    char szPwd[DH_NEW_USER_PSW_LENGTH];     
    int nChannelID;                         
    char szStreamUrl[512];                  
    BYTE byReserved[256];                   
} NET_VIDEO_SOURCE_INFO;
typedef enum tagEM_TRANSCODE_IMAGE_QUALITY
{
    EM_TRANSCODE_IMAGE_QUALITY_SELFADAPT, 
    EM_TRANSCODE_IMAGE_QUALITY_Q10,       
    EM_TRANSCODE_IMAGE_QUALITY_Q30,       
    EM_TRANSCODE_IMAGE_QUALITY_Q50,       
    EM_TRANSCODE_IMAGE_QUALITY_Q60,       
    EM_TRANSCODE_IMAGE_QUALITY_Q80,       
    EM_TRANSCODE_IMAGE_QUALITY_Q100,      
} EM_TRANSCODE_IMAGE_QUALITY;
typedef enum tagEM_TRANSCODE_VIDEO_COMPRESSION
{
    EM_TRANSCODE_VIDEO_AUTO,  
    EM_TRANSCODE_VIDEO_MPEG4, 
    EM_TRANSCODE_VIDEO_MPEG2, 
    EM_TRANSCODE_VIDEO_MPEG1, 
    EM_TRANSCODE_VIDEO_MJPG,  
    EM_TRANSCODE_VIDEO_H263,  
    EM_TRANSCODE_VIDEO_H264,  
    EM_TRANSCODE_VIDEO_H265,  
} EM_TRANSCODE_VIDEO_COMPRESSION;
typedef struct tagNET_TRANSCODE_VIDEO_FORMAT
{
    EM_TRANSCODE_VIDEO_COMPRESSION emCompression; 
    UINT nWidth;                                  
    UINT nHeight;                                 
    NET_EM_BITRATE_CONTROL emBitRateControl;      
    UINT nBitRate;                                
    float fFrameRate;                             
    UINT nIFrameInterval;                         
    EM_TRANSCODE_IMAGE_QUALITY emImageQuality;    
    BYTE byReserved[512];                         
} NET_TRANSCODE_VIDEO_FORMAT;
typedef struct tagNET_TRANSCODE_AUDIO_FORMAT
{
    NET_EM_AUDIO_FORMAT emCompression; 
    UINT nFrequency;                   
    BYTE byReserved[512];              
} NET_TRANSCODE_AUDIO_FORMAT;
typedef struct tagNET_TRANSCODE_SNAP_FORMAT
{
    UINT nWidth;          
    UINT nHeight;         
    BYTE byReserved[128]; 
} NET_TRANSCODE_SNAP_FORMAT;
typedef struct tagNET_TRANSCODE_WATER_MARK
{
    char szText[256];     
    BYTE byReserved[512]; 
} NET_TRANSCODE_WATER_MARK;
typedef struct tagNET_VIRTUALCHANNEL_POLICY
{
    BOOL bDeleteByCaller; 
    BOOL bContinuous;     
    UINT nVirtualChannel; 
    BYTE byReserved[508]; 
} NET_VIRTUALCHANNEL_POLICY;
typedef struct tagNET_IN_GET_VIRTUALCHANNEL_OF_TRANSCODE
{
    DWORD dwSize;                                   
    NET_VIDEO_SOURCE_INFO stuVideoSourceInfo;       
    NET_TRANSCODE_VIDEO_FORMAT stuTransVideoFormat; 
    NET_TRANSCODE_AUDIO_FORMAT stuTransAudioFormat; 
    NET_VIRTUALCHANNEL_POLICY stuVirtualChnPolicy;  
    NET_TRANSCODE_SNAP_FORMAT stuSnapFormat;        
    NET_TRANSCODE_WATER_MARK stuWaterMark[4];       
} NET_IN_GET_VIRTUALCHANNEL_OF_TRANSCODE;
typedef struct tagNET_OUT_GET_VIRTUALCHANNEL_OF_TRANSCODE
{
    DWORD dwSize;         
    UINT nVirtualChannel; 
} NET_OUT_GET_VIRTUALCHANNEL_OF_TRANSCODE;
typedef struct tagNET_IN_DEL_VIRTUALCHANNEL_OF_TRANSCODE
{
    DWORD dwSize;        
    int nVirtualChannel; 
} NET_IN_DEL_VIRTUALCHANNEL_OF_TRANSCODE;
typedef struct tagNET_OUT_DEL_VIRTUALCHANNEL_OF_TRANSCODE
{
    DWORD dwSize; 
} NET_OUT_DEL_VIRTUALCHANNEL_OF_TRANSCODE;
typedef struct tagNET_IN_TRANDCODE_GET_CAPS
{
    DWORD dwSize; 
} NET_IN_TRANDCODE_GET_CAPS;
typedef struct tagNET_OUT_TRANSCODE_GET_CAPS
{
    DWORD dwSize;                                   
    int nMinVirtualChannel;                         
    int nMaxVirtualChannel;                         
    BOOL bSupportErrorCode;                         
    BOOL bSupportContinuous;                        
    BOOL bSupportDelByCaller;                       
    BOOL bSupportSpecifyVirtualChannel;             
    float fMaxDownLoadSpeed;                        
    UINT nSupportCompressMaxChannel;                
    char szSupportCompressResolutionRangeMin[32];   
    char szSupportCompressResolutionRangeMax[32];   
    int nSupportCompressFpsRangeMin;                
    int nSupportCompressFpsRangeMax;                
    char szSupportCompressAudioTypes[64][32];       
    int nSupportCompressAudioTypesNum;              
    int nSupportCompressCompressionTypesNum;        
    char szSupportCompressCompressionTypes[64][32]; 
} NET_OUT_TRANSCODE_GET_CAPS;
typedef enum tagEM_VIRCHANNEL_STATUS
{
    EM_VIRCHANNEL_STATUS_UNKNOWN = -1,          
    EM_VIRCHANNEL_STATUS_OVER_DECODE,           
    EM_VIRCHANNEL_STATUS_OVER_COMPRESS,         
    EM_VIRCHANNEL_STATUS_NO_ORIGI_STREAM,       
    EM_VIRCHANNEL_STATUS_SLAVE_OFFLINE,         
    EM_VIRCHANNEL_STATUS_UNKNOWN_FAILURE = 255, 
} EM_VIRCHANNEL_STATUS;
typedef struct tagNET_CB_VIRTUALCHANNEL_STATUS_INFO
{
    UINT nVirChannelID;                      
    EM_VIRCHANNEL_STATUS emVirChannelStatus; 
    BYTE byReserved[1024];                   
} NET_CB_VIRTUALCHANNEL_STATUS_INFO;
typedef int(CALLBACK* fVirtualChannelStatusCallBack)(const LLONG lAttachHandle, const NET_CB_VIRTUALCHANNEL_STATUS_INFO* pstVirChnStatusInfo, const LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VIRTUALCHANNEL_STATUS
{
    DWORD dwSize;                                         
    BYTE byReserved[4];                                   
    fVirtualChannelStatusCallBack cbVirtualChannelStatus; 
    LDWORD dwUser;                                        
} NET_IN_ATTACH_VIRTUALCHANNEL_STATUS;
typedef struct tagNET_IN_REMOTE_COMPRESS_STATUS
{
    DWORD dwSize; 
} NET_IN_REMOTE_COMPRESS_STATUS;
typedef enum tagEM_REMOTE_COMPRESS_TRADE_TYPE
{
    EM_REMOTE_COMPRESS_TRADE_UNKNOWN = -1,     
    EM_REMOTE_COMPRESS_TRADE_PLAY,             
    EM_REMOTE_COMPRESS_TRADE_PLAYBACK,         
    EM_REMOTE_COMPRESS_TRADE_PLAYBACK_X2,      
    EM_REMOTE_COMPRESS_TRADE_PLAYBACK_X4,      
    EM_REMOTE_COMPRESS_TRADE_PLAYBACK_X8,      
    EM_REMOTE_COMPRESS_TRADE_DOWNLOAD,         
    EM_REMOTE_COMPRESS_TRADE_PLAYBACK_HALF,    
    EM_REMOTE_COMPRESS_TRADE_PLAYBACK_QUARTER, 
    EM_REMOTE_COMPRESS_TRADE_PLAYBACK_EIGHTH,  
} EM_REMOTE_COMPRESS_TRADE_TYPE;
typedef enum tagEM_REMOTE_COMPRESS_STATUS
{
    EM_REMOTE_COMPRESS_STATUS_UNKNOWN = -1,    
    EM_REMOTE_COMPRESS_STATUS_OVERDECODE,      
    EM_REMOTE_COMPRESS_STATUS_OVERCOMPRESS,    
    EM_REMOTE_COMPRESS_STATUS_ABNORMALCHANNEL, 
    EM_REMOTE_COMPRESS_STATUS_OFFLINE,         
    EM_REMOTE_COMPRESS_STATUS_ABNORMALSTREAM,  
    EM_REMOTE_COMPRESS_STATUS_NORMAL,          
    EM_REMOTE_COMPRESS_STATUS_OTHER = 255,     
} EM_REMOTE_COMPRESS_STATUS;
typedef struct tagNET_REMOTE_COMPRESS_STATUS_INFO
{
    UINT nChannel;                                    
    UINT nRemoteChannel;                              
    char szIPAddr[64];                                
    EM_DEV_PROTOCOL_TYPE emProtocolType;              
    UINT nPort;                                       
    EM_REMOTE_COMPRESS_TRADE_TYPE emTradeType;        
    EM_REMOTE_COMPRESS_STATUS emRemoteCompressStatus; 
    CAPTURE_SIZE emOriginResolution;                  
    UINT nOriginBitrate;                              
    UINT nCompressBitrate;                            
    CAPTURE_SIZE emCompressResolution;                
    INT64 nStartStreamTime;                           
    char szOriginCompressionType[32];                 
    char szCompressCompressionType[32];               
    BYTE byReserved[952];                             
} NET_REMOTE_COMPRESS_STATUS_INFO;
typedef struct tagNET_OUT_REMOTE_COMPRESS_STATUS
{
    DWORD dwSize;                                  
    NET_REMOTE_COMPRESS_STATUS_INFO stuInfo[1024]; 
    int nstuInfoNum;                               
} NET_OUT_REMOTE_COMPRESS_STATUS;
typedef struct tagNET_REMOTE_COMPRESS_REMAIN_ENCODE
{
    UINT nWidth;          
    UINT nHeight;         
    UINT nFPS;            
    BYTE byReserved[126]; 
} NET_REMOTE_COMPRESS_REMAIN_ENCODE;
typedef struct tagNET_IN_REMOTE_COMPRESS_REMAIN
{
    DWORD dwSize;                                
    NET_REMOTE_COMPRESS_REMAIN_ENCODE stuEncode; 
} NET_IN_REMOTE_COMPRESS_REMAIN;
typedef struct tagNET_OUT_REMOTE_COMPRESS_REMAIN
{
    DWORD dwSize;     
    UINT nChannelNum; 
} NET_OUT_REMOTE_COMPRESS_REMAIN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVirtualChannelOfTransCode(LLONG lLoginID, const NET_IN_GET_VIRTUALCHANNEL_OF_TRANSCODE* pInParam, NET_OUT_GET_VIRTUALCHANNEL_OF_TRANSCODE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelVirtualChannelOfTransCode(LLONG lLoginID, const NET_IN_DEL_VIRTUALCHANNEL_OF_TRANSCODE* pInParam, NET_OUT_DEL_VIRTUALCHANNEL_OF_TRANSCODE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCapsOfTransCode(LLONG lLoginID, const NET_IN_TRANDCODE_GET_CAPS* pInParam, NET_OUT_TRANSCODE_GET_CAPS* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVirtualChannelStatus(LLONG lLoginID, const NET_IN_ATTACH_VIRTUALCHANNEL_STATUS* pInParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVirtualChannelStatus(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteCompressStatus(LLONG lLoginID, const NET_IN_REMOTE_COMPRESS_STATUS* pInParam, NET_OUT_REMOTE_COMPRESS_STATUS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteCompressRemain(LLONG lLoginID, const NET_IN_REMOTE_COMPRESS_REMAIN* pInParam, NET_OUT_REMOTE_COMPRESS_REMAIN* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTE_COLLECT_DEVINFO_CAPS
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_REMOTE_COLLECT_DEVINFO_CAPS;
typedef struct tagNET_OUT_REMOTE_COLLECT_DEVINFO_CAPS
{
    DWORD dwSize;                      
    BOOL bSupportRemoteCollectSniffer; 
    BOOL bSupportRemoteCollectLog;     
} NET_OUT_REMOTE_COLLECT_DEVINFO_CAPS;
typedef enum tagNET_EM_REMOTE_COLLECT_TYPE
{
    NET_EM_REMOTE_COLLECT_TYPE_UNKNOWN = 0, 
    NET_EM_REMOTE_COLLECT_TYPE_CAPTURE,     
    NET_EM_REMOTE_COLLECT_TYPE_LOG,         
} NET_EM_REMOTE_COLLECT_TYPE;
typedef enum tagNET_EM_REMOTE_COLLECT_STATUS
{
    NET_EM_REMOTE_COLLECT_STATUS_UNKNOWN = 0, 
    NET_EM_REMOTE_COLLECT_STATUS_IDLE,        
    NET_EM_REMOTE_COLLECT_STATUS_COLLECTING,  
} NET_EM_REMOTE_COLLECT_STATUS;
typedef enum tagNET_EM_REMOTE_COLLECT_LOG_LEVEL
{
    NET_EM_REMOTE_COLLECT_LOG_LEVEL_NO_PRINT = 0, 
    NET_EM_REMOTE_COLLECT_LOG_LEVEL_FATAL,        
    NET_EM_REMOTE_COLLECT_LOG_LEVEL_ERROR,        
    NET_EM_REMOTE_COLLECT_LOG_LEVEL_WARN,         
    NET_EM_REMOTE_COLLECT_LOG_LEVEL_INFO,         
    NET_EM_REMOTE_COLLECT_LOG_LEVEL_TRACE,        
    NET_EM_REMOTE_COLLECT_LOG_LEVEL_DEBUG,        
} NET_EM_REMOTE_COLLECT_LOG_LEVEL;
typedef struct tagNET_REMOTE_COLLECT_FILE_INFO
{
    char szFilePath[260]; 
    UINT nFileSize;       
    BYTE byReserved[248]; 
} NET_REMOTE_COLLECT_FILE_INFO;
typedef struct tagNET_REMOTE_COLLECT_DEV_INFO
{
    NET_EM_REMOTE_COLLECT_TYPE emType;              
    NET_EM_REMOTE_COLLECT_STATUS emStatus;          
    NET_REMOTE_COLLECT_FILE_INFO stuFileInfos[128]; 
    int nFileInfoNum;                               
    BYTE byReserved[1020];                          
} NET_REMOTE_COLLECT_DEV_INFO;
typedef struct tagNET_IN_GET_REMOTE_COLLECT_DEV_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GET_REMOTE_COLLECT_DEV_INFO;
typedef struct tagNET_OUT_GET_REMOTE_COLLECT_DEV_INFO
{
    DWORD dwSize;                            
    int nInfoNum;                            
    NET_REMOTE_COLLECT_DEV_INFO stuInfos[8]; 
} NET_OUT_GET_REMOTE_COLLECT_DEV_INFO;
typedef enum tagNET_EM_PROT_FILTER_TYPE
{
    NET_EM_PROT_FILTER_TYPE_NOUSE,   
    NET_EM_PROT_FILTER_TYPE_INCLUDE, 
    NET_EM_PROT_FILTER_TYPE_EXCLUDE, 
} NET_EM_PROT_FILTER_TYPE;
typedef struct tagNET_REMOTE_COLLECT_TO_FILE_RULE
{
    NET_EM_REMOTE_COLLECT_TYPE emType;       
    NET_EM_REMOTE_COLLECT_LOG_LEVEL emLevel; 
    char szNetworkCard[128];                 
    NET_EM_PROT_FILTER_TYPE emSrcPortFilter; 
    int nSrcPortNum;                         
    unsigned short nSrcPorts[16];            
    NET_EM_PROT_FILTER_TYPE emDstPortFilter; 
    int nDstPortNum;                         
    unsigned short nDstPorts[16];            
    BYTE byReserved[1024];                   
} NET_REMOTE_COLLECT_TO_FILE_RULE;
typedef struct tagNET_IN_START_REMOTE_COLLECT_TO_FILE
{
    DWORD dwSize;                                
    UINT nChannel;                               
    NET_REMOTE_COLLECT_TO_FILE_RULE stuRules[8]; 
    int nRuleNum;                                
} NET_IN_START_REMOTE_COLLECT_TO_FILE;
typedef struct tagNET_OUT_START_REMOTE_COLLECT_TO_FILE
{
    DWORD dwSize; 
} NET_OUT_START_REMOTE_COLLECT_TO_FILE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteCollectDevInfo(LLONG lLoginID, NET_IN_GET_REMOTE_COLLECT_DEV_INFO* pstInParam, NET_OUT_GET_REMOTE_COLLECT_DEV_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartRemoteCollectToFile(LLONG lLoginID, const NET_IN_START_REMOTE_COLLECT_TO_FILE* pInParam, NET_OUT_START_REMOTE_COLLECT_TO_FILE* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopRemoteCollectToFile(LLONG lCollectID);
typedef struct tagNET_IN_GET_MOBILE_PUSHER_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_MOBILE_PUSHER_CAPS;
typedef struct tagNET_SUPPORT_CHANNEL_SUBSCRIBE_EVENT
{
    BOOL bIsSupportProfileAlarmTransmit; 
    BOOL bIsSupportCallNoAnswered;       
    BYTE byReserved[56];                 
} NET_SUPPORT_CHANNEL_SUBSCRIBE_EVENT;
typedef struct tagNET_OUT_GET_MOBILE_PUSHER_CAPS
{
    DWORD dwSize;                                                 
    BOOL bEnablePush;                                             
    BOOL bAddNotification;                                        
    BOOL bDelNotification;                                        
    BOOL bSupportPriority;                                        
    BOOL bPushEventSchedule;                                      
    BOOL bVTOPushErrorCode;                                       
    BOOL bSupportGetPushConfig;                                   
    NET_SUPPORT_CHANNEL_SUBSCRIBE_EVENT stuChannelSubscribeEvent; 
} NET_OUT_GET_MOBILE_PUSHER_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMobilePusherCaps(LLONG lLoginID, NET_IN_GET_MOBILE_PUSHER_CAPS* pInParam, NET_OUT_GET_MOBILE_PUSHER_CAPS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_ENABLE_PUSH_MOBILE_PUSHER
{
    DWORD dwSize;     
    BOOL bEnablePush; 
} NET_IN_ENABLE_PUSH_MOBILE_PUSHER;
typedef struct tagNET_OUT_ENABLE_PUSH_MOBILE_PUSHER
{
    DWORD dwSize; 
} NET_OUT_ENABLE_PUSH_MOBILE_PUSHER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_EnablePushMobilePusher(LLONG lLoginID, NET_IN_ENABLE_PUSH_MOBILE_PUSHER* pInParam, NET_OUT_ENABLE_PUSH_MOBILE_PUSHER* pOutParam, int nWaitTime);
typedef struct tagNET_PUSH_SERVER_INFO_EX
{
    char szAddress[MAX_URL_LEN]; 
    int nPort;                   
    BYTE byReserved[512];        
} NET_PUSH_SERVER_INFO_EX;
typedef struct tagNET_REGISTER_GROUP
{
    int nIndex;           
    int nGroupCount;      
    char szGroup[64][64]; 
    BYTE byReserved[128]; 
} NET_REGISTER_GROUP;
typedef struct tagNET_CUSTOM_TILTER_OF_FACE_COMPARISION
{
    int nRegisterGroupCount;                  
    NET_REGISTER_GROUP stuRegisterGroup[256]; 
    BYTE byReserved[1028];                    
} NET_CUSTOM_TILTER_OF_FACE_COMPARISION;
typedef struct tagNET_IN_ADD_MOBILE_PUSHER_NOTIFICATION
{
    DWORD dwSize;                                         
    char szRegisterID[MAX_REGISTER_ID_LEN];               
    char szAppID[MAX_APP_ID_LEN];                         
    EM_MOBILE_SERVER_TYPE emServerType;                   
    EM_PUSH_GATEWAY_TYPE emPushGatewayType;               
    int nPeriodOfValidity;                                
    char szAuthServerAddr[MAX_URL_LEN];                   
    int nAuthServerPort;                                  
    NET_PUSH_SERVER_INFO_EX stuPushServerMain;            
    char szPushServerAddr[MAX_URL_LEN];                   
    int nPushServerPort;                                  
    char szDevName[MAX_COMMON_STRING_64];                 
    char szDevID[MAX_COMMON_STRING_64];                   
    char szUser[MAX_COMMON_STRING_64];                    
    char szCertificate[MAX_IOS_CERTIFICATE_LEN];          
    char szSecretKey[MAX_IOS_SECRET_KEY_LEN];             
    int nSubScribeNum;                                    
    NET_SUBSCRIBE_INFO_EX* pstuSubscribes;                
    DH_TSECT stuAllEventPushTime[DH_N_WEEKS][DH_N_TSECT]; 
    BOOL bIsTimeEnable;                                   
    BOOL bUserEx;                                         
    char szUserEx[256];                                   
    char szBindingUserName[64];                           
} NET_IN_ADD_MOBILE_PUSHER_NOTIFICATION;
typedef struct tagNET_OUT_ADD_MOBILE_PUSHER_NOTIFICATION
{
    DWORD dwSize; 
} NET_OUT_ADD_MOBILE_PUSHER_NOTIFICATION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddMobilePusherNotification(LLONG lLoginID, NET_IN_ADD_MOBILE_PUSHER_NOTIFICATION* pInParam, NET_OUT_ADD_MOBILE_PUSHER_NOTIFICATION* pOutParam, int nWaitTime);
typedef struct tagNET_IN_DEL_MOBILE_PUSHER_NOTIFICATION
{
    DWORD dwSize;                           
    char szRegisterID[MAX_REGISTER_ID_LEN]; 
    char szAppID[MAX_APP_ID_LEN];           
} NET_IN_DEL_MOBILE_PUSHER_NOTIFICATION;
typedef struct tagNET_OUT_DEL_MOBILE_PUSHER_NOTIFICATION
{
    DWORD dwSize; 
} NET_OUT_DEL_MOBILE_PUSHER_NOTIFICATION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelMobilePusherNotification(LLONG lLoginID, NET_IN_DEL_MOBILE_PUSHER_NOTIFICATION* pInParam, NET_OUT_DEL_MOBILE_PUSHER_NOTIFICATION* pOutParam, int nWaitTime);
typedef enum tagEM_MOBILE_PUSHER_NOTIFICATION_TYPE
{
    EM_MOBILE_PUSHER_NOTIFICATION_TYPE_UNKNOWN, 
    EM_MOBILE_PUSHER_NOTIFICATION_TYPE_ALL,     
    EM_MOBILE_PUSHER_NOTIFICATION_TYPE_SINGLE,  
} EM_MOBILE_PUSHER_NOTIFICATION_TYPE;
typedef struct tagNET_IN_GET_MOBILE_PUSHER_NOTIFICATION_INFO
{
    DWORD dwSize;                                  
    EM_MOBILE_PUSHER_NOTIFICATION_TYPE emFindMode; 
    char szRegisterID[256];                        
    char szAppID[256];                             
} NET_IN_GET_MOBILE_PUSHER_NOTIFICATION_INFO;
typedef enum tagEM_MOBILE_PUSHER_NAME_TYPE
{
    EM_MOBILE_PUSHER_NAME_TYPE_UNKNOWN,         
    EM_MOBILE_PUSHER_NAME_TYPE_NOTIFICATION,    
    EM_MOBILE_PUSHER_NAME_TYPE_NOTIFICATIONCFG, 
} EM_MOBILE_PUSHER_NAME_TYPE;
typedef struct tagNET_OUT_GET_MOBILE_PUSHER_NOTIFICATION_INFO
{
    DWORD dwSize;                                                               
    EM_MOBILE_PUSHER_NAME_TYPE emMobilePusherName;                              
    int nMaxNotificationNum;                                                    
    int nRetNotificationNum;                                                    
    NET_MOBILE_PUSH_NOTIFICATION_GENERAL_INFO* pstuMobilePusherNotificationCfg; 
} NET_OUT_GET_MOBILE_PUSHER_NOTIFICATION_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMobilePusherNotificationCfg(LLONG lLoginID, const NET_IN_GET_MOBILE_PUSHER_NOTIFICATION_INFO* pInParam, NET_OUT_GET_MOBILE_PUSHER_NOTIFICATION_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_MOBILE_PUSHER_EVNET_LIST
{
    DWORD dwSize;       
    UINT nChannelNum;   
    int nChannel[1024]; 
} NET_IN_GET_MOBILE_PUSHER_EVNET_LIST;
typedef enum tagEM_PUSH_BY_GROUP_TYPE
{
    EM_PUSH_BY_GROUP_NOT_INVOLVE, 
    EM_PUSH_BY_GROUP_SUPPORT,     
    EM_PUSH_BY_GROUP_NOT_SUPPORT, 
} EM_PUSH_BY_GROUP_TYPE;
typedef struct tagNET_MOBILE_PUSHER_EVNET
{
    char szCode[64];                         
    int nEventType;                          
    EM_PUSH_BY_GROUP_TYPE emPushByGroupType; 
    BYTE byReserved[128];                    
} NET_MOBILE_PUSHER_EVNET;
typedef struct tagNET_MOBILE_PUSHER_EVNET_LIST_INFO
{
    int nCount;                                         
    BYTE byReserved[4];                                 
    NET_MOBILE_PUSHER_EVNET stuMobilePusherEvent[1024]; 
} NET_MOBILE_PUSHER_EVNET_LIST_INFO;
typedef struct tagNET_OUT_GET_MOBILE_PUSHER_EVNET_LIST
{
    DWORD dwSize;                                              
    UINT nMaxEventlistNum;                                     
    UINT nRetEventlistNum;                                     
    NET_MOBILE_PUSHER_EVNET_LIST_INFO* pMobilePusherEventlist; 
} NET_OUT_GET_MOBILE_PUSHER_EVNET_LIST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMobilePusherEventList(LLONG lLoginID,
                                                                const NET_IN_GET_MOBILE_PUSHER_EVNET_LIST* pInParam,
                                                                NET_OUT_GET_MOBILE_PUSHER_EVNET_LIST* pOutParam,
                                                                int nWaitTime);
typedef struct tagNET_CREDENTIAL_INFO
{
    char CredentialHolder[16];          
    NET_TIME stuValidDateStart;         
    NET_TIME stuValidDateEnd;           
    NET_ACCESS_METHOD emType;           
    DWORD nIndex;                       
    char szCardNo[DH_MAX_CARDINFO_LEN]; 
    BYTE byReserved[1024];              
} NET_CREDENTIAL_INFO;
typedef struct tagNET_SMARTLOCK_NOTIFY_OFFLINEAUTH
{
    char szSerialNumber[32];              
    DWORD nACK;                           
    NET_CREDENTIAL_INFO stCredentialInfo; 
    BYTE byReserved[1024];                
} NET_SMARTLOCK_NOTIFY_OFFLINEAUTH;
typedef void(CALLBACK* fSmartLockOfflineAuthCallBack)(LLONG lLoginId, LLONG lAttachHandle, const NET_SMARTLOCK_NOTIFY_OFFLINEAUTH* pBuf, LDWORD dwUser);
typedef struct tagNET_IN_SMARTLOCK_OFFLINEAUTH
{
    DWORD dwSize;                                
    char szUUID[36];                             
    fSmartLockOfflineAuthCallBack cbOfflineAuth; 
    LDWORD dwUser;                               
} NET_IN_SMARTLOCK_OFFLINEAUTH;
typedef struct tagNET_OUT_SMARTLOCK_OFFLINEAUTH
{
    DWORD dwSize; 
} NET_OUT_SMARTLOCK_OFFLINEAUTH;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSmartLockOfflineAuth(LLONG lLoginID, const NET_IN_SMARTLOCK_OFFLINEAUTH* pstInParam, NET_OUT_SMARTLOCK_OFFLINEAUTH* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSmartLockOfflineAuth(LLONG lAttachHandle);
typedef struct tagNET_IN_SMARTLOCK_ACK_OFFLINEAUTH
{
    DWORD dwSize;            
    char szUUID[36];         
    char szSerialNumber[32]; 
    DWORD nACK;              
} NET_IN_SMARTLOCK_ACK_OFFLINEAUTH;
typedef struct tagNET_OUT_SMARTLOCK_ACK_OFFLINEAUTH
{
    DWORD dwSize; 
} NET_OUT_SMARTLOCK_ACK_OFFLINEAUTH;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AckSmartLockOfflineAuth(LLONG lLoginID, NET_IN_SMARTLOCK_ACK_OFFLINEAUTH* pstInParam, NET_OUT_SMARTLOCK_ACK_OFFLINEAUTH* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_ENCRYPT_STRING
{
    DWORD dwSize;        
    char szCard[33];     
    BYTE byReserved1[3]; 
    char szKey[33];      
    BYTE byReserved2[3]; 
} NET_IN_ENCRYPT_STRING;
typedef struct tagNET_OUT_ENCRYPT_STRING
{
    DWORD dwSize;               
    char szEncryptString[1024]; 
} NET_OUT_ENCRYPT_STRING;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_EncryptString(const NET_IN_ENCRYPT_STRING* pInParam, NET_OUT_ENCRYPT_STRING* pOutParam, int nWaitTime);
typedef struct tagNET_IN_PRE_UPLOAD_REMOTE_FILE
{
    DWORD dwSize;     
    char* pszFileSrc; 
    char* pszFileDst; 
} NET_IN_PRE_UPLOAD_REMOTE_FILE;
typedef enum tagEM_REASON_TYPE
{
    EM_REASON_TYPE_UNKNOWN,          
    EM_REASON_TYPE_OVERNUMBER,       
    EM_REASON_TYPE_FULLSTORAGE,      
    EM_REASON_TYPE_TOOLARGE_FILE,    
    EM_REASON_TYPE_INVALID_FILETYPE, 
    EM_REASON_TYPE_UNAUTH_UPLOAD,    
    EM_REASON_TYPE_EXCEPTION_NAME,   
    EM_REASON_TYPE_TOOLONG_NAME,     
    EM_REASON_TYPE_EXIST_NAME,       
} EM_REASON_TYPE;
typedef struct tagNET_OUT_PRE_UPLOAD_REMOTE_FILE
{
    DWORD dwSize;          
    BOOL bContinue2Upload; 
    EM_REASON_TYPE emType; 
} NET_OUT_PRE_UPLOAD_REMOTE_FILE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PreUploadRemoteFile(LLONG lLoginID, const NET_IN_PRE_UPLOAD_REMOTE_FILE* pInParam, NET_OUT_PRE_UPLOAD_REMOTE_FILE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CAPS_INSTALL_DIAGNOSTIC_STAT
{
    DWORD dwSize;
} NET_IN_GET_CAPS_INSTALL_DIAGNOSTIC_STAT;
typedef struct tagNET_INSTALL_DIAGNOSTIC_STAT_CAPS_INFO
{
    int nChannel;        
    int nEventNum;       
    int nEventsCode[32]; 
    BYTE bReserved[256]; 
} NET_INSTALL_DIAGNOSTIC_STAT_CAPS_INFO;
typedef struct tagNET_OUT_GET_CAPS_INSTALL_DIAGNOSTIC_STAT
{
    DWORD dwSize;                                      
    int nCapsNum;                                      
    NET_INSTALL_DIAGNOSTIC_STAT_CAPS_INFO stuCaps[16]; 
} NET_OUT_GET_CAPS_INSTALL_DIAGNOSTIC_STAT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetInstallDiagnosticStatCaps(LLONG lLoginID, const NET_IN_GET_CAPS_INSTALL_DIAGNOSTIC_STAT* pInParam, NET_OUT_GET_CAPS_INSTALL_DIAGNOSTIC_STAT* pOutParam, int nWaitTime);
typedef struct tagNET_INSTALL_DIAGNOSTIC_STAT_DATALIST
{
    int nPitchAngle;     
    int nYawAngle;       
    int nRollAngle;      
    int nQuality;        
    int nWidth;          
    int nHeight;         
    BYTE byReserved[64]; 
} NET_INSTALL_DIAGNOSTIC_STAT_DATALIST;
typedef struct tagNET_INSTALL_DIAGNOSTIC_STAT_RESULT
{
    int nEventCode;                                        
    int nDatalistLen;                                      
    NET_INSTALL_DIAGNOSTIC_STAT_DATALIST stuDataList[128]; 
    BYTE byReserved[256];                                  
} NET_INSTALL_DIAGNOSTIC_STAT_RESULT;
typedef struct tagNET_INSTALL_DIAGNOSTIC_STAT
{
    int nChannel;                                     
    int nResultNum;                                   
    NET_INSTALL_DIAGNOSTIC_STAT_RESULT stuResult[32]; 
    BYTE byReserved[512];                             
} NET_INSTALL_DIAGNOSTIC_STAT;
typedef void(CALLBACK* fInstallDiagnosticStatCallBack)(LLONG lAttachHandle, NET_INSTALL_DIAGNOSTIC_STAT* pBuf, DWORD dwBufLen, LDWORD dwUser);
typedef struct tagNET_ATTACH_DIAGNOSTIC_FILTER
{
    int nChannelNum;      
    int nChannels[16];    
    int nEventNum;        
    int nEventsCode[32];  
    BYTE byReserved[128]; 
} NET_ATTACH_DIAGNOSTIC_FILTER;
typedef struct tagNET_IN_ATTACH_INSTALL_DIAGNOSTIC_STAT
{
    DWORD dwSize;                                    
    NET_ATTACH_DIAGNOSTIC_FILTER stuFilter;          
    fInstallDiagnosticStatCallBack cbDiagnosticStat; 
    LDWORD dwUser;                                   
} NET_IN_ATTACH_INSTALL_DIAGNOSTIC_STAT;
typedef struct tagNET_OUT_ATTACH_INSTALL_DIAGNOSTIC_STAT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_INSTALL_DIAGNOSTIC_STAT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachInstallDiagnosticStat(LLONG lLoginID, const NET_IN_ATTACH_INSTALL_DIAGNOSTIC_STAT* pInParam, NET_OUT_ATTACH_INSTALL_DIAGNOSTIC_STAT* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachInstallDiagnosticStat(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_SCADA_STATUS
{
    DWORD dwSize; 
} NET_IN_GET_SCADA_STATUS;
typedef struct tagNET_SCADA_DEV_INFO
{
    char szDeviceID[32];                
    char szDeviceName[32];              
    EM_SCADA_DEVICE_STATUS emDevStatus; 
} NET_SCADA_DEV_INFO;
typedef struct tagNET_SCADA_STATUS_INFO
{
    EM_ALARM_SCADA_DEV_TYPE emDevType;  
    int nDevInfoNum;                    
    NET_SCADA_DEV_INFO stuDevInfo[128]; 
} NET_SCADA_STATUS_INFO;
typedef struct tagNET_OUT_GET_SCADA_STATUS
{
    DWORD dwSize;                            
    int nDevStatusNum;                       
    NET_SCADA_STATUS_INFO stuStatusInfo[64]; 
} NET_OUT_GET_SCADA_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSCADADeviceStatus(LLONG lLoginID, const NET_IN_GET_SCADA_STATUS* pInParam, NET_OUT_GET_SCADA_STATUS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CALIBRATEINFO_INFO
{
    DWORD dwSize;  
    UINT nID;      
    UINT nChannel; 
} NET_IN_GET_CALIBRATEINFO_INFO;
typedef struct tagNET_GET_CALIBRATEINFO_CALCINFO_INFO
{
    float fPosition[3]; 
    UINT nLocation[2];  
} NET_GET_CALIBRATEINFO_CALCINFO_INFO;
typedef struct tagNET_GET_CALIBRATEINFO_POINT_INFO
{
    UINT nID;                                              
    char szName[DH_COMMON_STRING_128];                     
    BOOL bEnable;                                          
    UINT nLongitude;                                       
    UINT nLatitude;                                        
    double fAltitude;                                      
    NET_GET_CALIBRATEINFO_CALCINFO_INFO stuCalcInfo[5][2]; 
    int nPointNum;                                         
    BYTE byReserved[4];                                    
} NET_GET_CALIBRATEINFO_POINT_INFO;
typedef struct tagNET_OUT_GET_CALIBRATEINFO_INFO
{
    DWORD dwSize;                                  
    NET_GET_CALIBRATEINFO_POINT_INFO stuPointInfo; 
} NET_OUT_GET_CALIBRATEINFO_INFO;
typedef struct tagNET_IN_SET_CALIBRATEINFO_INFO
{
    DWORD dwSize;                                  
    NET_GET_CALIBRATEINFO_POINT_INFO stuPointInfo; 
} NET_IN_SET_CALIBRATEINFO_INFO;
typedef struct tagNET_OUT_SET_CALIBRATEINFO_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_CALIBRATEINFO_INFO;
typedef struct tagNET_IN_DELETE_CALIBRATEINFO_INFO
{
    DWORD dwSize; 
    UINT nID;     
} NET_IN_DELETE_CALIBRATEINFO_INFO;
typedef struct tagNET_OUT_DELETE_CALIBRATEINFO_INFO
{
    DWORD dwSize; 
} NET_OUT_DELETE_CALIBRATEINFO_INFO;
typedef struct tagNET_IN_GETALL_CALIBRATEINFO_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GETALL_CALIBRATEINFO_INFO;
typedef struct tagNET_DEVLOCATION_INFO
{
    UINT unLongitude;   
    UINT unLatitude;    
    double dbAltitude;  
    BOOL bConfigEnable; 
    float fHeight;      
} NET_DEVLOCATION_INFO;
typedef struct tagNET_CALIBRATE_UNIT_INFO
{
    UINT nHeight;       
    UINT nWidth;        
    float nPosition[3]; 
    UINT nLocation[2];  
    UINT nHFOV;         
    UINT nVFOV;         
} NET_CALIBRATE_UNIT_INFO;
typedef struct tagNET_CALIBRATE_INFO
{
    NET_CALIBRATE_UNIT_INFO stuCalibrateUnitInfo[5][2]; 
    int nInfoNum;                                       
} NET_CALIBRATE_INFO;
typedef struct tagNET_LOCATION_CALIBRATE_POINT_INFO
{
    UINT nID;                            
    char szName[DH_COMMON_STRING_128];   
    BOOL bEnable;                        
    UINT nLongitude;                     
    UINT nLatitude;                      
    double fAltitude;                    
    NET_CALIBRATE_INFO stuCalibrateInfo; 
    BYTE byReserved1[4];                 
} NET_LOCATION_CALIBRATE_POINT_INFO;
#define MAX_CALIBRATE_POINT_NUM 64 
typedef struct tagNET_LOCATION_CALIBRATE_INFO
{
    UINT nVisualMaxHFOV;                                                     
    UINT nVisualMaxVFOV;                                                     
    UINT nThermoMaxHFOV;                                                     
    UINT nThermoMaxVFOV;                                                     
    NET_LOCATION_CALIBRATE_POINT_INFO stuPointInfo[MAX_CALIBRATE_POINT_NUM]; 
    int nPointNum;                                                           
    BYTE byReserved1[4];                                                     
} NET_LOCATION_CALIBRATE_INFO;
typedef struct tagNET_OUT_GETALL_CALIBRATEINFO_INFO
{
    DWORD dwSize;                                         
    NET_DEVLOCATION_INFO stuGPSInfo;                      
    NET_LOCATION_CALIBRATE_INFO stuLocationCalibrateInfo; 
} NET_OUT_GETALL_CALIBRATEINFO_INFO;
typedef enum tagEM_CALIBRATEINFO_OPERATE_TYPE
{
    EM_CALIBRATEINFO_OPERATE_GET,    
    EM_CALIBRATEINFO_OPERATE_SET,    
    EM_CALIBRATEINFO_OPERATE_DELETE, 
    EM_CALIBRATEINFO_OPERATE_GETALL, 
} EM_CALIBRATEINFO_OPERATE_TYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_OperateCalibrateInfo(LLONG lLoginID, EM_CALIBRATEINFO_OPERATE_TYPE emType, const void* pStuInParam, void* pStuOutParam, int nWaitTime);
typedef struct tagNET_PAN_GROUP_INFO
{
    char szName[32];        
    unsigned int nSpeed;    
    BOOL bEnable;           
    unsigned int nInterval; 
    BYTE byReserved[64];    
} NET_PAN_GROUP_INFO;
typedef struct tagNET_IN_SET_PAN_GROUP_PARAM
{
    DWORD dwSize;                       
    int nChannel;                       
    unsigned int nIndex;                
    NET_PAN_GROUP_INFO stuPanGroupInfo; 
} NET_IN_SET_PAN_GROUP_PARAM;
typedef struct tagNET_OUT_SET_PAN_GROUP_PARAM
{
    DWORD dwSize; 
} NET_OUT_SET_PAN_GROUP_PARAM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZSetPanGroup(LLONG lLoginID, const NET_IN_SET_PAN_GROUP_PARAM* pInParam, NET_OUT_SET_PAN_GROUP_PARAM* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_PAN_GROUP_PARAM
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_PAN_GROUP_PARAM;
typedef struct tagNET_OUT_GET_PAN_GROUP_PARAM
{
    DWORD dwSize;                          
    int nRetNum;                           
    NET_PAN_GROUP_INFO stuPanGroupInfo[8]; 
} NET_OUT_GET_PAN_GROUP_PARAM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZGetPanGroup(LLONG lLoginID, const NET_IN_GET_PAN_GROUP_PARAM* pInParam, NET_OUT_GET_PAN_GROUP_PARAM* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GOTO_PAN_POSITION
{
    DWORD dwSize;        
    int nChannel;        
    unsigned int nIndex; 
} NET_IN_GOTO_PAN_POSITION;
typedef struct tagNET_OUT_GOTO_PAN_POSITION
{
    DWORD dwSize; 
} NET_OUT_GOTO_PAN_POSITION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZGotoPanPosition(LLONG lLogindID, const NET_IN_GOTO_PAN_POSITION* pInParam, NET_OUT_GOTO_PAN_POSITION* pOutParam, int nWaitTime);
typedef enum tagNET_EM_PAN_GROUP_LIMIT_MODE
{
    NET_EM_PAN_GROUP_LIMIT_MODE_LEFT = 1, 
    NET_EM_PAN_GROUP_LIMIT_MODE_RIGHT,    
    NET_EM_PAN_GROUP_LIMIT_MODE_UP,       
    NET_EM_PAN_GROUP_LIMIT_MODE_DOWN,     
} NET_EM_PAN_GROUP_LIMIT_MODE;
typedef struct tagNET_IN_PAN_GROUP_LIMIT_INFO
{
    DWORD dwSize;                                    
    int nChannelID;                                  
    unsigned int nIndex;                             
    NET_EM_PAN_GROUP_LIMIT_MODE emPanGroupLimitMode; 
} NET_IN_PAN_GROUP_LIMIT_INFO;
typedef struct tagNET_OUT_PAN_GROUP_LIMIT_INFO
{
    DWORD dwSize;
} NET_OUT_PAN_GROUP_LIMIT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZSetPanGroupLimit(LLONG lLoginID, const NET_IN_PAN_GROUP_LIMIT_INFO* pstInParam, NET_OUT_PAN_GROUP_LIMIT_INFO* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_PTZ_POSITION
{
    double dbPositionX; 
    double dbPositionY; 
    double dbZoom;      
} NET_PTZ_POSITION;
typedef struct tagNET_PTZ_PRESET_LIST_INFO
{
    BOOL bEnable;                 
    char szName[256];             
    NET_PTZ_POSITION stuPosition; 
    int nTiltBoundary;            
    char szReserve[32];           
} NET_PTZ_PRESET_LIST_INFO;
typedef struct tagNET_IN_SET_PRESET_INFO
{
    DWORD dwSize;                             
    int nChannelID;                           
    int nIndex;                               
    int nPresetInfoNum;                       
    NET_PTZ_PRESET_LIST_INFO* pstuPresetInfo; 
} NET_IN_SET_PRESET_INFO;
typedef struct tagNET_OUT_SET_PRESET_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_PRESET_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZSetPreset(LLONG lLoginID, const NET_IN_SET_PRESET_INFO* pstInParam, NET_OUT_SET_PRESET_INFO* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_GET_PRESET_INFO
{
    DWORD dwSize;   
    int nChannelID; 
    int nIndex;     
} NET_IN_GET_PRESET_INFO;
typedef struct tagNET_OUT_GET_PRESET_INFO
{
    DWORD dwSize;                             
    int nChannelID;                           
    int nIndex;                               
    int nPresetInfoNum;                       
    NET_PTZ_PRESET_LIST_INFO* pstuPresetInfo; 
    int nRetPresetInfoNum;                    
} NET_OUT_GET_PRESET_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZGetPreset(LLONG lLoginID, const NET_IN_GET_PRESET_INFO* pstInParam, NET_OUT_GET_PRESET_INFO* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_PTZ_START_TOUR
{
    DWORD dwSize; 
    int nChannel; 
    int nIndex;   
} NET_IN_PTZ_START_TOUR;
typedef struct tagNET_OUT_PTZ_START_TOUR
{
    DWORD dwSize; 
} NET_OUT_PTZ_START_TOUR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZStartTour(LLONG lLoginID, const NET_IN_PTZ_START_TOUR* pstuInParam, NET_OUT_PTZ_START_TOUR* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_PTZ_STOP_TOUR
{
    DWORD dwSize; 
    int nChannel; 
    int nIndex;   
} NET_IN_PTZ_STOP_TOUR;
typedef struct tagNET_OUT_PTZ_STOP_TOUR
{
    DWORD dwSize; 
} NET_OUT_PTZ_STOP_TOUR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZStopTour(LLONG lLoginID, const NET_IN_PTZ_STOP_TOUR* pstuInParam, NET_OUT_PTZ_STOP_TOUR* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_TOUR_POINTS
{
    DWORD dwSize; 
    int nChannel; 
    int nIndex;   
    int reserved; 
} NET_IN_GET_TOUR_POINTS;
typedef struct tagPresetPointParams
{
    int nIndex;        
    int nStayTime;     
    int nSpeed;        
    char reserved[68]; 
} PresetPointParams;
typedef struct tagNET_OUT_GET_TOUR_POINTS
{
    DWORD dwSize;                     
    int nPointNum;                    
    PresetPointParams stuPoints[128]; 
} NET_OUT_GET_TOUR_POINTS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZGetToursPoints(LLONG lLoginID, const NET_IN_GET_TOUR_POINTS* pstInParam, NET_OUT_GET_TOUR_POINTS* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_RESUME_PTZ_LASTTASK_INFO
{
    DWORD dwSize;   
    int nChannelID; 
} NET_IN_RESUME_PTZ_LASTTASK_INFO;
typedef struct tagNET_OUT_RESUME_PTZ_LASTTASK_INFO
{
    DWORD dwSize; 
} NET_OUT_RESUME_PTZ_LASTTASK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResumePtzLastTask(LLONG lLoginID, const NET_IN_RESUME_PTZ_LASTTASK_INFO* pstInParam, NET_OUT_RESUME_PTZ_LASTTASK_INFO* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_PAUSE_PTZ_ACTION_INFO
{
    DWORD dwSize;   
    int nChannelID; 
} NET_IN_PAUSE_PTZ_ACTION_INFO;
typedef struct tagNET_OUT_PAUSE_PTZ_ACTION_INFO
{
    DWORD dwSize; 
} NET_OUT_PAUSE_PTZ_ACTION_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PausePtzAction(LLONG lLoginID, const NET_IN_PAUSE_PTZ_ACTION_INFO* pstInParam, NET_OUT_PAUSE_PTZ_ACTION_INFO* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_SET_PTZ_WASH_POSISTION_INFO
{
    DWORD dwSize;    
    UINT nIndex;     
    float fHeight;   
    UINT nChannelID; 
} NET_IN_SET_PTZ_WASH_POSISTION_INFO;
typedef struct tagNET_OUT_SET_PTZ_WASH_POSISTION_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_PTZ_WASH_POSISTION_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PtzSetWashPosistion(LLONG lLoginID, const NET_IN_SET_PTZ_WASH_POSISTION_INFO* pstInParam, NET_OUT_SET_PTZ_WASH_POSISTION_INFO* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_GET_PTZ_WASH_INFO
{
    DWORD dwSize;    
    UINT nChannelID; 
} NET_IN_GET_PTZ_WASH_INFO;
typedef struct tagNET_PTZ_WASH_INFO
{
    float fAnagle;        
    float fDistance;      
    char szReserved[256]; 
} NET_PTZ_WASH_INFO;
typedef struct tagNET_OUT_GET_PTZ_WASH_INFO
{
    DWORD dwSize;                  
    NET_PTZ_WASH_INFO stuWashInfo; 
} NET_OUT_GET_PTZ_WASH_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PtzGetWashInfo(LLONG lLoginID, const NET_IN_GET_PTZ_WASH_INFO* pstInParam, NET_OUT_GET_PTZ_WASH_INFO* pstOutParam, DWORD dwWaitTime);
typedef struct tagNET_IN_PTZ_SET_ZOOM_VALUE
{
    DWORD dwSize; 
    int nChannel; 
    int nValue;   
} NET_IN_PTZ_SET_ZOOM_VALUE;
typedef struct tagNET_OUT_PTZ_SET_ZOOM_VALUE
{
    DWORD dwSize; 
} NET_OUT_PTZ_SET_ZOOM_VALUE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZSetZoomValue(LLONG lLoginID, const NET_IN_PTZ_SET_ZOOM_VALUE* pstuInParam, NET_OUT_PTZ_SET_ZOOM_VALUE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_PTZ_SET_FOCUS_VALUE
{
    DWORD dwSize; 
    int nChannel; 
    int nValue;   
} NET_IN_PTZ_SET_FOCUS_VALUE;
typedef struct tagNET_OUT_PTZ_SET_FOCUS_VALUE
{
    DWORD dwSize; 
} NET_OUT_PTZ_SET_FOCUS_VALUE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZSetFocusValue(LLONG lLoginID, const NET_IN_PTZ_SET_FOCUS_VALUE* pstuInParam, NET_OUT_PTZ_SET_FOCUS_VALUE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_PTZ_SET_TOUR
{
    DWORD dwSize;    
    UINT nindex;     
    char szname[64]; 
    int nChannel;    
} NET_IN_PTZ_SET_TOUR;
typedef struct tagNET_OUT_PTZ_SET_TOUR
{
    DWORD dwSize; 
} NET_OUT_PTZ_SET_TOUR;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZSetTour(LLONG lLoginID, const NET_IN_PTZ_SET_TOUR* pstuInParam, NET_OUT_PTZ_SET_TOUR* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_PTZ_INTELLI_SET_TRACK_OBJECT_INFO
{
    DWORD dwSize;    
    BOOL bSpeed;     
    int nSpeed;      
    BOOL bAzimuth;   
    int nAzimuth;    
    BOOL bAction;    
    int nAction;     
    BOOL bLongitude; 
    UINT nLongitude; 
    BOOL bLatitude;  
    UINT nLatitude;  
    BOOL bDistance;  
    int nDistance;   
    BOOL bChannel;   
    int nChannel;    
    BOOL bTime;      
    UINT nTime;      
} NET_IN_PTZ_INTELLI_SET_TRACK_OBJECT_INFO;
typedef struct tagNET_OUT_PTZ_INTELLI_SET_TRACK_OBJECT_INFO
{
    DWORD dwSize; 
} NET_OUT_PTZ_INTELLI_SET_TRACK_OBJECT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZIntelliSetTrackObjectInfo(LLONG lLoginID, const NET_IN_PTZ_INTELLI_SET_TRACK_OBJECT_INFO* pstuInParam, NET_OUT_PTZ_INTELLI_SET_TRACK_OBJECT_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_PTZ_ADJUST_IRIS
{
    DWORD dwSize;  
    int nChannel;  
    float fChange; 
} NET_IN_PTZ_ADJUST_IRIS;
typedef struct tagNET_OUT_PTZ_ADJUST_IRIS
{
    DWORD dwSize; 
} NET_OUT_PTZ_ADJUST_IRIS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZAdjustIris(LLONG lLoginID, const NET_IN_PTZ_ADJUST_IRIS* pstuInParam, NET_OUT_PTZ_ADJUST_IRIS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_PTZ_LENS_INIT
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_PTZ_LENS_INIT;
typedef struct tagNET_OUT_PTZ_LENS_INIT
{
    DWORD dwSize; 
} NET_OUT_PTZ_LENS_INIT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PTZLensInit(LLONG lLoginID, const NET_IN_PTZ_LENS_INIT* pstuInParam, NET_OUT_PTZ_LENS_INIT* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_TRANSMIT_CMD
{
    DWORD dwSize;      
    int nChannel;      
    int nHannel;       
    BOOL bReply;       
    int nMessageCount; 
    int* pMessage;     
} NET_IN_TRANSMIT_CMD;
typedef struct tagNET_OUT_TRANSMIT_CMD
{
    DWORD dwSize;         
    int nChannel;         
    int nHannel;          
    int nRetMessageCount; 
    int nMaxMessageCount; 
    int* pMessage;        
} NET_OUT_TRANSMIT_CMD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TransmitCmd(LLONG lLoginID, const NET_IN_TRANSMIT_CMD* pstuInParam, NET_OUT_TRANSMIT_CMD* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_MANUAL_TEST
{
    DWORD dwSize;   
    DWORD dwTestID; 
    UINT nChannel;  
} NET_IN_MANUAL_TEST;
typedef struct tagNET_OUT_MANUAL_TEST
{
    DWORD dwSize;    
    int nTestResult; 
} NET_OUT_MANUAL_TEST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ManualTest(LLONG lLoginID, const NET_IN_MANUAL_TEST* pstuInParam, NET_OUT_MANUAL_TEST* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_ADD_ALARM_USER
{
    DWORD dwSize;                
    NET_ALARM_USER stuAlarmUser; 
} NET_IN_ADD_ALARM_USER;
typedef struct tagNET_OUT_ADD_ALARM_USER
{
    DWORD dwSize; 
} NET_OUT_ADD_ALARM_USER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddAlarmUser(LLONG lLoginID, const NET_IN_ADD_ALARM_USER* pstuInParam, NET_OUT_ADD_ALARM_USER* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_MODIFY_ALARM_USER
{
    DWORD dwSize;                
    char szUserID[64];           
    NET_ALARM_USER stuAlarmUser; 
} NET_IN_MODIFY_ALARM_USER;
typedef struct tagNET_OUT_MODIFY_ALARM_USER
{
    DWORD dwSize; 
} NET_OUT_MODIFY_ALARM_USER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyAlarmUser(LLONG lLoginID, const NET_IN_MODIFY_ALARM_USER* pstuInParam, NET_OUT_MODIFY_ALARM_USER* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_MODIFY_ALARM_USER_PASSWORD
{
    DWORD dwSize;           
    char szUserID[64];      
    char szOldPassword[64]; 
    char szNewPassword[64]; 
} NET_IN_MODIFY_ALARM_USER_PASSWORD;
typedef struct tagNET_OUT_MODIFY_ALARM_USER_PASSWORD
{
    DWORD dwSize; 
} NET_OUT_MODIFY_ALARM_USER_PASSWORD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyAlarmUserPassword(LLONG lLoginID, const NET_IN_MODIFY_ALARM_USER_PASSWORD* pstuInParam, NET_OUT_MODIFY_ALARM_USER_PASSWORD* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_DELETE_ALARM_USER
{
    DWORD dwSize;      
    char szUserID[64]; 
} NET_IN_DELETE_ALARM_USER;
typedef struct tagNET_OUT_DELETE_ALARM_USER
{
    DWORD dwSize; 
} NET_OUT_DELETE_ALARM_USER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteAlarmUser(LLONG lLoginID, const NET_IN_DELETE_ALARM_USER* pstuInParam, NET_OUT_DELETE_ALARM_USER* pstuOutParam, int nWaitTime);
#define MAX_ANALYSE_REMAIN_CAPACITY_NUM 32 
#define MAX_ANALYSE_RULE_COUNT 32          
#define MAX_ANALYSE_PICTURE_FILE_NUM 32    
#define MAX_ANALYSE_TASK_NUM 64            
#define MAX_ANALYSE_FILTER_EVENT_NUM 64    
#define MAX_ANALYSE_ALGORITHM_NUM 16       
#define MAX_ANALYSE_TOTALCAPS_NUM 32       
typedef struct tagNET_REMAIN_ANALYSE_CAPACITY
{
    UINT nMaxStreamNum;              
    EM_SCENE_CLASS_TYPE emClassType; 
    BYTE byReserved[1024];           
} NET_REMAIN_ANALYSE_CAPACITY;
typedef struct tagNET_REMAIN_ANALYSE_TOTAL_CAPACITY
{
    EM_SCENE_CLASS_TYPE emClassType; 
    UINT nNumber;                    
    BYTE byReserved[256];            
} NET_REMAIN_ANALYSE_TOTAL_CAPACITY;
typedef struct tagNET_REMAIN_PICTURE_ANALYSE_CAPACITY
{
    UINT nMaxStreamNum;              
    EM_SCENE_CLASS_TYPE emClassType; 
    BYTE byReserved[1024];           
} NET_REMAIN_PICTURE_ANALYSE_CAPACITY;
typedef struct tagNET_REMAIN_PICTURE_ANALYSE_TOTAL_CAPACITY
{
    EM_SCENE_CLASS_TYPE emClassType; 
    UINT nNumber;                    
    BYTE byReserved[256];            
} NET_REMAIN_PICTURE_ANALYSE_TOTAL_CAPACITY;
typedef enum tagEM_REPOSITORY_TYPE
{
    EM_REPOSITORY_TYPE_UNKNOWN = -1, 
    EM_REPOSITORY_TYPE_BLOCKLIST,    
    EM_REPOSITORY_TYPE_ALLOWLIST,    
    EM_REPOSITORY_TYPE_STATIC,       
    EM_REPOSITORY_TYPE_SNAPSHOT,     
} EM_REPOSITORY_TYPE;
typedef struct tagNET_FEATURE_MATCH
{
    EM_SCENE_CLASS_TYPE emClassType;         
    BYTE byReserved1[4];                     
    EM_REPOSITORY_TYPE emRepositoryType[16]; 
    int nRepositoryTypeNum;                  
    UINT nComparePerSecond;                  
    UINT nFeatureCapacity;                   
    UINT nFreeFeatureCapacity;               
    BYTE byReserved[512];                    
} NET_FEATURE_MATCH;
typedef struct tagNET_CB_REMAIN_CAPACITY
{
    UINT nRemainCapacityNum;                                                          
    NET_REMAIN_ANALYSE_CAPACITY stuRemainCapacities[MAX_ANALYSE_REMAIN_CAPACITY_NUM]; 
    NET_REMAIN_ANALYSE_TOTAL_CAPACITY stuTotalCapacity[32];                           
    UINT nTotalCapacityNum;                                                           
    UINT nRemainDecodeCaps;                                                           
    UINT nRemainComputingCaps;                                                        
    NET_REMAIN_PICTURE_ANALYSE_CAPACITY stuRemainPictureCapacities[32];               
    UINT nRemainPictureCapacityNum;                                                   
    UINT nTotalPictureCapacityNum;                                                    
    NET_REMAIN_PICTURE_ANALYSE_TOTAL_CAPACITY stuTotalPictureCapacity[32];            
    NET_FEATURE_MATCH stuFeatureMatch[32];                                            
    UINT nFeatureMatchNum;                                                            
    BYTE byReserved[1016];                                                            
} NET_CB_REMAIN_CAPACITY;
typedef void(CALLBACK* fAttachRemainAnalyseResourceCB)(LLONG lAttachHandle, NET_CB_REMAIN_CAPACITY* pstRemainCapacity, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_REMAIN_ANALYSE_RESOURCE
{
    DWORD dwSize;                                    
    BYTE byReserved[4];                              
    fAttachRemainAnalyseResourceCB cbAttachResource; 
    LDWORD dwUser;                                   
} NET_IN_ATTACH_REMAIN_ANALYSE_RESOURCE;
typedef enum tagEM_DATA_SOURCE_TYPE
{
    EM_DATA_SOURCE_REMOTE_UNKNOWN = 0,         
    EM_DATA_SOURCE_REMOTE_REALTIME_STREAM = 1, 
    EM_DATA_SOURCE_PUSH_PICFILE,               
    EM_DATA_SOURCE_REMOTE_VIDEO_FILE,          
    EM_DATA_SOURCE_REMOTE_PICTURE_FILE,        
    EM_DATA_SOURCE_OFFLINE_VIDEO_FILE,         
    EM_DATA_SOURCE_PUSH_PICFILE_BYRULE,        
    EM_DATA_SOURCE_LOCAL_STREAM,               
    EM_DATA_SOURCE_ALL_SOURCE_TYPE,            
} EM_DATA_SOURCE_TYPE;
typedef enum tagNET_EM_FACEFEATURE_TYPE
{
    NET_EM_FACEFEATURE_UNKNOWN,    
    NET_EM_FACEFEATURE_SEX,        
    NET_EM_FACEFEATURE_AGE,        
    NET_EM_FACEFEATURE_EMOTION,    
    NET_EM_FACEFEATURE_GLASSES,    
    NET_EM_FACEFEATURE_EYE,        
    NET_EM_FACEFEATURE_MOUTH,      
    NET_EM_FACEFEATURE_MASK,       
    NET_EM_FACEFEATURE_BEARD,      
    NET_EM_FACEFEATURE_ATTRACTIVE, 
} NET_EM_FACEFEATURE_TYPE;
typedef struct tagNET_FACEANALYSIS_RULE_INFO
{
    DWORD dwSize;                                  
    int nDetectRegionPoint;                        
    POINTCOORDINATE stuDetectRegion[20];           
    int nSensitivity;                              
    int nLinkGroupNum;                             
    NET_CFG_LINKGROUP_INFO stuLinkGroup[20];       
    NET_CFG_STRANGERMODE_INFO stuStrangerMode;     
    BOOL bSizeFileter;                             
    NET_CFG_SIZEFILTER_INFO stuSizeFileter;        
    BOOL bFeatureEnable;                           
    int nFaceFeatureNum;                           
    NET_EM_FACEFEATURE_TYPE emFaceFeatureType[32]; 
    BOOL bFeatureFilter;                           
    int nMinQuality;                               
} NET_FACEANALYSIS_RULE_INFO;
typedef struct tagNET_TRAFFIC_ROAD_BLOCK_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20]; 
    int nDetectRegionPoint;              
    UINT nMinDuration;                   
    UINT nSensitivity;                   
    int nLaneNumber;                     
    BOOL bZoomEnable;                    
    UINT nRepeatAlarmTime;               
    BYTE byReserved[4096];               
} NET_TRAFFIC_ROAD_BLOCK_RULE_INFO;
typedef struct tagNET_TRAFFIC_ROAD_CONSTRUCTION_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20]; 
    int nDetectRegionPoint;              
    UINT nMinDuration;                   
    UINT nSensitivity;                   
    int nLaneNumber;                     
    BOOL bZoomEnable;                    
    UINT nRepeatAlarmTime;               
    BYTE byReserved[4096];               
} NET_TRAFFIC_ROAD_CONSTRUCTION_RULE_INFO;
typedef struct tagNET_TRAFFIC_FLOWSTAT_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];         
    int nDetectRegionPoint;                      
    int nDetectLineNum;                          
    DH_POINT DetectLine[DH_MAX_DETECT_LINE_NUM]; 
    int nLaneNumber;                             
    UINT nPeriod;                                
    BYTE byReserved[4096];                       
} NET_TRAFFIC_FLOWSTAT_RULE_INFO;
typedef struct tagNET_SPEED_LIMIT
{
    int nSpeedUpperLimit; 
    int nSpeedLowerLimit; 
} NET_SPEED_LIMIT;
typedef struct tagNET_TRAFFIC_OVERSPEED_RULE_INFO
{
    NET_SPEED_LIMIT stuSpeedLimit;             
    int nMinDuration;                          
    BOOL bSnapMotorcycle;                      
    NET_SPEED_LIMIT stuYellowSpeedLimit;       
    int nLaneNumber;                           
    BOOL bSpeedLimitForSize;                   
    NET_SPEED_LIMIT stuSmallCarSpeedLimit;     
    NET_SPEED_LIMIT stuBigCarSpeedLimit;       
    NET_SPEED_LIMIT stuOverSpeedMargin;        
    NET_SPEED_LIMIT stuBigCarOverSpeedMargin;  
    NET_SPEED_LIMIT stuUnderSpeedMargin;       
    NET_SPEED_LIMIT stuBigCarUnderSpeedMargin; 
    BOOL bVoiceBroadcastEnable;                
    BYTE byReserved[4092];                     
} NET_TRAFFIC_OVERSPEED_RULE_INFO;
typedef struct tagNET_TRAFFIC_UNDERSPEED_RULE_INFO
{
    NET_SPEED_LIMIT stuSpeedLimit;             
    int nMinDuration;                          
    BOOL bSnapMotorcycle;                      
    NET_SPEED_LIMIT stuYellowSpeedLimit;       
    int nLaneNumber;                           
    BOOL bSpeedLimitForSize;                   
    NET_SPEED_LIMIT stuSmallCarSpeedLimit;     
    NET_SPEED_LIMIT stuBigCarSpeedLimit;       
    NET_SPEED_LIMIT stuOverSpeedMargin;        
    NET_SPEED_LIMIT stuBigCarOverSpeedMargin;  
    NET_SPEED_LIMIT stuUnderSpeedMargin;       
    NET_SPEED_LIMIT stuBigCarUnderSpeedMargin; 
    BOOL bVoiceBroadcastEnable;                
    BYTE byReserved[4092];                     
} NET_TRAFFIC_UNDERSPEED_RULE_INFO;
typedef struct tagNET_TRAFFIC_OVERYELLOWLINE_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20]; 
    int nDetectRegionPoint;              
    int nLaneNumber;                     
    BOOL bAreaTrigEnable;                
    UINT nSensitivity;                   
    BOOL bSnapMotorcycle;                
    UINT nDelayTime;                     
    BYTE byReserved[4096];               
} NET_TRAFFIC_OVERYELLOWLINE_RULE_INFO;
typedef struct tagNET_TRAFFIC_CROSSLANE_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];    
    int nDetectRegionPoint;                 
    int nLaneNumber;                        
    DH_POINT stuDirectionStart;             
    DH_POINT stuDirectionEnd;               
    UINT nSensitivity;                      
    BOOL bAreaTrigEnable;                   
    BOOL bContinueCrossLaneEnable;          
    BOOL bZoomEnable;                       
    BOOL bSnapMotorcycle;                   
    UINT nDelayTime;                        
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    BOOL bSnapNoPlateMotor;                 
    BYTE byReserved[4096];                  
} NET_TRAFFIC_CROSSLANE_RULE_INFO;
typedef struct tagNET_TRAFFIC_JAM_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];    
    int nDetectRegionPoint;                 
    UINT nJamLineMargin;                    
    UINT nJamLineMarginEnd;                 
    int nLaneNumber;                        
    UINT nDelay;                            
    UINT nInterval;                         
    UINT nSensitivity;                      
    UINT nReportTimes;                      
    UINT nVehicleNumberThreshold;           
    BOOL bZoomEnable;                       
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nDiscontinuousTimeThreshold;       
    BYTE byReserved[4096];                  
} NET_TRAFFIC_JAM_RULE_INFO;
typedef struct tagNET_TRAFFIC_PEDESTRAIN_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20]; 
    int nDetectRegionPoint;              
    int nLaneNumber;                     
    int nMinDuration;                    
    int nInterval;                       
    BOOL bSnapMotorcycle;                
    BOOL bZoomEnable;                    
    UINT nRepeatAlarmTime;               
    UINT nSnapObjectType;                
    UINT nDelayTime;                     
    UINT nSensitivity;                   
    BYTE byReserved[4096];               
} NET_TRAFFIC_PEDESTRAIN_RULE_INFO;
typedef struct tagNET_TRAFFIC_THROW_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20]; 
    int nDetectRegionPoint;              
    int nLaneNumber;                     
    int nMinDuration;                    
    int nInterval;                       
    BOOL bSnapMotorcycle;                
    BOOL bZoomEnable;                    
    UINT nRepeatAlarmTime;               
    UINT nSnapObjectType;                
    UINT nDelayTime;                     
    UINT nSensitivity;                   
    BYTE byReserved[4096];               
} NET_TRAFFIC_THROW_RULE_INFO;
typedef struct tagNET_RETROGRADE_DETECTION_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];    
    int nDetectRegionPoint;                 
    int nTriggerPosition;                   
    BYTE bTriggerPosition[8];               
    DH_POINT stuDirectionStart;             
    DH_POINT stuDirectionEnd;               
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nSensitivity;                      
    BOOL bSnapMotorcycle;                   
    UINT nDistance;                         
    BYTE byReserved[4096];                  
} NET_RETROGRADE_DETECTION_RULE_INFO;
typedef enum tagNET_EM_SNAP_PLATEMOTOR_TYPE
{
    NET_EM_SNAP_PLATEMOTOR_YES, 
    NET_EM_SNAP_PLATEMOTOR_NO,  
} NET_EM_SNAP_PLATEMOTOR_TYPE;
typedef struct tagNET_TRAFFIC_RETROGRADE_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];          
    int nDetectRegionPoint;                       
    BYTE byReserved1[4];                          
    DH_POINT stuDirectionStart;                   
    DH_POINT stuDirectionEnd;                     
    int nMinDuration;                             
    UINT nLaneNumber;                             
    BOOL bLegal;                                  
    UINT nPositionDistinctness;                   
    UINT nSensitivity;                            
    BOOL bZoomEnable;                             
    BOOL bSnapMotorcycle;                         
    UINT nSnapNonMotor;                           
    UINT nSnapNoPlateMotor;                       
    NET_EM_SNAP_PLATEMOTOR_TYPE emSnapPlateMotor; 
    UINT nSnapBicycle;                            
    UINT nDurationTime;                           
    NET_CFG_SIZEFILTER_INFO stuSizeFileter;       
    BOOL bSizeFileter;                            
    UINT nReverseDisplacement;                    
    BYTE byReserved[4096];                        
} NET_TRAFFIC_RETROGRADE_RULE_INFO;
typedef struct tagNET_TRAFFIC_PARKING_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20]; 
    int nDetectRegionPoint;              
    UINT nLaneNumber;                    
    UINT nDelay;                         
    UINT nReportTimes;                   
    UINT nParkingAllowedTime;            
    UINT nSensitivity;                   
    UINT nParkingNumThreshold;           
    BOOL bZoomEnable;                    
    BOOL bSnapMotorcycle;                
    UINT nDectRegionNumber;              
    UINT nShadeSnap;                     
    UINT nControlMoreAlerts;             
    UINT nReduceUnderreporting;          
    BYTE byReserved[4096];               
} NET_TRAFFIC_PARKING_RULE_INFO;
typedef struct tagNET_FINANCE_CASH_TRANSACTION_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];      
    int nDetectRegionPoint;                   
    int nHumanDetectRegionPoint;              
    POINTCOORDINATE stuHumanDetectRegion[20]; 
    UINT nSensitivity;                        
    UINT nMinDuration;                        
    UINT nReportInterval;                     
    BOOL bSizeFileter;                        
    NET_CFG_SIZEFILTER_INFO stuSizeFileter;   
    BYTE byReserved[4096];                    
} NET_FINANCE_CASH_TRANSACTION_RULE_INFO;
typedef struct tagNET_LEAVEDETECTION_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];    
    int nDetectRegionPoint;                 
    UINT nSensitivity;                      
    UINT nMinDuration;                      
    UINT nReportInterval;                   
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    UINT nPersonLimitMin;                   
    UINT nPersonLimitMax;                   
    BYTE byReserved[4096];                  
} NET_LEAVEDETECTION_RULE_INFO;
typedef enum tagEM_NEAR_DETECT_OBJECT
{
    EM_NEAR_DETECT_OBJECT_UNKNOWN, 
    EM_NEAR_DETECT_OBJECT_PERSON,  
    EM_NEAR_DETECT_OBJECT_ANIMAL,  
} EM_NEAR_DETECT_OBJECT;
typedef enum tagEM_NEAR_OBJECT_TYPE
{
    EM_NEAR_OBJECT_TYPE_UNKNOWN,                
    EM_NEAR_OBJECT_TYPE_MOVING_FOR_KLIFT,       
    EM_NEAR_OBJECT_TYPE_SILICON_PACKAGE,        
    EM_NEAR_OBJECT_TYPE_MOVING_SILICON_PACKAGE, 
    EM_NEAR_OBJECT_TYPE_PURING_SILICON_PACKAGE, 
} EM_NEAR_OBJECT_TYPE;
typedef struct tagNET_IVS_NEAR_OBJECT_DETECT_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];  
    int nDetectRegionPoint;               
    UINT nMinDuration;                    
    UINT nReportInterval;                 
    UINT nSensitivity;                    
    EM_NEAR_DETECT_OBJECT emDetectObject; 
    EM_NEAR_OBJECT_TYPE emNearObjectType; 
    char szReserved[2048];                
} NET_IVS_NEAR_OBJECT_DETECT_RULE_INFO;
typedef struct tagNET_IVS_PIC_COMPARE_DETECTION_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];   
    int nDetectRegionPoint;                
    UINT nMinDuration;                     
    UINT nReportInterval;                  
    UINT nSensitivity;                     
    BOOL bSizeFilter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFilter; 
    char szReserved[2048];                 
} NET_IVS_PIC_COMPARE_DETECTION_RULE_INFO;
typedef struct tagNET_TRAFFIC_ACCIDENT_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20]; 
    int nDetectRegionPoint;              
    int nLaneNumber;                     
    int nMinDuration;                    
    BOOL bZoomEnable;                    
    UINT nZoomStayTime;                  
    UINT nVehicleDelayTime;              
    UINT nPersonDelayTime;               
    UINT nMaxDelayTime;                  
    UINT nVehicleNumberThreshold;        
    UINT nWanderTime;                    
    UINT nRepeatTime;                    
    BOOL bRelateHuman;                   
    BYTE byReserved[4096];               
} NET_TRAFFIC_ACCIDENT_RULE_INFO;
typedef struct tagNET_TRAFFIC_BACKING_RULE_INFO
{
    POINTCOORDINATE stuDetectRegion[20];    
    int nDetectRegionPoint;                 
    int nLaneNumber;                        
    DH_POINT stuDirectionStart;             
    DH_POINT stuDirectionEnd;               
    UINT nSensitivity;                      
    BOOL bAreaTrigEnable;                   
    BOOL bContinueCrossLaneEnable;          
    BOOL bZoomEnable;                       
    BOOL bSnapMotorcycle;                   
    UINT nDelayTime;                        
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    BOOL bSnapNoPlateMotor;                 
    BYTE byReserved[4096];                  
} NET_TRAFFIC_BACKING_RULE_INFO;
typedef struct tagNET_FOG_DETECTION_RULE_INFO
{
    EM_FOG_LEVEL emAlarmFogLevel; 
    UINT nAlarmInterval;          
    BOOL bRealDataUpload;         
    UINT nRealUpdateInterval;     
    BYTE byReserved[4096];        
} NET_FOG_DETECTION_RULE_INFO;
typedef enum tagNET_ANALYSE_HUMANFACE_TYPE
{
    NET_ANALYSE_HUMANFACE_TYPE_UNKNOWN,      
    NET_ANALYSE_HUMANFACE_TYPE_NORMAL,       
    NET_ANALYSE_HUMANFACE_TYPE_HIDEEYE,      
    NET_ANALYSE_HUMANFACE_TYPE_HIDENOSE,     
    NET_ANALYSE_HUMANFACE_TYPE_HIDEMOUTH,    
    NET_ANALYSE_HUMANFACE_TYPE_ADJACENTFACE, 
    NET_ANALYSE_HUMANFACE_TYPE_ABNORMALFACE, 
    NET_ANALYSE_HUMANFACE_TYPE_HELMETFACE,   
} NET_ANALYSE_HUMANFACE_TYPE;
typedef enum tagEM_HUMAN_AGE_SEG
{
    EM_HUMAN_AGE_SEG_UNKOWN,  
    EM_HUMAN_AGE_SEG_CHILD,   
    EM_HUMAN_AGE_SEG_ADULT,   
    EM_HUMAN_AGE_SEG_ELDERLY, 
} EM_HUMAN_AGE_SEG;
typedef struct tagNET_HUMAN_DESC_INFO
{
    EM_HUMAN_AGE_SEG emName; 
    UINT nRange[2];          
    char szReserved[256];    
} NET_HUMAN_DESC_INFO;
typedef struct tagNET_HUMAN_AGE_INFO
{
    BOOL bEnable;                            
    int nShowListNums;                       
    EM_HUMAN_AGE_SEG emHumanAgeShowList[16]; 
    NET_HUMAN_DESC_INFO* pstuHumanDesc;      
    char szReserved[256];                    
} NET_HUMAN_AGE_INFO;
typedef struct tagNET_HUMAN_SEX_INFO
{
    BOOL bEnable;                      
    int nShowListNums;                 
    EM_SEX_TYPE emHumanSexShowList[2]; 
    char szReserved[256];              
} NET_HUMAN_SEX_INFO;
typedef struct tagNET_HUMAN_EMOTION_INFO
{
    BOOL bEnable;                               
    int nShowListNums;                          
    EM_EMOTION_TYPE emHumanEmotionShowList[32]; 
    char szReserved[256];                       
} NET_HUMAN_EMOTION_INFO;
typedef struct tagNET_HUMAN_GLASSES_INFO
{
    BOOL bEnable;                            
    int nShowListNums;                       
    EM_HAS_GLASS emHumanGlassesShowList[16]; 
    BOOL bHasGlasses;                        
    char szReserved[256];                    
} NET_HUMAN_GLASSES_INFO;
typedef struct tagNET_HUMAN_MASK_INFO
{
    BOOL bEnable;                        
    int nShowListNums;                   
    EM_MASK_TYPE emHumanMaskShowList[2]; 
    char szReserved[256];                
} NET_HUMAN_MASK_INFO;
typedef enum tagEM_HUMAN_BEARD_TYPE
{
    EM_HUMAN_BEARD_TYPE_UNKNOWN, 
    EM_HUMAN_BEARD_TYPE_NONE,    
    EM_HUMAN_BEARD_TYPE_BEARD,   
} EM_HUMAN_BEARD_TYPE;
typedef struct tagNET_HUMAN_BEARD_INFO
{
    BOOL bEnable;                                
    int nShowListNums;                           
    EM_HUMAN_BEARD_TYPE emHumanBeardShowList[2]; 
    char szReserved[256];                        
} NET_HUMAN_BEARD_INFO;
typedef enum tagEM_HUMAN_COAT_TYPE
{
    EM_HUMAN_COAT_TYPE_UNKNOWN,      
    EM_HUMAN_COAT_TYPE_LONG_SLEEVE,  
    EM_HUMAN_COAT_TYPE_SHORT_SLEEVE, 
} EM_HUMAN_COAT_TYPE;
typedef struct tagNET_HUMAN_COAT_TYPE_INFO
{
    BOOL bEnable;                                   
    int nShowListNums;                              
    EM_HUMAN_COAT_TYPE emHumanCoatTypeShowList[16]; 
    char szReserved[256];                           
} NET_HUMAN_COAT_TYPE_INFO;
typedef struct tagNET_HUMAN_COAT_COLOR_INFO
{
    BOOL bEnable;                                  
    int nShowListNums;                             
    EM_CLOTHES_COLOR emHumanCoatColorShowList[32]; 
    char szReserved[256];                          
} NET_HUMAN_COAT_COLOR_INFO;
typedef enum tagEM_HUMAN_TROUSERS_TYPE
{
    EM_HUMAN_TROUSERS_TYPE_UNKNOWN,     
    EM_HUMAN_TROUSERS_TYPE_SHORT_PANTS, 
    EM_HUMAN_TROUSERS_TYPE_PANTS,       
    EM_HUMAN_TROUSERS_TYPE_SKIRT,       
} EM_HUMAN_TROUSERS_TYPE;
typedef struct tagNET_HUMAN_TROUSERS_TYPE_INFO
{
    BOOL bEnable;                                           
    int nShowListNums;                                      
    EM_HUMAN_TROUSERS_TYPE emHumanTrousersTypeShowList[16]; 
    char szReserved[256];                                   
} NET_HUMAN_TROUSERS_TYPE_INFO;
typedef struct tagNET_HUMAN_TROUSERS_COLOR_INFO
{
    BOOL bEnable;                                      
    int nShowListNums;                                 
    EM_CLOTHES_COLOR emHumanTrousersColorShowList[32]; 
    char szReserved[256];                              
} NET_HUMAN_TROUSERS_COLOR_INFO;
typedef enum tagEM_HUMAN_BAG_TYPE
{
    EM_HUMAN_BAG_TYPE_UNKNOWN,      
    EM_HUMAN_BAG_TYPE_BAG,          
    EM_HUMAN_BAG_TYPE_CARRIER_BAG,  
    EM_HUMAN_BAG_TYPE_SHOULDER_BAG, 
    EM_HUMAN_BAG_TYPE_NONE,         
} EM_HUMAN_BAG_TYPE;
typedef struct tagNET_HUMAN_HAS_BAG_INFO
{
    BOOL bEnable;                                
    int nShowListNums;                           
    EM_HUMAN_BAG_TYPE emHumanHasBagShowList[16]; 
    char szReserved[256];                        
} NET_HUMAN_HAS_BAG_INFO;
typedef enum tagEM_HUMAN_UMBRELLA_TYPE
{
    EM_HUMAN_UMBRELLA_TYPE_UNKNOWN,       
    EM_HUMAN_UMBRELLA_TYPE_WITH_UMBRELLA, 
    EM_HUMAN_UMBRELLA_TYPE_NO_UMBRELLA,   
} EM_HUMAN_UMBRELLA_TYPE;
typedef struct tagNET_HUMAN_HAS_UMBRELLA_INFO
{
    BOOL bEnable;                                         
    int nShowListNums;                                    
    EM_HUMAN_UMBRELLA_TYPE emHumanHasUmbrellaShowList[2]; 
    char szReserved[256];                                 
} NET_HUMAN_HAS_UMBRELLA_INFO;
typedef enum tagEM_HUMAN_RAIN_COAT_TYPE
{
    EM_HUMAN_RAIN_COAT_TYPE_UNKNOWN, 
    EM_HUMAN_RAIN_COAT_TYPE_YES,     
    EM_HUMAN_RAIN_COAT_TYPE_NO,      
} EM_HUMAN_RAIN_COAT_TYPE;
typedef struct tagNET_HUMAN_RAIN_COAT_INFO
{
    BOOL bEnable;                                       
    int nShowListNums;                                  
    EM_HUMAN_RAIN_COAT_TYPE emHumanRainCoatShowList[2]; 
    char szReserved[256];                               
} NET_HUMAN_RAIN_COAT_INFO;
typedef enum tagEM_HUMAN_HAT_TYPE
{
    EM_HUMAN_HAT_TYPE_UNKNOWN,     
    EM_HUMAN_HAT_TYPE_WITH_HAT,    
    EM_HUMAN_HAT_TYPE_WITH_HELMET, 
    EM_HUMAN_HAT_TYPE_NONE,        
} EM_HUMAN_HAT_TYPE;
typedef struct tagNET_HUMAN_HAS_HAT_INFO
{
    BOOL bEnable;                                
    int nShowListNums;                           
    EM_HUMAN_HAT_TYPE emHumanHasHatShowList[16]; 
    char szReserved[256];                        
} NET_HUMAN_HAS_HAT_INFO;
typedef struct tagNET_HUMAN_HELMET_INFO
{
    BOOL bEnable;                                    
    BOOL bHasHelmet;                                 
    int nShowListNums;                               
    EM_CLOTHES_COLOR emHumanHelmetColorShowList[32]; 
    char szReserved[256];                            
} NET_HUMAN_HELMET_INFO;
typedef enum tagEM_HUMAN_VEST_TYPE
{
    EM_HUMAN_VEST_TYPE_UNKNOWN = -1, 
    EM_HUMAN_VEST_TYPE_NO,           
    EM_HUMAN_VEST_TYPE_YES,          
} EM_HUMAN_VEST_TYPE;
typedef struct tagNET_HUMAN_VEST_INFO
{
    BOOL bEnable;                              
    int nShowListNums;                         
    EM_HUMAN_VEST_TYPE emHumanVestShowList[2]; 
    char szReserved[256];                      
} NET_HUMAN_VEST_INFO;
typedef enum tagEM_HUMAN_HAIR_STYLE_TYPE
{
    EM_HUMAN_HAIR_STYLE_TYPE_UNKNOWN,      
    EM_HUMAN_HAIR_STYLE_TYPE_LONG,         
    EM_HUMAN_HAIR_STYLE_TYPE_SHORT,        
    EM_HUMAN_HAIR_STYLE_TYPE_PONYTAIL,     
    EM_HUMAN_HAIR_STYLE_TYPE_UPDO,         
    EM_HUMAN_HAIR_STYLE_TYPE_HEAD_COVERED, 
} EM_HUMAN_HAIR_STYLE_TYPE;
typedef struct tagNET_HUMAN_HAIR_STYLE_INFO
{
    BOOL bEnable;                                          
    int nShowListNums;                                     
    EM_HUMAN_HAIR_STYLE_TYPE emHumanHairStyleShowList[16]; 
    char szReserved[256];                                  
} NET_HUMAN_HAIR_STYLE_INFO;
typedef struct tagNET_HUMAN_ANGLE_INFO
{
    BOOL bEnable;                           
    int nShowListNums;                      
    EM_ANGLE_TYPE emHumanAngleShowList[16]; 
    char szReserved[256];                   
} NET_HUMAN_ANGLE_INFO;
typedef enum tagEM_HUMAN_HOLD_BABY_TYPE
{
    EM_HUMAN_HOLD_BABY_TYPE_UNKNOWN, 
    EM_HUMAN_HOLD_BABY_TYPE_HOLD,    
    EM_HUMAN_HOLD_BABY_TYPE_NO_HOLD, 
} EM_HUMAN_HOLD_BABY_TYPE;
typedef struct tagNET_HUMAN_HOLD_BABY_INFO
{
    BOOL bEnable;                                       
    int nShowListNums;                                  
    EM_HUMAN_HOLD_BABY_TYPE emHumanHoldBabyShowList[2]; 
    char szReserved[256];                               
} NET_HUMAN_HOLD_BABY_INFO;
typedef struct tagNET_COMPLIANT_HUMAN_INFO
{
    NET_HUMAN_AGE_INFO stuHumanAge;                      
    NET_HUMAN_SEX_INFO stuHumanSex;                      
    NET_HUMAN_EMOTION_INFO stuHumanEmotion;              
    NET_HUMAN_GLASSES_INFO stuHumanGlasses;              
    NET_HUMAN_MASK_INFO stuHumanMask;                    
    NET_HUMAN_BEARD_INFO stuHumanBeard;                  
    NET_HUMAN_COAT_TYPE_INFO stuHumanCoatType;           
    NET_HUMAN_COAT_COLOR_INFO stuHumanCoatColor;         
    NET_HUMAN_TROUSERS_TYPE_INFO stuHumanTrousersType;   
    NET_HUMAN_TROUSERS_COLOR_INFO stuHumanTrousersColor; 
    NET_HUMAN_HAS_BAG_INFO stuHumanHasBag;               
    NET_HUMAN_HAS_UMBRELLA_INFO stuHumanHasUmbrella;     
    NET_HUMAN_RAIN_COAT_INFO stuHumanRainCoat;           
    NET_HUMAN_HAS_HAT_INFO stuHumanHasHat;               
    NET_HUMAN_HELMET_INFO stuHumanHelmet;                
    NET_HUMAN_VEST_INFO stuHumanVest;                    
    NET_HUMAN_HAIR_STYLE_INFO stuHumanHairStyle;         
    NET_HUMAN_ANGLE_INFO stuHumanAngle;                  
    NET_HUMAN_HOLD_BABY_INFO stuHumanHoldBaby;           
    char szReserved[1024];                               
} NET_COMPLIANT_HUMAN_INFO;
typedef struct tagNET_VEHICLE_COLOR_INFO
{
    BOOL bEnable;                                    
    int nShowListNums;                               
    EM_OBJECT_COLOR_TYPE emVehicleColorShowList[32]; 
    char szReserved[256];                            
} NET_VEHICLE_COLOR_INFO;
typedef struct tagNET_VEHICLE_BRAND_INFO
{
    BOOL bEnable;            
    int nShowListNums;       
    int nBrandShowList[256]; 
    char szReserved[256];    
} NET_VEHICLE_BRAND_INFO;
typedef enum tagEM_COMPLIANT_VEHICLE_TYPE
{
    EM_COMPLIANT_VEHICLE_TYPE_UNKNOWN,              
    EM_COMPLIANT_VEHICLE_TYPE_PASSENGER_CAR,        
    EM_COMPLIANT_VEHICLE_TYPE_LARGE_TRUCK,          
    EM_COMPLIANT_VEHICLE_TYPE_MID_TRUCK,            
    EM_COMPLIANT_VEHICLE_TYPE_MID_PASSENGER_CAR,    
    EM_COMPLIANT_VEHICLE_TYPE_SALOON_CAR,           
    EM_COMPLIANT_VEHICLE_TYPE_MICROBUS,             
    EM_COMPLIANT_VEHICLE_TYPE_MICRO_TRUCK,          
    EM_COMPLIANT_VEHICLE_TYPE_SUV,                  
    EM_COMPLIANT_VEHICLE_TYPE_SUV_MPV,              
    EM_COMPLIANT_VEHICLE_TYPE_MPV_PICKUP,           
    EM_COMPLIANT_VEHICLE_TYPE_MINI_CARRIAGE,        
    EM_COMPLIANT_VEHICLE_TYPE_TANK_CAR,             
    EM_COMPLIANT_VEHICLE_TYPE_CONCRETE_MIXER_TRUCK, 
    EM_COMPLIANT_VEHICLE_TYPE_SUCTION_SEWAGE_TRUCK, 
    EM_COMPLIANT_VEHICLE_TYPE_NORMAL_TANK_TRUCK,    
    EM_COMPLIANT_VEHICLE_TYPE_TRACTOR,              
    EM_COMPLIANT_VEHICLE_TYPE_MACHINE_SHOP_TRUCK,   
    EM_COMPLIANT_VEHICLE_TYPE_DREGS_CAR,            
    EM_COMPLIANT_VEHICLE_TYPE_POLICE,               
    EM_COMPLIANT_VEHICLE_TYPE_AMBULANCE,            
    EM_COMPLIANT_VEHICLE_TYPE_FIRE_ENGINE,          
    EM_COMPLIANT_VEHICLE_TYPE_WATERING_CAR,         
    EM_COMPLIANT_VEHICLE_TYPE_TAXI,                 
    EM_COMPLIANT_VEHICLE_TYPE_POWER_LOT_VEHICLE,    
    EM_COMPLIANT_VEHICLE_TYPE_SCHOOL_BUS,           
    EM_COMPLIANT_VEHICLE_TYPE_BUS,                  
    EM_COMPLIANT_VEHICLE_TYPE_ESCORT,               
    EM_COMPLIANT_VEHICLE_TYPE_OTHER,                
} EM_COMPLIANT_VEHICLE_TYPE;
typedef struct tagNET_VEHICLE_TYPE_INFO
{
    BOOL bEnable;                                        
    int nShowListNums;                                   
    EM_COMPLIANT_VEHICLE_TYPE emVehicleTypeShowList[64]; 
    char szReserved[256];                                
} NET_VEHICLE_TYPE_INFO;
typedef struct tagNET_VEHICLE_PLATE_COLOR_INFO
{
    BOOL bEnable;                                            
    int nShowListNums;                                       
    EM_NET_PLATE_COLOR_TYPE emVehiclePlateColorShowList[16]; 
    char szReserved[256];                                    
} NET_VEHICLE_PLATE_COLOR_INFO;
typedef enum tagEM_VEHICLE_CALLING_TYPE
{
    EM_VEHICLE_CALLING_TYPE_UNKNOWN, 
    EM_VEHICLE_CALLING_TYPE_CALLING, 
    EM_VEHICLE_CALLING_TYPE_NO_CALL, 
} EM_VEHICLE_CALLING_TYPE;
typedef struct tagNET_VEHICLE_CALLING_INFO
{
    BOOL bEnable;                                        
    int nShowListNums;                                   
    EM_VEHICLE_CALLING_TYPE emVehicleCallingShowList[2]; 
    char szReserved[256];                                
} NET_VEHICLE_CALLING_INFO;
typedef enum tagEM_VEHICLE_SAFE_BELT_TYPE
{
    EM_VEHICLE_SAFE_BELT_TYPE_UNKNOWN,           
    EM_VEHICLE_SAFE_BELT_TYPE_WITH_SAFE_BELT,    
    EM_VEHICLE_SAFE_BELT_TYPE_WITHOUT_SAFE_BELT, 
} EM_VEHICLE_SAFE_BELT_TYPE;
typedef struct tagNET_VEHICLE_SAFE_BELT_INFO
{
    BOOL bEnable;                                           
    int nShowListNums;                                      
    EM_VEHICLE_SAFE_BELT_TYPE emVehicleSafeBeltShowList[2]; 
    char szReserved[256];                                   
} NET_VEHICLE_SAFE_BELT_INFO;
typedef enum tagEM_VEHICLE_ATTACHMENT_TYPE
{
    EM_VEHICLE_ATTACHMENT_TYPE_UNKNOWN,     
    EM_VEHICLE_ATTACHMENT_TYPE_FURNITURE,   
    EM_VEHICLE_ATTACHMENT_TYPE_PENDANT,     
    EM_VEHICLE_ATTACHMENT_TYPE_TISSUE_BOX,  
    EM_VEHICLE_ATTACHMENT_TYPE_PERFUME_BOX, 
    EM_VEHICLE_ATTACHMENT_TYPE_DANGER,      
    EM_VEHICLE_ATTACHMENT_TYPE_NONE,        
    EM_VEHICLE_ATTACHMENT_TYPE_CARD,        
} EM_VEHICLE_ATTACHMENT_TYPE;
typedef struct tagNET_VEHICLE_ATTACHMENT_INFO
{
    BOOL bEnable;                                               
    int nShowListNums;                                          
    EM_VEHICLE_ATTACHMENT_TYPE emVehicleAttachmentShowList[16]; 
    char szReserved[256];                                       
} NET_VEHICLE_ATTACHMENT_INFO;
typedef struct tagNET_COMPLIANT_VEHICLE_INFO
{
    NET_VEHICLE_COLOR_INFO stuVehicleColor;            
    NET_VEHICLE_BRAND_INFO stuVehicleBrand;            
    NET_VEHICLE_TYPE_INFO stuVehicleType;              
    NET_VEHICLE_PLATE_COLOR_INFO stuVehiclePlateColor; 
    NET_VEHICLE_CALLING_INFO stuVehicleCalling;        
    NET_VEHICLE_SAFE_BELT_INFO stuVehicleSafeBelt;     
    NET_VEHICLE_ATTACHMENT_INFO stuVehicleAttachment;  
    char szReserved[1024];                             
} NET_COMPLIANT_VEHICLE_INFO;
typedef struct tagNET_NONMOTOR_COLOR_INFO
{
    BOOL bEnable;                                     
    int nShowListNums;                                
    EM_OBJECT_COLOR_TYPE emNonMotorColorShowList[32]; 
    char szReserved[256];                             
} NET_NONMOTOR_COLOR_INFO;
typedef struct tagNET_NONMOTOR_CYCLING_NUM_INFO
{
    BOOL bEnable;         
    UINT nCyclingNum;     
    char szReserved[256]; 
} NET_NONMOTOR_CYCLING_NUM_INFO;
typedef enum tagEM_NONMOTOR_TYPE
{
    EM_NONMOTOR_TYPE_UNKNOWN = 0,                    
    EM_NONMOTOR_TYPE_BICYCLE,                        
    EM_NONMOTOR_TYPE_VANTRICYCLE,                    
    EM_NONMOTOR_TYPE_MOTORBIKE,                      
    EM_NONMOTOR_TYPE_MANNED_CONVERTIBLE_TRICYCLE,    
    EM_NONMOTOR_TYPE_NO_MANNED_CONVERTIBLE_TRICYCLE, 
} EM_NONMOTOR_TYPE;
typedef struct tagNET_NONMOTOR_CATEGORY_INFO
{
    BOOL bEnable;                                
    int nShowListNums;                           
    EM_NONMOTOR_TYPE emNonMotorTypeShowList[32]; 
    char szReserved[256];                        
} NET_NONMOTOR_CATEGORY_INFO;
typedef struct tagNET_COMPLIANT_NONMOTOR_INFO
{
    NET_NONMOTOR_COLOR_INFO stuNonMotorColor;      
    NET_NONMOTOR_CYCLING_NUM_INFO stuNumOfCycling; 
    NET_NONMOTOR_CATEGORY_INFO stuCategory;        
    char szReserved[1024];                         
} NET_COMPLIANT_NONMOTOR_INFO;
typedef enum tagEM_BOAT_TYPE
{
    EM_BOAT_TYPE_UNKNOWN = 0,      
    EM_BOAT_TYPE_SAND_MINING_SHIP, 
} EM_BOAT_TYPE;
typedef struct tagNET_BOAT_TYPE_INFO
{
    BOOL bEnable;                        
    int nShowListNums;                   
    EM_BOAT_TYPE emBoatTypeShowList[64]; 
    char szReserved[256];                
} NET_BOAT_TYPE_INFO;
typedef struct tagNET_COMPLIANT_BOAT_INFO
{
    NET_BOAT_TYPE_INFO stuBoatType; 
    char szReserved[1024];          
} NET_COMPLIANT_BOAT_INFO;
typedef struct tagNET_COMPLIANT_FORMAT_INFO
{
    BOOL bSupportHuman;                      
    NET_COMPLIANT_HUMAN_INFO stuHuman;       
    BOOL bSupportVehicle;                    
    NET_COMPLIANT_VEHICLE_INFO stuVehicle;   
    BOOL bSupportNonMotor;                   
    NET_COMPLIANT_NONMOTOR_INFO stuNonMotor; 
    NET_COMPLIANT_BOAT_INFO stuBoat;         
    char szReserved[1024];                   
} NET_COMPLIANT_FORMAT_INFO;
typedef struct tagNET_COMPLIANT_INFO
{
    UINT nCompliantType;                          
    BOOL bCompliantEnable;                        
    NET_COMPLIANT_FORMAT_INFO stuCompliantFormat; 
    char szReserved[1024];                        
} NET_COMPLIANT_INFO;
typedef struct tagNET_HUMANTRAIT_RULE_INFO
{
    DWORD dwSize;                                  
    int nHumanFaceTypeNum;                         
    NET_ANALYSE_HUMANFACE_TYPE emHumanFaceType[8]; 
    int nMinDuration;                       
    int nTriggerTargets;                    
    int nSensitivity;                       
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bFeatureEnable;                    
    BOOL bFeatureFilter;                    
    int nMinQuality;                        
    int nFaceFeatureNum;                           
    NET_EM_FACEFEATURE_TYPE emFaceFeatureType[32]; 
    UINT nDetectRegionPoint;                       
    POINTCOORDINATE stuDetectRegion[20];           
    int nExcludeRegionNum;                         
    DH_POLY_POINTS stuExcludeRegion[10];           
    BOOL bFaceSnapEnable;                          
    BOOL bFeatureExtractEnable;                    
    NET_COMPLIANT_INFO stuCompliant;               
    BOOL bHumanFeatureEnable;                      
    int nHumanFeatureList;                         
    char szHumanFeatureList[32][16];               
    BOOL bFaceFeatureExtractEnable;                
} NET_HUMANTRAIT_RULE_INFO;
typedef enum tagEM_DETECT_DIRECTION_TYPE
{
    EM_DETECT_DIRECTION_UNKNOWN = 0,   
    EM_DETECT_DIRECTION_LEFT_TO_RIGHT, 
    EM_DETECT_DIRECTION_RIGHT_TO_LEFT, 
} EM_DETECT_DIRECTION_TYPE;
typedef enum tagEM_XRAY_SCHEME_TYPE
{
    EM_XRAY_SCHEME_UNKNOWN,        
    EM_XRAY_SCHEME_TONGFANG_100,   
    EM_XRAY_SCHEME_TONGFANG_200,   
    EM_XRAY_SCHEME_TONGFANG_300,   
    EM_XRAY_SCHEME_TONGFANG_400,   
    EM_XRAY_SCHEME_ANTIANXIA_100,  
    EM_XRAY_SCHEME_ANTIANXIA_200,  
    EM_XRAY_SCHEME_DAHUA_100,      
    EM_XRAY_SCHEME_DAHUA_200,      
    EM_XRAY_SCHEME_DAHUA_300,      
    EM_XRAY_SCHEME_DAHUA_400,      
    EM_XRAY_SCHEME_DAHUA_301,      
    EM_XRAY_SCHEME_SHANGCHEN_HIGH, 
    EM_XRAY_SCHEME_SHANGCHEN_LOW,  
} EM_XRAY_SCHEME_TYPE;
typedef struct tagNET_XRAY_OBJECT_UPLOAD_RULE
{
    BOOL bUploadEnable;   
    UINT nSimilarity;     
    BYTE byReserved[128]; 
} NET_XRAY_OBJECT_UPLOAD_RULE;
typedef struct tagNET_XRAY_OBJECT_DETECT_RULE
{
    EM_INSIDE_OBJECT_TYPE emObjectType;            
    BOOL bDetectEnable;                            
    EM_DANGER_GRADE_TYPE emDangerGrade;            
    NET_XRAY_OBJECT_UPLOAD_RULE stuUploadRuleInfo; 
    BYTE byReserved[512];                          
} NET_XRAY_OBJECT_DETECT_RULE;
typedef struct tagNET_XRAY_DETECT_BYPBJECT_RULE_INFO
{
    DWORD dwSize;                                       
    int nDetectRegionPoint;                             
    POINTCOORDINATE stuDetectRegion[20];                
    UINT nSensitivity;                                  
    EM_DETECT_DIRECTION_TYPE emDirectionType;           
    EM_XRAY_SCHEME_TYPE emSchemeType;                   
    UINT nObjectRuleNum;                                
    NET_XRAY_OBJECT_DETECT_RULE stuObjectRuleInfo[128]; 
    EM_XRAY_VIEW_TYPE emViewType;                       
} NET_XRAY_DETECT_BYPBJECT_RULE_INFO;
typedef enum tagEM_NONMOTOR_FEATURE
{
    EM_NONMOTOR_FEATURE_UNKNOWN,        
    EM_NONMOTOR_FEATURE_HELMET,         
    EM_NONMOTOR_FEATURE_NUMOFCYCLING,   
    EM_NONMOTOR_FEATURE_NONMOTORCOLOR,  
    EM_NONMOTOR_FEATURE_SEX,            
    EM_NONMOTOR_FEATURE_AGE,            
    EM_NONMOTOR_FEATURE_HAT,            
    EM_NONMOTOR_FEATURE_BAG,            
    EM_NONMOTOR_FEATURE_CARRIERBAG,     
    EM_NONMOTOR_FEATURE_UMBRELLA,       
    EM_NONMOTOR_FEATURE_UPPERBODYCOLOR, 
    EM_NONMOTOR_FEATURE_LOWERBODYCOLOR, 
    EM_NONMOTOR_FEATURE_UPCLOTHES,      
    EM_NONMOTOR_FEATURE_DOWNCLOTHES,    
    EM_NONMOTOR_FEATURE_CATEGORY,       
} EM_NONMOTOR_FEATURE;
typedef struct tagNET_NONMOTORDETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nFeatureNum;                        
    EM_NONMOTOR_FEATURE emFeatureList[32];  
    UINT nDetectRegionPoint;                
    POINTCOORDINATE stuDetectRegion[20];    
    int nExcludeRegionNum;                  
    DH_POLY_POINTS stuExcludeRegion[10];    
    NET_COMPLIANT_INFO stuCompliant;        
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bFeatureExtractEnable;             
    BOOL bFaceFeatureExtractEnable;         
    BOOL bFaceFeatureEnable;                
    BOOL bFaceSnapEnable;                   
} NET_NONMOTORDETECT_RULE_INFO;
typedef struct tagNET_VEHICLEDETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nSnapThreshold;                     
    UINT nDetectRegionPoint;                
    POINTCOORDINATE stuDetectRegion[20];    
    int nExcludeRegionNum;                  
    DH_POLY_POINTS stuExcludeRegion[10];    
    NET_COMPLIANT_INFO stuCompliant;        
    BOOL bFeatureExtractEnable;             
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
} NET_VEHICLEDETECT_RULE_INFO;
typedef struct tagNET_HELMET_RULE_EXT_INFO
{
    BOOL bDetectMultiColor;            
    UINT nDetectColorNum;              
    EM_CLOTHES_COLOR emMultiColor[32]; 
    BYTE byReserved[2048];             
} NET_HELMET_RULE_EXT_INFO;
typedef struct tagNET_HELMET_DETECT_RULE
{
    BOOL bEnable;                                   
    BOOL bWear;                                     
    BOOL bDetectColor;                              
    EM_CLOTHES_COLOR emHelmetColor;                 
    NET_HELMET_RULE_EXT_INFO* pstHelmetRuleExtInfo; 
    BYTE byReserved[120];                           
} NET_HELMET_DETECT_RULE;
typedef enum tagEM_WORK_CLOTHES_TYPE
{
    EM_WORK_CLOTHES_UNKNOWN,      
    EM_WORK_CLOTHES_LONG_SLEEVE,  
    EM_WORK_CLOTHES_SHORT_SLEEVE, 
} EM_WORK_CLOTHES_TYPE;
typedef enum tagEM_CLOTHES_TEXTURE_TYPE
{
    EM_CLOTHES_TEXTURE_UNKNOWN, 
    EM_CLOTHES_TEXTURE_CHECKED, 
    EM_CLOTHES_TEXTURE_FLORAL,  
    EM_CLOTHES_TEXTURE_PURE,    
    EM_CLOTHES_TEXTURE_STRIPE,  
    EM_CLOTHES_TEXTURE_DESIGN,  
    EM_CLOTHES_TEXTURE_JOINT,   
} EM_CLOTHES_TEXTURE_TYPE;
typedef struct tagNET_WORKCLOTH_RULE_EXT_INFO
{
    UINT nColorLegal;                          
    BOOL bDetectMultiColor;                    
    UINT nDetectColorNum;                      
    EM_CLOTHES_COLOR emMultiColor[32];         
    UINT nTypeLegal;                           
    UINT nClothesTypeNum;                      
    EM_WORK_CLOTHES_TYPE emClothesType[32];    
    UINT nTextureLegal;                        
    UINT nTextureNum;                          
    EM_CLOTHES_TEXTURE_TYPE emTextureType[32]; 
    BYTE byReserved[2044];                     
} NET_WORKCLOTH_RULE_EXT_INFO;
typedef struct tagNET_WORKCLOTH_DETECT_RULE
{
    BOOL bEnable;                                         
    BOOL bWear;                                           
    BOOL bDetectColor;                                    
    EM_CLOTHES_COLOR emClothesColor;                      
    NET_WORKCLOTH_RULE_EXT_INFO* pstWorkClothRuleExtInfo; 
    BYTE byReserved[120];                                 
} NET_WORKCLOTH_DETECT_RULE;
typedef struct tagNET_WORKVEST_DETECT_RULE
{
    BOOL bEnable;                 
    BOOL bWear;                   
    BOOL bDetectColor;            
    EM_CLOTHES_COLOR emVestColor; 
    BYTE byReserved[128];         
} NET_WORKVEST_DETECT_RULE;
typedef enum tagEM_WORKPANTS_TYPE
{
    EM_WORKPANTS_TYPE_UNKNWON, 
    EM_WORKPANTS_TYPE_LONG,    
    EM_WORKPANTS_TYPE_SHORT,   
} EM_WORKPANTS_TYPE;
typedef struct tagNET_WORKPANTS_DETECT_RULE
{
    BOOL bEnable;                      
    BOOL bWear;                        
    UINT nPantsTypeNum;                
    EM_WORKPANTS_TYPE emPantsType[32]; 
    BYTE byReserved[252];              
} NET_WORKPANTS_DETECT_RULE;
typedef struct tagNET_PROHELMET_DETECT_RULE
{
    BOOL bEnable;         
    BOOL bWear;           
    char byReserved[128]; 
} NET_PROHELMET_DETECT_RULE;
typedef struct tagNET_WORKCLOTHES_DESCRIPT
{
    NET_HELMET_DETECT_RULE stuHelemetRule;      
    NET_WORKCLOTH_DETECT_RULE stuWorkClothRule; 
    NET_WORKVEST_DETECT_RULE stuWorkVestRule;   
    NET_WORKPANTS_DETECT_RULE stuWorkPantsRule; 
    UINT nSensitivity;                          
    UINT nAlarmTime;                            
    UINT nAlarmRepeatTime;                      
    NET_PROHELMET_DETECT_RULE stuProhelmet;     
    BYTE byReserved[484];                       
} NET_WORKCLOTHES_DESCRIPT;
typedef enum tagEM_WORKCLOTHDETECT_RULE_TYPE
{
    EM_WORKCLOTHDETECT_RULE_UNKNWON,          
    EM_WORKCLOTHDETECT_RULE_HELMET,           
    EM_WORKCLOTHDETECT_RULE_WORKCLOTH,        
    EM_WORKCLOTHDETECT_RULE_WORKPANTS,        
    EM_WORKCLOTHDETECT_RULE_PROTECTIVE,       
    EM_WORKCLOTHDETECT_RULE_TYPE_PROHELMET,   
    EM_WORKCLOTHDETECT_RULE_FIREPROOFCLOTHES, 
} EM_WORKCLOTHDETECT_RULE_TYPE;
typedef enum tagEM_WORKCLOTHDETECT_TRIGGER_MODE
{
    EM_WORKCLOTHDETECT_TRIGGER_MODE_UNKNWON,       
    EM_WORKCLOTHDETECT_TRIGGER_MODE_TYPEDETECT,    
    EM_WORKCLOTHDETECT_TRIGGER_MODE_COMPAREDETECT, 
} EM_WORKCLOTHDETECT_TRIGGER_MODE;
typedef struct tagNET_WORKCLOTHDETECT_RULE_INFO
{
    DWORD dwSize;                                        
    UINT nDetectRegionPoint;                             
    POINTCOORDINATE stuDetectRegion[20];                 
    UINT nDescriptNum;                                   
    NET_WORKCLOTHES_DESCRIPT stuWorkClothesDescript[64]; 
    EM_WORKCLOTHDETECT_RULE_TYPE emRuleType[32];         
    UINT nRuleTypeNum;                                   
    EM_WORKCLOTHDETECT_TRIGGER_MODE emTriggerMode;       
} NET_WORKCLOTHDETECT_RULE_INFO;
typedef struct tagNET_SILICON_FIREPUTTER_DETECTION_RULE_INFO
{
    DWORD dwSize;                        
    UINT nDetectRegionPoint;             
    POINTCOORDINATE stuDetectRegion[20]; 
    UINT nMinDuration;                   
    UINT nRepeatAlarmTime;               
    int nSensibility;                    
} NET_SILICON_FIREPUTTER_DETECTION_RULE_INFO;
typedef enum tagEM_CONDITION_EXPR_TYPE
{
    EM_CONDITION_EXPR_UNKNOWN = 0, 
    EM_CONDITION_EXPR_GREATER,     
    EM_CONDITION_EXPR_LESS,        
    EM_CONDITION_EXPR_EQUAL,       
} EM_CONDITION_EXPR_TYPE;
typedef struct tagNET_WORKSTAT_DESCRIPT
{
    NET_WORKCLOTHES_DESCRIPT stuWorkClothesDescript; 
    UINT nTriggerNum;                                
    EM_CONDITION_EXPR_TYPE emConditionExpr;          
    UINT nStatInterval;                              
    UINT nSensitivity;                               
    UINT nAlarmTime;                                 
    UINT nAlarmRepeatTime;                           
    BYTE byReserved[1012];                           
} NET_WORKSTAT_DESCRIPT;
typedef struct tagNET_WORKSTATDETECTION_RULE_INFO
{
    DWORD dwSize;                                  
    UINT nStatDescriptNum;                         
    NET_WORKSTAT_DESCRIPT stuWorkStatDescript[64]; 
    UINT nDetectRegionPoint;                       
    POINTCOORDINATE stuDetectRegion[20];           
    UINT nDetectTyeNum;                            
    EM_WORKSTATDETECTION_TYPE emDetectType[32];    
} NET_WORKSTATDETECTION_RULE_INFO;
typedef enum tagEM_OBJECT_FILTER_TYPE
{
    EM_OBJECT_FILTER_TYPE_UNKNOWN, 
    EM_OBJECT_FILTER_TYPE_HUMAN,   
    EM_OBJECT_FILTER_TYPE_VEHICLE, 
} EM_OBJECT_FILTER_TYPE;
typedef struct tagNET_OBJECT_FILTER_INFO
{
    UINT nObjectFilterTypeNum;                    
    EM_OBJECT_FILTER_TYPE emObjectFilterType[16]; 
    BYTE byReserved[1024];                        
} NET_OBJECT_FILTER_INFO;
typedef struct tagNET_CROSSLINE_RULE_INFO
{
    DWORD dwSize;                           
    int nDirection;                         
    int nDetectLinePoint;                   
    POINTCOORDINATE stuDetectLine[20];      
    int nPtzPresetId;                       
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    int nTriggerPosition;                   
    BYTE bTriggerPosition[8];               
    int nTrackDuration;                     
    UINT nVehicleSubTypeNum;                
    EM_CATEGORY_TYPE emVehicleSubType[128]; 
    BOOL bObjectFilter;                     
    NET_OBJECT_FILTER_INFO stuObjectFilter; 
    int nSensitivity;                       
    char byReserved[4];                     
} NET_CROSSLINE_RULE_INFO;
typedef struct tagNET_CROSSREGION_RULE_INFO
{
    DWORD dwSize;                           
    int nDirection;                         
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    int nActionType;                        
    BYTE bActionType[4];                    
    int nMinTargets;                        
    int nMaxTargets;                        
    int nMinDuration;                       
    int nReportInterval;                    
    int nTrackDuration;                     
    UINT nVehicleSubTypeNum;                
    EM_CATEGORY_TYPE emVehicleSubType[128]; 
    BOOL bObjectFilter;                     
    NET_OBJECT_FILTER_INFO stuObjectFilter; 
    int nSensitivity;                       
    char byReserved[4];                     
} NET_CROSSREGION_RULE_INFO;
typedef enum tagEM_FEATURE_ABSTRACT_TYPE
{
    EM_FEATURE_ABSTRACT_UNKNOWN = -1,      
    EM_FEATURE_ABSTRACT_FACE,              
    EM_FEATURE_ABSTRACT_HUMAN_TRAIT,       
    EM_FEATURE_ABSTRACT_VEHICLE,           
    EM_FEATURE_ABSTRACT_NON_MOTOR_VEHICLE, 
} EM_FEATURE_ABSTRACT_TYPE;
typedef struct tagNET_FEATURE_ABSTRACT_RULE_INFO
{
    DWORD dwSize;                            
    int nFeature;                            
    char szFeatureVersions[10][32];          
    EM_FEATURE_ABSTRACT_TYPE emAbstractType; 
} NET_FEATURE_ABSTRACT_RULE_INFO;
typedef struct tagNET_ELECTRIC_GLOVE_FEATURE
{
    BOOL bInsulate;        
    BYTE byReserved[1028]; 
} NET_ELECTRIC_GLOVE_FEATURE;
typedef struct tagNET_ELECTRIC_GLOVE_DETECT_CONDITION
{
    BOOL bExist;                                
    BOOL bGloveFeature;                         
    NET_ELECTRIC_GLOVE_FEATURE stuGloveFeature; 
    BYTE byReserved[512];                       
} NET_ELECTRIC_GLOVE_DETECT_CONDITION;
typedef struct tagNET_ELECTRIC_GLOVE_DETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nDetectConditionNum;                                        
    NET_ELECTRIC_GLOVE_DETECT_CONDITION stuGloveDetectCondition[32]; 
} NET_ELECTRIC_GLOVE_DETECT_RULE_INFO;
typedef struct tagNET_ELECTRIC_LADDER_FEATURE
{
    BOOL bInsulate;        
    BYTE byReserved[1028]; 
} NET_ELECTRIC_LADDER_FEATURE;
typedef struct tagNET_ELECTRIC_LADDER_DETECT_CONDITION
{
    BOOL bExist;                                  
    BOOL bLadderFeature;                          
    NET_ELECTRIC_LADDER_FEATURE stuLadderFeature; 
    BYTE byReserved[512];                         
} NET_ELECTRIC_LADDER_DETECT_CONDITION;
typedef struct tagNET_ELECTRIC_LADDER_DETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nDetectConditionNum;                                          
    NET_ELECTRIC_LADDER_DETECT_CONDITION stuLadderDetectCondition[32]; 
} NET_ELECTRIC_LADDER_DETECT_RULE_INFO;
typedef enum tagEM_COLOR_OPERATE_TYPE
{
    EM_COLOR_OPERATE_TYPE_UNKNOWN = -1, 
    EM_COLOR_OPERATE_TYPE_UNEQUAL,      
    EM_COLOR_OPERATE_TYPE_EQUAL,        
} EM_COLOR_OPERATE_TYPE;
typedef struct tagNET_COLOR_FEATRUE
{
    EM_COLOR_OPERATE_TYPE emColorOperate; 
    EM_UNIFIED_COLOR_TYPE emColor;        
    BYTE byReserved[128];                 
} NET_COLOR_FEATRUE;
typedef struct tagNET_ELECTRIC_CURTAIN_FEATURE
{
    NET_COLOR_FEATRUE stuColorFeature; 
    BYTE byReserved[1024];             
} NET_ELECTRIC_CURTAIN_FEATURE;
typedef struct tagNET_ELECTRIC_CURTAIN_DETECT_CONDITION
{
    BOOL bExist;                                    
    BOOL bCurtainFeature;                           
    NET_ELECTRIC_CURTAIN_FEATURE stuCurtainFeature; 
    BYTE byReserved[512];                           
} NET_ELECTRIC_CURTAIN_DETECT_CONDITION;
typedef struct tagNET_ELECTRIC_CURTAIN_DETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nDetectConditionNum;                                            
    NET_ELECTRIC_CURTAIN_DETECT_CONDITION stuCurtainDetectCondition[32]; 
} NET_ELECTRIC_CURTAIN_DETECT_RULE_INFO;
typedef struct tagNET_ELECTRIC_FENCE_FEATURE
{
    EM_ELECTRIC_FENCE_TYPE emFenceType; 
    BYTE byReserved[1028];              
} NET_ELECTRIC_FENCE_FEATURE;
typedef struct tagNET_ELECTRIC_FENCE_DETECT_CONDITION
{
    BOOL bExist;                                
    BOOL bFenceFeature;                         
    NET_ELECTRIC_FENCE_FEATURE stuFenceFeature; 
    BYTE byReserved[512];                       
} NET_ELECTRIC_FENCE_DETECT_CONDITION;
typedef struct tagNET_ELECTRIC_FENCE_DETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nDetectConditionNum;                                        
    NET_ELECTRIC_FENCE_DETECT_CONDITION stuFenceDetectCondition[32]; 
} NET_ELECTRIC_FENCE_DETECT_RULE_INFO;
typedef struct tagNET_ELECTRIC_SIGNBOARD_FEATURE
{
    EM_ELECTRIC_SIGNBOARD_TYPE emSignboardType; 
    BYTE byReserved[1028];                      
} NET_ELECTRIC_SIGNBOARD_FEATURE;
typedef struct tagNET_ELECTRIC_SIGNBOARD_DETECT_CONDITION
{
    BOOL bExist;                                        
    BOOL bSignboardFeature;                             
    NET_ELECTRIC_SIGNBOARD_FEATURE stuSignboardFeature; 
    BYTE byReserved[512];                               
} NET_ELECTRIC_SIGNBOARD_DETECT_CONDITION;
typedef struct tagNET_ELECTRIC_SIGNBOARD_DETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nDetectConditionNum;                                          
    NET_ELECTRIC_SIGNBOARD_DETECT_CONDITION stuSignboardCondition[32]; 
} NET_ELECTRIC_SIGNBOARD_DETECT_RULE_INFO;
typedef struct tagNET_ELECTRIC_BELT_FEATURE
{
    EM_BELT_WARE_TYPE emBeltWareType; 
    BYTE byReserved[1028];            
} NET_ELECTRIC_BELT_FEATURE;
typedef struct tagNET_ELECTRIC_BELT_DETECT_CONDITION
{
    BOOL bExist;                              
    BOOL bBeltFeature;                        
    NET_ELECTRIC_BELT_FEATURE stuBeltFeature; 
    BYTE byReserved[512];                     
} NET_ELECTRIC_BELT_DETECT_CONDITION;
typedef struct tagNET_ELECTRIC_BELT_DETECT_RULE_INFO
{
    DWORD dwSize;                           
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    BOOL bSizeFileter;                      
    UINT nDetectConditionNum;                                
    NET_ELECTRIC_BELT_DETECT_CONDITION stuBeltCondition[32]; 
} NET_ELECTRIC_BELT_DETECT_RULE_INFO;
typedef struct tagNET_BANNER_DETECTION_RULE_INFO
{
    DWORD dwSize;                        
    int nDetectRegionNum;                
    POINTCOORDINATE stuDetectRegion[20]; 
    int nMinDuration;                    
    int nReportInterval;                 
    int nSensitivity;                    
    int nBannerPercent;                  
    BYTE bReserved[520];                 
} NET_BANNER_DETECTION_RULE_INFO;
typedef enum tagEM_CFG_CHEF_CLOTHES_COLORS
{
    EM_CFG_CHEF_CLOTHES_COLORS_UNKNOWN, 
    EM_CFG_CHEF_CLOTHES_COLORS_BLACK,   
    EM_CFG_CHEF_CLOTHES_COLORS_WHITE,   
    EM_CFG_CHEF_CLOTHES_COLORS_RED,     
} EM_CFG_CHEF_CLOTHES_COLORS;
typedef struct tagNET_SMART_KITCHEN_CLOTHES_DETECTION_RULE_INFO
{
    DWORD dwSize;                                      
    BOOL bMaskEnable;                                  
    BOOL bChefHatEnable;                               
    BOOL bChefClothesEnable;                           
    int nChefClothesColorNum;                          
    EM_CFG_CHEF_CLOTHES_COLORS emChefClothesColors[8]; 
    int nReportInterval;                               
    BYTE byReserved[4096];                             
} NET_SMART_KITCHEN_CLOTHES_DETECTION_RULE_INFO;
typedef struct tagNET_CALIBRATE_LINE_INFO
{
    NET_POINT stuStartPoint; 
    NET_POINT stuEndPoint;   
} NET_CALIBRATE_LINE_INFO;
typedef struct tagNET_WATER_STAGE_MONITOR_RULE_INFO
{
    int nDetectRegionPoint;              
    POINTCOORDINATE stuDetectRegion[20]; 
    DWORD dwSceneMask;                        
    NET_CALIBRATE_LINE_INFO stuCalibrateLine; 
    BYTE byReserved[4096];                    
} NET_WATER_STAGE_MONITOR_RULE_INFO;
typedef struct tagNET_FLOATINGOBJECT_DETECTION_RULE_INFO
{
    int nDetectRegionPoint;              
    POINTCOORDINATE stuDetectRegion[20]; 
    float fAlarmThreshold; 
    UINT nAlarmInterval;   
    BOOL bDataUpload;      
    UINT nUpdateInterval;  
    BYTE byReserved[4096]; 
} NET_FLOATINGOBJECT_DETECTION_RULE_INFO;
typedef struct tagNET_RIOTERDETECTION_RULE_INFO
{
    int nDetectRegionPoint;              
    POINTCOORDINATE stuDetectRegion[20]; 
    int nModeNum;                        
    BYTE nModeList[64];                  
    POINTCOORDINATE stuMinDetectRect[2]; 
    int nRioterThreshold;                
    int nMinDuration;                    
    int nReportInterval;                 
    int nSensitivity;                    
    int nTrackDuration;                  
    BYTE byReserved[4096];               
} NET_RIOTERDETECTION_RULE_INFO;
typedef struct tagNET_LEFTDETECTION_RULE_INFO
{
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    int nTriggerPosition;                   
    BYTE bTriggerPosition[8];               
    int nMinDuration;                       
    int nTrackDuration;                     
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    UINT nSensitivity;                      
    BYTE byReserved[4092];                  
} NET_LEFTDETECTION_RULE_INFO, NET_PARKINGDETECTION_RULE_INFO;
typedef enum tagEM_RULE_DETECT_OBJECT_TYPE
{
    EM_RULE_DETECT_OBJECT_TYPE_UNKNOWN,         
    EM_RULE_DETECT_OBJECT_TYPE_HANGING_PACKAGE, 
} EM_RULE_DETECT_OBJECT_TYPE;
typedef struct tagNET_WANDERDETECTION_RULE_INFO
{
    int nDetectRegionPoint;                    
    POINTCOORDINATE stuDetectRegion[20];       
    int nTriggerPosition;                      
    BYTE bTriggerPosition[8];                  
    int nTriggerTargetsNumber;                 
    int nMinDuration;                          
    int nReportInterval;                       
    int nTrackDuration;                        
    BOOL bSizeFileter;                         
    NET_CFG_SIZEFILTER_INFO stuSizeFileter;    
    char szRuleType[32];                       
    EM_RULE_DETECT_OBJECT_TYPE emDetectObject; 
    UINT nSensitivity;                         
    BYTE byReserved[4056];                     
} NET_WANDERDETECTION_RULE_INFO;
typedef struct tagNET_VIDEOABNORMALDETECTION_RULE_INFO
{
    int nMinDuration; 
    int nSensitivity; 
    int nDetectType;    
    int nReserved;      
    int nThreshold[32]; 
    BYTE bDetectType[32]; 
    BYTE byReserved[4096]; 
} NET_VIDEOABNORMALDETECTION_RULE_INFO;
typedef struct tagNET_FACEATTRIBUTE_RULE_INFO
{
    int nDetectRegionPoint;                        
    POINTCOORDINATE stuDetectRegion[20];           
    int nMinDuration;                              
    int nTriggerTargets;                           
    int nSensitivity;                              
    int nReportInterval;                           
    BOOL bSizeFileter;                             
    NET_CFG_SIZEFILTER_INFO stuSizeFileter;        
    int nFaceFeatureNum;                           
    NET_EM_FACEFEATURE_TYPE emFaceFeatureType[32]; 
    BYTE byReserved[4096];                         
} NET_FACEATTRIBUTE_RULE_INFO;
typedef enum tagEM_MOVEDETECTION_TYPE
{
    EM_MOVEDETECTION_UNKNOWN,         
    EM_MOVEDETECTION_FASTMOVE,        
    EM_MOVEDETECTION_ABRUPT_SPEEDUP,  
    EM_MOVEDETECTION_ABRUPT_SLOWDOWN, 
} EM_MOVEDETECTION_TYPE;
typedef struct tagNET_MOVEDETECTION_RULE_INFO
{
    int nDetectRegionPoint;                 
    POINTCOORDINATE stuDetectRegion[20];    
    int nTriggerPosition;                   
    BYTE bTriggerPosition[8];               
    int nTriggerSpeed;                      
    int nSensitivity;                       
    int nMinDuration;                       
    int nTrackDuration;                     
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    int nDetectNum;                         
    EM_MOVEDETECTION_TYPE emDetectType[8];  
    BYTE byReserved[4096];                  
} NET_MOVEDETECTION_RULE_INFO;
typedef struct tagNET_FACECOMPARE_INFO
{
    UINT nRemoveRepeatInterval;                
    UINT nStayInterval;                        
    UINT nWanderInterval;                      
    int nLinkGroupNum;                         
    NET_CFG_LINKGROUP_INFO stuLinkGroup[20];   
    NET_CFG_STRANGERMODE_INFO stuStrangerMode; 
    BYTE byReserved[4096];                     
} NET_FACECOMPARE_INFO;
typedef enum tagEM_CONVEYER_BELT_DETECT_TYPE
{
    EM_CONVEYER_BELT_DETECT_UNKNOWN,   
    EM_CONVEYER_BELT_DETECT_FULL_LOAD, 
    EM_CONVEYER_BELT_DETECT_NON_LOAD,  
    EM_CONVEYER_BELT_DETECT_RUN_OFF,   
    EM_CONVEYER_BELT_DETECT_BLOCK,     
    EM_CONVEYER_BELT_DETECT_BULK,      
    EM_CONVEYER_BELT_DETECT_COALRATIO, 
    EM_CONVEYER_BELT_DETECT_ARTICLE,   
    EM_CONVEYER_BELT_DETECT_STHTONTH,  
    EM_CONVEYER_BELT_DETECT_NTHTOSTH,  
} EM_CONVEYER_BELT_DETECT_TYPE;
typedef enum tagEM_NET_ALARM_OUT_MODE
{
    EM_NET_ALARM_OUT_MODE_UNKNOWN = -1, 
    EM_NET_ALARM_OUT_MODE_0,            
    EM_NET_ALARM_OUT_MODE_1,            
    EM_NET_ALARM_OUT_MODE_2,            
} EM_NET_ALARM_OUT_MODE;
typedef struct tagNET_COAL_RATIO_LEVEL
{
    float fCoalLevelMin;                  
    float fCoalLevelMax;                  
    EM_NET_ALARM_OUT_MODE emAlarmOutMode; 
} NET_COAL_RATIO_LEVEL;
typedef struct tagNET_CONVEYER_BELT_DETECT_RULE_INFO
{
    int nDetectRegionPoint;                    
    POINTCOORDINATE stuDetectRegion[20];       
    EM_CONVEYER_BELT_DETECT_TYPE emDetectType; 
    UINT nMinDuration;                         
    UINT nReportInterval;                      
    UINT nSensitivity;                         
    POINTCOORDINATE stuComparetLine[2];        
    UINT nSizeFilterThreshold;                 
    UINT nWarningThreshold;                    
    UINT nDowntimeThreshold;                   
    NET_COAL_RATIO_LEVEL stuCoalRatioLevel[3]; 
    int nCoalRatioLevelNums;                   
    UINT nClogThreshold;                       
    UINT nIsMoveAlarm;                         
    UINT nRunOffFlag;                          
    EM_ARTICLE_TYPE emArticleType;             
    UINT nConveyorBeltWidth;                   
    BYTE byReserved[4036];                     
} NET_CONVEYER_BELT_DETECT_RULE_INFO;
typedef enum tagEM_NUMBERSTAT_TYPE
{
    EM_NUMSTAT_TYPE_REGION,   
    EM_NUMSTAT_TYPE_ENTRANCE, 
    EM_NUMSTAT_TYPE_OTHER,    
} EM_NUMBERSTAT_TYPE;
typedef struct tagNET_NUMBERSTAT_RULE_INFO
{
    int nUpperLimit;                     
    int nPeriod;                         
    int nDetectRegionPoint;              
    POINTCOORDINATE stuDetectRegion[20]; 
    int nPtzPresetId;                    
    EM_NUMBERSTAT_TYPE emType;           
    POINTCOORDINATE stDirection[2];      
    int nEnterThreshold;                 
    int nExitThreshold;                  
    int nInsideThreshold;                
    UINT nAreaID;                        
    int nMaxDetectLineNum;               
    POINTCOORDINATE stuDetectLine[20];   
    UINT nStayMinDuration;               
    BYTE byReserved[4092];               
} NET_NUMBERSTAT_RULE_INFO;
typedef struct tagNET_STEREO_FIGHTDETECTION_RULE_INFO
{
    int nDetectRegionPoint;              
    POINTCOORDINATE stuDetectRegion[20]; 
    int nSensitivity;                    
    int nMaxHeight;                      
    int nMinHeight;                      
    EM_STEREO_ACTION_TYPE emActionType;  
    BYTE bReserved[508];                 
} NET_STEREO_FIGHTDETECTION_RULE_INFO;
typedef enum tagEM_SMOKEDETECTION_SCENE_TYPE
{
    EM_SMOKEDETECTION_SCENE_UNKNOWN, 
    EM_SMOKEDETECTION_SCENE_INDOOR,  
    EM_SMOKEDETECTION_SCENE_OUTDOOR, 
    EM_SMOKEDETECTION_SCENE_TUNNEL,  
    EM_SMOKEDETECTION_SCENE_FOREST,  
} EM_SMOKEDETECTION_SCENE_TYPE;
typedef struct tagNET_SMOKEDETECTION_RULE_INFO
{
    UINT nMinDuration;                        
    UINT nDetectRegionPoint;                  
    POINTCOORDINATE stuDetectRegion[20];      
    UINT nSensitivity;                        
    UINT nRepeatAlarmTime;                    
    EM_SMOKEDETECTION_SCENE_TYPE emSceneType; 
    BYTE bReserved[2044];                     
} NET_SMOKEDETECTION_RULE_INFO;
typedef struct tagNET_FIREDETECTION_RULE_INFO
{
    UINT nMinDuration;                        
    UINT nDetectRegionPoint;                  
    POINTCOORDINATE stuDetectRegion[20];      
    UINT nSensitivity;                        
    UINT nRepeatAlarmTime;                    
    EM_SMOKEDETECTION_SCENE_TYPE emSceneType; 
    BYTE bReserved[2044];                     
} NET_FIREDETECTION_RULE_INFO;
typedef struct tagNET_PHONECALL_DETECT_RULE_INFO
{
    UINT nMinDuration;                   
    UINT nDetectRegionPoint;             
    POINTCOORDINATE stuDetectRegion[20]; 
    UINT nSensitivity;                   
    UINT nReportInterval;                
    BYTE bReserved[2048];                
} NET_PHONECALL_DETECT_RULE_INFO;
typedef struct tagNET_SMOKING_DETECT_RULE_INFO
{
    UINT nMinDuration;                   
    UINT nDetectRegionPoint;             
    POINTCOORDINATE stuDetectRegion[20]; 
    UINT nSensitivity;                   
    UINT nReportInterval;                
    BYTE bReserved[2048];                
} NET_SMOKING_DETECT_RULE_INFO;
typedef struct tagNET_STEREO_STEREOFALLDETECTION_RULE_INFO
{
    UINT nMinDuration;                   
    UINT nDetectRegionPoint;             
    POINTCOORDINATE stuDetectRegion[20]; 
    UINT nSensitivity;                   
    UINT nReportInterval;                
    BYTE bReserved[2048];                
} NET_STEREO_STEREOFALLDETECTION_RULE_INFO;
typedef struct tagNET_WATER_LEVEL_DETECTION_RULE_INFO
{
    UINT nDetectRegionPoint;             
    POINTCOORDINATE stuDetectRegion[20]; 
    float fHighLevel;                    
    float fLowLevel;                     
    BYTE bReserved[2044];                
} NET_WATER_LEVEL_DETECTION_RULE_INFO;
typedef struct tagNET_CLIMBDETECTION_RULE_INFO
{
    UINT nDetectLinePoint;             
    POINTCOORDINATE stuDetectLine[20]; 
    BYTE bReserved[2044];              
} NET_CLIMBDETECTION_RULE_INFO;
typedef enum tagEM_ARTICLEDETECT_ACTION
{
    EM_ARTICLEDETECT_ACTION_UNKNOWN,   
    EM_ARTICLEDETECT_ACTION_LEFT,      
    EM_ARTICLEDETECT_ACTION_TAKENAWAY, 
} EM_ARTICLEDETECT_ACTION;
typedef struct tagNET_ARTICLE_DETECTION_RULE_INFO
{
    UINT nMinDuration;                         
    UINT nDetectRegionPoint;                   
    POINTCOORDINATE stuDetectRegion[20];       
    UINT nSensitivity;                         
    UINT nDetectActionNum;                     
    EM_ARTICLEDETECT_ACTION emDetectAction[8]; 
    BYTE bReserved[2008];                      
} NET_ARTICLE_DETECTION_RULE_INFO;
typedef struct tagNET_IVS_MAN_NUM_DETECTION_RULE_INFO
{
    UINT nThreshold;                     
    UINT nDetectRegionPoint;             
    POINTCOORDINATE stuDetectRegion[20]; 
    UINT nMinDuration;                   
    UINT nReportInterval;                
    EM_EVENT_DETECT_TYPE emDetectType;   
    int nSensitivity;                    
    int nMaxHeight;                      
    int nMinHeight;                      
    UINT nAreaID;                        
    UINT nPlanId;                        
    BOOL bStayDetectEnable;              
    int nStayMinDuration;                
    BOOL bManNumAlarmEnable;             
    UINT nPersonNum[2];                  
    BYTE bReserved[2004];                
} NET_IVS_MAN_NUM_DETECTION_RULE_INFO;
typedef enum tagEM_DIALDETECT_TYPE
{
    EM_DIALDETECT_TYPE_UNKNOWN,         
    EM_DIALDETECT_TYPE_PLATEN,          
    EM_DIALDETECT_TYPE_KNIFE,           
    EM_DIALDETECT_TYPE_POINTERMETER,    
    EM_DIALDETECT_TYPE_OILMETER,        
    EM_DIALDETECT_TYPE_LED,             
    EM_DIALDETECT_TYPE_LCD,             
    EM_DIALDETECT_TYPE_LIGHT,           
    EM_DIALDETECT_TYPE_SWITCH,          
    EM_DIALDETECT_TYPE_PESPIRATOR,      
    EM_DIALDETECT_TYPE_CHARLNDICTOR,    
    EM_DIALDETECT_TYPE_POINTERLNDICTOR, 
    EM_DIALDETECT_TYPE_OILLEVEL,        
    EM_DIALDETECT_TYPE_DIALSWTICH,      
} EM_DIALDETECT_TYPE;
typedef struct tagNET_IVS_DIALRECOGNITION_RULE_INFO
{
    EM_DIALDETECT_TYPE emType;              
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    POINTCOORDINATE stuDetectRegion[20];    
    int nDetectRegionNum;                   
    int nKinfeOpenAngleThreshold;           
    int nKinfeClossAngleThreshold;          
    char bReserved[2044];                   
} NET_IVS_DIALRECOGNITION_RULE_INFO;
typedef struct tagNET_IVS_ELECTRICFAULT_DETECT_RULE_INFO
{
    BOOL bAirborneDetectEnable;             
    BOOL bNestDetectEnable;                 
    BOOL bDialDetectEnable;                 
    BOOL bLeakageDetectEnable;              
    BOOL bDoorDetectEnable;                 
    BOOL bRespiratorDetectEnable;           
    BOOL bSmokingDetectEnable;              
    BOOL bInsulatorDetectEnable;            
    BOOL bCoverPlateDetectEnable;           
    BOOL bPressingPlateDetectEnable;        
    BOOL bMetalCorrosionEnable;             
    BOOL bSizeFileter;                      
    NET_CFG_SIZEFILTER_INFO stuSizeFileter; 
    POINTCOORDINATE stuDetectRegion[20];    
    int nDetectRegionNum;                   
    char bReserved[2048];                   
} NET_IVS_ELECTRICFAULT_DETECT_RULE_INFO;
typedef struct tagNET_ANALYSE_RULE_INFO
{
    EM_SCENE_CLASS_TYPE emClassType;          
    DWORD dwRuleType;                         
    void* pReserved;                          
    UINT nObjectTypeNum;                      
    EM_ANALYSE_OBJECT_TYPE emObjectTypes[16]; 
    char szRuleName[128];                     
    BYTE byReserved[828];                     
} NET_ANALYSE_RULE_INFO;
typedef struct tagNET_ANALYSE_RULE
{
    NET_ANALYSE_RULE_INFO stuRuleInfos[MAX_ANALYSE_RULE_COUNT]; 
    UINT nRuleCount;                                            
    BYTE byReserved[1028];                                      
} NET_ANALYSE_RULE;
typedef enum tagEM_STREAM_PROTOCOL_TYPE
{
    EM_STREAM_PROTOCOL_UNKNOWN,    
    EM_STREAM_PROTOCOL_PRIVATE_V2, 
    EM_STREAM_PROTOCOL_PRIVATE_V3, 
    EM_STREAM_PROTOCOL_RTSP,       
    EM_STREAM_PROTOCOL_ONVIF,      
    EM_STREAM_PROTOCOL_GB28181,    
    EM_STREAM_PROTOCOL_HIKVISION,
    EM_STREAM_PROTOCOL_BSCP 
} EM_STREAM_PROTOCOL_TYPE;
typedef enum tagEM_ANALYSE_TASK_START_RULE
{
    EM_ANALYSE_TASK_START_NOW,   
    EM_ANALYSE_TASK_START_LATER, 
} EM_ANALYSE_TASK_START_RULE;
typedef enum tagEM_GLOBAL_LANES_LINE_TYPE
{
    EM_GLOBAL_LANES_LINE_TYPE_UNKNOWN,           
    EM_GLOBAL_LANES_LINE_TYPE_WHITESOLID,        
    EM_GLOBAL_LANES_LINE_TYPE_WHITEDOTTED,       
    EM_GLOBAL_LANES_LINE_TYPE_YELLOW,            
    EM_GLOBAL_LANES_LINE_TYPE_UPSOLIDDOWNDOTTED, 
    EM_GLOBAL_LANES_LINE_TYPE_UPDOTTEDDOWNSOLID, 
} EM_GLOBAL_LANES_LINE_TYPE;
typedef struct tagNET_ANALYSE_TASK_GLOBAL_LANES
{
    BOOL bEnable;                              
    int nNumber;                               
    DH_POINT stuLeftLinePoint[20];             
    int nLeftLinePointNum;                     
    EM_GLOBAL_LANES_LINE_TYPE emLeftLineType;  
    DH_POINT stuRightLinePoint[20];            
    int nRightLinePointNum;                    
    EM_GLOBAL_LANES_LINE_TYPE emRightLineType; 
    BYTE byReserved[1024];                     
} NET_ANALYSE_TASK_GLOBAL_LANES;
typedef struct tagNET_ANALYSE_TASK_GLOBAL_CALIBRATEAREA
{
    int nStaffs;                                                      
    NET_STAFF_INFO stuStaffs[32];                                     
    DH_POINT stuCalibratePloygonArea[MAX_CALIBRATE_PLOYGON_AREA_NUM]; 
    int nCalibratePloygonAreaNum;                                     
    BYTE byReserved[1024];                                            
} NET_ANALYSE_TASK_GLOBAL_CALIBRATEAREA;
typedef struct tagNET_ANALYSE_TASK_GLOBAL
{
    int nLanesNum;                                              
    NET_ANALYSE_TASK_GLOBAL_LANES stuLanes[8];                  
    int nCalibrateArea;                                         
    NET_ANALYSE_TASK_GLOBAL_CALIBRATEAREA stuCalibrateArea[32]; 
    BYTE byReserved[1024];                                      
} NET_ANALYSE_TASK_GLOBAL;
typedef struct tagNET_ANALYSE_TASK_MODULE
{
    NET_CFG_SIZEFILTER_INFO stuSizeFileter;                    
    DH_POLY_POINTS stuExcludeRegion[DH_MAX_EXCLUDEREGION_NUM]; 
    int nExcludeRegionNum;                                     
    BYTE byReserved[1020];                                     
} NET_ANALYSE_TASK_MODULE;
typedef struct tagNET_REMOTE_REALTIME_STREAM_INFO
{
    DWORD dwSize;                                 
    EM_ANALYSE_TASK_START_RULE emStartRule;       
    NET_ANALYSE_RULE stuRuleInfo;                 
    EM_STREAM_PROTOCOL_TYPE emStreamProtocolType; 
    char szPath[DH_COMMON_STRING_256];            
    char szIp[DH_MAX_IPADDR_OR_DOMAIN_LEN];       
    WORD wPort;                                   
    BYTE byReserved[2];                           
    char szUser[DH_COMMON_STRING_64];             
    char szPwd[DH_COMMON_STRING_64];              
    int nChannelID;                               
    UINT nStreamType;                             
    char szTaskUserData[256];                     
    char szMQConfig[4096];                        
    int nIsRepeat;                                
    NET_ANALYSE_TASK_GLOBAL stuGlobal;            
    NET_ANALYSE_TASK_MODULE stuModule;            
    char szChannelId[32];                         
} NET_REMOTE_REALTIME_STREAM_INFO;
typedef struct tagNET_REMOTE_STREAM_INFO
{
    EM_STREAM_PROTOCOL_TYPE emStreamProtocolType; 
    BYTE byReserved1[4];                          
    char szPath[256];                             
    char szIp[64];                                
    WORD wPort;                                   
    char szUser[64];                              
    char szPwd[64];                               
    int nChannelID;                               
    UINT nStreamType;                             
    char byReserved[1024];                        
} NET_REMOTE_STREAM_INFO;
typedef struct tagNET_PUSH_PICFILE_INFO
{
    DWORD dwSize;                           
    EM_ANALYSE_TASK_START_RULE emStartRule; 
    NET_ANALYSE_RULE stuRuleInfo;           
    char szTaskUserData[256];               
    char szMQConfig[4096];                  
    int nIsRepeat;                          
    NET_ANALYSE_TASK_GLOBAL stuGlobal;      
    NET_ANALYSE_TASK_MODULE stuModule;      
} NET_PUSH_PICFILE_INFO;
typedef enum tagEM_REMOTE_FILE_PROTOCOL_TYPE
{
    EM_REMOTE_FILE_PROTOCOL_UNKNOWN,   
    EM_REMOTE_FILE_PROTOCOL_RTSP,      
    EM_REMOTE_FILE_PROTOCOL_RABBITMQ,  
    EM_REMOTE_FILE_PROTOCOL_HTTP,      
    EM_REMOTE_FILE_PROTOCOL_PRIVATE,   
    EM_REMOTE_FILE_PROTOCOL_ONVIF,     
    EM_REMOTE_FILE_PROTOCOL_GB28181,   
    EM_REMOTE_FILE_PROTOCOL_HIKVISION, 
    EM_REMOTE_FILE_PROTOCOL_BSCP,      
    EM_REMOTE_FILE_PROTOCOL_ACTIVEMQ,  
} EM_REMOTE_FILE_PROTOCOL_TYPE;
typedef struct tagNET_REMOTE_VIDEO_FILE_INFO
{
    DWORD dwSize;                                          
    EM_ANALYSE_TASK_START_RULE emStartRule;                
    NET_ANALYSE_RULE stuRuleInfo;                          
    EM_REMOTE_FILE_PROTOCOL_TYPE emRemoteFileProtocolType; 
    char szPath[DH_COMMON_STRING_256];                     
    char szIp[DH_MAX_IPADDR_OR_DOMAIN_LEN];                
    WORD wPort;                                            
    char szUser[DH_COMMON_STRING_64];                      
    char szPwd[DH_COMMON_STRING_64];                       
    char szFileID[128];                                    
    char szTaskUserData[256];                              
    char szMQConfig[4096];                                 
    int nIsRepeat;                                         
    UINT nVideoAnalysisProcess;                            
    NET_TIME stuStartTime;                                 
    NET_TIME stuEndTime;                                   
    int nChannelID;                                        
    UINT nStreamType;                                      
} NET_REMOTE_VIDEO_FILE_INFO;
typedef struct tagNET_REMOTE_PIC_FILE_INFO
{
    char szFileID[128];   
    char szPath[260];     
    BYTE byReserved[512]; 
} NET_REMOTE_PIC_FILE_INFO;
typedef struct tagNET_REMOTE_PICTURE_FILE_INFO
{
    DWORD dwSize;                                          
    EM_ANALYSE_TASK_START_RULE emStartRule;                
    NET_ANALYSE_RULE stuRuleInfo;                          
    EM_REMOTE_FILE_PROTOCOL_TYPE emRemoteFileProtocolType; 
    char szIp[DH_MAX_IPADDR_OR_DOMAIN_LEN];                
    WORD wPort;                                            
    char szUser[DH_COMMON_STRING_64];                      
    char szPwd[DH_COMMON_STRING_64];                       
    NET_REMOTE_PIC_FILE_INFO stuFileInfo[32];              
    char szTaskUserData[256];                              
    char szMQConfig[4096];                                 
    int nIsRepeat;                                         
} NET_REMOTE_PICTURE_FILE_INFO;
typedef struct tagNET_OFFLINE_VIDEO_FILE_INFO
{
    DWORD dwSize;                                          
    EM_ANALYSE_TASK_START_RULE emStartRule;                
    NET_ANALYSE_RULE stuRuleInfo;                          
    EM_REMOTE_FILE_PROTOCOL_TYPE emRemoteFileProtocolType; 
    char szPath[260];                                      
    char szFileID[128];                                    
    char szIp[DH_MAX_IPADDR_OR_DOMAIN_LEN];                
    WORD wPort;                                            
    char szUser[DH_COMMON_STRING_64];                      
    char szPwd[DH_COMMON_STRING_64];                       
    char szTaskUserData[256];                              
    char szMQConfig[4096];                                 
    int nIsRepeat;                                         
    UINT nVideoAnalysisProcess;                            
    TP_U64 nFileSize;                                      
    BOOL bIsReportPTS;                                     
} NET_OFFLINE_VIDEO_FILE_INFO;
typedef struct tagNET_PUSH_PICFILE_BYRULE_INFO
{
    DWORD dwSize;                           
    EM_ANALYSE_TASK_START_RULE emStartRule; 
    char szTaskUserData[256];               
} NET_PUSH_PICFILE_BYRULE_INFO;
typedef struct tagNET_LOCAL_STREAM_INFO
{
    DWORD dwSize;                           
    EM_ANALYSE_TASK_START_RULE emStartRule; 
    NET_ANALYSE_RULE stuRuleInfo;           
    int nChannelID;   
    UINT nStreamType; 
    char szTaskUserData[512];          
    int nIsRepeat;                     
    NET_ANALYSE_TASK_GLOBAL stuGlobal; 
    NET_ANALYSE_TASK_MODULE stuModule; 
} NET_LOCAL_STREAM_INFO;
typedef struct tagNET_OUT_ADD_ANALYSE_TASK
{
    DWORD dwSize;         
    UINT nTaskID;         
    UINT nVirtualChannel; 
    char szUrl[256];      
} NET_OUT_ADD_ANALYSE_TASK;
typedef struct tagNET_IN_MODIFY_ANALYSE_TASK
{
    DWORD dwSize;                         
    UINT nTaskID;                         
    BYTE byReserved1[4];                  
    EM_DATA_SOURCE_TYPE emDataSourceType; 
    void* pSourceData;                    
    BYTE byReserved[1024];                
} NET_IN_MODIFY_ANALYSE_TASK;
typedef struct tagNET_OUT_MODIFY_ANALYSE_TASK
{
    DWORD dwSize;         
    UINT nTaskID;         
    UINT nVirtualChannel; 
} NET_OUT_MODIFY_ANALYSE_TASK;
typedef struct tagNET_POLLING_INFO
{
    EM_DATA_SOURCE_TYPE emSourceType; 
    void* pSourceData;                
    char szUserData[64];              
    char szTaskUserData[64];          
    BYTE byReserved[192];             
} NET_POLLING_INFO;
typedef struct tagNET_IN_ADD_POLLING_ANALYSE_TASK
{
    DWORD dwSize;                
    int nIntervalTime;           
    int nLoopCount;              
    int nInfoCount;              
    NET_POLLING_INFO* pInfoList; 
} NET_IN_ADD_POLLING_ANALYSE_TASK;
typedef struct tagNET_OUT_ADD_POLLING_ANALYSE_TASK
{
    DWORD dwSize; 
    UINT nTaskID; 
} NET_OUT_ADD_POLLING_ANALYSE_TASK;
typedef struct tagNET_IN_UPDATE_POLLING_ANALYSE_TASK
{
    DWORD dwSize;                
    UINT nTaskID;                
    int nIntervalTime;           
    int nLoopCount;              
    int nInfoCount;              
    int nReserved;               
    NET_POLLING_INFO* pInfoList; 
} NET_IN_UPDATE_POLLING_ANALYSE_TASK;
typedef struct tagNET_OUT_UPDATE_POLLING_ANALYSE_TASK
{
    DWORD dwSize; 
} NET_OUT_UPDATE_POLLING_ANALYSE_TASK;
typedef struct tagNET_IN_START_ANALYSE_TASK
{
    DWORD dwSize; 
    UINT nTaskID; 
} NET_IN_START_ANALYSE_TASK;
typedef struct tagNET_OUT_START_ANALYSE_TASK
{
    DWORD dwSize; 
} NET_OUT_START_ANALYSE_TASK;
typedef struct tagNET_IN_REMOVE_ANALYSE_TASK
{
    DWORD dwSize; 
    UINT nTaskID; 
} NET_IN_REMOVE_ANALYSE_TASK;
typedef struct tagNET_OUT_REMOVE_ANALYSE_TASK
{
    DWORD dwSize; 
} NET_OUT_REMOVE_ANALYSE_TASK;
typedef enum tagEM_ANALYSE_STATE
{
    EM_ANALYSE_STATE_UNKNOWN,            
    EM_ANALYSE_STATE_IDLE,               
    EM_ANALYSE_STATE_ANALYSING,          
    EM_ANALYSE_STATE_ANALYSING_WAITPUSH, 
    EM_ANALYSE_STATE_FINISH,             
    EM_ANALYSE_STATE_ERROR,              
    EM_ANALYSE_STATE_REMOVED,            
    EM_ANALYSE_STATE_ROUNDFINISH,        
    EM_ANALYSE_STATE_STARTING,           
} EM_ANALYSE_STATE;
typedef enum tagEM_ANALYSE_TASK_ERROR
{
    EM_ANALYSE_TASK_ERROR_UNKNOWN = 1,                          
    EM_ANALYSE_TASK_ERROR_INSUFFICIENT_DECODING_CAPABILITY,     
    EM_ANALYSE_TASK_ERROR_INSUFFICIENT_INTELLIGENCE_CAPABILITY, 
    EM_ANALYSE_TASK_ERROR_BITSTREAM_FORMAT_NOT_SUPPORTED,       
    EM_ANALYSE_TASK_ERROR_ANALYZER_OFF_LINE,                    
    EM_ANALYSE_TASK_ERROR_ANALYZER_ON_LINE,                     
} EM_ANALYSE_TASK_ERROR;
typedef struct tagNET_ANALYSE_TASKS_INFO
{
    UINT nTaskID;                      
    EM_ANALYSE_STATE emAnalyseState;   
    EM_ANALYSE_TASK_ERROR emErrorCode; 
    BYTE byReserved1[4];               
    char szTaskUserData[256];          
    int nVideoAnalysisProcess;         
    char szUrl[256];                   
    EM_SCENE_CLASS_TYPE emClassType;   
    EM_DATA_SOURCE_TYPE emSourceType;  
    int nChipId;                       
    BYTE byReserved[428];              
} NET_ANALYSE_TASKS_INFO;
typedef struct tagNET_IN_FIND_ANALYSE_TASK
{
    DWORD dwSize; 
} NET_IN_FIND_ANALYSE_TASK;
typedef struct tagNET_OUT_FIND_ANALYSE_TASK
{
    DWORD dwSize;                                              
    UINT nTaskNum;                                             
    NET_ANALYSE_TASKS_INFO stuTaskInfos[MAX_ANALYSE_TASK_NUM]; 
} NET_OUT_FIND_ANALYSE_TASK;
typedef struct tagNET_PUSH_PICTURE_INFO
{
    char szFileID[DH_COMMON_STRING_128];    
    UINT nOffset;                           
    UINT nLength;                           
    NET_XRAY_CUSTOM_INFO stuXRayCustomInfo; 
    char szUrl[512];                        
    BYTE byReserved[256];                   
} NET_PUSH_PICTURE_INFO;
typedef struct tagNET_IN_PUSH_ANALYSE_PICTURE_FILE
{
    DWORD dwSize;                                                        
    UINT nTaskID;                                                        
    NET_PUSH_PICTURE_INFO stuPushPicInfos[MAX_ANALYSE_PICTURE_FILE_NUM]; 
    UINT nPicNum;                                                        
    UINT nBinBufLen;                                                     
    char* pBinBuf;                                                       
} NET_IN_PUSH_ANALYSE_PICTURE_FILE;
typedef struct tagNET_OUT_PUSH_ANALYSE_PICTURE_FILE
{
    DWORD dwSize; 
} NET_OUT_PUSH_ANALYSE_PICTURE_FILE;
typedef struct tagNET_PUSH_PICTURE_BYRULE_INFO
{
    char szFileID[128];                         
    UINT nOffset;                               
    UINT nLength;                               
    NET_ANALYSE_RULE stuRuleInfo;               
    char szUserDefineData[512];                 
    char szModelUrl[512];                       
    NET_REMOTE_STREAM_INFO stuRemoteStreamInfo; 
    UINT nDetectType;                           
    int nPicUrlNum;                             
    char szPicUrl[64][512];                     
    BYTE byReserved[256];                       
} NET_PUSH_PICTURE_BYRULE_INFO;
typedef struct tagNET_IN_PUSH_ANALYSE_PICTURE_FILE_BYRULE
{
    DWORD dwSize;                                         
    UINT nTaskID;                                         
    NET_PUSH_PICTURE_BYRULE_INFO* pstuPushPicByRuleInfos; 
    UINT nPicNum;                                         
    UINT nBinBufLen;                                      
    char* pBinBuf;                                        
} NET_IN_PUSH_ANALYSE_PICTURE_FILE_BYRULE;
typedef struct tagNET_OUT_PUSH_ANALYSE_PICTURE_FILE_BYRULE
{
    DWORD dwSize; 
} NET_OUT_PUSH_ANALYSE_PICTURE_FILE_BYRULE;
typedef struct tagNET_CB_ANALYSE_TASK_STATE_INFO
{
    NET_ANALYSE_TASKS_INFO stuTaskInfos[MAX_ANALYSE_TASK_NUM]; 
    UINT nTaskNum;                                             
    BYTE byReserved[1024];                                     
} NET_CB_ANALYSE_TASK_STATE_INFO;
typedef int(CALLBACK* fAnalyseTaskStateCallBack)(LLONG lAttachHandle, NET_CB_ANALYSE_TASK_STATE_INFO* pstAnalyseTaskStateInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_ANALYSE_TASK_STATE
{
    DWORD dwSize;                                 
    UINT nTaskIDs[MAX_ANALYSE_TASK_NUM];          
    UINT nTaskIdNum;                              
    fAnalyseTaskStateCallBack cbAnalyseTaskState; 
    LDWORD dwUser;                                
} NET_IN_ATTACH_ANALYSE_TASK_STATE;
typedef struct tagNET_ANALYSE_RESULT_FILTER
{
    DWORD dwAlarmTypes[MAX_ANALYSE_FILTER_EVENT_NUM]; 
    UINT nEventNum;                                   
    int nImageDataFlag;                               
    BYTE byReserved1[4];                              
    int nImageTypeNum;                                
    EM_FILTER_IMAGE_TYPE* pImageType;                 
    BYTE byReserved[1004];                            
} NET_ANALYSE_RESULT_FILTER;
typedef enum tagEM_FILE_ANALYSE_STATE
{
    EM_FILE_ANALYSE_UNKNOWN = -1, 
    EM_FILE_ANALYSE_EXECUTING,    
    EM_FILE_ANALYSE_FINISH,       
    EM_FILE_ANALYSE_FAILED,       
} EM_FILE_ANALYSE_STATE;
typedef struct tagNET_TASK_ACTIVE_MQ_INFO
{
    char szIp[64];              
    int nPort;                  
    int nChannelSeq;            
    char szDeviceCode[256];     
    char szImgUrl[512];         
    char szSceneImgUrl[512];    
    NET_TIME_EX stuBeginTime;   
    NET_TIME_EX stuEndTime;     
    NET_TIME_EX stuCaptureTime; 
    char szTaskCode[256];       
    char szPlateImgUrl[512];    
    char szHumanFaceUrl[512];   
    BYTE byReserved[2048];      
} NET_TASK_ACTIVE_MQ_INFO;
typedef struct tagNET_TASK_CUSTOM_DATA
{
    char szClientIP[128];                      
    char szDeviceID[128];                      
    NET_TASK_ACTIVE_MQ_INFO* pstuActiveMQInfo; 
    BYTE byReserved[256 - POINTERSIZE];        
} NET_TASK_CUSTOM_DATA;
typedef struct tagNET_ANALYSE_TASK_RESULT
{
    UINT nTaskID;                                                                    
    char szFileID[DH_COMMON_STRING_128];                                             
    EM_FILE_ANALYSE_STATE emFileAnalyseState;                                        
    char szFileAnalyseMsg[DH_COMMON_STRING_256];                                     
    NET_SECONDARY_ANALYSE_EVENT_INFO stuEventInfos[MAX_SECONDARY_ANALYSE_EVENT_NUM]; 
    int nEventCount;                                                                 
    NET_TASK_CUSTOM_DATA stuCustomData;                                              
    char szUserData[64];                                                             
    char szTaskUserData[256];                                                        
    NET_SECONDARY_ANALYSE_EVENT_INFO* pstuEventInfosEx;                              
    int nRetEventInfoExNum;                                                          
    char szUserDefineData[512];                                                      
    UINT nFailedFileSize;                                                            
    BYTE byReserved[180];                                                            
} NET_ANALYSE_TASK_RESULT;
typedef struct tagNET_CB_ANALYSE_TASK_RESULT_INFO
{
    NET_ANALYSE_TASK_RESULT stuTaskResultInfos[MAX_ANALYSE_TASK_NUM]; 
    UINT nTaskResultNum;                                              
    BYTE byReserved[1028];                                            
} NET_CB_ANALYSE_TASK_RESULT_INFO;
typedef int(CALLBACK* fAnalyseTaskResultCallBack)(LLONG lAttachHandle, NET_CB_ANALYSE_TASK_RESULT_INFO* pstAnalyseTaskResult, const char* pBuf, const DWORD dwBufSize, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_ANALYSE_RESULT
{
    DWORD dwSize;                                   
    UINT nTaskIDs[MAX_ANALYSE_TASK_NUM];            
    UINT nTaskIdNum;                                
    NET_ANALYSE_RESULT_FILTER stuFilter;            
    BYTE byReserved[4];                             
    fAnalyseTaskResultCallBack cbAnalyseTaskResult; 
    LDWORD dwUser;                                  
} NET_IN_ATTACH_ANALYSE_RESULT;
typedef struct tagNET_IN_SET_ANALYSE_TASK_CUSTOM_DATA
{
    DWORD dwSize;                           
    UINT nTaskID;                           
    NET_TASK_CUSTOM_DATA stuTaskCustomData; 
} NET_IN_SET_ANALYSE_TASK_CUSTOM_DATA;
typedef struct tagNET_OUT_SET_ANALYSE_TASK_CUSTOM_DATA
{
    DWORD dwSize; 
} NET_OUT_SET_ANALYSE_TASK_CUSTOM_DATA;
typedef struct tagNET_IN_PUT_ANALYSE_DISPOSITION
{
    DWORD dwSize;            
    BOOL bAction;            
    UINT nGroupIDNum;        
    char szGroupID[128][64]; 
    UINT nSimilaryNum;       
    BYTE bySimilary[128];    
} NET_IN_PUT_ANALYSE_DISPOSITION;
typedef struct tagNET_OUT_PUT_ANALYSE_DISPOSITION
{
    DWORD dwSize; 
} NET_OUT_PUT_ANALYSE_DISPOSITION;
typedef enum tagEM_ALGORITHM_VENDOR
{
    EM_ALGORITHM_VENDOR_UNKNOWN,   
    EM_ALGORITHM_VENDOR_DAHUA,     
    EM_ALGORITHM_VENDOR_SHANGTANG, 
    EM_ALGORITHM_VENDOR_HUAFU,     
    EM_ALGORITHM_VENDOR_SHENMO,    
} EM_ALGORITHM_VENDOR;
typedef struct tagNET_ALGORITHM_INFO
{
    EM_SCENE_CLASS_TYPE emClassType;                 
    char szVersion[DH_COMMON_STRING_32];             
    EM_ALGORITHM_VENDOR emAlgorithmVendor;           
    char szAlgorithmLibVersion[DH_COMMON_STRING_32]; 
    BYTE byReserved[992];                            
} NET_ALGORITHM_INFO;
typedef struct tagNET_TOTAL_CAP
{
    EM_SCENE_CLASS_TYPE emClassType;           
    DWORD dwRuleTypes[MAX_ANALYSE_RULE_COUNT]; 
    UINT nRuleNum;                             
    UINT nMaxStreamNum;                        
    UINT nNeedResources;                       
    BYTE byReserved[1020];                     
} NET_TOTAL_CAP;
typedef struct tagNET_ANALYSE_CAPS_ALGORITHM
{
    DWORD dwSize;                                                    
    NET_ALGORITHM_INFO stuAlgorithmInfos[MAX_ANALYSE_ALGORITHM_NUM]; 
    UINT nAlgorithmNum;                                              
} NET_ANALYSE_CAPS_ALGORITHM;
typedef struct tagNET_ANALYSE_CAPS_TOTAL
{
    DWORD dwSize;                                          
    NET_TOTAL_CAP stuTotalCaps[MAX_ANALYSE_TOTALCAPS_NUM]; 
    UINT nTotalCapsNum;                                    
    UINT nTotalDecodeCaps;                                 
    UINT nTotalComputingCaps;                              
    UINT nSingleTaskComputingCaps;                         
} NET_ANALYSE_CAPS_TOTAL;
typedef struct tagNET_ALGORITHM_SDK_INFO
{
    UINT nApiVersion;      
    UINT nCompiler;        
    char szSdkName[128];   
    char szSdkVersion[64]; 
    BYTE byReserved[1024]; 
} NET_ALGORITHM_SDK_INFO;
typedef enum tagEM_STORAGE_PACKET_TYPE
{
    EM_STORAGE_PACKET_UNKNOWN,   
    EM_STORAGE_PACKET_PARTITION, 
    EM_STORAGE_PACKET_FILE,      
    EM_STORAGE_PACKET_DHOP,      
} EM_STORAGE_PACKET_TYPE;
typedef enum tagEM_ALGORITHM_PARTITION_TYPE
{
    EM_ALGORITHM_PARTITION_UNKNOWN, 
    EM_ALGORITHM_PARTITION_EXT4,    
    EM_ALGORITHM_PARTITION_SUQSHFS, 
    EM_ALGORITHM_PARTITION_UBIFS,   
} EM_ALGORITHM_PARTITION_TYPE;
typedef struct tagNET_ALGORITHM_DEV_STORAGE_INFO
{
    EM_STORAGE_PACKET_TYPE emPakcetType; 
    UINT nAddr;                                  
    UINT nSize;                                  
    EM_ALGORITHM_PARTITION_TYPE emPartitionType; 
    UINT nBlock;                                 
    BYTE byReserved[1020]; 
} NET_ALGORITHM_DEV_STORAGE_INFO;
typedef struct tagNET_ALGORITHM_SVN_INFO
{
    char szAddr[512];      
    UINT nRevision;        
    BYTE byReserved[1020]; 
} NET_ALGORITHM_SVN_INFO;
typedef struct tagNET_ALGORITHM_BUILD_INFO
{
    NET_ALGORITHM_SVN_INFO stuSvnInfo; 
    char szPackName[128];              
    BYTE byReserved[896];              
} NET_ALGORITHM_BUILD_INFO;
typedef struct tagNET_ALGORITHM_UPGRADE_AI_INFO
{
    NET_ALGORITHM_SDK_INFO stuSdkInfo[32]; 
    UINT nRetSdkNum;                       
    BYTE byReserved[1020];                 
} NET_ALGORITHM_UPGRADE_AI_INFO;
typedef struct tagNET_ANALYSE_CAPS_SUPPORT_ALGORITHM_UPGRADE
{
    DWORD dwSize;                                       
    BOOL bSupportOnlyAlgorithmUpgrade;                  
    UINT nMaxUpgradeAINum;                              
    UINT nRetUpgradeAINum;                              
    NET_ALGORITHM_UPGRADE_AI_INFO* pstUpgradeAIInfo;    
    UINT nRetStorageNum;                                
    NET_ALGORITHM_DEV_STORAGE_INFO stuStorageInfos[16]; 
    NET_ALGORITHM_BUILD_INFO stuBuildInfo;              
} NET_ANALYSE_CAPS_SUPPORT_ALGORITHM_UPGRADE;
typedef struct tagNET_ANALYSE_CAPS_SUPPORT_PLATFORM_INFO
{
    DWORD dwSize;             
    char szPlatform[32];      
    char szEngine[32];        
    char szEngineVersion[32]; 
} NET_ANALYSE_CAPS_SUPPORT_PLATFORM_INFO;
typedef struct tagNET_ANALYSE_CAPS_SUPPORT_ALGORITHM_URL_UPGRADE
{
    DWORD dwSize;                     
    BOOL bSupportAlgorithmURLUpgrade; 
} NET_ANALYSE_CAPS_SUPPORT_ALGORITHM_URL_UPGRADE;
typedef struct tagNET_ANALYSE_CAPS_SUPPORT_ANALYSE_TASK_MANAGER
{
    DWORD dwSize;                   
    BOOL bSupporAnalyseTaskManager; 
} NET_ANALYSE_CAPS_SUPPORT_ANALYSE_TASK_MANAGER;
typedef struct tagNET_ANALYSE_CAPS_SUPPORT_FEATURE_DB
{
    DWORD dwSize;          
    BOOL bSupporFeatureDB; 
} NET_ANALYSE_CAPS_SUPPORT_FEATURE_DB;
typedef struct tagNET_ALGORITHM_MODEL_INFO
{
    char szName[256];      
    char szVersion[256];   
    char szReserved[1024]; 
} NET_ALGORITHM_MODEL_INFO;
typedef struct tagNET_SUPPORT_UPGRADE_AI_TYPE_INFO
{
    int nSdkInfoCount;                         
    NET_ALGORITHM_SDK_INFO stuSdkInfo[32];     
    int nModelInfoCount;                       
    NET_ALGORITHM_MODEL_INFO stuModelInfo[64]; 
    char szReserved[1024];                     
} NET_SUPPORT_UPGRADE_AI_TYPE_INFO;
typedef struct tagNET_ANALYSE_CAPS_SUPPORT_UPGRADE_AI_TYPE
{
    DWORD dwSize;                                                   
    UINT nMaxNum;                                                   
    UINT nRetNum;                                                   
    NET_SUPPORT_UPGRADE_AI_TYPE_INFO* pstuSupportUpgradeAITypeInfo; 
} NET_ANALYSE_CAPS_SUPPORT_UPGRADE_AI_TYPE;
typedef struct tagNET_ANALYSE_CAPS_STORAGE
{
    DWORD dwSize;                                       
    UINT nStorageNum;                                   
    NET_ALGORITHM_DEV_STORAGE_INFO stuStorageInfos[16]; 
} NET_ANALYSE_CAPS_STORAGE;
typedef struct tagNET_ANALYSE_CAPS_BUILD_INFO
{
    DWORD dwSize;                          
    NET_ALGORITHM_BUILD_INFO stuBuildInfo; 
} NET_ANALYSE_CAPS_BUILD_INFO;
typedef struct tagNET_ANALYSE_CAPS_SUPPORT_UNLOAD_OIL_LOCAL_FUNC
{
    DWORD dwSize;                    
    BOOL bSupportUnloadOilLocalFunc; 
} NET_ANALYSE_CAPS_SUPPORT_UNLOAD_OIL_LOCAL_FUNC;
typedef enum tagEM_SOLUTION_ALGORITHM_TYPE
{
    EM_ALGORITHM_UNKNOWN,        
    EM_ALGORITHM_OD_SOLUTION,    
    EM_ALGORITHM_OC_SOLUTION,    
    EM_ALGORITHM_OD_OC_SOLUTION, 
    EM_ALGORITHM_BD_SOLUTION,    
    EM_ALGORITHM_OCR_SOLUTION,   
    EM_ALGORITHM_IR_SOLUTION,    
} EM_SOLUTION_ALGORITHM_TYPE;
typedef struct tagNET_AI_SOLUTION_LIST
{
    DWORD dwSize;                              
    char szAMCC[128];                          
    EM_SOLUTION_ALGORITHM_TYPE emSolutionType; 
} NET_AI_SOLUTION_LIST;
typedef struct tagNET_ANALYSE_CAPS_AI_SOLUTION_LIST
{
    DWORD dwSize;                               
    UINT nAISolutionNum;                        
    NET_AI_SOLUTION_LIST stuAISolutionList[64]; 
} NET_ANALYSE_CAPS_AI_SOLUTION_LIST;
typedef struct tagNET_ANALYSE_CAPS_NULL
{
    DWORD dwSize;                                          
    int nClassTypeNum;                                     
    EM_SCENE_CLASS_TYPE emClassType[32];                   
    NET_TOTAL_CAP stuTotalCaps[MAX_ANALYSE_TOTALCAPS_NUM]; 
    UINT nTotalCapsNum;                                    
} NET_ANALYSE_CAPS_NULL;
typedef enum tagEM_ANALYSE_CAPS_TYPE
{
    EM_ANALYSE_CAPS_NULL = 0,                      
    EM_ANALYSE_CAPS_ALGORITHM = 1,                 
    EM_ANALYSE_CAPS_TOTALCAPS,                     
    EM_ANALYSE_CAPS_SUPPORT_ALGORITHM_UPGRADE,     
    EM_ANALYSE_CAPS_SUPPORT_PLATFORM_INFO,         
    EM_ANALYSE_CAPS_SUPPORT_ALGORITHM_URL_UPGRADE, 
    EM_ANALYSE_CAPS_SUPPORT_ANALYSE_TASK_MANAGER,  
    EM_ANALYSE_CAPS_SUPPORT_FEATURE_DB,            
    EM_ANALYSE_CAPS_SUPPORT_UPGRADE_AI_TYPE,       
    EM_ANALYSE_CAPS_STORAGE,                       
    EM_ANALYSE_CAPS_BUILD_INFO,                    
    EM_ANALYSE_CAPS_SUPPORT_UNLOAD_OIL_LOCAL_FUNC, 
    EM_ANALYSE_CAPS_AI_SOLUTION_LIST,              
} EM_ANALYSE_CAPS_TYPE;
typedef struct tagNET_IN_REMAIN_ANAYLSE_RESOURCE
{
    DWORD dwSize; 
} NET_IN_REMAIN_ANAYLSE_RESOURCE;
typedef struct tagNET_OUT_REMAIN_ANAYLSE_RESOURCE
{
    DWORD dwSize;                                                          
    UINT nRetRemainCapNum;                                                 
    NET_REMAIN_ANALYSE_CAPACITY stuRemainCapacities[32];                   
    NET_REMAIN_ANALYSE_TOTAL_CAPACITY stuTotalCapacity[32];                
    UINT nTotalCapacityNum;                                                
    UINT nRetRemainPictureCapNum;                                          
    NET_REMAIN_PICTURE_ANALYSE_CAPACITY stuRemainPictureCapacities[32];    
    NET_REMAIN_PICTURE_ANALYSE_TOTAL_CAPACITY stuTotalPictureCapacity[32]; 
    UINT nTotalPictureCapacityNum;                                         
    int nFeatureMatchNum;                                                  
    NET_FEATURE_MATCH stuFeatureMatch[32];                                 
} NET_OUT_REMAIN_ANAYLSE_RESOURCE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAnalyseCaps(LLONG lLoginID, EM_ANALYSE_CAPS_TYPE emCapsType, void* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddAnalyseTask(LLONG lLoginID, EM_DATA_SOURCE_TYPE emDataSourceType, void* pInParam, NET_OUT_ADD_ANALYSE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyAnalyseTask(LLONG lLoginID, NET_IN_MODIFY_ANALYSE_TASK* pInParam, NET_OUT_MODIFY_ANALYSE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddPollingAnalyseTask(LLONG lLoginID, const NET_IN_ADD_POLLING_ANALYSE_TASK* pInParam, NET_OUT_ADD_POLLING_ANALYSE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpdatePollingAnalyseTask(LLONG lLoginID, const NET_IN_UPDATE_POLLING_ANALYSE_TASK* pInParam, NET_OUT_UPDATE_POLLING_ANALYSE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartAnalyseTask(LLONG lLoginID, NET_IN_START_ANALYSE_TASK* pInParam, NET_OUT_START_ANALYSE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveAnalyseTask(LLONG lLoginID, NET_IN_REMOVE_ANALYSE_TASK* pInParam, NET_OUT_REMOVE_ANALYSE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindAnalyseTask(LLONG lLoginID, NET_IN_FIND_ANALYSE_TASK* pInParam, NET_OUT_FIND_ANALYSE_TASK* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PushAnalysePictureFile(LLONG lLoginID, NET_IN_PUSH_ANALYSE_PICTURE_FILE* pInParam, NET_OUT_PUSH_ANALYSE_PICTURE_FILE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PushAnalysePictureFileByRule(LLONG lLoginID, NET_IN_PUSH_ANALYSE_PICTURE_FILE_BYRULE* pInParam, NET_OUT_PUSH_ANALYSE_PICTURE_FILE_BYRULE* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachAnalyseTaskState(LLONG lLoginID, NET_IN_ATTACH_ANALYSE_TASK_STATE* pInParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachAnalyseTaskState(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachAnalyseTaskResult(LLONG lLoginID, NET_IN_ATTACH_ANALYSE_RESULT* pInParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachAnalyseTaskResult(LLONG lAttachHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRemainAnalyseResource(LLONG lLoginID, NET_IN_ATTACH_REMAIN_ANALYSE_RESOURCE* pInParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRemainAnalyseResource(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemainAnalyseResource(LLONG lLoginID, const NET_IN_REMAIN_ANAYLSE_RESOURCE* pInParam, NET_OUT_REMAIN_ANAYLSE_RESOURCE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetAnalyseTaskCustomData(LLONG lLoginID, const NET_IN_SET_ANALYSE_TASK_CUSTOM_DATA* pInParam, NET_OUT_SET_ANALYSE_TASK_CUSTOM_DATA* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PutAnalyseDisposition(LLONG lLoginID, const NET_IN_PUT_ANALYSE_DISPOSITION* pInParam, NET_OUT_PUT_ANALYSE_DISPOSITION* pOutParam, const int nWaitTime);
typedef struct tagNET_UPDATE_ANALYSE_TASK_RULES
{
    EM_SCENE_CLASS_TYPE emClassType; 
    DWORD dwRuleType;                
    void* pRuleConfig;               
    int nObjectTypeNum;              
    char szObjectTypes[16][16];      
    char szReserved[764];            
} NET_UPDATE_ANALYSE_TASK_RULES;
typedef struct tagNET_IN_UPDATE_ANALYSE_TASK_RULES
{
    DWORD dwSize;                               
    UINT nTaskID;                               
    int nRulesNum;                              
    NET_UPDATE_ANALYSE_TASK_RULES stuRules[16]; 
} NET_IN_UPDATE_ANALYSE_TASK_RULES;
typedef struct tagNET_OUT_UPDATE_ANALYSE_TASK_RULES
{
    DWORD dwSize; 
} NET_OUT_UPDATE_ANALYSE_TASK_RULES;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UpdateAnalyseTaskRules(LLONG lLoginID, const NET_IN_UPDATE_ANALYSE_TASK_RULES* pInParam, NET_OUT_UPDATE_ANALYSE_TASK_RULES* pOutParam, const int nWaitTime);
typedef struct tagNET_SET_POLLING_CONFIG_INFO
{
    BOOL bEnable;                 
    UINT nChannel;                
    char szGlobalType[64];        
    int nRulelTypeCnt;            
    char szReserved1[4];          
    char szRulelType[16][64];     
    char szGlobalTypeList[6][64]; 
    int nGlobalTypeListNum;       
    char szReserved[636];         
} NET_SET_POLLING_CONFIG_INFO;
typedef struct tagNET_IN_SET_POLLING_CONFIG
{
    DWORD dwSize;                                    
    UINT nConfigCnt;                                 
    NET_SET_POLLING_CONFIG_INFO stuConfigInfos[256]; 
} NET_IN_SET_POLLING_CONFIG;
typedef struct tagNET_OUT_SET_POLLING_CONFIG
{
    DWORD dwSize; 
} NET_OUT_SET_POLLING_CONFIG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPollingConfig(LLONG lLoginID, const NET_IN_SET_POLLING_CONFIG* pInParam, NET_OUT_SET_POLLING_CONFIG* pOutParam, const int nWaitTime);
typedef enum tagEM_ALGO_MATCH_TYPE_ENUM
{
    EM_ALGO_MATCH_UNKNOWN,             
    EM_ALGO_MATCH_ALGORITHM_SHELF,     
    EM_ALGO_MATCH_ALGORITHM_PARTITION, 
} EM_ALGO_MATCH_TYPE_ENUM;
typedef struct tagNET_ATTR_MAP
{
    char szValue[128];    
    int nKey;             
    char szReserved[252]; 
} NET_ATTR_MAP;
typedef struct tagNET_ALGO_PACK_MANAGER_ATTRIBUTE
{
    char szAttrName[128];         
    int nAttrID;                  
    UINT nAttrMapNum;             
    NET_ATTR_MAP stuAttrMap[256]; 
    char szReserved[256];         
} NET_ALGO_PACK_MANAGER_ATTRIBUTE;
typedef struct tagNET_ALGO_PACK_MANAGER_OBJECTS
{
    char szLabel[128];                                 
    int nKey;                                          
    UINT nAttributeNum;                                
    NET_ALGO_PACK_MANAGER_ATTRIBUTE stuAttribute[256]; 
    char szReserved[256];                              
} NET_ALGO_PACK_MANAGER_OBJECTS;
typedef struct tagNET_ALGO_TEMPLATE_CFG
{
    char szName[128];                           
    char szType[128];                           
    char szAlgoID[128];                         
    int nAlarmId;                               
    UINT nObjectsNum;                           
    NET_ALGO_PACK_MANAGER_OBJECTS* pstuObjects; 
    char szReserved[256];                       
} NET_ALGO_TEMPLATE_CFG;
typedef struct tagNET_IN_IMPORT_BY_URL
{
    DWORD dwSize; 
    BYTE szReserved[4];
    char szUrl[512];                            
    char szCheckSum[128];                       
    char szAlgoPackName[64];                    
    EM_SOLUTION_ALGORITHM_TYPE emAlgoSolution;  
    UINT nAlgoTemplateCfgNum;                   
    NET_ALGO_TEMPLATE_CFG* pstuAlgoTemplateCfg; 
} NET_IN_IMPORT_BY_URL;
typedef struct tagNET_OUT_IMPORT_BY_URL
{
    DWORD dwSize; 
    UINT nTaskID; 
} NET_OUT_IMPORT_BY_URL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ImportByUrl(LLONG lLoginID, const NET_IN_IMPORT_BY_URL* pInParam, NET_OUT_IMPORT_BY_URL* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_CANCEL_IMPORT
{
    DWORD dwSize; 
    UINT nTaskID; 
} NET_IN_CANCEL_IMPORT;
typedef struct tagNET_OUT_CANCEL_IMPORT
{
    DWORD dwSize; 
} NET_OUT_CANCEL_IMPORT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CancelImport(LLONG lLoginID, const NET_IN_CANCEL_IMPORT* pInParam, NET_OUT_CANCEL_IMPORT* pOutParam, const int nWaitTime);
typedef enum tagEM_FAILED_CODE
{
    EM_FAILED_CODE_UNKNOWN = -1,                           
    EM_FAILED_CODE_NO_ERROR,                               
    EM_FAILED_CODE_FAILED_TO_DOWNLOAD_THE_MODEL,           
    EM_FAILED_CODE_STORAGE_SPACE_IS_INSUFFICIENT,          
    EM_FAILED_CODE_FILE_IS_TOO_LARGE,                      
    EM_FAILED_CODE_MODEL_PACKET_HEADER_ANALYSIS_FAILS,     
    EM_FAILED_CODE_MODEL_FORMAT_VERIFICATION_ERROR,        
    EM_FAILED_CODE_HARDWARE_PLATFORM_VERIFICATION_FAILS,   
    EM_FAILED_CODE_DEVICE_DOES_NOT_SUPPORT_MODEL_DELIVERY, 
    EM_FAILED_CODE_CURRENT_DEVICE_MODE_IS_NOT_SUPPORTED,   
    EM_FAILED_CODE_MODEL_NAME_ALREADY_EXISTS,              
    EM_FAILED_CODE_EXCEEDS_THE_UPPER_LIMIT,                
    EM_FAILED_CODE_OTHER_ERRORS,                           
} EM_FAILED_CODE;
typedef struct tagDEV_ALGO_PACK_RESULT_INFO
{
    UINT nTaskID;                
    char szState[32];            
    UINT nProgress;              
    EM_FAILED_CODE emFailedCode; 
    char szResvered[256];        
} DEV_ALGO_PACK_RESULT_INFO;
typedef struct tagNET_NOTIFY_ALGO_PACK_RESULT_INFO
{
    int nInfosNum;                          
    DEV_ALGO_PACK_RESULT_INFO stuInfos[32]; 
    char szResvered[1024];                  
} NET_NOTIFY_ALGO_PACK_RESULT_INFO;
typedef void(CALLBACK* fNotifyAlgoPackResult)(LLONG lAlgoPackResultHandle, NET_NOTIFY_ALGO_PACK_RESULT_INFO* pstuAlgoPackResultNotifyInfo, LDWORD dwUser);
typedef struct tagNET_IN_ALGO_PACK_RESULT_INFO
{
    DWORD dwSize;                                  
    int nTaskIDNum;                                
    UINT nTaskID[64];                              
    fNotifyAlgoPackResult cbfNotifyAlgoPackResult; 
    LDWORD dwUser;                                 
} NET_IN_ALGO_PACK_RESULT_INFO;
typedef struct tagNET_OUT_ALGO_PACK_RESULT_INFO
{
    DWORD dwSize; 
} NET_OUT_ALGO_PACK_RESULT_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachImportResult(LLONG lLoginID, NET_IN_ALGO_PACK_RESULT_INFO* pstInParam, NET_OUT_ALGO_PACK_RESULT_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachImportResult(LLONG lAlgoPackResultHandle);
typedef struct tagNET_IN_GET_ALG_MATCH_INFO
{
    DWORD dwSize; 
} NET_IN_GET_ALG_MATCH_INFO;
typedef struct tagNET_OUT_GET_ALG_MATCH_INFO
{
    DWORD dwSize;                        
    EM_ALGO_MATCH_TYPE_ENUM emMatchType; 
    char szInfo[4096];                   
} NET_OUT_GET_ALG_MATCH_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAlgMatchInfo(LLONG lLoginID, const NET_IN_GET_ALG_MATCH_INFO* pInParam, NET_OUT_GET_ALG_MATCH_INFO* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_GET_CHANNEL_STATE
{
    DWORD dwSize;       
    int nChannelNum;    
    UINT nChannel[256]; 
} NET_IN_GET_CHANNEL_STATE;
typedef struct tagNET_INTELLI_INFO
{
    int nTypeNum;         
    char szType[16][64];  
    char szClass[64];     
    char szReserved[516]; 
} NET_INTELLI_INFO;
typedef struct tagNET_CHANNEL_STATE_INFO
{
    UINT nChannel;                       
    int nIntelliInfoNum;                 
    NET_INTELLI_INFO stuIntelliInfo[16]; 
    char szReserved[512];                
} NET_CHANNEL_STATE_INFO;
typedef struct tagNET_CHANNEL_STATE_INFO_EX
{
    UINT nChannel;                             
    int nIntelliInfoNum;                       
    NET_INTELLI_INFO stuIntelliInfo[16];       
    int nClosedIntelliInfoNum;                 
    NET_INTELLI_INFO stuClosedIntelliInfo[64]; 
    char szReserved[512];                      
} NET_CHANNEL_STATE_INFO_EX;
typedef struct tagNET_OUT_GET_CHANNEL_STATE
{
    DWORD dwSize;                           
    int nStateNum;                          
    int nMaxStateNum;                       
    char szReserved[4];                     
    NET_CHANNEL_STATE_INFO* pstuState;      
    NET_CHANNEL_STATE_INFO_EX* pstuStateEx; 
} NET_OUT_GET_CHANNEL_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetChannelState(LLONG lLoginID, const NET_IN_GET_CHANNEL_STATE* pstuInParam, NET_OUT_GET_CHANNEL_STATE* pstuOutParam, int nWaitTime);
typedef struct tagNET_LOAD_FEATURE_DB_INFO
{
    char szShardID[64];   
    BYTE byReserved[512]; 
} NET_LOAD_FEATURE_DB_INFO;
typedef enum tagEM_LOAD_FEATURE_TYPE
{
    EM_LOAD_FEATURE_TYPE_UNKNOWN, 
    EM_LOAD_FEATURE_TYPE_FACE,    
    EM_LOAD_FEATURE_TYPE_OBJECT,  
    EM_LOAD_FEATURE_TYPE_VEHICLE, 
} EM_LOAD_FEATURE_TYPE;
typedef struct tagNET_LOAD_FEATURE_DB_LIST
{
    char szRequestID[64];                          
    char szRepositoryId[64];                       
    EM_REPOSITORY_TYPE emRepositoryType;           
    int nFeatureDBInfoNum;                         
    NET_LOAD_FEATURE_DB_INFO stuFeatureDBInfo[32]; 
    char szPfurl[256];                             
    EM_LOAD_FEATURE_TYPE emFeatureType;            
    BYTE byReserved[1024];                         
} NET_LOAD_FEATURE_DB_LIST;
typedef struct tagNET_IN_LOAD_FEATURE_REPOSITORY
{
    DWORD dwSize;                              
    NET_LOAD_FEATURE_DB_LIST stuFeatureDB[32]; 
    int nFeatureDBNum;                         
} NET_IN_LOAD_FEATURE_REPOSITORY;
typedef struct tagNET_OUT_LOAD_FEATURE_REPOSITORY
{
    DWORD dwSize; 
} NET_OUT_LOAD_FEATURE_REPOSITORY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_LoadFeatureRepository(LLONG lLoginID, const NET_IN_LOAD_FEATURE_REPOSITORY* pInParam, NET_OUT_LOAD_FEATURE_REPOSITORY* pOutParam, const int nWaitTime);
typedef struct tagNET_UNLOAD_FEATURE_DB_LIST
{
    char szRepositoryId[64];             
    char szShardID[32][64];              
    int nShardIDNum;                     
    EM_REPOSITORY_TYPE emRepositoryType; 
    BYTE byReserved[1024];               
} NET_UNLOAD_FEATURE_DB_LIST;
typedef struct tagNET_IN_UNLOAD_FEATURE_REPOSITORY
{
    DWORD dwSize;                                
    NET_UNLOAD_FEATURE_DB_LIST stuFeatureDB[32]; 
    int nFeatureDBNum;                           
} NET_IN_UNLOAD_FEATURE_REPOSITORY;
typedef struct tagNET_OUT_UNLOAD_FEATURE_REPOSITORY
{
    DWORD dwSize; 
} NET_OUT_UNLOAD_FEATURE_REPOSITORY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UnLoadFeatureRepository(LLONG lLoginID, const NET_IN_UNLOAD_FEATURE_REPOSITORY* pInParam, NET_OUT_UNLOAD_FEATURE_REPOSITORY* pOutParam, const int nWaitTime);
typedef enum tagEM_STRUCTURED_FEATURE_SUB_TYPE
{
    EM_STRUCTURED_FEATURE_SUB_TYPE_UNKNOWN,      
    EM_STRUCTURED_FEATURE_SUB_TYPE_FACE,         
    EM_STRUCTURED_FEATURE_SUB_TYPE_HUMAN,        
    EM_STRUCTURED_FEATURE_SUB_TYPE_MOTOR = 4,    
    EM_STRUCTURED_FEATURE_SUB_TYPE_NONMOTOR = 8, 
} EM_STRUCTURED_FEATURE_SUB_TYPE;
typedef struct tagNET_ADD_FEATURE_DB_LIST
{
    char szRepositoryID[64];                        
    char szFeatureID[64];                           
    EM_REPOSITORY_TYPE emRepositoryType;            
    char szShardID[64];                             
    TP_U64 nCapTime;                                
    EM_STRUCTURED_FEATURE_SUB_TYPE emObjectSubType; 
    char* pszFeature;                               
    int nFeatureLen;                                
    char szAlgorithmVersion[32];                    
    char szVendor[32];                              
    BYTE byReserved[1024];                          
} NET_ADD_FEATURE_DB_LIST;
typedef struct tagNET_IN_ADD_FEATURE
{
    DWORD dwSize;                             
    int nFeatureDBNum;                        
    NET_ADD_FEATURE_DB_LIST stuFeatureDB[32]; 
} NET_IN_ADD_FEATURE;
typedef struct tagNET_OUT_ADD_FEATURE
{
    DWORD dwSize; 
} NET_OUT_ADD_FEATURE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FeatureDBAddFeature(LLONG lLoginID, const NET_IN_ADD_FEATURE* pInParam, NET_OUT_ADD_FEATURE* pOutParam, const int nWaitTime);
typedef struct tagNET_DELETE_FEATURE_DB_LIST
{
    char szRepositoryID[64]; 
    char szFeatureID[64];    
    char szShardID[64];      
    BYTE byReserved[512];    
} NET_DELETE_FEATURE_DB_LIST;
typedef struct tagNET_IN_DELETE_FEATURE
{
    DWORD dwSize;                                
    int nFeatureDBNum;                           
    NET_DELETE_FEATURE_DB_LIST stuFeatureDB[32]; 
} NET_IN_DELETE_FEATURE;
typedef struct tagNET_OUT_DELETE_FEATURE
{
    DWORD dwSize; 
} NET_OUT_DELETE_FEATURE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FeatureDBDeleteFeature(LLONG lLoginID, const NET_IN_DELETE_FEATURE* pInParam, NET_OUT_DELETE_FEATURE* pOutParam, const int nWaitTime);
typedef enum tagEM_FEATUREDB_TASK_STATE_TYPE
{
    EM_FEATUREDB_TASK_STATE_TYPE_UNKNOWN,     
    EM_FEATUREDB_TASK_STATE_TYPE_IDLE,        
    EM_FEATUREDB_TASK_STATE_TYPE_DOWNLOADING, 
    EM_FEATUREDB_TASK_STATE_TYPE_FINISH,      
    EM_FEATUREDB_TASK_STATE_TYPE_ERROR,       
} EM_FEATUREDB_TASK_STATE_TYPE;
typedef enum tagEM_FEATUREDB_TASK_ERROR_CODE
{
    EM_FEATUREDB_TASK_ERROR_CODE_UNKNOWN,   
    EM_FEATUREDB_TASK_ERROR_CODE_OVERLIMIT, 
} EM_FEATUREDB_TASK_ERROR_CODE;
typedef struct tagNET_FEATUREDB_TASK_REPOSITORY_INFO
{
    char szShardID[64];   
    BYTE byReserved[512]; 
} NET_FEATUREDB_TASK_REPOSITORY_INFO;
typedef struct tagNET_FEATUREDB_TASK_STATE
{
    char szRequestID[64];                                     
    char szRepositoryID[64];                                  
    EM_REPOSITORY_TYPE emRepositoryType;                      
    int nRepositoryInfoNum;                                   
    NET_FEATUREDB_TASK_REPOSITORY_INFO stuRepositoryInfo[32]; 
    EM_FEATUREDB_TASK_STATE_TYPE emTaskState;                 
    UINT nCurrentFeatureCount;                                
    UINT nFailedFeatureCount;                                 
    EM_FEATUREDB_TASK_ERROR_CODE emError;                     
    BYTE byReserved[512];                                     
} NET_FEATUREDB_TASK_STATE;
typedef struct tagNET_CB_FEATUREDB_STATE_INFO
{
    NET_FEATUREDB_TASK_STATE stuTaskState[32]; 
    int nTaskStateNum;                         
    BYTE bReserved[2048];                      
} NET_CB_FEATUREDB_STATE_INFO;
typedef int(CALLBACK* fFeatureDBStateCallBack)(LLONG lAttachHandle, NET_CB_FEATUREDB_STATE_INFO* pstFeatureDBStateInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_FEATUREDB_STATE
{
    DWORD dwSize;                             
    BYTE bReserved1[4];                       
    fFeatureDBStateCallBack cbFeatureDBState; 
    LDWORD dwUser;                            
} NET_IN_ATTACH_FEATUREDB_STATE;
typedef struct tagNET_OUT_ATTACH_FEATUREDB_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_FEATUREDB_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachFeatureDBLoadingState(LLONG lLoginID, const NET_IN_ATTACH_FEATUREDB_STATE* pInParam, NET_OUT_ATTACH_FEATUREDB_STATE* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachFeatureDBLoadingState(LLONG lAttachHandle);
typedef struct tagNET_IN_ENABLE_INTELLIFRAME
{
    DWORD dwSize; 
    BOOL bEnable; 
    int nTaskID;  
} NET_IN_ENABLE_INTELLIFRAME;
typedef struct tagNET_OUT_ENABLE_INTELLIFRAME
{
    DWORD dwSize; 
} NET_OUT_ENABLE_INTELLIFRAME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_EnableIntelliFrame(LLONG lLoginID, const NET_IN_ENABLE_INTELLIFRAME* pInParam, NET_OUT_ENABLE_INTELLIFRAME* pOutParam, const int nWaitTime);
typedef struct tagNET_SEARCH_FEATUREDB_FEATURE_DATA_INFO
{
    char* pszFeatureData;        
    int nFeatureDataLen;         
    char szAlgorithmVersion[64]; 
    char szVendor[64];           
    BYTE bReserved[512];         
} NET_SEARCH_FEATUREDB_FEATURE_DATA_INFO;
typedef struct tagNET_SEARCH_FEATUREDB_RETRIEVAL_MESSAGES
{
    char RequestID[64];                                            
    NET_SEARCH_FEATUREDB_FEATURE_DATA_INFO stuFeatureDataInfo[32]; 
    int nFeatureDataInfoNum;                                       
    BYTE bReserved[512];                                           
} NET_SEARCH_FEATUREDB_RETRIEVAL_MESSAGES;
typedef enum tagEM_SEARCH_FEATUREDB_MULTIMERGE_RESULT
{
    EM_SEARCH_FEATUREDB_MULTIMERGE_RESULT_BATCH,      
    EM_SEARCH_FEATUREDB_MULTIMERGE_RESULT_MULTIANGLE, 
} EM_SEARCH_FEATUREDB_MULTIMERGE_RESULT;
typedef struct tagNET_IN_SEARCH_FEATUREDB
{
    DWORD dwSize;                                                     
    NET_SEARCH_FEATUREDB_RETRIEVAL_MESSAGES stuRetrievalMessages[32]; 
    int nRetrievalMessagesNum;                                        
    int nThreshold;                                                   
    char szRepositoryID[2048][64];                                    
    int nRepositoryIDNum;                                             
    BYTE bReserved1[4];                                               
    UINT nStartTime;                                                  
    UINT nEndTime;                                                    
    int nTopN;                                                        
    int nObjectSubType;                                               
    EM_SEARCH_FEATUREDB_MULTIMERGE_RESULT emMultiMergeResult;         
} NET_IN_SEARCH_FEATUREDB;
typedef struct tagNET_SEARCH_FEATUREDB_RETRIEVAL_SINGLE_RESULT
{
    char szFeatureID[64];    
    char szRepositoryID[64]; 
    int nSimilarity;         
    int nCapTime;            
    BYTE bReserved[512];     
} NET_SEARCH_FEATUREDB_RETRIEVAL_SINGLE_RESULT;
typedef struct tagNET_SEARCH_FEATUREDB_PROCESS_INFO
{
    char szRepositoryID[64]; 
    int nTotal;              
    BYTE bReserved[508];     
} NET_SEARCH_FEATUREDB_PROCESS_INFO;
typedef struct tagNET_SEARCH_FEATUREDB_RESULT
{
    char szRequestID[64];                                                         
    int nReturnCode;                                                              
    int nErrorCode;                                                               
    char szErrorMessage[64];                                                      
    NET_SEARCH_FEATUREDB_RETRIEVAL_SINGLE_RESULT stuRetrievalSingleResults[1000]; 
    int nRetrievalSingleResultsNum;                                               
    int nProcessInfoNum;                                                          
    NET_SEARCH_FEATUREDB_PROCESS_INFO stuProcessInfo[32];                         
    BYTE bReserved[512];                                                          
} NET_SEARCH_FEATUREDB_RESULT;
typedef struct tagNET_OUT_SEARCH_FEATUREDB
{
    DWORD dwSize;                               
    NET_SEARCH_FEATUREDB_RESULT stuResults[32]; 
    int nResultsNum;                            
} NET_OUT_SEARCH_FEATUREDB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SearchFeatureDB(LLONG lLoginID, const NET_IN_SEARCH_FEATUREDB* pInParam, NET_OUT_SEARCH_FEATUREDB* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_ANALYSE_TASK_MANAGER_CAPS_INFO
{
    DWORD dwSize; 
} NET_IN_ANALYSE_TASK_MANAGER_CAPS_INFO;
typedef struct tagNET_ANALYSE_RULE_CAPS
{
    EM_SCENE_CLASS_TYPE emClassType; 
    int nRuleTypeNum;                
    DWORD dwRuleTypes[32];           
    BYTE byReserved[256];            
} NET_ANALYSE_RULE_CAPS;
typedef enum tagEM_PICTURE_PROTOCOL_TYPE
{
    EM_PICTURE_PROTOCOL_UNKNOWN,  
    EM_PICTURE_PROTOCOL_RABBITMQ, 
} EM_PICTURE_PROTOCOL_TYPE;
typedef struct tagNET_OUT_ANALYSE_TASK_MANAGER_CAPS_INFO
{
    DWORD dwSize;                                        
    int nSourceTypeNum;                                  
    EM_DATA_SOURCE_TYPE emSourceTypes[32];               
    EM_STREAM_PROTOCOL_TYPE emStreamProtocolTypes[32];   
    int nStreamProtocolTypeNum;                          
    int nRuleNum;                                        
    NET_ANALYSE_RULE_CAPS stuRuleInfo[64];               
    NET_EM_VIDEO_COMPRESSION emCompressionTypes[64];     
    int nCompressionTypeNum;                             
    int nPictureProtocolTypesNum;                        
    EM_PICTURE_PROTOCOL_TYPE emPictureProtocolTypes[32]; 
} NET_OUT_ANALYSE_TASK_MANAGER_CAPS_INFO;
typedef struct tagNET_IN_PERIPHERAL_CHIP_CAPS
{
    DWORD dwSize; 
} NET_IN_PERIPHERAL_CHIP_CAPS;
typedef enum tagEM_PERIPHERAL_CHIP_TYPE
{
    EM_PERIPHERAL_CHIP_TYPE_UNKNOWN,  
    EM_PERIPHERAL_CHIP_TYPE_MOVIDIUS, 
    EM_PERIPHERAL_CHIP_TYPE_TX1,      
    EM_PERIPHERAL_CHIP_TYPE_AI1,      
} EM_PERIPHERAL_CHIP_TYPE;
typedef enum tagEM_PERIPHERAL_MODEL_TYPE
{
    EM_PERIPHERAL_MODEL_TYPE_UNKNOWN, 
} EM_PERIPHERAL_MODEL_TYPE;
typedef struct tagNET_PERIPHERAL_CHIP_CAPS_INFO
{
    EM_PERIPHERAL_CHIP_TYPE emType;   
    UINT nCount;                      
    EM_PERIPHERAL_MODEL_TYPE emModel; 
    char szChipType[32];              
    BYTE byReserved[256];             
} NET_PERIPHERAL_CHIP_CAPS_INFO;
typedef struct tagNET_OUT_PERIPHERAL_CHIP_CAPS
{
    DWORD dwSize;                               
    int nCapsNum;                               
    NET_PERIPHERAL_CHIP_CAPS_INFO stuCaps[128]; 
} NET_OUT_PERIPHERAL_CHIP_CAPS;
typedef struct tagNET_IN_CITIZEN_IDENTITY_MANAGER_CAPS
{
    DWORD dwSize; 
} NET_IN_CITIZEN_IDENTITY_MANAGER_CAPS;
typedef struct tagNET_OUT_CITIZEN_IDENTITY_MANAGER_CAPS
{
    DWORD dwSize;                 
    BOOL bSupportSelfHelpCollect; 
    BOOL bSupportJointCollect;    
    BOOL bSupportOfflineExtract;  
    BOOL bSupportVisitor;         
    int nMaxInsertNum;            
} NET_OUT_CITIZEN_IDENTITY_MANAGER_CAPS;
typedef struct tagNET_IN_AROUD_4G_PROBE_SEARCH_CAPS
{
    DWORD dwSize; 
} NET_IN_AROUD_4G_PROBE_SEARCH_CAPS;
typedef struct tagNET_OUT_AROUD_4G_PROBE_SEARCH_CAPS
{
    DWORD dwSize;              
    BOOL bSupport;             
    BOOL bSupportOptimization; 
    int nDeduplicatePeriod[2]; 
} NET_OUT_AROUD_4G_PROBE_SEARCH_CAPS;
typedef struct tagNET_IN_LIGHTING_MIX_SOLUTION_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_LIGHTING_MIX_SOLUTION_CAPS;
typedef struct tagNET_OUT_LIGHTING_MIX_SOLUTION_CAPS
{
    DWORD dwSize;                       
    BOOL bSupport;                      
    int nRetModeNum;                    
    EM_LIGHTING_SCHEME_MODE emMode[8];  
    int nAIMixLightSwitchDelayRange[2]; 
} NET_OUT_LIGHTING_MIX_SOLUTION_CAPS;
typedef struct tagNET_IN_IXRAY_PACKAGE_MANAGER_CAPS
{
    DWORD dwSize; 
} NET_IN_IXRAY_PACKAGE_MANAGER_CAPS;
typedef struct tagNET_OUT_IXRAY_PACKAGE_MANAGER_CAPS
{
    DWORD dwSize;                            
    int nObjectTypes;                        
    EM_INSIDE_OBJECT_TYPE emObjectType[128]; 
} NET_OUT_IXRAY_PACKAGE_MANAGER_CAPS;
typedef enum tagEM_FLOW_STAT_CAPS_TYPE
{
    EM_FLOW_STAT_CAPS_TYPE_UNKNOWN,            
    EM_FLOW_STAT_CAPS_TYPE_CAPSINTELLIPARKING, 
} EM_FLOW_STAT_CAPS_TYPE;
typedef struct tagNET_CAPS_CAPSINTELLIPARKING
{
    UINT nSupport; 
} NET_CAPS_CAPSINTELLIPARKING;
typedef struct tagNET_IN_FLOW_STAT_CAPS
{
    DWORD dwSize;                   
    int nChannel;                   
    EM_FLOW_STAT_CAPS_TYPE emClass; 
} NET_IN_FLOW_STAT_CAPS;
typedef struct tagNET_OUT_FLOW_STAT_CAPS
{
    DWORD dwSize; 
    void* pCaps;  
} NET_OUT_FLOW_STAT_CAPS;
typedef struct tagNET_IN_FIRE_CONTROL_MANAGER_CAPS
{
    DWORD dwSize;  
    char szSN[64]; 
} NET_IN_FIRE_CONTROL_MANAGER_CAPS;
typedef struct tagNET_CAPS_CONFIGDISTRIBUTE
{
    BOOL bAnalogAlarm;     
    BOOL bSmokeCfg;        
    BOOL bTempCfg;         
    BOOL bHumidityCfg;     
    char szReserved[1012]; 
} NET_CAPS_CONFIGDISTRIBUTE;
typedef struct tagNET_OUT_FIRE_CONTROL_MANAGER_CAPS
{
    DWORD dwSize;                                  
    BOOL bReboot;                                  
    NET_CAPS_CONFIGDISTRIBUTE stuConfigDistribute; 
    BOOL bErasure;                                 
} NET_OUT_FIRE_CONTROL_MANAGER_CAPS;
typedef struct tagNET_IN_FLOW_STAT_CLEAROSD
{
    DWORD dwSize;                   
    int nChannel;                   
    EM_FLOW_STAT_CAPS_TYPE emClass; 
} NET_IN_FLOW_STAT_CLEAROSD;
typedef struct tagNET_OUT_FLOW_STAT_CLEAROSD
{
    DWORD dwSize; 
} NET_OUT_FLOW_STAT_CLEAROSD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FlowStatClearOSD(LLONG lLoginID, const NET_IN_FLOW_STAT_CLEAROSD* pInParam, NET_OUT_FLOW_STAT_CLEAROSD* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_GETLENSINFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GETLENSINFO;
typedef enum tagEM_LENS_TYPE
{
    EM_LENS_TYPE_UNKNOWN = -1,  
    EM_LENS_TYPE_FIXED_FOCUS,   
    EM_LENS_TYPE_INTERNEL_ZOOM, 
    EM_LENS_TYPE_MANUAL_ZOOM,   
    EM_LENS_TYPE_EXTERNEL_ZOOM, 
} EM_LENS_TYPE;
typedef struct tagNET_OUT_GETLENSINFO
{
    DWORD dwSize;            
    EM_LENS_TYPE emLensType; 
} NET_OUT_GETLENSINFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLensInfo(LLONG lLoginID, NET_IN_GETLENSINFO* pInParam, NET_OUT_GETLENSINFO* pOutParam, int nWaitTime);
typedef enum tagEM_LENS_ACTION
{
    EM_LENS_ACTION_UNKNOWN = -1,                
    EM_LENS_ACTION_SINGLE_STEP,                 
    EM_LENS_ACTION_START_CONTINUOUS_ADJUSTMENT, 
    EM_LENS_ACTION_END_CONTINUOUS_ADJUSTMENT,   
} EM_LENS_ACTION;
typedef struct tagNET_CMD_INFO
{
    int nZoom;                   
    int nFocus;                  
    EM_LENS_ACTION emLensAction; 
    BYTE byReserved[1024];       
} NET_CMD_INFO;
typedef struct tagNET_IN_ADJUSTRELATIVELENSFOCUS
{
    DWORD dwSize;            
    UINT nChannel;           
    NET_CMD_INFO stuCmdInfo; 
} NET_IN_ADJUSTRELATIVELENSFOCUS;
typedef struct tagNET_OUT_ADJUSTRELATIVELENSFOCUS
{
    DWORD dwSize; 
} NET_OUT_ADJUSTRELATIVELENSFOCUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AdjustRelativeLensFocus(LLONG lLoginID, NET_IN_ADJUSTRELATIVELENSFOCUS* pInParam, NET_OUT_ADJUSTRELATIVELENSFOCUS* pOutParam, int nWaitTime);
typedef struct tagNET_CLASSIFY_RESULT_STATISTICS_INFO
{
    UINT nObjectType;     
    UINT nInCount;        
    UINT nOutCount;       
    char szResvered[244]; 
} NET_CLASSIFY_RESULT_STATISTICS_INFO;
typedef struct tagNET_SECURITYGATE_ALARM_STATISTICS_INFO
{
    char szUUID[36];                                                     
    UINT nStatisticsInfoID;                                              
    NET_TIME_EX stuBeginTime;                                            
    NET_TIME_EX stuEndTime;                                              
    UINT nPassIn;                                                        
    UINT nAlarmIn;                                                       
    UINT nPassOut;                                                       
    UINT nAlarmOut;                                                      
    UINT nTempNormalCount;                                               
    UINT nTempAlarmCount;                                                
    UINT nClassifyResultStatisticsCount;                                 
    NET_CLASSIFY_RESULT_STATISTICS_INFO stuClassifyResultStatistics[32]; 
    BYTE byReserved[1024];                                               
} NET_SECURITYGATE_ALARM_STATISTICS_INFO;
typedef void(CALLBACK* fSecurityGateAttachAlarmStatistics)(LLONG lAttachHandle, NET_SECURITYGATE_ALARM_STATISTICS_INFO* pInfo, LDWORD dwUser);
typedef struct tagNET_IN_SECURITYGATE_ATTACH_ALARM_STATISTICS
{
    DWORD dwSize;                                
    char szUUID[36];                             
    fSecurityGateAttachAlarmStatistics cbNotify; 
    LDWORD dwUser;                               
} NET_IN_SECURITYGATE_ATTACH_ALARM_STATISTICS;
typedef struct tagNET_OUT_SECURITYGATE_ATTACH_ALARM_STATISTICS
{
    DWORD dwSize; 
} NET_OUT_SECURITYGATE_ATTACH_ALARM_STATISTICS;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SecurityGateAttachAlarmStatistics(LLONG lLoginID, const NET_IN_SECURITYGATE_ATTACH_ALARM_STATISTICS* pInParam, NET_OUT_SECURITYGATE_ATTACH_ALARM_STATISTICS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateDetachAlarmStatistics(LLONG lAttachHandle);
typedef struct tagNET_CAMERA_CFG_INFO
{
    char szIP[32];          
    UINT nPort;             
    char szLoginName[32];   
    char szLoginPwd[32];    
    BOOL bUsePwdNew;        
    char szLoginPwdNew[64]; 
    BYTE byReserved[956];   
} NET_CAMERA_CFG_INFO;
typedef struct tagNET_IN_SET_CAMERA_CFG
{
    DWORD dwSize;                      
    int nCameraNo;                     
    NET_CAMERA_CFG_INFO stuCameraInfo; 
} NET_IN_SET_CAMERA_CFG;
typedef struct tagNET_OUT_SET_CAMERA_CFG
{
    DWORD dwSize; 
} NET_OUT_SET_CAMERA_CFG;
typedef struct tagNET_IN_GET_CAMERA_CFG
{
    DWORD dwSize;  
    int nCameraNo; 
} NET_IN_GET_CAMERA_CFG;
typedef struct tagNET_OUT_GET_CAMERA_CFG
{
    DWORD dwSize;                      
    int nCameraNo;                     
    NET_CAMERA_CFG_INFO stuCameraInfo; 
} NET_OUT_GET_CAMERA_CFG;
typedef enum tagEM_ENTRY_DIRECTION
{
    EM_ENTRY_UNKNOWN,                
    EM_ENTRY_NORTH_TO_SOUTH,         
    EM_ENTRY_EASTNORTH_TO_WESTSOUTH, 
    EM_ENTRY_EAST_TO_WEST,           
    EM_ENTRY_EASTSOUTH_TO_WESTNORTH, 
    EM_ENTRY_SOUTH_TO_NORTH,         
    EM_ENTRY_WESTSOUTH_TO_EASTSOUTH, 
    EM_ENTRY_WEST_TO_EAST,           
    EM_ENTRY_WESTNORTH_TO_EASTSOUTH, 
} EM_ENTRY_DIRECTION;
typedef enum tagEM_ENTRY_TYPE
{
    EM_ENTRY_TYPE_UNKNOWN,    
    EM_ENTRY_TYPE_TURN_LEFT,  
    EM_ENTRY_TYPE_STRAIGHT,   
    EM_ENTRY_TYPE_TRUN_RIGHT, 
    EM_ENTRY_TYPE_TURN_ROUND, 
} EM_ENTRY_TYPE;
typedef struct tagNET_CHANNEL_CFG_INFO
{
    int nCameraNo;                       
    EM_ENTRY_DIRECTION emEntryDirection; 
    EM_ENTRY_TYPE emEntryType[16];       
    int nRetEntryTypeNum;                
    int nLaneNo;                         
    int* pCameraNo;                      
    int nCameraCount;                    
    int nCameraCountRet;                 
    BYTE byReserved[940];                
} NET_CHANNEL_CFG_INFO;
typedef struct tagNET_IN_SET_CHANNEL_CFG
{
    DWORD dwSize;                        
    int nChannelNo;                      
    NET_CHANNEL_CFG_INFO stuChannelInfo; 
} NET_IN_SET_CHANNEL_CFG;
typedef struct tagNET_OUT_SET_CHANNEL_CFG
{
    DWORD dwSize; 
} NET_OUT_SET_CHANNEL_CFG;
typedef struct tagNET_IN_GET_CHANNEL_CFG
{
    DWORD dwSize;   
    int nChannelNo; 
} NET_IN_GET_CHANNEL_CFG;
typedef struct tagNET_OUT_GET_CHANNEL_CFG
{
    DWORD dwSize;                        
    int nChannelNo;                      
    NET_CHANNEL_CFG_INFO stuChannelInfo; 
} NET_OUT_GET_CHANNEL_CFG;
typedef enum tagEM_TRAFFIC_LIGHT_DETECT_MODE
{
    EM_TRAFFIC_DETECT_UNKNOWN = -1, 
    EM_TRAFFIC_DETECT_RED,          
    EM_TRAFFIC_DETECT_GREEN,        
} EM_TRAFFIC_LIGHT_DETECT_MODE;
typedef struct tagNET_IN_SET_DETECT_MODE
{
    DWORD dwSize;                                 
    int nDetectTimeout;                           
    EM_TRAFFIC_LIGHT_DETECT_MODE emDetectionMode; 
} NET_IN_SET_DETECT_MODE;
typedef struct tagNET_OUT_SET_DETECT_MODE
{
    DWORD dwSize; 
} NET_OUT_SET_DETECT_MODE;
typedef struct tagNET_IN_GET_DETECT_MODE
{
    DWORD dwSize; 
} NET_IN_GET_DETECT_MODE;
typedef struct tagNET_OUT_GET_DETECT_MODE
{
    DWORD dwSize;                                 
    int nDetectTimeout;                           
    EM_TRAFFIC_LIGHT_DETECT_MODE emDetectionMode; 
} NET_OUT_GET_DETECT_MODE;
typedef enum tagEM_CAMERA_CONNECT_STATE
{
    EM_CAMERA_CONNECT_STATE_UNKNOWN = -1, 
    EM_CAMERA_CONNECT_STATE_UNCONNECT,    
    EM_CAMERA_CONNECT_STATE_CONNECTED,    
} EM_CAMERA_CONNECT_STATE;
typedef enum tagEM_TRAFFIC_LIGHT_DETECT_STATE
{
    EM_TRAFFIC_DETECT_STATE_UNKNOWN = -1, 
    EM_TRAFFIC_DETECT_STATE_RED,          
    EM_TRAFFIC_DETECT_STATE_GREEN,        
} EM_TRAFFIC_LIGHT_DETECT_STATE;
typedef struct tagNET_LIGHTINFO_CFG
{
    int nLightNo;                               
    EM_TRAFFIC_LIGHT_DETECT_STATE emLightState; 
    BYTE byReserved[504];                       
} NET_LIGHTINFO_CFG;
typedef struct tagNET_IN_GET_CAMERA_INFO
{
    DWORD dwSize;  
    int nCameraNo; 
} NET_IN_GET_CAMERA_INFO;
typedef struct tagNET_OUT_GET_CAMERA_INFO
{
    DWORD dwSize;                           
    int nCameraNo;                          
    EM_CAMERA_CONNECT_STATE emConnectState; 
    int nRetLightInfoNum;                   
    NET_LIGHTINFO_CFG stuLightInfos[16];    
} NET_OUT_GET_CAMERA_INFO;
typedef struct tagNET_TRAFFICLIGHT_CHANNEL_INFO
{
    int nChannel;                               
    EM_ENTRY_DIRECTION emEntryDirection;        
    EM_ENTRY_TYPE emEntryType[32];              
    int nRetEntryTypeNum;                       
    EM_TRAFFIC_LIGHT_DETECT_STATE emLightState; 
    BYTE byReserved[368];                       
} NET_TRAFFICLIGHT_CHANNEL_INFO;
typedef struct tagNET_TRAFFICLIGHT_INFO
{
    NET_TIME stuUTC;                               
    int nRetChannelNum;                            
    NET_TRAFFICLIGHT_CHANNEL_INFO stuChannels[32]; 
    int nRetLightChangedNum;                       
    int nLightChangedChannels[32];                 
    BYTE byReserved[512];                          
} NET_TRAFFICLIGHT_INFO;
typedef void(CALLBACK* fTrafficLightState)(LLONG lLoginID, LLONG lAttchHandle, NET_TRAFFICLIGHT_INFO* pInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_TRAFFICLIGHT_INFO
{
    DWORD dwSize;               
    fTrafficLightState cbState; 
    LDWORD dwUser;              
} NET_IN_ATTACH_TRAFFICLIGHT_INFO;
typedef struct tagNET_OUT_ATTACH_TRAFFICLIGHT_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_TRAFFICLIGHT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetCameraCfg(LLONG lLoginID, NET_IN_SET_CAMERA_CFG* pInParam, NET_OUT_SET_CAMERA_CFG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCameraCfg(LLONG lLoginID, NET_IN_GET_CAMERA_CFG* pInParam, NET_OUT_GET_CAMERA_CFG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetChannelCfg(LLONG lLoginID, NET_IN_SET_CHANNEL_CFG* pInParam, NET_OUT_SET_CHANNEL_CFG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetChannelCfg(LLONG lLoginID, NET_IN_GET_CHANNEL_CFG* pInParam, NET_OUT_GET_CHANNEL_CFG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDetectMode(LLONG lLoginID, NET_IN_SET_DETECT_MODE* pInParam, NET_OUT_SET_DETECT_MODE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDetectMode(LLONG lLoginID, NET_IN_GET_DETECT_MODE* pInParam, NET_OUT_GET_DETECT_MODE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCameraInfo(LLONG lLoginID, NET_IN_GET_CAMERA_INFO* pInParam, NET_OUT_GET_CAMERA_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachTrafficLightState(LLONG lLoginID, NET_IN_ATTACH_TRAFFICLIGHT_INFO* pInParam, NET_OUT_ATTACH_TRAFFICLIGHT_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachTrafficLightState(LLONG lAttchHandle);
typedef struct tagNET_IN_GETAREA_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GETAREA_INFO;
typedef enum tagEM_AREA_RULE_TYPE
{
    EM_AREA_RULE_UNKNOWN,           
    EM_AREA_RULE_QUEUE_DETECTION,   
    EM_AREA_RULE_MAN_NUM_DETECTION, 
    EM_AREA_RULE_NUMBERSTAT,        
    EM_AREA_RULE_STEREO_NUMBERSTAT, 
} EM_AREA_RULE_TYPE;
typedef struct tagNET_GETAREA_INFO
{
    unsigned short nAreaId;           
    BYTE byReserved1[2];              
    EM_AREA_RULE_TYPE emAreaRuleType; 
    int nPointNum;                    
    NET_POINT stuDetectRegion[20];    
    char szAreaName[64];              
    BYTE byReserved[1024];            
} NET_GETAREA_INFO;
typedef struct tagNET_OUT_GETAREA_INFO
{
    DWORD dwSize;                     
    int nChannle;                     
    int nAreaCount;                   
    NET_GETAREA_INFO stuAreaInfo[20]; 
} NET_OUT_GETAREA_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAreaInfo(LLONG lLoginID, const NET_IN_GETAREA_INFO* pInParam, NET_OUT_GETAREA_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_VEHICLES_INFO
{
    DWORD dwSize;           
    UINT nChannel;          
    int nPointNum;          
    NET_POINT stuPoint[32]; 
} NET_IN_GET_VEHICLES_INFO;
typedef struct tagNET_VEHICLES_INFO_IN_REGION
{
    UINT nVehicleQuantity; 
    BYTE byReserved[1024]; 
} NET_VEHICLES_INFO_IN_REGION;
typedef struct tagNET_OUT_GET_VEHICLES_INFO
{
    DWORD dwSize;                                
    NET_VEHICLES_INFO_IN_REGION stuVehiclesInfo; 
} NET_OUT_GET_VEHICLES_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRealTimeVehiclesInfoByRegion(LLONG lLoginID, NET_IN_GET_VEHICLES_INFO* pInParam, NET_OUT_GET_VEHICLES_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_VEHICLES_DISTRIBUTION_DATA
{
    UINT nPtzPresetId;            
    UINT nRuleId;                 
    UINT nRuleType;               
    UINT nVehiclesNum;            
    UINT nQueueLen;               
    NET_UINT_POINT stuRegion[32]; 
    int nRegionNum;               
    UINT nVehiclesLimit;          
    char szRuleName[32];          
} NET_VEHICLES_DISTRIBUTION_DATA;
typedef struct tagNET_CB_VEHICLES_DISTRIBUTION_DATA
{
    UINT nSID;                                          
    UINT nChannel;                                      
    UINT nVehiclesDataNums;                             
    NET_VEHICLES_DISTRIBUTION_DATA stuVehiclesData[16]; 
} NET_CB_VEHICLES_DISTRIBUTION_DATA;
typedef int(CALLBACK* fNotifyVehiclesDistributionData)(LLONG lVehiclesHandle, NET_CB_VEHICLES_DISTRIBUTION_DATA* pDiagnosisInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_VEHICLES_DISTRIBUTION_DATA
{
    DWORD dwSize;                                     
    DWORD dwWaitTime;                                 
    UINT nChannelID;                                  
    fNotifyVehiclesDistributionData cbNotifySnapData; 
    LDWORD dwUser;                                    
} NET_IN_ATTACH_VEHICLES_DISTRIBUTION_DATA;
typedef struct tagNET_OUT_ATTACH_VEHICLES_DISTRIBUTION_DATA
{
    DWORD dwSize; 
} NET_OUT_ATTACH_VEHICLES_DISTRIBUTION_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachVehiclesDistributionData(LLONG lLoginID, NET_IN_ATTACH_VEHICLES_DISTRIBUTION_DATA* pstInParam, NET_OUT_ATTACH_VEHICLES_DISTRIBUTION_DATA* pstOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachVehiclesDistributionData(LLONG lAttachHandle);
typedef struct tagNET_REGION_PEOPLE_STAT_INFO
{
    UINT nRegionID;               
    char szRegionName[128];       
    UINT nRegionPointNum;         
    NET_POINT stuRegionPoint[20]; 
    UINT nPeopleNum;              
    BYTE byReserved[1024];        
} NET_REGION_PEOPLE_STAT_INFO;
typedef struct tagNET_CROWD_STAT_DATA
{
    UINT nChannelID;                                
    UINT nGloabalPeopleNum;                         
    UINT nRegionNum;                                
    NET_REGION_PEOPLE_STAT_INFO stuRegionPeople[8]; 
    BYTE byReserved[1024];                          
} NET_CROWD_STAT_DATA;
typedef struct tagNET_CB_CROWD_DISTRI_STREAM_INFO
{
    UINT nCrowStatNum;                       
    NET_CROWD_STAT_DATA stuCrowdStatData[8]; 
    BYTE byReserved[2048];                   
} NET_CB_CROWD_DISTRI_STREAM_INFO;
typedef void(CALLBACK* fCrowdDistriStream)(LLONG lAttachHandle, NET_CB_CROWD_DISTRI_STREAM_INFO* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CROWDDISTRI_MAP_INFO
{
    DWORD dwSize;                           
    UINT nChannelID;                        
    fCrowdDistriStream cbCrowdDistriStream; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_CROWDDISTRI_MAP_INFO;
typedef struct tagNET_OUT_ATTACH_CROWDDISTRI_MAP_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_CROWDDISTRI_MAP_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachCrowdDistriMap(LLONG lLoginID, NET_IN_ATTACH_CROWDDISTRI_MAP_INFO* pstInParam, NET_OUT_ATTACH_CROWDDISTRI_MAP_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachCrowdDistriMap(LLONG lAttachHandle);
typedef struct tagNET_GETSUMMARY_REGION_PEOPLE_LIST_INFO
{
    UINT nRegionID;               
    UINT nRegionPeopleNum;        
    UINT nRegionPointNum;         
    NET_POINT stuRegionPoint[20]; 
    char szReserved[1024];        
} NET_GETSUMMARY_REGION_PEOPLE_LIST_INFO;
typedef struct tagNET_GETSUMMARY_CROWD_LIST_INFO
{
    NET_POINT stuCenter;   
    UINT nRadius;          
    char szReserved[1024]; 
} NET_GETSUMMARY_CROWD_LIST_INFO;
typedef struct tagNET_GETSUMMARY_REGION_LIST_INFO
{
    UINT nRegionID;               
    UINT nPeopleNum;              
    UINT nRegionPointNum;         
    NET_POINT stuRegionPoint[20]; 
    char szReserved[1024];        
} NET_GETSUMMARY_REGION_LIST_INFO;
typedef struct tagNET_GETSUMMARY_CROWD_STAT_DATA
{
    UINT nChannelID;                                                
    UINT nGloabalPeopleNum;                                         
    UINT nRegionNum;                                                
    NET_GETSUMMARY_REGION_PEOPLE_LIST_INFO stuRegionPeopleList[16]; 
    UINT nCrowdEventNum;                                            
    NET_GETSUMMARY_CROWD_LIST_INFO stuCrowdList[5];                 
    UINT nRegionEventNum;                                           
    NET_GETSUMMARY_REGION_LIST_INFO stuRegionList[8];               
    char szReserved[1024];                                          
} NET_GETSUMMARY_CROWD_STAT_DATA;
typedef struct tagNET_IN_GETSUMMARY_CROWDDISTRI_MAP_INFO
{
    DWORD dwSize;    
    UINT nChannelID; 
} NET_IN_GETSUMMARY_CROWDDISTRI_MAP_INFO;
typedef struct tagNET_OUT_GETSUMMARY_CROWDDISTRI_MAP_INFO
{
    DWORD dwSize;                                       
    int nCrowdStatNum;                                  
    NET_GETSUMMARY_CROWD_STAT_DATA stuCrowdStatData[8]; 
} NET_OUT_GETSUMMARY_CROWDDISTRI_MAP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSummaryCrowdDistriMap(LLONG lLoginID, NET_IN_GETSUMMARY_CROWDDISTRI_MAP_INFO* pstInParam, NET_OUT_GETSUMMARY_CROWDDISTRI_MAP_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_PING_INFO
{
    char szAddress[128];  
    BYTE byReserved[512]; 
} NET_PING_INFO;
typedef struct tagNET_IN_GET_PING_STATUS_INFO
{
    DWORD dwSize;              
    NET_PING_INFO stuPingInfo; 
} NET_IN_GET_PING_STATUS_INFO;
typedef struct tagNET_PING_STATUS_INFO
{
    float fAveDelay;      
    float fLossRate;      
    BYTE byReserved[512]; 
} NET_PING_STATUS_INFO;
typedef struct tagNET_OUT_GET_PING_STATUS_INFO
{
    DWORD dwSize;                       
    NET_PING_STATUS_INFO stuPingStatus; 
} NET_OUT_GET_PING_STATUS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPingStatus(LLONG lLoginID, NET_IN_GET_PING_STATUS_INFO* pInParam, NET_OUT_GET_PING_STATUS_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_REMOTE_CHANNEL_ALARM_STATE
{
    DWORD dwSize;       
    UINT nChannelNum;   
    UINT nChannel[128]; 
} NET_IN_GET_REMOTE_CHANNEL_ALARM_STATE;
typedef struct tagNET_ALARM_CHANNEL_STATE
{
    int nChannel;         
    DWORD dwAlatmInState; 
    BYTE byReserved[256]; 
} NET_ALARM_CHANNEL_STATE;
typedef struct tagNET_OUT_GET_REMOTE_CHANNEL_ALARM_STATE
{
    DWORD dwSize;                                      
    UINT nAlarmChannelNum;                             
    NET_ALARM_CHANNEL_STATE stuAlarmChannelState[128]; 
} NET_OUT_GET_REMOTE_CHANNEL_ALARM_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevRemoteChannelAlarmState(LLONG lLoginID, NET_IN_GET_REMOTE_CHANNEL_ALARM_STATE* pstInParam, NET_OUT_GET_REMOTE_CHANNEL_ALARM_STATE* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_REMOTE_IN_CHANNEL_ALARM_SLOTS
{
    DWORD dwSize;      
    UINT nChannelNum;  
    int nChannel[128]; 
} NET_IN_GET_REMOTE_IN_CHANNEL_ALARM_SLOTS;
typedef struct tagNET_ALARM_IN_CHANNEL_SLOTS
{
    int nChannel;         
    int nInputs;          
    BYTE byReserved[256]; 
} NET_ALARM_IN_CHANNEL_SLOTS;
typedef struct tagNET_OUT_GET_REMOTE_IN_CHANNEL_ALARM_SLOTS
{
    DWORD dwSize;                                         
    UINT nAlarmChannelNum;                                
    NET_ALARM_IN_CHANNEL_SLOTS stuAlarmChannelSlots[128]; 
} NET_OUT_GET_REMOTE_IN_CHANNEL_ALARM_SLOTS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevRemoteInChannelAlarmSlots(LLONG lLoginID, NET_IN_GET_REMOTE_IN_CHANNEL_ALARM_SLOTS* pstInParam, NET_OUT_GET_REMOTE_IN_CHANNEL_ALARM_SLOTS* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_REMOTE_ALARM_CONFIG_INFO
{
    DWORD dwSize;             
    int nChannel;             
    BOOL bIsUseDeviceID;      
    BOOL bEnableAlarmChannel; 
    int nAlarmChannel;        
    BOOL bOnlyLocal;          
    char szDeviceID[128];     
} NET_IN_GET_REMOTE_ALARM_CONFIG_INFO;
typedef struct tagNET_ALARM_CONFIG_REMOTE_INFO
{
    char szName[64];       
    char szReserved[1024]; 
} NET_ALARM_CONFIG_REMOTE_INFO;
typedef struct tagNET_ALARM_CONFIG_LOCAL_INFO
{
    int nRemoteAlarmInfoNum;                           
    int nRemoteAlarmInfoRealNum;                       
    NET_ALARM_CONFIG_REMOTE_INFO* pstuRemoteAlarmInfo; 
} NET_ALARM_CONFIG_LOCAL_INFO;
typedef struct tagNET_OUT_GET_REMOTE_ALARM_CONFIG_INFO
{
    DWORD dwSize;                                        
    int nLoaclAlarmNum;                                  
    NET_ALARM_CONFIG_LOCAL_INFO stuLoaclAlarmInfo[1024]; 
} NET_OUT_GET_REMOTE_ALARM_CONFIG_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteAlarmConfig(LLONG lLoginID, NET_IN_GET_REMOTE_ALARM_CONFIG_INFO* pstInParam, NET_OUT_GET_REMOTE_ALARM_CONFIG_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_ACCESSCONTROL_PROGRESS_TYPE
{
    EM_ACCESSCONTROL_PROGRESS_IMPORT, 
    EM_ACCESSCONTROL_PROGRESS_DEPLOY, 
} EM_ACCESSCONTROL_PROGRESS_TYPE;
typedef enum tagEM_ACCESSCONTROL_IMPORT_STATE
{
    EM_ACCESSCONTROL_IMPORT_UNKNOWN,      
    EM_ACCESSCONTROL_IMPORT_ONGING,       
    EM_ACCESSCONTROL_IMPORT_END,          
    EM_ACCESSCONTROL_IMPORT_BUSY,         
    EM_ACCESSCONTROL_IMPORT_DATAERROR,    
    EM_ACCESSCONTROL_IMPORT_INVALID,      
    EM_ACCESSCONTROL_IMPORT_SYNC_SUCCESS, 
    EM_ACCESSCONTROL_IMPORT_SYNC_FALIED,  
    EM_ACCESSCONTROL_IMPORT_DBFULL,       
    EM_ACCESSCONTROL_IMPORT_SDFULL,       
    EM_ACCESSCONTROL_IMPORT_CIPHER_ERROR, 
    EM_ACCESSCONTROL_IMPORT_SEND_FAIL,    
} EM_ACCESSCONTROL_IMPORT_STATE;
typedef struct tagNET_IMPORT_ACCESSCONTROL_STATE
{
    unsigned int nProgress;                       
    EM_ACCESSCONTROL_PROGRESS_TYPE emProcessType; 
    EM_ACCESSCONTROL_IMPORT_STATE emState;        
    BYTE byReserved[512];                         
} NET_IMPORT_ACCESSCONTROL_STATE;
typedef void(CALLBACK* fImportAccessControlDataCallBack)(LLONG lImportHandle, NET_IMPORT_ACCESSCONTROL_STATE* pstAccessControlState, LDWORD dwUser);
typedef struct tagNET_IN_IMPORT_ACCESS_CONTROL_DATA
{
    DWORD dwSize;                                   
    DWORD dwDataType;                               
    char szPassWord[DH_COMMON_STRING_64];           
    char szFilePath[MAX_FILE_PATH_LEN];             
    UINT nBeforeLen;                                
    BYTE byReserved[4];                             
    fImportAccessControlDataCallBack cbImportState; 
    LDWORD dwUser;                                  
} NET_IN_IMPORT_ACCESS_CONTROL_DATA;
typedef struct tagNET_OUT_IMPORT_ACCESS_CONTROL_DATA
{
    DWORD dwSize; 
} NET_OUT_IMPORT_ACCESS_CONTROL_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ImportAccessControlData(LLONG lLoginID, NET_IN_IMPORT_ACCESS_CONTROL_DATA* pstInParam,
                                                                NET_OUT_IMPORT_ACCESS_CONTROL_DATA* pstOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopImportAccessControlData(LLONG lImportHandle);
typedef enum tagEM_EXPORT_FAST_CHECK_ERRORCODE
{
    EM_EXPORT_FAST_CHECK_SUCCESS = 1,      
    EM_EXPORT_FAST_CHECK_NO_AUTHORITY = 2, 
    EM_EXPORT_FAST_CHECK_NO_THIS_FILE = 3, 
    EM_EXPORT_FAST_CHECK_EXPORT_END = 4,   
    EM_EXPORT_FAST_CHECK_EXPORTING = 5,    
    EM_EXPORT_FAST_CHECK_FILE_READY = 8,   
    EM_EXPORT_FAST_CHECK_FILE_FAILED = 9,  
    EM_EXPORT_FAST_CHECK_WAIT_FILE = 10,   
    EM_EXPORT_FAST_CHECK_SYSTEM_BUSY = 11, 
    EM_EXPORT_FAST_CHECK_NO_PASSWORD = 12, 
} EM_EXPORT_FAST_CHECK_ERRORCODE;
typedef struct tagNET_EXPORT_FAST_CHECK_STATE
{
    unsigned int nProgress;                     
    EM_EXPORT_FAST_CHECK_ERRORCODE emErrorCode; 
    char* pDataBuf;                             
    DWORD dwDataLen;                            
    BYTE byReserved[516];                       
} NET_EXPORT_FAST_CHECK_STATE;
typedef void(CALLBACK* fExportFastCheckCallBack)(LLONG lExportHandle, NET_EXPORT_FAST_CHECK_STATE* pstFastCheckState, LDWORD dwUser);
typedef struct tagNET_IN_EXPORT_ACCESSCONTROL_FASTCHECK_DATA
{
    DWORD dwSize;                                       
    DWORD dwDataType;                                   
    char szPassWord[DH_COMMON_STRING_64];               
    fExportFastCheckCallBack cbExportFastCheckCallBack; 
    LDWORD dwUser;                                      
} NET_IN_EXPORT_ACCESSCONTROL_FASTCHECK_DATA;
typedef struct tagNET_OUT_EXPORT_ACCESSCONTROL_FASTCHECK_DATA
{
    DWORD dwSize; 
} NET_OUT_EXPORT_ACCESSCONTROL_FASTCHECK_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ExportAccessControlFastCheckData(LLONG lLoginID, NET_IN_EXPORT_ACCESSCONTROL_FASTCHECK_DATA* pstInParam,
                                                                         NET_OUT_EXPORT_ACCESSCONTROL_FASTCHECK_DATA* pstOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopExportAccessControlFastCheckData(LLONG lExportHandle);
typedef struct tagNET_IN_GET_USB_INFO
{
    DWORD dwSize; 
} NET_IN_GET_USB_INFO;
typedef enum EM_USB_PROTOCOL_TYPE
{
    EM_USB_PROTOCOL_TYPE_UNKNOWN, 
    EM_USB_PROTOCOL_TYPE_V2,      
    EM_USB_PROTOCOL_TYPE_V3,      
} EM_USB_PROTOCOL_TYPE;
typedef struct tagNET_OUT_GET_USB_INFO
{
    DWORD dwSize;                
    EM_USB_PROTOCOL_TYPE emType; 
} NET_OUT_GET_USB_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetUSBInfo(LLONG lLoginID, NET_IN_GET_USB_INFO* pstuIn, NET_OUT_GET_USB_INFO* pstuOut, int nWaitTime);
typedef enum EM_RECHARGE_BUSINESS_QUERY_TYPE
{
    EM_RECHARGE_BUSINESS_QUERY_TYPE_UNKNOWN = 0, 
    EM_RECHARGE_BUSINESS_QUERY_TYPE_CARD,        
    EM_RECHARGE_BUSINESS_QUERY_TYPE_HUMANFACE,   
} EM_RECHARGE_BUSINESS_QUERY_TYPE;
typedef enum EM_RECHARGE_BUSINESS_OPERATE_TYPE
{
    EM_RECHARGE_BUSINESS_OPERATE_TYPE_UNKNOWN = 0, 
    EM_RECHARGE_BUSINESS_OPERATE_TYPE_QUERY,       
    EM_RECHARGE_BUSINESS_OPERATE_TYPE_RECHARGE,    
} EM_RECHARGE_BUSINESS_OPERATE_TYPE;
typedef struct tagNET_RECHARGE_BUSINESS_QUERY_EVENT_INFO
{
    EM_RECHARGE_BUSINESS_QUERY_TYPE emQueryType; 
    char szCardNo[32];                           
    char szUserID[32];                           
    NET_TIME_EX stuTime;                         
    char* pszFaceData;                           
    int nFaceDataLen;                            
} NET_RECHARGE_BUSINESS_QUERY_EVENT_INFO;
typedef struct tagNET_RECHARGE_BUSINESS_RECHARGE_EVENT_INFO
{
    EM_RECHARGE_BUSINESS_QUERY_TYPE emQueryType; 
    char szCardNo[32];                           
    char szUserID[32];                           
    NET_TIME_EX stuTime;                         
    char* pszFaceData;                           
    int nFaceDataLen;                            
    int nAmount;                                 
} NET_RECHARGE_BUSINESS_RECHARGE_EVENT_INFO;
typedef struct tagNET_RECHARGE_BUSINESS_INFO
{
    EM_RECHARGE_BUSINESS_OPERATE_TYPE emOperateType; 
    BYTE byReserved[4];                              
    char szBusinessID[32];                           
    void* pstuEventInfo;                             
} NET_RECHARGE_BUSINESS_INFO;
typedef void(CALLBACK* fRechargeBusiness)(LLONG lAttachHandle, NET_RECHARGE_BUSINESS_INFO* pInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_RECHARGE_BUSINESS
{
    DWORD dwSize;               
    BYTE szReserved[4];         
    fRechargeBusiness cbNotify; 
    LDWORD dwUser;              
} NET_IN_ATTACH_RECHARGE_BUSINESS;
typedef struct tagNET_OUT_ATTACH_RECHARGE_BUSINESS
{
    DWORD dwSize; 
} NET_OUT_ATTACH_RECHARGE_BUSINESS;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachRechargeBusiness(LLONG lLoginID, NET_IN_ATTACH_RECHARGE_BUSINESS* pInParam, NET_OUT_ATTACH_RECHARGE_BUSINESS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachRechargeBusiness(LLONG lAttachHandle);
typedef enum EM_RECHARGE_BUSINESS_ERROR_CODE
{
    EM_RECHARGE_BUSINESS_ERRORCODE_UNKNOWN = -1,                            
    EM_RECHARGE_BUSINESS_ERRORCODE_NONE,                                    
    EM_RECHARGE_BUSINESS_ERRORCODE_UNAUTHORIZED_CARD = 11,                  
    EM_RECHARGE_BUSINESS_ERRORCODE_INVALID_CARD = 14,                       
    EM_RECHARGE_BUSINESS_ERRORCODE_EXCEED_MAX_AMOUNT = 48,                  
    EM_RECHARGE_BUSINESS_ERRORCODE_INVALID_TERMINAL = 89,                   
    EM_RECHARGE_BUSINESS_ERRORCODE_SYSTEM_EXCEPTION = 96,                   
    EM_RECHARGE_BUSINESS_ERRORCODE_EXCEED_DAY_RECHARGE_NUM = 107,           
    EM_RECHARGE_BUSINESS_ERRORCODE_EXCEED_SINGLE_MAX_RECHARGE_AMOUNT = 108, 
} EM_RECHARGE_BUSINESS_ERROR_CODE;
typedef struct tagNET_IN_RECHARGE_BUSINESS_QUERY_RESULT
{
    DWORD dwSize;                                
    char szCardNo[32];                           
    char szUserID[32];                           
    char szBusinessID[32];                       
    int nBalance;                                
    EM_RECHARGE_BUSINESS_ERROR_CODE emErrorCode; 
} NET_IN_RECHARGE_BUSINESS_QUERY_RESULT;
typedef struct tagNET_OUT_RECHARGE_BUSINESS_QUERY_RESULT
{
    DWORD dwSize; 
} NET_OUT_RECHARGE_BUSINESS_QUERY_RESULT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRechargeBusinessQueryResult(LLONG lLoginID, NET_IN_RECHARGE_BUSINESS_QUERY_RESULT* pInParam, NET_OUT_RECHARGE_BUSINESS_QUERY_RESULT* pOutParam, int nWaitTime);
typedef struct tagNET_IN_RECHARGE_BUSINESS_RECHARGE_RESULT
{
    DWORD dwSize;                                
    char szCardNo[32];                           
    char szUserID[32];                           
    char szBusinessID[32];                       
    int nBalance;                                
    EM_RECHARGE_BUSINESS_ERROR_CODE emErrorCode; 
} NET_IN_RECHARGE_BUSINESS_RECHARGE_RESULT;
typedef struct tagNET_OUT_RECHARGE_BUSINESS_RECHARGE_RESULT
{
    DWORD dwSize; 
} NET_OUT_RECHARGE_BUSINESS_RECHARGE_RESULT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRechargeBusinessRechargeResult(LLONG lLoginID, NET_IN_RECHARGE_BUSINESS_RECHARGE_RESULT* pInParam, NET_OUT_RECHARGE_BUSINESS_RECHARGE_RESULT* pOutParam, int nWaitTime);
typedef enum tagEM_SHOW_COLOR
{
    EM_SHOW_COLOR_UNKNOWN, 
    EM_SHOW_COLOR_BLUE,    
    EM_SHOW_COLOR_YELLOW,  
    EM_SHOW_COLOR_ORANGE,  
    EM_SHOW_COLOR_RED,     
} EM_SHOW_COLOR;
typedef struct tagNET_IN_PERSON_INFO_INPUT_RESULT
{
    DWORD dwSize;          
    int nChannelID;        
    UINT nResult;          
    BYTE byReserved[4];    
    char szCitizenID[64];  
    EM_SHOW_COLOR emColor; 
    UINT nDataType;        
} NET_IN_PERSON_INFO_INPUT_RESULT;
typedef struct tagNET_OUT_PERSON_INFO_INPUT_RESULT
{
    DWORD dwSize; 
} NET_OUT_PERSON_INFO_INPUT_RESULT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPersonInfoInputResult(LLONG lLoginID, NET_IN_PERSON_INFO_INPUT_RESULT* pInParam, NET_OUT_PERSON_INFO_INPUT_RESULT* pOutParam, int nWaitTime);
typedef struct tagNET_IN_PLAYBACK_BY_SECONDARYANALYSE
{
    DWORD dwSize;                        
    int nChannelID;                      
    NET_TIME stBeginTime;                
    NET_TIME stEndTime;                  
    HWND hWnd;                           
    fDownLoadPosCallBack cbDownLoadPos;  
    LDWORD dwPosUser;                    
    fDataCallBack fDownLoadDataCallBack; 
    LDWORD dwDataUser;                   
    int nPlayDirection;                  
    int nTaskID;                         
} NET_IN_PLAYBACK_BY_SECONDARYANALYSE;
typedef struct tagNET_OUT_PLAYBACK_BY_SECONDARYANALYSE
{
    DWORD dwSize; 
} NET_OUT_PLAYBACK_BY_SECONDARYANALYSE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackBySecondaryAnalyse(LLONG lLoginID, NET_IN_PLAYBACK_BY_SECONDARYANALYSE* pInParam, NET_OUT_PLAYBACK_BY_SECONDARYANALYSE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_PLAYBACK_SECONDARYANALYSE_BY_FILE
{
    DWORD dwSize;                        
    int nTaskID;                         
    NET_RECORDFILE_INFO stuRecordInfo;   
    HWND hWnd;                           
    fDownLoadPosCallBack cbDownLoadPos;  
    fDataCallBack fDownLoadDataCallBack; 
    LDWORD dwUserData;                   
    LDWORD dwDataUser;                   
    int nPlayDirection;                  
    char szResvered[4];                  
} NET_IN_PLAYBACK_SECONDARYANALYSE_BY_FILE;
typedef struct tagNET_OUT_PLAYBACK_SECONDARYANALYSE_BY_FILE
{
    DWORD dwSize; 
} NET_OUT_PLAYBACK_SECONDARYANALYSE_BY_FILE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_PlayBackSecondaryAnalyseByFile(LLONG lLoginID, NET_IN_PLAYBACK_SECONDARYANALYSE_BY_FILE* pstuInParam, NET_OUT_PLAYBACK_SECONDARYANALYSE_BY_FILE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_DOWNLOAD_BY_SECONDARYANALYSE
{
    DWORD dwSize;                        
    NET_RECORDFILE_INFO stuInfo;         
    int nTaskID;                         
    char* szSavedFileName;               
    fDownLoadPosCallBack cbDownLoadPos;  
    fDataCallBack fDownLoadDataCallBack; 
    LDWORD dwUserData;                   
    LDWORD dwDataUser;                   
} NET_IN_DOWNLOAD_BY_SECONDARYANALYSE;
typedef struct tagNET_OUT_DOWNLOAD_BY_SECONDARYANALYSE
{
    DWORD dwSize; 
} NET_OUT_DOWNLOAD_BY_SECONDARYANALYSE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DownloadBySecondaryAnalyse(LLONG lLoginID, NET_IN_DOWNLOAD_BY_SECONDARYANALYSE* pstuInParam, NET_OUT_DOWNLOAD_BY_SECONDARYANALYSE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DEV_WIFI_LIST
{
    DWORD dwSize;     
    UINT nPort;       
    char szDevIP[64]; 
} NET_IN_GET_DEV_WIFI_LIST;
typedef struct tagNET_OUT_GET_DEV_WIFI_LIST
{
    DWORD dwSize;                                         
    UINT nWlanDevCount;                                   
    DHDEV_WLAN_DEVICE_EX stuWlanDev[MAX_WLAN_DEVICE_NUM]; 
} NET_OUT_GET_DEV_WIFI_LIST;
typedef struct tagNET_IN_SET_DEV_WIFI
{
    DWORD dwSize;        
    UINT nPort;          
    char szDevIP[64];    
    int nEnable;         
    char szSSID[36];     
    int nLinkMode;       
    int nEncryption;     
    int nKeyType;        
    int nKeyID;          
    char szKeys[4][32];  
    char szWPAKeys[128]; 
    int nKeyFlag;
    int nConnectedFlag; 
    char szMacAddr[18]; 
} NET_IN_SET_DEV_WIFI;
typedef struct tagNET_OUT_SET_DEV_WIFI
{
    DWORD dwSize; 
} NET_OUT_SET_DEV_WIFI;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevWifiListInfo(NET_IN_GET_DEV_WIFI_LIST* pInParam, NET_OUT_GET_DEV_WIFI_LIST* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDevWifiInfo(NET_IN_SET_DEV_WIFI* pInParam, NET_OUT_SET_DEV_WIFI* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetWlanConfigInfo(LLONG lLoginID, NET_IN_WLAN_CONFIG_INFO* pInParam, NET_OUT_WLAN_CONFIG_INFO* pOutParam, const int nWaitTime);
typedef struct tagNET_SNAP_OBJECT_INFO
{
    NET_RECT stuBoundingBox; 
    BYTE byReserved[512];    
} NET_SNAP_OBJECT_INFO;
typedef struct tagNET_IN_SNAP_BY_ANALYSE_OBJECT
{
    DWORD dwSize;                            
    UINT nChannelID;                         
    BYTE byReserved[4];                      
    UINT nSnapObjectNum;                     
    NET_SNAP_OBJECT_INFO stuSnapObjects[32]; 
} NET_IN_SNAP_BY_ANALYSE_OBJECT;
typedef struct tagNET_OUT_SNAP_BY_ANALYSE_OBJECT
{
    DWORD dwSize; 
} NET_OUT_SNAP_BY_ANALYSE_OBJECT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SnapPictureByAnalyseObject(LLONG lLoginID, NET_IN_SNAP_BY_ANALYSE_OBJECT* pInParam, NET_OUT_SNAP_BY_ANALYSE_OBJECT* pOutParam, int nWaitTime);
typedef struct tagNET_INTELLI_STATE_INFO
{
    BOOL bSupportOnlyAlgorithmUpgrade;                               
    UINT nAlgorithmNum;                                              
    NET_ALGORITHM_INFO stuAlgorithmInfos[MAX_ANALYSE_ALGORITHM_NUM]; 
    BYTE byReserve[1024];                                            
} NET_INTELLI_STATE_INFO;
typedef void(CALLBACK* fIntelliState)(LLONG lAttachHandle, NET_INTELLI_STATE_INFO* pInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_INTELLI_STATE
{
    DWORD dwSize;           
    BYTE szReserved[4];     
    fIntelliState cbNotify; 
    LDWORD dwUser;          
} NET_IN_ATTACH_INTELLI_STATE;
typedef struct tagNET_OUT_ATTACH_INTELLI_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_INTELLI_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachIntelliState(LLONG lLoginID, NET_IN_ATTACH_INTELLI_STATE* pInParam, NET_OUT_ATTACH_INTELLI_STATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachIntelliState(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_GDPR_ABILITY
{
    DWORD dwSize; 
} NET_IN_GET_GDPR_ABILITY;
typedef enum EM_GDPR_ABILITY
{
    EM_GDPR_ABILITY_V1_STREAM = 0x01, 
    EM_GDPR_ABILITY_V2_STREAM = 0x02, 
    EM_GDPR_ABILITY_DOWNLOAD = 0x04,  
} EM_GDPR_ABILITY;
typedef struct tagNET_OUT_GET_GDPR_ABILITY
{
    DWORD dwSize; 
    int nAbility; 
} NET_OUT_GET_GDPR_ABILITY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetGDPRAbility(LLONG lLoginID, NET_IN_GET_GDPR_ABILITY* pInParam, NET_OUT_GET_GDPR_ABILITY* pOutParam, int nWaitTime);
CLIENT_NET_API void CALL_METHOD CLIENT_SetGDPREnable(BOOL bEnable);
typedef enum tagEM_FACEDB_ERRCODE
{
    EM_FACEDB_ERRCODE_UNKNOWN = -1,             
    EM_FACEDB_ERRCODE_SUCCESS,                  
    EM_FACEDB_ERRCODE_CONNECT_FAIL = 2,         
    EM_FACEDB_ERRCODE_LOGIN_FAIL,               
    EM_FACEDB_ERRCODE_RECV_TIMEOUT,             
    EM_FACEDB_ERRCODE_STRING_NULL,              
    EM_FACEDB_ERRCODE_FILE_DIRECTORY_NOT_EXIST, 
    EM_FACEDB_ERRCODE_STORAGE_FAIL,             
} EM_FACEDB_ERRCODE;
typedef struct tagNET_CB_FACEDB_DOWNLOAD_RESULT
{
    char szFaceDbVersion[32];          
    UINT nTotalDownloadCount;          
    UINT nSuccessDownloadCount;        
    EM_FACEDB_ERRCODE emFaceDbErrCode; 
    char szGroupID[64];                
    int nFaceUUIDCount;                
    char szFaceUUID[10][64];           
    BYTE byReserved[316];              
} NET_CB_FACEDB_DOWNLOAD_RESULT;
typedef void(CALLBACK* fFaceDbDownLoadResult)(LLONG lAttachHandle, NET_CB_FACEDB_DOWNLOAD_RESULT* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_FACEDB_DOWNLOAD_RESULT
{
    DWORD dwSize;                                 
    BYTE byReserved[4];                           
    fFaceDbDownLoadResult cbFaceDbDownLoadResult; 
    LDWORD dwUser;                                
} NET_IN_ATTACH_FACEDB_DOWNLOAD_RESULT;
typedef struct tagNET_OUT_ATTACH_FACEDB_DOWNLOAD_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_FACEDB_DOWNLOAD_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachFaceDbDownLoadResult(LLONG lLoginID, NET_IN_ATTACH_FACEDB_DOWNLOAD_RESULT* pInParam, NET_OUT_ATTACH_FACEDB_DOWNLOAD_RESULT* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachFaceDbDownLoadResult(LLONG lAttachHandle);
typedef struct tagNET_CB_FACEDB_MODEL_RESULT
{
    char szFaceDbVersion[32]; 
    UINT nTotalModelCount;    
    UINT nSuccessModelCount;  
    char szGroupID[64];       
    int nErrorCode;           
    int nFaceUUIDCount;       
    char szFaceUUID[10][64];  
    BYTE byReserved[1024];    
} NET_CB_FACEDB_MODEL_RESULT;
typedef void(CALLBACK* fFaceDbModelResult)(LLONG lAttachHandle, NET_CB_FACEDB_MODEL_RESULT* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_FACEDB_MODEL_RESULT
{
    DWORD dwSize;                           
    BYTE byReserved[4];                     
    fFaceDbModelResult cbFaceDbModelResult; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_FACEDB_MODEL_RESULT;
typedef struct tagNET_OUT_ATTACH_FACEDB_MODEL_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_FACEDB_MODEL_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachFaceDbModelResult(LLONG lLoginID, NET_IN_ATTACH_FACEDB_MODEL_RESULT* pstuInParam, NET_OUT_ATTACH_FACEDB_MODEL_RESULT* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachFaceDbModelResult(LLONG lAttachHandle);
typedef enum tagEM_AI_SOLUTION_ALGORITHM_TYPE
{
    EM_AI_SOLUTION_ALGORITHM_TYPE_UNKNOWN = 0,    
    EM_AI_SOLUTION_ALGORITHM_TYPE_ODSOLUTION,     
    EM_AI_SOLUTION_ALGORITHM_TYPE_OCSOLUTION,     
    EM_AI_SOLUTION_ALGORITHM_TYPE_OD_OC_SOLUTION, 
    EM_AI_SOLUTION_ALGORITHM_TYPE_BDSOLUTION,     
    EM_AI_SOLUTION_ALGORITHM_TYPE_OCRSOLUTION,    
    EM_AI_SOLUTION_ALGORITHM_TYPE_IRSOLUTION,     
} EM_AI_SOLUTION_ALGORITHM_TYPE;
typedef struct tagNET_AI_SOLUTION_INFO
{
    char szAMCC[128];                             
    EM_AI_SOLUTION_ALGORITHM_TYPE emSolutionType; 
    char szReserved[1020];                        
} NET_AI_SOLUTION_INFO;
typedef struct tagNET_CB_AI_SOLUTION_LIST
{
    NET_AI_SOLUTION_INFO stuAISolutionList[64]; 
    int nAISolutionListNum;                     
    char szReserved[1020];                      
} NET_CB_AI_SOLUTION_LIST;
typedef void(CALLBACK* fAISolutionListResult)(LLONG lAttachHandle, NET_CB_AI_SOLUTION_LIST* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_AI_SOLUTION_LIST
{
    DWORD dwSize;                                 
    BYTE byReserved[4];                           
    fAISolutionListResult cbAISolutionListResult; 
    LDWORD dwUser;                                
} NET_IN_ATTACH_AI_SOLUTION_LIST;
typedef struct tagNET_OUT_ATTACH_AI_SOLUTION_LIST
{
    DWORD dwSize; 
} NET_OUT_ATTACH_AI_SOLUTION_LIST;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachAISolutionList(LLONG lLoginID, NET_IN_ATTACH_AI_SOLUTION_LIST* pstuInParam, NET_OUT_ATTACH_AI_SOLUTION_LIST* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachAISolutionList(LLONG lAttachHandle);
typedef struct tagNET_FACEDB_DOWNLOAD_TASK_INFO
{
    UINT nURLNum;           
    char szURLList[4][256]; 
    char szID[32];          
    char szFaceUUID[32];    
    BYTE byReserved[2048];  
} NET_FACEDB_DOWNLOAD_TASK_INFO;
typedef struct tagNET_IN_ADD_FACEDB_DOWNLOAD_TASK
{
    DWORD dwSize;                               
    BOOL bIsEnd;                                
    char szFaceDbVersion[32];                   
    BYTE byReserved[4];                         
    UINT nTaskNum;                              
    NET_FACEDB_DOWNLOAD_TASK_INFO* pstTaskInfo; 
    UINT nPacketTotal;                          
    UINT nPacketIndex;                          
    char szGroupID[64];                         
} NET_IN_ADD_FACEDB_DOWNLOAD_TASK;
typedef struct tagNET_OUT_ADD_FACEDB_DOWNLOAD_TASK
{
    DWORD dwSize; 
} NET_OUT_ADD_FACEDB_DOWNLOAD_TASK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddFaceDbDownLoadTask(LLONG lLoginID, NET_IN_ADD_FACEDB_DOWNLOAD_TASK* pInParam, NET_OUT_ADD_FACEDB_DOWNLOAD_TASK* pOutParam, int nWaitTime);
typedef struct tagNET_CB_PLATENUMBERDB_DOWNLOAD_RESULT
{
    char szPlateNumberDbVersion[32];            
    UINT nTotalDownloadCount;                   
    UINT nSuccessDownloadCount;                 
    EM_FACEDB_ERRCODE emPlateNumberDbErrorCode; 
    BYTE byReserved[1020];                      
} NET_CB_PLATENUMBERDB_DOWNLOAD_RESULT;
typedef void(CALLBACK* fPlateNumberDbDownloadResult)(LLONG lAttachHandle, NET_CB_PLATENUMBERDB_DOWNLOAD_RESULT* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_PLATENUMBERDB_DOWNLOAD_RESULT
{
    DWORD dwSize;                                               
    BYTE byReserved[4];                                         
    fPlateNumberDbDownloadResult cbPlateNumberDbDownloadResult; 
    LDWORD dwUser;                                              
} NET_IN_ATTACH_PLATENUMBERDB_DOWNLOAD_RESULT;
typedef struct tagNET_OUT_ATTACH_PLATENUMBERDB_DOWNLOAD_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_PLATENUMBERDB_DOWNLOAD_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPlateNumberDbDownloadResult(LLONG lLoginID, NET_IN_ATTACH_PLATENUMBERDB_DOWNLOAD_RESULT* pInParam, NET_OUT_ATTACH_PLATENUMBERDB_DOWNLOAD_RESULT* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPlateNumberDbDownloadResult(LLONG lAttachHandle);
typedef struct tagNET_PLATE_NUMBER_DB_DOWNLOAD_TASK_INFO
{
    UINT nURLNum;           
    char szURLList[4][256]; 
    BYTE byReserved[1020];  
} NET_PLATE_NUMBER_DB_DOWNLOAD_TASK_INFO;
typedef struct tagNET_IN_ADD_PLATE_NUMBER_DB_DOWNLOAD_TASK
{
    DWORD dwSize;                                        
    UINT nTaskNum;                                       
    NET_PLATE_NUMBER_DB_DOWNLOAD_TASK_INFO* pstTaskInfo; 
    char szPlateNumberDbVersion[32];                     
    UINT nPacketTotal;                                   
    UINT nPacketIndex;                                   
} NET_IN_ADD_PLATE_NUMBER_DB_DOWNLOAD_TASK;
typedef struct tagNET_OUT_ADD_PLATE_NUMBER_DB_DOWNLOAD_TASK
{
    DWORD dwSize; 
} NET_OUT_ADD_PLATE_NUMBER_DB_DOWNLOAD_TASK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddPlateNumberDbDownloadTask(LLONG lLoginID, NET_IN_ADD_PLATE_NUMBER_DB_DOWNLOAD_TASK* pInParam, NET_OUT_ADD_PLATE_NUMBER_DB_DOWNLOAD_TASK* pOutParam, int nWaitTime);
typedef struct tagNET_PIC_FILE_DOWNLOAD_TASK_INFO
{
    UINT nTaskId;           
    UINT nURLNum;           
    char szURLList[4][256]; 
    BYTE byReserved[1024];  
} NET_PIC_FILE_DOWNLOAD_TASK_INFO;
typedef struct tagNET_IN_ADD_PIC_FILE_DOWNLOAD_TASK
{
    DWORD dwSize;                                 
    UINT nPacketTotal;                            
    UINT nPacketIndex;                            
    UINT nDelayTime;                              
    NET_PIC_FILE_DOWNLOAD_TASK_INFO* pstTaskInfo; 
    UINT nTaskNum;                                
} NET_IN_ADD_PIC_FILE_DOWNLOAD_TASK;
typedef struct tagNET_OUT_ADD_PIC_FILE_DOWNLOAD_TASK
{
    DWORD dwSize; 
} NET_OUT_ADD_PIC_FILE_DOWNLOAD_TASK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddPicFileDownloadTask(LLONG lLoginID, const NET_IN_ADD_PIC_FILE_DOWNLOAD_TASK* pInParam, NET_OUT_ADD_PIC_FILE_DOWNLOAD_TASK* pOutParam, int nWaitTime);
typedef enum tagEM_PIC_FILE_ERRCODE
{
    EM_PIC_FILE_ERRCODE_UNKNOWN = -1,             
    EM_PIC_FILE_ERRCODE_SUCCESS,                  
    EM_PIC_FILE_ERRCODE_CONNECT_FAIL = 2,         
    EM_PIC_FILE_ERRCODE_LOGIN_FAIL,               
    EM_PIC_FILE_ERRCODE_RECV_TIMEOUT,             
    EM_PIC_FILE_ERRCODE_STRING_NULL,              
    EM_PIC_FILE_ERRCODE_FILE_DIRECTORY_NOT_EXIST, 
    EM_PIC_FILE_ERRCODE_STORAGE_FAIL,             
} EM_PIC_FILE_ERRCODE;
typedef struct tagNET_PIC_FILE_URL_LIST_INFO
{
    EM_PIC_FILE_ERRCODE emPicFileDbErrorCode; 
    UINT nTaskId;                             
    char szFileUrl[256];                      
    BYTE byReserved[256];                     
} NET_PIC_FILE_URL_LIST_INFO;
typedef struct tagNET_CB_PIC_FILE_DOWNLOAD_RESULT
{
    NET_PIC_FILE_URL_LIST_INFO* pUrlList; 
    int nUrlListNum;                      
    BYTE byReserved[1020];                
} NET_CB_PIC_FILE_DOWNLOAD_RESULT;
typedef void(CALLBACK* fPicFileDownloadResult)(LLONG lAttachHandle, NET_CB_PIC_FILE_DOWNLOAD_RESULT* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_PIC_FILE_DOWNLOAD_RESULT
{
    DWORD dwSize;                                   
    BYTE byReserved[4];                             
    fPicFileDownloadResult cbPicFileDownloadResult; 
    LDWORD dwUser;                                  
} NET_IN_ATTACH_PIC_FILE_DOWNLOAD_RESULT;
typedef struct tagNET_OUT_ATTACH_PIC_FILE_DOWNLOAD_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_PIC_FILE_DOWNLOAD_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPicFileDownloadResult(LLONG lLoginID, const NET_IN_ATTACH_PIC_FILE_DOWNLOAD_RESULT* pInParam, NET_OUT_ATTACH_PIC_FILE_DOWNLOAD_RESULT* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPicFileDownloadResult(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_PLATE_NUMBER_DB_VERSION
{
    DWORD dwSize; 
} NET_IN_GET_PLATE_NUMBER_DB_VERSION;
typedef struct tagNET_OUT_GET_PLATE_NUMBER_DB_VERSION
{
    DWORD dwSize;                    
    char szPlateNumberDbVersion[32]; 
} NET_OUT_GET_PLATE_NUMBER_DB_VERSION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPlateNumberDbVersion(LLONG lLoginID, NET_IN_GET_PLATE_NUMBER_DB_VERSION* pInParam, NET_OUT_GET_PLATE_NUMBER_DB_VERSION* pOutParam, int nWaitTime);
typedef enum tagEM_FTP_PROTOCOL_TYPE
{
    EM_FTP_PROTOCOL_TYPE_UNKNOWN = -1, 
    EM_FTP_PROTOCOL_TYPE_FTPS,         
} EM_FTP_PROTOCOL_TYPE;
typedef struct tagNET_FTP_SERVER_INFO
{
    char szIP[32];                          
    char szUserName[32];                    
    char szPassword[32];                    
    UINT nPort;                             
    EM_FTP_PROTOCOL_TYPE emFtpProtocolType; 
    UINT nTimeOut;                          
    char szDirectory[128];                  
    BYTE byReserved[1020];                  
} NET_FTP_SERVER_INFO;
typedef struct tagNET_IN_SEND_FTP_UPLOAD_SERVER_INFO
{
    DWORD dwSize;                            
    UINT nFtpServerNum;                      
    NET_FTP_SERVER_INFO stuFtpServerInfo[4]; 
} NET_IN_SEND_FTP_UPLOAD_SERVER_INFO;
typedef struct tagNET_OUT_SEND_FTP_UPLOAD_SERVER_INFO
{
    DWORD dwSize; 
} NET_OUT_SEND_FTP_UPLOAD_SERVER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendFtpUploadServerInfo(LLONG lLoginID, NET_IN_SEND_FTP_UPLOAD_SERVER_INFO* pInParam, NET_OUT_SEND_FTP_UPLOAD_SERVER_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_FILE_UPLOAD_RESULT_CODE
{
    EM_FILE_UPLOAD_RESULT_CODE_UNKNOWN = -1,     
    EM_FILE_UPLOAD_RESULT_CODE_SUCCESS,          
    EM_FILE_UPLOAD_RESULT_CODE_CONNECT_FAIL = 2, 
    EM_FILE_UPLOAD_RESULT_CODE_LOGIN_FAIL,       
    EM_FILE_UPLOAD_RESULT_CODE_RCV_TIMEOUT,      
    EM_FILE_UPLOAD_RESULT_CODE_OBJ_STR_NULL,     
    EM_FILE_UPLOAD_RESULT_CODE_NO_FOLD_FILE,     
    EM_FILE_UPLOAD_RESULT_CODE_STORE_FAIL,       
    EM_FILE_UPLOAD_RESULT_CODE_SEND_FAIL,        
} EM_FILE_UPLOAD_RESULT_CODE;
typedef struct tagNET_FILE_UPLOAD_RESULT_INFO
{
    char szFileUrl[256];                     
    EM_FILE_UPLOAD_RESULT_CODE emResultCode; 
    BYTE byReserved[1020];                   
} NET_FILE_UPLOAD_RESULT_INFO;
typedef struct tagNET_CB_FILE_UPLOAD_RESULT
{
    UINT nResultNum;                                    
    NET_FILE_UPLOAD_RESULT_INFO stuUploadResultInfo[4]; 
    BYTE byReserved[1024];                              
} NET_CB_FILE_UPLOAD_RESULT;
typedef void(CALLBACK* fFileUploadResult)(LLONG lAttachHandle, NET_CB_FILE_UPLOAD_RESULT* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_FILE_UPLOAD_RESULT
{
    DWORD dwSize;                         
    BYTE byReserved[4];                   
    fFileUploadResult cbFileUploadResult; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_FILE_UPLOAD_RESULT;
typedef struct tagNET_OUT_ATTACH_FILE_UPLOAD_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_FILE_UPLOAD_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachFileUploadResult(LLONG lLoginID, NET_IN_ATTACH_FILE_UPLOAD_RESULT* pInParam, NET_OUT_ATTACH_FILE_UPLOAD_RESULT* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachFileUploadResult(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_FACE_DB_VERSION
{
    DWORD dwSize; 
} NET_IN_GET_FACE_DB_VERSION;
typedef struct tagNET_FACE_LIB_INFO_EX
{
    char szGroupID[64];         
    char szFaceLibVersion[32];  
    UINT nTotalDownloadCount;   
    UINT nSuccessDownloadCount; 
    char szResvered[1024];      
} NET_FACE_LIB_INFO_EX;
typedef struct tagNET_OUT_GET_FACE_DB_VERSION
{
    DWORD dwSize;                             
    char szFaceDbVersion[32];                 
    UINT nTotalCount;                         
    UINT nSuccessDCount;                      
    char szGroupID[64];                       
    int nFaceLibInfoExCount;                  
    NET_FACE_LIB_INFO_EX stuFaceLibInfoEx[8]; 
} NET_OUT_GET_FACE_DB_VERSION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFaceDbVersion(LLONG lLoginID, NET_IN_GET_FACE_DB_VERSION* pInParam, NET_OUT_GET_FACE_DB_VERSION* pOutParam, const int nWaitTime);
typedef struct tagNET_IN_CONTROL_THERMO_SENSOR
{
    DWORD dwSize;        
    int nChannel;        
    int nState;          
    BYTE byReserverd[4]; 
} NET_IN_CONTROL_THERMO_SENSOR;
typedef struct tagNET_OUT_CONTROL_THERMO_SENSOR
{
    DWORD dwSize; 
} NET_OUT_CONTROL_THERMO_SENSOR;
typedef struct tagNET_IN_GET_DISTANCE_RES
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GET_DISTANCE_RES;
typedef enum tagEM_GET_DISTANCE_RES_STATUS
{
    EM_GET_DISTANCE_RES_UNKNOWN = -1,              
    EM_GET_DISTANCE_RES_SUCCESS,                   
    EM_GET_DISTANCE_RES_BEYOND_PITCH_LIMIT,        
    EM_GET_DISTANCE_RES_INTERFACE_EXCEPTION,       
    EM_GET_DISTANCE_RES_GENERAL_ERROR,             
    EM_GET_DISTANCE_RES_LASER_NO_DATA_RETURN,      
    EM_GET_DISTANCE_RES_LASER_DATA_LENGTH_ERROR,   
    EM_GET_DISTANCE_RES_LASER_DATA_FORMAT_ERROR,   
    EM_GET_DISTANCE_RES_LASER_DATA_VERIFIED_ERROR, 
} EM_GET_DISTANCE_RES_STATUS;
typedef struct tagNET_OUT_GET_DISTANCE_RES
{
    DWORD dwSize;                        
    UINT nDistance;                      
    int nOverTimeStatus;                 
    EM_GET_DISTANCE_RES_STATUS emStatus; 
} NET_OUT_GET_DISTANCE_RES;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlThermoSensor(LLONG lLoginID, NET_IN_CONTROL_THERMO_SENSOR* pInParam, NET_OUT_CONTROL_THERMO_SENSOR* pOutParam, int nWaitTime);
typedef struct tagNET_IN_CONTROL_THERMO_DELAY_SHUT_DOWN_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_CONTROL_THERMO_DELAY_SHUT_DOWN_INFO;
typedef struct tagNET_OUT_CONTROL_THERMO_DELAY_SHUT_DOWN_INFO
{
    DWORD dwSize; 
} NET_OUT_CONTROL_THERMO_DELAY_SHUT_DOWN_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ControlThermoDelayShutDown(LLONG lLoginID, NET_IN_CONTROL_THERMO_DELAY_SHUT_DOWN_INFO* pInParam, NET_OUT_CONTROL_THERMO_DELAY_SHUT_DOWN_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDistanceRes(LLONG lLoginID, NET_IN_GET_DISTANCE_RES* pInParam, NET_OUT_GET_DISTANCE_RES* pOutParam, int nWaitTime);
typedef enum tagEM_THREM_LOG_TYPE
{
    EM_THREM_LOG_UNKNOWN = -1, 
    EM_THREM_LOG_ALL,          
    EM_THREM_LOG_CORE_OP,      
    EM_THREM_LOG_LASER,        
    EM_THREM_LOG_PTZ,          
    EM_THREM_LOG_VISUAL_ZOOM,  
    EM_THREM_LOG_VISUAL_FOCUS, 
    EM_THREM_LOG_THERM_ZOOM,   
    EM_THREM_LOG_THERM_FOCUS,  
    EM_THREM_LOG_CLEAR_LOG,    
    EM_THREM_LOG_TEMPERATURE,  
} EM_THREM_LOG_TYPE;
typedef struct tagNET_IN_START_FIND_THERM_LOG
{
    DWORD dwSize;                
    EM_THREM_LOG_TYPE emLogType; 
    NET_TIME stuStartTime;       
    NET_TIME stuEndTime;         
} NET_IN_START_FIND_THERM_LOG;
typedef struct tagNET_OUT_START_FIND_THERM_LOG
{
    DWORD dwSize; 
} NET_OUT_START_FIND_THERM_LOG;
typedef struct tagNET_IN_GET_THERM_LOG_COUNT
{
    DWORD dwSize; 
} NET_IN_GET_THERM_LOG_COUNT;
typedef struct tagNET_OUT_GET_THERM_LOG_COUNT
{
    DWORD dwSize;  
    int nLogCount; 
} NET_OUT_GET_THERM_LOG_COUNT;
typedef struct tagNET_IN_DO_SEEK_FIND_THERM_LOG
{
    DWORD dwSize;      
    int nOffset;       
    int nCount;        
    BYTE byReserve[4]; 
} NET_IN_DO_SEEK_FIND_THERM_LOG;
typedef struct tagNET_THERM_LOG
{
    NET_TIME stuTime;            
    EM_THREM_LOG_TYPE emLogType; 
    char szDetail[512];          
    BYTE byReserve[1024];        
} NET_THERM_LOG;
typedef struct tagNET_OUT_DO_SEEK_FIND_THERM_LOG
{
    DWORD dwSize;               
    int nMaxCount;              
    NET_THERM_LOG* pstuLogInfo; 
    int nRetCount;              
    BYTE byReserve[4];          
} NET_OUT_DO_SEEK_FIND_THERM_LOG;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindThermLog(LLONG lLoginID, const NET_IN_START_FIND_THERM_LOG* pInParam, NET_OUT_START_FIND_THERM_LOG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetThermLogCount(LLONG lLogID, NET_IN_GET_THERM_LOG_COUNT* pInParam, NET_OUT_GET_THERM_LOG_COUNT* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoSeekFindThermLog(LLONG lLogID, NET_IN_DO_SEEK_FIND_THERM_LOG* pInParam, NET_OUT_DO_SEEK_FIND_THERM_LOG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindThermLog(LLONG lLogID);
typedef enum tagEM_COURSE_STATE
{
    EM_COURSE_STATE_UNKNOWN,          
    EM_COURSE_STATE_NOT_RECORD,       
    EM_COURSE_STATE_IN_RECORDING,     
    EM_COURSE_STATE_ALREADY_RECORDED, 
} EM_COURSE_STATE;
typedef struct tagNET_COURSE
{
    NET_TIME stuStartTime;                     
    NET_TIME stuEndTime;                       
    char szCourseName[DH_COMMON_STRING_64];    
    char szTeacherName[DH_COMMON_STRING_64];   
    char szIntroduction[DH_COMMON_STRING_128]; 
    int nCanStartStreamNum;                    
    int nIsRecordNum;                          
    EM_CAN_START_STREAM emCanStartStream[64];  
    EM_IS_RECORD emIsRecord[64];               
    int nCompositeChannelMode;                 
    EM_COURSE_STATE emCourseState;             
    BYTE byReserved[128];                      
} NET_COURSE;
typedef struct tagNET_IN_ADD_COURSE
{
    DWORD dwSize;                 
    int nCourseNum;               
    NET_COURSE stuCourseInfo[64]; 
} NET_IN_ADD_COURSE;
typedef struct tagNET_OUT_ADD_COURSE
{
    DWORD dwSize; 
    int nIdNum;   
    int nId[64];  
} NET_OUT_ADD_COURSE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddCourse(LLONG lLoginID, const NET_IN_ADD_COURSE* pstInParam, NET_OUT_ADD_COURSE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IN_ADD_COURSE_OVERWRITE
{
    DWORD dwSize;                 
    int nCourseNum;               
    NET_COURSE stuCourseInfo[64]; 
} NET_IN_ADD_COURSE_OVERWRITE;
typedef struct tagNET_OUT_ADD_COURSE_OVERWRITE
{
    DWORD dwSize;                          
    int nIdNum;                            
    int nId[64];                           
    NET_COURSE stuOverwriteCourseInfo[64]; 
    int nOverwriteTotalCount;              
} NET_OUT_ADD_COURSE_OVERWRITE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddCourseOverWrite(LLONG lLoginID, const NET_IN_ADD_COURSE_OVERWRITE* pstInParam, NET_OUT_ADD_COURSE_OVERWRITE* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_DELETE_COURSE
{
    DWORD dwSize; 
    int nIdNum;   
    int nId[64];  
} NET_IN_DELETE_COURSE;
typedef struct tagNET_OUT_DELETE_COURSE
{
    DWORD dwSize;      
    int nResultIdNum;  
    int nResultId[64]; 
} NET_OUT_DELETE_COURSE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteCourse(LLONG lLoginID, const NET_IN_DELETE_COURSE* pstInParam, NET_OUT_DELETE_COURSE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IN_MODIFY_COURSE
{
    DWORD dwSize;                 
    int nCourseNum;               
    NET_COURSE stuCourseInfo[64]; 
    int nId[64];                  
} NET_IN_MODIFY_COURSE;
typedef struct tagNET_OUT_MODIFY_COURSE
{
    DWORD dwSize;      
    int nResultIDNum;  
    int nResultID[64]; 
} NET_OUT_MODIFY_COURSE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyCourse(LLONG lLoginID, const NET_IN_MODIFY_COURSE* pstInParam, NET_OUT_MODIFY_COURSE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IN_QUERY_COURSE_OPEN
{
    DWORD dwSize;          
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
} NET_IN_QUERY_COURSE_OPEN;
typedef struct tagNET_OUT_QUERY_COURSE_OPEN
{
    DWORD dwSize;  
    int nTotalNum; 
    int nFindID;   
} NET_OUT_QUERY_COURSE_OPEN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryCourseOpen(LLONG lLoginID, const NET_IN_QUERY_COURSE_OPEN* pstInParam, NET_OUT_QUERY_COURSE_OPEN* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IN_QUERY_COURSE
{
    DWORD dwSize; 
    int nFindID;  
    int nOffset;  
    int nCount;   
} NET_IN_QUERY_COURSE;
typedef struct tagNET_COURSE_RESULT
{
    NET_COURSE stuCourseInfo; 
    int nId;                  
    BYTE byReserved[4];       
} NET_COURSE_RESULT;
typedef struct tagNET_OUT_QUERY_COURSE
{
    DWORD dwSize;                          
    int nCountResult;                      
    NET_COURSE_RESULT stuCourseResult[64]; 
} NET_OUT_QUERY_COURSE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryCourse(LLONG lLoginID, const NET_IN_QUERY_COURSE* pstInParam, NET_OUT_QUERY_COURSE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
typedef struct tagNET_IN_QUERY_COURSE_CLOSE
{
    DWORD dwSize; 
    int nFindID;  
} NET_IN_QUERY_COURSE_CLOSE;
typedef struct tagNET_OUT_QUERY_COURSE_CLOSE
{
    DWORD dwSize; 
} NET_OUT_QUERY_COURSE_CLOSE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryCourseClose(LLONG lLoginID, const NET_IN_QUERY_COURSE_CLOSE* pstInParam, NET_OUT_QUERY_COURSE_CLOSE* pstOutParam, int nWaitTime = NET_INTERFACE_DEFAULT_TIMEOUT);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_OpenPlayGroup();
typedef struct tagNET_IN_ADD_PLAYHANDLE_TO_PLAYGROUP
{
    DWORD dwSize;           
    BYTE byReserved[4];     
    LLONG lPlayGroupHandle; 
    LLONG lPlayHandle;      
} NET_IN_ADD_PLAYHANDLE_TO_PLAYGROUP;
typedef struct tagNET_OUT_ADD_PLAYHANDLE_TO_PLAYGROUP
{
    DWORD dwSize; 
} NET_OUT_ADD_PLAYHANDLE_TO_PLAYGROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddPlayHandleToPlayGroup(const NET_IN_ADD_PLAYHANDLE_TO_PLAYGROUP* pInParam, NET_OUT_ADD_PLAYHANDLE_TO_PLAYGROUP* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PausePlayGroup(LLONG lPlayGroupHandle, BOOL bPause);
typedef struct tagNET_IN_QUERY_PLAYGROUP_TIME
{
    DWORD dwSize;           
    BYTE byReserved[4];     
    LLONG lPlayGroupHandle; 
} NET_IN_QUERY_PLAYGROUP_TIME;
typedef struct tagNET_OUT_QUERY_PLAYGROUP_TIME
{
    DWORD dwSize;        
    NET_TIME_EX stuTime; 
} NET_OUT_QUERY_PLAYGROUP_TIME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryPlayGroupTime(const NET_IN_QUERY_PLAYGROUP_TIME* pInParam, NET_OUT_QUERY_PLAYGROUP_TIME* pOutParam);
typedef struct tagNET_IN_SET_PLAYGROUP_BASECHANNEL
{
    DWORD dwSize;           
    BYTE byReserved[4];     
    LLONG lPlayGroupHandle; 
    LLONG lPlayHandle;      
} NET_IN_SET_PLAYGROUP_BASECHANNEL;
typedef struct tagNET_OUT_SET_PLAYGROUP_BASECHANNEL
{
    DWORD dwSize; 
} NET_OUT_SET_PLAYGROUP_BASECHANNEL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayGroupBaseChannel(const NET_IN_SET_PLAYGROUP_BASECHANNEL* pInParam, NET_OUT_SET_PLAYGROUP_BASECHANNEL* pOutParam);
typedef struct tagNET_IN_DELETE_FROM_PLAYGROUP
{
    DWORD dwSize;           
    BYTE byReserved[4];     
    LLONG lPlayGroupHandle; 
    LLONG lPlayHandle;      
} NET_IN_DELETE_FROM_PLAYGROUP;
typedef struct tagNET_OUT_DELETE_FROM_PLAYGROUP
{
    DWORD dwSize; 
} NET_OUT_DELETE_FROM_PLAYGROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteFromPlayGroup(const NET_IN_DELETE_FROM_PLAYGROUP* pInParam, NET_OUT_DELETE_FROM_PLAYGROUP* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClosePlayGroup(LLONG lPlayGroupHandle);
typedef struct tagNET_IN_GET_CHANNEL_OF_AUDIO_INPUT
{
    DWORD dwSize; 
} NET_IN_GET_CHANNEL_OF_AUDIO_INPUT;
typedef struct tagNET_OUT_GET_CHANNEL_OF_AUDIO_INPUT
{
    DWORD dwSize;   
    UINT nChannels; 
} NET_OUT_GET_CHANNEL_OF_AUDIO_INPUT;
typedef struct tagNET_IN_GET_CHANNEL_OF_AUDIO_OUTPUT
{
    DWORD dwSize; 
} NET_IN_GET_CHANNEL_OF_AUDIO_OUTPUT;
typedef struct tagNET_OUT_GET_CHANNEL_OF_AUDIO_OUTPUT
{
    DWORD dwSize;   
    UINT nChannels; 
} NET_OUT_GET_CHANNEL_OF_AUDIO_OUTPUT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetChannelOfAudioInput(LLONG lLoginID, NET_IN_GET_CHANNEL_OF_AUDIO_INPUT* pInParam, NET_OUT_GET_CHANNEL_OF_AUDIO_INPUT* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetChannelOfAudioOutput(LLONG lLoginID, NET_IN_GET_CHANNEL_OF_AUDIO_OUTPUT* pInParam, NET_OUT_GET_CHANNEL_OF_AUDIO_OUTPUT* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_CHANNEL_OF_AUDIO_VOLUME_INFO
{
    DWORD dwSize; 
    int nChannel; 
    int nVolume;  
} NET_IN_SET_CHANNEL_OF_AUDIO_VOLUME_INFO;
typedef struct tagNET_OUT_SET_CHANNEL_OF_AUDIO_VOLUME_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_CHANNEL_OF_AUDIO_VOLUME_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetChannelOfAudioVolume(LLONG lLoginID, NET_IN_SET_CHANNEL_OF_AUDIO_VOLUME_INFO* pInParam, NET_OUT_SET_CHANNEL_OF_AUDIO_VOLUME_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_CHANNEL_OF_AUDIO_ENABLE_INFO
{
    DWORD dwSize; 
    int nChannel; 
    BOOL bEnable; 
} NET_IN_SET_CHANNEL_OF_AUDIO_ENABLE_INFO;
typedef struct tagNET_OUT_SET_CHANNEL_OF_AUDIO_ENABLE_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_CHANNEL_OF_AUDIO_ENABLE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetChannelOfAudioEnable(LLONG lLoginID, NET_IN_SET_CHANNEL_OF_AUDIO_ENABLE_INFO* pInParam, NET_OUT_SET_CHANNEL_OF_AUDIO_ENABLE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_DEV_ID_AUDIO_SOURCE_INFO
{
    char szDevice[32];             
    EM_VIDEO_STREAM emVideoStream; 
    UINT nVideoChannel;            
    BYTE byReserved[1020];         
} NET_DEV_ID_AUDIO_SOURCE_INFO;
typedef struct tagNET_IN_BIND_AUDIO_SOURCE_DEV_ID_INFO
{
    DWORD dwSize;                                    
    int nChannel;                                    
    NET_DEV_ID_AUDIO_SOURCE_INFO stuAudioSourceInfo; 
} NET_IN_BIND_AUDIO_SOURCE_DEV_ID_INFO;
typedef struct tagNET_OUT_BIND_AUDIO_SOURCE_DEV_ID_INFO
{
    DWORD dwSize; 
} NET_OUT_BIND_AUDIO_SOURCE_DEV_ID_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BindAudioSourceDevIDInfo(LLONG lLoginID, NET_IN_BIND_AUDIO_SOURCE_DEV_ID_INFO* pInParam, NET_OUT_BIND_AUDIO_SOURCE_DEV_ID_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_AUDIO_SOURCE_DEV_VIDEO_INPUTS_INFO
{
    char szChnName[32];                                
    char szCaption[32];                                
    char szControlID[64];                              
    char szMainStreamUrl[256];                         
    char szExtraStreamUrl[256];                        
    char szOptionalMainUrls[8][256];                   
    int nOptionalMainUrlsNum;                          
    char szOptionalExtraUrls[8][256];                  
    int nOptionalExtraUrlsNum;                         
    NET_SOURCE_STREAM_ENCRYPT stuSourceStreamEncrypt;  
    EM_STREAM_TRANSMISSION_SERVICE_TYPE emServiceType; 
    BYTE byReserved[1020];
} NET_AUDIO_SOURCE_DEV_VIDEO_INPUTS_INFO;
typedef enum tagEM_AUDIO_SOURCE_DEV_DEFINITION
{
    EM_AUDIO_SOURCE_DEV_DEFINITION_UNKNOWN,  
    EM_AUDIO_SOURCE_DEV_DEFINITION_STANDARD, 
    EM_AUDIO_SOURCE_DEV_DEFINITION_HIGH,     
} EM_AUDIO_SOURCE_DEV_DEFINITION;
typedef enum tagEM_AUDIO_SOURCE_DEV_PROTOCOL_TYPE
{
    EM_DEV_PROTOCOL_TYPE_UNKNOWN, 
    EM_DEV_PROTOCOL_TYPE_DAHUA,   
    EM_DEV_PROTOCOL_TYPE_DAHUA2,  
    EM_DEV_PROTOCOL_TYPE_DAHUA3,  
    EM_DEV_PROTOCOL_TYPE_PRIVATE, 
    EM_DEV_PROTOCOL_TYPE_GENERAL, 
} EM_AUDIO_SOURCE_DEV_PROTOCOL_TYPE;
typedef struct tagNET_AUDIO_SOURCE_DEV_INFO
{
    BOOL bEnable;                                        
    EM_AUDIO_SOURCE_DEV_DEFINITION emVideoDefinition;    
    EM_AUDIO_SOURCE_DEV_PROTOCOL_TYPE emProtocolType;    
    UINT nPort;                                          
    char szAddress[40];                                  
    char szUser[64];                                     
    char szPassword[64];                                 
    char szName[128];                                    
    UINT nVideoInputChannels;                            
    UINT nAudioInputChannels;                            
    UINT nHttpPort;                                      
    UINT nRtspPort;                                      
    char szDeviceClass[32];                              
    char szDeviceType[32];                               
    char szHint[32];                                     
    NET_AUDIO_SOURCE_DEV_VIDEO_INPUTS_INFO* pVideoInput; 
    int nVideoInputsNum;                                 
    BYTE byReserved[1020];                               
} NET_AUDIO_SOURCE_DEV_INFO;
typedef struct tagNET_DEV_INFO_AUDIO_SOURCE_INFO
{
    BOOL bEnable;                            
    EM_VIDEO_STREAM emVideoStream;           
    UINT nVideoChannel;                      
    UINT nInterval;                          
    NET_AUDIO_SOURCE_DEV_INFO stuDeviceInfo; 
    BYTE byReserved[1024];                   
} NET_DEV_INFO_AUDIO_SOURCE_INFO;
typedef struct tagNET_IN_BIND_AUDIO_SOURCE_DEV_INFO
{
    DWORD dwSize;                                      
    int nChannel;                                      
    NET_DEV_INFO_AUDIO_SOURCE_INFO stuAudioSourceInfo; 
} NET_IN_BIND_AUDIO_SOURCE_DEV_INFO;
typedef struct tagNET_OUT_BIND_AUDI0_SOURCE_DEV_INFO
{
    DWORD dwSize; 
} NET_OUT_BIND_AUDIO_SOURCE_DEV_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_BindAudioSourceDeviceInfo(LLONG lLoginID, NET_IN_BIND_AUDIO_SOURCE_DEV_INFO* pInParam, NET_OUT_BIND_AUDIO_SOURCE_DEV_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_CLEAR_BIND_AUDIO_SOURCE_DEV_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_CLEAR_BIND_AUDIO_SOURCE_DEV_INFO;
typedef struct tagNET_OUT_CLEAR_BIND_AUDIO_SOURCE_DEV_INFO
{
    DWORD dwSize; 
} NET_OUT_CLEAR_BIND_AUDIO_SOURCE_DEV_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClearBindAudioSourceDevInfo(LLONG lLoginID, NET_IN_CLEAR_BIND_AUDIO_SOURCE_DEV_INFO* pInParam, NET_OUT_CLEAR_BIND_AUDIO_SOURCE_DEV_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTE_SLEEP
{
    DWORD dwSize; 
} NET_IN_REMOTE_SLEEP;
typedef struct tagNET_OUT_REMOTE_SLEEP
{
    DWORD dwSize; 
} NET_OUT_REMOTE_SLEEP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteSleep(LLONG lLoginID, NET_IN_REMOTE_SLEEP* pInParam, NET_OUT_REMOTE_SLEEP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_EXIT_APP
{
    DWORD dwSize; 
} NET_IN_EXIT_APP;
typedef struct tagNET_OUT_EXIT_APP
{
    DWORD dwSize; 
} NET_OUT_EXIT_APP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ExitApp(LLONG lLoginID, NET_IN_EXIT_APP* pInParam, NET_OUT_EXIT_APP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REBOOT_DEVICE
{
    DWORD dwSize; 
} NET_IN_REBOOT_DEVICE;
typedef struct tagNET_OUT_REBOOT_DEVICE
{
    DWORD dwSize; 
} NET_OUT_REBOOT_DEVICE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RebootDevice(LLONG lLoginID, NET_IN_REBOOT_DEVICE* pInParam, NET_OUT_REBOOT_DEVICE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_WORK_MODE_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_WORK_MODE_CAPS;
typedef struct tagNET_OUT_GET_WORK_MODE_CAPS
{
    DWORD dwSize;                
    BOOL bSupportWorkMode;       
    int nWorkModesCount;         
    EM_WORK_MODE emWorkModes[8]; 
} NET_OUT_GET_WORK_MODE_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetWorkModeCaps(LLONG lLoginID, NET_IN_GET_WORK_MODE_CAPS* pstuInParam, NET_OUT_GET_WORK_MODE_CAPS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_DELAY_REBOOT
{
    DWORD dwSize; 
    UINT nDelay;  
} NET_IN_DELAY_REBOOT;
typedef struct tagNET_OUT_DELAY_REBOOT
{
    DWORD dwSize; 
} NET_OUT_DELAY_REBOOT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelayReboot(LLONG lLoginID, NET_IN_DELAY_REBOOT* pstuInParam, NET_OUT_DELAY_REBOOT* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_PLAYGROUP_DIRECTION
{
    DWORD dwSize;           
    int nPlayDirection;     
    LLONG lPlayGroupHandle; 
} NET_IN_SET_PLAYGROUP_DIRECTION;
typedef struct tagNET_OUT_SET_PLAYGROUP_DIRECTION
{
    DWORD dwSize; 
} NET_OUT_SET_PLAYGROUP_DIRECTION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayGroupDirection(const NET_IN_SET_PLAYGROUP_DIRECTION* pInParam, NET_OUT_SET_PLAYGROUP_DIRECTION* pOutParam);
typedef struct tagNET_IN_SET_PLAYGROUP_SPEED
{
    DWORD dwSize;               
    EM_PLAY_BACK_SPEED emSpeed; 
    LLONG lPlayGroupHandle;     
} NET_IN_SET_PLAYGROUP_SPEED;
typedef struct tagNET_OUT_SET_PLAYGROUP_SPEED
{
    DWORD dwSize; 
} NET_OUT_SET_PLAYGROUP_SPEED;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayGroupSpeed(const NET_IN_SET_PLAYGROUP_SPEED* pInParam, NET_OUT_SET_PLAYGROUP_SPEED* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FastPlayGroup(LLONG lPlayGroupHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SlowPlayGroup(LLONG lPlayGroupHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_NormalPlayGroup(LLONG lPlayGroupHandle);
typedef struct tagNET_IN_AOL_STARTSEARCH_DEVICE
{
    DWORD dwSize;                       
    char szLocalIp[MAX_LOCAL_IP_LEN];   
    fSearchDevicesCBEx cbSearchDevices; 
    void* pUserData;                    
} NET_IN_AOL_STARTSEARCH_DEVICE;
typedef struct tagNET_OUT_AOL_STARTSEARCH_DEVICE
{
    DWORD dwSize; 
} NET_OUT_AOL_STARTSEARCH_DEVICE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartSearchDevicesForAOL(NET_IN_AOL_STARTSEARCH_DEVICE* pInParam, NET_OUT_AOL_STARTSEARCH_DEVICE* pOutParam);
typedef struct tagNET_IN_AOL_SEARCHDEVICE_BYIPS
{
    DWORD dwSize;                        
    int nIpNum;                          
    char szIP[DH_MAX_SAERCH_IP_NUM][64]; 
    char* szLocalIp;                     
    fSearchDevicesCB cbSearchDevices;    
    LDWORD dwUserData;                   
} NET_IN_AOL_SEARCHDEVICE_BYIPS;
typedef struct tagNET_OUT_AOL_SEARCHDEVICE_BYIPS
{
    DWORD dwSize; 
} NET_OUT_AOL_SEARCHDEVICE_BYIPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SearchDevicesByIPsForAOL(NET_IN_AOL_SEARCHDEVICE_BYIPS* pInParam, NET_OUT_AOL_SEARCHDEVICE_BYIPS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_RESET_SYSTEM_EX
{
    DWORD dwSize; 
    UINT nType;   
} NET_IN_RESET_SYSTEM_EX;
typedef struct tagNET_OUT_RESET_SYSTEM_EX
{
    DWORD dwSize; 
} NET_OUT_RESET_SYSTEM_EX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResetSystemEx(LLONG lLoginID, const NET_IN_RESET_SYSTEM_EX* pstInParam, NET_OUT_RESET_SYSTEM_EX* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_VENDOR_INFO
{
    DWORD dwSize; 
} NET_IN_GET_VENDOR_INFO;
typedef struct tagNET_OUT_GET_VENDOR_INFO
{
    DWORD dwSize;        
    char szVendor[16];   
    char szVendorEx[32]; 
} NET_OUT_GET_VENDOR_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVendor(LLONG lLoginID, const NET_IN_GET_VENDOR_INFO* pstInParam, NET_OUT_GET_VENDOR_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_EXPORT_AOL_LOGFILE_ERRORCODE
{
    EM_EXPORT_AOL_LOGFILE_SUCCESS = 1,      
    EM_EXPORT_AOL_LOGFILE_NO_AUTHORITY = 2, 
    EM_EXPORT_AOL_LOGFILE_NO_THIS_FILE = 3, 
    EM_EXPORT_AOL_LOGFILE_EXPORT_END = 4,   
    EM_EXPORT_AOL_LOGFILE_EXPORTING = 5,    
    EM_EXPORT_AOL_LOGFILE_FILE_SUCCESS = 6, 
    EM_EXPORT_AOL_LOGFILE_FILE_FAIL = 7,    
    EM_EXPORT_AOL_LOGFILE_FILE_READY = 8,   
    EM_EXPORT_AOL_LOGFILE_FILE_FAILED = 9,  
    EM_EXPORT_AOL_LOGFILE_WAIT_FILE = 10,   
    EM_EXPORT_AOL_LOGFILE_SYSTEM_BUSY = 11, 
} EM_EXPORT_AOL_LOGFILE_ERRORCODE;
typedef struct tagNET_EXPORT_AOL_LOGFILE_STATE
{
    unsigned int nProgress;                      
    EM_EXPORT_AOL_LOGFILE_ERRORCODE emErrorCode; 
    char* pDataBuf;                              
    DWORD dwDataLen;                             
    BYTE byReserved[516];                        
} NET_EXPORT_AOL_LOGFILE_STATE;
typedef void(CALLBACK* fExportAOLLogFileCallBack)(LLONG lExportHandle, NET_EXPORT_AOL_LOGFILE_STATE* pstLogFileState, LDWORD dwUser);
typedef struct tagNET_IN_EXPORT_AOL_LOGFILE
{
    DWORD dwSize;                       
    BYTE byReserved[4];                 
    fExportAOLLogFileCallBack cbExport; 
    LDWORD dwUser;                      
} NET_IN_EXPORT_AOL_LOGFILE;
typedef struct tagNET_OUT_EXPORT_AOL_LOGFILE
{
    DWORD dwSize; 
} NET_OUT_EXPORT_AOL_LOGFILE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ExportAOLLogFile(LLONG lLoginID, const NET_IN_EXPORT_AOL_LOGFILE* pInParam, NET_OUT_EXPORT_AOL_LOGFILE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopExportAOLLogFile(LLONG lExportHandle);
typedef struct tagNET_IN_DELETE_ALLDIAGNOSIS_FAULTCODE
{
    DWORD dwSize; 
} NET_IN_DELETE_ALLDIAGNOSIS_FAULTCODE;
typedef struct tagNET_OUT_DELETE_ALLDIAGNOSIS_FAULTCODE
{
    DWORD dwSize; 
} NET_OUT_DELETE_ALLDIAGNOSIS_FAULTCODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteAllDiagnosisFaultCode(LLONG lLoginID, const NET_IN_DELETE_ALLDIAGNOSIS_FAULTCODE* pInParam, NET_OUT_DELETE_ALLDIAGNOSIS_FAULTCODE* pOutParam, int nWaitTime);
typedef struct tagNET_PIG_TEMPERATURE_DATA
{
    NET_RECT stuRect;          
    UINT nID;                  
    float fMaxTemperature;     
    float fMinTemperature;     
    float fAverageTemperature; 
    BYTE byReserve[1024];      
} NET_PIG_TEMPERATURE_DATA;
typedef struct tagNET_PIG_TEMPERATURE_INFO
{
    UINT nPigNum;                            
    NET_PIG_TEMPERATURE_DATA stuPigInfo[48]; 
    BYTE byReserve[1024];                    
} NET_PIG_TEMPERATURE_INFO;
typedef enum tagEM_CUSTOM_SNAP_TYPE
{
    EM_CUSTOM_SNAP_UNKNOWN,         
    EM_CUSTOM_SNAP_PIG_TEMPERATURE, 
} EM_CUSTOM_SNAP_TYPE;
typedef struct tagNET_CB_CUSTOM_SNAP_INFO
{
    UINT nChannelID;                      
    NET_TIME stuSnapTime;                 
    EM_CUSTOM_SNAP_TYPE emCustomSnapType; 
    void* pDetailInfo;                    
    BYTE byReserve[1024];                 
} NET_CB_CUSTOM_SNAP_INFO;
typedef void(CALLBACK* fAttachCustomSnapInfo)(LLONG lAttachHandle, NET_CB_CUSTOM_SNAP_INFO* pstResult, const char* pBuf, const DWORD dwBufSize, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CUSTOM_SNAP_INFO
{
    DWORD dwSize;                           
    int nChannelID;                         
    fAttachCustomSnapInfo cbCustomSnapInfo; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_CUSTOM_SNAP_INFO;
typedef struct tagNET_OUT_ATTACH_CUSTOM_SNAP_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_CUSTOM_SNAP_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachCustomSnapInfo(LLONG lLoginID, NET_IN_ATTACH_CUSTOM_SNAP_INFO* pInParam, NET_OUT_ATTACH_CUSTOM_SNAP_INFO* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachCustomSnapInfo(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_INSTALLED_APP_INFO
{
    DWORD dwSize; 
} NET_IN_GET_INSTALLED_APP_INFO;
typedef struct tagNET_APP_CAPS
{
    BOOL bShowWebConsole;  
    BOOL bShowPerformance; 
    BOOL bShowDebug;       
    BYTE byReserved[128];  
} NET_APP_CAPS;
typedef enum tagEM_APP_RUNNING_STATE
{
    EM_APP_RUNNING_STATE_UNKNOWN, 
    EM_APP_RUNNING_STATE_RUNNING, 
    EM_APP_RUNNING_STATE_STOP,    
    EM_APP_RUNNING_STATE_ERROR,   
} EM_APP_RUNNING_STATE;
typedef enum tagEM_APP_LICENSE_STATE
{
    EM_APP_LICENSE_STATE_UNKNOEN,    
    EM_APP_LICENSE_STATE_IN_TRAL,    
    EM_APP_LICENSE_STATE_IN_LICENSE, 
    EM_APP_LICENSE_STATE_EXPIRED,    
} EM_APP_LICENSE_STATE;
typedef enum tagEM_APP_DEBUG_STATE
{
    EM_APP_DEBUG_STATE_UNKNOWN, 
    EM_APP_DEBUG_STATE_ENABLE,  
    EM_APP_DEBUG_STATE_DISABLE, 
} EM_APP_DEBUG_STATE;
typedef struct tagNET_INSTALLED_APP_INFO
{
    char szAppName[128];                    
    char szVersion[64];                     
    char szExtend[64];                      
    UINT nAppID;                            
    EM_APP_DEBUG_STATE emAppDebugState;     
    EM_APP_RUNNING_STATE emAppRunningState; 
    EM_APP_LICENSE_STATE emAppLicenseState; 
    NET_APP_CAPS stuAppCaps;                
    BYTE byReserved[256];                   
} NET_INSTALLED_APP_INFO;
typedef struct tagNET_OUT_GET_INSTALLED_APP_INFO
{
    DWORD dwSize;                              
    UINT nListCount;                           
    NET_INSTALLED_APP_INFO stuAppInfoList[16]; 
} NET_OUT_GET_INSTALLED_APP_INFO;
typedef struct tagNET_IN_START_APP
{
    DWORD dwSize;        
    UINT nAppID;         
    char szAppName[128]; 
} NET_IN_START_APP;
typedef struct tagNET_OUT_START_APP
{
    DWORD dwSize; 
} NET_OUT_START_APP;
typedef struct tagNET_IN_STOP_APP
{
    DWORD dwSize;        
    UINT nAppID;         
    char szAppName[128]; 
} NET_IN_STOP_APP;
typedef struct tagNET_OUT_STOP_APP
{
    DWORD dwSize; 
} NET_OUT_STOP_APP;
typedef struct tagNET_IN_REMOVE_APP
{
    DWORD dwSize;        
    UINT nAppID;         
    char szAppName[128]; 
} NET_IN_REMOVE_APP;
typedef struct tagNET_OUT_REMOVE_APP
{
    DWORD dwSize; 
} NET_OUT_REMOVE_APP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetInstalledAppInfo(LLONG lLoginID, const NET_IN_GET_INSTALLED_APP_INFO* pInParam, NET_OUT_GET_INSTALLED_APP_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartApp(LLONG lLoginID, const NET_IN_START_APP* pInParam, NET_OUT_START_APP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopApp(LLONG lLoginID, const NET_IN_STOP_APP* pInParam, NET_OUT_STOP_APP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveApp(LLONG lLoginID, const NET_IN_REMOVE_APP* pInParam, NET_OUT_REMOVE_APP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_ACCESS_GET_ASG_STATE
{
    DWORD dwSize;
} NET_IN_ACCESS_GET_ASG_STATE;
typedef enum tagEM_DOOR_WING_STATE
{
    EM_DOOR_WING_STATE_UNKNOWN,    
    EM_DOOR_WING_STATE_CLOSE,      
    EM_DOOR_WING_STATE_ENTER_OPEN, 
    EM_DOOR_WING_STATE_LEAVE_OPEN, 
} EM_DOOR_WING_STATE;
typedef enum tagEM_CAN_COMMUNICATE_STATE
{
    EM_CAN_COMMUNICATE_STATE_UNKNOWN = -1, 
    EM_CAN_COMMUNICATE_STATE_NORMAL,       
    EM_CAN_COMMUNICATE_STATE_ABNORMAL,     
} EM_CAN_COMMUNICATE_STATE;
typedef enum tagEM_ASG_BATTERY_STATE
{
    EM_ASG_BATTERY_STATE_UNKNOWN = 0,  
    EM_ASG_BATTERY_STATE_NOT_IN_PLACE, 
    EM_ASG_BATTERY_STATE_IN_PLACE,     
} EM_ASG_BATTERY_STATE;
typedef struct tagNET_OUT_ACCESS_GET_ASG_STATE
{
    DWORD dwSize;
    int nInfraredStateNum;               
    int szInfraredStateMask[6];          
    EM_DOOR_WING_STATE emDoorWingState;  
    EM_CAN_COMMUNICATE_STATE emCanState; 
    int nEnterNum;                       
    int nLeaveNum;                       
    EM_ASG_BATTERY_STATE emBatteryState; 
    UINT nMotorExceptionNum;             
    UINT nMotorRotationNum;              
} NET_OUT_ACCESS_GET_ASG_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetASGState(LLONG lLoginID, const NET_IN_ACCESS_GET_ASG_STATE* pInParam, NET_OUT_ACCESS_GET_ASG_STATE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_START_FIND_XRAY_PKG
{
    DWORD dwSize;                               
    EM_RESULT_ORDER_TYPE emTimeOrder;           
    NET_TIME stuStartTime;                      
    NET_TIME stuEndTime;                        
    UINT nSimilarityRange[2];                   
    UINT nObjTypeNum;                           
    EM_INSIDE_OBJECT_TYPE emObjType[32];        
    UINT nObjTypeCount;                         
    NET_XRAY_INSIDE_ONJECT_TYPE stuObjType[32]; 
} NET_IN_START_FIND_XRAY_PKG;
typedef struct tagNET_OUT_START_FIND_XRAY_PKG
{
    DWORD dwSize; 
    UINT nTotal;  
} NET_OUT_START_FIND_XRAY_PKG;
typedef struct tagNET_IN_DO_FIND_XRAY_PKG
{
    DWORD dwSize; 
    UINT nOffset; 
    UINT nCount;  
} NET_IN_DO_FIND_XRAY_PKG;
typedef struct tagNET_PKG_OBJECT_INFO
{
    EM_INSIDE_OBJECT_TYPE emObjType;    
    EM_DANGER_GRADE_TYPE emDangerGrade; 
    UINT nSimilarity;                   
    char szObjectType[32];              
    BYTE byReserved[100];               
} NET_PKG_OBJECT_INFO;
typedef struct tagNET_PKG_VIEW_INFO
{
    EM_XRAY_VIEW_TYPE emViewType;      
    UINT nEnergyImageLength;           
    char szEnergyImagePath[128];       
    UINT nColorImageLength;            
    char szColorImagePath[128];        
    UINT nColorOverlayImageLength;     
    char szColorOverlayImagePath[128]; 
    NET_PKG_OBJECT_INFO stuObject[32]; 
    UINT nObjectCount;                 
    BYTE byReserved[1024];             
} NET_PKG_VIEW_INFO;
typedef struct tagNET_XRAY_PKG_INFO
{
    NET_TIME stuTime;                 
    int nChannelIn;                   
    int nChannelOut;                  
    char szUser[128];                 
    NET_PKG_VIEW_INFO stuViewInfo[2]; 
    BYTE byReserved[1024];            
} NET_XRAY_PKG_INFO;
typedef struct tagNET_OUT_DO_FIND_XRAY_PKG
{
    DWORD dwSize;                       
    UINT nMaxCount;                     
    UINT nRetCount;                     
    NET_XRAY_PKG_INFO* pstuXRayPkgInfo; 
} NET_OUT_DO_FIND_XRAY_PKG;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindXRayPkg(LLONG lLoginID, const NET_IN_START_FIND_XRAY_PKG* pInParam, NET_OUT_START_FIND_XRAY_PKG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindXRayPkg(LLONG lFindID, const NET_IN_DO_FIND_XRAY_PKG* pInParam, NET_OUT_DO_FIND_XRAY_PKG* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindXRayPkg(LLONG lFindID);
typedef struct tagNET_CB_MONITOR_WALL_SCENE
{
    char szCurrentCollectionName[32]; 
    DH_MONITORWALL_SCENE stuScene;    
    BYTE byReserve[1024];             
} NET_CB_MONITOR_WALL_SCENE;
typedef void(CALLBACK* fMonitorWallScene)(LLONG lAttachHandle, NET_CB_MONITOR_WALL_SCENE* pstResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_MONITOR_WALL_SCENE
{
    DWORD dwSize;                         
    int nMonitorWallID;                   
    fMonitorWallScene cbMonitorWallScene; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_MONITOR_WALL_SCENE;
typedef struct tagNET_OUT_ATTACH_MONITOR_WALL_SCENE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_MONITOR_WALL_SCENE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachMonitorWallScene(LLONG lLoginID, NET_IN_ATTACH_MONITOR_WALL_SCENE* pInParam, NET_OUT_ATTACH_MONITOR_WALL_SCENE* pOutParam, const int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachMonitorWallScene(LLONG lAttachHandle);
typedef struct tagNET_IN_SYSTEM_GETCAPS
{
    DWORD dwSize; 
} NET_IN_SYSTEM_GETCAPS;
typedef struct tagNET_OUT_SYSTEM_GETCAPS
{
    DWORD dwSize;             
    BOOL bSupportCascadeCall; 
    DWORD dwCascadeType;      
} NET_OUT_SYSTEM_GETCAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSystemCaps(LLONG lLoginID, const NET_IN_SYSTEM_GETCAPS* pInParam, NET_OUT_SYSTEM_GETCAPS* pOutParam, const int nWaitTime);
typedef enum tagEM_VERIFY_PASSWORD_TYPE
{
    EM_VERIFY_PASSWORD_TYPE_UNKNOWN = -1, 
    EM_VERIFY_PASSWORD_TYPE_PLAIN,        
} EM_VERIFY_PASSWORD_TYPE;
typedef enum tagEM_MODIFY_PASSWORD_TYPE
{
    EM_MODIFY_PASSWORD_TYPE_UNKNOWN = -1, 
    EM_MODIFY_PASSWORD_TYPE_BY_MULTICAST, 
    EM_MODIFY_PASSWORD_TYPE_BY_UNICAST,   
} EM_MODIFY_PASSWORD_TYPE;
typedef struct tagNET_IN_MODIFY_DEV_PASSWORD
{
    DWORD dwSize;                               
    EM_MODIFY_PASSWORD_TYPE emModifyType;       
    char szMac[DH_MACADDR_LEN];                 
    char szDeviceIP[DH_MAX_IPADDR_LEN_EX];      
    char szUserName[MAX_USER_NAME_LEN];         
    char szNewPwd[MAX_PWD_LEN];                 
    char szOldPwd[MAX_PWD_LEN];                 
    EM_VERIFY_PASSWORD_TYPE emVerifyPasswdType; 
    char szLocalIP[DH_MAX_IPADDR_LEN_EX];       
} NET_IN_MODIFY_DEV_PASSWORD;
typedef struct tagNET_OUT_MODIFY_DEV_PASSWORD
{
    DWORD dwSize;           
    int nRemainModifyTimes; 
    int nRemainLockSeconds; 
    BYTE byReserved[4];     
} NET_OUT_MODIFY_DEV_PASSWORD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyDevPassword(const NET_IN_MODIFY_DEV_PASSWORD* pInParam, NET_OUT_MODIFY_DEV_PASSWORD* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_HUMAN_RADIO_CAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_HUMAN_RADIO_CAPS;
typedef struct tagNET_OUT_GET_HUMAN_RADIO_CAPS
{
    DWORD dwSize;                
    BOOL bSupportRegulatorAlarm; 
} NET_OUT_GET_HUMAN_RADIO_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetHumanRadioCaps(LLONG lLoginID, const NET_IN_GET_HUMAN_RADIO_CAPS* pInParam, NET_OUT_GET_HUMAN_RADIO_CAPS* pOutParam, int nWaitTime);
typedef enum tagEM_PEOPLE_GROUP_TYPE
{
    EM_PEOPLE_GROUP_TYPE_UNKNOWN,     
    EM_PEOPLE_GROUP_TYPE_HISTORYDB,   
    EM_PEOPLE_GROUP_TYPE_BLACKLISTDB, 
    EM_PEOPLE_GROUP_TYPE_ALARMDB,     
} EM_PEOPLE_GROUP_TYPE;
typedef struct tagNET_IN_REMOTEFACERECOGNITION_CREATE_GROUP
{
    DWORD dwSize;                     
    UINT nChannel;                    
    char szGroupName[128];            
    char szGroupDetail[256];          
    EM_PEOPLE_GROUP_TYPE emGroupType; 
    BYTE byReserved[4];               
} NET_IN_REMOTEFACERECOGNITION_CREATE_GROUP;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_CREATE_GROUP
{
    DWORD dwSize;       
    BYTE byReserved[4]; 
    char szGroupID[64]; 
} NET_OUT_REMOTEFACERECOGNITION_CREATE_GROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionCreateGroup(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_CREATE_GROUP* pInParam, NET_OUT_REMOTEFACERECOGNITION_CREATE_GROUP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_FIND_GROUP
{
    DWORD dwSize;       
    UINT nChannel;      
    char szGroupID[64]; 
} NET_IN_REMOTEFACERECOGNITION_FIND_GROUP;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_FIND_GROUP_INFO
{
    EM_PEOPLE_GROUP_TYPE emGroupType;     
    int nGroupSize;                       
    char szGroupName[128];                
    char szGroupDetail[256];              
    char szGroupID[64];                   
    int nChannelNum;                      
    int nSimilarityNum;                   
    int nChannels[1024];                  
    UINT nSimilarity[1024];               
    NET_CFG_TIME_SCHEDULE stuTimeSection; 
    UINT nFeatureState[4];                
    BYTE byReserved[1020];                
} NET_OUT_REMOTEFACERECOGNITION_FIND_GROUP_INFO;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_FIND_GROUP
{
    DWORD dwSize;                                                   
    int nGroupNum;                                                  
    NET_OUT_REMOTEFACERECOGNITION_FIND_GROUP_INFO stuGroupInfo[64]; 
} NET_OUT_REMOTEFACERECOGNITION_FIND_GROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionFindGroup(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_FIND_GROUP* pInParam, NET_OUT_REMOTEFACERECOGNITION_FIND_GROUP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_MODIFY_GROUP
{
    DWORD dwSize;                         
    UINT nChannel;                        
    EM_PEOPLE_GROUP_TYPE emGroupType;     
    UINT nSimilarity;                     
    char szGroupName[128];                
    char szGroupDetail[256];              
    char szGroupID[128];                  
    NET_CFG_TIME_SCHEDULE stuTimeSection; 
    BOOL bSimilarityNotValid;             
    BOOL bTimeSectionNotValid;            
} NET_IN_REMOTEFACERECOGNITION_MODIFY_GROUP;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_MODIFY_GROUP
{
    DWORD dwSize; 
} NET_OUT_REMOTEFACERECOGNITION_MODIFY_GROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionModifyGroup(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_MODIFY_GROUP* pInParam, NET_OUT_REMOTEFACERECOGNITION_MODIFY_GROUP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_DELETE_GROUP
{
    DWORD dwSize;       
    UINT nChannel;      
    char szGroupID[64]; 
} NET_IN_REMOTEFACERECOGNITION_DELETE_GROUP;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_DELETE_GROUP
{
    DWORD dwSize; 
} NET_OUT_REMOTEFACERECOGNITION_DELETE_GROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionDeleteGroup(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_DELETE_GROUP* pInParam, NET_OUT_REMOTEFACERECOGNITION_DELETE_GROUP* pOutParam, int nWaitTime);
typedef struct tagNET_CB_REMOTEFACERECOGNITION_APPEND_STATE
{
    int nTokenNum;        
    int nReportNum;       
    UINT nToken[64];      
    UINT nReport[64];     
    char szUID[64][32];   
    int nUIDNum;          
    int nUUIDNum;         
    char szUUID[64][64];  
    int nChannel[64];     
    int nChannelNum;      
    BYTE byReserved[508]; 
} NET_CB_REMOTEFACERECOGNITION_APPEND_STATE;
typedef void(CALLBACK* fFaceRecognitionAppendStateCallBack)(LLONG lAttachHandle, NET_CB_REMOTEFACERECOGNITION_APPEND_STATE* pstuState, LDWORD dwUser);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_APPEND_STATE_ATTACH_INFO
{
    DWORD dwSize;                                      
    fFaceRecognitionAppendStateCallBack cbAppendState; 
    LDWORD dwUser;                                     
} NET_IN_REMOTEFACERECOGNITION_APPEND_STATE_ATTACH_INFO;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_APPEND_STATE_ATTACH_INFO
{
    DWORD dwSize; 
} NET_OUT_REMOTEFACERECOGNITION_APPEND_STATE_ATTACH_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RemoteFaceRecognitionAttachAppendState(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_APPEND_STATE_ATTACH_INFO* pInParam, NET_OUT_REMOTEFACERECOGNITION_APPEND_STATE_ATTACH_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionDetachAppendState(LLONG lAttachHandle);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_MULTI_APPEND_ASYNC
{
    DWORD dwSize;                                  
    int nPersonNum;                                
    FACERECOGNITION_PERSON_INFOEX* pstuPersonInfo; 
    char* pBuffer;   
    UINT nBufferLen; 
    UINT nChannel; 
} NET_IN_REMOTEFACERECOGNITION_MULTI_APPEND_ASYNC;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_MULTI_APPEND_ASYNC
{
    DWORD dwSize;    
    int nTokenNum;   
    UINT nToken[64]; 
} NET_OUT_REMOTEFACERECOGNITION_MULTI_APPEND_ASYNC;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionMultiAppendAsync(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_MULTI_APPEND_ASYNC* pInParam, NET_OUT_REMOTEFACERECOGNITION_MULTI_APPEND_ASYNC* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_MODIFY_PERSON
{
    DWORD dwSize;                                
    int nChannel;                                
    FACERECOGNITION_PERSON_INFOEX stuPersonInfo; 
    char* pBuffer;      
    UINT nBufferLen;    
    BYTE byReserved[4]; 
} NET_IN_REMOTEFACERECOGNITION_MODIFY_PERSON;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_MODIFY_PERSON
{
    DWORD dwSize; 
} NET_OUT_REMOTEFACERECOGNITION_MODIFY_PERSON;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionModifyPerson(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_MODIFY_PERSON* pInParam, NET_OUT_REMOTEFACERECOGNITION_MODIFY_PERSON* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_DELETE_PERSON
{
    DWORD dwSize;       
    int nChannel;       
    char szUID[32];     
    char szGroupID[64]; 
} NET_IN_REMOTEFACERECOGNITION_DELETE_PERSON;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_DELETE_PERSON
{
    DWORD dwSize; 
} NET_OUT_REMOTEFACERECOGNITION_DELETE_PERSON;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionDeletePerson(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_DELETE_PERSON* pInParam, NET_OUT_REMOTEFACERECOGNITION_DELETE_PERSON* pOutParam, int nWaitTime);
typedef enum tagEM_ORDER_TYPE
{
    EM_ORDER_TYPE_UNKNOWN,               
    EM_ORDER_TYPE_ASC_BY_LASTAPPEARTIME, 
    EM_ORDER_TYPE_ASC_BY_STORAGETIME,    
} EM_ORDER_TYPE;
typedef struct tagNET_REMOTEFACERECOGNITION_FIND_CONDITION
{
    int nRangeNum;                       
    int nGroupNum;                       
    EM_PEOPLE_GROUP_TYPE emGroupType[8]; 
    char szGroupID[128][64];             
    NET_TIME stuBirthdayRange[2];        
    NET_TIME stuStartTime;               
    NET_TIME stuEndTime;                 
    int nUIDsNum;                        
    int nUUIDsNum;                       
    char szUIDs[64][32];                 
    char szUUIDs[64][32];                
    EM_ORDER_TYPE emOrderType;           
    BYTE byReserved[512];                
} NET_REMOTEFACERECOGNITION_FIND_CONDITION;
typedef struct tagNET_REMOTEFACERECOGNITION_FIND_PERSON_INFO
{
    EM_SEX_TYPE emSex;                      
    EM_CERTIFICATE_TYPE emCertificateType;  
    char szName[64];                        
    char szID[32];                          
    char szProvince[64];                    
    char szCity[64];                        
    EM_PERSON_FEATURE_STATE emFeatureState; 
    BYTE byReserved[508];                   
} NET_REMOTEFACERECOGNITION_FIND_PERSON_INFO;
typedef struct tagNET_IN_REMOTEFACERECOGNITION_START_FIND_REG_INFO
{
    DWORD dwSize;                                             
    int nChannel;                                             
    NET_REMOTEFACERECOGNITION_FIND_CONDITION stuCondition;    
    NET_REMOTEFACERECOGNITION_FIND_PERSON_INFO stuPersonInfo; 
} NET_IN_REMOTEFACERECOGNITION_START_FIND_REG_INFO;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_START_FIND_REG_INFO
{
    DWORD dwSize;       
    UINT nToken;        
    int nTotalCount;    
    BYTE byReserved[4]; 
} NET_OUT_REMOTEFACERECOGNITION_START_FIND_REG_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_RemoteFaceRecognitionStartFindRegInfo(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_START_FIND_REG_INFO* pInParam, NET_OUT_REMOTEFACERECOGNITION_START_FIND_REG_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_DO_FIND
{
    DWORD dwSize;      
    UINT nBeginNumber; 
    int nCount;        
    int nNeedDataMask; 
} NET_IN_REMOTEFACERECOGNITION_DO_FIND;
typedef struct tagNET_CANDIDATE_INFO
{
    FACERECOGNITION_PERSON_INFOEX stuPersonInfo; 
    EM_PEOPLE_GROUP_TYPE emGroupType;            
    BYTE byReserved[2044];                       
} NET_CANDIDATE_INFO;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_DO_FIND
{
    DWORD dwSize;                          
    int nFound;                            
    int nCandidateMaxNum;                  
    int nCandidateNum;                     
    NET_CANDIDATE_INFO* pstuCandidateInfo; 
} NET_OUT_REMOTEFACERECOGNITION_DO_FIND;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionDoFind(LLONG lFindID, const NET_IN_REMOTEFACERECOGNITION_DO_FIND* pInParam, NET_OUT_REMOTEFACERECOGNITION_DO_FIND* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionStopFind(LLONG lFindID);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_SET_GROUP
{
    DWORD dwSize;            
    int nChannel;            
    int nGroupIDNum;         
    int nSimilaryNum;        
    char szGroupID[128][64]; 
    char nSimilary[128];     
} NET_IN_REMOTEFACERECOGNITION_SET_GROUP;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_SET_GROUP
{
    DWORD dwSize; 
} NET_OUT_REMOTEFACERECOGNITION_SET_GROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionSetGroup(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_SET_GROUP* pInParam, NET_OUT_REMOTEFACERECOGNITION_SET_GROUP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_GET_GROUP
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_REMOTEFACERECOGNITION_GET_GROUP;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_GET_GROUP
{
    DWORD dwSize;            
    int nValidCount;         
    char szGroupID[128][64]; 
    int nSimilarys[128];     
} NET_OUT_REMOTEFACERECOGNITION_GET_GROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionGetGroup(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_GET_GROUP* pInParam, NET_OUT_REMOTEFACERECOGNITION_GET_GROUP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_DOWNLOAD_PIECE
{
    DWORD dwSize;         
    int nChannel;         
    char szFilename[260]; 
    UINT nOffset;         
    UINT nNeedLength;     
    BYTE byReserved[4];   
} NET_IN_REMOTEFACERECOGNITION_DOWNLOAD_PIECE;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_DOWNLOAD_PIECE
{
    DWORD dwSize;     
    UINT nFileLength; 
    char* szBuffer;     
    UINT nBufferLen;    
    UINT nPacketLength; 
} NET_OUT_REMOTEFACERECOGNITION_DOWNLOAD_PIECE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionDownloadPiece(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_DOWNLOAD_PIECE* pInParam, NET_OUT_REMOTEFACERECOGNITION_DOWNLOAD_PIECE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_PUT_DISPOSITION
{
    DWORD dwSize;
    int nChannel;       
    char szGroupID[64]; 
    int nSimilary;      
} NET_IN_REMOTEFACERECOGNITION_PUT_DISPOSITION;
typedef struct tagNET_OUT_REMOTE_FACERECOGNITION_PUT_DISPOSITION
{
    DWORD dwSize;
} NET_OUT_REMOTEFACERECOGNITION_PUT_DISPOSITION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionPutDisposition(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_PUT_DISPOSITION* pstInParam, NET_OUT_REMOTEFACERECOGNITION_PUT_DISPOSITION* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTEFACERECOGNITION_DEL_DISPOSITION
{
    DWORD dwSize;
    int nChannel;       
    char szGroupID[64]; 
} NET_IN_REMOTEFACERECOGNITION_DEL_DISPOSITION;
typedef struct tagNET_OUT_REMOTEFACERECOGNITION_DEL_DISPOSITION
{
    DWORD dwSize;
} NET_OUT_REMOTEFACERECOGNITION_DEL_DISPOSITION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteFaceRecognitionDelDisposition(LLONG lLoginID, const NET_IN_REMOTEFACERECOGNITION_DEL_DISPOSITION* pstInParam, NET_OUT_REMOTEFACERECOGNITION_DEL_DISPOSITION* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTE_FACE_RECOGNITION_CAPS
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_REMOTE_FACE_RECOGNITION_CAPS;
typedef enum tagEM_FACE_RECOGGNIZE_FUNCTION
{
    EM_FACE_RECOGGNIZE_FUNCTION_UNKNOW = -1, 
    EM_FACE_RECOGGNIZE_FUNCTION_SELF,        
    EM_FACE_RECOGGNIZE_FUNCTION_AGENT,       
} EM_FACE_RECOGGNIZE_FUNCTION;
typedef enum tagEM_FACE_DATABASE_RECONSTRUCTION
{
    EM_FACE_DATABASE_RECONSTRUCTION_UNKNOWN = -1,                    
    EM_FACE_DATABASE_RECONSTRUCTION_REABSTRACT,                      
    EM_FACE_DATABASE_RECONSTRUCTION_REABSTRACT_WITH_GROUPREABSTRACT, 
} EM_FACE_DATABASE_RECONSTRUCTION;
typedef enum tagEM_FACE_RECOGGNIZE_DETECT_METHOD
{
    EM_FACE_RECOGGNIZE_DETECT_METHOD_UNKNOWN = -1,  
    EM_FACE_RECOGGNIZE_DETECT_METHOD_UNCERTAIN = 0, 
    EM_FACE_RECOGGNIZE_DETECT_METHOD_MULTIFACE = 1, 
} EM_FACE_RECOGGNIZE_DETECT_METHOD;
typedef struct tagNET_OUT_REMOTE_FACE_RECOGNITION_CAPS
{
    DWORD dwSize;                                    
    BOOL bMultiFind;                                 
    UINT nMaxFaceType;                               
    EM_FACE_RECOGGNIZE_FUNCTION emSupportFunction;   
    EM_FACE_DATABASE_RECONSTRUCTION emReAbstract;    
    EM_FACE_RECOGGNIZE_DETECT_METHOD emDetectMethod; 
    NET_FACEBOXCOLOR_CAPS stuFaceBoxColor;           
    BOOL bAsynPush;                                  
    BOOL bModifyPersonByToken;                       
    UINT nMaxGroupNum;                               
    UINT nMaxPersonNum;                              
    UINT nMultiAppendPicLength;                      
    EM_SUPPORT_SEARCH_BY_PIC emSupportSearchByPic;   
    DWORD dwSearchTypeMask;                          
    UINT nSinglePicMaxLength;                        
    BOOL bPersonWithMultiFace;                       
} NET_OUT_REMOTE_FACE_RECOGNITION_CAPS;
typedef struct tagNET_IN_MONITOR_WALL_CAPS_INFO
{
    DWORD dwSize; 
} NET_IN_MONITOR_WALL_CAPS_INFO;
typedef struct tagNET_OUT_MONITOR_WALL_CAPS_INFO
{
    DWORD dwSize;             
    int nMonitorWallCount;    
    BOOL bSupportAnnotation;  
    BOOL bSupportMeetingMode; 
    BOOL bSupportCrossDevice; 
} NET_OUT_MONITOR_WALL_CAPS_INFO;
typedef struct tagNET_IN_MODIFY_REMOTEDEVICE_PASSWORD
{
    DWORD dwSize;            
    int nChannel;            
    char szUserName[128];    
    char szNewPassword[128]; 
    char szOldPassword[128]; 
} NET_IN_MODIFY_REMOTEDEVICE_PASSWORD;
typedef struct tagNET_OUT_MODIFY_REMOTEDEVICE_PASSWORD
{
    DWORD dwSize;           
    int nErrorCode;         
    int nRemainModifyTimes; 
    int nRemainLockSeconds; 
} NET_OUT_MODIFY_REMOTEDEVICE_PASSWORD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyRemoteDevicePassword(LLONG lLoginID, const NET_IN_MODIFY_REMOTEDEVICE_PASSWORD* pInParam, NET_OUT_MODIFY_REMOTEDEVICE_PASSWORD* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_INTELLI_STATES_ENABLE_INFO
{
    DWORD dwSize;         
    UINT nChannelCount;   
    UINT nChannels[1024]; 
} NET_IN_GET_INTELLI_STATES_ENABLE_INFO;
typedef struct tagNET_HUMAN_TRAIT_ENABLE_INFO
{
    BOOL bFeatureExtract;   
    BOOL bAttributeExtract; 
    char szResvered[32];    
} NET_HUMAN_TRAIT_ENABLE_INFO;
typedef struct tagNET_VEHICLE_ENABLE_INFO
{
    BOOL bFeatureExtract;   
    BOOL bAttributeExtract; 
    char szResvered[32];    
} NET_VEHICLE_ENABLE_INFO;
typedef struct tagNET_NON_MOTOR_ENABLE_INFO
{
    BOOL bFeatureExtract;   
    BOOL bAttributeExtract; 
    char szResvered[32];    
} NET_NON_MOTOR_ENABLE_INFO;
typedef struct tagNET_OBJECT_DETECT_ENABLE_INFO
{
    BOOL bFeatureExtract;                      
    BOOL bAttributeExtract;                    
    BOOL bHumanTrait;                          
    NET_HUMAN_TRAIT_ENABLE_INFO stuHumanTrait; 
    BOOL bVehicle;                             
    NET_VEHICLE_ENABLE_INFO stuVehicle;        
    BOOL bNonMotor;                            
    NET_NON_MOTOR_ENABLE_INFO stuNonMotor;     
    char szResvered[36];                       
} NET_OBJECT_DETECT_ENABLE_INFO;
typedef struct tagNET_INTELLI_SCENE_INFO
{
    EM_CLASS_TYPE emClassType;                     
    BOOL bObjectDetect;                            
    NET_OBJECT_DETECT_ENABLE_INFO stuObjectDetect; 
    BYTE byReserved[336];                          
} NET_INTELLI_SCENE_INFO;
typedef struct tagNET_INTELLI_INFO_ABOUT_CHANNEL
{
    UINT nChannelID;                                 
    UINT nRetSceneNum;                               
    NET_INTELLI_SCENE_INFO stuIntelliSceneInfos[32]; 
    BYTE byReserved[512];                            
} NET_INTELLI_INFO_ABOUT_CHANNEL;
typedef struct tagNET_OUT_GET_INTELLI_STATES_ENABLE_INFO
{
    DWORD dwSize;                                    
    UINT nRetIntelliNum;                             
    UINT nMaxIntelliNum;                             
    BYTE byReserved[4];                              
    NET_INTELLI_INFO_ABOUT_CHANNEL* pstIntelliInfos; 
} NET_OUT_GET_INTELLI_STATES_ENABLE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetIntelliStatesEnableInfo(LLONG lLoginID, const NET_IN_GET_INTELLI_STATES_ENABLE_INFO* pInParam, NET_OUT_GET_INTELLI_STATES_ENABLE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOVE_PARKING_CAR_INFO
{
    DWORD dwSize;                                
    DEV_OCCUPIED_WARNING_INFO stuParkingCarInfo; 
} NET_IN_REMOVE_PARKING_CAR_INFO;
typedef struct tagNET_OUT_REMOVE_PARKING_CAR_INFO
{
    DWORD dwSize; 
} NET_OUT_REMOVE_PARKING_CAR_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveParkingCarInfo(LLONG lLoginID, const NET_IN_REMOVE_PARKING_CAR_INFO* pInParam, NET_OUT_REMOVE_PARKING_CAR_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTE_EVENT_LINK
{
    DWORD dwSize;                                                   
    int nChannel;                                                   
    BYTE bReserved[4];                                              
    int nCodeNum;                                                   
    EM_NET_QUERY_CODE szCodeName[MAX_EVENT_LINK_QUERY_CODE_NUMBER]; 
} NET_IN_REMOTE_EVENT_LINK;
typedef struct tagNET_EVENT_LINK_CODE
{
    EM_NET_LINK_NAME emLinkName[MAX_EVENT_LINK_NAME_NUMBER]; 
    int nNameNum;                                            
    BYTE byReserved[1020];                                   
} NET_EVENT_LINK_CODE;
typedef struct tagNET_OUT_REMOTE_EVENT_LINK
{
    DWORD dwSize;                                                      
    int nCodeNum;                                                      
    NET_EVENT_LINK_CODE stuLinkCode[MAX_EVENT_LINK_QUERY_CODE_NUMBER]; 
} NET_OUT_REMOTE_EVENT_LINK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRemoteEventLink(LLONG lLoginID, const NET_IN_REMOTE_EVENT_LINK* pInParam, NET_OUT_REMOTE_EVENT_LINK* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_I_FRAME_DATA_FROM_STORAGE_VIDEO
{
    DWORD dwSize;     
    int nChannel;     
    NET_TIME stuTime; 
} NET_IN_GET_I_FRAME_DATA_FROM_STORAGE_VIDEO;
typedef struct tagNET_OUT_GET_I_FRAME_DATA_FROM_STORAGE_VIDEO
{
    DWORD dwSize; 
    UINT nBufferLen;    
    char* szBuffer;     
    UINT nRetBufferLen; 
    BYTE bReserved[4];  
} NET_OUT_GET_I_FRAME_DATA_FROM_STORAGE_VIDEO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetIFrameDataFromStorageVideo(LLONG lLoginID, const NET_IN_GET_I_FRAME_DATA_FROM_STORAGE_VIDEO* pInParam, NET_OUT_GET_I_FRAME_DATA_FROM_STORAGE_VIDEO* pOutParam, int nWaitTime);
typedef struct tagNET_GROUP_INFO
{
    char szGroup[32];     
    TP_U64 nFreeSpace;    
    TP_U64 nTotalSpace;   
    UINT nDeviceNum;      
    char szReserved[256]; 
} NET_GROUP_INFO;
typedef struct tagNET_IN_GET_STORAGE_ASSISTANT_GROUP_INFO
{
    DWORD dwSize; 
} NET_IN_GET_STORAGE_ASSISTANT_GROUP_INFO;
typedef struct tagNET_OUT_GET_STORAGE_ASSISTANT_GROUP_INFO
{
    DWORD dwSize; 
    int nGroupNums;                   
    NET_GROUP_INFO stuGroupInfo[128]; 
} NET_OUT_GET_STORAGE_ASSISTANT_GROUP_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetStorageAssistantGroupInfos(LLONG lLoginID, const NET_IN_GET_STORAGE_ASSISTANT_GROUP_INFO* pInParam, NET_OUT_GET_STORAGE_ASSISTANT_GROUP_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_WORK_GROUP_DEVICE_INFO
{
    DWORD dwSize;    
    char szName[32]; 
} NET_IN_GET_WORK_GROUP_DEVICE_INFO;
typedef struct tagNET_OUT_GET_WORK_GROUP_DEVICE_INFO
{
    DWORD dwSize; 
    DH_STORAGE_DEVICE* pstuDeviceInfo; 
    int nMaxCount;                     
    int nReturnCount;                  
} NET_OUT_GET_WORK_GROUP_DEVICE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetWorkGroupDeviceInfos(LLONG lLoginID, const NET_IN_GET_WORK_GROUP_DEVICE_INFO* pInParam, NET_OUT_GET_WORK_GROUP_DEVICE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_WORK_DIRECTORY_GROUP
{
    DWORD dwSize;          
    char szName[256];      
    char szSubClassID[32]; 
    char szGroup[32];      
} NET_IN_SET_WORK_DIRECTORY_GROUP;
typedef struct tagNET_OUT_SET_WORK_DIRECTORY_GROUP
{
    DWORD dwSize; 
} NET_OUT_SET_WORK_DIRECTORY_GROUP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetWorkDirectoryGoup(LLONG lLoginID, const NET_IN_SET_WORK_DIRECTORY_GROUP* pInParam, NET_OUT_SET_WORK_DIRECTORY_GROUP* pOutParam, int nWaitTime);
typedef enum tagEM_WORK_DIRECTORY_FILE_TYPE
{
    EM_WORK_DIRECTORY_FILE_TYPE_UNKNOWN = 0, 
    EM_WORK_DIRECTORY_FILE_TYPE_DAV,         
    EM_WORK_DIRECTORY_FILE_TYPE_JPG,         
    EM_WORK_DIRECTORY_FILE_TYPE_MP4,         
} EM_WORK_DIRECTORY_FILE_TYPE;
typedef enum tagEM_WORK_DIRECTORY_EVENT_TYPE
{
    EM_WORK_DIRECTORY_EVENT_TYPE_UNKNOWN = 0,   
    EM_WORK_DIRECTORY_EVENT_TYPE_ANY_EVENT,     
    EM_WORK_DIRECTORY_EVENT_TYPE_ALARMLOCAL,    
    EM_WORK_DIRECTORY_EVENT_TYPE_VIDEOMOTION,   
    EM_WORK_DIRECTORY_EVENT_TYPE_FACEDETECTION, 
} EM_WORK_DIRECTORY_EVENT_TYPE;
typedef struct tagNET_WORK_DIRECTORY_BITMAPEX_CONDITION
{
    int nYear;                                      
    int nMonth;                                     
    int nChannel;                                   
    int nFileTypeNums;                              
    EM_WORK_DIRECTORY_FILE_TYPE emFileTypes[32];    
    BOOL bIsSupportEventTypes;                      
    int nEventTypeNums;                             
    EM_WORK_DIRECTORY_EVENT_TYPE emEventTypes[256]; 
    char szReserved[256];                           
} NET_WORK_DIRECTORY_BITMAPEX_CONDITION;
typedef struct tagNET_IN_GET_WORK_DIRECTORY_BITMAPEX
{
    DWORD dwSize;                                       
    char szName[256];                                   
    char szSubClassID[32];                              
    NET_WORK_DIRECTORY_BITMAPEX_CONDITION stuCondition; 
} NET_IN_GET_WORK_DIRECTORY_BITMAPEX;
typedef struct tagNET_OUT_GET_WORK_DIRECTORY_BITMAPEX
{
    DWORD dwSize; 
    UINT nBitmap; 
} NET_OUT_GET_WORK_DIRECTORY_BITMAPEX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetWorkDirectoryBitmapEx(LLONG lLoginID, const NET_IN_GET_WORK_DIRECTORY_BITMAPEX* pInParam, NET_OUT_GET_WORK_DIRECTORY_BITMAPEX* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_ENVIRONMENT_TEMPERATURE
{
    DWORD dwSize;         
    int nEnvironmentTemp; 
} NET_IN_SET_ENVIRONMENT_TEMPERATURE;
typedef struct tagNET_OUT_SET_ENVIRONMENT_TEMPERATURE
{
    DWORD dwSize; 
} NET_OUT_SET_ENVIRONMENT_TEMPERATURE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetEnvironmentTemperature(LLONG lLoginID, const NET_IN_SET_ENVIRONMENT_TEMPERATURE* pInParam, NET_OUT_SET_ENVIRONMENT_TEMPERATURE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_CLICK_DRAW_RECT_CUSTOM_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
    UINT nMode;    
} NET_IN_CLICK_DRAW_RECT_CUSTOM_INFO;
typedef struct tagNET_OUT_CLICK_DRAW_RECT_CUSTOM_INFO
{
    DWORD dwSize; 
} NET_OUT_CLICK_DRAW_RECT_CUSTOM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClickDrawRectCustom(LLONG lLoginID, const NET_IN_CLICK_DRAW_RECT_CUSTOM_INFO* pstuInParam, NET_OUT_CLICK_DRAW_RECT_CUSTOM_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_CLICK_CALI_CUSTOM_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
    UINT nMode;    
    int nEnvTemp;  
} NET_IN_CLICK_CALI_CUSTOM_INFO;
typedef struct tagNET_OUT_CLICK_CALI_CUSTOM_INFO
{
    DWORD dwSize; 
} NET_OUT_CLICK_CALI_CUSTOM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClickCaliCustom(LLONG lLoginID, const NET_IN_CLICK_CALI_CUSTOM_INFO* pstuInParam, NET_OUT_CLICK_CALI_CUSTOM_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_CLICK_ABORT_CUSTOM_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_CLICK_ABORT_CUSTOM_INFO;
typedef struct tagNET_OUT_CLICK_ABORT_CUSTOM_INFO
{
    DWORD dwSize; 
} NET_OUT_CLICK_ABORT_CUSTOM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClickAbortCustom(LLONG lLoginID, const NET_IN_CLICK_ABORT_CUSTOM_INFO* pstuInParam, NET_OUT_CLICK_ABORT_CUSTOM_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CALI_PROGRESS_CUSTOM_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GET_CALI_PROGRESS_CUSTOM_INFO;
typedef struct tagNET_OUT_GET_CALI_PROGRESS_CUSTOM_INFO
{
    DWORD dwSize;   
    UINT nProgress; 
} NET_OUT_GET_CALI_PROGRESS_CUSTOM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCaliProgressCustom(LLONG lLoginID, const NET_IN_GET_CALI_PROGRESS_CUSTOM_INFO* pstuInParam, NET_OUT_GET_CALI_PROGRESS_CUSTOM_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_ADAPTIVE_TEMP_RAISE_INFO
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GET_ADAPTIVE_TEMP_RAISE_INFO;
typedef struct tagNET_OUT_GET_ADAPTIVE_TEMP_RAISE_INFO
{
    DWORD dwSize;           
    int nAdaptiveRaiseTemp; 
    int nEnvTemp;           
} NET_OUT_GET_ADAPTIVE_TEMP_RAISE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAdaptiveTempRaise(LLONG lLoginID, const NET_IN_GET_ADAPTIVE_TEMP_RAISE_INFO* pInParam, NET_OUT_GET_ADAPTIVE_TEMP_RAISE_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_ACCESSCONTROL_AUTHORITY_TYPE
{
    EM_ACCESSCONTROL_AUTHORITY_TYPE_UNKNOWN = 0,    
    EM_ACCESSCONTROL_AUTHORITY_TYPE_8900APP,        
    EM_ACCESSCONTROL_AUTHORITY_TYPE_8900CLIENT,     
    EM_ACCESSCONTROL_AUTHORITY_TYPE_YUNRUIAPP,      
    EM_ACCESSCONTROL_AUTHORITY_TYPE_MANAGE_MACHINE, 
    EM_ACCESSCONTROL_AUTHORITY_TYPE_INDOOR_MACHINE, 
} EM_ACCESSCONTROL_AUTHORITY_TYPE;
typedef struct tagNET_IN_ACCESSCONTROL_ISSUE_AUTHORITY
{
    DWORD dwSize;                                    
    char szRoomNo[32];                               
    char szCitizenID[32];                            
    EM_ACCESSCONTROL_AUTHORITY_TYPE emAuthorityType; 
} NET_IN_ACCESSCONTROL_ISSUE_AUTHORITY;
typedef struct tagNET_OUT_ACCESSCONTROL_ISSUE_AUTHORITY
{
    DWORD dwSize; 
} NET_OUT_ACCESSCONTROL_ISSUE_AUTHORITY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AccessControlIssueAuthority(LLONG lLoginID, const NET_IN_ACCESSCONTROL_ISSUE_AUTHORITY* pInParam, NET_OUT_ACCESSCONTROL_ISSUE_AUTHORITY* pOutParam, int nWaitTime);
typedef struct tagNET_IN_ACCESSCONTROL_CAPTURE_NEWCARD
{
    DWORD dwSize;    
    UINT nAllowTime; 
} NET_IN_ACCESSCONTROL_CAPTURE_NEWCARD;
typedef struct tagNET_OUT_ACCESSCONTROL_CAPTURE_NEWCARD
{
    DWORD dwSize; 
} NET_OUT_ACCESSCONTROL_CAPTURE_NEWCARD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AccessControlCaptureNewCard(LLONG lLoginID, const NET_IN_ACCESSCONTROL_CAPTURE_NEWCARD* pInParam, NET_OUT_ACCESSCONTROL_CAPTURE_NEWCARD* pOutParam, int nWaitTime);
typedef enum tagEM_GATHER_TYPE
{
    EM_GATHER_TYPE_UNKNOWN = 0, 
    EM_GATHER_TYPE_FACE,        
    EM_GATHER_TYPE_IDCARD,      
} EM_GATHER_TYPE;
typedef struct tagNET_IN_ACCESSCONTROL_CAPTURE_CMD
{
    DWORD dwSize;                
    EM_GATHER_TYPE emGathertype; 
    char szUserID[12];           
} NET_IN_ACCESSCONTROL_CAPTURE_CMD;
typedef struct tagNET_OUT_ACCESSCONTROL_CAPTURE_CMD
{
    DWORD dwSize; 
} NET_OUT_ACCESSCONTROL_CAPTURE_CMD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AccessControlCaptureCmd(LLONG lLoginID, const NET_IN_ACCESSCONTROL_CAPTURE_CMD* pInParam, NET_OUT_ACCESSCONTROL_CAPTURE_CMD* pOutParam, int nWaitTime);
typedef enum tagEM_CONTACT_MODE_FOR_RESET_PASSWD
{
    EM_CONTACT_MODE_FOR_RESET_PASSWD_UNKNOWN, 
    EM_CONTACT_MODE_FOR_RESET_PASSWD_PHONE,   
    EM_CONTACT_MODE_FOR_RESET_PASSWD_EMAIL,   
} EM_CONTACT_MODE_FOR_RESET_PASSWD;
typedef struct tagNET_IN_SET_CONTACT_FOR_RESET_PASSWD
{
    DWORD dwSize;                            
    EM_CONTACT_MODE_FOR_RESET_PASSWD emMode; 
    char szContact[256];                     
} NET_IN_SET_CONTACT_FOR_RESET_PASSWD;
typedef struct tagNET_OUT_SET_CONTACT_FOR_RESET_PASSWD
{
    DWORD dwSize; 
} NET_OUT_SET_CONTACT_FOR_RESET_PASSWD;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetContactForResetPasswd(LLONG lLoginID, const NET_IN_SET_CONTACT_FOR_RESET_PASSWD* pInParam, NET_OUT_SET_CONTACT_FOR_RESET_PASSWD* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTE_PREUPLOAD_FILE
{
    DWORD dwSize;            
    int nChannel;            
    char szFileSrc[256];     
    char szFileNameDst[128]; 
    char szFolderDst[256];   
} NET_IN_REMOTE_PREUPLOAD_FILE;
typedef struct tagNET_OUT_REMOTE_PREUPLOAD_FILE
{
    DWORD dwSize;          
    BOOL bContinue2Upload; 
    EM_REASON_TYPE emType; 
} NET_OUT_REMOTE_PREUPLOAD_FILE;
typedef enum tagNET_UPLOAD_PROCESS_STATUS
{
    NET_UPLOAD_PROCESS_STATUS_UPLOADING, 
    NET_UPLOAD_PROCESS_STATUS_COMPLETE,  
    NET_UPLOAD_PROCESS_STATUS_FAILED,    
    NET_UPLOAD_PROCESS_STATUS_CANCEL,    
} NET_UPLOAD_PROCESS_STATUS;
typedef void(CALLBACK* fRemoteUploadFileCallBack)(LLONG lRemoteUploadFileID, int nTotalSize, int nSendSize, NET_UPLOAD_PROCESS_STATUS emStatus, LDWORD dwUser);
typedef struct tagNET_IN_REMOTE_UPLOAD_FILE
{
    DWORD dwSize;                           
    int nChannel;                           
    char szFileSrc[256];                    
    char szFileNameDst[128];                
    char szFolderDst[256];                  
    fRemoteUploadFileCallBack cbUploadFile; 
    LDWORD dwUser;                          
    UINT nPacketLen;                        
} NET_IN_REMOTE_UPLOAD_FILE;
typedef struct tagNET_OUT_REMOTE_UPLOAD_FILE
{
    DWORD dwSize; 
} NET_OUT_REMOTE_UPLOAD_FILE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemotePreUploadFile(LLONG lLoginID, const NET_IN_REMOTE_PREUPLOAD_FILE* pInParam, NET_OUT_REMOTE_PREUPLOAD_FILE* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartRemoteUploadFile(LLONG lLoginID, const NET_IN_REMOTE_UPLOAD_FILE* pInParam, NET_OUT_REMOTE_UPLOAD_FILE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopRemoteUploadFile(LLONG lRemoteUploadFileID);
typedef struct tagNET_IN_REMOTE_LIST
{
    DWORD dwSize;     
    int nChannel;     
    char szPath[256]; 
} NET_IN_REMOTE_LIST;
typedef struct tagNET_REMOTE_FILE_INFO
{
    char szPath[256];     
    UINT nSize;           
    BYTE byReserved[508]; 
} NET_REMOTE_FILE_INFO;
typedef struct tagNET_OUT_REMOTE_LIST
{
    DWORD dwSize;                       
    NET_REMOTE_FILE_INFO* pstuFileInfo; 
    int nMaxFileCount;                  
    int nRetFileCount;                  
} NET_OUT_REMOTE_LIST;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteList(LLONG lLoginID, const NET_IN_REMOTE_LIST* pInParam, NET_OUT_REMOTE_LIST* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTE_RENAME
{
    DWORD dwSize;        
    int nChannel;        
    char szOldName[128]; 
    char szNewName[128]; 
} NET_IN_REMOTE_RENAME;
typedef struct tagNET_OUT_REMOTE_RENAME
{
    DWORD dwSize; 
} NET_OUT_REMOTE_RENAME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteRename(LLONG lLoginID, const NET_IN_REMOTE_RENAME* pInParam, NET_OUT_REMOTE_RENAME* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOTE_REMOVE_FILES
{
    DWORD dwSize;       
    int nChannel;       
    int nFileNum;       
    char** pszFileName; 
} NET_IN_REMOTE_REMOVE_FILES;
typedef struct tagNET_OUT_REMOTE_REMOVE_FILES
{
    DWORD dwSize; 
} NET_OUT_REMOTE_REMOVE_FILES;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoteRemoveFiles(LLONG lLoginID, const NET_IN_REMOTE_REMOVE_FILES* pInParam, NET_OUT_REMOTE_REMOVE_FILES* pOutParam, int nWaitTime);
typedef struct tagNET_USER_PICTURE_DATA
{
    char* pszPictureData;  
    UINT nPictureLen;      
    BYTE byReserved[1020]; 
} NET_USER_PICTURE_DATA;
typedef struct tagNET_IN_DELIVER_USER_PICTURE
{
    DWORD dwSize;                            
    int nResult;                             
    char szCitizenID[32];                    
    char szUserID[64];                       
    NET_USER_PICTURE_DATA stuPictureData[5]; 
    int nPictureData;                        
    BYTE byReserved[4];                      
} NET_IN_DELIVER_USER_PICTURE;
typedef struct tagNET_OUT_DELIVER_USER_PICTURE
{
    DWORD dwSize; 
} NET_OUT_DELIVER_USER_PICTURE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeliverUserFacePicture(LLONG lLoginID, const NET_IN_DELIVER_USER_PICTURE* pInParam, NET_OUT_DELIVER_USER_PICTURE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_RESET_PTZ
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_RESET_PTZ;
typedef struct tagNET_OUT_RESET_PTZ
{
    DWORD dwSize; 
} NET_OUT_RESET_PTZ;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResetPTZ(LLONG lLoginID, const NET_IN_RESET_PTZ* pInParam, NET_OUT_RESET_PTZ* pOutParam, int nWaitTime);
typedef struct tagNET_ATTACH_LOG_ONLINE_BACKUP_INFO
{
    char szUserType[64];         
    NET_TIME stuTime;            
    DH_LOG_QUERY_TYPE emLogType; 
    int nLogLevel;               
    char szLogDetail[4096];      
} NET_ATTACH_LOG_ONLINE_BACKUP_INFO;
typedef void(CALLBACK* fAttachLogOnlineBackUpCallBack)(LLONG lAttachHandle, NET_ATTACH_LOG_ONLINE_BACKUP_INFO* pstLogInfo, int nLogCount, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_LOG_ONLINE_BACKUP
{
    DWORD dwSize;                               
    DH_LOG_QUERY_TYPE emLogType;                
    int nLogLevel;                              
    BYTE byReserved[4];                         
    fAttachLogOnlineBackUpCallBack cbLogBackUp; 
    LDWORD dwUser;                              
} NET_IN_ATTACH_LOG_ONLINE_BACKUP;
typedef struct tagNET_OUT_ATTACH_LOG_ONLINE_BACKUP
{
    DWORD dwSize; 
} NET_OUT_ATTACH_LOG_ONLINE_BACKUP;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachLogOnlineBackUp(LLONG lLoginID, const NET_IN_ATTACH_LOG_ONLINE_BACKUP* pInParam, NET_OUT_ATTACH_LOG_ONLINE_BACKUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachLogOnlineBackUp(LLONG lAttachHandle);
typedef enum tagEM_APPOINTMENT_RESULT
{
    EM_APPOINTMENT_RESULT_UNKNOWN,         
    EM_APPOINTMENT_RESULT_ALREADY_APPOINT, 
    EM_APPOINTMENT_RESULT_NOT_APPOINT,     
} EM_APPOINTMENT_RESULT;
typedef struct tagNET_IN_DELIVER_APPOINTMENT_INFO
{
    DWORD dwSize;                   
    int nChannel;                   
    EM_APPOINTMENT_RESULT emResult; 
    BYTE byReserved[4];             
    char szCitizenID[32];           
    char szCitizenName[128];        
    char szIntervieweeName[128];    
    char* pszVisitReason;           
    UINT nVisitReason;              
    UINT nUniqueID;                 
} NET_IN_DELIVER_APPOINTMENT_INFO;
typedef struct tagNET_OUT_DELIVER_APPOINTMENT_INFO
{
    DWORD dwSize; 
} NET_OUT_DELIVER_APPOINTMENT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeliverAppointmentInfo(LLONG lLoginID, const NET_IN_DELIVER_APPOINTMENT_INFO* pInParam, NET_OUT_DELIVER_APPOINTMENT_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_LED_TYPE
{
    EM_LED_TYPE_UNKNOWN, 
    EM_LED_TYPE_NET,     
    EM_LED_TYPE_POWER,   
    EM_LED_TYPE_INFO,    
    EM_LED_TYPE_ALARM,   
} EM_LED_TYPE;
typedef enum tagEM_LED_MODE
{
    EM_LED_MODE_UNKNOWN = -1, 
    EM_LED_MODE_ALWAYS_ON,    
    EM_LED_MODE_FLASHING,     
    EM_LED_MODE_OFF,          
} EM_LED_MODE;
typedef struct tagNET_IN_SET_LED_MODE
{
    DWORD dwSize;          
    EM_LED_TYPE emLedType; 
    EM_LED_MODE emMode;    
    BYTE byReserved[4];    
} NET_IN_SET_LED_MODE;
typedef struct tagNET_OUT_SET_LED_MODE
{
    DWORD dwSize; 
} NET_OUT_SET_LED_MODE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FaceBoard_SetLedMode(LLONG lLoginID, const NET_IN_SET_LED_MODE* pInParam, NET_OUT_SET_LED_MODE* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_INKSCREEN_CAPS_INFO
{
    DWORD dwSize; 
} NET_IN_GET_INKSCREEN_CAPS_INFO;
typedef struct tagNET_FACE_BOARD_MODES
{
    char szName[32];      
    int nTypes;           
    char szReserved[252]; 
} NET_FACE_BOARD_MODES;
typedef struct taNET_OUT_GET_INKSCREEN_CAPS_INFO
{
    DWORD dwSize;                      
    int nModesNum;                     
    NET_FACE_BOARD_MODES stuModes[32]; 
} NET_OUT_GET_INKSCREEN_CAPS_INFO;
typedef struct tagNET_IN_GET_INKSCREEN_CONFIG_INFO
{
    DWORD dwSize; 
} NET_IN_GET_INKSCREEN_CONFIG_INFO;
typedef struct tagNET_OUT_GET_INKSCREEN_CONFIG_INFO
{
    DWORD dwSize;                 
    NET_FACE_BOARD_MODES stuMode; 
} NET_OUT_GET_INKSCREEN_CONFIG_INFO;
typedef struct tagNET_IN_SET_INKSCREEN_CONFIG_INFO
{
    DWORD dwSize;                 
    NET_FACE_BOARD_MODES stuMode; 
} NET_IN_SET_INKSCREEN_CONFIG_INFO;
typedef struct tagNET_OUT_SET_INKSCREEN_CONFIG_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_INKSCREEN_CONFIG_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFaceBoardInkScreenCaps(LLONG lLoginID, const NET_IN_GET_INKSCREEN_CAPS_INFO* pInParam, NET_OUT_GET_INKSCREEN_CAPS_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFaceBoardInkScreenConfig(LLONG lLoginID, const NET_IN_GET_INKSCREEN_CONFIG_INFO* pInParam, NET_OUT_GET_INKSCREEN_CONFIG_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetFaceBoardInkScreenConfig(LLONG lLoginID, const NET_IN_SET_INKSCREEN_CONFIG_INFO* pInParam, NET_OUT_SET_INKSCREEN_CONFIG_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_DEAL_EVENT_RESULT
{
    EM_DEAL_EVENT_RESULT_UNKNOWN, 
    EM_DEAL_EVENT_RESULT_IDLE,    
    EM_DEAL_EVENT_RESULT_RUNNING, 
    EM_DEAL_EVENT_RESULT_SUCCESS, 
    EM_DEAL_EVENT_RESULT_FAIL     
} EM_DEAL_EVENT_RESULT;
typedef struct tagNET_IN_RECEIPT_EVENT_INFO
{
    DWORD dwSize;                  
    int nEventID;                  
    EM_DEAL_EVENT_RESULT emResult; 
    BYTE byReserved[1020];         
} NET_IN_RECEIPT_EVENT_INFO;
typedef struct tagNET_OUT_RECEIPT_EVENT_INFO
{
    DWORD dwSize; 
} NET_OUT_RECEIPT_EVENT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ReceiptEvent(LLONG lLoginID, const NET_IN_RECEIPT_EVENT_INFO* pInParam, NET_OUT_RECEIPT_EVENT_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_DRIVER_INFO
{
    NET_TIME stuTime;             
    char szDriverName[64];        
    char szDriverID[64];          
    char szCertificateID[64];     
    char szOrganize[64];          
    NET_TIME stuUsefulLife;       
    char szDriverCode[32];        
    NET_DRIVER_CHECK_TYPE emType; 
    BYTE byReserved[1020];        
} NET_DRIVER_INFO;
typedef struct tagNET_IN_GET_DRIVER_INFO
{
    DWORD dwSize; 
} NET_IN_GET_DRIVER_INFO;
typedef struct tagNET_OUT_GET_DRIVER_INFO
{
    DWORD dwSize;                  
    NET_DRIVER_INFO stuDriverInfo; 
} NET_OUT_GET_DRIVER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDriverInfo(LLONG lLoginID, const NET_IN_GET_DRIVER_INFO* pInParam, NET_OUT_GET_DRIVER_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_VEHICLE_INFO
{
    DWORD dwSize; 
} NET_IN_GET_VEHICLE_INFO;
typedef struct tagNET_OUT_GET_VEHICLE_INFO
{
    DWORD dwSize;          
    NET_TIME stuUTC;       
    char szPlate[32];      
    char szPlateType[32];  
    char szDriverCode[64]; 
    char szDriverID[64];   
    char szVehicleVIN[64]; 
    int nPulseFactor;      
} NET_OUT_GET_VEHICLE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVehicleInfo(LLONG lLoginID, const NET_IN_GET_VEHICLE_INFO* pInParam, NET_OUT_GET_VEHICLE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_UPGRADE_CUSTOM_INFO
{
    char szAppName[128];   
    char szUri[256];       
    char szVersion[32];    
    char szMd5Sum[40];     
    BYTE byReserved[1020]; 
} NET_UPGRADE_CUSTOM_INFO;
typedef struct tagNET_IN_SEND_CMD_TO_APP
{
    DWORD dwSize;                 
    EM_CMD_TO_APP_TYPE emCmdType; 
    void* pstData;                
    char szUUID[64];              
} NET_IN_SEND_CMD_TO_APP;
typedef struct tagNET_OUT_SEND_CMD_TO_APP
{
    DWORD dwSize;                 
    EM_CMD_TO_APP_TYPE emCmdType; 
    void* pstRsp;                 
} NET_OUT_SEND_CMD_TO_APP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendCmdToDhopApp(LLONG lLoginID, const NET_IN_SEND_CMD_TO_APP* pInParam, NET_OUT_SEND_CMD_TO_APP* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_VIDEO_ENCODE_DELAY_INFO
{
    DWORD dwSize;                     
    int nChannel;                     
    NET_STREAM_TYPE emStreamType;     
    int nDelayTime;                   
} NET_IN_SET_VIDEO_ENCODE_DELAY_INFO; 
typedef struct tagNET_OUT_SET_VIDEO_ENCODE_DELAY_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_VIDOE_ENCODE_DELAY_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetVideoEncodeDelay(LLONG lLoginID, const NET_IN_SET_VIDEO_ENCODE_DELAY_INFO* pInParam, NET_OUT_SET_VIDOE_ENCODE_DELAY_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_VIDEO_ENCODE_BITRATE_INFO
{
    DWORD dwSize;                 
    int nChannel;                 
    NET_STREAM_TYPE emStreamType; 
} NET_IN_GET_VIDEO_ENCODE_BITRATE_INFO;
typedef struct tagNET_OUT_GET_VIDEO_ENCODE_BITRATE_INFO
{
    DWORD dwSize;  
    UINT nBitrate; 
} NET_OUT_GET_VIDOE_ENCODE_BITRATE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVideoEncodeBitrate(LLONG lLoginID, const NET_IN_GET_VIDEO_ENCODE_BITRATE_INFO* pInParam, NET_OUT_GET_VIDOE_ENCODE_BITRATE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_BOOT_PARAMETER
{
    DWORD dwSize;         
    int nNameNum;         
    char szNames[32][32]; 
} NET_IN_GET_BOOT_PARAMETER;
typedef struct tagNET_BOOT_PARAMETER_INFO
{
    char szName[32];            
    char szParameterValue[256]; 
    BYTE bReserved[256];        
} NET_BOOT_PARAMETER_INFO;
typedef struct tagNET_OUT_GET_BOOT_PARAMETER
{
    DWORD dwSize;                                 
    UINT nRetBootParamNum;                        
    NET_BOOT_PARAMETER_INFO stuBootParamInfo[32]; 
} NET_OUT_GET_BOOT_PARAMETER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetBootParameter(LLONG lLoginID, const NET_IN_GET_BOOT_PARAMETER* pInParam, NET_OUT_GET_BOOT_PARAMETER* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_LOCAL_IPV4
{
    DWORD dwSize; 
} NET_IN_GET_LOCAL_IPV4;
typedef struct tagNET_OUT_GET_LOCAL_IPV4
{
    DWORD dwSize;                         
    char szIPv4[32][DH_MAX_IPADDRV4_LEN]; 
    unsigned int nValidNum;               
} NET_OUT_GET_LOCAL_IPV4;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLocalIPv4(const NET_IN_GET_LOCAL_IPV4* pInParam, NET_OUT_GET_LOCAL_IPV4* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetLocalIPv4(unsigned int nIndex);
typedef struct tagNET_IN_GET_LOCAL_IPV6
{
    DWORD dwSize; 
} NET_IN_GET_LOCAL_IPV6;
typedef struct tagNET_OUT_GET_LOCAL_IPV6
{
    DWORD dwSize;                         
    char szIPv6[32][DH_MAX_IPADDRV6_LEN]; 
    unsigned int nValidNum;               
} NET_OUT_GET_LOCAL_IPV6;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLocalIPv6(const NET_IN_GET_LOCAL_IPV6* pInParam, NET_OUT_GET_LOCAL_IPV6* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetLocalIPv6(unsigned int nIndex);
typedef struct tagNET_IN_GET_LVM_INFO
{
    DWORD dwSize;    
    char szName[32]; 
} NET_IN_GET_LVM_INFO;
typedef enum tagEM_LVM_VG_STATE
{
    EM_LMV_VG_STATE_UNKNOWN, 
    EM_LMV_VG_STATE_NORMAL,  
    EM_LMV_VG_STATE_RUINED,  
    EM_LMV_VG_STATE_ERROR,   
} EM_LMV_VG_STATE;
typedef struct tagNET_LVM_INFO
{
    double dbFreeSpace;       
    double dbTotalSpace;      
    EM_LMV_VG_STATE emStatus; 
} NET_LVM_INFO;
typedef struct tagNET_OUT_GET_LVM_INFO
{
    DWORD dwSize;         
    NET_LVM_INFO stuInfo; 
} NET_OUT_GET_LVM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetLVMInfo(LLONG lLoginID, const NET_IN_GET_LVM_INFO* pInparam, NET_OUT_GET_LVM_INFO* pOutParam, int nWaitTime);
typedef enum tagNET_EM_SENSE_METHOD
{
    NET_EM_SENSE_UNKNOWN = -1,     
    NET_EM_SENSE_DOOR = 0,         
    NET_EM_SENSE_PASSIVEINFRA,     
    NET_EM_SENSE_GAS,              
    NET_EM_SENSE_SMOKING,          
    NET_EM_SENSE_WATER,            
    NET_EM_SENSE_ACTIVEFRA,        
    NET_EM_SENSE_GLASS,            
    NET_EM_SENSE_EMERGENCYSWITCH,  
    NET_EM_SENSE_SHOCK,            
    NET_EM_SENSE_DOUBLEMETHOD,     
    NET_EM_SENSE_THREEMETHOD,      
    NET_EM_SENSE_TEMP,             
    NET_EM_SENSE_HUMIDITY,         
    NET_EM_SENSE_WIND,             
    NET_EM_SENSE_CALLBUTTON,       
    NET_EM_SENSE_GASPRESSURE,      
    NET_EM_SENSE_GASCONCENTRATION, 
    NET_EM_SENSE_GASFLOW,          
    NET_EM_SENSE_OIL,              
    NET_EM_SENSE_MILEAGE,          
    NET_EM_SENSE_OTHER,            
    NET_EM_SEHSE_CO2,              
    NET_EM_SEHSE_SOUND,            
    NET_EM_SEHSE_PM25,             
    NET_EM_SEHSE_SF6,              
    NET_EM_SEHSE_O3,               
    NET_EM_SEHSE_AMBIENTLIGHT,     
    NET_EM_SEHSE_INFRARED,         
    NET_EM_SEHSE_TEMP1500,         
    NET_EM_SEHSE_TEMPDS18B20,      
    NET_EM_SEHSE_HUMIDITY1500,     
    NET_EM_SEHSE_URGENCYBUTTON,    
    NET_EM_SEHSE_STEAL,            
    NET_EM_SEHSE_PERIMETER,        
    NET_EM_SEHSE_PREVENTREMOVE,    
    NET_EM_SEHSE_DOORBELL,         
    NET_EM_SEHSE_ALTERVOLT,        
    NET_EM_SEHSE_DIRECTVOLT,       
    NET_EM_SEHSE_ALTERCUR,         
    NET_EM_SEHSE_DIRECTCUR,        
    NET_EM_SEHSE_RSUGENERAL,       
    NET_EM_SEHSE_RSUDOOR,          
    NET_EM_SEHSE_RSUPOWEROFF,      
    NET_EM_SEHSE_CURTAINSENSOR,    
    NET_EM_SEHSE_MOBILESENSOR,     
    NET_EM_SEHSE_FIREALARM,        
    NET_EM_SEHSE_LOCKTONGUE,       
    NET_EM_SENSE_NUM               
} NET_EM_SENSE_METHOD;
typedef enum tagNET_EM_CTRL_ENABLE
{
    NET_EM_CTRL_NORMAL = 0, 
    NET_EM_CTRL_ALWAYS_EN,  
    NET_EM_CTRL_ONCE_DIS,   
    NET_EM_CTRL_ALWAYS_DIS, 
    NET_EM_CTRL_NUM         
} NET_EM_CTRL_ENABLE;
typedef enum tagNET_EM_CFG_DEFENCEAREATYPE
{
    NET_EM_CFG_DefenceAreaType_Unknown = 0,      
    NET_EM_CFG_DefenceAreaType_InTime,           
    NET_EM_CFG_DefenceAreaType_Delay,            
    NET_EM_CFG_DefenceAreaType_FullDay,          
    NET_EM_CFG_DefenceAreaType_Follow,           
    NET_EM_CFG_DefenceAreaType_Medical,          
    NET_EM_CFG_DefenceAreaType_Panic,            
    NET_EM_CFG_DefenceAreaType_Fire,             
    NET_EM_CFG_DefenceAreaType_FullDaySound,     
    NET_EM_CFG_DefenceAreaType_FullDaySlient,    
    NET_EM_CFG_DefenceAreaType_Entrance1,        
    NET_EM_CFG_DefenceAreaType_Entrance2,        
    NET_EM_CFG_DefenceAreaType_InSide,           
    NET_EM_CFG_DefenceAreaType_OutSide,          
    NET_EM_CFG_DefenceAreaType_PeopleDetect,     
    NET_EM_CFG_DefenceAreaType_Robbery,          
    NET_EM_CFG_DefenceAreaType_Key,              
    NET_EM_CFG_DefenceAreaType_FulldayAuxiliary, 
    NET_EM_CFG_DefenceAreaType_FulldayVibration, 
    NET_EM_CFG_DefenceAreaType_Chime,            
} NET_EM_CFG_DEFENCEAREATYPE;
typedef struct tagNET_CFG_ALARMIN_INFO
{
    DWORD dwSize;                              
    int nChannelID;                            
    BOOL bEnable;                              
    char szChnName[64];                        
    int nAlarmType;                            
    NET_ALARM_MSG_HANDLE stuEventHandler;      
    NET_CFG_TIME_SECTION stuTimeSection[7][6]; 
    BOOL abDevID;                              
    char szDevID[128];                         
    int nPole;                                 
    NET_EM_SENSE_METHOD emSense;               
    NET_EM_CTRL_ENABLE emCtrl;                 
    int nDisDelay;                             
    NET_EM_CFG_DEFENCEAREATYPE emDefenceAreaType; 
    int nEnableDelay;                             
    int nSlot;                                    
    int nLevel1;                                  
    BOOL abLevel2;                                
    int nLevel2;                                  
    int nDoorNotClosedTimeout;                    
} NET_CFG_ALARMIN_INFO;
typedef struct tagNET_CFG_PTZ_DIRECTION_CORRECT_INFO
{
    DWORD dwSize;      
    UINT nPanRefAngle; 
    UINT nRefTimes;    
    UINT nMoveMode;    
} NET_CFG_PTZ_DIRECTION_CORRECT_INFO;
typedef struct tagCFG_ALARM_UPLOAD
{
    BOOL bEnable;        
    float fHighLevel;    
    UINT nAlarmInterval; 
    BYTE byReserved1[4]; 
    char bReserved[256]; 
} CFG_ALARM_UPLOAD;
typedef struct tagCFG_DATA_UPLOAD
{
    BOOL bEnable;         
    UINT nUploadInterval; 
    char bReserved[256];  
} CFG_DATA_UPLOAD;
typedef struct tagCFG_PER_RAIN_FALL_CONFIG_INFO
{
    CFG_ALARM_UPLOAD stuAlarmUpload; 
    CFG_DATA_UPLOAD stuDataUpload;   
    char bReserved[1024];            
} CFG_PER_RAIN_FALL_CONFIG_INFO;
typedef struct tagNET_CFG_RAIN_FALL_CONFIG_INFO
{
    DWORD dwSize;                                        
    CFG_PER_RAIN_FALL_CONFIG_INFO stuRainFallConfig[64]; 
    UINT nRainFallConfigNum;                             
} NET_CFG_RAIN_FALL_CONFIG_INFO;
typedef struct tagNET_IN_ADD_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize;          
    char szTaskName[256];  
    int nChannels[512];    
    int nChannelNum;       
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
} NET_IN_ADD_DOUBLE_RECORD_TASK_INFO;
typedef enum tagEM_TASK_ADD_ERROR_CODE
{
    EM_TASK_ADD_ERROR_CODE_UNKNOWN,         
    EM_TASK_ADD_ERROR_CODE_NO_ERROR,        
    EM_TASK_ADD_ERROR_CODE_PARAMETER_ERROR, 
    EM_TASK_ADD_ERROR_CODE_NO_RECORD,       
} EM_TASK_ADD_ERROR_CODE;
typedef struct tagNET_OUT_ADD_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize;                       
    UINT nTaskID;                       
    EM_TASK_ADD_ERROR_CODE emErrorCode; 
} NET_OUT_ADD_DOUBLE_RECORD_TASK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddDoubleRecordTask(LLONG lLoginID, const NET_IN_ADD_DOUBLE_RECORD_TASK_INFO* pInParam, NET_OUT_ADD_DOUBLE_RECORD_TASK_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_TASK_TYPE
{
    EM_TASK_TYPE_UNKNOWN,    
    EM_TASK_TYPE_USB,        
    EM_TASK_TYPE_SFTP,       
    EM_TASK_TYPE_BACKUPDISK, 
} EM_TASK_TYPE;
typedef struct tagNET_BACKUP_TASK_INFO
{
    char szTaskName[256];             
    NET_TIME stuStartTime;            
    NET_TIME stuEndTime;              
    char szBackupsTypePath[256][256]; 
    int nBackupsPathNum;              
    EM_TASK_TYPE emBackupsType;       
    BYTE byReserved[256];             
} NET_BACKUP_TASK_INFO;
typedef struct tagNET_IN_ADD_DOUBLE_RECORD_LOCAL_TASK
{
    DWORD dwSize;                       
    NET_BACKUP_TASK_INFO stuBackupTask; 
} NET_IN_ADD_DOUBLE_RECORD_LOCAL_TASK;
typedef struct tagNET_OUT_ADD_DOUBLE_RECORD_LOCAL_TASK
{
    DWORD dwSize;                       
    UINT nTaskID;                       
    EM_TASK_ADD_ERROR_CODE emErrorCode; 
} NET_OUT_ADD_DOUBLE_RECORD_LOCAL_TASK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddDoubleRecordLocalTask(LLONG lLoginID, const NET_IN_ADD_DOUBLE_RECORD_LOCAL_TASK* pInParam, NET_OUT_ADD_DOUBLE_RECORD_LOCAL_TASK* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize; 
    UINT nTaskID; 
} NET_IN_GET_DOUBLE_RECORD_TASK_INFO;
typedef struct tagNET_OUT_GET_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize;                  
    EM_TASK_TYPE emTaskType;       
    UINT nTaskID;                  
    UINT nProgress;                
    char szTaskName[256];          
    NET_TIME stuProgressStartTime; 
    NET_TIME stuProgressEndTime;   
    NET_TIME stuStartTime;         
    NET_TIME stuEndTime;           
    UINT nProgressFileNum;         
    UINT nFileSize;                
} NET_OUT_GET_DOUBLE_RECORD_TASK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDoubleRecordTaskInfo(LLONG lLoginID, const NET_IN_GET_DOUBLE_RECORD_TASK_INFO* pInParam, NET_OUT_GET_DOUBLE_RECORD_TASK_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_START_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize;       
    int nTaskNum;       
    UINT nTaskID[1024]; 
} NET_IN_START_DOUBLE_RECORD_TASK_INFO;
typedef struct tagNET_OUT_START_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize; 
} NET_OUT_START_DOUBLE_RECORD_TASK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartDoubleRecordTask(LLONG lLoginID, const NET_IN_START_DOUBLE_RECORD_TASK_INFO* pInParam, NET_OUT_START_DOUBLE_RECORD_TASK_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOVE_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize;       
    int nTaskNum;       
    UINT nTaskID[1024]; 
} NET_IN_REMOVE_DOUBLE_RECORD_TASK_INFO;
typedef struct tagNET_OUT_REMOVE_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize; 
} NET_OUT_REMOVE_DOUBLE_RECORD_TASK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveDoubleRecordTask(LLONG lLoginID, const NET_IN_REMOVE_DOUBLE_RECORD_TASK_INFO* pInParam, NET_OUT_REMOVE_DOUBLE_RECORD_TASK_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_FIND_CONDITION_INFO
{
    char szName[32];      
    BYTE byReserved[256]; 
} NET_FIND_CONDITION_INFO;
typedef struct tagNET_IN_START_FIND_DOUBLE_RECORD_TASK_IFNO
{
    DWORD dwSize;                         
    NET_FIND_CONDITION_INFO stuCondition; 
} NET_IN_START_FIND_DOUBLE_RECORD_TASK_INFO;
typedef struct tagNET_OUT_START_FIND_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize; 
    UINT nTotal;  
} NET_OUT_START_FIND_DOUBLE_RECORD_TASK_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindDoubleRecordTask(LLONG lLoginID, const NET_IN_START_FIND_DOUBLE_RECORD_TASK_INFO* pInParam, NET_OUT_START_FIND_DOUBLE_RECORD_TASK_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_DO_FIND_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize;      
    UINT nBeginNumber; 
    UINT nCount;       
} NET_IN_DO_FIND_DOUBLE_RECORD_TASK_INFO;
typedef struct tagNET_FIND_TASK_LIST_INFO
{
    EM_TASK_TYPE emBackupsType;    
    UINT nTaskID;                  
    char szTaskName[32];           
    NET_TIME stuProgressStartTime; 
    NET_TIME stuProgressEndTime;   
    UINT nProgress;                
    UINT nProgressFileNum;         
    NET_TIME stuStartTime;         
    NET_TIME stuEndTime;           
    UINT nFileSize;                
    BYTE byReserved[252];          
} NET_FIND_TASK_LIST_INFO;
typedef struct tagNET_OUT_DO_FIND_DOUBLE_RECORD_TASK_INFO
{
    DWORD dwSize;                                   
    UINT nMaxCount;                                 
    UINT nRetCount;                                 
    NET_FIND_TASK_LIST_INFO* pstuFindLTaskListInfo; 
    UINT nFound;                                    
} NET_OUT_DO_FIND_DOUBLE_RECORD_TASK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindDoubleRecordTask(LLONG lFindID, const NET_IN_DO_FIND_DOUBLE_RECORD_TASK_INFO* pInParam, NET_OUT_DO_FIND_DOUBLE_RECORD_TASK_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindDoubleRecordTask(LLONG lFindID);
typedef struct tagNET_DOUBLE_RECORD_TASK_LIST
{
    char szTaskName[256];          
    NET_TIME stuProgressStartTime; 
    NET_TIME stuProgressEndTime;   
    EM_TASK_TYPE emTaskType;       
    UINT nProgress;                
    NET_TIME stuStartTime;         
    NET_TIME stuEndTime;           
    UINT nFileSize;                
    BYTE byReserved[252];          
} NET_DOUBLE_RECORD_TASK_LIST;
typedef struct tagNET_DOUBLE_RECORD_TASK_INFO
{
    NET_DOUBLE_RECORD_TASK_LIST* pTaskList; 
    int nTaskNum;                           
    BYTE byReserved[1020];                  
} NET_DOUBLE_RECORD_TASK_INFO;
typedef void(CALLBACK* fAttachTaskState)(LLONG lAttachHandle, NET_DOUBLE_RECORD_TASK_INFO* stuBuf, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_TASK_STATE_INFO
{
    DWORD dwSize;
    fAttachTaskState cbAttachTaskStateCB; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_TASK_STATE_INFO;
typedef struct tagNET_OUT_ATTACH_TASK_STATE_INFO
{
    DWORD dwSize;
} NET_OUT_ATTACH_TASK_STATE_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachDoubleRecordTaskState(LLONG lLoginID, const NET_IN_ATTACH_TASK_STATE_INFO* pInParam, NET_OUT_ATTACH_TASK_STATE_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachDoubleRecordTaskState(LLONG lAttachHandle);
typedef enum tagEM_BACKUP_SOURCE_MODE
{
    EM_SOURCE_MODE_SINGLE, 
    EM_SOURCE_MODE_COMBIN, 
} EM_BACKUP_SOURCE_MODE;
typedef enum tagEM_BACKUP_TARGET_MODE
{
    EM_TARGET_MODE_SYNC,  
    EM_TARGET_MODE_TURN,  
    EM_TARGET_MODE_CYCLE, 
} EM_BACKUP_TARGET_MODE;
typedef enum tagEM_BACKUP_FORMAT
{
    EM_BACKUP_FORMAT_ASF, 
    EM_BACKUP_FORMAT_DAV, 
    EM_BACKUP_FORMAT_MP4, 
} EM_BACKUP_FORMAT;
typedef enum tagEM_BACKUP_SOURCE_TYPE
{
    EM_SOURCE_TYPE_REALTIME, 
    EM_SOURCE_TYPE_LOCAL,    
    EM_SOURCE_TYPE_NETWORK,  
} EM_BACKUP_SOURCE_TYPE;
typedef enum tagEM_BACKUP_TARGET_TYPE
{
    EM_BACKUP_TARGET_TYPE_LOCAL,   
    EM_BACKUP_TARGET_TYPE_NETWORK, 
} EM_BACKUP_TARGET_TYPE;
typedef struct tagNET_BACKUP_SOURCE
{
    EM_BACKUP_SOURCE_TYPE emSourceType; 
    char Reserved[4];                   
    char szPath[256];                   
    char szRename[256];                 
    char byReserved[1024];              
} NET_BACKUP_SOURCE;
typedef struct tagNET_BACKUP_TARGET
{
    EM_BACKUP_TARGET_TYPE emTargetType; 
    char Reserved[4];                   
    char szPath[256];                   
    char szRename[256];                 
    char byReserved[1024];              
} NET_BACKUP_TARGET;
typedef struct tagNET_IN_START_BACKUP_TASK_INFO
{
    DWORD dwSize;
    EM_BACKUP_SOURCE_MODE emSourceMode; 
    EM_BACKUP_TARGET_MODE emTargetMode; 
    int nSourceNum;                     
    NET_BACKUP_SOURCE* pstuSource;      
    NET_BACKUP_TARGET* pstuTarget;      
    int nTargetNum;                     
    EM_BACKUP_FORMAT emFormat;          
    unsigned int nGroupID;              
    BOOL bTakePlayer;                   
} NET_IN_START_BACKUP_TASK_INFO;
typedef struct tagNET_OUT_START_BACKUP_TASK_INFO
{
    DWORD dwSize;
} NET_OUT_START_BACKUP_TASK_INFO;
typedef enum tagEM_BACKUP_STATES
{
    EM_CB_STATES_UNKNOWN,  
    EM_CB_STATES_CREATED,  
    EM_CB_STATES_READY,    
    EM_CB_STATES_RUNNING,  
    EM_CB_STATES_FINISHED, 
    EM_CB_STATES_ERROR,    
    EM_CB_STATES_ABORTED,  
    EM_CB_STATES_PAUSE,    
} EM_BACKUP_STATES;
typedef struct tagNET_BACKUP_STATES_INFO
{
    unsigned int nProgress;   
    EM_BACKUP_STATES emState; 
    char szDeviceName[64];    
    char byReserved[256];     
} NET_BACKUP_STATES_INFO;
typedef struct tagNET_CB_BACKUPTASK_STATE
{
    NET_BACKUP_STATES_INFO stuStates[1024]; 
    int nStatesNum;                         
    char bReserved[1020];                   
} NET_CB_BACKUPTASK_STATE;
typedef void(CALLBACK* fAttachBackupTaskStateCB)(LLONG lAttachHandle, NET_CB_BACKUPTASK_STATE* pBuf, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_BACKUP_STATE
{
    DWORD dwSize;                           
    unsigned int nGroupID;                  
    fAttachBackupTaskStateCB cbAttachState; 
    LDWORD dwUser;                          
    char bReserved[4];                      
} NET_IN_ATTACH_BACKUP_STATE;
typedef struct tagNET_OUT_ATTACH_BACKUP_STATE
{
    DWORD dwSize;
} NET_OUT_ATTACH_BACKUP_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartBackupTask(LLONG lLoginID, const NET_IN_START_BACKUP_TASK_INFO* pstInParam, NET_OUT_START_BACKUP_TASK_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachBackupTaskState(LLONG lLoginID, const NET_IN_ATTACH_BACKUP_STATE* pstInParam, NET_OUT_ATTACH_BACKUP_STATE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachBackupTaskState(LLONG lAttachHandle);
typedef struct tagNET_IN_SMOKE_REMOTE_REBOOT_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_SMOKE_REMOTE_REBOOT_INFO;
typedef struct tagNET_OUT_SMOKE_REMOTE_REBOOT_INFO
{
    DWORD dwSize; 
} NET_OUT_SMOKE_REMOTE_REBOOT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SmokeRemoteReboot(LLONG lLoginID, const NET_IN_SMOKE_REMOTE_REBOOT_INFO* pInParam, NET_OUT_SMOKE_REMOTE_REBOOT_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_HY_SMOKE_ERASURE_MODE
{
    EM_HY_SMOKE_ERASURE_MODE_UNKNOWN,   
    EM_HY_SMOKE_ERASURE_MODE_ONCE,      
    EM_HY_SMOKE_ERASURE_MODE_PERMANENT, 
} EM_HY_SMOKE_ERASURE_MODE;
typedef struct tagNET_IN_SMOKE_REMOTE_ERASURE_INFO
{
    DWORD dwSize;                           
    int nChannel;                           
    EM_HY_SMOKE_ERASURE_MODE emErasureMode; 
} NET_IN_SMOKE_REMOTE_ERASURE_INFO;
typedef struct tagNET_OUT_SMOKE_REMOTE_ERASURE_INFO
{
    DWORD dwSize; 
} NET_OUT_SMOKE_REMOTE_ERASURE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SmokeRemoteErasure(LLONG lLoginID, const NET_IN_SMOKE_REMOTE_ERASURE_INFO* pInParam, NET_OUT_SMOKE_REMOTE_ERASURE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_SMOKE_DATA
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_SMOKE_DATA;
typedef struct tagNET_OUT_GET_SMOKE_DATA
{
    DWORD dwSize;                           
    float ftemperatureData;                 
    NET_TEMPERATURE_UNIT emTemperatureUnit; 
    int nHumidityData;                      
    int nCOData;                            
    float nCH4Data;                         
} NET_OUT_GET_SMOKE_DATA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSmokeData(LLONG lLoginID, const NET_IN_GET_SMOKE_DATA* pInParam, NET_OUT_GET_SMOKE_DATA* pOutParam, int nWaitTime);
typedef struct tagNET_IN_ASGMANAGER_GET_CONFIG
{
    DWORD dwSize; 
} NET_IN_ASGMANAGER_GET_CONFIG;
typedef enum tagEM_VOICE_ID
{
    EM_VOICE_ID_UNKNOWN = -1,           
    EM_VOICE_ID_NO,                     
    EM_VOICE_ID_WELCOME,                
    EM_VOICE_ID_WELCOME_HOME,           
    EM_VOICE_ID_GOOD_JOURNEY,           
    EM_VOICE_ID_WELCOME_BACK_NEXT,      
    EM_VOICE_ID_THANKS_FOR_PATRONAGE,   
    EM_VOICE_ID_AUTHORIZ_SUCCESS,       
    EM_VOICE_ID_SAFE_JOURNEY,           
    EM_VOICE_ID_VERIFY_SUCCESS,         
    EM_VOICE_ID_WELCOME_ADMISSION,      
    EM_VOICE_ID_HOPE_HEALTH,            
    EM_VOICE_ID_HOPE_SAFE,              
    EM_VOICE_ID_HOPE_SPEED_RECOVERY,    
    EM_VOICE_ID_WORK_SUCCESS,           
    EM_VOICE_ID_CUSTOMIZED_VOICE1 = 16, 
    EM_VOICE_ID_CUSTOMIZED_VOICE2,      
    EM_VOICE_ID_CUSTOMIZED_VOICE3,      
} EM_VOICE_ID;
typedef struct tagNET_VOICE_LIST
{
    UINT nDirectionIndication; 
    EM_VOICE_ID emVoiceID;     
    char szReserved[512];      
} NET_VOICE_LIST;
typedef enum tagEM_NET_PASS_MODE
{
    EM_NET_PASS_MODE_UNKNOWN = -1,                       
    EM_NET_PASS_MODE_IN_AUTHORIZATION_OUT_AUTHORIZATION, 
    EM_NET_PASS_MODE_IN_AUTHORIZATION_OUT_FREE,          
    EM_NET_PASS_MODE_IN_AUTHORIZATION_OUT_FORBID,        
    EM_NET_PASS_MODE_IN_FREE_OUT_AUTHORIZATION,          
    EM_NET_PASS_MODE_IN_FREE_OUT_FREE,                   
    EM_NET_PASS_MODE_IN_FREE_OUT_FORBID,                 
    EM_NET_PASS_MODE_IN_FORBID_OUT_AUTHORIZATION,        
    EM_NET_PASS_MODE_IN_FORBID_OUT_FREE,                 
    EM_NET_PASS_MODE_IN_FORBID_OUT_FORBID,               
} EM_NET_PASS_MODE;
typedef enum tagEM_NET_DIRECTION_AFTER_POWER_OFF
{
    EM_NET_DIRECTION_AFTER_POWER_OFF_UNKNOWN = -1, 
    EM_NET_DIRECTION_AFTER_POWER_OFF_IN,           
    EM_NET_DIRECTION_AFTER_POWER_OFF_OUT,          
} EM_NET_DIRECTION_AFTER_POWER_OFF;
typedef enum tagEM_NET_ASG_WORK_MODE
{
    EM_NET_ASG_WORK_MODE_UNKNOWN = -1, 
    EM_NET_ASG_WORK_MODE_CLOSE,        
    EM_NET_ASG_WORK_MODE_OPEN,         
} EM_NET_ASG_WORK_MODE;
typedef enum tagEM_NET_STARTUP_MODE
{
    EM_NET_STARTUP_MODE_UNKNOWN = -1, 
    EM_NET_STARTUP_MODE_NORMAL,       
    EM_NET_STARTUP_MODE_ZERO_SETTING, 
    EM_NET_STARTUP_MODE_AGING_TEST,   
} EM_NET_STARTUP_MODE;
typedef enum tagEM_NET_GATE_TYPE
{
    EM_NET_ASG_GATE_TYPE_UNKNOWN = -1,              
    EM_NET_ASG_GATE_TYPE_SWING_GATE_ONE,            
    EM_NET_ASG_GATE_TYPE_SWING_GATE_TWO,            
    EM_NET_ASG_GATE_TYPE_WING_GATE_ONE,             
    EM_NET_ASG_GATE_TYPE_WING_GATE_TWO,             
    EM_NET_ASG_GATE_TYPE_WING_GATE_THREE,           
    EM_NET_ASG_GATE_TYPE_THREE_STICK_GATE_ONE = 10, 
    EM_NET_ASG_GATE_TYPE_THREE_STICK_GATE_TWO,      
    EM_NET_ASG_GATE_TYPE_SWING_GATE_THREE = 20,     
    EM_NET_ASG_GATE_TYPE_SWING_GATE_FOUR,           
    EM_NET_ASG_GATE_TYPE_SWING_GATE_FIVE,           
} EM_NET_GATE_TYPE;
typedef enum tagEM_NET_CHANNEL_WIDTH
{
    EM_NET_CHANNEL_WIDTH_UNKNOWN = -1, 
    EM_NET_CHANNEL_WIDTH_600,          
    EM_NET_CHANNEL_WIDTH_700,          
    EM_NET_CHANNEL_WIDTH_800,          
    EM_NET_CHANNEL_WIDTH_900,          
    EM_NET_CHANNEL_WIDTH_1000,         
    EM_NET_CHANNEL_WIDTH_1100,         
    EM_NET_CHANNEL_WIDTH_1200,         
    EM_NET_CHANNEL_WIDTH_1300,         
    EM_NET_CHANNEL_WIDTH_1400,         
    EM_NET_CHANNEL_WIDTH_1500,         
} EM_NET_CHANNEL_WIDTH;
typedef struct tagNET_MAIN_BOARD_CONFIG
{
    UINT nVoiceListNum;                                        
    NET_VOICE_LIST stuVoiceList[16];                           
    EM_NET_PASS_MODE emPassMode;                               
    UINT nOpenDoorSpeed;                                       
    UINT nPassTimeOut;                                         
    UINT nCloseDelayTime;                                      
    UINT nSecurityLevel;                                       
    BOOL bSecondOpenEnable;                                    
    UINT nSecondOpenTimeSec;                                   
    BOOL bMemoryModeEnable;                                    
    UINT nVolumeLevel;                                         
    EM_NET_DIRECTION_AFTER_POWER_OFF emDirectionAfterPowerOff; 
    EM_NET_ASG_WORK_MODE emWorkMode;                           
    UINT nWorkModeTimeSec;                                     
    EM_NET_STARTUP_MODE emStartUpMode;                         
    int nMasterWingAngleAdjust;                                
    int nSlaveWingAngleAdjust;                                 
    EM_NET_GATE_TYPE emGateType;                               
    EM_NET_CHANNEL_WIDTH emChannelWidth;                       
    UINT nGateMaterial;                                        
    UINT nMemoryModeTimeSec;                                   
    char szReserved[1016];                                     
} NET_MAIN_BOARD_CONFIG;
typedef struct tagNET_OUT_ASGMANAGER_GET_CONFIG
{
    DWORD dwSize;                             
    NET_MAIN_BOARD_CONFIG stuMainBoardConfig; 
} NET_OUT_ASGMANAGER_GET_CONFIG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ASGManagerGetConfig(LLONG lLoginID, const NET_IN_ASGMANAGER_GET_CONFIG* pInParam, NET_OUT_ASGMANAGER_GET_CONFIG* pOutParam, int nWaitTime);
typedef struct tagNET_IN_ASGMANAGER_SET_CONFIG
{
    DWORD dwSize;                             
    NET_MAIN_BOARD_CONFIG stuMainBoardConfig; 
} NET_IN_ASGMANAGER_SET_CONFIG;
typedef struct tagNET_OUT_ASGMANAGER_SET_CONFIG
{
    DWORD dwSize; 
} NET_OUT_ASGMANAGER_SET_CONFIG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ASGManagerSetConfig(LLONG lLoginID, const NET_IN_ASGMANAGER_SET_CONFIG* pInParam, NET_OUT_ASGMANAGER_SET_CONFIG* pOutParam, int nWaitTime);
typedef struct tagNET_IN_ASGMANAGER_CLEAR_STATISTICS
{
    DWORD dwSize;       
    BOOL bCleanPassNum; 
} NET_IN_ASGMANAGER_CLEAR_STATISTICS;
typedef struct tagNET_OUT_ASGMANAGER_CLEAR_STATISTICS
{
    DWORD dwSize; 
} NET_OUT_ASGMANAGER_CLEAR_STATISTICS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ASGManagerClearStatistics(LLONG lLoginID, const NET_IN_ASGMANAGER_CLEAR_STATISTICS* pInParam, NET_OUT_ASGMANAGER_CLEAR_STATISTICS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_ASGMANAGER_GET_CONFIG_CAPS
{
    DWORD dwSize; 
} NET_IN_ASGMANAGER_GET_CONFIG_CAPS;
typedef struct tagNET_OUT_ASGMANAGER_GET_CONFIG_CAPS
{
    DWORD dwSize;                        
    BOOL bSupportVoiceList;              
    BOOL bSupportPassMode;               
    BOOL bSupportOpenDoorSpeed;          
    BOOL bSupportCloseDoorSpeed;         
    BOOL bSupportPassTimeOut;            
    BOOL bSupportCloseDelayTime;         
    BOOL bSupportSecurityLevel;          
    BOOL bSupportSecondOpenEnable;       
    BOOL bSupportSecondOpenTimeSec;      
    BOOL bSupportMemoryModeEnable;       
    BOOL bSupportVolumeLevel;            
    BOOL bSupportDirectionAfterPowerOff; 
    BOOL bSupportWorkMode;               
    BOOL bSupportWorkModeTimeSec;        
    BOOL bSupportStartUpMode;            
    BOOL bSupportMasterWingAngleAdjust;  
    BOOL bSupportSlaveWingAngleAdjust;   
    BOOL bSupportGateType;               
    BOOL bSupportChannelWidth;           
    BOOL bSupportGateMaterial;           
} NET_OUT_ASGMANAGER_GET_CONFIG_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ASGManagerGetConfigCaps(LLONG lLoginID, const NET_IN_ASGMANAGER_GET_CONFIG_CAPS* pInParam, NET_OUT_ASGMANAGER_GET_CONFIG_CAPS* pOutParam, int nWaitTime);
typedef enum tagEM_OLIGUN_OPERATE_TYPE
{
    EM_OLIGUN_OPERATE_TYPE_CARRY, 
    EM_OLIGUN_OPERATE_TYPE_HANG,  
} EM_OLIGUN_OPERATE_TYPE;
typedef enum tagEM_GASSTATION_CARINFO_RETURN_TYPE
{
    EM_GASSTATION_CARINFO_RETURN_TYPE_NON,          
    EM_GASSTATION_CARINFO_RETURN_TYPE_PLATENUM,     
    EM_GASSTATION_CARINFO_RETURN_TYPE_PLATENUM_PIC, 
} EM_GASSTATION_CARINFO_RETURN_TYPE;
typedef struct tagNET_IN_GET_GASSTATION_CAR_BY_OLIGUNINDEX
{
    DWORD dwSize;                                          
    char szReserved[4];                                    
    UINT nRequestTime;                                     
    EM_OLIGUN_OPERATE_TYPE emOpreateType;                  
    UINT nOligunIndex;                                     
    EM_GASSTATION_CARINFO_RETURN_TYPE emCarInfoReturnType; 
} NET_IN_GET_GASSTATION_CAR_BY_OLIGUNINDEX;
typedef enum tagEM_GASSTATION_CAR_RESPOND_CODE
{
    EM_GASSTATION_CAR_RESPOND_UNKNOWN = -1,        
    EM_GASSTATION_CAR_RESPOND_SUCCESS,             
    EM_GASSTATION_CAR_RESPOND_INVALID_PARAM,       
    EM_GASSTATION_CAR_RESPOND_SERVICE_NOT_SUPPORT, 
    EM_GASSTATION_CAR_RESPOND_CONN_SNAPDEV_FAILED, 
    EM_GASSTATION_CAR_RESPOND_DB_ERROR,            
    EM_GASSTATION_CAR_RESPOND_NO_EFFECTIVE_PLATE,  
    EM_GASSTATION_CAR_RESPOND_NET_ERROR,           
    EM_GASSTATION_CAR_RESPOND_ENCRY_DECRY_ERROR,   
    EM_GASSTATION_CAR_RESPOND_SYSTEM_ERROR,        
} EM_GASSTATION_CAR_RESPOND_CODE;
typedef struct tagNET_GASSTATION_CAR_IMAGE
{
    UINT nOffset;         
    UINT nLength;         
    char szReserved[512]; 
} NET_GASSTATION_CAR_IMAGE;
typedef enum tagEM_GASSTATION_CAR_TYPE
{
    EM_GASSTATION_UNKNOWN,           
    EM_GASSTATION_OTHER,             
    EM_GASSTATION_MPV,               
    EM_GASSTATION_SUV,               
    EM_GASSTATION_LARGE_TRUCK,       
    EM_GASSTATION_MOTOR_BUS,         
    EM_GASSTATION_MICROBUS,          
    EM_GASSTATION_PICKUP,            
    EM_GASSTATION_MINI_CARRIAGE,     
    EM_GASSTATION_MICRO_TRUCK,       
    EM_GASSTATION_CARRIAGE,          
    EM_GASSTATION_MID_TRUCK,         
    EM_GASSTATION_MID_PASSENGER_CAR, 
    EM_GASSTATION_TRICYCLE,          
    EM_GASSTATION_MOTORCYCLE,        
} EM_GASSTATION_CAR_TYPE;
typedef struct tagNET_OUT_GET_GASSTATION_CAR_BY_OLIGUNINDEX
{
    DWORD dwSize;                                 
    EM_GASSTATION_CAR_RESPOND_CODE emRespondCode; 
    char szPlateNumber[64];                       
    NET_GASSTATION_CAR_IMAGE stuCarImageInfo;     
    EM_GASSTATION_CAR_TYPE emCarType;             
    UINT nCarImageBufLen;                         
    char* pCarImageBuf;                           
} NET_OUT_GET_GASSTATION_CAR_BY_OLIGUNINDEX;
typedef struct tagNET_IN_GET_GASSTATION_GAMERA_INFO
{
    DWORD dwSize; 
} NET_IN_GET_GASSTATION_GAMERA_INFO;
typedef enum tagEM_GASSTATION_CAMERA_LOCATION
{
    EM_GASSTATION_CAMERA_LOCATION_UNKNWON, 
    EM_GASSTATION_CAMERA_LOCATION_ENTER,   
    EM_GASSTATION_CAMERA_LOCATION_GAS,     
    EM_GASSTATION_CAMERA_LOCATION_EXIT,    
} EM_GASSTATION_CAMERA_LOCATION;
typedef struct tagNET_GASSTATION_CAMERA_INFO
{
    UINT nChannelID;                          
    EM_GASSTATION_CAMERA_LOCATION emLocation; 
    char szReserved[512];                     
} NET_GASSTATION_CAMERA_INFO;
typedef struct tagNET_OUT_GET_GASSTATION_GAMERA_INFO
{
    DWORD dwSize;                                  
    UINT nCameraNum;                               
    NET_GASSTATION_CAMERA_INFO stuCmaeraList[256]; 
} NET_OUT_GET_GASSTATION_GAMERA_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetGasStationCarInfoByOilgunIndex(LLONG lLoginID, const NET_IN_GET_GASSTATION_CAR_BY_OLIGUNINDEX* pInParam, NET_OUT_GET_GASSTATION_CAR_BY_OLIGUNINDEX* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetGasStationCameraInfo(LLONG lLoginID, const NET_IN_GET_GASSTATION_GAMERA_INFO* pInParam, NET_OUT_GET_GASSTATION_GAMERA_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_WORKSUIT_GROUP_POLICY
{
    EM_WORKSUIT_GROUP_POLICY_UNKNWON = -1, 
    EM_WORKSUIT_GROUP_POLICY_WHOLE_BODY,   
    EM_WORKSUIT_GROUP_POLICY_UPPER_BODY,   
} EM_WORKSUIT_GROUP_POLICY;
typedef enum tagEM_WORKSUIT_GROUP_TYPE
{
    EM_WORKSUIT_GROUP_TYPE_UNKNWON, 
    EM_WORKSUIT_GROUP_TYPE_BLOCK,   
} EM_WORKSUIT_GROUP_TYPE;
typedef struct tagNET_WORKSUIT_CHANNEL_INFO
{
    int nChannel;         
    UINT nSimilarity;     
    char szReserved[128]; 
} NET_WORKSUIT_CHANNEL_INFO;
typedef struct tagNET_WORKSUIT_COMPARE_GROUP_INFO
{
    char szGroupID[64];                             
    char szGroupName[128];                          
    char szGroupDetail[256];                        
    EM_WORKSUIT_GROUP_POLICY emWorkSuitPolicy;      
    UINT nSimilarity;                               
    EM_WORKSUIT_GROUP_TYPE emGroupType;             
    int nGroupSize;                                 
    NET_WORKSUIT_CHANNEL_INFO stuChannelInfo[1024]; 
    UINT nChannelInfoNum;                           
    char szReserved[2044];                          
} NET_WORKSUIT_COMPARE_GROUP_INFO;
typedef struct tagNET_IN_CREATE_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize;                                         
    char szReserved[4];                                   
    NET_WORKSUIT_COMPARE_GROUP_INFO stuWorkSuitGroupInfo; 
} NET_IN_CREATE_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_OUT_CREATE_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize;       
    char szReserved[4]; 
    char szGroupID[64]; 
} NET_OUT_CREATE_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_IN_DELETE_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize;       
    char szReserved[4]; 
    char szGroupID[64]; 
} NET_IN_DELETE_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_OUT_DELETE_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize; 
} NET_OUT_DELETE_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_IN_FIND_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize;       
    char szReserved[4]; 
    char szGroupID[64]; 
} NET_IN_FIND_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_OUT_FIND_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize;                                          
    char szReserved[4];                                    
    UINT nMaxGroupNum;                                     
    UINT nRetGroupNum;                                     
    NET_WORKSUIT_COMPARE_GROUP_INFO* pstWorkSuitGroupInfo; 
} NET_OUT_FIND_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_IN_MODIFY_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize;                                         
    char szReserved[4];                                   
    NET_WORKSUIT_COMPARE_GROUP_INFO stuWorkSuitGroupInfo; 
} NET_IN_MODIFY_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_OUT_MODIFY_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize; 
} NET_OUT_MODIFY_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_WORKSUIT_CONTROL_GROUP_INFO
{
    char szGroupID[64];    
    UINT nSimilary;        
    char szReserved[1020]; 
} NET_WORKSUIT_CONTROL_GROUP_INFO;
typedef struct tagNET_IN_SET_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize;                                      
    char szReserved[4];                                
    int nChannel;                                      
    UINT nGroupNum;                                    
    NET_WORKSUIT_CONTROL_GROUP_INFO stuGroupInfo[128]; 
} NET_IN_SET_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_OUT_SET_WORKSUIT_COMPARE_GROUP
{
    DWORD dwSize; 
} NET_OUT_SET_WORKSUIT_COMPARE_GROUP;
typedef struct tagNET_IN_GET_WORKSUIT_GROUP_APPEND_TOKEN
{
    DWORD dwSize; 
} NET_IN_GET_WORKSUIT_GROUP_APPEND_TOKEN;
typedef struct tagNET_OUT_GET_WORKSUIT_GROUP_APPEND_TOKEN
{
    DWORD dwSize; 
    UINT nToken;  
} NET_OUT_GET_WORKSUIT_GROUP_APPEND_TOKEN;
typedef struct tagNET_WORKSUIT_SAMPLE_INFO
{
    char szGroupID[64];            
    char szGroupName[128];         
    char szSourceUID[64];          
    char szSourceFileName[64];     
    SCENE_IMAGE_INFO stuImageInfo; 
    char szFilePath[256];          
    char szReserved[1792];         
} NET_WORKSUIT_SAMPLE_INFO;
typedef struct tagNET_WORKSUIT_APPEND_IDENTI_INFO
{
    UINT nToken;           
    BOOL bAppendEnd;       
    char szReserved[1024]; 
} NET_WORKSUIT_APPEND_IDENTI_INFO;
typedef struct tagNET_IN_MULTI_APPEND_TO_WORKSUIT_GROUP
{
    DWORD dwSize;                                        
    UINT nWorkSuitSampleNum;                             
    NET_WORKSUIT_SAMPLE_INFO* pstWorkSuitSampleInfo;     
    NET_WORKSUIT_APPEND_IDENTI_INFO stuAppendIdentiInfo; 
    char* pszImageBuffer;                                
    UINT nImageBufLen;                                   
    char szReserved[4];                                  
} NET_IN_MULTI_APPEND_TO_WORKSUIT_GROUP;
typedef enum tagEM_WORKSUIT_APPEND_ERRCODE
{
    EM_WORKSUIT_APPEND_ERRCODE_UNKNOWN = -1, 
    EM_WORKSUIT_APPEND_ERRCODE_SUCCESS,      
    EM_WORKSUIT_APPEND_ERRCODE_INVALID_ID,   
    EM_WORKSUIT_APPEND_ERRCODE_DB_ERROR,     
    EM_WORKSUIT_APPEND_ERRCODE_IMAGE_SIZE,   
    EM_WORKSUIT_APPEND_ERRCODE_IMAGE_RESO,   
    EM_WORKSUIT_APPEND_ERRCODE_IMAGE_WRITE,  
} EM_WORKSUIT_APPEND_ERRCODE;
typedef struct NET_OUT_MULTI_APPEND_TO_WORKSUIT_GROUP
{
    DWORD dwSize;                               
    UINT nErrCodeNum;                           
    EM_WORKSUIT_APPEND_ERRCODE emErrCode[1000]; 
} NET_OUT_MULTI_APPEND_TO_WORKSUIT_GROUP;
typedef struct tagNET_IN_DELETE_WORKSUIT_BY_SOURCEUID
{
    DWORD dwSize;             
    UINT nSourceUIDNum;       
    char szSourceUID[64][64]; 
    char szGroupID[64];       
} NET_IN_DELETE_WORKSUIT_BY_SOURCEUID;
typedef enum tagEM_DELETE_BY_SOURCEUID_ERRCODE
{
    EM_DELETE_BY_SOURCEUID_ERRCODE_UNKNWON = -1, 
    EM_DELETE_BY_SOURCEUID_ERRCODE_SUCCESS,      
    EM_DELETE_BY_SOURCEUID_ERRCODE_NOT_EXIST,    
    EM_DELETE_BY_SOURCEUID_ERRCODE_DB_ERROR,     
} EM_DELETE_BY_SOURCEUID_ERRCODE;
typedef struct tagNET_OUT_DELETE_WORKSUIT_BY_SOURCEUID
{
    DWORD dwSize;                                 
    UINT nErrCodeNum;                             
    EM_DELETE_BY_SOURCEUID_ERRCODE emErrCode[64]; 
} NET_OUT_DELETE_WORKSUIT_BY_SOURCEUID;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CreateWorkSuitCompareGroup(LLONG lLoginID, const NET_IN_CREATE_WORKSUIT_COMPARE_GROUP* pInParam, NET_OUT_CREATE_WORKSUIT_COMPARE_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteWorkSuitCompareGroup(LLONG lLoginID, const NET_IN_DELETE_WORKSUIT_COMPARE_GROUP* pInParam, NET_OUT_DELETE_WORKSUIT_COMPARE_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindWorkSuitCompareGroup(LLONG lLoginID, const NET_IN_FIND_WORKSUIT_COMPARE_GROUP* pInParam, NET_OUT_FIND_WORKSUIT_COMPARE_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyWorkSuitCompareGroup(LLONG lLoginID, const NET_IN_MODIFY_WORKSUIT_COMPARE_GROUP* pInParam, NET_OUT_MODIFY_WORKSUIT_COMPARE_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetWorkSuitCompareGroupToChannel(LLONG lLoginID, const NET_IN_SET_WORKSUIT_COMPARE_GROUP* pInParam, NET_OUT_SET_WORKSUIT_COMPARE_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetWorkSuitCompareGroupAppendToken(LLONG lLoginID, const NET_IN_GET_WORKSUIT_GROUP_APPEND_TOKEN* pInParam, NET_OUT_GET_WORKSUIT_GROUP_APPEND_TOKEN* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MultiAppendToWorkSuitCompareGroup(LLONG lLoginID, const NET_IN_MULTI_APPEND_TO_WORKSUIT_GROUP* pInParam, NET_OUT_MULTI_APPEND_TO_WORKSUIT_GROUP* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteWorkSuitBySourceUID(LLONG lLoginID, const NET_IN_DELETE_WORKSUIT_BY_SOURCEUID* pInParam, NET_OUT_DELETE_WORKSUIT_BY_SOURCEUID* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_POPULATION_STATISTICS
{
    DWORD dwSize; 
} NET_IN_GET_POPULATION_STATISTICS;
typedef struct tagNET_OUT_GET_POPULATION_STATISTICS
{
    DWORD dwSize;                      
    UINT nPassPopulation;              
    UINT nMetalAlarmPopulation;        
    UINT nReversePassPopulation;       
    UINT nReverseMetalAlarmPopulation; 
    TP_U64 nTempNormalPopulation;      
    TP_U64 nTempAlarmPopulation;       
} NET_OUT_GET_POPULATION_STATISTICS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPopulationStatistics(LLONG lLoginID, const NET_IN_GET_POPULATION_STATISTICS* pInParam, NET_OUT_GET_POPULATION_STATISTICS* pOutParam, int nWaitTime);
typedef struct tagNET_POPULATION_STATISTICS_INFO
{
    DWORD dwSize;                      
    UINT nPassPopulation;              
    UINT nMetalAlarmPopulation;        
    UINT nReversePassPopulation;       
    UINT nReverseMetalAlarmPopulation; 
    TP_U64 nTempNormalPopulation;      
    TP_U64 nTempAlarmPopulation;       
} NET_POPULATION_STATISTICS_INFO;
typedef int(CALLBACK* fNotifyPopulationStatisticsInfo)(LLONG lPopulationStatisticsHandle, NET_POPULATION_STATISTICS_INFO* pstuPopulationStatisticsInfos, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_GATE_POPULATION_STATISTICS_INFO
{
    DWORD dwSize;                                                     
    fNotifyPopulationStatisticsInfo cbNotifyPopulationStatisticsInfo; 
    LDWORD dwUser;                                                    
} NET_IN_ATTACH_GATE_POPULATION_STATISTICS_INFO;
typedef struct tagNET_OUT_ATTACH_GATE_POPULATION_STATISTICS_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_GATE_POPULATION_STATISTICS_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPopulationStatistics(LLONG lLoginID, NET_IN_ATTACH_GATE_POPULATION_STATISTICS_INFO* pstInParam, NET_OUT_ATTACH_GATE_POPULATION_STATISTICS_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPopulationStatistics(LLONG lPopulationStatisticsHandle);
typedef struct tagNET_IN_START_POPULATION_OVERRUN_ALARM
{
    DWORD dwSize;        
    UINT nMaxPopulation; 
} NET_IN_START_POPULATION_OVERRUN_ALARM;
typedef struct tagNET_OUT_START_POPULATION_OVERRUN_ALARM
{
    DWORD dwSize; 
} NET_OUT_START_POPULATION_OVERRUN_ALARM;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartPopulationOverrunAlarm(LLONG lLoginID, NET_IN_START_POPULATION_OVERRUN_ALARM* pstInParam, NET_OUT_START_POPULATION_OVERRUN_ALARM* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_XRAY_MULTILEVEL_DETECT_INFO
{
    DWORD dwSize; 
} NET_IN_GET_XRAY_MULTILEVEL_DETECT_INFO;
typedef enum tagEM_XRAY_OBJECT_DETECT_CONFIG_LEVEL
{
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_UNKNWON = -1, 
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_HIGH,         
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_MID,          
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_NORMAL,       
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_CUSTOM1,      
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_CUSTOM2,      
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_CUSTOM3,      
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_CUSTOM4,      
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL_CUSTOM5,      
} EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL;
typedef enum tagEM_GROUP_COLOR_TYPE
{
    EM_GROUP_COLOR_TYPE_UNKNOWN = -1,     
    EM_GROUP_COLOR_TYPE_JUJUBE_RED,       
    EM_GROUP_COLOR_TYPE_PURPLE,           
    EM_GROUP_COLOR_TYPE_GRAY,             
    EM_GROUP_COLOR_TYPE_HIGHLIGHT_YELLOW, 
    EM_GROUP_COLOR_TYPE_CYAN,             
    EM_GROUP_COLOR_TYPE_PINK,             
    EM_GROUP_COLOR_TYPE_BLACK,            
    EM_GROUP_COLOR_TYPE_BROWN,            
} EM_GROUP_COLOR_TYPE;
typedef struct tagNET_EVENT_HANDLER_VOICE
{
    char szAudioFileName[256]; 
    char szReserved[256];      
} NET_EVENT_HANDLER_VOICE;
typedef struct tagNET_XRAY_OBJECT_GROUP_EVENT_HANDLER
{
    int nAlarmOutChannels[64];        
    int nAlarmOutChannelsNum;         
    BOOL bAlarmOutEnable;             
    int nAlarmOutLatch;               
    BOOL bMessageEnable;              
    BOOL bVoiceEnable;                
    NET_EVENT_HANDLER_VOICE stuVoice; 
    BOOL bMoveStop;                   
    BOOL bBeepEnable;                 
    char szReserved[256];             
} NET_XRAY_OBJECT_GROUP_EVENT_HANDLER;
typedef struct tagNET_XRAY_OBJECT_GROUP
{
    EM_INSIDE_OBJECT_TYPE emGroupType;                        
    BOOL bGroupEnable;                                        
    EM_GROUP_GRADE_TYPE emGroupGrade;                         
    EM_GROUP_COLOR_TYPE emGroupColor;                         
    NET_XRAY_OBJECT_GROUP_EVENT_HANDLER stuGroupEventHandler; 
    NET_XRAY_OBJECT_INFO stuObjects[64];                      
    int nObjectsNum;                                          
    char szGrouptype[32];                                     
    char szReserved[224];                                     
} NET_XRAY_OBJECT_GROUP;
typedef struct tagNET_MULTI_LEVEL_INFO
{
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL emLevel;                 
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL emDefaultReferenceLevel; 
    char szName[128];                                           
    NET_XRAY_OBJECT_GROUP stuObjectGroups[64];                  
    int nObjectGroupsNum;                                       
    int nSlaveViewObjectGroupsNum;                              
    NET_XRAY_OBJECT_GROUP stuSlaveViewObjectGroups[64];         
    char szReserved[512];                                       
} NET_MULTI_LEVEL_INFO;
typedef struct tagNET_XRAY_MULTILEVEL_DETECT_CFG_INFO
{
    EM_XRAY_OBJECT_DETECT_CONFIG_LEVEL emCurrentLevel; 
    int nMultiLevelConfigMax;                          
    int nMultiLevelConfigCnt;                          
    NET_MULTI_LEVEL_INFO* pstuMultiLevelConfig;        
    char szReserved[1024];                             
} NET_XRAY_MULTILEVEL_DETECT_CFG_INFO;
typedef struct tagNET_OUT_GET_XRAY_MULTILEVEL_DETECT_INFO
{
    DWORD dwSize;                                
    NET_XRAY_MULTILEVEL_DETECT_CFG_INFO stuInfo; 
} NET_OUT_GET_XRAY_MULTILEVEL_DETECT_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetXRayMultiLevelDetectCFG(LLONG lLoginID, NET_IN_GET_XRAY_MULTILEVEL_DETECT_INFO* pInParam, NET_OUT_GET_XRAY_MULTILEVEL_DETECT_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_XRAY_MULTILEVEL_DETECT_INFO
{
    DWORD dwSize;                                
    NET_XRAY_MULTILEVEL_DETECT_CFG_INFO stuInfo; 
} NET_IN_SET_XRAY_MULTILEVEL_DETECT_INFO;
typedef struct tagNET_OUT_SET_XRAY_MULTILEVEL_DETECT_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_XRAY_MULTILEVEL_DETECT_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SetXRayMultiLevelDetectCFG(LLONG lLoginID, NET_IN_SET_XRAY_MULTILEVEL_DETECT_INFO* pInParam, NET_OUT_SET_XRAY_MULTILEVEL_DETECT_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_KEY_MESSAGE_INFO
{
    int nClientType;       
    int nKey;              
    int nAction;           
    char byReserved[4];    
    char szReserved[1024]; 
} NET_KEY_MESSAGE_INFO;
typedef struct tagNET_IN_SEND_XRAY_KEY_MANAGER_KEY_INFO
{
    DWORD dwSize;                       
    NET_KEY_MESSAGE_INFO stuKeyMessage; 
} NET_IN_SEND_XRAY_KEY_MANAGER_KEY_INFO;
typedef struct tagNET_OUT_SEND_XRAY_KEY_MANAGER_KEY_INFO
{
    DWORD dwSize; 
} NET_OUT_SEND_XRAY_KEY_MANAGER_KEY_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendXRayKeyManagerKey(LLONG lLoginID, const NET_IN_SEND_XRAY_KEY_MANAGER_KEY_INFO* pstuInParam, NET_OUT_SEND_XRAY_KEY_MANAGER_KEY_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_XRAY_KEY_MANAGER_KEY_FUNC_STATE_INFO
{
    DWORD dwSize;  
    int nScreenID; 
} NET_IN_GET_XRAY_KEY_MANAGER_KEY_FUNC_STATE_INFO;
typedef struct tagNET_KEY_FUNC_STATE_INFO
{
    int nKey;             
    int nState;           
    int nValue;           
    char byReserved[4];   
    char szReserved[256]; 
} NET_KEY_FUNC_STATE_INFO;
typedef struct tagNET_OUT_GET_XRAY_KEY_MANAGER_KEY_FUNC_STATE_INFO
{
    DWORD dwSize;                           
    int nStatesNum;                         
    NET_KEY_FUNC_STATE_INFO stuStates[128]; 
} NET_OUT_GET_XRAY_KEY_MANAGER_KEY_FUNC_STATE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetXRayKeyManagerAllKeyFuncState(LLONG lLoginID, const NET_IN_GET_XRAY_KEY_MANAGER_KEY_FUNC_STATE_INFO* pstuInParam, NET_OUT_GET_XRAY_KEY_MANAGER_KEY_FUNC_STATE_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_KEY_FUNC_STATE_NOTIFY_INFO
{
    NET_KEY_FUNC_STATE_INFO stuStates[128]; 
    int nStatesNum;                         
    char byReserved[4];                     
    char szResvered[1024];                  
} NET_KEY_FUNC_STATE_NOTIFY_INFO;
typedef void(CALLBACK* fNotifyKeyFuncState)(LLONG lAttachHandle, NET_KEY_FUNC_STATE_NOTIFY_INFO* pstuKeyFuncStateInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_KEY_FUNC_STATE
{
    DWORD dwSize;                 
    int nScreenID;                
    fNotifyKeyFuncState cbNotify; 
    LDWORD dwUser;                
} NET_IN_ATTACH_KEY_FUNC_STATE;
typedef struct tagNET_OUT_ATTACH_KEY_FUNC_STATE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_KEY_FUNC_STATE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachKeyFuncState(LLONG lLoginID, NET_IN_ATTACH_KEY_FUNC_STATE* pstuInParam, NET_OUT_ATTACH_KEY_FUNC_STATE* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachKeyFuncState(LLONG lAttachHandle);
typedef struct tagNET_TRUNK_ACCESS_INFO
{
    int nType;                
    int nCabinIndex;          
    char szAccessorID[64];    
    char szAccessorName[64];  
    char szReviewerID[64];    
    char szReviewerName[64];  
    char szApproverID[64];    
    char szApproverName[64];  
    int nResult;              
    char byResvered[4];       
    char szTime[32];          
    char szAccessorSnap[128]; 
    char szReviewerSnap[128]; 
    char szConfirmSnap[128];  
    char szRFIDNo[128];       
    char szResvered[1024];    
} NET_TRUNK_ACCESS_INFO;
typedef struct tagNET_TRUNK_ACCESS_MANAGER_NOTIFY_INFO
{
    NET_TRUNK_ACCESS_INFO stuTrunkAccessInfo; 
    char szResvered[1024];                    
} NET_TRUNK_ACCESS_MANAGER_NOTIFY_INFO;
typedef void(CALLBACK* fNotifyTrunkAccessManager)(LLONG lAttachHandle, NET_TRUNK_ACCESS_MANAGER_NOTIFY_INFO* pstuTrunkAccessManagerInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_TRUNK_ACCESS_MANAGER
{
    DWORD dwSize;                       
    fNotifyTrunkAccessManager cbNotify; 
    LDWORD dwUser;                      
} NET_IN_ATTACH_TRUNK_ACCESS_MANAGER;
typedef struct tagNET_OUT_ATTACH_TRUNK_ACCESS_MANAGER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_TRUNK_ACCESS_MANAGER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachTrunkAccessManager(LLONG lLoginID, NET_IN_ATTACH_TRUNK_ACCESS_MANAGER* pstuInParam, NET_OUT_ATTACH_TRUNK_ACCESS_MANAGER* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachTrunkAccessManager(LLONG lAttachHandle);
typedef struct tagNET_IN_REPLY_REMOTE_APPROVAL_INFO
{
    DWORD dwSize;            
    int nApprovalNo;         
    BOOL bApprovalResult;    
    char szApproverID[64];   
    char szApproverName[64]; 
} NET_IN_REPLY_REMOTE_APPROVAL_INFO;
typedef struct tagNET_OUT_REPLY_REMOTE_APPROVAL_INFO
{
    DWORD dwSize; 
} NET_OUT_REPLY_REMOTE_APPROVAL_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ReplyRemoteApproval(LLONG lLoginID, const NET_IN_REPLY_REMOTE_APPROVAL_INFO* pstuInParam, NET_OUT_REPLY_REMOTE_APPROVAL_INFO* pstuOutParam, int nWaitTime);
typedef enum tagEM_VAULT_LOCKSTATE
{
    EM_VAULT_LOCKSTATE_UNKNOWN,  
    EM_VAULT_LOCKSTATE_ISCLOSED, 
    EM_VAULT_LOCKSTATE_ISOPENED, 
} EM_VAULT_LOCKSTATE;
typedef enum tagEM_VAULT_DOORSTATE
{
    EM_VAULT_DOORSTATE_UNKNOWN,  
    EM_VAULT_DOORSTATE_ISCLOSED, 
    EM_VAULT_DOORSTATE_ISOPENED, 
} EM_VAULT_DOORSTATE;
typedef struct tagNET_IN_GET_VAULTDOOR_STATE_INFO
{
    DWORD dwSize; 
} NET_IN_GET_VAULTDOOR_STATE_INFO;
typedef struct tagNET_OUT_GET_VAULTDOOR_STATE_INFO
{
    DWORD dwSize;                   
    EM_VAULT_LOCKSTATE emLockState; 
    EM_VAULT_DOORSTATE emDoorState; 
} NET_OUT_GET_VAULTDOOR_STATE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVaultDoorState(LLONG lLoginID, const NET_IN_GET_VAULTDOOR_STATE_INFO* pstuInParam, NET_OUT_GET_VAULTDOOR_STATE_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CABINET_STATE_INFO
{
    DWORD dwSize; 
} NET_IN_GET_CABINET_STATE_INFO;
typedef struct tagNET_OUT_GET_CABINET_STATE_INFO
{
    DWORD dwSize;       
    float fTemperature; 
    float fHumidity;    
} NET_OUT_GET_CABINET_STATE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFinancialCabinetState(LLONG lLoginID, const NET_IN_GET_CABINET_STATE_INFO* pstuInParam, NET_OUT_GET_CABINET_STATE_INFO* pstuOutParam, int nWaitTime);
typedef enum tagEM_SECURITY_INSPECTOR_STATE
{
    EM_SECURITY_INSPECTOR_STATE_UNKNWON = -1,         
    EM_SECURITY_INSPECTOR_STATE_LEAVE_JOB,            
    EM_SECURITY_INSPECTOR_STATE_ON_JOB,               
    EM_SECURITY_INSPECTOR_STATE_PASS_WITHOUT_PACKAGE, 
} EM_SECURITY_INSPECTOR_STATE;
typedef struct tagNET_SECURITY_INSPECTOR_CHECK_RESULT
{
    DWORD dwSize;                        
    char szUser[128];                    
    EM_SECURITY_INSPECTOR_STATE emState; 
    UINT nUTC;                           
    UINT nCheckID;                       
} NET_SECURITY_INSPECTOR_CHECK_RESULT;
typedef int(CALLBACK* fNotifySecurityInspectorCheckResult)(LLONG lCheckResultHandle, NET_SECURITY_INSPECTOR_CHECK_RESULT* pstuSecurityInspectorCheckResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SECURITY_INSPECTOR_CHECK_RESULT
{
    DWORD dwSize;                                                             
    fNotifySecurityInspectorCheckResult cbNotifySecurityInspectorCheckResult; 
    LDWORD dwUser;                                                            
} NET_IN_ATTACH_SECURITY_INSPECTOR_CHECK_RESULT;
typedef struct tagNET_OUT_ATTACH_SECURITY_INSPECTOR_CHECK_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECURITY_INSPECTOR_CHECK_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSecurityInspectorCheckResult(LLONG lLoginID, NET_IN_ATTACH_SECURITY_INSPECTOR_CHECK_RESULT* pstInParam, NET_OUT_ATTACH_SECURITY_INSPECTOR_CHECK_RESULT* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSecurityInspectorCheckResult(LLONG lCheckResultHandle);
typedef struct tagNET_IN_RESET_POPULATION_STATISTICS
{
    DWORD dwSize; 
} NET_IN_RESET_POPULATION_STATISTICS;
typedef struct tagNET_OUT_RESET_POPULATION_STATISTICS
{
    DWORD dwSize; 
} NET_OUT_RESET_POPULATION_STATISTICS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ResetPopulationStatistics(LLONG lLoginID, const NET_IN_RESET_POPULATION_STATISTICS* pInParam, NET_OUT_RESET_POPULATION_STATISTICS* pOutParam, int nWaitTime);
typedef enum tagEM_DOOR_REGION
{
    EM_DOOR_REGION_UNKNOWN = -1, 
    EM_DOOR_REGION_SIX,          
    EM_DOOR_REGION_TWELVE,       
    EM_DOOR_REGION_EIGHTEEN,     
    EM_DOOR_REGION_TEN,          
    EM_DOOR_REGION_THIRTYTHREE,  
    EM_DOOR_REGION_ONE,          
    EM_DOOR_REGION_TWO,          
    EM_DOOR_REGION_THREE,        
    EM_DOOR_REGION_FOUR,         
    EM_DOOR_REGION_EIGHT,        
    EM_DOOR_REGION_NINE,         
    EM_DOOR_REGION_SIXTEEN,      
    EM_DOOR_REGION_TWENTY,       
    EM_DOOR_REGION_TWENTYFOUR,   
    EM_DOOR_REGION_THIRTYSIX,    
    EM_DOOR_REGION_FORTY,        
    EM_DOOR_REGION_FORTYFIVE,    
    EM_DOOR_REGION_FORTYEIGHT,   
    EM_DOOR_REGION_SIXTY,        
} EM_DOOR_REGION;
typedef enum tagEM_SECURITY_GATE_BELL_MODE
{
    EM_SECURITY_GATE_BELL_MODE_UNKNOWN = -1, 
    EM_SECURITY_GATE_BELL_MODE_BY_FREQUENCY, 
    EM_SECURITY_GATE_BELL_MODE_BY_SAVEVAULE, 
} EM_SECURITY_GATE_BELL_MODE;
typedef enum tagEM_SECURITY_GATE_BELL_TYPE
{
    EM_SECURITY_GATE_BELL_TYPE_UNKNOWN,  
    EM_SECURITY_GATE_BELL_TYPE_RINGING1, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING2, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING3, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING4, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING5, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING6, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING7, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING8, 
    EM_SECURITY_GATE_BELL_TYPE_RINGING9, 
} EM_SECURITY_GATE_BELL_TYPE;
typedef enum tagEM_SECURITY_GATE_ALARM_REGION
{
    EM_SECURITY_GATE_ALARM_REGION_UNKNOWN = -1, 
    EM_SECURITY_GATE_ALARM_REGION_INTERVAL,     
    EM_SECURITY_GATE_ALARM_REGION_CONTINUOUS,   
    EM_SECURITY_GATE_ALARM_REGION_SINGLE_ZONE,  
} EM_SECURITY_GATE_ALARM_REGION;
typedef struct tagNET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM
{
    DWORD dwSize;                                
    EM_DOOR_REGION emDoorRegion;                 
    UINT nAlarmTime;                             
    EM_SECURITY_GATE_BELL_MODE emBellMode;       
    EM_SECURITY_GATE_BELL_TYPE emBellType;       
    UINT nSetVolume;                             
    EM_SECURITY_GATE_ALARM_REGION emAlarmRegion; 
    char byReserved[236];                        
} NET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM;
typedef void(CALLBACK* fNotifySecurityGateAcoustoOpticAlarm)(LLONG lSecurityGateAcoustoOpticAlarmHandle, NET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM* pstuSecurityGateAcoustoOpticAlarm, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SECURITY_GATE_ACOUSTO_OPTIC_ALARM
{
    DWORD dwSize;                                                               
    fNotifySecurityGateAcoustoOpticAlarm cbNotifySecurityGateAcoustoOpticAlarm; 
    LDWORD dwUser;                                                              
} NET_IN_ATTACH_SECURITY_GATE_ACOUSTO_OPTIC_ALARM;
typedef struct tagNET_OUT_ATTACH_SECURITY_GATE_ACOUSTO_OPTIC_ALARM
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECURITY_GATE_ACOUSTO_OPTIC_ALARM;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSecurityGateAcoustoOpticAlarm(LLONG lLoginID, NET_IN_ATTACH_SECURITY_GATE_ACOUSTO_OPTIC_ALARM* pstInParam, NET_OUT_ATTACH_SECURITY_GATE_ACOUSTO_OPTIC_ALARM* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSecurityGateAcoustoOpticAlarm(LLONG lSecurityGateAcoustoOpticAlarmHandle);
typedef struct tagNET_IN_GET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO
{
    DWORD dwSize;  
    UINT nTimeOut; 
} NET_IN_GET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO;
typedef struct tagNET_OUT_GET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO
{
    DWORD dwSize;                                
    EM_DOOR_REGION emDoorRegion;                 
    UINT nAlarmTime;                             
    EM_SECURITY_GATE_BELL_MODE emBellMode;       
    EM_SECURITY_GATE_BELL_TYPE emBellType;       
    UINT nSetVolume;                             
    EM_SECURITY_GATE_ALARM_REGION emAlarmRegion; 
} NET_OUT_GET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO;
typedef struct tagNET_IN_SET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO
{
    DWORD dwSize;                                
    EM_DOOR_REGION emDoorRegion;                 
    UINT nAlarmTime;                             
    EM_SECURITY_GATE_BELL_MODE emBellMode;       
    EM_SECURITY_GATE_BELL_TYPE emBellType;       
    UINT nSetVolume;                             
    EM_SECURITY_GATE_ALARM_REGION emAlarmRegion; 
} NET_IN_SET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO;
typedef struct tagNET_OUT_SET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO;
typedef struct tagNET_IN_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_GET_CAPS_INFO
{
    DWORD dwSize;  
    UINT nTimeOut; 
} NET_IN_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_GET_CAPS_INFO;
typedef struct tagNET_OUT_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_GET_CAPS_INFO
{
    DWORD dwSize;              
    UINT nVolumeMin;           
    UINT nVolumeMax;           
    UINT nAlarmTimeMax;        
    BOOL bSupportBellMode;     
    BOOL bSupportAuditionBell; 
} NET_OUT_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_GET_CAPS_INFO;
typedef struct tagNET_IN_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_AUDITION_BELL_INFO
{
    DWORD dwSize;                          
    EM_SECURITY_GATE_BELL_MODE emBellMode; 
    EM_SECURITY_GATE_BELL_TYPE emBellType; 
    UINT nVolume;                          
} NET_IN_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_AUDITION_BELL_INFO;
typedef struct tagNET_OUT_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_AUDITION_BELL_INFO
{
    DWORD dwSize; 
} NET_OUT_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_AUDITION_BELL_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSecurityGateAcoustoOpticAlarmConfig(LLONG lLoginID, NET_IN_GET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO* pstInParam, NET_OUT_GET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetSecurityGateAcoustoOpticAlarmConfig(LLONG lLoginID, NET_IN_SET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO* pstInParam, NET_OUT_SET_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateAcoustoOpticAlarmGetCaps(LLONG lLoginID, NET_IN_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_GET_CAPS_INFO* pstInParam, NET_OUT_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_GET_CAPS_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateAcoustoOpticAlarmAuditionBell(LLONG lLoginID, NET_IN_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_AUDITION_BELL_INFO* pstInParam, NET_OUT_SECURITY_GATE_ACOUSTO_OPTIC_ALARM_AUDITION_BELL_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_RATE_TYPE
{
    EM_RATE_TYPE_UNKNOWN = -1,      
    EM_RATE_TYPE_NOT_CHANGE,        
    EM_RATE_TYPE_FIFTY_TIMES_LOWER, 
} EM_RATE_TYPE;
typedef enum tagEM_EXCLUDE_SMALL_METAL
{
    EM_EXCLUDE_SMALL_METAL_UNKNOWN = -1,      
    EM_EXCLUDE_SMALL_METAL_DISABLE,           
    EM_EXCLUDE_SMALL_METAL_SPECIFIC_LOCATION, 
    EM_EXCLUDE_SMALL_METAL_ALL_LOCATION,      
} EM_EXCLUDE_SMALL_METAL;
typedef enum tagEM_SCENCE_TYPE
{
    EM_SCENCE_TYPE_UNKNOWN = -1,           
    EM_SCENCE_TYPE_CUSTOM,                 
    EM_SCENCE_TYPE_ELECTRONICS_FACTORY,    
    EM_SCENCE_TYPE_HARDWARE_FACTORY,       
    EM_SCENCE_TYPE_COURT_SYSTEM,           
    EM_SCENCE_TYPE_AIRPORT_SECURITY_CHECK, 
    EM_SCENCE_TYPE_STADIUM,                
    EM_SCENCE_TYPE_ENTERTAINMENT_VENUES,   
    EM_SCENCE_TYPE_PS_SYSTEM,
    EM_SCENCE_TYPE_STATION_SECURITY_CHECK,    
    EM_SCENCE_TYPE_EXHIBITION_SECURITY_CHECK, 
    EM_SCENCE_TYPE_SCHOOL_SYSTEM,             
    EM_SCENCE_TYPE_GOVERNMENT_SYSTEM,         
    EM_SCENCE_TYPE_BUILDINGS,                 
    EM_SCENCE_TYPE_HIGH,                      
    EM_SCENCE_TYPE_MEDIUM,                    
    EM_SCENCE_TYPE_LOW,                       
    EM_SCENCE_TYPE_SPECIAL_EVENT,             
    EM_SCENCE_TYPE_ARENA,                     
    EM_SCENCE_TYPE_PS_MODE,                   
    EM_SCENCE_TYPE_INSPECTOR_MODE,            
    EM_SCENCE_TYPE_VISITOR_MODE,              
    EM_SCENCE_TYPE_LARGE_FLOW,                
    EM_SCENCE_TYPE_ANTI_INTERFERENCE,         
    EM_SCENCE_TYPE_NILECJ_L1,                 
    EM_SCENCE_TYPE_NILECJ_L1A,                
    EM_SCENCE_TYPE_NILECJ_L2,                 
    EM_SCENCE_TYPE_NILECJ_L2A,                
    EM_SCENCE_TYPE_NILECJ_L3,                 
    EM_SCENCE_TYPE_NILECJ_L3A,                
    EM_SCENCE_TYPE_NILECJ_L4,                 
    EM_SCENCE_TYPE_NILECJ_L5,                 
    EM_SCENCE_TYPE_NIJ_LO,                    
    EM_SCENCE_TYPE_NIJ_MO,                    
    EM_SCENCE_TYPE_GB_L3,                     
    EM_SCENCE_TYPE_GB_L2,                     
    EM_SCENCE_TYPE_GB_L1,                     
    EM_SCENCE_TYPE_ALL_METAL,                 
    EM_SCENCE_TYPE_ALL_METAL_HIGH,            
    EM_SCENCE_TYPE_ALL_METAL_LOW,             
    EM_SCENCE_TYPE_MAGNETIC_METAL,            
    EM_SCENCE_TYPE_MAGNETIC_METAL_HIGH,       
    EM_SCENCE_TYPE_MAGNETIC_METAL_LOW,        
    EM_SCENCE_TYPE_NOT_MAGNETIC_METAL,        
    EM_SCENCE_TYPE_NOT_MAGNETIC_METAL_HIGH,   
    EM_SCENCE_TYPE_NOT_MAGNETIC_METAL_LOW,    
    EM_SCENCE_TYPE_RESTAURANT,                
    EM_SCENCE_TYPE_HOTEL,                     
    EM_SCENCE_TYPE_HOSPITAL,                  
    EM_SCENCE_TYPE_BAR,                       
    EM_SCENCE_TYPE_CONCERT_HALL,              
    EM_SCENCE_TYPE_LOGISTICS,                 
    EM_SCENCE_TYPE_EXPRESS,                   
    EM_SCENCE_TYPE_AIRPORT1,                  
    EM_SCENCE_TYPE_AIRPORT2,                  
    EM_SCENCE_TYPE_AIRPORT3,                  
    EM_SCENCE_TYPE_AIRPORT4,                  
    EM_SCENCE_TYPE_AIRPORT5,                  
    EM_SCENCE_TYPE_TRAIN_STATION,             
    EM_SCENCE_TYPE_BUS_STATION,               
    EM_SCENCE_TYPE_METRO_STATION,             
    EM_SCENCE_TYPE_MUSEUM,                    
    EM_SCENCE_TYPE_KEY_FACILITIES,            
    EM_SCENCE_TYPE_BORDER,                    
    EM_SCENCE_TYPE_PROCURATORATE,             
    EM_SCENCE_TYPE_PS,
    EM_SCENCE_TYPE_POST_OFFICE,   
    EM_SCENCE_TYPE_WAREHOUSE,     
    EM_SCENCE_TYPE_SENSITIVITY1,  
    EM_SCENCE_TYPE_SENSITIVITY2,  
    EM_SCENCE_TYPE_SENSITIVITY3,  
    EM_SCENCE_TYPE_SENSITIVITY4,  
    EM_SCENCE_TYPE_SENSITIVITY5,  
    EM_SCENCE_TYPE_SENSITIVITY6,  
    EM_SCENCE_TYPE_SENSITIVITY7,  
    EM_SCENCE_TYPE_SENSITIVITY8,  
    EM_SCENCE_TYPE_SENSITIVITY9,  
    EM_SCENCE_TYPE_SENSITIVITY10, 
    EM_SCENCE_TYPE_SENSITIVITY11, 
    EM_SCENCE_TYPE_SENSITIVITY12, 
    EM_SCENCE_TYPE_SENSITIVITY13, 
    EM_SCENCE_TYPE_SENSITIVITY14, 
    EM_SCENCE_TYPE_SENSITIVITY15, 
    EM_SCENCE_TYPE_SENSITIVITY16, 
    EM_SCENCE_TYPE_SENSITIVITY17, 
    EM_SCENCE_TYPE_SENSITIVITY18, 
    EM_SCENCE_TYPE_SENSITIVITY19, 
    EM_SCENCE_TYPE_SENSITIVITY20, 
    EM_SCENCE_TYPE_SENSITIVITY21, 
    EM_SCENCE_TYPE_SENSITIVITY22, 
    EM_SCENCE_TYPE_SENSITIVITY23, 
    EM_SCENCE_TYPE_SENSITIVITY24, 
    EM_SCENCE_TYPE_SENSITIVITY25, 
    EM_SCENCE_TYPE_CUSTOM1,       
    EM_SCENCE_TYPE_CUSTOM2,       
    EM_SCENCE_TYPE_CUSTOM3,       
    EM_SCENCE_TYPE_CUSTOM4,       
    EM_SCENCE_TYPE_CUSTOM5,       
    EM_SCENCE_TYPE_CUSTOM6,       
    EM_SCENCE_TYPE_CUSTOM7,       
    EM_SCENCE_TYPE_CUSTOM8,       
    EM_SCENCE_TYPE_CUSTOM9,       
    EM_SCENCE_TYPE_CUSTOM10,      
} EM_SCENCE_TYPE;
typedef struct tagNET_SECURITY_GATE_SENVITITY_CONFIG_INFO
{
    EM_SCENCE_TYPE emScence; 
    UINT nSecurityLevel; 
    UINT nSensitivity[32]; 
    int nSensitivityNum; 
    EM_RATE_TYPE emRateType;                    
    EM_EXCLUDE_SMALL_METAL emExcludeSmallMetal; 
    char byReserved[256];                       
} NET_SECURITY_GATE_SENVITITY_CONFIG_INFO;
typedef struct tagNET_SECURITY_GATE_SENVITITY_MANAGER
{
    DWORD dwSize;                                      
    NET_SECURITY_GATE_SENVITITY_CONFIG_INFO stuConfig; 
} NET_SECURITY_GATE_SENVITITY_MANAGER;
typedef void(CALLBACK* fNotifySecurityGateSenvitityManager)(LLONG lSecurityGateSenvitityManagerHandle, NET_SECURITY_GATE_SENVITITY_MANAGER* pstuSecurityGateSenvitityManager, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SECURITY_GATE_SENVITITY_MANAGER
{
    DWORD dwSize;                                                             
    fNotifySecurityGateSenvitityManager cbNotifySecurityGateSenvitityManager; 
    LDWORD dwUser;                                                            
} NET_IN_ATTACH_SECURITY_GATE_SENVITITY_MANAGER;
typedef struct tagNET_OUT_ATTACH_SECURITY_GATE_SENVITITY_MANAGER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECURITY_GATE_SENVITITY_MANAGER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSecurityGateSenvitityManager(LLONG lLoginID, NET_IN_ATTACH_SECURITY_GATE_SENVITITY_MANAGER* pstInParam, NET_OUT_ATTACH_SECURITY_GATE_SENVITITY_MANAGER* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSecurityGateSenvitityManager(LLONG lSecurityGateSenvitityManagerHandle);
typedef struct tagNET_IN_GET_SECURITY_GATE_SENVITITY_MANAGER_INFO
{
    DWORD dwSize;  
    UINT nTimeOut; 
} NET_IN_GET_SECURITY_GATE_SENVITITY_MANAGER_INFO;
typedef struct tagNET_OUT_GET_SECURITY_GATE_SENVITITY_MANAGER_INFO
{
    DWORD dwSize;                                      
    NET_SECURITY_GATE_SENVITITY_CONFIG_INFO stuConfig; 
} NET_OUT_GET_SECURITY_GATE_SENVITITY_MANAGER_INFO;
typedef struct tagNET_IN_SET_SECURITY_GATE_SENVITITY_MANAGER_INFO
{
    DWORD dwSize;                                      
    NET_SECURITY_GATE_SENVITITY_CONFIG_INFO stuConfig; 
} NET_IN_SET_SECURITY_GATE_SENVITITY_MANAGER_INFO;
typedef struct tagNET_OUT_SET_SECURITY_GATE_SENVITITY_MANAGER_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_SECURITY_GATE_SENVITITY_MANAGER_INFO;
typedef struct tagNET_IN_SECURITY_GATE_GET_SENSITIVITY_CAPS_INFO
{
    DWORD dwSize; 
} NET_IN_SECURITY_GATE_GET_SENSITIVITY_CAPS_INFO;
typedef struct tagNET_OUT_SECURITY_GATE_GET_SENSITIVITY_CAPS_INFO
{
    DWORD dwSize;                 
    UINT nSensitivityMinValue;    
    UINT nSensitivityMaxValue;    
    BOOL bSupportRateType;        
    BOOL bSupportRecurityLevel;   
    int nSensitivityModeNum;      
    UINT arrSensitivityMode[128]; 
} NET_OUT_SECURITY_GATE_GET_SENSITIVITY_CAPS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSecurityGateSenvitityManagerConfig(LLONG lLoginID, NET_IN_GET_SECURITY_GATE_SENVITITY_MANAGER_INFO* pstInParam, NET_OUT_GET_SECURITY_GATE_SENVITITY_MANAGER_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateSenvitityManagerSetConfig(LLONG lLoginID, NET_IN_SET_SECURITY_GATE_SENVITITY_MANAGER_INFO* pstInParam, NET_OUT_SET_SECURITY_GATE_SENVITITY_MANAGER_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateSenvitityManagerGetSensitivityCaps(LLONG lLoginID, NET_IN_SECURITY_GATE_GET_SENSITIVITY_CAPS_INFO* pstInParam, NET_OUT_SECURITY_GATE_GET_SENSITIVITY_CAPS_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_DETECT_TYPE
{
    EM_DETECT_TYPE_UNKNOWN = -1, 
    EM_DETECT_TYPE_ALL_METALS,   
    EM_DETECT_TYPE_IRON,         
    EM_DETECT_TYPE_NOT_IRON,     
} EM_DETECT_TYPE;
typedef enum tagEM_COUNT_TYPE
{
    EM_COUNT_TYPE_UNKNOWN = -1,      
    EM_COUNT_TYPE_SEPARATE_COUNTING, 
    EM_COUNT_TYPE_COUNTING1,         
    EM_COUNT_TYPE_COUNTING2,         
} EM_COUNT_TYPE;
typedef enum tagEM_INFRARED_MODE
{
    EM_INFRARED_MODE_UNKNOWN = -1, 
    EM_INFRARED_MODE_ALL_CLOSE,    
    EM_INFRARED_MODE_FRONT_CLOSE,  
    EM_INFRARED_MODE_AFTER_CLOSE,  
    EM_INFRARED_MODE_ALL_OPEN,     
} EM_INFRARED_MODE;
typedef enum tagEM_DIGITAL_FILTER_TYPE
{
    EM_DIGITAL_FILTER_TYPE_UNKNOWN = -1,   
    EM_DIGITAL_FILTER_TYPE_NO_FILTERING,   
    EM_DIGITAL_FILTER_TYPE_LOW_FILTERING,  
    EM_DIGITAL_FILTER_TYPE_HIGH_FILTERING, 
    EM_DIGITAL_FILTER_TYPE_BAND_FILTERING, 
} EM_DIGITAL_FILTER_TYPE;
typedef struct tagNET_SECURITY_GATE_SYSTEM_MANAGER
{
    DWORD dwSize;                               
    UINT nFrequency;                            
    EM_DETECT_TYPE emDetectType;                
    EM_COUNT_TYPE emCountType;                  
    UINT nInfraredTriggerEnable;                
    UINT nAutoSetFreqEnable;                    
    EM_INFRARED_MODE emInfraredMode;            
    EM_DIGITAL_FILTER_TYPE emDigitalFilterType; 
} NET_SECURITY_GATE_SYSTEM_MANAGER;
typedef void(CALLBACK* fNotifySecurityGateSystemManager)(LLONG lSecurityGateSystemManagerHandle, NET_SECURITY_GATE_SYSTEM_MANAGER* pstuSecurityGateSystemManager, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SECURITY_GATE_SYSTEM_MANAGER
{
    DWORD dwSize;                                                       
    fNotifySecurityGateSystemManager cbNotifySecurityGateSystemManager; 
    LDWORD dwUser;                                                      
} NET_IN_ATTACH_SECURITY_GATE_SYSTEM_MANAGER;
typedef struct tagNET_OUT_ATTACH_SECURITY_GATE_SYSTEM_MANAGER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECURITY_GATE_SYSTEM_MANAGER;
typedef struct tagNET_IN_GET_SECURITY_GATE_SYSTEM_MANAGER_INFO
{
    DWORD dwSize;  
    UINT nTimeOut; 
} NET_IN_GET_SECURITY_GATE_SYSTEM_MANAGER_INFO;
typedef struct tagNET_OUT_GET_SECURITY_GATE_SYSTEM_MANAGER_INFO
{
    DWORD dwSize;                               
    UINT nFrequency;                            
    EM_DETECT_TYPE emDetectType;                
    EM_COUNT_TYPE emCountType;                  
    UINT nInfraredTriggerEnable;                
    UINT nAutoSetFreqEnable;                    
    EM_INFRARED_MODE emInfraredMode;            
    EM_DIGITAL_FILTER_TYPE emDigitalFilterType; 
} NET_OUT_GET_SECURITY_GATE_SYSTEM_MANAGER_INFO;
typedef struct tagNET_IN_SET_SECURITY_GATE_SYSTEM_MANAGER_INFO
{
    DWORD dwSize;                               
    UINT nFrequency;                            
    EM_DETECT_TYPE emDetectType;                
    EM_COUNT_TYPE emCountType;                  
    UINT nInfraredTriggerEnable;                
    UINT nAutoSetFreqEnable;                    
    EM_INFRARED_MODE emInfraredMode;            
    EM_DIGITAL_FILTER_TYPE emDigitalFilterType; 
} NET_IN_SET_SECURITY_GATE_SYSTEM_MANAGER_INFO;
typedef struct tagNET_OUT_SET_SECURITY_GATE_SYSTEM_MANAGER_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_SECURITY_GATE_SYSTEM_MANAGER_INFO;
typedef struct tagNET_IN_SECURITY_GATE_SYSTEM_MANAGER_GETCAPS_INFO
{
    DWORD dwSize;  
    UINT nTimeOut; 
} NET_IN_SECURITY_GATE_SYSTEM_MANAGER_GETCAPS_INFO;
typedef struct tagNET_OUT_SECURITY_GATE_SYSTEM_MANAGER_GETCAPS_INFO
{
    DWORD dwSize;                   
    UINT nFrequencyMin;             
    UINT nFrequencyMax;             
    BOOL bSupportDetectType;        
    BOOL bSupportInfraredMode;      
    BOOL bSupportAutoSetFreqEnable; 
    BOOL bSupportAutoSearchFreq;    
    BOOL bSupportDigitalFilterType; 
} NET_OUT_SECURITY_GATE_SYSTEM_MANAGER_GETCAPS_INFO;
typedef struct tagNET_IN_SECURITY_GATE_SYSTEM_MANAGER_START_SEARCH_INFO
{
    DWORD dwSize; 
} NET_IN_SECURITY_GATE_SYSTEM_MANAGER_START_SEARCH_INFO;
typedef struct tagNET_OUT_SECURITY_GATE_SYSTEM_MANAGER_START_SEARCH_INFO
{
    DWORD dwSize;    
    UINT nFrequency; 
} NET_OUT_SECURITY_GATE_SYSTEM_MANAGER_START_SEARCH_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSecurityGateSystemManager(LLONG lLoginID, NET_IN_ATTACH_SECURITY_GATE_SYSTEM_MANAGER* pstInParam, NET_OUT_ATTACH_SECURITY_GATE_SYSTEM_MANAGER* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSecurityGateSystemManager(LLONG lSecurityGateSystemManagerHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateSystemManagerGetConfig(LLONG lLoginID, NET_IN_GET_SECURITY_GATE_SYSTEM_MANAGER_INFO* pstInParam, NET_OUT_GET_SECURITY_GATE_SYSTEM_MANAGER_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateSystemManagerSetConfig(LLONG lLoginID, NET_IN_SET_SECURITY_GATE_SYSTEM_MANAGER_INFO* pstInParam, NET_OUT_SET_SECURITY_GATE_SYSTEM_MANAGER_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateSystemManagerGetCaps(LLONG lLoginID, NET_IN_SECURITY_GATE_SYSTEM_MANAGER_GETCAPS_INFO* pstInParam, NET_OUT_SECURITY_GATE_SYSTEM_MANAGER_GETCAPS_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGateSystemManagerStartAutoSearchFreq(LLONG lLoginID, NET_IN_SECURITY_GATE_SYSTEM_MANAGER_START_SEARCH_INFO* pstInParam, NET_OUT_SECURITY_GATE_SYSTEM_MANAGER_START_SEARCH_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_TRAFFIC_LIGHT_COLOR_STATE
{
    EM_TRAFFIC_LIGHT_COLOR_STATE_UNKNOWN = -1, 
    EM_TRAFFIC_LIGHT_COLOR_STATE_RED,          
    EM_TRAFFIC_LIGHT_COLOR_STATE_GREEN,        
    EM_TRAFFIC_LIGHT_COLOR_STATE_YELLOW,       
    EM_TRAFFIC_LIGHT_COLOR_STATE_BLUE,         
} EM_TRAFFIC_LIGHT_COLOR_STATE;
typedef struct tagNET_PERIPHERALL_INFO
{
    EM_TRAFFIC_LIGHT_COLOR_STATE emTrafficLightState; 
    char byReserved[256];                             
} NET_PERIPHERALL_INFO;
typedef struct tagNET_SECURITY_GATE_MANAGER
{
    DWORD dwSize;                           
    NET_PERIPHERALL_INFO stuPeripheralInfo; 
} NET_SECURITY_GATE_MANAGER;
typedef void(CALLBACK* fNotifySecurityGateManager)(LLONG lSecurityGateManagerHandle, NET_SECURITY_GATE_MANAGER* pstuSecurityGateSenvitityManager, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SECURITY_GATE_MANAGER
{
    DWORD dwSize;                                           
    fNotifySecurityGateManager cbNotifySecurityGateManager; 
    LDWORD dwUser;                                          
} NET_IN_ATTACH_SECURITY_GATE_MANAGER;
typedef struct tagNET_OUT_ATTACH_SECURITY_GATE_MANAGER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECURITY_GATE_MANAGER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSecurityGateManager(LLONG lLoginID, NET_IN_ATTACH_SECURITY_GATE_MANAGER* pstInParam, NET_OUT_ATTACH_SECURITY_GATE_MANAGER* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSecurityGateManager(LLONG lSecurityGateManagerHandle);
typedef struct tagNET_IN_GET_SECURITY_GATE_MANAGER_INFO
{
    DWORD dwSize;  
    UINT nTimeOut; 
} NET_IN_GET_SECURITY_GATE_MANAGER_INFO;
typedef struct tagNET_OUT_GET_SECURITY_GATE_MANAGER_INFO
{
    DWORD dwSize;                                     
    EM_TRAFFIC_LIGHT_COLOR_STATE emTrafficLightState; 
} NET_OUT_GET_SECURITY_GATE_MANAGER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSecurityGateManagerInfo(LLONG lLoginID, NET_IN_GET_SECURITY_GATE_MANAGER_INFO* pstInParam, NET_OUT_GET_SECURITY_GATE_MANAGER_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_ATTACH_SECURITY_INSPECTOR_CHECK_ONJOB
{
    DWORD dwSize; 
} NET_IN_ATTACH_SECURITY_INSPECTOR_CHECK_ONJOB;
typedef struct tagNET_OUT_ATTACH_SECURITY_INSPECTOR_CHECK_ONJOB
{
    DWORD dwSize;  
    UINT nCheckID; 
} NET_OUT_ATTACH_SECURITY_INSPECTOR_CHECK_ONJOB;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SecurityInspectorCheckOnJob(LLONG lLoginID, NET_IN_ATTACH_SECURITY_INSPECTOR_CHECK_ONJOB* pInParam, NET_OUT_ATTACH_SECURITY_INSPECTOR_CHECK_ONJOB* pOutParam, int nWaitTime);
typedef struct tagNET_IN_UPLOAD_UPPACKING_CHECK_INFO
{
    DWORD dwSize;                      
    int nImageDataLen;                 
    char* pImageData;                  
    UNPACKING_CHECK_INFO stuCheckInfo; 
} NET_IN_UPLOAD_UPPACKING_CHECK_INFO;
typedef struct tagNET_OUT_UPLOAD_UPPACKING_CHECK_INFO
{
    DWORD dwSize; 
} NET_OUT_UPLOAD_UPPACKING_CHECK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_UploadUnpackingCheckInfo(LLONG lLoginID, const NET_IN_UPLOAD_UPPACKING_CHECK_INFO* pInParam, NET_OUT_UPLOAD_UPPACKING_CHECK_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_ELECTRICAL_LEVEL
{
    EM_ELECTRICAL_LEVEL_UNKNOWN = -1, 
    EM_ELECTRICAL_LEVEL_LOW,          
    EM_ELECTRICAL_LEVEL_HIGH,         
} EM_ELECTRICAL_LEVEL;
typedef struct tagNET_SECURITY_GATE_SENSOR_DATA
{
    DWORD dwSize;                          
    UINT nChannel;                         
    EM_ELECTRICAL_LEVEL emElectricalLevel; 
} NET_SECURITY_GATE_SENSOR_DATA;
typedef void(CALLBACK* fNotifySecurityGateSensorData)(LLONG lSecurityGateSensorDataHandle, NET_SECURITY_GATE_SENSOR_DATA* pstuSecurityGateSensorData, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SECURITY_GATE_SENSOR_DATA
{
    DWORD dwSize;                                                 
    fNotifySecurityGateSensorData cbNotifySecurityGateSensorData; 
    LDWORD dwUser;                                                
} NET_IN_ATTACH_SECURITY_GATE_SENSOR_DATA;
typedef struct tagNET_OUT_ATTACH_SECURITY_GATE_SENSOR_DATA
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECURITY_GATE_SENSOR_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSecurityGateSensorData(LLONG lLoginID, NET_IN_ATTACH_SECURITY_GATE_SENSOR_DATA* pstInParam, NET_OUT_ATTACH_SECURITY_GATE_SENSOR_DATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSecurityGateSensorData(LLONG lSecurityGateSensorDataHandle);
typedef struct tagNET_IN_GET_SECURITY_GATE_SENSOR_DATA
{
    DWORD dwSize;  
    UINT nChannel; 
} NET_IN_GET_SECURITY_GATE_SENSOR_DATA;
typedef struct tagNET_OUT_GET_SECURITY_GATE_SENSOR_DATA
{
    DWORD dwSize;                          
    EM_ELECTRICAL_LEVEL emElectricalLevel; 
} NET_OUT_GET_SECURITY_GATE_SENSOR_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetSecurityGateSensorData(LLONG lLoginID, NET_IN_GET_SECURITY_GATE_SENSOR_DATA* pstInParam, NET_OUT_GET_SECURITY_GATE_SENSOR_DATA* pstOutParam, int nWaitTime);
typedef enum tagEM_SECURITY_GATE_KEY_CODE
{
    EM_SECURITY_GATE_KEY_CODE_UNKNOWN = -1, 
    EM_SECURITY_GATE_KEY_CODE_RIGHT,        
    EM_SECURITY_GATE_KEY_CODE_CONFIRM,      
    EM_SECURITY_GATE_KEY_CODE_POWER,        
    EM_SECURITY_GATE_KEY_CODE_LEFT,         
    EM_SECURITY_GATE_KEY_CODE_RETURN,       
    EM_SECURITY_GATE_KEY_CODE_RESET,        
    EM_SECURITY_GATE_KEY_CODE_UPPER,        
    EM_SECURITY_GATE_KEY_CODE_LOWER,        
    EM_SECURITY_GATE_KEY_CODE_MENU,         
    EM_SECURITY_GATE_KEY_CODE_HOME,         
} EM_SECURITY_GATE_KEY_CODE;
typedef struct tagNET_SECURITY_GATE_KEY_CODE
{
    DWORD dwSize;                        
    EM_SECURITY_GATE_KEY_CODE emKeyCode; 
} NET_SECURITY_GATE_KEY_CODE;
typedef void(CALLBACK* fNotifySecurityGateKeyCode)(LLONG lSecurityGateKeyCodeHandle, NET_SECURITY_GATE_KEY_CODE* pstuSecurityGateKeyCode, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SECURITY_GATE_KEY_CODE
{
    DWORD dwSize;                                           
    fNotifySecurityGateKeyCode cbNotifySecurityGateKeyCode; 
    LDWORD dwUser;                                          
} NET_IN_ATTACH_SECURITY_GATE_KEY_CODE;
typedef struct tagNET_OUT_ATTACH_SECURITY_GATE_KEY_CODE
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SECURITY_GATE_KEY_CODE;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSecurityGateKeyCode(LLONG lLoginID, NET_IN_ATTACH_SECURITY_GATE_KEY_CODE* pstInParam, NET_OUT_ATTACH_SECURITY_GATE_KEY_CODE* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSecurityGateKeyCode(LLONG lSecurityGateKeyCodeHandle);
typedef enum tagEM_SECURITY_GATE_PERIPHERAL_TYPE
{
    EM_SECURITY_GATE_PERIPHERAL_TYPE_UNKNOWN = -1,    
    EM_SECURITY_GATE_PERIPHERAL_TYPE_DISPLAY,         
    EM_SECURITY_GATE_PERIPHERAL_TYPE_KEY_LIGHT_BOARD, 
    EM_SECURITY_GATE_PERIPHERAL_TYPE_DOOR_PANEL_LAMP, 
} EM_SECURITY_GATE_PERIPHERAL_TYPE;
typedef struct tagNET_IN_SECURITY_GATE_SWITCH_PERIPHERAL_POWER
{
    DWORD dwSize;                                      
    EM_SECURITY_GATE_PERIPHERAL_TYPE emPeripheralType; 
    UINT nSwitchPower;                                 
} NET_IN_SECURITY_GATE_SWITCH_PERIPHERAL_POWER;
typedef struct tagNET_OUT_SECURITY_GATE_SWITCH_PERIPHERAL_POWER
{
    DWORD dwSize; 
} NET_OUT_SECURITY_GATE_SWITCH_PERIPHERAL_POWER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_SecurityGateSwitchPeripheralPower(LLONG lLoginID, NET_IN_SECURITY_GATE_SWITCH_PERIPHERAL_POWER* pstInParam, NET_OUT_SECURITY_GATE_SWITCH_PERIPHERAL_POWER* pstOutParam, int nWaitTime);
typedef struct tagNET_SECURITY_GATE_STATISTICS_FIND_CONDITION
{
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    UINT nGranularity;     
    char szResvered[1020]; 
} NET_SECURITY_GATE_STATISTICS_FIND_CONDITION;
typedef struct tagNET_IN_START_FIND_SECURITY_GATE_STATISTICS
{
    DWORD dwSize;                                             
    NET_SECURITY_GATE_STATISTICS_FIND_CONDITION stuCondition; 
} NET_IN_START_FIND_SECURITY_GATE_STATISTICS;
typedef struct tagNET_OUT_START_FIND_SECURITY_GATE_STATISTICS
{
    DWORD dwSize; 
    UINT nToken;  
    UINT nTotal;  
} NET_OUT_START_FIND_SECURITY_GATE_STATISTICS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindSecurityGateStatistics(LLONG lLoginID, NET_IN_START_FIND_SECURITY_GATE_STATISTICS* pstuInParam, NET_OUT_START_FIND_SECURITY_GATE_STATISTICS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_FIND_NEXT_SECURITY_GATE_STATISTICS
{
    DWORD dwSize; 
    int nToken;   
    int nCount;   
} NET_IN_FIND_NEXT_SECURITY_GATE_STATISTICS;
typedef struct tagNET_STATISTICS_LIST_INFO
{
    NET_TIME stuStartTime;                                               
    NET_TIME stuEndTime;                                                 
    UINT nInNormalCount;                                                 
    UINT nInAlarmCount;                                                  
    UINT nOutNormalCount;                                                
    UINT nOutAlarmCount;                                                 
    UINT nTempNormalCount;                                               
    UINT nTempAlarmCount;                                                
    UINT nClassifyResultStatisticsCount;                                 
    NET_CLASSIFY_RESULT_STATISTICS_INFO stuClassifyResultStatistics[32]; 
    char szResvered[1024];                                               
} NET_STATISTICS_LIST_INFO;
typedef struct tagNET_OUT_FIND_NEXT_SECURITY_GATE_STATISTICS
{
    DWORD dwSize;                                    
    UINT nFound;                                     
    NET_STATISTICS_LIST_INFO stuStatisticsList[128]; 
    int nStatisticsListNum;                          
} NET_OUT_FIND_NEXT_SECURITY_GATE_STATISTICS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindNextSecurityGateStatistics(LLONG lLoginID, NET_IN_FIND_NEXT_SECURITY_GATE_STATISTICS* pstuInParam, NET_OUT_FIND_NEXT_SECURITY_GATE_STATISTICS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_STOP_FIND_SECURITY_GATE_STATISTICS
{
    DWORD dwSize; 
    int nToken;   
} NET_IN_STOP_FIND_SECURITY_GATE_STATISTICS;
typedef struct tagNET_OUT_STOP_FIND_SECURITY_GATE_STATISTICS
{
    DWORD dwSize; 
} NET_OUT_STOP_FIND_SECURITY_GATE_STATISTICS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindSecurityGateStatistics(LLONG lLoginID, NET_IN_STOP_FIND_SECURITY_GATE_STATISTICS* pstuInParam, NET_OUT_STOP_FIND_SECURITY_GATE_STATISTICS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_XRAYOBJECT_MANAGER_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_XRAYOBJECT_MANAGER_CAPS;
typedef enum tagEM_XRAYOBJECT_MANAGER_MODEL
{
    EM_XRAYOBJECT_MANAGER_MODEL_UNKNOWN = -1, 
    EM_XRAYOBJECT_MANAGER_MODEL_DH,           
    EM_XRAYOBJECT_MANAGER_MODEL_CUSTOM,       
} EM_XRAYOBJECT_MANAGER_MODEL;
typedef struct tagNET_XRAYOBJECT_MANAGER_OBJECT
{
    char szType[64];                     
    char szName[64];                     
    EM_XRAYOBJECT_MANAGER_MODEL emModel; 
    char szResvered[1020];               
} NET_XRAYOBJECT_MANAGER_OBJECT;
typedef enum tagEM_SUPPORT_XRAY_CUSTOMITEM
{
    EM_SUPPORT_XRAY_CUSTOMITEM_UNKNOWN = -1, 
    EM_SUPPORT_XRAY_CUSTOMITEM_OLD,          
    EM_SUPPORT_XRAY_CUSTOMITEM_NEW,          
} EM_SUPPORT_XRAY_CUSTOMITEM;
typedef struct tagNET_OUT_GET_XRAYOBJECT_MANAGER_CAPS
{
    DWORD dwSize;                                       
    int nObjectsNum;                                    
    NET_XRAYOBJECT_MANAGER_OBJECT stuObjects[128];      
    EM_SUPPORT_XRAY_CUSTOMITEM emSupportXRayCustomItem; 
} NET_OUT_GET_XRAYOBJECT_MANAGER_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetXRayObjectManagerCaps(LLONG lLoginID, NET_IN_GET_XRAYOBJECT_MANAGER_CAPS* pstuInParam, NET_OUT_GET_XRAYOBJECT_MANAGER_CAPS* pstuOutParam, int nWaitTime);
typedef struct tagNET_HYGROTHERMOGRAPH_INFO
{
    float fTemperature;    
    float fHumidity;       
    int nChannel;          
    char szResvered[1020]; 
} NET_HYGROTHERMOGRAPH_INFO;
typedef void(CALLBACK* fNotifyHygrothermograph)(LLONG lHygrothermographHandle, NET_HYGROTHERMOGRAPH_INFO* pstuHygrothermographInfo, LDWORD dwUser);
typedef struct tagNET_ATTACH_HYGROTHERMOGRAPH_FILTER_INFO
{
    int nChannel;         
    char szResvered[252]; 
} NET_ATTACH_HYGROTHERMOGRAPH_FILTER_INFO;
typedef struct tagNET_IN_ATTACH_HYGROTHERMOGRAPH
{
    DWORD dwSize;                                           
    fNotifyHygrothermograph cbNotifyHygrothermograph;       
    LDWORD dwUser;                                          
    int nFilterCount;                                       
    NET_ATTACH_HYGROTHERMOGRAPH_FILTER_INFO stuFilter[256]; 
} NET_IN_ATTACH_HYGROTHERMOGRAPH;
typedef struct tagNET_OUT_ATTACH_HYGROTHERMOGRAPH
{
    DWORD dwSize; 
} NET_OUT_ATTACH_HYGROTHERMOGRAPH;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachHygrothermograph(LLONG lLoginID, NET_IN_ATTACH_HYGROTHERMOGRAPH* pstInParam, NET_OUT_ATTACH_HYGROTHERMOGRAPH* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachHygrothermograph(LLONG lHygrothermographHandle);
typedef struct tagNET_POWER_INFO
{
    int nPowerVoltage;                       
    int nPowerCurrent;                       
    int nPowerValue;                         
    EM_ALARM_INTERFACE_TYPE emInterfaceType; 
    char szResvered[256];                    
} NET_POWER_INFO;
typedef struct tagNET_POWER_SWITCHER_INFO
{
    int nPowerInfoNum;              
    NET_POWER_INFO stuPowerInfo[3]; 
    int nElectricity;               
    int nActivePower;               
    int nPowerFactor;               
    int nChannel;                   
    char szResvered[1008];          
} NET_POWER_SWITCHER_INFO;
typedef void(CALLBACK* fNotifyPowerSwitcher)(LLONG lPowerSwitcherHandle, NET_POWER_SWITCHER_INFO* pstuPowerSwitcherInfo, LDWORD dwUser);
typedef struct tagNET_ATTACH_POWER_SWITCHER_FILTER_INFO
{
    int nChannel;         
    char szResvered[252]; 
} NET_ATTACH_POWER_SWITCHER_FILTER_INFO;
typedef struct tagNET_IN_ATTACH_POWER_SWITCHER
{
    DWORD dwSize;                                         
    fNotifyPowerSwitcher cbNotifyPowerSwitcher;           
    LDWORD dwUser;                                        
    int nFilterCount;                                     
    NET_ATTACH_POWER_SWITCHER_FILTER_INFO stuFilter[256]; 
} NET_IN_ATTACH_POWER_SWITCHER;
typedef struct tagNET_OUT_ATTACH_POWER_SWITCHER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_POWER_SWITCHER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPowerSwitcher(LLONG lLoginID, NET_IN_ATTACH_POWER_SWITCHER* pstInParam, NET_OUT_ATTACH_POWER_SWITCHER* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPowerSwitcher(LLONG lPowerSwitcherHandle);
typedef struct tagNET_DETECT_CHANNEL_INFO
{
    char szName[128];         
    UINT uDetectChannel;      
    UINT uDetectChannelState; 
    char szResvered[256]; 
} NET_DETECT_CHANNEL_INFO;
typedef struct tagNET_ESA_CHANNEL_INFO
{
    UINT uDeviceChannel; 
    UINT uChannelState;  
    char szName[128];    
    int nDetechInfoSize;                       
    NET_DETECT_CHANNEL_INFO stuDetechInfo[32]; 
    char szSN[32];        
    char szResvered[256]; 
} NET_ESA_CHANNEL_INFO;
typedef struct tagNET_NOTIFY_EAS_CHANNEL_INFO
{
    int nInfoSize;                    
    NET_ESA_CHANNEL_INFO stuInfo[64]; 
    char szResvered[256]; 
} NET_NOTIFY_EAS_CHANNEL_INFO;
typedef void(CALLBACK* fNotifyEASManager)(LLONG lEASManagerHandle, NET_NOTIFY_EAS_CHANNEL_INFO* pstuEASNotifyInfo, LDWORD dwUser);
typedef struct tagNET_DEV_CHANNEL_INFO
{
    int nDevChannel;
    char szResvered[252]; 
} NET_DEV_CHANNEL_INFO;
typedef struct tagNET_IN_ATTACH_EASMANAGER
{
    DWORD dwSize;                          
    fNotifyEASManager cbfNotifyEASManager; 
    LDWORD dwUser;                         
    int nInfoSize;                         
    NET_DEV_CHANNEL_INFO stuInfo[64];      
} NET_IN_ATTACH_EASMANAGER;
typedef struct tagNET_OUT_ATTACH_EASMANAGER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_EASMANAGER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachEASManager(LLONG lLoginID, NET_IN_ATTACH_EASMANAGER* pstInParam, NET_OUT_ATTACH_EASMANAGER* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachEASManager(LLONG lEASManagerHandle);
typedef struct tagNET_IN_GET_DEV_CHANNEL_INFO
{
    DWORD dwSize;                     
    int nInfoSize;                    
    NET_DEV_CHANNEL_INFO stuInfo[64]; 
} NET_IN_GET_DEV_CHANNEL_INFO;
typedef struct tagNET_OUT_GET_DEV_CHANNEL_INFO
{
    DWORD dwSize;                     
    int nInfoSize;                    
    NET_ESA_CHANNEL_INFO stuInfo[64]; 
} NET_OUT_GET_DEV_CHANNEL_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEASDevChannelInfo(LLONG lLoginID, NET_IN_GET_DEV_CHANNEL_INFO* pstInParam, NET_OUT_GET_DEV_CHANNEL_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_EAS_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_EAS_CAPS;
typedef struct tagNET_OUT_GET_EAS_CAPS
{
    DWORD dwSize;  
    BOOL bSupport; 
} NET_OUT_GET_EAS_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEASCaps(LLONG lLoginID, NET_IN_GET_EAS_CAPS* pstuInParam, NET_OUT_GET_EAS_CAPS* pstuOutParam, int nWaitTime);
typedef struct tagNET_EAS_SYSTEM_STATUS_REQ_PARAM
{
    int nDeviceChannel;   
    char szResvered[124]; 
} NET_EAS_SYSTEM_STATUS_REQ_PARAM;
typedef struct tagNET_IN_GET_EAS_SYSTEM_STATUS
{
    DWORD dwSize;                                            
    int nEASRequestParamsNum;                                
    NET_EAS_SYSTEM_STATUS_REQ_PARAM stuEASRequestParams[64]; 
} NET_IN_GET_EAS_SYSTEM_STATUS;
typedef struct tagNET_EAS_EAS_SYSTEM_STATUS
{
    UINT nDeviceChannel;  
    UINT nPowerFrequency; 
    char szResvered[124]; 
} NET_EAS_EAS_SYSTEM_STATUS;
typedef struct tagNET_OUT_GET_EAS_SYSTEM_STATUS
{
    DWORD dwSize;                                     
    int nEASSystemStatusNum;                          
    NET_EAS_EAS_SYSTEM_STATUS stuEASSystemStatus[64]; 
} NET_OUT_GET_EAS_SYSTEM_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEASSystemStatus(LLONG lLoginID, NET_IN_GET_EAS_SYSTEM_STATUS* pstuInParam, NET_OUT_GET_EAS_SYSTEM_STATUS* pstuOutParam, int nWaitTime);
typedef struct tagNET_EAS_ENV_MONITOR_DATA_INFO
{
    int nDataNum;         
    UINT nSignal[256];    
    UINT nNoise[256];     
    UINT nSnr[256];       
    UINT nAmp[256];       
    UINT nRms[256];       
    UINT nStd[256];       
    char szResvered[256]; 
} NET_EAS_ENV_MONITOR_DATA_INFO;
typedef struct tagNET_EAS_ENV_CHANNEL_INFO
{
    UINT nDeviceChannel;                             
    UINT nSamplingFrequency;                         
    UINT nUploadFrequency;                           
    int nEASEnvInfoNum;                              
    NET_EAS_ENV_MONITOR_DATA_INFO stuEASEnvInfo[64]; 
    char szResvered[256];                            
} NET_EAS_ENV_CHANNEL_INFO;
typedef struct tagNET_NOTIFY_EAS_ENV_MONITOR_CHANNEL_INFO
{
    int nEASEnvChannelInfoNum;                         
    NET_EAS_ENV_CHANNEL_INFO stuEASEnvChannelInfo[64]; 
    char szResvered[256];                              
} NET_NOTIFY_EAS_ENV_MONITOR_CHANNEL_INFO;
typedef void(CALLBACK* fNotifyEASEnvMonitorData)(LLONG lEASEnvMonitorDataHandle, NET_NOTIFY_EAS_ENV_MONITOR_CHANNEL_INFO* pstuEASEnvMonitorDataNotifyInfo, LDWORD dwUser);
typedef struct tagNET_EAS_ENV_REQ_PARAM
{
    int nDeviceChannel;   
    char szResvered[124]; 
} NET_EAS_ENV_REQ_PARAM;
typedef struct tagNET_IN_ATTACH_EAS_ESV_MONITOR_DATA
{
    DWORD dwSize;                                        
    fNotifyEASEnvMonitorData cbfNotifyEASEnvMonitorData; 
    LDWORD dwUser;                                       
    int ReqParamsNum;                                    
    NET_EAS_ENV_REQ_PARAM stuReqParams[64];              
} NET_IN_ATTACH_EAS_ESV_MONITOR_DATA;
typedef struct tagNET_OUT_ATTACH_EAS_ESV_MONITOR_DATA
{
    DWORD dwSize; 
} NET_OUT_ATTACH_EAS_ESV_MONITOR_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachEASEnvMonitorData(LLONG lLoginID, NET_IN_ATTACH_EAS_ESV_MONITOR_DATA* pstInParam, NET_OUT_ATTACH_EAS_ESV_MONITOR_DATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachEASEnvMonitorData(LLONG lEASEnvMonitorDataHandle);
typedef struct tagNET_EAS_ALARM_DATA_INFO
{
    int nFalseAlarmCountNum;   
    UINT nFalseAlarmCount[64]; 
    char szResvered[256];      
} NET_EAS_ALARM_DATA_INFO;
typedef struct tagNET_EAS_ALARM_CHANNEL_INFO
{
    UINT nDeviceChannel;                        
    char szType[32];                            
    NET_EAS_ALARM_DATA_INFO stuEASDevAlarmInfo; 
    UINT nAlarmCount;                           
    UINT nAlarmSignalStrength;                  
    char szResvered[248];                       
} NET_EAS_ALARM_CHANNEL_INFO;
typedef struct tagNET_NOTIFY_EAS_ALARM_INFO
{
    int nEASDevAlarmChannelInfoNum;                           
    NET_EAS_ALARM_CHANNEL_INFO stuEASDevAlarmChannelInfo[64]; 
    char szResvered[256];                                     
} NET_NOTIFY_EAS_ALARM_INFO;
typedef void(CALLBACK* fNotifyEASDevAlarmInfo)(LLONG lEASDevAlarmInfoHandle, NET_NOTIFY_EAS_ALARM_INFO* pstuEASDevAlarmInfoNotifyInfo, LDWORD dwUser);
typedef struct tagNET_EAS_ALARM_REQ_PARAM
{
    int nDeviceChannel;   
    int nTypeNum;         
    char szType[32][32];  
    char szResvered[124]; 
} NET_EAS_ALARM_REQ_PARAM;
typedef struct tagNET_IN_ATTACH_EAS_ALARM_INFO
{
    DWORD dwSize;                                    
    fNotifyEASDevAlarmInfo cbfNotifyEASDevAlarmInfo; 
    LDWORD dwUser;                                   
    int ReqParamsNum;                                
    NET_EAS_ALARM_REQ_PARAM stuReqParams[64];        
} NET_IN_ATTACH_EAS_ALARM_INFO;
typedef struct tagNET_OUT_ATTACH_EAS_ALARM_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_EAS_ALARM_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachEASDevAlarmInfo(LLONG lLoginID, NET_IN_ATTACH_EAS_ALARM_INFO* pstInParam, NET_OUT_ATTACH_EAS_ALARM_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachEASDevAlarmInfo(LLONG lEASDevAlarmInfoHandle);
typedef struct tagNET_EAS_PHASE_CHANNEL_INFO
{
    UINT nDeviceChannel;  
    UINT nPhaseValue;     
    UINT nSyncMode;       
    UINT nSyncResult;     
    char szResvered[256]; 
} NET_EAS_PHASE_CHANNEL_INFO;
typedef struct tagNET_NOTIFY_EAS_PHASE_INFO
{
    int nEASPhaseChannelInfoNum;                           
    NET_EAS_PHASE_CHANNEL_INFO stuEASPhaseChannelInfo[64]; 
    char szResvered[256];                                  
} NET_NOTIFY_EAS_PHASE_INFO;
typedef void(CALLBACK* fNotifyPhaseConfig)(LLONG lEASPhaseConfigHandle, NET_NOTIFY_EAS_PHASE_INFO* pstuEASPhaseConfigNotifyInfo, LDWORD dwUser);
typedef struct tagNET_EAS_PHASE_REQ_PARAM
{
    int nDeviceChannel;   
    char szResvered[124]; 
} NET_EAS_PHASE_REQ_PARAM;
typedef struct tagNET_IN_ATTACH_EAS_PHASE_CONFIG_INFO
{
    DWORD dwSize;                             
    fNotifyPhaseConfig cbfNotifyPhaseConfig;  
    LDWORD dwUser;                            
    int ReqParamsNum;                         
    NET_EAS_PHASE_REQ_PARAM stuReqParams[64]; 
} NET_IN_ATTACH_EAS_PHASE_CONFIG_INFO;
typedef struct tagNET_OUT_ATTACH_EAS_PHASE_CONFIG_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_EAS_PHASE_CONFIG_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachEASPhaseConfig(LLONG lLoginID, NET_IN_ATTACH_EAS_PHASE_CONFIG_INFO* pstInParam, NET_OUT_ATTACH_EAS_PHASE_CONFIG_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachEASPhaseConfig(LLONG lEASPhaseConfigHandle);
typedef struct tagNET_EAS_GET_ALARM_REQ_PARAM
{
    int nDeviceChannel;   
    int nTypeNum;         
    char szType[32][32];  
    char szResvered[128]; 
} NET_EAS_GET_ALARM_REQ_PARAM;
typedef struct tagNET_IN_GET_EAS_ALARM_INFO
{
    DWORD dwSize;                                                
    int nEASGetAlarmRequestParamsNum;                            
    NET_EAS_GET_ALARM_REQ_PARAM stuEASGetAlarmRequestParams[64]; 
} NET_IN_GET_EAS_ALARM_INFO;
typedef struct tagNET_EAS_ALARM_INFO
{
    UINT nDeviceChannel;                        
    char szType[32];                            
    NET_EAS_ALARM_DATA_INFO stuEASDevAlarmData; 
    char szResvered[128];                       
} NET_EAS_ALARM_INFO;
typedef struct tagNET_OUT_GET_EAS_ALARM_INFO
{
    DWORD dwSize;                              
    int nEASDevAlarmInfoNum;                   
    NET_EAS_ALARM_INFO stuEASDevAlarmInfo[64]; 
    UINT nAlarmCount[64];                      
    UINT nAlarmSignalStrength[64];             
} NET_OUT_GET_EAS_ALARM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEASDevAlarmInfo(LLONG lLoginID, NET_IN_GET_EAS_ALARM_INFO* pstuInParam, NET_OUT_GET_EAS_ALARM_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_EAS_START_EAS_PHASE_SYNC_REQ_PARAM
{
    int nDeviceChannel;   
    UINT nSyncMode;       
    char szResvered[128]; 
} NET_EAS_START_EAS_PHASE_SYNC_REQ_PARAM;
typedef struct tagNET_IN_START_EAS_PHASE_SYNC_INFO
{
    DWORD dwSize;                                                                 
    int nEASstartPhaseSyncRequestParamsNum;                                       
    NET_EAS_START_EAS_PHASE_SYNC_REQ_PARAM stuEASstartPhaseSyncRequestParams[64]; 
} NET_IN_START_EAS_PHASE_SYNC_INFO;
typedef struct tagNET_OUT_START_EAS_PHASE_SYNC_INFO
{
    DWORD dwSize; 
} NET_OUT_START_EAS_PHASE_SYNC_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartEASPhaseSync(LLONG lLoginID, NET_IN_START_EAS_PHASE_SYNC_INFO* pstuInParam, NET_OUT_START_EAS_PHASE_SYNC_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_SET_EAS_PHASE_CONFIG_REQ_PARAM
{
    int nDeviceChannel;   
    UINT nPhaseValue;     
    char szResvered[128]; 
} NET_SET_EAS_PHASE_CONFIG_REQ_PARAM;
typedef struct tagNET_IN_SET_EAS_PHASE_CONFIG_INFO
{
    DWORD dwSize;                                                             
    int nSetEASPhaseConfigRequestParamsNum;                                   
    NET_SET_EAS_PHASE_CONFIG_REQ_PARAM stuSetEASPhaseConfigRequestParams[64]; 
} NET_IN_SET_EAS_PHASE_CONFIG_INFO;
typedef struct tagNET_OUT_SET_EAS_PHASE_CONFIG_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_EAS_PHASE_CONFIG_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetEASPhaseConfig(LLONG lLoginID, NET_IN_SET_EAS_PHASE_CONFIG_INFO* pstuInParam, NET_OUT_SET_EAS_PHASE_CONFIG_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_EAS_GET_PHASE_CONFIG_REQ_PARAM
{
    int nDeviceChannel;   
    char szResvered[128]; 
} NET_EAS_GET_PHASE_CONFIG_REQ_PARAM;
typedef struct tagNET_IN_GET_EAS_PHASE_CONFIG_INFO
{
    DWORD dwSize;                                                             
    int nEASGetPhaseConfigRequestParamsNum;                                   
    NET_EAS_GET_PHASE_CONFIG_REQ_PARAM stuEASGetPhaseConfigRequestParams[64]; 
} NET_IN_GET_EAS_PHASE_CONFIG_INFO;
typedef struct tagNET_EAS_PHASE_CONFIG_INFO
{
    UINT nDeviceChannel;  
    UINT nPhaseValue;     
    UINT nSyncMode;       
    char szResvered[128]; 
} NET_EAS_PHASE_CONFIG_INFO;
typedef struct tagNET_OUT_GET_EAS_PHASE_CONFIG_INFO
{
    DWORD dwSize;                                        
    int nEASPhaseConfigInfoNum;                          
    NET_EAS_PHASE_CONFIG_INFO stuEASPhaseConfigInfo[64]; 
} NET_OUT_GET_EAS_PHASE_CONFIG_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEASPhaseConfig(LLONG lLoginID, NET_IN_GET_EAS_PHASE_CONFIG_INFO* pstuInParam, NET_OUT_GET_EAS_PHASE_CONFIG_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_EAS_GET_DEVICE_CAPS_REQ_PARAM
{
    int nDeviceChannel;   
    char szResvered[128]; 
} NET_EAS_GET_DEVICE_CAPS_REQ_PARAM;
typedef struct tagNET_IN_GET_EAS_DEVICE_CAPS_INFO
{
    DWORD dwSize;                                                           
    int nEASGetDeviceCapsRequestParamsNum;                                  
    NET_EAS_GET_DEVICE_CAPS_REQ_PARAM stuEASGetDeviceCapsRequestParams[64]; 
} NET_IN_GET_EAS_DEVICE_CAPS_INFO;
typedef struct tagNET_EAS_DEVICE_CAPS_INFO
{
    UINT nDeviceChannel;   
    BOOL bSupportLedColor; 
    UINT nToneNum;         
    UINT nVolumeMin;       
    UINT nVolumeMax;       
    char szResvered[116];  
} NET_EAS_DEVICE_CAPS_INFO;
typedef enum tagEM_EAS_DEVICE_ALARM_INFO_CAPS
{
    EM_EAS_DEVICE_ALARM_INFO_UNKNOWN,               
    EM_EAS_DEVICE_ALARM_INFO_ALL,                   
    EM_EAS_DEVICE_ALARM_INFO_FALSE_ALARM,           
    EM_EAS_DEVICE_ALARM_INFO_ALARM_COUNT,           
    EM_EAS_DEVICE_ALARM_INFO_ALARM_SIGNAL_STRENGTH, 
} EM_EAS_DEVICE_ALARM_INFO_CAPS;
typedef struct tagNET_EAS_DEVICE_ALARM_INFO_CAPS
{
    int nAlarmInfoCapsCount;                           
    EM_EAS_DEVICE_ALARM_INFO_CAPS emAlarmInfoCaps[32]; 
    char szResvered[60];                               
} NET_EAS_DEVICE_ALARM_INFO_CAPS;
typedef struct tagNET_OUT_GET_EAS_DEVICE_CAPS_INFO
{
    DWORD dwSize;                                        
    int nEASDeviceCapsInfoNum;                           
    NET_EAS_DEVICE_CAPS_INFO stuEASDeviceCapsInfo[64];   
    NET_EAS_DEVICE_ALARM_INFO_CAPS stuAlarmInfoCaps[64]; 
} NET_OUT_GET_EAS_DEVICE_CAPS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEASDeviceCaps(LLONG lLoginID, NET_IN_GET_EAS_DEVICE_CAPS_INFO* pstuInParam, NET_OUT_GET_EAS_DEVICE_CAPS_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SLEEPING_CONTROL_GETCAPS
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_SLEEPING_CONTROL_GETCAPS;
typedef struct tagNET_SLEEPING_CONTROL_CAPS
{
    BOOL bSupport;                
    int nSleepingControlStrategy; 
    char szResvered[1024];        
} NET_SLEEPING_CONTROL_CAPS;
typedef struct tagNET_OUT_SLEEPING_CONTROL_GETCAPS
{
    DWORD dwSize;                      
    NET_SLEEPING_CONTROL_CAPS stuCaps; 
} NET_OUT_SLEEPING_CONTROL_GETCAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SleepingControlGetCaps(LLONG lLoginID, NET_IN_SLEEPING_CONTROL_GETCAPS* pstInParam, NET_OUT_SLEEPING_CONTROL_GETCAPS* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_WATERDATA_STAT_SERVER_GETCAPS_INFO
{
    DWORD dwSize; 
} NET_IN_WATERDATA_STAT_SERVER_GETCAPS_INFO;
typedef enum tagEM_WATERDATA_STAT_SERVER_SUPPORT
{
    EM_WATERDATA_STAT_SERVER_SUPPORT_UNKNOWN = -1, 
    EM_WATERDATA_STAT_SERVER_SUPPORT_NO,           
    EM_WATERDATA_STAT_SERVER_SUPPORT_YES,          
} EM_WATERDATA_STAT_SERVER_SUPPORT;
typedef enum tagEM_SUPPORT_LOCALDATA_STORE
{
    EM_SUPPORT_LOCALDATA_STORE_UNKNOWN = -1, 
    EM_SUPPORT_LOCALDATA_STORE_NO,           
    EM_SUPPORT_LOCALDATA_STORE_YES,          
} EM_SUPPORT_LOCALDATA_STORE;
typedef struct tagNET_OUT_WATERDATA_STAT_SERVER_GETCAPS_INFO
{
    DWORD dwSize;                                       
    EM_WATERDATA_STAT_SERVER_SUPPORT emSupport;         
    EM_SUPPORT_LOCALDATA_STORE emSupportLocalDataStore; 
} NET_OUT_WATERDATA_STAT_SERVER_GETCAPS_INFO;
typedef struct tagNET_IN_WATERDATA_STAT_SERVER_GETDATA_INFO
{
    DWORD dwSize;                             
    int nTypeNum;                             
    EM_WATER_DETECTION_ALARM_TYPE emType[32]; 
} NET_IN_WATERDATA_STAT_SERVER_GETDATA_INFO;
typedef enum tagEM_WATER_QUALITY
{
    EM_WATER_QUALITY_UNKNOWN, 
    EM_WATER_QUALITY_1,       
    EM_WATER_QUALITY_2,       
    EM_WATER_QUALITY_3,       
    EM_WATER_QUALITY_4,       
    EM_WATER_QUALITY_5,       
} EM_WATER_QUALITY;
typedef struct tagNET_OUT_WATERDATA_STAT_SERVER_GETDATA_INFO
{
    DWORD dwSize;                                  
    EM_WATER_QUALITY emQuality;                    
    NET_WATER_DETECTION_UPLOAD_INFO stuUploadInfo; 
    int nFlunkTypeNum;                             
    EM_WATER_DETECTION_ALARM_TYPE emFlunkType[32]; 
} NET_OUT_WATERDATA_STAT_SERVER_GETDATA_INFO;
typedef struct tagNET_START_FIND_WATERDATA_CONDITION
{
    NET_TIME_EX stuStartTime;                 
    EM_WATER_DETECTION_ALARM_TYPE emType[32]; 
    int nTypeNum;                             
    int nPresetIDNum;                         
    int nPresetID[32];                        
    NET_TIME_EX stuEndTime;                   
    char szReserved[256];                     
} NET_START_FIND_WATERDATA_CONDITION;
typedef struct tagNET_IN_START_FIND_WATERDATA_STAT_SERVER_INFO
{
    DWORD dwSize;                                    
    NET_START_FIND_WATERDATA_CONDITION stuCondition; 
} NET_IN_START_FIND_WATERDATA_STAT_SERVER_INFO;
typedef struct tagNET_OUT_START_FIND_WATERDATA_STAT_SERVER_INFO
{
    DWORD dwSize;     
    UINT nToken;      
    UINT nTotalCount; 
} NET_OUT_START_FIND_WATERDATA_STAT_SERVER_INFO;
typedef struct tagNET_IN_DO_FIND_WATERDATA_STAT_SERVER_INFO
{
    DWORD dwSize;      
    UINT nToken;       
    UINT nBeginNumber; 
    int nCount;        
} NET_IN_DO_FIND_WATERDATA_STAT_SERVER_INFO;
typedef struct tagNET_WATERDATA_STAT_SERVER_INFO
{
    NET_TIME_EX stuStartTime;                      
    EM_WATER_QUALITY emQuality;                    
    NET_WATER_DETECTION_UPLOAD_INFO stuUploadInfo; 
    char szReserved[256];                          
} NET_WATERDATA_STAT_SERVER_INFO;
typedef struct tagNET_OUT_DO_FIND_WATERDATA_STAT_SERVER_INFO
{
    DWORD dwSize;                               
    UINT nFound;                                
    int nInfoNum;                               
    NET_WATERDATA_STAT_SERVER_INFO stuInfo[64]; 
} NET_OUT_DO_FIND_WATERDATA_STAT_SERVER_INFO;
typedef struct tagNET_IN_STOP_FIND_WATERDATA_STAT_SERVER_INFO
{
    DWORD dwSize; 
    UINT nToken;  
} NET_IN_STOP_FIND_WATERDATA_STAT_SERVER_INFO;
typedef struct tagNET_OUT_STOP_FIND_WATERDATA_STAT_SERVER_INFO
{
    DWORD dwSize; 
} NET_OUT_STOP_FIND_WATERDATA_STAT_SERVER_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetWaterDataStatServerCaps(LLONG lLoginID, NET_IN_WATERDATA_STAT_SERVER_GETCAPS_INFO* pstuInParam, NET_OUT_WATERDATA_STAT_SERVER_GETCAPS_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetWaterDataStatServerWaterData(LLONG lLoginID, NET_IN_WATERDATA_STAT_SERVER_GETDATA_INFO* pstuInParam, NET_OUT_WATERDATA_STAT_SERVER_GETDATA_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindWaterDataStatServer(LLONG lLoginID, NET_IN_START_FIND_WATERDATA_STAT_SERVER_INFO* pstuInParam, NET_OUT_START_FIND_WATERDATA_STAT_SERVER_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DoFindWaterDataStatServer(LLONG lLoginID, NET_IN_DO_FIND_WATERDATA_STAT_SERVER_INFO* pstuInParam, NET_OUT_DO_FIND_WATERDATA_STAT_SERVER_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StopFindWaterDataStatServer(LLONG lLoginID, NET_IN_STOP_FIND_WATERDATA_STAT_SERVER_INFO* pstuInParam, NET_OUT_STOP_FIND_WATERDATA_STAT_SERVER_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_VIDEO_MCU_MEMBER_INFO
{
    char szTerminalId[16]; 
    char szName[128];      
    BOOL bAppeared;        
    BOOL bCreator;         
    BOOL bChairman;        
    BOOL bPresented;       
    BOOL bMicOpen;         
    char szReserved[1020]; 
} NET_VIDEO_MCU_MEMBER_INFO;
typedef struct tagNET_VIDEO_MCU_CONFERENCE_INFO
{
    char szId[16];                           
    char szName[128];                        
    char szPassword[128];                    
    char szType[32];                         
    char szState[32];                        
    NET_TIME_EX stuStartTime;                
    NET_TIME_EX stuEndTime;                  
    NET_VIDEO_MCU_MEMBER_INFO stuMember[32]; 
    int nMemberNum;                          
    UINT nTime;                              
    char szCreatorId[16];                    
    char szCreatorName[128];                 
    char szReserved[1024];                   
} NET_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_CREATE_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;                                
    NET_VIDEO_MCU_CONFERENCE_INFO stuConference; 
    char szHandlers[16];                         
} NET_IN_CREATE_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_CREATE_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
} NET_OUT_CREATE_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_APPLY_VIDEO_MCU_CONFERENCEID_INFO
{
    DWORD dwSize; 
} NET_IN_APPLY_VIDEO_MCU_CONFERENCEID_INFO;
typedef struct tagNET_OUT_APPLY_VIDEO_MCU_CONFERENCEID_INFO
{
    DWORD dwSize;  
    char szId[16]; 
} NET_OUT_APPLY_VIDEO_MCU_CONFERENCEID_INFO;
typedef struct tagNET_IN_FINISH_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;            
    char szConferenceId[16]; 
    char szHandlers[16];     
} NET_IN_FINISH_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_FINISH_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
} NET_OUT_FINISH_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_EXIT_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;            
    char szConferenceId[16]; 
    char szTerminalId[16];   
    char szHandlers[16];     
} NET_IN_EXIT_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_EXIT_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
} NET_OUT_EXIT_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_MODIFY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;                                
    NET_VIDEO_MCU_CONFERENCE_INFO stuConference; 
    char szHandlers[16];                         
} NET_IN_MODIFY_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_MODIFY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
} NET_OUT_MODIFY_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_OPENMIC_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;              
    char szConferenceId[16];   
    char szTerminalId[32][16]; 
    int nTerminalIdNum;        
    char szHandlers[16];       
} NET_IN_OPENMIC_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_OPENMIC_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
} NET_OUT_OPENMIC_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_CLOSEMIC_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;              
    char szConferenceId[16];   
    char szTerminalId[32][16]; 
    int nTerminalIdNum;        
    char szHandlers[16];       
} NET_IN_CLOSEMIC_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_CLOSEMIC_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
} NET_OUT_CLOSEMIC_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_GET_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;            
    char szConferenceId[16]; 
    char szTerminalId[16];   
    BOOL bIsParticipating;   
} NET_IN_GET_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_GET_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;                                    
    int nConferenceNum;                              
    NET_VIDEO_MCU_CONFERENCE_INFO stuConference[16]; 
} NET_OUT_GET_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_START_QUERY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;             
    NET_TIME_EX stuStartTime; 
    NET_TIME_EX stuEndTime;   
} NET_IN_START_QUERY_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_START_QUERY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
    int nTotal;   
    int nFindId;  
} NET_OUT_START_QUERY_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_QUERY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
    int nFindId;  
    int nOffset;  
    int nCount;   
} NET_IN_QUERY_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_QUERY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize;                                    
    int nConferenceNum;                              
    NET_VIDEO_MCU_CONFERENCE_INFO stuConference[16]; 
} NET_OUT_QUERY_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_IN_STOP_QUERY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
    int nFindId;  
} NET_IN_STOP_QUERY_VIDEO_MCU_CONFERENCE_INFO;
typedef struct tagNET_OUT_STOP_QUERY_VIDEO_MCU_CONFERENCE_INFO
{
    DWORD dwSize; 
} NET_OUT_STOP_QUERY_VIDEO_MCU_CONFERENCE_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CreateVideoMcuConference(LLONG lLoginID, NET_IN_CREATE_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_CREATE_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ApplyVideoMcuConferenceID(LLONG lLoginID, NET_IN_APPLY_VIDEO_MCU_CONFERENCEID_INFO* pstuInParam, NET_OUT_APPLY_VIDEO_MCU_CONFERENCEID_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_FinishVideoMcuConference(LLONG lLoginID, NET_IN_FINISH_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_FINISH_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ExitVideoMcuConference(LLONG lLoginID, NET_IN_EXIT_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_EXIT_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ModifyVideoMcuConference(LLONG lLoginID, NET_IN_MODIFY_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_MODIFY_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_OpenMicVideoMcuConference(LLONG lLoginID, NET_IN_OPENMIC_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_OPENMIC_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CloseMicVideoMcuConference(LLONG lLoginID, NET_IN_CLOSEMIC_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_CLOSEMIC_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetVideoMcuConference(LLONG lLoginID, NET_IN_GET_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_GET_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartQueryVideoMcuConference(LLONG lLoginID, NET_IN_START_QUERY_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_START_QUERY_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_QueryVideoMcuConference(LLONG lLoginID, NET_IN_QUERY_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_QUERY_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StopQueryVideoMcuConference(LLONG lLoginID, NET_IN_STOP_QUERY_VIDEO_MCU_CONFERENCE_INFO* pstuInParam, NET_OUT_STOP_QUERY_VIDEO_MCU_CONFERENCE_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_TERMINAL_INFO
{
    char szId[16];        
    char szName[128];     
    char szPassword[128]; 
    BOOL bOnline;         
    char szReserved[256]; 
} NET_TERMINAL_INFO;
typedef struct tagNET_IN_ADD_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize;                      
    NET_TERMINAL_INFO stuTerminalInfo; 
} NET_IN_ADD_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_OUT_ADD_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize; 
} NET_OUT_ADD_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_IN_APPLY_VIDEO_MCU_TERMINALID_INFO
{
    DWORD dwSize; 
} NET_IN_APPLY_VIDEO_MCU_TERMINALID_INFO;
typedef struct tagNET_OUT_APPLY_VIDEO_MCU_TERMINALID_INFO
{
    DWORD dwSize;  
    char szId[16]; 
} NET_OUT_APPLY_VIDEO_MCU_TERMINALID_INFO;
typedef struct tagNET_IN_MODIFY_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize;                      
    NET_TERMINAL_INFO stuTerminalInfo; 
} NET_IN_MODIFY_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_OUT_MODIFY_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize; 
} NET_OUT_MODIFY_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_IN_DELETE_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize;  
    char szId[16]; 
} NET_IN_DELETE_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_OUT_DELETE_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize; 
} NET_OUT_DELETE_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_IN_GETALL_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize; 
} NET_IN_GETALL_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_OUT_GETALL_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize;                          
    int nTerminalInfoNum;                  
    NET_TERMINAL_INFO stuTerminalInfo[32]; 
} NET_OUT_GETALL_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_IN_GET_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize;          
    char szTerminalId[16]; 
} NET_IN_GET_VIDEO_MCU_TERMINAL_INFO;
typedef struct tagNET_OUT_GET_VIDEO_MCU_TERMINAL_INFO
{
    DWORD dwSize;                      
    NET_TERMINAL_INFO stuTerminalInfo; 
} NET_OUT_GET_VIDEO_MCU_TERMINAL_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AddVideoMcuTerminal(LLONG lLoginID, NET_IN_ADD_VIDEO_MCU_TERMINAL_INFO* pstuInParam, NET_OUT_ADD_VIDEO_MCU_TERMINAL_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ApplyVideoMcuTerminalID(LLONG lLoginID, NET_IN_APPLY_VIDEO_MCU_TERMINALID_INFO* pstuInParam, NET_OUT_APPLY_VIDEO_MCU_TERMINALID_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_ModifyVideoMcuTerminal(LLONG lLoginID, NET_IN_MODIFY_VIDEO_MCU_TERMINAL_INFO* pstuInParam, NET_OUT_MODIFY_VIDEO_MCU_TERMINAL_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DeleteVideoMcuTerminal(LLONG lLoginID, NET_IN_DELETE_VIDEO_MCU_TERMINAL_INFO* pstuInParam, NET_OUT_DELETE_VIDEO_MCU_TERMINAL_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetAllVideoMcuTerminal(LLONG lLoginID, NET_IN_GETALL_VIDEO_MCU_TERMINAL_INFO* pstuInParam, NET_OUT_GETALL_VIDEO_MCU_TERMINAL_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_GetVideoMcuTerminal(LLONG lLoginID, NET_IN_GET_VIDEO_MCU_TERMINAL_INFO* pstuInParam, NET_OUT_GET_VIDEO_MCU_TERMINAL_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_CLUSTER_INFO
{
    NET_TIME stuStartTime; 
    NET_TIME stuEndTime;   
    TP_U64 nTotalNum;      
} NET_CLUSTER_INFO;
typedef struct tagNET_CLUSTER_RESULT_DETAIL
{
    char szAreaName[64];                  
    int nAreaID;                          
    NET_CLUSTER_INFO stuClusterInfo[300]; 
    int nClusterInfoNum;                  
} NET_CLUSTER_RESULT_DETAIL;
typedef struct tagNET_CLUSTER_RESULT_INFO
{
    char szRuleType[64];                                  
    NET_CLUSTER_RESULT_DETAIL stuClusterResultDetail[50]; 
    int nClusterResultDetailNum;                          
    TP_U64 nCustomerBatchTotal;                           
    int nBatchNo;                                         
    int nTotal;                                           
    int nIndex;                                           
    char szReserved[256];                                 
} NET_CLUSTER_RESULT_INFO;
typedef struct tagNET_CLUSTER_RESULT
{
    NET_CLUSTER_RESULT_INFO stuClusterResultInfo; 
    char szReserved[256];                         
} NET_CLUSTER_RESULT;
typedef void(CALLBACK* fNotifyClusterResult)(LLONG lClusterResultHandle, NET_CLUSTER_RESULT* pstuClusterResult, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CLUSTER_RESULT
{
    DWORD dwSize;                               
    fNotifyClusterResult cbNotifyClusterResult; 
    LDWORD dwUser;                              
} NET_IN_ATTACH_CLUSTER_RESULT;
typedef struct tagNET_OUT_ATTACH_CLUSTER_RESULT
{
    DWORD dwSize; 
} NET_OUT_ATTACH_CLUSTER_RESULT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachClusterResult(LLONG lLoginID, NET_IN_ATTACH_CLUSTER_RESULT* pstInParam, NET_OUT_ATTACH_CLUSTER_RESULT* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachClusterResult(LLONG lClusterResultHandle);
typedef struct tagNET_CLUSTER_AREA_INFO
{
    int nAreaID;          
    int nChannelNum;      
    int nChannels[128];   
    char szAreaName[64];  
    char szReserved[256]; 
} NET_CLUSTER_AREA_INFO;
typedef struct tagNET_CLUSTER_BATCH_RULE
{
    int nAppearTimes;     
    int nAppearInterval;  
    char szReserved[256]; 
} NET_CLUSTER_BATCH_RULE;
typedef struct tagNET_CLUSTER_BUSINESS_HOUR
{
    int nBusinessStart;       
    int nBusinessEnd;         
    int nBusinessStartMinute; 
    int nBusinessEndMinute;   
    char szReserved[248];     
} NET_CLUSTER_BUSINESS_HOUR;
typedef enum tagEM_CLUSTER_GRANULARITY_TYPE
{
    EM_CLUSTER_GRANULARITY_TYPE_UNKNOWN, 
    EM_CLUSTER_GRANULARITY_TYPE_MINUTE,  
    EM_CLUSTER_GRANULARITY_TYPE_HOUR,    
} EM_CLUSTER_GRANULARITY_TYPE;
typedef struct tagNET_GRANULARITY_INFO
{
    EM_CLUSTER_GRANULARITY_TYPE emGranularity; 
    int nCycle;                                
    char szReserved[256];                      
} NET_GRANULARITY_INFO;
typedef struct tagNET_IN_SET_CLUSTER_RULE
{
    DWORD dwSize;                              
    char szRuleType[32];                       
    NET_CLUSTER_AREA_INFO* pstuAreaInfo;       
    int nNumAreaInfoNum;                       
    NET_CLUSTER_BATCH_RULE stuBatchRule;       
    NET_CLUSTER_BUSINESS_HOUR stuBusinessHour; 
    NET_GRANULARITY_INFO stuGranularityInfo;   
} NET_IN_SET_CLUSTER_RULE;
typedef struct tagNET_OUT_SET_CLUSTER_RULE
{
    DWORD dwSize; 
    int nState;   
} NET_OUT_SET_CLUSTER_RULE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetClusterRule(LLONG lLoginID, NET_IN_SET_CLUSTER_RULE* pstInParam, NET_OUT_SET_CLUSTER_RULE* pstOutParam, int nWaitTime);
typedef struct tagNET_CLUSTER_CONDITION
{
    NET_TIME stuDate;     
    char szRuleType[32];  
    int nAreaIDNum;       
    int nAreaID[50];      
    char szReserved[256]; 
} NET_CLUSTER_CONDITION;
typedef struct tagNET_IN_START_FIND_CLUSTER
{
    DWORD dwSize;                       
    NET_CLUSTER_CONDITION stuCondition; 
} NET_IN_START_FIND_CLUSTER;
typedef struct tagNET_OUT_START_FIND_CLUSTER
{
    DWORD dwSize;    
    int nToken;      
    int nTotalCount; 
} NET_OUT_START_FIND_CLUSTER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindNumberStatCluster(LLONG lLoginID, NET_IN_START_FIND_CLUSTER* pstInParam, NET_OUT_START_FIND_CLUSTER* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_DO_FIND_CLUSTER
{
    DWORD dwSize;     
    int nToken;       
    int nBeginNumber; 
    int nCount;       
} NET_IN_DO_FIND_CLUSTER;
typedef struct tagNET_OUT_DO_FIND_CLUSTER
{
    DWORD dwSize;                                       
    char szRuleType[64];                                
    int nFound;                                         
    TP_U64 nBatchTotal;                                 
    NET_CLUSTER_RESULT_DETAIL* pstuClusterResultDetail; 
    int nClusterResultDetailNum;                        
    int nRetClusterResultDetailNum;                     
} NET_OUT_DO_FIND_CLUSTER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindNumberStatCluster(LLONG lLoginID, NET_IN_DO_FIND_CLUSTER* pstInParam, NET_OUT_DO_FIND_CLUSTER* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_STOP_FIND_CLUSTER
{
    DWORD dwSize; 
    int nToken;   
} NET_IN_STOP_FIND_CLUSTER;
typedef struct tagNET_OUT_STOP_FIND_CLUSTER
{
    DWORD dwSize; 
} NET_OUT_STOP_FIND_CLUSTER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindNumberStatCluster(LLONG lLoginID, NET_IN_STOP_FIND_CLUSTER* pstInParam, NET_OUT_STOP_FIND_CLUSTER* pstOutParam, int nWaitTime);
typedef struct tagNET_CLUSTER_DETAIL_CONDITION
{
    int nClusterDate;      
    BOOL bIsNeedProfileID; 
    int nProfileID;        
    char szReserved[256];  
} NET_CLUSTER_DETAIL_CONDITION;
typedef struct tagNET_IN_START_FIND_DETAIL_CLUSTER
{
    DWORD dwSize;                              
    NET_CLUSTER_DETAIL_CONDITION stuCondition; 
} NET_IN_START_FIND_DETAIL_CLUSTER;
typedef struct tagNET_OUT_START_FIND_DETAIL_CLUSTER
{
    DWORD dwSize;                    
    int nToken;                      
    UINT nCount;                     
    NET_TIME_EX stuClusterBeginTime; 
    NET_TIME_EX stuClusterEndTime;   
} NET_OUT_START_FIND_DETAIL_CLUSTER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindDetailNumberStatCluster(LLONG lLoginID, NET_IN_START_FIND_DETAIL_CLUSTER* pstInParam, NET_OUT_START_FIND_DETAIL_CLUSTER* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_DO_FIND_DETAIL_CLUSTER
{
    DWORD dwSize;     
    int nToken;       
    UINT nStartIndex; 
    UINT nCount;      
} NET_IN_DO_FIND_DETAIL_CLUSTER;
typedef struct tagNET_CLUSTER_DETAIL_FIND_INFO
{
    INT64 nRcNo;              
    char szTrackID[40];       
    INT64 nProfileID;         
    INT64 nChannel;           
    int nAge;                 
    int nGender;              
    int nStaffType;           
    NET_TIME_EX stuEventTime; 
    int nHumanState;          
    char szEmotion[20];       
    char szReserved[44];      
} NET_CLUSTER_DETAIL_FIND_INFO;
typedef struct tagNET_OUT_DO_FIND_DETAIL_CLUSTER
{
    DWORD dwSize;                                          
    UINT nFound;                                           
    int nFindInfoRealNum;                                  
    NET_CLUSTER_DETAIL_FIND_INFO stuClusterFindInfo[1024]; 
} NET_OUT_DO_FIND_DETAIL_CLUSTER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindDetailNumberStatCluster(LLONG lLoginID, NET_IN_DO_FIND_DETAIL_CLUSTER* pstInParam, NET_OUT_DO_FIND_DETAIL_CLUSTER* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_STOP_FIND_DETAIL_CLUSTER_INFO
{
    DWORD dwSize; 
    int nToken;   
} NET_IN_STOP_FIND_DETAIL_CLUSTER_INFO;
typedef struct tagNET_OUT_STOP_FIND_DETAIL_CLUSTER_INFO
{
    DWORD dwSize; 
} NET_OUT_STOP_FIND_DETAIL_CLUSTER_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindDetailNumberStatCluster(LLONG lLoginID, NET_IN_STOP_FIND_DETAIL_CLUSTER_INFO* pstInParam, NET_OUT_STOP_FIND_DETAIL_CLUSTER_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_SMD_ORDER_TYPE
{
    EM_SMD_ORDER_TYPE_UNKNOWN,  
    EM_SMD_ORDER_TYPE_ASCORDER, 
    EM_SMD_ORDER_TYPE_DESORDER, 
} EM_SMD_ORDER_TYPE;
typedef struct tagNET_SMD_DATA_CONDITION
{
    int nChannel;                          
    int nChannelNum;                       
    int nChannels[128];                    
    EM_SMD_RECORD_TYPE emSmdRecordType[8]; 
    int nSmdRecordTypeNum;                 
    EM_SMD_ORDER_TYPE emOrder;             
    NET_TIME stuStartTime;                 
    NET_TIME stuEndTime;                   
    char szReserved[256];                  
} NET_SMD_DATA_CONDITION;
typedef struct tagNET_IN_START_FIND_SMD_DATA
{
    DWORD dwSize;                        
    NET_SMD_DATA_CONDITION stuCondition; 
} NET_IN_START_FIND_SMD_DATA;
typedef struct tagNET_OUT_START_FIND_SMD_DATA
{
    DWORD dwSize; 
    int nToken;   
    int nCount;   
} NET_OUT_START_FIND_SMD_DATA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindSMDData(LLONG lLoginID, const NET_IN_START_FIND_SMD_DATA* pstuInParam, NET_OUT_START_FIND_SMD_DATA* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_DO_FIND_SMD_DATA
{
    DWORD dwSize; 
    int nToken;   
    int nOffset;  
    int nCount;   
} NET_IN_DO_FIND_SMD_DATA;
typedef struct tagNET_SMD_DATA_INFO
{
    int nChannel;                       
    EM_SMD_RECORD_TYPE emSmdRecordType; 
    NET_TIME stuStartTime;              
    NET_TIME stuEndTime;                
    char szReserved[64];                
} NET_SMD_DATA_INFO;
typedef struct tagNET_OUT_DO_FIND_SMD_DATA
{
    DWORD dwSize;                           
    int nFindInfoNum;                       
    NET_SMD_DATA_INFO stuSMDDataInfo[1024]; 
} NET_OUT_DO_FIND_SMD_DATA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindSMDData(LLONG lLoginID, const NET_IN_DO_FIND_SMD_DATA* pstuInParam, NET_OUT_DO_FIND_SMD_DATA* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_STOP_FIND_SMD_DATA
{
    DWORD dwSize; 
    int nToken;   
} NET_IN_STOP_FIND_SMD_DATA;
typedef struct tagNET_OUT_STOP_FIND_SMD_DATA
{
    DWORD dwSize; 
} NET_OUT_STOP_FIND_SMD_DATA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindSMDData(LLONG lLoginID, const NET_IN_STOP_FIND_SMD_DATA* pstuInParam, NET_OUT_STOP_FIND_SMD_DATA* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CLUSTER_STATE_INFO
{
    DWORD dwSize;     
    int nClusterDate; 
} NET_IN_GET_CLUSTER_STATE_INFO;
typedef struct tagNET_OUT_GET_CLUSTER_STATE_INFO
{
    DWORD dwSize;            
    int nClusterState;       
    NET_TIME_EX stuDealTime; 
    int nClusterData;        
    int nClusterType;        
} NET_OUT_GET_CLUSTER_STATE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetClusterState(LLONG lLoginID, NET_IN_GET_CLUSTER_STATE_INFO* pstInParam, NET_OUT_GET_CLUSTER_STATE_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CHIP_USAGE_INFO
{
    DWORD dwSize;    
    char szchip[16]; 
} NET_IN_GET_CHIP_USAGE_INFO;
typedef enum tagEM_CHIP_USAGE_FUNCTION_STATE
{
    EM_CHIP_USAGE_FUNCTION_STATE_UNKNWON = 0,      
    EM_CHIP_USAGE_FUNCTION_STATE_COMPRESS,         
    EM_CHIP_USAGE_FUNCTION_STATE_INTELLI,          
    EM_CHIP_USAGE_FUNCTION_STATE_COMBINATION,      
    EM_CHIP_USAGE_FUNCTION_STATE_SWITCHTOCOMPRESS, 
    EM_CHIP_USAGE_FUNCTION_STATE_SWITCHTOINTELLI,  
    EM_CHIP_USAGE_FUNCTION_STATE_SWITCHTOCOMBINA,  
    EM_CHIP_USAGE_FUNCTION_STATE_ERROR,            
} EM_CHIP_USAGE_FUNCTION_STATE;
typedef struct tagNET_CHIP_USAGE_INFO
{
    char szchip[16];                                
    EM_CHIP_USAGE_FUNCTION_STATE emFunctionalState; 
    UINT nCompressUsagePercent;                     
    int nVideoChannel[128];                         
    int nVideoChannelNum;                           
    char szReserved[512];                           
} NET_CHIP_USAGE_INFO;
typedef struct tagNET_OUT_GET_CHIP_USAGE_INFO
{
    DWORD dwSize;                             
    int nChipUsageInfoNum;                    
    NET_CHIP_USAGE_INFO stuChipUsageInfo[64]; 
} NET_OUT_GET_CHIP_USAGE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetChipUsageInfo(LLONG lLoginID, const NET_IN_GET_CHIP_USAGE_INFO* pInParam, NET_OUT_GET_CHIP_USAGE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CHIP_STATE_BYID_INFO
{
    DWORD dwSize;        
    int nListNum;        
    char szList[32][16]; 
} NET_IN_GET_CHIP_STATE_BYID_INFO;
typedef enum tagEM_CHIP_STATE
{
    EM_CHIP_STATE_UNKNWON = 0, 
    EM_CHIP_STATE_NORMAL,      
    EM_CHIP_STATE_EXCEPTION,   
    EM_CHIP_STATE_NOTRUNNING,  
} EM_CHIP_STATE;
typedef struct tagNET_CHIP_STATE_INFO
{
    char szChip[16];           
    EM_CHIP_STATE emChipState; 
    char szReserved[128];      
} NET_CHIP_STATE_INFO;
typedef struct tagNET_OUT_GET_CHIP_STATE_BYID_INFO
{
    DWORD dwSize;                             
    int nChipStateInfoNum;                    
    NET_CHIP_STATE_INFO stuChipStateInfo[32]; 
} NET_OUT_GET_CHIP_STATE_BYID_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPeripheralChipStateByID(LLONG lLoginID, const NET_IN_GET_CHIP_STATE_BYID_INFO* pstuInParam, NET_OUT_GET_CHIP_STATE_BYID_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_CREATE_GROUP_FOR_VEHICLE_REG_DB
{
    DWORD dwSize;            
    char szGroupName[128];   
    char szGroupDetail[256]; 
    int nGroupType;          
} NET_IN_CREATE_GROUP_FOR_VEHICLE_REG_DB;
typedef struct tagNET_OUT_CREATE_GROUP_FOR_VEHICLE_REG_DB
{
    DWORD dwSize;       
    char szGroupID[64]; 
} NET_OUT_CREATE_GROUP_FOR_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CreateGroupForVehicleRegisterDB(LLONG lLoginID, const NET_IN_CREATE_GROUP_FOR_VEHICLE_REG_DB* pInParam, NET_OUT_CREATE_GROUP_FOR_VEHICLE_REG_DB* pOutParam, int nWaitTime);
typedef struct tagNET_IN_DELETE_GROUP_FROM_VEHICLE_REG_DB
{
    DWORD dwSize;       
    char szGroupID[64]; 
} NET_IN_DELETE_GROUP_FROM_VEHICLE_REG_DB;
typedef struct tagNET_OUT_DELETE_GROUP_FROM_VEHICLE_REG_DB
{
    DWORD dwSize; 
} NET_OUT_DELETE_GROUP_FROM_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteGroupFromVehicleRegisterDB(LLONG lLoginID, const NET_IN_DELETE_GROUP_FROM_VEHICLE_REG_DB* pInParam, NET_OUT_DELETE_GROUP_FROM_VEHICLE_REG_DB* pOutParam, int nWaitTime);
typedef struct tagNET_IN_MULTI_APPEND_TO_VEHICLE_REG_DB
{
    DWORD dwSize;                   
    int nVehicleNum;                
    NET_VEHICLE_INFO* pstuVehicles; 
    BOOL bReplace;                  
} NET_IN_MULTI_APPEND_TO_VEHICLE_REG_DB;
typedef enum tagEM_VEHICLE_REG_DB_OPERATOR_ERRCODE
{
    EM_VEHICLE_REG_DB_OPERATOR_ERRCODE_UNKNWON = 0,    
    EM_VEHICLE_REG_DB_OPERATOR_ERRCODE_SUCCESS,        
    EM_VEHICLE_REG_DB_OPERATOR_ERRCODE_DB_ERROR,       
    EM_VEHICLE_REG_DB_OPERATOR_ERRCODE_NOT_EXIST,      
    EM_VEHICLE_REG_DB_OPERATOR_ERRCODE_EXCEED_MAX_NUM, 
} EM_VEHICLE_REG_DB_OPERATOR_ERRCODE;
typedef struct tagNET_OUT_MULTI_APPEND_TO_VEHICLE_REG_DB
{
    DWORD dwSize;                                    
    UINT nErrCodeNum;                                
    UINT nRetErrCodeNum;                             
    EM_VEHICLE_REG_DB_OPERATOR_ERRCODE* pemErrCodes; 
} NET_OUT_MULTI_APPEND_TO_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MultiAppendToVehicleRegisterDB(LLONG lLoginID, const NET_IN_MULTI_APPEND_TO_VEHICLE_REG_DB* pInParam, NET_OUT_MULTI_APPEND_TO_VEHICLE_REG_DB* pOutParam, int nWaitTime);
typedef struct tagNET_DELETE_VEHICLE_CONDITION_INFO
{
    char szPlateCountry[4];         
    char szPlateNumber[64];         
    int nVehicleType;               
    int nBrand;                     
    NET_COLOR_RGBA stuVehicleColor; 
    char szOwnerName[64];           
    char szPersonID[32];            
    char szPhoneNo[128];            
    char szEmail[32];               
    char szHomeAddress[128];        
    BYTE bReserved[512];
} NET_DELETE_VEHICLE_CONDITION_INFO;
typedef struct tagNET_IN_DEL_BY_CONDITION_FROM_VEHICLE_REG_DB
{
    DWORD dwSize;                                      
    char szGroupID[64];                                
    NET_DELETE_VEHICLE_CONDITION_INFO stuDelCondition; 
    DWORD dwUIDCnt;                                    
    char szUIDList[1024][32];                          
} NET_IN_DEL_BY_CONDITION_FROM_VEHICLE_REG_DB;
typedef struct tagNET_OUT_DEL_BY_CONDITION_FROM_VEHICLE_REG_DB
{
    DWORD dwSize; 
} NET_OUT_DEL_BY_CONDITION_FROM_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteByConditionFromVehicleRegisterDB(LLONG lLoginID, const NET_IN_DEL_BY_CONDITION_FROM_VEHICLE_REG_DB* pInParam, NET_OUT_DEL_BY_CONDITION_FROM_VEHICLE_REG_DB* pOutParam, int nWaitTime);
typedef struct tagNET_VEHICLE_GROUP_INFO
{
    char szGroupID[64];      
    char szGroupName[128];   
    char szGroupDetail[256]; 
    int nGroupType;          
    char szReserved[512];    
} NET_VEHICLE_GROUP_INFO;
typedef struct tagNET_IN_MODIFY_GROUP_FOR_VEHICLE_REG_DB
{
    DWORD dwSize;                        
    NET_VEHICLE_GROUP_INFO stuGroupInfo; 
} NET_IN_MODIFY_GROUP_FOR_VEHICLE_REG_DB;
typedef struct tagNET_OUT_MODIFY_GROUP_FOR_VEHICLE_REG_DB
{
    DWORD dwSize; 
} NET_OUT_MODIFY_GROUP_FOR_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyGroupForVehicleRegisterDB(LLONG lLoginID, const NET_IN_MODIFY_GROUP_FOR_VEHICLE_REG_DB* pstuInParam, NET_OUT_MODIFY_GROUP_FOR_VEHICLE_REG_DB* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_FIND_GROUP_FROM_VEHICLE_REG_DB
{
    DWORD dwSize;       
    char szGroupID[64]; 
} NET_IN_FIND_GROUP_FROM_VEHICLE_REG_DB;
typedef struct tagNET_VEHICLE_GROUP_FOUND_INFO
{
    char szGroupID[64];      
    char szGroupName[128];   
    char szGroupDetail[256]; 
    int nGroupType;          
    int nGroupSize;          
    int nChannels[1024];     
    int nChannelsNum;        
    char szReserved[508];    
} NET_VEHICLE_GROUP_FOUND_INFO;
typedef struct tagNET_OUT_FIND_GROUP_FROM_VEHICLE_REG_DB
{
    DWORD dwSize;                                   
    int nGroupListNum;                              
    NET_VEHICLE_GROUP_FOUND_INFO stuGroupList[128]; 
} NET_OUT_FIND_GROUP_FROM_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_FindGroupFormVehicleRegisterDB(LLONG lLoginID, const NET_IN_FIND_GROUP_FROM_VEHICLE_REG_DB* pstuInParam, NET_OUT_FIND_GROUP_FROM_VEHICLE_REG_DB* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_MODIFY_VEHICLE_FOR_VEHICLE_REG_DB
{
    DWORD dwSize;                    
    NET_VEHICLE_INFO stuVehicleInfo; 
} NET_IN_MODIFY_VEHICLE_FOR_VEHICLE_REG_DB;
typedef struct tagNET_OUT_MODIFY_VEHICLE_FOR_VEHICLE_REG_DB
{
    DWORD dwSize; 
} NET_OUT_MODIFY_VEHICLE_FOR_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyVehicleForVehicleRegisterDB(LLONG lLoginID, const NET_IN_MODIFY_VEHICLE_FOR_VEHICLE_REG_DB* pstuInParam, NET_OUT_MODIFY_VEHICLE_FOR_VEHICLE_REG_DB* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_DELETE_VEHICLE_FROM_VEHICLE_REG_DB
{
    DWORD dwSize;           
    UINT nUID;              
    char szGroupID[64];     
    char szPlateNumber[64]; 
} NET_IN_DELETE_VEHICLE_FROM_VEHICLE_REG_DB;
typedef struct tagNET_OUT_DELETE_VEHICLE_FROM_VEHICLE_REG_DB
{
    DWORD dwSize; 
} NET_OUT_DELETE_VEHICLE_FROM_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeleteVehicleFromVehicleRegisterDB(LLONG lLoginID, const NET_IN_DELETE_VEHICLE_FROM_VEHICLE_REG_DB* pstuInParam, NET_OUT_DELETE_VEHICLE_FROM_VEHICLE_REG_DB* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_START_FIND_VEHICLE_REG_DB
{
    DWORD dwSize;                    
    NET_VEHICLE_INFO stuVehicleInfo; 
} NET_IN_START_FIND_VEHICLE_REG_DB;
typedef struct tagNET_OUT_START_FIND_VEHICLE_REG_DB
{
    DWORD dwSize;    
    UINT nToken;     
    int nTotalCount; 
} NET_OUT_START_FIND_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartFindVehicleRegisterDB(LLONG lLoginID, const NET_IN_START_FIND_VEHICLE_REG_DB* pstuInParam, NET_OUT_START_FIND_VEHICLE_REG_DB* pstuOutParam, int nWaitTime);
typedef struct tagNET_FIND_VEHICLE_CONDITION
{
    UINT nToken;          
    UINT nBeginNumber;    
    int nCount;           
    char szReserved[128]; 
} NET_FIND_VEHICLE_CONDITION;
typedef struct tagNET_IN_DO_FIND_VEHICLE_REG_DB
{
    DWORD dwSize;                            
    NET_FIND_VEHICLE_CONDITION stuCondition; 
} NET_IN_DO_FIND_VEHICLE_REG_DB;
typedef struct tagNET_OUT_DO_FIND_VEHICLE_REG_DB
{
    DWORD dwSize;                                
    int nCarCandidateNum;                        
    NET_CAR_CANDIDATE_INFO stuCarCandidate[128]; 
    int nFound;                                  
} NET_OUT_DO_FIND_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindVehicleRegisterDB(LLONG lLoginID, const NET_IN_DO_FIND_VEHICLE_REG_DB* pstuInParam, NET_OUT_DO_FIND_VEHICLE_REG_DB* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_STOP_FIND_VEHICLE_REG_DB
{
    DWORD dwSize; 
    UINT nToken;  
} NET_IN_STOP_FIND_VEHICLE_REG_DB;
typedef struct tagNET_OUT_STOP_FIND_VEHICLE_REG_DB
{
    DWORD dwSize; 
} NET_OUT_STOP_FIND_VEHICLE_REG_DB;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopFindVehicleRegisterDB(LLONG lLoginID, const NET_IN_STOP_FIND_VEHICLE_REG_DB* pstuInParam, NET_OUT_STOP_FIND_VEHICLE_REG_DB* pstuOutParam, int nWaitTime);
typedef struct tagNET_PREPARE_EXPORT_FILEINFO
{
    char szFileName[128];  
    char szReserverd[256]; 
} NET_PREPARE_EXPORT_FILEINFO;
typedef struct tagNET_PREPARE_EXPORT_INFO
{
    NET_PREPARE_EXPORT_FILEINFO stuFileInfo[256]; 
    int nFileInfoNum;                             
    char szReserverd[256];                        
} NET_PREPARE_EXPORT_INFO;
typedef struct tagNET_IN_PREPARE_EXPORT_INFO
{
    DWORD dwSize;                    
    NET_PREPARE_EXPORT_INFO stuInfo; 
} NET_IN_PREPARE_EXPORT_INFO;
typedef struct tagNET_OUT_PREPARE_EXPORT_INFO
{
    DWORD dwSize; 
    UINT nToken;  
} NET_OUT_PREPARE_EXPORT_INFO;
typedef struct tagNET_EXPORT_ENCRYPED_DEBUGFILES_CONDITION
{
    UINT nRequestLength;   
    char szReserverd[256]; 
} NET_EXPORT_ENCRYPED_DEBUGFILES_CONDITION;
typedef struct tagNET_IN_EXPORT_ENCRYPED_DEBUGFILES_INFO
{
    DWORD dwSize;                                          
    UINT nToken;                                           
    NET_EXPORT_ENCRYPED_DEBUGFILES_CONDITION stuCondition; 
} NET_IN_EXPORT_ENCRYPED_DEBUGFILES_INFO;
typedef struct tagNET_EXPORT_ENCRYPED_DEBUGFILES_INFO
{
    char* pData;           
    int nDataLength;       
    int nDataLengthRet;    
    char szReserverd[256]; 
} NET_EXPORT_ENCRYPED_DEBUGFILES_INFO;
typedef struct tagNET_OUT_EXPORT_ENCRYPED_DEBUGFILES_INFO
{
    DWORD dwSize;                                
    NET_EXPORT_ENCRYPED_DEBUGFILES_INFO stuInfo; 
} NET_OUT_EXPORT_ENCRYPED_DEBUGFILES_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PrepareExport(LLONG lLoginID, NET_IN_PREPARE_EXPORT_INFO* pInParam, NET_OUT_PREPARE_EXPORT_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ExportEncrypedDebugFiles(LLONG lLoginID, NET_IN_EXPORT_ENCRYPED_DEBUGFILES_INFO* pInParam, NET_OUT_EXPORT_ENCRYPED_DEBUGFILES_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_DYNAMIC_LOCK_ERRORCODE
{
    EM_DYNAMIC_LOCK_ERRORCODE_UNKNOWN = -1, 
    EM_DYNAMIC_LOCK_ERRORCODE_SUCCESS,      
    EM_DYNAMIC_LOCK_ERRORCODE_FAIL,         
    EM_DYNAMIC_LOCK_ERRORCODE_LOCK_NO_EXIT, 
    EM_DYNAMIC_LOCK_ERRORCODE_LOCK_INIT,    
    EM_DYNAMIC_LOCK_ERRORCODE_LOCK_NOT_USE, 
} EM_DYNAMIC_LOCK_ERRORCODE;
typedef struct tagNET_IN_GET_DYNAMIC_PASSWORD_LOCKLIST_INFO
{
    DWORD dwSize; 
} NET_IN_GET_DYNAMIC_PASSWORD_LOCKLIST_INFO;
typedef struct tagNET_DYNAMIC_LOCK_LIST_INFO
{
    char szID[32];         
    char szReserverd[128]; 
} NET_DYNAMIC_LOCK_LIST_INFO;
typedef struct tagNET_OUT_GET_DYNAMIC_PASSWORD_LOCKLIST_INFO
{
    DWORD dwSize;                           
    EM_DYNAMIC_LOCK_ERRORCODE emErrorCode;  
    int nListNum;                           
    NET_DYNAMIC_LOCK_LIST_INFO stuList[32]; 
} NET_OUT_GET_DYNAMIC_PASSWORD_LOCKLIST_INFO;
typedef struct tagNET_IN_GET_DYNAMIC_PASSWORD_LOCK_INFO
{
    DWORD dwSize;                           
    int nListNum;                           
    NET_DYNAMIC_LOCK_LIST_INFO stuList[32]; 
} NET_IN_GET_DYNAMIC_PASSWORD_LOCK_INFO;
typedef struct tagNET_DYNAMIC_PASSWORD_LOCK_INFO
{
    char szID[32];         
    BOOL bInitState;       
    BOOL bLockState;       
    BOOL bOnlineState;     
    char szReserverd[124]; 
} NET_DYNAMIC_PASSWORD_LOCK_INFO;
typedef struct tagNET_OUT_GET_DYNAMIC_PASSWORD_LOCK_INFO
{
    DWORD dwSize;                               
    EM_DYNAMIC_LOCK_ERRORCODE emErrorCode;      
    int nInfoNum;                               
    NET_DYNAMIC_PASSWORD_LOCK_INFO stuInfo[32]; 
} NET_OUT_GET_DYNAMIC_PASSWORD_LOCK_INFO;
typedef struct tagNET_IN_GET_DYNAMIC_LOCK_RANDOM_PUBLICKEY_INFO
{
    DWORD dwSize;                
    char szID[32];               
    char szCenterPublicKey[512]; 
} NET_IN_GET_DYNAMIC_LOCK_RANDOM_PUBLICKEY_INFO;
typedef struct tagNET_OUT_GET_DYNAMIC_LOCK_RANDOM_PUBLICKEY_INFO
{
    DWORD dwSize;                          
    EM_DYNAMIC_LOCK_ERRORCODE emErrorCode; 
    char szRandomPublicKey[512];           
} NET_OUT_GET_DYNAMIC_LOCK_RANDOM_PUBLICKEY_INFO;
typedef struct tagNET_IN_SET_DYNAMIC_LOCK_COMMUNICATIONKEY_INFO
{
    DWORD dwSize;                 
    char szID[32];                
    char szCommuKey[512];         
    char szKeyVerify[512];        
    char szOldKeyVerify[512];     
    char szPrivateSigniture[512]; 
} NET_IN_SET_DYNAMIC_LOCK_COMMUNICATIONKEY_INFO;
typedef struct tagNET_OUT_SET_DYNAMIC_LOCK_COMMUNICATIONKEY_INFO
{
    DWORD dwSize;                          
    EM_DYNAMIC_LOCK_ERRORCODE emErrorCode; 
} NET_OUT_SET_DYNAMIC_LOCK_COMMUNICATIONKEY_INFO;
typedef struct tagNET_IN_SET_DYNAMIC_LOCK_OPENKEY_INFO
{
    DWORD dwSize;           
    char szID[32];          
    char szOpenKey[512];    
    char szKeyVerify[512];  
    char szKeyVersion[512]; 
} NET_IN_SET_DYNAMIC_LOCK_OPENKEY_INFO;
typedef struct tagNET_OUT_SET_DYNAMIC_LOCK_OPENKEY_INFO
{
    DWORD dwSize;                          
    EM_DYNAMIC_LOCK_ERRORCODE emErrorCode; 
} NET_OUT_SET_DYNAMIC_LOCK_OPENKEY_INFO;
typedef struct tagNET_IN_SET_DYNAMIC_LOCK_TEMP_USERID_INFO
{
    DWORD dwSize;          
    char szID[32];         
    char szTmpUserID[512]; 
} NET_IN_SET_DYNAMIC_LOCK_TEMP_USERID_INFO;
typedef struct tagNET_OUT_SET_DYNAMIC_LOCK_TEMP_USERID_INFO
{
    DWORD dwSize;                          
    EM_DYNAMIC_LOCK_ERRORCODE emErrorCode; 
} NET_OUT_SET_DYNAMIC_LOCK_TEMP_USERID_INFO;
typedef struct tagNET_IN_SET_DYNAMIC_LOCK_OPEN_CODE_INFO
{
    DWORD dwSize;         
    char szID[32];        
    char szOpenCode[512]; 
} NET_IN_SET_DYNAMIC_LOCK_OPEN_CODE_INFO;
typedef struct tagNET_OUT_SET_DYNAMIC_LOCK_OPEN_CODE_INFO
{
    DWORD dwSize;                          
    EM_DYNAMIC_LOCK_ERRORCODE emErrorCode; 
} NET_OUT_SET_DYNAMIC_LOCK_OPEN_CODE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDynamicPasswordLockList(LLONG lLoginID, NET_IN_GET_DYNAMIC_PASSWORD_LOCKLIST_INFO* pInParam, NET_OUT_GET_DYNAMIC_PASSWORD_LOCKLIST_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDynamicPasswordLockInfo(LLONG lLoginID, NET_IN_GET_DYNAMIC_PASSWORD_LOCK_INFO* pInParam, NET_OUT_GET_DYNAMIC_PASSWORD_LOCK_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDynamicLockRandomPublicKey(LLONG lLoginID, NET_IN_GET_DYNAMIC_LOCK_RANDOM_PUBLICKEY_INFO* pInParam, NET_OUT_GET_DYNAMIC_LOCK_RANDOM_PUBLICKEY_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDynamicLockCommunicationKey(LLONG lLoginID, NET_IN_SET_DYNAMIC_LOCK_COMMUNICATIONKEY_INFO* pInParam, NET_OUT_SET_DYNAMIC_LOCK_COMMUNICATIONKEY_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDynamicLockOpenKey(LLONG lLoginID, NET_IN_SET_DYNAMIC_LOCK_OPENKEY_INFO* pInParam, NET_OUT_SET_DYNAMIC_LOCK_OPENKEY_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDynamicLockTempUserID(LLONG lLoginID, NET_IN_SET_DYNAMIC_LOCK_TEMP_USERID_INFO* pInParam, NET_OUT_SET_DYNAMIC_LOCK_TEMP_USERID_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetDynamicLockOpenCode(LLONG lLoginID, NET_IN_SET_DYNAMIC_LOCK_OPEN_CODE_INFO* pInParam, NET_OUT_SET_DYNAMIC_LOCK_OPEN_CODE_INFO* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_FINANCIAL_CABIN_INFO
{
    DWORD dwSize;    
    int nIndexNum;   
    UINT nIndex[64]; 
} NET_IN_GET_FINANCIAL_CABIN_INFO;
typedef struct tagNET_FINANCIAL_CABIN_INFO
{
    char szRFIDNo[128];     
    char szBindRFIDNo[128]; 
    char szType[32];        
    char szDoorState[32];   
    float fAmount;          
    char szReserved[124];   
} NET_FINANCIAL_CABIN_INFO;
typedef struct tagNET_OUT_GET_FINANCIAL_CABIN_INFO
{
    DWORD dwSize;                         
    int nInfoNum;                         
    NET_FINANCIAL_CABIN_INFO stuInfo[64]; 
} NET_OUT_GET_FINANCIAL_CABIN_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFinancialCabinInfo(LLONG lLoginID, NET_IN_GET_FINANCIAL_CABIN_INFO* pInParam, NET_OUT_GET_FINANCIAL_CABIN_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_CTRL_SCHEME
{
    EM_CTRL_SCHEME_UNKNOWN,                        
    EM_CTRL_SCHEME_REDYELLOW_BACKUP = 150,         
    EM_CTRL_SCHEME_REDYELLOW_BACKUP_NORMAL_QUIT,   
    EM_CTRL_SCHEME_REDYELLOW_BACKUP_ABNORMAL_QUIT, 
    EM_CTRL_SCHEME_VARLANE_BACKUP,                 
    EM_CTRL_SCHEME_VARLANE_BACKUP_NORMAL_QUIT,     
    EM_CTRL_SCHEME_VARLANE_BACKUP_ABNORMAL_QUIT,   
} EM_CTRL_SCHEME;
typedef struct tagNET_IN_SET_BACKUP_MODE
{
    DWORD dwSize;                
    EM_CTRL_SCHEME emCtrlScheme; 
} NET_IN_SET_BACKUP_MODE;
typedef enum tagEM_BACKUP_ERROR_CODE
{
    EM_BACKUP_ERROR_CODE_UNKNOWN = -1,                
    EM_BACKUP_ERROR_CODE_SUCCESS,                     
    EM_BACKUP_ERROR_CODE_CYCLE_PLAN,                  
    EM_BACKUP_ERROR_CODE_GREEN_LETTER,                
    EM_BACKUP_ERROR_CODE_TIME_BASE_PLAN,              
    EM_BACKUP_ERROR_CODE_DAY_PLAN,                    
    EM_BACKUP_ERROR_CODE_ACTION_PLAN,                 
    EM_BACKUP_ERROR_CODE_PHASE_SEQUENCE,              
    EM_BACKUP_ERROR_CODE_CHANNEL_TABLE,               
    EM_BACKUP_ERROR_CODE_FOLLOW_PHASE_TABLE,          
    EM_BACKUP_ERROR_CODE_PHASE_CONFLCT,               
    EM_BACKUP_ERROR_CODE_DELIVERY_PLAN,               
    EM_BACKUP_ERROR_CODE_LANE_TABLE_SETTING,          
    EM_BACKUP_ERROR_CODE_NOT_SUPPORT_SHORT_JUNCTIONS, 
    EM_BACKUP_ERROR_CODE_CHANNEL_CONFIGURATION,       
    EM_BACKUP_ERROR_CODE_VARIABLEE_LANE_TABLE,        
    EM_BACKUP_ERROR_CODE_WEEKLY_PLAN,                 
} EM_BACKUP_ERROR_CODE;
typedef struct tagNET_OUT_SET_BACKUP_MODE
{
    DWORD dwSize;                         
    EM_BACKUP_ERROR_CODE emBackUpErrCode; 
} NET_OUT_SET_BACKUP_MODE;
typedef struct tagNET_IN_SET_RUNNING_MODE
{
    DWORD dwSize; 
    int nMode;    
} NET_IN_SET_RUNNING_MODE;
typedef struct tagNET_OUT_SET_RUNNING_MODE
{
    DWORD dwSize; 
} NET_OUT_SET_RUNNING_MODE;
typedef struct tagNET_IN_GET_RUNNING_MODE
{
    DWORD dwSize; 
} NET_IN_GET_RUNNING_MODE;
typedef struct tagNET_OUT_GET_RUNNING_MODE
{
    DWORD dwSize; 
    int nMode;    
} NET_OUT_GET_RUNNING_MODE;
typedef enum tagEM_LIGHTGROUP_FAULT_LEVEL
{
    EM_LIGHTGROUP_FAULT_UNKNOWN,                      
    EM_LIGHTGROUP_FAULT_INGORE,                       
    EM_LIGHTGROUP_FAULT_INGORE_YELLOWGREENPEDESTRIAN, 
    EM_LIGHTGROUP_FAULT_INGORE_YELLOWREDPEDESTRIAN,   
    EM_LIGHTGROUP_FAULT_INGORE_YELLOWPEDESTRIAN,      
    EM_LIGHTGROUP_FAULT_UNINGORE,                     
} EM_LIGHTGROUP_FAULT_LEVEL;
typedef enum tagEM_COUNTDOWN_TYPE
{
    EM_COUNTDOWN_TYPE_UNKNOWN,    
    EM_COUNTDOWN_TYPE_LEARNING,   
    EM_COUNTDOWN_TYPE_PLUSE,      
    EM_COUNTDOWN_TYPE_FULL485,    
    EM_COUNTDOWN_TYPE_HALFWAY485, 
} EM_COUNTDOWN_TYPE;
typedef enum tagEM_AUTO_PROTECT_WEEK
{
    EM_AUTO_PROTECT_UNKNOWN,   
    EM_AUTO_PROTECT_MONDAY,    
    EM_AUTO_PROTECT_TUESDAY,   
    EM_AUTO_PROTECT_WEDNESDAY, 
    EM_AUTO_PROTECT_THURSDAY,  
    EM_AUTO_PROTECT_FIRDAY,    
    EM_AUTO_PROTECT_SATURDAY,  
    EM_AUTO_PROTECT_SUNDAY,    
    EM_AUTO_PROTECT_EVERYDAY,  
} EM_AUTO_PROTECT_WEEK;
typedef struct tagGLOBAL_INFO
{
    EM_LIGHTGROUP_FAULT_LEVEL emLightGroupFault; 
    EM_COUNTDOWN_TYPE emCountDownType;           
    int nPulseWidth;                             
    int nPulseTime;                              
    int nBaudRault;                              
    int nGatType;                                
    int nHalfTime;                               
    int nDefaultRunModel;                        
    int nVarLaneCommunicationType;               
    int nAutoProtectEnable;                      
    EM_AUTO_PROTECT_WEEK emAutoProtectWeek;      
    int nAutoProtectHour;                        
    int nAutoProtectMinute;                      
    int nControlUnlockTime;                      
    int nFaultReport;                            
    int nRatedVoltage;                           
    int nPercentageValNum;                       
    int nPercentageVal[4];                       
    int nStartUpLampNum;                         
    int nStartUpLamp[3];                         
    int nStartUpTimeNum;                         
    int nStartUpTime[3];                         
    int nPlatformCtrl;                           
    int nPlatformCtrlValNum;                     
    int nPlatformCtrlVal[16];                    
    BYTE byReserved[952];                        
} GLOBAL_INFO;
typedef struct tagNET_IN_GET_GLOBAL_PARAMETER
{
    DWORD dwSize; 
} NET_IN_GET_GLOBAL_PARAMETER;
typedef struct tagNET_OUT_GET_GLOBAL_PARAMETER
{
    DWORD dwSize;              
    GLOBAL_INFO stuGlobalInfo; 
} NET_OUT_GET_GLOBAL_PARAMETER;
typedef struct tagNET_IN_SET_GLOBAL_PARAMETER
{
    DWORD dwSize;              
    GLOBAL_INFO stuGlobalInfo; 
} NET_IN_SET_GLOBAL_PARAMETER;
typedef struct tagNET_OUT_SET_GLOBAL_PARAMETER
{
    DWORD dwSize; 
} NET_OUT_SET_GLOBAL_PARAMETER;
typedef struct tagNET_IN_GET_RUNNING_INFO
{
    DWORD dwSize; 
    UINT nType;   
} NET_IN_GET_RUNNING_INFO;
typedef struct tagNET_OUT_GET_RUNNING_INFO
{
    DWORD dwSize;                         
    DWORD dwReportState;                  
    int nLongitudeNum;                    
    double dbLongitude[3];                
    int nLatitudeNum;                     
    double dbLatitude[3];                 
    double dbAltitude;                    
    NET_TIME_EX UTC;                      
    EM_STATUS emStatus;                   
    EM_CONTROL_MODE emControlMode;        
    LANE_STATE stuLaneStateInfo;          
    LANE_CTRL_STATE stuLaneCtrlStateInfo; 
    CUR_STEP_INFO stuCurStepInfo;         
    NEXT_STEP_INFO stuNextStepInfo;       
} NET_OUT_GET_RUNNING_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRtscBackupMode(LLONG lLoginID, const NET_IN_SET_BACKUP_MODE* pInParam, NET_OUT_SET_BACKUP_MODE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRtscRunningMode(LLONG lLoginID, const NET_IN_SET_RUNNING_MODE* pInParam, NET_OUT_SET_RUNNING_MODE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRtscRunningMode(LLONG lLoginID, const NET_IN_GET_RUNNING_MODE* pInParam, NET_OUT_GET_RUNNING_MODE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRtscGlobalParam(LLONG lLoginID, const NET_IN_GET_GLOBAL_PARAMETER* pInParam, NET_OUT_GET_GLOBAL_PARAMETER* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetRtscGlobalParam(LLONG lLoginID, const NET_IN_SET_GLOBAL_PARAMETER* pInParam, NET_OUT_SET_GLOBAL_PARAMETER* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRtscRunningInfo(LLONG lLoginID, const NET_IN_GET_RUNNING_INFO* pInParam, NET_OUT_GET_RUNNING_INFO* pOutParam, int nWaitTime);
typedef enum tagEM_PROPERTIES_VALUE_TYPE
{
    EM_PROPERTIES_VALUE_UNKNOWN,  
    EM_PROPERTIES_VALUE_INT,      
    EM_PROPERTIES_VALUE_BOOL,     
    EM_PROPERTIES_VALUE_STRING,   
    EM_PROPERTIES_VALUE_INTARRAY, 
} EM_PROPERTIES_VALUE_TYPE;
typedef struct tagNET_PROPERTIES_NAME
{
    char szPropertiesName[64]; 
    char szReserved[1024];     
} NET_PROPERTIES_NAME;
typedef struct tagNET_PROPERTIES_INTARRAY_VALUE
{
    int nValue;          
    char szReserved[32]; 
} NET_PROPERTIES_INTARRAY_VALUE;
typedef struct tagNET_PROPERTIES_INFO
{
    char szKey[64];                                      
    char szValue[256];                                   
    EM_PROPERTIES_VALUE_TYPE emValueType;                
    int nIntArrayValueNum;                               
    NET_PROPERTIES_INTARRAY_VALUE stuIntArrayValue[128]; 
    char szReserved[512];                                
} NET_PROPERTIES_INFO;
typedef struct tagNET_IN_THINGS_GET
{
    DWORD dwSize;                             
    char szProductID[64];                     
    char szDeviceID[128];                     
    int nProperCount;                         
    NET_PROPERTIES_NAME* pstuGetInProperName; 
} NET_IN_THINGS_GET;
typedef struct tagNET_OUT_THINGS_GET
{
    DWORD dwSize;                              
    char szProductID[64];                      
    char szDeviceID[128];                      
    int nRetPropertiesCount;                   
    int nMaxPropertiesCount;                   
    NET_PROPERTIES_INFO* pstuGetOutProperInfo; 
} NET_OUT_THINGS_GET;
typedef struct tagNET_IN_THINGS_SET
{
    DWORD dwSize;                             
    char szProductID[64];                     
    char szDeviceID[128];                     
    int nProperCount;                         
    NET_PROPERTIES_INFO* pstuSetInProperInfo; 
} NET_IN_THINGS_SET;
typedef struct tagNET_OUT_THINGS_SET
{
    DWORD dwSize; 
} NET_OUT_THINGS_SET;
typedef enum tagEM_ATTACH_TOPICS
{
    EM_ATTACH_TOPICS_ALL,    
    EM_ATTACH_TOPICS_PROPS,  
    EM_ATTACH_TOPICS_EVENTS, 
} EM_ATTACH_TOPICS;
typedef struct tagNET_CB_THINGS_PROPER_INFO
{
    char szKey[64];                                     
    char szValue[256];                                  
    EM_PROPERTIES_VALUE_TYPE emValueType;               
    int nIntArrayValueNum;                              
    NET_PROPERTIES_INTARRAY_VALUE stuIntArrayValue[64]; 
    char szReserved[1024];                              
} NET_CB_THINGS_PROPER_INFO;
typedef struct tagNET_CB_THINGS_INFO
{
    EM_ATTACH_TOPICS emTopics;                 
    int nSID;                                  
    char szProductID[64];                      
    char szDeviceID[128];                      
    char szEventID[64];                        
    NET_TIME_EX stuEventTime;                  
    NET_CB_THINGS_PROPER_INFO* pstuProperInfo; 
    UINT nRetProperInfoNum;                    
    char szReserve[256];                       
} NET_CB_THINGS_INFO;
typedef void(CALLBACK* fThingsCallBack)(LLONG lAttachHandle, NET_CB_THINGS_INFO* pstResult, LDWORD dwUserData);
typedef struct tagNET_IN_THINGS_ATTACH
{
    DWORD dwSize;                 
    EM_ATTACH_TOPICS emTopics;    
    char szProductID[64];         
    char szDeviceID[64];          
    fThingsCallBack cbThingsInfo; 
    LDWORD dwUser;                
} NET_IN_THINGS_ATTACH;
typedef struct tagNET_OUT_THINGS_ATTACH
{
    DWORD dwSize; 
} NET_OUT_THINGS_ATTACH;
typedef struct tagNET_IN_THINGS_GET_CAPS
{
    DWORD dwSize;         
    char szDeviceID[128]; 
} NET_IN_THINGS_GET_CAPS;
typedef struct tagNET_OUT_THINGS_GET_CAPS
{
    DWORD dwSize;                               
    int nMaxProperCount;                        
    int nRetProperCount;                        
    NET_PROPERTIES_NAME* pstuGetCapsProperName; 
} NET_OUT_THINGS_GET_CAPS;
typedef struct tagNET_THINGS_DEVLIST_INFO
{
    char szDevID[128];     
    char szDevClass[128];  
    char szReserved[1024]; 
} NET_THINGS_DEVLIST_INFO;
typedef struct tagNET_IN_THINGS_GET_DEVLIST
{
    DWORD dwSize; 
} NET_IN_THINGS_GET_DEVLIST;
typedef enum tagEM_THINGS_CONNECT_STATE
{
    EM_THINGS_CONNECT_STATE_UNKNOWN = -1, 
    EM_THINGS_CONNECT_STATE_DISCONNECT,   
    EM_THINGS_CONNECT_STATE_CONNECT,      
} EM_THINGS_CONNECT_STATE;
typedef struct tagNET_OUT_THINGS_GET_DEVLIST
{
    DWORD dwSize;                             
    int nMaxDevListCount;                     
    int nRetDevListCount;                     
    NET_THINGS_DEVLIST_INFO* pstuDevListInfo; 
} NET_OUT_THINGS_GET_DEVLIST;
typedef struct tagNET_IN_THINGS_GET_NETSTATE
{
    DWORD dwSize; 
} NET_IN_THINGS_GET_NETSTATE;
typedef struct tagNET_OUT_THINGS_GET_NETSTATE
{
    DWORD dwSize;                           
    EM_THINGS_CONNECT_STATE emConnectState; 
} NET_OUT_THINGS_GET_NETSTATE;
typedef struct tagNET_IN_THINGS_SERVICE_VALVECONTROL
{
    DWORD dwSize;         
    BOOL bSwitch;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_VALVECONTROL;
typedef struct tagNET_OUT_THINGS_SERVICE_VALVECONTROL
{
    DWORD dwSize;         
    BOOL bResult;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_VALVECONTROL;
typedef struct tagNET_IN_THINGS_SERVICE_CHARGECLEAR
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_CHARGECLEAR;
typedef struct tagNET_OUT_THINGS_SERVICE_CHARGECLEAR
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_CHARGECLEAR;
typedef struct tagNET_IN_THINGS_SERVICE_LEAKCURTPOST
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_LEAKCURTPOST;
typedef struct tagNET_OUT_THINGS_SERVICE_LEAKCURTPOST
{
    DWORD dwSize;          
    int nErrcode;          
    char szProductID[64];  
    char szDeviceID[64];   
    BOOL bCheckResult;     
    char szErrorMsg[1024]; 
} NET_OUT_THINGS_SERVICE_LEAKCURTPOST;
typedef struct tagNET_IN_THINGS_SERVICE_LEAKCURTPOSTASYNC
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_LEAKCURTPOSTASYNC;
typedef struct tagNET_OUT_THINGS_SERVICE_LEAKCURTPOSTASYNC
{
    DWORD dwSize;          
    int nErrcode;          
    char szProductID[64];  
    char szDeviceID[64];   
    BOOL bCheckResult;     
    char szErrorMsg[1024]; 
} NET_OUT_THINGS_SERVICE_LEAKCURTPOSTASYNC;
typedef struct tagNET_IN_THINGS_SERVICE_AIRSWITHFIND
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_AIRSWITHFIND;
typedef struct tagNET_OUT_THINGS_SERVICE_AIRSWITHFIND
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_AIRSWITHFIND;
typedef struct tagNET_IN_THINGS_SERVICE_AIRSWITHRESET
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_AIRSWITHRESET;
typedef struct tagNET_OUT_THINGS_SERVICE_AIRSWITHRESET
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_AIRSWITHRESET;
typedef enum tagEM_THINGS_RULECONTENT_TYPE
{
    EM_THINGS_RULECONTENT_TYPE_UNKNOWN, 
    EM_THINGS_RULECONTENT_TYPE_IFTTT,   
} EM_THINGS_RULECONTENT_TYPE;
typedef struct tagNET_THINGS_TRIGGER_TIMER_CORN
{
    char szSeconds[8];    
    char szMinutes[8];    
    char szHours[8];      
    char szDayofMonth[8]; 
    char szMonth[8];      
    char szDayofWeek[8];  
    char szYear[8];       
    char szReserve[256];  
} NET_THINGS_TRIGGER_TIMER_CORN;
typedef enum tagEM_THINGS_TRIGGER_TIMER_CORN_TYPE
{
    EM_THINGS_TRIGGER_TIMER_CORN_TYPE_UNKNOWN,    
    EM_THINGS_TRIGGER_TIMER_CORN_TYPE_QUARTZCORN, 
    EM_THINGS_TRIGGER_TIMER_CORN_TYPE_LINUX,      
} EM_THINGS_TRIGGER_TIMER_CORN_TYPE;
typedef struct tagNET_THINGS_RULECONTENT_TRIGGER_TIMER
{
    NET_THINGS_TRIGGER_TIMER_CORN stuCron;        
    EM_THINGS_TRIGGER_TIMER_CORN_TYPE emCronType; 
    char szTimezoneID[64];                        
    char szReserve[256];                          
} NET_THINGS_RULECONTENT_TRIGGER_TIMER;
typedef struct tagNET_THINGS_RULECONTENT_TRIGGER_PROPERTY
{
    char szProductId[64];                        
    char szDeviceName[32];                       
    char szPropertyName[32];                     
    char szCompareType[8];                       
    char szCompareValue[32];                     
    EM_PROPERTIES_VALUE_TYPE emCompareValueType; 
    char szReserve[256];                         
} NET_THINGS_RULECONTENT_TRIGGER_PROPERTY;
typedef enum tagEM_THINGS_TRIGGER_TYPE
{
    EM_THINGS_TRIGGER_TYPE_UNKNOWN,          
    EM_THINGS_TRIGGER_TYPE_TRIGGER_TIMER,    
    EM_THINGS_TRIGGER_TYPE_TRIGGER_PROPERTY, 
} EM_THINGS_TRIGGER_TYPE;
typedef struct tagNET_THINGS_RULECONTENT_TRIGGER
{
    EM_THINGS_TRIGGER_TYPE emUri;                               
    NET_THINGS_RULECONTENT_TRIGGER_TIMER stuTriggerTimer;       
    NET_THINGS_RULECONTENT_TRIGGER_PROPERTY stuTriggerProperty; 
    char szReserve[1024];                                       
} NET_THINGS_SERVICE_RULECONTENT_TRIGGER;
typedef struct tagNET_THINGS_RULECONTENT_ACTION_SETPROPERTY
{
    char szProductId[64];                         
    char szDeviceName[32];                        
    char szPropertyName[32];                      
    char szPropertyValue[32];                     
    EM_PROPERTIES_VALUE_TYPE emPropertyValueType; 
    char szReserve[256];                          
} NET_THINGS_RULECONTENT_ACTION_SETPROPERTY;
typedef enum tagEM_THINGS_ACTION_TYPE
{
    EM_THINGS_ACTION_TYPE_UNKNOWN,     
    EM_THINGS_ACTION_TYPE_SETPROPERTY, 
} EM_THINGS_ACTION_TYPE;
typedef struct tagNET_THINGS_RULECONTENT_ACTION
{
    EM_THINGS_ACTION_TYPE emActionUri;                              
    NET_THINGS_RULECONTENT_ACTION_SETPROPERTY stuActionSetProperty; 
    char szReserve[1024];                                           
} NET_THINGS_SERVICE_RULECONTENT_ACTION;
typedef enum tagEM_THINGS_CONDITION_TYPE
{
    EM_THINGS_CONDITION_TYPE_UNKNOWN,   
    EM_THINGS_CONDITION_TYPE_TIMERANGE, 
    EM_THINGS_CONDITION_TYPE_PROPERTY,  
} EM_THINGS_CONDITION_TYPE;
typedef struct tagNET_THINGS_RULECONTENT_CONDITION_TIMER
{
    NET_THINGS_TRIGGER_TIMER_CORN stuCron;        
    EM_THINGS_TRIGGER_TIMER_CORN_TYPE emCronType; 
    char szTimezoneID[64];                        
    char szReserve[256];                          
} NET_THINGS_RULECONTENT_CONDITION_TIMER;
typedef struct tagNET_THINGS_RULECONTENT_CONDITION_PROPERTY
{
    char szProductId[64];                        
    char szDeviceName[32];                       
    char szPropertyName[32];                     
    char szCompareType[8];                       
    char szCompareValue[32];                     
    EM_PROPERTIES_VALUE_TYPE emCompareValueType; 
    char szReserve[256];                         
} NET_THINGS_RULECONTENT_CONDITION_PROPERTY;
typedef struct tagNET_THINGS_RULECONTENT_CONDITION
{
    EM_THINGS_CONDITION_TYPE emConditionUri;                        
    NET_THINGS_RULECONTENT_TRIGGER_TIMER stuTriggerTimer;           
    NET_THINGS_RULECONTENT_CONDITION_PROPERTY stuConditionProperty; 
    char szReserve[1024];                                           
} NET_THINGS_SERVICE_RULECONTENT_CONDITION;
typedef struct tagNET_THINGS_SERVICE_RULECONTENT
{
    EM_THINGS_RULECONTENT_TYPE emRuleContentType;            
    int nTriggerNum;                                         
    NET_THINGS_SERVICE_RULECONTENT_TRIGGER* pstuTrigger;     
    NET_THINGS_SERVICE_RULECONTENT_ACTION* pstuAction;       
    int nActionNum;                                          
    int nConditionNum;                                       
    NET_THINGS_SERVICE_RULECONTENT_CONDITION* pstuCondition; 
    char szReserve[1024];                                    
} NET_THINGS_SERVICE_RULECONTENT;
typedef struct tagNET_IN_THINGS_SERVICE_ADDRULE
{
    DWORD dwSize;                                  
    char szProductID[64];                          
    char szDeviceID[64];                           
    char szClassName[256];                         
    NET_THINGS_SERVICE_RULECONTENT stuRuleContent; 
} NET_IN_THINGS_SERVICE_ADDRULE;
typedef struct tagNET_OUT_THINGS_SERVICE_ADDRULE
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
    char szRuleID[256];   
} NET_OUT_THINGS_SERVICE_ADDRULE;
typedef struct tagNET_IN_THINGS_SERVICE_DELRULE
{
    DWORD dwSize;          
    char szProductID[64];  
    char szDeviceID[64];   
    char szRuleID[256];    
    char szClassName[256]; 
} NET_IN_THINGS_SERVICE_DELRULE;
typedef struct tagNET_OUT_THINGS_SERVICE_DELRULE
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_DELRULE;
typedef struct tagNET_IN_THINGS_SERVICE_MODRULE
{
    DWORD dwSize;                                  
    char szProductID[64];                          
    char szDeviceID[64];                           
    char szRuleID[256];                            
    char szClassName[256];                         
    char szRuleContentType[256];                   
    NET_THINGS_SERVICE_RULECONTENT stuRuleContent; 
} NET_IN_THINGS_SERVICE_MODRULE;
typedef struct tagNET_OUT_THINGS_SERVICE_MODRULE
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_MODRULE;
typedef struct tagNET_IN_THINGS_SERVICE_QUERULE
{
    DWORD dwSize;          
    char szProductID[64];  
    char szDeviceID[64];   
    int nPageSize;         
    int nPage;             
    char szClassName[256]; 
} NET_IN_THINGS_SERVICE_QUERULE;
typedef struct tagNET_THINGS_SERVICE_QUERULE_RULECONTENT
{
    EM_THINGS_RULECONTENT_TYPE emRuleContentType;            
    int nMaxTriggerNum;                                      
    int nRetTriggerNum;                                      
    NET_THINGS_SERVICE_RULECONTENT_TRIGGER* pstuTrigger;     
    int nMaxActionNum;                                       
    int nRetActionNum;                                       
    NET_THINGS_SERVICE_RULECONTENT_ACTION* pstuAction;       
    int nMaxConditionNum;                                    
    int nRetConditionNum;                                    
    NET_THINGS_SERVICE_RULECONTENT_CONDITION* pstuCondition; 
    char szReserve[1024];                                    
} NET_THINGS_SERVICE_QUERULE_RULECONTENT;
typedef struct tagNET_THINGS_SERVICE_QUERULE_RULES
{
    DWORD dwSize;                                          
    BOOL bEnable;                                          
    char szRuleID[256];                                    
    NET_THINGS_SERVICE_QUERULE_RULECONTENT stuRuleContent; 
} NET_THINGS_SERVICE_QUERULE_RULES;
typedef struct tagNET_OUT_THINGS_SERVICE_QUERULE
{
    DWORD dwSize;                                
    int nErrcode;                                
    char szProductID[64];                        
    char szDeviceID[64];                         
    int nPageCount;                              
    int nPageSize;                               
    int nTotal;                                  
    int nPage;                                   
    int nRetRulesNum;                            
    int nMaxRulesNum;                            
    NET_THINGS_SERVICE_QUERULE_RULES* pstuRules; 
} NET_OUT_THINGS_SERVICE_QUERULE;
typedef struct tagNET_IN_THINGS_SERVICE_ENABLE
{
    DWORD dwSize;          
    char szProductID[64];  
    char szDeviceID[64];   
    BOOL bEnable;          
    char szRuleID[256];    
    char szClassName[256]; 
} NET_IN_THINGS_SERVICE_ENABLE;
typedef struct tagNET_OUT_THINGS_SERVICE_ENABLE
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_ENABLE;
typedef struct tagNET_IN_THINGS_SERVICE_ADDDEVICE
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
    UINT nDevCata;        
    UINT nDev485Addr;     
    char szDevSn[128];    
    char szDevName[128];  
} NET_IN_THINGS_SERVICE_ADDDEVICE;
typedef struct tagNET_OUT_THINGS_SERVICE_ADDDEVICE
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_ADDDEVICE;
typedef struct tagNET_THINGS_SERVICE_DELDEVICE_LIST
{
    char szDevieID[64];  
    char szReserve[512]; 
} NET_THINGS_SERVICE_DELDEVICE_LIST;
typedef struct tagNET_IN_THINGS_SERVICE_DELDEVICE
{
    DWORD dwSize;                                       
    int nDelidListCount;                                
    NET_THINGS_SERVICE_DELDEVICE_LIST stuDelidList[64]; 
    char szProductID[64];                               
    char szDeviceID[64];                                
} NET_IN_THINGS_SERVICE_DELDEVICE;
typedef struct tagNET_OUT_THINGS_SERVICE_DELDEVICE
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_DELDEVICE;
typedef struct tagNET_IN_THINGS_SERVICE_DEVREPLACE
{
    DWORD dwSize;             
    char szProductID[64];     
    char szDeviceID[64];      
    char szReplacedDevID[64]; 
    char szNewDevID[64];      
} NET_IN_THINGS_SERVICE_DEVREPLACE;
typedef struct tagNET_OUT_THINGS_SERVICE_DEVREPLACE
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_DEVREPLACE;
typedef struct tagNET_IN_THINGS_SERVICE_OFFLINELOGCLEAN
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_OFFLINELOGCLEAN;
typedef struct tagNET_OUT_THINGS_SERVICE_OFFLINELOGCLEAN
{
    DWORD dwSize;         
    int nErrcode;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_OUT_THINGS_SERVICE_OFFLINELOGCLEAN;
typedef struct tagNET_IN_THINGS_SERVICE_CURRENTSTATUSGET
{
    DWORD dwSize;         
    char szProductID[64]; 
    char szDeviceID[64];  
} NET_IN_THINGS_SERVICE_CURRENTSTATUSGET;
typedef enum tagEM_THINGS_CURRENTSTATUSGET_STATUS
{
    EM_THINGS_CURRENTSTATUSGET_STATUS_UNKNOWN = -1, 
    EM_THINGS_CURRENTSTATUSGET_STATUS_NORMAL,       
    EM_THINGS_CURRENTSTATUSGET_STATUS_EARLY,        
    EM_THINGS_CURRENTSTATUSGET_STATUS_ALARM,        
} EM_THINGS_CURRENTSTATUSGET_STATUS;
typedef struct tagNET_THINGS_SERVICE_CURRENTSTATUSGET_STATUS
{
    char szDeviceID[64];                        
    EM_THINGS_CURRENTSTATUSGET_STATUS emStatus; 
    char szReserve[512];                        
} NET_THINGS_SERVICE_CURRENTSTATUSGET_STATUS;
typedef struct tagNET_OUT_THINGS_SERVICE_CURRENTSTATUSGET
{
    DWORD dwSize;                                             
    int nErrcode;                                             
    char szProductID[64];                                     
    char szDeviceID[64];                                      
    int nRetStatusNum;                                        
    NET_THINGS_SERVICE_CURRENTSTATUSGET_STATUS stuStatus[64]; 
} NET_OUT_THINGS_SERVICE_CURRENTSTATUSGET;
typedef enum tagEM_THINGS_SERVICE_TYPE
{
    EM_THINGS_SERVICE_TYPE_VALVECONTROL,      
    EM_THINGS_SERVICE_TYPE_CHARGECLEAR,       
    EM_THINGS_SERVICE_TYPE_LEAKCURTPOST,      
    EM_THINGS_SERVICE_TYPE_LEAKCURTPOSTASYNC, 
    EM_THINGS_SERVICE_TYPE_AIRSWITHFIND,      
    EM_THINGS_SERVICE_TYPE_AIRSWITHRESET,     
    EM_THINGS_SERVICE_TYPE_ADDRULE,           
    EM_THINGS_SERVICE_TYPE_DELRULE,           
    EM_THINGS_SERVICE_TYPE_MODRULE,           
    EM_THINGS_SERVICE_TYPE_QUERULE,           
    EM_THINGS_SERVICE_TYPE_ENABLERULE,        
    EM_THINGS_SERVICE_TYPE_ADDDEVICE,         
    EM_THINGS_SERVICE_TYPE_DELDEVICE,         
    EM_THINGS_SERVICE_TYPE_DEVREPLACE,        
    EM_THINGS_SERVICE_TYPE_OFFLINELOGCLEAN,   
    EM_THINGS_SERVICE_TYPE_CURRENTSTATUSGET,  
} EM_THINGS_SERVICE_TYPE;
typedef struct tagNET_THINGS_START_HISTORYDATA_TOPICS
{
    char szTopics[32];   
    char szReserve[256]; 
} NET_THINGS_START_HISTORYDATA_TOPICS;
typedef struct tagNET_IN_THINGS_START_HISTORYDATA
{
    DWORD dwSize;                                      
    int nTopicsCount;                                  
    NET_THINGS_START_HISTORYDATA_TOPICS stuTopics[64]; 
} NET_IN_THINGS_START_HISTORYDATA;
typedef struct tagNET_OUT_THINGS_START_HISTORYDATA
{
    DWORD dwSize;  
    DWORD dwCount; 
} NET_OUT_THINGS_START_HISTORYDATA;
typedef struct tagNET_IN_THINGS_DOFIND_HISTORYDATA
{
    DWORD dwSize; 
    UINT uOffset; 
    UINT uCount;  
} NET_IN_THINGS_DOFIND_HISTORYDATA;
typedef struct tagNET_THINGS_HISTORYDATA_PROPER_INFO
{
    char szKey[64];                                     
    char szValue[256];                                  
    EM_PROPERTIES_VALUE_TYPE emValueType;               
    int nIntArrayValueNum;                              
    NET_PROPERTIES_INTARRAY_VALUE stuIntArrayValue[64]; 
    char szReserved[256];                               
} NET_THINGS_HISTORYDATA_PROPER_INFO;
typedef struct tagNET_THINGS_HISTORYDATA
{
    char szEventID[32];                              
    char szDeviceID[32];                             
    char szDevSN[64];                                
    NET_TIME_EX stuEventTime;                        
    char szProductID[32];                            
    int nOrder;                                      
    UINT nRetProInfoNum;                             
    UINT nMaxProInfoNum;                             
    NET_THINGS_HISTORYDATA_PROPER_INFO* pstuProInfo; 
    char szReserve[512]; 
} NET_THINGS_HISTORYDATA;
typedef struct tagNET_OUT_THINGS_DOFIND_HISTORYDATA
{
    DWORD dwSize;                            
    int nCount;                              
    int nMaxHisDataNum;                      
    NET_THINGS_HISTORYDATA* pstuHistoryData; 
} NET_OUT_THINGS_DOFIND_HISTORYDATA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetThingsConfig(LLONG lLoginID, const NET_IN_THINGS_GET* pInParam, NET_OUT_THINGS_GET* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetThingsConfig(LLONG lLoginID, const NET_IN_THINGS_SET* pInParam, NET_OUT_THINGS_SET* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachThingsInfo(LLONG lLoginID, const NET_IN_THINGS_ATTACH* pInParam, NET_OUT_THINGS_ATTACH* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachThingsInfo(LLONG lAttachHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetThingsCaps(LLONG lLoginID, const NET_IN_THINGS_GET_CAPS* pInParam, NET_OUT_THINGS_GET_CAPS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetThingsDevList(LLONG lLoginID, const NET_IN_THINGS_GET_DEVLIST* pInParam, NET_OUT_THINGS_GET_DEVLIST* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetThingsNetState(LLONG lLoginID, const NET_IN_THINGS_GET_NETSTATE* pInParam, NET_OUT_THINGS_GET_NETSTATE* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ThingsServiceOperate(LLONG lLoginID, EM_THINGS_SERVICE_TYPE emType, void* pInBuf, void* pOutBuf, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartThingsHistoryData(LLONG lLoginID, const NET_IN_THINGS_START_HISTORYDATA* pstInParam, NET_OUT_THINGS_START_HISTORYDATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoFindThingsHistoryData(LLONG lFindHandle, const NET_IN_THINGS_DOFIND_HISTORYDATA* pstInParam, NET_OUT_THINGS_DOFIND_HISTORYDATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopThingsHistoryData(LLONG lFindHandle);
typedef struct tagNET_IN_VERIFY_UPGRADE_VERIFY
{
    DWORD dwSize;     
    char szData[256]; 
} NET_IN_VERIFY_UPGRADE_VERIFY;
typedef struct tagNET_OUT_VERIFY_UPGRADE_VERIFY
{
    DWORD dwSize; 
} NET_OUT_VERIFY_UPGRADE_VERIFY;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_VerifyUpgradeVerify(LLONG lLoginID, const NET_IN_VERIFY_UPGRADE_VERIFY* pInParam, NET_OUT_VERIFY_UPGRADE_VERIFY* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_UPGRADE_VERIFY_CURRENT_DATA
{
    DWORD dwSize; 
} NET_IN_GET_UPGRADE_VERIFY_CURRENT_DATA;
typedef struct tagNET_VERIFY_INFO
{
    char szData[64];             
    char szPublicKeyVersion[16]; 
    char szReserved[1024];       
} NET_VERIFY_INFO;
typedef struct tagNET_OUT_GET_UPGRADE_VERIFY_CURRENT_DATA
{
    DWORD dwSize;                  
    NET_VERIFY_INFO stuVerifyInfo; 
} NET_OUT_GET_UPGRADE_VERIFY_CURRENT_DATA;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetUpgradeVerifyCurrentData(LLONG lLoginID, const NET_IN_GET_UPGRADE_VERIFY_CURRENT_DATA* pInParam, NET_OUT_GET_UPGRADE_VERIFY_CURRENT_DATA* pOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_REGISTER_STATUS
{
    DWORD dwSize; 
} NET_IN_GET_REGISTER_STATUS;
typedef struct tagNET_OUT_GET_REGISTER_STATUS
{
    DWORD dwSize;       
    BOOL bIsRegistered; 
} NET_OUT_GET_REGISTER_STATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetRegisterStatus(LLONG lLoginID, const NET_IN_GET_REGISTER_STATUS* pstuInParam, NET_OUT_GET_REGISTER_STATUS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_PARTICIPATING_CONFERENCE
{
    DWORD dwSize; 
} NET_IN_GET_PARTICIPATING_CONFERENCE;
typedef struct tagNET_CONFERENCE_INFO
{
    BOOL bIsCloseMicDefault; 
    char szID[16];           
    char szName[128];        
    char szPassword[32];     
    NET_TIME stuStartTime;   
    NET_TIME stuEndTime;     
    char szCreatorID[16];    
    char szCreatorName[128]; 
    char szChairmanID[16];   
    BOOL bIsAutoLayout;      
    UINT nBandwidth;         
    char szResvered[512];    
} NET_CONFERENCE_INFO;
typedef struct tagNET_OUT_GET_PARTICIPATING_CONFERENCE
{
    DWORD dwSize;                          
    NET_CONFERENCE_INFO stuConferenceInfo; 
} NET_OUT_GET_PARTICIPATING_CONFERENCE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetParticipatingConference(LLONG lLoginID, const NET_IN_GET_PARTICIPATING_CONFERENCE* pstuInParam, NET_OUT_GET_PARTICIPATING_CONFERENCE* pstuOutParam, int nWaitTime);
typedef enum tagEM_SUBLINK_TYPE
{
    EM_SUBLINK_TYPE_PASSIVE, 
    EM_SUBLINK_TYPE_PORT,    
} EM_SUBLINK_TYPE;
typedef enum tagEM_SUBLINK_MODE
{
    EM_SUBLINK_MODE_NORMAL = 0,   
    EM_SUBLINK_MODE_LOWPOWER = 1, 
} EM_SUBLINK_MODE;
typedef struct tagNET_LOCAL_SERVER_NET_INFO
{
    char szLocalIp[64];   
    UINT nLocalPort;      
    char szReserved[516]; 
} NET_LOCAL_SERVER_NET_INFO;
typedef struct tagNET_IN_TRANSFER_SUBLINK_INFO
{
    DWORD dwSize;                                 
    EM_SUBLINK_TYPE emLinkType;                   
    char szBSID[64];                              
    NET_LOCAL_SERVER_NET_INFO stuLoaclServerInfo; 
    EM_SUBLINK_MODE emLinkMode;                   
} NET_IN_TRANSFER_SUBLINK_INFO;
typedef enum tagEM_TRANSFER_SUBCONNECT_ERROR
{
    EM_TRANSFER_SUBCONNECT_UNKNWON, 
    EM_TRANSFER_SUBCONNECT_EXCEED,  
} EM_TRANSFER_SUBCONNECT_ERROR;
typedef struct tagNET_OUT_TRANSFER_SUBLINK_INFO
{
    DWORD dwSize; 
} NET_OUT_TRANSFER_SUBLINK_INFO;
typedef struct tagNET_DEV_NETWORK_INFO
{
    char szDevIP[64];     
    UINT nDevPort;        
    char szReserved[516]; 
} NET_DEV_NETWORK_INFO;
typedef struct tagNET_IN_CREAT_SUB_BUSINESS_MDL_INFO
{
    DWORD dwSize;                       
    EM_SUBLINK_TYPE emLinkType;         
    char szBSID[64];                    
    NET_DEV_NETWORK_INFO stuDevNetInfo; 
    EM_SUBLINK_MODE emLinkMode;         
} NET_IN_CREAT_SUB_BUSINESS_MDL_INFO;
typedef struct tagNET_OUT_CREAT_SUB_BUSINESS_MDL_INFO
{
    DWORD dwSize; 
} NET_OUT_CREAT_SUB_BUSINESS_MDL_INFO;
typedef struct tagNET_DOWNLOAD_MEDIA_FILE_CALLBACK_INFO
{
    INT64 nTotalSize;      
    INT64 nDownLoadSize;   
    UINT nErrCode;         
    UINT nBufferSize;      
    char* pDataBuffer;     
    LDWORD dwUserData;     
    char szReserved[1024]; 
} NET_DOWNLOAD_MEDIA_FILE_CALLBACK_INFO;
typedef struct tagNET_SUBBIZ_DISCONNECT_CALLBACK
{
    NET_DEV_NETWORK_INFO stuDevNetInfo; 
    LDWORD dwUserData;                  
    char szReserved[1024];              
} NET_SUBBIZ_DISCONNECT_CALLBACK;
typedef void(CALLBACK* fSubBizDisConnectCallBack)(LLONG lSubBizHandle, LLONG lOperateHandle, NET_SUBBIZ_DISCONNECT_CALLBACK* pstDisConnectInfo);
typedef int(CALLBACK* fDownLoadMediaFileCallBack)(LLONG lDownHandle, NET_DOWNLOAD_MEDIA_FILE_CALLBACK_INFO* pstDwonloadCallBackInfo);
typedef struct tagNET_IN_START_DOWNLOAD_MEDIA_FILE
{
    DWORD dwSize;                                   
    char szReserved[4];                             
    fDownLoadMediaFileCallBack cbDownLoadCallBack;  
    fSubBizDisConnectCallBack cbDisConnectCallBack; 
    LDWORD dwUserData;                              
} NET_IN_START_DOWNLOAD_MEDIA_FILE;
typedef struct tagNET_OUT_START_DOWNLOAD_MEDIA_FILE
{
    DWORD dwSize; 
} NET_OUT_START_DOWNLOAD_MEDIA_FILE;
typedef enum tagEM_RECORDFILE_TYPE
{
    EM_RECORDFILE_TYPE_NORMAL,      
    EM_RECORDFILE_TYPE_ALARM,       
    EM_RECORDFILE_TYPE_MOVE_DETECT, 
    EM_RECORDFILE_TYPE_CARD,        
    EM_RECORDFILE_TYPE_PIC,         
    EM_RECORDFILE_TYPE_AUDIO,       
} EM_RECORDFILE_TYPE;
typedef struct tagNET_IN_DO_DOWNLOAD_MEDIA_FILE
{
    DWORD dwSize;                    
    int nChannelID;                  
    EM_RECORDFILE_TYPE emRecordType; 
    char szFilePath[256];            
    UINT nOffLength;                 
    UINT nFileLength;                
} NET_IN_DO_DOWNLOAD_MEDIA_FILE;
typedef struct tagNET_OUT_DO_DOWNLOAD_MEDIA_FILE
{
    DWORD dwSize; 
} NET_OUT_DO_DOWNLOAD_MEDIA_FILE;
typedef enum tagEM_SUBLINK_STATE
{
    EM_SUBLINK_STATE_UNKNWON,    
    EM_SUBLINK_STATE_CONNECT,    
    EM_SUBLINK_STATE_DISCONNECT, 
    EM_SUBLINK_STATE_BSID_ERROR, 
} EM_SUBLINK_STATE;
typedef struct tagNET_SUBLINK_SERVER_CALLBACK
{
    EM_SUBLINK_STATE emSubLinkState;    
    NET_DEV_NETWORK_INFO stuDevNetInfo; 
    LDWORD dwUserData;                  
} NET_SUBLINK_SERVER_CALLBACK;
typedef void(CALLBACK* fSubLinkServiceCallBack)(LLONG lListenServer, LLONG lSubBizHandle, NET_SUBLINK_SERVER_CALLBACK* pstSubLinkCallBack);
typedef struct tagNET_IN_START_SUBLINK_LISTEN_SERVER
{
    DWORD dwSize;                                     
    NET_LOCAL_SERVER_NET_INFO stuLoaclServerInfo;     
    fSubLinkServiceCallBack cbSubLinkServiceCallBack; 
    LDWORD dwUserData;                                
} NET_IN_START_SUBLINK_LISTEN_SERVER;
typedef struct tagNET_OUT_START_SUBLINK_LISTEN_SERVER
{
    DWORD dwSize; 
} NET_OUT_START_SUBLINK_LISTEN_SERVER;
typedef struct tagNET_IN_GET_SUBBIZ_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_SUBBIZ_CAPS;
typedef struct tagNET_OUT_GET_SUBBIZ_CAPS
{
    DWORD dwSize;          
    int nBusinessDivision; 
} NET_OUT_GET_SUBBIZ_CAPS;
typedef struct tagNET_IN_SET_TRANSMITTUNNEL_PARAM
{
    DWORD dwSize;       
    char szReserved[4]; 
    char szLoaclIP[64]; 
    UINT nPort[2];      
} NET_IN_SET_TRANSMITTUNNEL_PARAM;
typedef struct tagNET_OUT_SET_TRANSMITTUNNEL_PARAM
{
    DWORD dwSize; 
} NET_OUT_SET_TRANSMITTUNNEL_PARAM;
typedef enum tagEM_TRANSMIT_DISCONNECT_REASON
{
    EM_TRANSMIT_DISCONNECT_REASON_UNKNOWN,        
    EM_TRANSMIT_DISCONNECT_REASON_TIMEOUT,        
    EM_TRANSMIT_DISCONNECT_REASON_SERVICE_CHANGE, 
} EM_TRANSMIT_DISCONNECT_REASON;
typedef struct tagNET_TRANSMIT_DISCONNECT_CALLBACK
{
    NET_DEV_NETWORK_INFO stuDevNetInfo;        
    LDWORD dwUserData;                         
    EM_TRANSMIT_DISCONNECT_REASON emDisReason; 
    char szReserved[1020];                     
} NET_TRANSMIT_DISCONNECT_CALLBACK;
typedef void(CALLBACK* fTransmitDisConnectCallBack)(LLONG lSubBizHandle, LLONG lOperateHandle, NET_TRANSMIT_DISCONNECT_CALLBACK* pstDisConnectInfo);
typedef enum tagEM_TRANSMIT_PROXY_TYPE
{
    EM_TRANSMIT_PROXY_TYPE_WEB = 1, 
    EM_TRANSMIT_PROXY_TYPE_GENERAL, 
} EM_TRANSMIT_PROXY_TYPE;
typedef enum tagEM_TRANSMIT_PROXY_MODE
{
    EM_TRANSMIT_PROXY_MODE_LOCAL = 1, 
    EM_TRANSMIT_PROXY_MODE_CASCADE,   
} EM_TRANSMIT_PROXY_MODE;
typedef struct tagNET_IN_CREATE_TRANSMIT_TUNNEL
{
    DWORD dwSize;                                     
    EM_TRANSMIT_PROXY_TYPE emProxyType;               
    EM_TRANSMIT_PROXY_MODE emProxyMode;               
    int nPort;                                        
    int nChannel;                                     
    char szReserved[4];                               
    fTransmitDisConnectCallBack cbDisConnectCallBack; 
    fSubBizDisConnectCallBack cbDisConnectCallBackEx; 
    LDWORD dwUserData;                                
} NET_IN_CREATE_TRANSMIT_TUNNEL;
typedef struct tagNET_IN_REFUSE_SLEEP_INFO
{
    DWORD dwSize; 
} NET_IN_REFUSE_SLEEP_INFO;
typedef struct tagNET_OUT_REFUSE_SLEEP_INFO
{
    DWORD dwSize; 
} NET_OUT_REFUSE_SLEEP_INFO;
typedef struct tagNET_LOW_POWER_KEEPALIVE_CALLBACK_INFO
{
    BOOL bKeepAlive;       
    LDWORD dwUserData;     
    char szReserved[1024]; 
} NET_LOW_POWER_KEEPALIVE_CALLBACK_INFO;
typedef void(CALLBACK* fLowPowerKeepAliveCallBack)(LLONG lLowPowerHandle, NET_LOW_POWER_KEEPALIVE_CALLBACK_INFO* pstLowPowerKeepAliveCallBackInfo);
typedef struct tagNET_IN_CREATE_LOW_POWER_CHANNEL
{
    DWORD dwSize;                                           
    fSubBizDisConnectCallBack cbDisConnectCallBack;         
    LDWORD dwUserData;                                      
    fLowPowerKeepAliveCallBack cbLowPowerKeepAliveCallBack; 
} NET_IN_CREATE_LOW_POWER_CHANNEL;
typedef struct tagNET_OUT_CREATE_LOW_POWER_CHANNEL
{
    DWORD dwSize; 
} NET_OUT_CREATE_LOW_POWER_CHANNEL;
typedef struct tagNET_IN_WAKE_UP_INFO
{
    DWORD dwSize; 
} NET_IN_WAKE_UP_INFO;
typedef struct tagNET_OUT_WAKE_UP_INFO
{
    DWORD dwSize; 
} NET_OUT_WAKE_UP_INFO;
typedef enum tagEM_WEB_TUNNEL_PROTOCOL
{
    EM_WEB_TUNNEL_PROTOCOL_UNKNOWN, 
    EM_WEB_TUNNEL_PROTOCOL_HTTP,    
    EM_WEB_TUNNEL_PROTOCOL_HTTPS,   
} EM_WEB_TUNNEL_PROTOCOL;
typedef struct tagNET_OUT_CREATE_TRANSMIT_TUNNEL
{
    DWORD dwSize;                         
    int nPort;                            
    EM_WEB_TUNNEL_PROTOCOL emWebProtocol; 
    char szUserName[128];                 
    char szTempToken[128];                
} NET_OUT_CREATE_TRANSMIT_TUNNEL;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetSubBusinessCaps(LLONG lLoginID, const NET_IN_GET_SUBBIZ_CAPS* pInParam, NET_OUT_GET_SUBBIZ_CAPS* pOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TransferSubLinkInfo(LLONG lLoginID, const NET_IN_TRANSFER_SUBLINK_INFO* pInParam, NET_OUT_TRANSFER_SUBLINK_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CreateSubBusinessModule(const NET_IN_CREAT_SUB_BUSINESS_MDL_INFO* pInParam, NET_OUT_CREAT_SUB_BUSINESS_MDL_INFO* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DestroySubBusinessModule(LLONG lSubBizHandle);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartSubLinkListenServer(const NET_IN_START_SUBLINK_LISTEN_SERVER* pInParam, NET_OUT_START_SUBLINK_LISTEN_SERVER* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopSubLinkListenServer(LLONG lListenServer);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartSubBizDownloadMediaFile(LLONG lSubBizHandle, NET_IN_START_DOWNLOAD_MEDIA_FILE* pInParam, NET_OUT_START_DOWNLOAD_MEDIA_FILE* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoSubBizDownloadMediaFile(LLONG lDownHandle, NET_IN_DO_DOWNLOAD_MEDIA_FILE* pInParam, NET_OUT_DO_DOWNLOAD_MEDIA_FILE* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopSubBizDownloadMediaFile(LLONG lDownHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PauseSubBizDownloadMediaFile(LLONG lDownHandle, BOOL bPause);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetTransmitTunnelParam(const NET_IN_SET_TRANSMITTUNNEL_PARAM* pInParam, NET_OUT_SET_TRANSMITTUNNEL_PARAM* pOutParam);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CreateTransmitTunnel(LLONG lSubBizHandle, const NET_IN_CREATE_TRANSMIT_TUNNEL* pInParam, NET_OUT_CREATE_TRANSMIT_TUNNEL* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DestroyTransmitTunnel(LLONG lTransmitHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RefuseLowPowerDevSleep(LLONG lLoginID, const NET_IN_REFUSE_SLEEP_INFO* pInParam, NET_OUT_REFUSE_SLEEP_INFO* pOutParam, int nWaitTime);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_CreateLowPowerChannel(LLONG lSubBizHandle, NET_IN_CREATE_LOW_POWER_CHANNEL* pInParam, NET_OUT_CREATE_LOW_POWER_CHANNEL* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DoWakeUpLowPowerDevcie(LLONG lChannelHandle, NET_IN_WAKE_UP_INFO* pInParam, NET_OUT_WAKE_UP_INFO* pOutParam);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DestoryLowPowerChannel(LLONG lChannelHandle);
typedef struct tagNET_IN_INSTALLMANAGER_GETCUSTOMEVENT_CAPS
{
    DWORD dwSize; 
} NET_IN_INSTALLMANAGER_GETCUSTOMEVENT_CAPS;
typedef struct tagNET_CUSTOMEVENTCAPS_INFO
{
    char szAppName[128];   
    char szClass[128][32]; 
    int nClassNum;         
    BYTE bReserved[2048];  
} NET_CUSTOMEVENTCAPS_INFO;
typedef struct tagNET_OUT_INSTALLMANAGER_GETCUSTOMEVENT_CAPS
{
    DWORD dwSize;                            
    int nListCapNum;                         
    NET_CUSTOMEVENTCAPS_INFO stuListCap[16]; 
} NET_OUT_INSTALLMANAGER_GETCUSTOMEVENT_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_InstallManagerGetCustomEventCaps(LLONG lLoginID, const NET_IN_INSTALLMANAGER_GETCUSTOMEVENT_CAPS* pInParam, NET_OUT_INSTALLMANAGER_GETCUSTOMEVENT_CAPS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_CALC_SCRAPSTEEL_PUNISH
{
    DWORD dwSize;                                          
    int nLayerDetectInfoNum;                               
    NET_SCRAPSTEEL_LAYER_DETECT_INFO* pstuLayerDetectInfo; 
    int nNetWeight;                                        
    char szPlateNum[32];                                   
    int nGrossWeight;                                      
} NET_IN_CALC_SCRAPSTEEL_PUNISH;
typedef struct tagNET_OUT_CALC_SCRAPSTEEL_PUNISH
{
    DWORD dwSize;             
    float fPunishResult;      
    float fPunishResultRatio; 
    float fPunishPrice;       
} NET_OUT_CALC_SCRAPSTEEL_PUNISH;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CalcScrapsteelPunish(LLONG lLoginID, const NET_IN_CALC_SCRAPSTEEL_PUNISH* pstuInParam, NET_OUT_CALC_SCRAPSTEEL_PUNISH* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_CONSUME_RESULT
{
    DWORD dwSize;        
    int nChannelID;      
    char szUserID[32];   
    UINT nRemainAmount;  
    BOOL bConsumeResult; 
    int nErrorCode;      
    UINT nConsumptionAmount;             
    BOOL bExcessConsumption;             
    int nRemainingTimes;                 
    char szTransactionSerialNumber[128]; 
} NET_IN_SET_CONSUME_RESULT;
typedef struct tagNET_OUT_SET_CONSUME_RESULT
{
    DWORD dwSize; 
} NET_OUT_SET_CONSUME_RESULT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetConsumeResult(LLONG lLoginID, const NET_IN_SET_CONSUME_RESULT* pInParam, NET_OUT_SET_CONSUME_RESULT* pOutParam, int nWaitTime);
typedef struct tagNET_IN_TRANSFER_HOSPITAL_HOST_RESULT
{
    DWORD dwSize;            
    int nOperator;           
    BOOL bResult;            
    char szErrorInfo[512];   
    char szSrcHostCode[64];  
    char szDestHostCode[64]; 
} NET_IN_TRANSFER_HOSPITAL_HOST_RESULT;
typedef struct tagNET_OUT_TRANSFER_HOSPITAL_HOST_RESULT
{
    DWORD dwSize; 
} NET_OUT_TRANSFER_HOSPITAL_HOST_RESULT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TransferHospitalHostResult(LLONG lLoginID, const NET_IN_TRANSFER_HOSPITAL_HOST_RESULT* pstuInParam, NET_OUT_TRANSFER_HOSPITAL_HOST_RESULT* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_AI_PICK_UP_WORK_STATE
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_AI_PICK_UP_WORK_STATE;
typedef struct tagNET_OUT_GET_AI_PICK_UP_WORK_STATE
{
    DWORD dwSize; 
    int nState;   
} NET_OUT_GET_AI_PICK_UP_WORK_STATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAiPickUpWorkState(LLONG lLoginID, const NET_IN_GET_AI_PICK_UP_WORK_STATE* pstuInParam, NET_OUT_GET_AI_PICK_UP_WORK_STATE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_AI_PICK_UP_DEVICE_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_AI_PICK_UP_DEVICE_INFO;
typedef struct tagNET_OUT_GET_AI_PICK_UP_DEVICE_INFO
{
    DWORD dwSize;      
    UINT nCPUMainVer;  
    UINT nCPUExtraVer; 
    UINT nCPUAiVer;    
    char szMAC[32];    
    char szIP[32];     
} NET_OUT_GET_AI_PICK_UP_DEVICE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetAiPickUpDeviceInfo(LLONG lLoginID, const NET_IN_GET_AI_PICK_UP_DEVICE_INFO* pstuInParam, NET_OUT_GET_AI_PICK_UP_DEVICE_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_ACCESS_IRIS_INFO
{
    UINT nType;           
    int nPhotoDataLen;    
    char* pszPhotoData;   
    char szPhotoUrl[512]; 
    char* pszEigenValue;  
    int nEigenValueLen;   
    char szResvered[124]; 
} NET_ACCESS_IRIS_INFO;
typedef struct tagNET_ACCESS_IRIS_DATA_INFO
{
    NET_ACCESS_IRIS_INFO stuIrisInfo[2]; 
    int nIrisInfoCount;                  
    char szResvered[124];                
} NET_ACCESS_IRIS_DATA_INFO;
typedef struct tagNET_ACCESS_IRIS_LIST
{
    char szUserID[32];                        
    NET_ACCESS_IRIS_DATA_INFO stuIrisData[5]; 
    int nIrisDataCount;                       
    char szResvered[124];                     
} NET_ACCESS_IRIS_LIST;
typedef struct tagNET_IN_MULTI_INSERT_ACCESS_IRIS
{
    DWORD dwSize;                         
    int nIrisListCount;                   
    NET_ACCESS_IRIS_LIST stuIrisList[10]; 
} NET_IN_MULTI_INSERT_ACCESS_IRIS;
typedef struct tagNET_OUT_MULTI_INSERT_ACCESS_IRIS
{
    DWORD dwSize;                    
    int nFailCodesCount;             
    NET_EM_FAILCODE emFailCodes[10]; 
} NET_OUT_MULTI_INSERT_ACCESS_IRIS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MultiInsertAccessIris(LLONG lLoginID, const NET_IN_MULTI_INSERT_ACCESS_IRIS* pstuInParam, NET_OUT_MULTI_INSERT_ACCESS_IRIS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOVE_ALL_ACCESS_IRIS
{
    DWORD dwSize; 
} NET_IN_MULTI_REMOVE_ALL_ACCESS_IRIS;
typedef struct tagNET_OUT_REMOVE_ALL_ACCESS_IRIS
{
    DWORD dwSize; 
} NET_OUT_REMOVE_ALL_ACCESS_IRIS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveAllAccessIris(LLONG lLoginID, const NET_IN_MULTI_REMOVE_ALL_ACCESS_IRIS* pstuInParam, NET_OUT_REMOVE_ALL_ACCESS_IRIS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_MULTI_REMOVE_ACCESS_IRIS
{
    DWORD dwSize;            
    int nCount;              
    char szUserList[10][32]; 
} NET_IN_MULTI_REMOVE_ACCESS_IRIS;
typedef struct tagNET_OUT_MULTI_REMOVE_ACCESS_IRIS
{
    DWORD dwSize;                    
    int nFailCodesCount;             
    NET_EM_FAILCODE emFailCodes[10]; 
} NET_OUT_MULTI_REMOVE_ACCESS_IRIS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MultiRemoveAccessIris(LLONG lLoginID, const NET_IN_MULTI_REMOVE_ACCESS_IRIS* pstuInParam, NET_OUT_MULTI_REMOVE_ACCESS_IRIS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_MULTI_UPDATE_ACCESS_IRIS
{
    DWORD dwSize;                         
    int nIrisListCount;                   
    NET_ACCESS_IRIS_LIST stuIrisList[10]; 
} NET_IN_MULTI_UPDATE_ACCESS_IRIS;
typedef struct tagNET_OUT_MULTI_UPDATE_ACCESS_IRIS
{
    DWORD dwSize;                    
    int nFailCodesCount;             
    NET_EM_FAILCODE emFailCodes[10]; 
} NET_OUT_MULTI_UPDATE_ACCESS_IRIS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MultiUpdateAccessIris(LLONG lLoginID, const NET_IN_MULTI_UPDATE_ACCESS_IRIS* pstuInParam, NET_OUT_MULTI_UPDATE_ACCESS_IRIS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_HYGROTHERMOGRAPH_CONFIG
{
    DWORD dwSize;             
    int nTemperatureRange[2]; 
    int nHumidityRange[2];    
    int nChannel;             
} NET_IN_SET_HYGROTHERMOGRAPH_CONFIG;
typedef struct tagNET_OUT_SET_HYGROTHERMOGRAPH_CONFIG
{
    DWORD dwSize; 
} NET_OUT_SET_HYGROTHERMOGRAPH_CONFIG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetHygrothermographConfig(LLONG lLoginID, const NET_IN_SET_HYGROTHERMOGRAPH_CONFIG* pstuInParam, NET_OUT_SET_HYGROTHERMOGRAPH_CONFIG* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_POWER_SWITCHER_CONFIG
{
    DWORD dwSize;         
    int nCurrentRange[2]; 
    int nVoltageRange[2]; 
    int nChannel;         
} NET_IN_SET_POWER_SWITCHER_CONFIG;
typedef struct tagNET_OUT_SET_POWER_SWITCHER_CONFIG
{
    DWORD dwSize; 
} NET_OUT_SET_POWER_SWITCHER_CONFIG;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPowerSwitcherConfig(LLONG lLoginID, const NET_IN_SET_POWER_SWITCHER_CONFIG* pstuInParam, NET_OUT_SET_POWER_SWITCHER_CONFIG* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_COLLECT_DEVICE_BODY_INFO
{
    DWORD dwSize;          
    int nSlotBodyNum;      
    int nSlotBodyIndex[4]; 
} NET_IN_GET_COLLECT_DEVICE_BODY_INFO;
typedef struct tagNET_COLLECT_DEVICE_BODY_INFO
{
    BOOL bExist;          
    UINT nSlotNum;        
    char szResvered[512]; 
} NET_COLLECT_DEVICE_BODY_INFO;
typedef struct tagNET_OUT_GET_COLLECT_DEVICE_BODY_INFO
{
    DWORD dwSize;                                
    int nBodyCount;                              
    NET_COLLECT_DEVICE_BODY_INFO stuBodyInfo[4]; 
} NET_OUT_GET_COLLECT_DEVICE_BODY_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCollectDeviceBodyInfo(LLONG lLoginID, const NET_IN_GET_COLLECT_DEVICE_BODY_INFO* pstuInParam, NET_OUT_GET_COLLECT_DEVICE_BODY_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_COLLECT_DEVICE_SLOT_ID_INFO
{
    int nSlotBodyIndex;   
    int nSlotIndex;       
    char szResvered[128]; 
} NET_COLLECT_DEVICE_SLOT_ID_INFO;
typedef struct tagNET_IN_GET_COLLECT_DEVICE_INFO
{
    DWORD dwSize;                                 
    int nSlotBodyNum;                             
    NET_COLLECT_DEVICE_SLOT_ID_INFO stuSlotID[8]; 
} NET_IN_GET_COLLECT_DEVICE_INFO;
typedef struct tagNET_COLLOCT_FILE_INFO
{
    UINT nFileTotal;           
    UINT nFileOkCounts;        
    UINT nFileFailCounts;      
    UINT nFileTotalLength;     
    UINT nFileOkTotalLength;   
    UINT nFileFailTotalLength; 
    char szResvered[128];      
} NET_COLLOCT_FILE_INFO;
typedef struct tagNET_COLLECT_DEVICE_SLOT_INFO
{
    NET_COLLECT_DEVICE_SLOT_ID_INFO stuSlotID; 
    int nState;                                
    BOOL bPriorityCollectEnable;               
    UINT nCollectBindwith;                     
    UINT nLock;                                
    char szSerial[32];                         
    char szName[64];                           
    int nBattery;                              
    UINT nLoginTryCount;                       
    UINT nLoginLockLeftSeconds;                
    UINT nProcess;                             
    NET_COLLOCT_FILE_INFO stuVideoFileInfo;    
    NET_COLLOCT_FILE_INFO stuAudioFileInfo;    
    NET_COLLOCT_FILE_INFO stuPicFileInfo;      
    char szResvered[256];                      
} NET_COLLECT_DEVICE_SLOT_INFO;
typedef struct tagNET_OUT_GET_COLLECT_DEVICE_INFO
{
    DWORD dwSize;                                
    int nSlotInfoCount;                          
    NET_COLLECT_DEVICE_SLOT_INFO stuSlotInfo[8]; 
} NET_OUT_GET_COLLECT_DEVICE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCollectDeviceInfo(LLONG lLoginID, const NET_IN_GET_COLLECT_DEVICE_INFO* pstuInParam, NET_OUT_GET_COLLECT_DEVICE_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_COLLECT_DEVICE_MANAGER_NOTIFY_INFO
{
    NET_COLLECT_DEVICE_SLOT_INFO stuSlotInfo; 
    char szResvered[1024];                    
} NET_COLLECT_DEVICE_MANAGER_NOTIFY_INFO;
typedef void(CALLBACK* fNotifyCollectDeviceManager)(LLONG lAttachHandle, NET_COLLECT_DEVICE_MANAGER_NOTIFY_INFO* pstuCollectDeviceInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_COLLECT_DEVICE_MANAGER
{
    DWORD dwSize;                         
    fNotifyCollectDeviceManager cbNotify; 
    LDWORD dwUser;                        
} NET_IN_ATTACH_COLLECT_DEVICE_MANAGER;
typedef struct tagNET_OUT_ATTACH_COLLECT_DEVICE_MANAGER
{
    DWORD dwSize; 
} NET_OUT_ATTACH_COLLECT_DEVICE_MANAGER;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachCollectDeviceManager(LLONG lLoginID, NET_IN_ATTACH_COLLECT_DEVICE_MANAGER* pstuInParam, NET_OUT_ATTACH_COLLECT_DEVICE_MANAGER* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachCollectDeviceManager(LLONG lAttachHandle);
typedef struct tagNET_IN_CHOOSE_REMOTE_UPGRADER_CHIP
{
    DWORD dwSize;            
    int nChannel;            
    EM_CHIP_TYPE emChipType; 
} NET_IN_CHOOSE_REMOTE_UPGRADER_CHIP;
typedef struct tagNET_OUT_CHOOSE_REMOTE_UPGRADER_CHIP
{
    DWORD dwSize; 
} NET_OUT_CHOOSE_REMOTE_UPGRADER_CHIP;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ChooseRemoteUpgraderChip(LLONG lLoginID, const NET_IN_CHOOSE_REMOTE_UPGRADER_CHIP* pstuInParam, NET_OUT_CHOOSE_REMOTE_UPGRADER_CHIP* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DEV_STORAGE_SMART_VALUE
{
    DWORD dwSize;    
    char szName[64]; 
} NET_IN_GET_DEV_STORAGE_SMART_VALUE;
typedef struct tagNET_SMART_VALUE_INFO
{
    UINT nID;             
    char szName[32];      
    UINT nCurrent;        
    UINT nWorst;          
    UINT nThreshold;      
    char szRaw[32];       
    int nPredict;         
    int nSync;            
    char szResvered[256]; 
} NET_SMART_VALUE_INFO;
typedef struct tagNET_OUT_GET_DEV_STORAGE_SMART_VALUE
{
    DWORD dwSize;                           
    int nCount;                             
    NET_SMART_VALUE_INFO stuValuesInfo[64]; 
} NET_OUT_GET_DEV_STORAGE_SMART_VALUE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevStorageSmartValue(LLONG lLoginID, const NET_IN_GET_DEV_STORAGE_SMART_VALUE* pstuInParam, NET_OUT_GET_DEV_STORAGE_SMART_VALUE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DEVICE_ETH_BAND_INFO
{
    DWORD dwSize; 
} NET_IN_GET_DEVICE_ETH_BAND_INFO;
typedef struct tagNET_BAND_SPEED_INFO
{
    char szEthName[16];        
    double dbReceivedBytes;    
    double dbTransmittedBytes; 
    char szResvered[512];      
} NET_BAND_SPEED_INFO;
typedef struct tagNET_OUT_GET_DEVICE_ETH_BAND_INFO
{
    DWORD dwSize;                             
    int nCount;                               
    NET_BAND_SPEED_INFO stuBandSpeedInfo[10]; 
} NET_OUT_GET_DEVICE_ETH_BAND_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDeviceEthBandInfo(LLONG lLoginID, const NET_IN_GET_DEVICE_ETH_BAND_INFO* pstuInParam, NET_OUT_GET_DEVICE_ETH_BAND_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_METAL_DETECT_NOTIFY_INFO
{
    UINT nMetalIntensity;         
    UINT nSignalPhaseDiff;        
    UINT nDoorRegion;             
    UINT nAlarmPositonNum;        
    UINT nAlarmPositon[128];      
    UINT nTurnOffMetalDetect;     
    UINT nWriteToFlash;           
    UINT nMetalRelativeIntensity; 
    char szResvered[1024];        
} NET_METAL_DETECT_NOTIFY_INFO;
typedef void(CALLBACK* fNotifyMetalDetectInfoManager)(LLONG lAttachHandle, NET_METAL_DETECT_NOTIFY_INFO* pstuMetalDetectInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_METAL_DETECT_INFO
{
    DWORD dwSize;                           
    fNotifyMetalDetectInfoManager cbNotify; 
    LDWORD dwUser;                          
} NET_IN_ATTACH_METAL_DETECT_INFO;
typedef struct tagNET_OUT_ATTACH_METAL_DETECT_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_METAL_DETECT_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachMetalDetectInfo(LLONG lLoginID, NET_IN_ATTACH_METAL_DETECT_INFO* pstuInParam, NET_OUT_ATTACH_METAL_DETECT_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachMetalDetectInfo(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_METAL_DETECT_INFO
{
    DWORD dwSize; 
} NET_IN_GET_METAL_DETECT_INFO;
typedef struct tagNET_OUT_GET_METAL_DETECT_INFO
{
    DWORD dwSize;                 
    UINT nMetalIntensity;         
    UINT nSignalPhaseDiff;        
    UINT nDoorRegion;             
    UINT nAlarmPositonNum;        
    UINT nAlarmPositon[128];      
    UINT nTurnOffMetalDetect;     
    UINT nWriteToFlash;           
    UINT nMetalRelativeIntensity; 
} NET_OUT_GET_METAL_DETECT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMetalDetectInfo(LLONG lLoginID, const NET_IN_GET_METAL_DETECT_INFO* pstuInParam, NET_OUT_GET_METAL_DETECT_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_FACE_FLOW_STAT_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_FACE_FLOW_STAT_CAPS;
typedef struct tagNET_OUT_GET_FACE_FLOW_STAT_CAPS
{
    DWORD dwSize;  
    UINT nSupport; 
} NET_OUT_GET_FACE_FLOW_STAT_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFaceFlowStatCaps(LLONG lLoginID, const NET_IN_GET_FACE_FLOW_STAT_CAPS* pstuInParam, NET_OUT_GET_FACE_FLOW_STAT_CAPS* pstuOutParam, int nWaitTime);
typedef struct tagNET_FACE_FLOW_STAT_PERSON
{
    EM_SEX_TYPE emSex;     
    UINT nAge[2];          
    char szResvered[1024]; 
} NET_FACE_FLOW_STAT_PERSON;
typedef struct tagNET_IN_START_FIND_FACE_FLOW_STAT
{
    DWORD dwSize;                        
    NET_TIME stuStartTime;               
    NET_TIME stuEndTime;                 
    UINT nGranularity;                   
    NET_FACE_FLOW_STAT_PERSON stuPerson; 
    int nChannel;                        
    int nPresetIDCount;                  
    int nPresetID[512];                  
} NET_IN_START_FIND_FACE_FLOW_STAT;
typedef struct tagNET_OUT_START_FIND_FACE_FLOW_STAT
{
    DWORD dwSize;     
    UINT nToken;      
    UINT nTotalCount; 
} NET_OUT_START_FIND_FACE_FLOW_STAT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartFindFaceFlowStat(LLONG lLoginID, NET_IN_START_FIND_FACE_FLOW_STAT* pstuInParam, NET_OUT_START_FIND_FACE_FLOW_STAT* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_DO_FIND_FACE_FLOW_STAT
{
    DWORD dwSize;      
    UINT nToken;       
    UINT nBeginNumber; 
    UINT nCount;       
} NET_IN_DO_FIND_FACE_FLOW_STAT;
typedef struct tagNET_FACE_FLOW_STAT_INFO
{
    UINT nChannel;           
    int nPresetIDCount;      
    int nPresetID[512];      
    NET_TIME stuStartTime;   
    NET_TIME stuEndTime;     
    UINT nRepeatCount;       
    UINT nFaceDetectCount;   
    UINT nFaceAnalysisCount; 
    char szResvered[252];    
} NET_FACE_FLOW_STAT_INFO;
typedef struct tagNET_OUT_DO_FIND_FACE_FLOW_STAT
{
    DWORD dwSize;                        
    UINT nFound;                         
    NET_FACE_FLOW_STAT_INFO stuInfo[64]; 
} NET_OUT_DO_FIND_FACE_FLOW_STAT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_DoFindFaceFlowStat(LLONG lLoginID, NET_IN_DO_FIND_FACE_FLOW_STAT* pstuInParam, NET_OUT_DO_FIND_FACE_FLOW_STAT* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_STOP_FIND_FACE_FLOW_STAT
{
    DWORD dwSize; 
    UINT nToken;  
} NET_IN_STOP_FIND_FACE_FLOW_STAT;
typedef struct tagNET_OUT_STOP_FIND_FACE_FLOW_STAT
{
    DWORD dwSize; 
} NET_OUT_STOP_FIND_FACE_FLOW_STAT;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StopFindFaceFlowStat(LLONG lLoginID, NET_IN_STOP_FIND_FACE_FLOW_STAT* pstuInParam, NET_OUT_STOP_FIND_FACE_FLOW_STAT* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_PRIVACY_MASKING
{
    DWORD dwSize; 
    int nChannel; 
    int nOffset;  
    int nLimit;   
} NET_IN_GET_PRIVACY_MASKING;
typedef struct tagNET_PRIVACY_MASKING_INFO
{
    int nIndex;                          
    int nEnable;                         
    char szName[64];                     
    EM_PRIVACY_MASKING_TYPE emShapeType; 
    DH_RECT stuRect;                     
    NET_UINT_POINT stuPolygon[64];       
    int nPointNum;                       
    DH_COLOR_RGBA stuColor;              
    int nMosaic;                         
    int nShieldZoom;                     
    char szResvered[512];                
} NET_PRIVACY_MASKING_INFO;
typedef struct tagNET_OUT_GET_PRIVACY_MASKING
{
    DWORD dwSize;                                       
    int nTotal;                                         
    NET_PRIVACY_MASKING_INFO stuPrivacyMaskingInfo[24]; 
    int nPrivacyMasking;                                
} NET_OUT_GET_PRIVACY_MASKING;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPrivacyMasking(LLONG lLoginID, const NET_IN_GET_PRIVACY_MASKING* pstuInParam, NET_OUT_GET_PRIVACY_MASKING* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_PRIVACY_MASKING
{
    DWORD dwSize;                                   
    int nChannel;                                   
    NET_PRIVACY_MASKING_INFO stuPrivacyMaskingInfo; 
} NET_IN_SET_PRIVACY_MASKING;
typedef struct tagNET_OUT_SET_PRIVACY_MASKING
{
    DWORD dwSize; 
} NET_OUT_SET_PRIVACY_MASKING;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPrivacyMasking(LLONG lLoginID, const NET_IN_SET_PRIVACY_MASKING* pstuInParam, NET_OUT_SET_PRIVACY_MASKING* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_PRIVACY_MASKING_ENABLE
{
    DWORD dwSize; 
    int nChannel; 
    BOOL bEnable; 
} NET_IN_SET_PRIVACY_MASKING_ENABLE;
typedef struct tagNET_OUT_SET_PRIVACY_MASKING_ENABLE
{
    DWORD dwSize; 
} NET_OUT_SET_PRIVACY_MASKING_ENABLE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPrivacyMaskingEnable(LLONG lLoginID, const NET_IN_SET_PRIVACY_MASKING_ENABLE* pstuInParam, NET_OUT_SET_PRIVACY_MASKING_ENABLE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_PRIVACY_MASKING_ENABLE
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_PRIVACY_MASKING_ENABLE;
typedef struct tagNET_OUT_GET_PRIVACY_MASKING_ENABLE
{
    DWORD dwSize; 
    BOOL bEnable; 
} NET_OUT_GET_PRIVACY_MASKING_ENABLE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPrivacyMaskingEnable(LLONG lLoginID, const NET_IN_GET_PRIVACY_MASKING_ENABLE* pstuInParam, NET_OUT_GET_PRIVACY_MASKING_ENABLE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GOTO_PRIVACY_MASKING
{
    DWORD dwSize; 
    int nChannel; 
    int nIndex;   
} NET_IN_GOTO_PRIVACY_MASKING;
typedef struct tagNET_OUT_GOTO_PRIVACY_MASKING
{
    DWORD dwSize; 
} NET_OUT_GOTO_PRIVACY_MASKING;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GotoPrivacyMasking(LLONG lLoginID, const NET_IN_GOTO_PRIVACY_MASKING* pstuInParam, NET_OUT_GOTO_PRIVACY_MASKING* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_DELETE_PRIVACY_MASKING
{
    DWORD dwSize; 
    int nChannel; 
    int nIndex;   
} NET_IN_DELETE_PRIVACY_MASKING;
typedef struct tagNET_OUT_DELETE_PRIVACY_MASKING
{
    DWORD dwSize; 
} NET_OUT_DELETE_PRIVACY_MASKING;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DeletePrivacyMasking(LLONG lLoginID, const NET_IN_DELETE_PRIVACY_MASKING* pstuInParam, NET_OUT_DELETE_PRIVACY_MASKING* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_CLEAR_PRIVACY_MASKING
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_CLEAR_PRIVACY_MASKING;
typedef struct tagNET_OUT_CLEAR_PRIVACY_MASKING
{
    DWORD dwSize; 
} NET_OUT_CLEAR_PRIVACY_MASKING;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ClearPrivacyMasking(LLONG lLoginID, const NET_IN_CLEAR_PRIVACY_MASKING* pstuInParam, NET_OUT_CLEAR_PRIVACY_MASKING* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SET_FILE_ALIAS_INFO
{
    DWORD dwSize;                              
    int nChannel;                              
    NET_TIME stuStartTime;                     
    NET_TIME stuEndTime;                       
    int nVideoStream;                          
    int nFlagCount;                            
    EM_RECORD_SNAP_FLAG_TYPE emFlagsList[128]; 
    int nMediaType;                            
    char szRecordAlias[256];                   
} NET_IN_SET_FILE_ALIAS_INFO;
typedef struct tagNET_OUT_SET_FILE_ALIAS_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_FILE_ALIAS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetFileAlias(LLONG lLoginID, const NET_IN_SET_FILE_ALIAS_INFO* pstuInParam, NET_OUT_SET_FILE_ALIAS_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_SEARCH_FILE_BYALIAS_INFO
{
    DWORD dwSize;            
    char szRecordAlias[256]; 
    UINT nMaxCount;          
} NET_IN_SEARCH_FILE_BYALIAS_INFO;
typedef struct tagNET_RECORS_BYALIAS_INFO
{
    int nChannel;                              
    int nVideoStream;                          
    NET_TIME stuStartTime;                     
    NET_TIME stuEndTime;                       
    int nFlagCount;                            
    EM_RECORD_SNAP_FLAG_TYPE emFlagsList[128]; 
    UINT nDriveNo;                             
    UINT nCluster;                             
    int nMediaType;                            
    int nPartition;                            
    UINT nLength;                              
    UINT nCutLength;                           
    char szFilePath[260];                      
    char szResvered[1024];                     
} NET_RECORS_BYALIAS_INFO;
typedef struct tagNET_OUT_SEARCH_FILE_BYALIAS_INFO
{
    DWORD dwSize;                            
    char szReserved1[4];                     
    UINT nMaxCount;                          
    UINT nRetCount;                          
    NET_RECORS_BYALIAS_INFO* pstuRecordInfo; 
} NET_OUT_SEARCH_FILE_BYALIAS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SearchFileByAlias(LLONG lLoginID, const NET_IN_SEARCH_FILE_BYALIAS_INFO* pstuInParam, NET_OUT_SEARCH_FILE_BYALIAS_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_FAN_SPEED_EX
{
    DWORD dwSize; 
    int nType;    
} NET_IN_GET_FAN_SPEED_EX;
typedef struct tagNET_OUT_GET_FAN_SPEED_EX
{
    DWORD dwSize;        
    int nCPUCount;       
    int nCPU[16];        
    int nCabinetCount;   
    int nCabinet[16];    
    int nMainboardCount; 
    int nMainboard[16];  
    int nPowerCount;     
    int nPower[16];      
} NET_OUT_GET_FAN_SPEED_EX;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFanSpeedEx(LLONG lLoginID, const NET_IN_GET_FAN_SPEED_EX* pstuInParam, NET_OUT_GET_FAN_SPEED_EX* pstuOutParam, int nWaitTime);
typedef struct tagNET_MODIFY_USER_INFO
{
    char szName[128];     
    char szGroup[8];      
    int nPwdValidPeriod;  
    BOOL bUseGroupEx;     
    char szGroupEx[32];   
    char szResvered[984]; 
} NET_MODIFY_USER_INFO;
typedef struct tagNET_IN_MODIFY_USER_MANAGER_USER
{
    DWORD dwSize;                     
    char szName[128];                 
    NET_MODIFY_USER_INFO stuUserInfo; 
} NET_IN_MODIFY_USER_MANAGER_USER;
typedef struct tagNET_OUT_MODIFY_USER_MANAGER_USER
{
    DWORD dwSize; 
} NET_OUT_MODIFY_USER_MANAGER_USER;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ModifyUserManagerUser(LLONG lLoginID, NET_IN_MODIFY_USER_MANAGER_USER* pstuInParam, NET_OUT_MODIFY_USER_MANAGER_USER* pstuOutParam, int nWaitTime);
typedef struct tagNET_NOTIFY_SOUND_DATA_INFO
{
    DWORD dwSize;         
    UINT nChannel;        
    UINT nSoundVolume;    
    char szSource[32];    
    char szResvered[256]; 
} NET_NOTIFY_SOUND_DATA_INFO;
typedef void(CALLBACK* fNotifySoundData)(LLONG lAttachSoundDataHandle, NET_NOTIFY_SOUND_DATA_INFO* pstuSoundDataInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SOUNDDATA
{
    DWORD dwSize;                        
    fNotifySoundData cbfNotifySoundData; 
    LDWORD dwUser;                       
    int nChannel;                        
    char szSource[32];                   
} NET_IN_ATTACH_SOUNDDATA;
typedef struct tagNET_OUT_ATTACH_SOUNDDATA
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SOUNDDATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSoundData(LLONG lLoginID, const NET_IN_ATTACH_SOUNDDATA* pstInParam, NET_OUT_ATTACH_SOUNDDATA* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSoundData(LLONG lAttachSoundDataHandle);
typedef struct tagNET_IN_SECURITY_EXPORT_DATA_INFO
{
    DWORD dwSize;      
    char szKey[1024];  
    int nfileTypeMask; 
    int nOffset;       
    int nNeedLength;   
} NET_IN_SECURITY_EXPORT_DATA_INFO;
typedef struct tagNET_OUT_SECURITY_EXPORT_DATA_INFO
{
    DWORD dwSize;     
    char* pBufData;   
    int nBufLen;      
    int nBufRet;      
    int nTotalLength; 
    int nPackLength;  
} NET_OUT_SECURITY_EXPORT_DATA_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityExportDataEx(LLONG lLoginID, const NET_IN_SECURITY_EXPORT_DATA_INFO* pstInParam, NET_OUT_SECURITY_EXPORT_DATA_INFO* pstOutParam, int nWaitTime);
typedef enum tagEM_STATUS_TYPE
{
    EM_IMPORT_STATUS_UNKNOWN, 
    EM_IMPORT_STATUS_BEGIN,   
    EM_IMPORT_STATUS_APPEND,  
    EM_IMPORT_STATUS_END,     
} EM_STATUS_TYPE;
typedef struct tagNET_IN_SECURITY_IMPORT_DATA_INFO
{
    DWORD dwSize;            
    char szKey[1024];        
    BOOL bIsOverWrite;       
    EM_STATUS_TYPE emStatus; 
    char* pBufData;          
    int nLength;             
} NET_IN_SECURITY_IMPORT_DATA_INFO;
typedef struct tagNET_OUT_SECURITY_IMPORT_DATA_INFO
{
    DWORD dwSize; 
} NET_OUT_SECURITY_IMPORT_DATA_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityImportDataEx(LLONG lLoginID, const NET_IN_SECURITY_IMPORT_DATA_INFO* pstInParam, NET_OUT_SECURITY_IMPORT_DATA_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SECURITY_PREPARE_EXPORT_DATA_INFO
{
    DWORD dwSize;      
    int nfileTypeMask; 
    char szKey[1024];  
} NET_IN_SECURITY_PREPARE_EXPORT_DATA_INFO;
typedef struct tagNET_OUT_SECURITY_PREPARE_EXPORT_DATA_INFO
{
    DWORD dwSize; 
} NET_OUT_SECURITY_PREPARE_EXPORT_DATA_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityPrepareExportData(LLONG lLoginID, const NET_IN_SECURITY_PREPARE_EXPORT_DATA_INFO* pstInParam, NET_OUT_SECURITY_PREPARE_EXPORT_DATA_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SECURITY_GETCAPS_INFO
{
    DWORD dwSize; 
} NET_IN_SECURITY_GETCAPS_INFO;
typedef struct tagNET_OUT_SECURITY_GETCAPS_INFO
{
    DWORD dwSize;          
    int nTypesRealNum;     
    int nSupportTypes[32]; 
} NET_OUT_SECURITY_GETCAPS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGetCaps(LLONG lLoginID, const NET_IN_SECURITY_GETCAPS_INFO* pstInParam, NET_OUT_SECURITY_GETCAPS_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_SECURITY_GET_TASK_STATUS_INFO
{
    DWORD dwSize; 
    int nType;    
} NET_IN_SECURITY_GET_TASK_STATUS_INFO;
typedef enum tagEM_SECURITY_TASK_TYPE
{
    EM_TYPE_STATUS_UNKNOWN, 
    EM_TYPE_STATUS_NONE,    
    EM_TYPE_STATUS_IMPORT,  
    EM_TYPE_STATUS_EXPORT,  
} EM_SECURITY_TASK_TYPE;
typedef enum tagEM_SECURITY_TASK_STATUS
{
    EM_TASK_STATUS_UNKNOWN,   
    EM_TASK_STATUS_RUNNING,   
    EM_TASK_STATUS_SUCCEEDED, 
    EM_TASK_STATUS_FAILED,    
} EM_SECURITY_TASK_STATUS;
typedef struct tagNET_OUT_SECURITY_GET_TASK_STATUS_INFO
{
    DWORD dwSize;                    
    EM_SECURITY_TASK_TYPE nTaskType; 
    EM_SECURITY_TASK_STATUS nStatus; 
    char szErrorCode[128];           
    int nProgress;                   
} NET_OUT_SECURITY_GET_TASK_STATUS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SecurityGetTaskStatus(LLONG lLoginID, const NET_IN_SECURITY_GET_TASK_STATUS_INFO* pstInParam, NET_OUT_SECURITY_GET_TASK_STATUS_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_ICR_GET_STATE_INFO
{
    DWORD dwSize; 
} NET_IN_ICR_GET_STATE_INFO;
typedef enum tagEM_ICR_STATE_TYPE
{
    EM_ICR_STATE_TYPE_UNKNOWN, 
    EM_ICR_STATE_TYPE_NORMAL,  
    EM_ICR_STATE_TYPE_IR,      
    EM_ICR_STATE_TYPE_CPL,     
} EM_ICR_STATE_TYPE;
typedef struct tagNET_OUT_ICR_GET_STATE_INFO
{
    DWORD dwSize;                 
    int nState;                   
    EM_ICR_STATE_TYPE emICRState; 
} NET_OUT_ICR_GET_STATE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_ICRGetState(LLONG lLoginID, const NET_IN_ICR_GET_STATE_INFO* pstInParam, NET_OUT_ICR_GET_STATE_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOVE_ANALYSE_TASK_BYTYPE
{
    DWORD dwSize;                     
    EM_DATA_SOURCE_TYPE emSourceType; 
} NET_IN_REMOVE_ANALYSE_TASK_BYTYPE;
typedef struct tagNET_OUT_REMOVE_ANALYSE_TASK_BYTYPE
{
    DWORD dwSize; 
} NET_OUT_REMOVE_ANALYSE_TASK_BYTYPE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveAnalyseTaskByType(LLONG lLoginID, const NET_IN_REMOVE_ANALYSE_TASK_BYTYPE* pstuInParam, NET_OUT_REMOVE_ANALYSE_TASK_BYTYPE* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_UNIFIEDINFOCOLLECT_GET_DEVSTATUS
{
    DWORD dwSize; 
} NET_IN_UNIFIEDINFOCOLLECT_GET_DEVSTATUS;
typedef enum tagNET_EM_POWER_TYPE
{
    NET_EM_POWER_TYPE_UNKNOWN = -1,             
    NET_EM_POWER_TYPE_POWERADAPTER,             
    NET_EM_POWER_TYPE_BATTERY,                  
    NET_EM_POWER_TYPE_BATTERY_AND_POWERADAPTER, 
} NET_EM_POWER_TYPE;
typedef struct tagNET_DEVSTATUS_POWER_INFO
{
    UINT nBatteryPercent;          
    NET_EM_POWER_TYPE emPowerType; 
} NET_DEVSTATUS_POWER_INFO;
typedef enum tagNET_EM_ETH_STATE
{
    NET_EM_ETH_UNKNOWN,    
    NET_EM_ETH_CONNECT,    
    NET_EM_ETH_DISCONNECT, 
} NET_EM_ETH_STATE;
typedef enum tagNET_EM_SIM_STATE
{
    NET_EM_SIM_UNKNOWN, 
    NET_EM_SIM_ONLINE,  
    NET_EM_SIM_OFFLINE, 
} NET_EM_SIM_STATE;
typedef struct tagNET_DEVSTATUS_SIM_INFO
{
    NET_EM_SIM_STATE emStatus; 
    BYTE byIndex;              
    BYTE byReserved[31];       
} NET_DEVSTATUS_SIM_INFO;
typedef struct tagNET_DEVSTATUS_NET_INFO
{
    UINT nWifiIntensity;                                       
    UINT nWifiSignal;                                          
    UINT nCellulSignal;                                        
    UINT nCellulIntensity;                                     
    NET_EM_ETH_STATE emEthState;                               
    UINT n3Gflux;                                              
    UINT n3GfluxByTime;                                        
    NET_EM_ETH_STATE emWifiState;                              
    NET_EM_ETH_STATE emCellularstate;                          
    UINT nSimNum;                                              
    NET_DEVSTATUS_SIM_INFO stuSimInfo[DH_GATEWAY_MAX_SIM_NUM]; 
} NET_DEVSTATUS_NET_INFO;
typedef enum tagNET_EM_TAMPER_STATE
{
    NET_EM_TAMPER_UNKNOWN = -1, 
    NET_EM_TAMPER_NOALARM,      
    NET_EM_TAMPER_ALARMING,     
} NET_EM_TAMPER_STATE;
typedef struct tagNET_OUT_UNIFIEDINFOCOLLECT_GET_DEVSTATUS
{
    DWORD dwSize;                          
    NET_DEVSTATUS_POWER_INFO stuPowerInfo; 
    NET_DEVSTATUS_NET_INFO stuNetInfo;     
    char szVersion[DH_COMMON_STRING_32];   
    NET_EM_TAMPER_STATE emTamperState;     
} NET_OUT_UNIFIEDINFOCOLLECT_GET_DEVSTATUS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetUnifiedStatus(LLONG lLoginID, NET_IN_UNIFIEDINFOCOLLECT_GET_DEVSTATUS* pInParam, NET_OUT_UNIFIEDINFOCOLLECT_GET_DEVSTATUS* pOutParam, int nWaitTime);
typedef struct tagNET_IN_MAKE_TOKEN
{
    DWORD dwSize;      
    char szUUID[128];  
    int nKeepLiveTime; 
} NET_IN_MAKE_TOKEN;
typedef struct tagNET_OUT_MAKE_TOKEN
{
    DWORD dwSize; 
    UINT nToken;  
} NET_OUT_MAKE_TOKEN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_MakeToken(LLONG lLoginID, NET_IN_MAKE_TOKEN* pstuInParam, NET_OUT_MAKE_TOKEN* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_NAS_DIRECTORY_GET_INFO
{
    DWORD dwSize;     
    char szName[128]; 
} NET_IN_NAS_DIRECTORY_GET_INFO;
typedef enum tagEM_NAS_STATE_TYPE
{
    EM_NAS_STATE_TYPE_UNKNOWN,    
    EM_NAS_STATE_TYPE_ACTIVE,     
    EM_NAS_STATE_TYPE_LVFAILED,   
    EM_NAS_STATE_TYPE_INACTIVE,   
    EM_NAS_STATE_TYPE_VGFAILED,   
    EM_NAS_STATE_TYPE_NOTSTARTED, 
} EM_NAS_STATE_TYPE;
typedef struct tagNET_OUT_NAS_DIRECTORY_GET_INFO
{
    DWORD dwSize;              
    UINT nFreeSpace;           
    UINT nTotalSpace;          
    EM_NAS_STATE_TYPE emState; 
} NET_OUT_NAS_DIRECTORY_GET_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetNASDirectoryInfo(LLONG lLoginID, const NET_IN_NAS_DIRECTORY_GET_INFO* pstInParam, NET_OUT_NAS_DIRECTORY_GET_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_FILE_INFO_BY_PATH_INFO
{
    DWORD dwSize;     
    char szPath[256]; 
} NET_IN_GET_FILE_INFO_BY_PATH_INFO;
typedef enum tagEM_FILE_UPDATE_STATE
{
    EM_FILE_UPDATE_STATE_UNKNOWN,   
    EM_FILE_UPDATE_STATE_UPLOADING, 
    EM_FILE_UPDATE_STATE_PAUSED,    
    EM_FILE_UPDATE_STATE_SUCCEEDED, 
} EM_FILE_UPDATE_STATE;
typedef struct tagNET_OUT_GET_FILE_INFO_BY_PATH_INFO
{
    DWORD dwSize;                 
    EM_FILE_UPDATE_STATE emState; 
    NET_TIME_EX stuStartTime;     
    NET_TIME_EX stuEndTime;       
    UINT nProgress;               
    UINT nCurrentSlice;           
    TP_U64 nFileLength;           
    int nReason;                  
    char szReserved[4];           
} NET_OUT_GET_FILE_INFO_BY_PATH_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFileManagerExFileInfoByPath(LLONG lLoginID, const NET_IN_GET_FILE_INFO_BY_PATH_INFO* pstInParam, NET_OUT_GET_FILE_INFO_BY_PATH_INFO* pstOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_STORAGE_TANK_INFO
{
    DWORD dwSize; 
} NET_IN_GET_STORAGE_TANK_INFO;
typedef struct tagNET_STORAGE_TANK_INFO
{
    int nSlotNum;          
    char szReserved[2044]; 
} NET_STORAGE_TANK_INFO;
typedef struct tagNET_OUT_GET_STORAGE_TANK_INFO
{
    DWORD dwSize;                          
    int nTankInfoNum;                      
    NET_STORAGE_TANK_INFO stuTankInfo[32]; 
} NET_OUT_GET_STORAGE_TANK_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetStorageTankInfo(LLONG lLoginID, const NET_IN_GET_STORAGE_TANK_INFO* pstuInParam, NET_OUT_GET_STORAGE_TANK_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_ADD_OSD_TEXT_INFO
{
    DWORD dwSize;     
    int nType;        
    int nChannelNum;  
    int nChannel[16]; 
    char szText[256]; 
    UINT nDuration;   
} NET_IN_ADD_OSD_TEXT_INFO;
typedef struct tagNET_OUT_ADD_OSD_TEXT_INFO
{
    DWORD dwSize; 
} NET_OUT_ADD_OSD_TEXT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_AddOSDText(LLONG lLoginID, const NET_IN_ADD_OSD_TEXT_INFO* pstuInParam, NET_OUT_ADD_OSD_TEXT_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_STREAM_DATA_FILE_INFO
{
    char szDestFile[70];      
    char szResvered1[2];      
    char szDestPath[128];     
    char szDestFileName[128]; 
    UINT nIndex;              
    char szResvered[1024];    
} NET_STREAM_DATA_FILE_INFO;
typedef struct tagNET_CB_START_STREAM_DATA_INFO
{
    NET_STREAM_DATA_FILE_INFO stuFileInfo; 
    BOOL bEOF;                             
    UINT nProgress;                        
    char szReserved[2048];                 
} NET_CB_START_STREAM_DATA_INFO;
typedef void(CALLBACK* fStartStreamDataCallBack)(LLONG lAttachHandle, NET_CB_START_STREAM_DATA_INFO* pstuStartStreamData, LDWORD dwUser, BYTE* pBuffer, DWORD dwBufSize);
typedef struct tagNET_IN_ATTACH_START_STREAM_DATA
{
    DWORD dwSize;                               
    fStartStreamDataCallBack cbStartStreamData; 
    LDWORD dwUser;                              
} NET_IN_ATTACH_START_STREAM_DATA;
typedef struct tagNET_OUT_ATTACH_START_STREAM_DATA
{
    DWORD dwSize; 
} NET_OUT_ATTACH_START_STREAM_DATA;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachStartStreamData(LLONG lLoginID, NET_IN_ATTACH_START_STREAM_DATA* pstuInParam, NET_OUT_ATTACH_START_STREAM_DATA* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachStopStreamData(LLONG lAttachHandle);
typedef struct tagNET_IN_GET_DEV_VIDEO_INPUT_COLLECT
{
    DWORD dwSize; 
} NET_IN_GET_DEV_VIDEO_INPUT_COLLECT;
typedef struct tagNET_OUT_GET_DEV_VIDEO_INPUT_COLLECT
{
    DWORD dwSize;   
    UINT nChannels; 
} NET_OUT_GET_DEV_VIDEO_INPUT_COLLECT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDevVideoInputCollect(LLONG lLoginID, NET_IN_GET_DEV_VIDEO_INPUT_COLLECT* pstuInParam, NET_OUT_GET_DEV_VIDEO_INPUT_COLLECT* pstuOutParam, int nWaitTime);
typedef struct tagNET_NOTIFY_HOOK_DATA_INFO
{
    UINT nType;            
    UINT nMessage;         
    UINT nParam1;          
    UINT nParam2;          
    char szReserved[1024]; 
} NET_NOTIFY_HOOK_DATA_INFO;
typedef void(CALLBACK* fNotifyHookData)(LLONG lAttachHookHandle, NET_NOTIFY_HOOK_DATA_INFO* pstuHookDataInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_HOOK
{
    DWORD dwSize;                     
    fNotifyHookData cbNotifyHookData; 
    LDWORD dwUser;                    
} NET_IN_ATTACH_HOOK;
typedef struct tagNET_OUT_ATTACH_HOOK
{
    DWORD dwSize; 
} NET_OUT_ATTACH_HOOK;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachHook(LLONG lLoginID, const NET_IN_ATTACH_HOOK* pstuInParam, NET_OUT_ATTACH_HOOK* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachHook(LLONG lAttachHandle);
typedef struct tagNET_NOTIFY_GYRO_DATA_INFO
{
    double dbAngularSpeedX; 
    double dbAngularSpeedY; 
    double dbAngularSpeedZ; 
    double dbAccelX;        
    double dbAccelY;        
    double dbAccelZ;        
    char szReserved[1024];  
} NET_NOTIFY_GYRO_DATA_INFO;
typedef void(CALLBACK* fNotifyGyroData)(LLONG lAttachGyroHandle, NET_NOTIFY_GYRO_DATA_INFO* pstuGyroDataInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_GYRO
{
    DWORD dwSize;                     
    fNotifyGyroData cbNotifyGyroData; 
    LDWORD dwUser;                    
} NET_IN_ATTACH_GYRO;
typedef struct tagNET_OUT_ATTACH_GYRO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_GYRO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachGyro(LLONG lLoginID, const NET_IN_ATTACH_GYRO* pstuInParam, NET_OUT_ATTACH_GYRO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachGyro(LLONG lAttachHandle);
typedef struct tagNET_IN_SET_ARCHIVE_PLAN
{
    DWORD dwSize;                   
    char szChannelID[64];           
    char szChannelName[64];         
    DH_TSECT stuTimeSection[8][24]; 
    int nVideoStream;               
} NET_IN_SET_ARCHIVE_PLAN;
typedef struct tagNET_OUT_SET_ARCHIVE_PLAN
{
    DWORD dwSize; 
} NET_OUT_SET_ARCHIVE_PLAN;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetArchivePlan(LLONG lLoginID, const NET_IN_SET_ARCHIVE_PLAN* pstuInParam, NET_OUT_SET_ARCHIVE_PLAN* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_REMOVE_ARCHIVE_PLANS
{
    DWORD dwSize;                
    int nChannelIDNum;           
    char szChannelIDs[64][1024]; 
} NET_IN_REMOVE_ARCHIVE_PLANS;
typedef struct tagNET_OUT_REMOVE_ARCHIVE_PLANS
{
    DWORD dwSize; 
} NET_OUT_REMOVE_ARCHIVE_PLANS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RemoveArchivePlans(LLONG lLoginID, const NET_IN_REMOVE_ARCHIVE_PLANS* pstuInParam, NET_OUT_REMOVE_ARCHIVE_PLANS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_ARCHIVE_PLAN_STAT
{
    DWORD dwSize; 
} NET_IN_GET_ARCHIVE_PLAN_STAT;
typedef struct tagNET_OUT_GET_ARCHIVE_PLAN_STAT
{
    DWORD dwSize;         
    UINT nMaxPlanNum;     
    UINT nInUsePlanNum;   
    UINT nRemovedPlanNum; 
} NET_OUT_GET_ARCHIVE_PLAN_STAT;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetArchivePlanStat(LLONG lLoginID, const NET_IN_GET_ARCHIVE_PLAN_STAT* pstuInParam, NET_OUT_GET_ARCHIVE_PLAN_STAT* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_ARCHIVE_PLAN_INFOS
{
    DWORD dwSize;    
    UINT nQueryType; 
} NET_IN_GET_ARCHIVE_PLAN_INFOS;
typedef struct tagNET_ARCHIVE_PLAN_INFOS
{
    char szChannelID[64];           
    char szChannelName[64];         
    DH_TSECT stuTimeSection[8][24]; 
    char szRealRtspURL[256];        
    int nVideoStream;               
    UINT nStatus;                   
    NET_TIME stuLastArchivedTime;   
    NET_TIME stuLastModifiedTime;   
    char szReserved[1024];          
} NET_ARCHIVE_PLAN_INFOS;
typedef struct tagNET_OUT_GET_ARCHIVE_PLAN_INFOS
{
    DWORD dwSize;                                
    int nMaxArchivePlanCount;                    
    NET_ARCHIVE_PLAN_INFOS* pstuArchivePlanInfo; 
    int nRetArchivePlanCount;                    
} NET_OUT_GET_ARCHIVE_PLAN_INFOS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetArchivePlanInfos(LLONG lLoginID, const NET_IN_GET_ARCHIVE_PLAN_INFOS* pstuInParam, NET_OUT_GET_ARCHIVE_PLAN_INFOS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_DEVICE_SUB_CLASS
{
    DWORD dwSize; 
} NET_IN_GET_DEVICE_SUB_CLASS;
typedef struct tagNET_OUT_GET_DEVICE_SUB_CLASS
{
    DWORD dwSize;    
    char szType[16]; 
} NET_OUT_GET_DEVICE_SUB_CLASS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDeviceSubClass(LLONG lLoginID, const NET_IN_GET_DEVICE_SUB_CLASS* pstuInParam, NET_OUT_GET_DEVICE_SUB_CLASS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_START_REMOTE_BACKUP_TASK
{
    DWORD dwSize;        
    char szDeviceIP[64]; 
    char szAPMac[64];    
} NET_IN_START_REMOTE_BACKUP_TASK;
typedef struct tagNET_OUT_START_REMOTE_BACKUP_TASK
{
    DWORD dwSize; 
} NET_OUT_START_REMOTE_BACKUP_TASK;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartRemoteBackupTask(LLONG lLoginID, const NET_IN_START_REMOTE_BACKUP_TASK* pstuInParam, NET_OUT_START_REMOTE_BACKUP_TASK* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_THERMO_RECEPTOR_PARAM_INFO
{
    DWORD dwSize;
    int nChannel; 
} NET_IN_GET_THERMO_RECEPTOR_PARAM_INFO;
typedef struct tagNET_OUT_GET_THERMO_RECEPTOR_PARAM_INFO
{
    DWORD dwSize;
    int nHourseTemp; 
    int nTECTemp;    
    int nBoardTemp;  
} NET_OUT_GET_THERMO_RECEPTOR_PARAM_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetThermoReceptorParam(LLONG lLoginID, const NET_IN_GET_THERMO_RECEPTOR_PARAM_INFO* pstuInParam, NET_OUT_GET_THERMO_RECEPTOR_PARAM_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_IVSEVENT_FIND_INFO
{
    DWORD dwSize; 
    int nVaild;   
    NET_TIME stStartTime;       
    NET_TIME stEndTime;         
    int nChannelList[128];      
    DWORD dwChannelCnt;         
    DWORD dwEventCodeCnt;       
    DWORD dwEventCodeList[128]; 
} NET_IN_IVSEVENT_FIND_INFO;
typedef struct tagNET_OUT_IVSEVENT_FIND_INFO
{
    DWORD dwSize;  
    DWORD dwCount; 
} NET_OUT_IVSEVENT_FIND_INFO;
typedef struct tagNET_IN_IVSEVENT_NEXTFIND_INFO
{
    DWORD dwSize;             
    unsigned int nStartIndex; 
    unsigned int nLimit;      
} NET_IN_IVSEVENT_NEXTFIND_INFO;
typedef struct tagNET_IVSEVENT_EVENT_INFO
{
    int nChannel;         
    DWORD nId;            
    DWORD dwEventCode;    
    int nVaild;           
    NET_TIME_EX stuTime;  
    char szChannel[32];   
    BYTE byReserved[988]; 
} NET_IVSEVENT_EVENT_INFO;
typedef struct tagNET_OUT_IVSEVENT_NEXTFIND_INFO
{
    DWORD dwSize;                           
    DWORD dwEventCnt;                       
    NET_IVSEVENT_EVENT_INFO* pstuEventInfo; 
    DWORD dwRetEventCnt;                    
} NET_OUT_IVSEVENT_NEXTFIND_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_IVSEventFind(LLONG lLoginID, const NET_IN_IVSEVENT_FIND_INFO* pstInParam, NET_OUT_IVSEVENT_FIND_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_IVSEventNextFind(LLONG lFindHandle, const NET_IN_IVSEVENT_NEXTFIND_INFO* pstInParam, NET_OUT_IVSEVENT_NEXTFIND_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_IVSEventFindClose(LLONG lFindHandle);
typedef struct tagNET_NOTIFY_PWD_RESET_STATE_INFO
{
    char szVerifyCode[256]; 
    char szResvered[1024];  
} NET_NOTIFY_PWD_RESET_STATE_INFO;
typedef void(CALLBACK* fNotifyPwdResetState)(LLONG lPwdResetStateHandle, NET_NOTIFY_PWD_RESET_STATE_INFO* pstuPwdResetStateNotifyInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_PWD_RESET_STATE_INFO
{
    DWORD dwSize;                                
    fNotifyPwdResetState cbfNotifyPwdResetState; 
    LDWORD dwUser;                               
} NET_IN_ATTACH_PWD_RESET_STATE_INFO;
typedef struct tagNET_OUT_ATTACH_PWD_RESET_STATE_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_PWD_RESET_STATE_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachPwdResetState(LLONG lLoginID, NET_IN_ATTACH_PWD_RESET_STATE_INFO* pstInParam, NET_OUT_ATTACH_PWD_RESET_STATE_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachPwdResetState(LLONG lPwdResetStateHandle);
typedef struct tagNET_IN_SEND_PWD_RESET_REQ_INFO
{
    DWORD dwSize;           
    char szVerifyCode[256]; 
} NET_IN_SEND_PWD_RESET_REQ_INFO;
typedef struct tagNET_OUT_SEND_PWD_RESET_REQ_INFO
{
    DWORD dwSize; 
} NET_OUT_SEND_PWD_RESET_REQ_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendPwdResetRequest(LLONG lLoginID, NET_IN_SEND_PWD_RESET_REQ_INFO* pstuInParam, NET_OUT_SEND_PWD_RESET_REQ_INFO* pstuOutParam, int nWaitTime);
typedef enum tagEM_SEND_PWD_RESET_STATE
{
    EM_SEND_PWD_RESET_STATE_UNKNOWN,  
    EM_SEND_PWD_RESET_STATE_SUCCESS,  
    EM_SEND_PWD_RESET_STATE_FAILED,   
    EM_SEND_PWD_RESET_STATE_OVERTIME, 
} EM_SEND_PWD_RESET_STATE;
typedef struct tagNET_IN_SEND_CODE_CHECK_RESULT_INFO
{
    DWORD dwSize;                            
    EM_SEND_PWD_RESET_STATE emPwdResetState; 
    char szVerifyCode[256];                  
} NET_IN_SEND_CODE_CHECK_RESULT_INFO;
typedef struct tagNET_OUT_SEND_CODE_CHECK_RESULT_INFO
{
    DWORD dwSize; 
} NET_OUT_SEND_CODE_CHECK_RESULT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendCodeCheckResult(LLONG lLoginID, NET_IN_SEND_CODE_CHECK_RESULT_INFO* pstuInParam, NET_OUT_SEND_CODE_CHECK_RESULT_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_CODE_CHECK_RESULT_INFO
{
    DWORD dwSize; 
} NET_IN_GET_CODE_CHECK_RESULT_INFO;
typedef enum tagEM_PWD_RESET_STATE
{
    EM_PWD_RESET_STATE_UNKNOWN = -1, 
    EM_PWD_RESET_STATE_NO_RESULT,    
    EM_PWD_RESET_STATE_SUCCESS,      
    EM_PWD_RESET_STATE_FAILED,       
    EM_PWD_RESET_STATE_OVERTIME,     
} EM_PWD_RESET_STATE;
typedef struct tagNET_OUT_GET_CODE_CHECK_RESULT_INFO
{
    DWORD dwSize;                       
    EM_PWD_RESET_STATE emPwdResetState; 
} NET_OUT_GET_CODE_CHECK_RESULT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetCodeCheckResult(LLONG lLoginID, NET_IN_GET_CODE_CHECK_RESULT_INFO* pstuInParam, NET_OUT_GET_CODE_CHECK_RESULT_INFO* pstuOutParam, int nWaitTime);
typedef struct tagDEV_SCADA_DATA_INFO
{
    char szID[32];        
    NET_TIME_EX stuTime;  
    int nStatus;          
    char szType[8];       
    char szUnit[8];       
    float fSetupVal;      
    float fMeasuredVal;   
    char szAddress[16];   
    char szResvered[256]; 
} DEV_SCADA_DATA_INFO;
typedef struct tagNET_NOTIFY_SCADA_DATA_INFO
{
    char szDeviceId[256];                 
    int nDataInfoNum;                     
    DEV_SCADA_DATA_INFO stuDataInfo[128]; 
    char szResvered[1024];                
} NET_NOTIFY_SCADA_DATA_INFO;
typedef void(CALLBACK* fNotifySCADAData)(LLONG lSCADADataHandle, NET_NOTIFY_SCADA_DATA_INFO* pstuSCADADataNotifyInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_SCADA_DATA_INFO
{
    DWORD dwSize;                        
    fNotifySCADAData cbfNotifySCADAData; 
    LDWORD dwUser;                       
} NET_IN_ATTACH_SCADA_DATA_INFO;
typedef struct tagNET_OUT_ATTACH_SCADA_DATA_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_SCADA_DATA_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachSCADAData(LLONG lLoginID, NET_IN_ATTACH_SCADA_DATA_INFO* pstInParam, NET_OUT_ATTACH_SCADA_DATA_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachSCADAData(LLONG lSCADADataHandle);
typedef struct tagNET_IN_GET_GPS_STATUS_INFO
{
    DWORD dwSize; 
} NET_IN_GET_GPS_STATUS_INFO;
typedef struct tagNET_OUT_GET_GPS_STATUS_INFO
{
    DWORD dwSize;                     
    NET_GPS_STATUS_INFO stuGPSStatus; 
} NET_OUT_GET_GPS_STATUS_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetGpsStatus(LLONG lLoginID, NET_IN_GET_GPS_STATUS_INFO* pstuInParam, NET_OUT_GET_GPS_STATUS_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_PTZ_NORTH_ANGLE_INFO
{
    DWORD dwSize; 
    int nChannel; 
} NET_IN_GET_PTZ_NORTH_ANGLE_INFO;
typedef struct tagNET_OUT_GET_PTZ_NORTH_ANGLE_INFO
{
    DWORD dwSize;       
    char szReserved[4]; 
    double dbAngle;     
} NET_OUT_GET_PTZ_NORTH_ANGLE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetPTZDueNorthDirectionAngle(LLONG lLoginID, NET_IN_GET_PTZ_NORTH_ANGLE_INFO* pstuInParam, NET_OUT_GET_PTZ_NORTH_ANGLE_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_CALC_WORK_TIME
{
    DWORD dwSize;                  
    int nType;                     
    char szUserID[32];             
    char szUserName[128];          
    float fRemainingOvertimeLimit; 
    BOOL bResult;                  
} NET_IN_CALC_WORK_TIME;
typedef struct tagNET_OUT_CALC_WORK_TIME
{
    DWORD dwSize; 
} NET_OUT_CALC_WORK_TIME;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_CalcWorkTime(LLONG lLoginID, NET_IN_CALC_WORK_TIME* pstuInParam, NET_OUT_CALC_WORK_TIME* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_TRAFFIC_FLOW_STAT_CAPS
{
    DWORD dwSize; 
} NET_IN_GET_TRAFFIC_FLOW_STAT_CAPS;
typedef struct tagNET_OUT_GET_TRAFFIC_FLOW_STAT_CAPS
{
    DWORD dwSize;                 
    int nSupportRealFlowStatCaps; 
} NET_OUT_GET_TRAFFIC_FLOW_STAT_CAPS;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetTrafficFlowStatCaps(LLONG lLoginID, NET_IN_GET_TRAFFIC_FLOW_STAT_CAPS* pstuInParam, NET_OUT_GET_TRAFFIC_FLOW_STAT_CAPS* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_GET_ENCODE_BITRATE
{
    DWORD dwSize;        
    int nChannelCount;   
    int nChannels[1024]; 
} NET_IN_GET_ENCODE_BITRATE;
typedef struct tagNET_OUT_GET_ENCODE_BITRATE
{
    DWORD dwSize;            
    int nRetBitrateCount;    
    int nBitrareCount[1024]; 
} NET_OUT_GET_ENCODE_BITRATE;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetEncodeBitrate(LLONG lLoginID, NET_IN_GET_ENCODE_BITRATE* pstuInParam, NET_OUT_GET_ENCODE_BITRATE* pstuOutParam, int nWaitTime);
typedef struct tagNET_CENTRAL_CHECK_RESP_INFO
{
    UINT nAction;          
    int nDoorChannel;      
    char szTransID[36];    
    char szUserID[32];     
    char szReaderID[32];   
    char szResvered[1024]; 
} NET_CENTRAL_CHECK_RESP_INFO;
typedef struct tagNET_NOTIFY_MULTI_DOOR_CTRL_CHECK_INFO
{
    NET_CENTRAL_CHECK_RESP_INFO stuReq; 
    char szResvered[1024];              
} NET_NOTIFY_MULTI_DOOR_CTRL_CHECK_INFO;
typedef void(CALLBACK* fNotifyCentraMultiDoorCtrlCheck)(LLONG lCheckCentraMultiDoorCtrlHandle, NET_NOTIFY_MULTI_DOOR_CTRL_CHECK_INFO* pstuMultiDoorCtrlCheckNotifyInfo, LDWORD dwUser);
typedef struct tagNET_IN_ATTACH_CHECK_CENTRA_MULTI_DOOR_CTRL_INFO
{
    DWORD dwSize;                                                      
    fNotifyCentraMultiDoorCtrlCheck cbfNotifyCentraMultiDoorCtrlCheck; 
    UINT nAction;                                                      
    LDWORD dwUser;                                                     
} NET_IN_ATTACH_CHECK_CENTRA_MULTI_DOOR_CTRL_INFO;
typedef struct tagNET_OUT_ATTACH_CHECK_CENTRA_MULTI_DOOR_CTRL_INFO
{
    DWORD dwSize; 
} NET_OUT_ATTACH_CHECK_CENTRA_MULTI_DOOR_CTRL_INFO;
CLIENT_NET_API LLONG CALL_METHOD CLIENT_AttachCheckCentraMultiDoorCtrl(LLONG lLoginID, NET_IN_ATTACH_CHECK_CENTRA_MULTI_DOOR_CTRL_INFO* pstInParam, NET_OUT_ATTACH_CHECK_CENTRA_MULTI_DOOR_CTRL_INFO* pstOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DetachCheckCentraMultiDoorCtrl(LLONG lCheckCentraMultiDoorCtrlHandle);
typedef struct tagNET_IN_CENTRA_CHECK_RESULT_INFO
{
    DWORD dwSize;             
    UINT nAction;             
    char szTransID[36];       
    UINT nAntiSumarineResult; 
    UINT nInterLockResult;    
} NET_IN_CENTRA_CHECK_RESULT_INFO;
typedef struct tagNET_OUT_CENTRA_CHECK_RESULT_INFO
{
    DWORD dwSize;    
    UINT nErrorCode; 
} NET_OUT_CENTRA_CHECK_RESULT_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetCheckResultByCentra(LLONG lLoginID, NET_IN_CENTRA_CHECK_RESULT_INFO* pstuInParam, NET_OUT_CENTRA_CHECK_RESULT_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_ANTI_SUBMARINE_RULE_CFG_INFO
{
    DWORD dwSize;                  
    int nForceReaderIDsNum;        
    int nWeakReaderIDsNum;         
    char szReserved[4];            
    char szForceReaderIDs[32][16]; 
    char szWeakReaderIDs[32][16];  
} NET_IN_ANTI_SUBMARINE_RULE_CFG_INFO;
typedef struct tagNET_OUT_ANTI_SUBMARINE_RULE_CFG_INFO
{
    DWORD dwSize; 
} NET_OUT_ANTI_SUBMARINE_RULE_CFG_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetAntiSubmarineRuleCfg(LLONG lLoginID, NET_IN_ANTI_SUBMARINE_RULE_CFG_INFO* pstuInParam, NET_OUT_ANTI_SUBMARINE_RULE_CFG_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_IN_INTER_LOCK_RULE_INFO
{
    DWORD dwSize;                 
    int nForceDoorChannelsNum;    
    int nWeakDoorChannelsNum;     
    UINT szForceDoorChannels[32]; 
    UINT szWeakDoorChannels[32];  
} NET_IN_INTER_LOCK_RULE_INFO;
typedef struct tagNET_OUT_INTER_LOCK_RULE_INFO
{
    DWORD dwSize; 
} NET_OUT_INTER_LOCK_RULE_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetInterLockRule(LLONG lLoginID, NET_IN_INTER_LOCK_RULE_INFO* pstuInParam, NET_OUT_INTER_LOCK_RULE_INFO* pstuOutParam, int nWaitTime);
typedef struct tagNET_COMMUNITY_INFO
{
    char szCommunityId[64];   
    char szCommunityAddr[64]; 
    char szCommunityName[64]; 
    char szReserved[256];     
} NET_COMMUNITY_INFO;
typedef struct tagNET_CHANNEL_LIST_INFO
{
    char szChannelCode[64]; 
    char szChannelName[64]; 
    char szReserved[256];   
} NET_CHANNEL_LIST_INFO;
typedef struct tagNET_IN_SET_COMMUNITY_INFO
{
    DWORD dwSize;                              
    int nCommunityInfoNum;                     
    int nChannelListNum;                       
    char szReserved[4];                        
    NET_COMMUNITY_INFO stuCommunityInfo[128];  
    NET_CHANNEL_LIST_INFO stuChannelList[128]; 
} NET_IN_SET_COMMUNITY_INFO;
typedef struct tagNET_OUT_SET_COMMUNITY_INFO
{
    DWORD dwSize; 
} NET_OUT_SET_COMMUNITY_INFO;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetCommunityInfo(LLONG lLoginID, NET_IN_SET_COMMUNITY_INFO* pstuInParam, NET_OUT_SET_COMMUNITY_INFO* pstuOutParam, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TransmitInfoForWeb(LLONG lLoginID, char* szInBuffer, DWORD dwInBufferSize, char* szOutBuffer, DWORD dwOutBufferSize, void* pExtData, int waittime = 500);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryConfig(LLONG lLoginID, int nConfigType, char* pConfigbuf, int maxlen, int* nConfigbuflen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetupConfig(LLONG lLoginID, int nConfigType, char* pConfigbuf, int nConfigbuflen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_Reset(LLONG lLoginID, BOOL bReset);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryComProtocol(LLONG lLoginID, int nProtocolType, char* pProtocolBuffer, int maxlen, int* nProtocollen, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StartTalk(LLONG lRealHandle, BOOL bCustomSend = false);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopTalk(LLONG lRealHandle);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SendTalkData_Custom(LLONG lRealHandle, char* pBuffer, DWORD dwBufSize);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetPlayerBufNumber(LLONG lRealHandle, DWORD dwBufNum);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetFileByTime(LLONG lLoginID, int nChannelID, LPNET_TIME lpStartTime, LPNET_TIME lpStopTime, char* sSavedFileName);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_PlayBackControl(LLONG lPlayHandle, DWORD dwControlCode, DWORD dwInValue, DWORD* lpOutValue);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetDEVWorkState(LLONG lLoginID, LPNET_DEV_WORKSTATE lpWorkState, int waittime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_QueryLogCallback(LLONG lLoginID, fLogDataCallBack cbLogData, LDWORD dwUser);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_RecMngCtrlMpt300(LLONG lLoginID, const NET_IN_REC_MNG_CTRL_MPT300* pstRecIn, NET_OUT_REC_MNG_CTRL_MPT300* pstRecOut, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_TransmitInfoDirectly(LLONG lLoginID, const NET_IN_TRANSMIT_DIRECTLY* pstInTransmit, NET_OUT_TRANSMIT_DIRECTLY* pstOutTransmit, int nWaittime = 1000);
typedef void(CALLBACK* fTransmitInfoDirectlyCallBack)(LLONG lLoginID, LLONG lStartHandle, const char* pszOutBuf, DWORD dwBufLen, LDWORD dwUser);
CLIENT_NET_API LLONG CALL_METHOD CLIENT_StartTransmitInfoDirectly(LLONG lLoginID, const NET_IN_TRANSMIT_DIRECTLY* pstInTransmit, NET_OUT_TRANSMIT_DIRECTLY* pstOutTransmit, fTransmitInfoDirectlyCallBack cbDirectly, LDWORD dwUser, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_StopTransmitInfoDirectly(LLONG lStartHandle, const NET_IN_TRANSMIT_DIRECTLY* pstInTransmit, NET_OUT_TRANSMIT_DIRECTLY* pstOutTransmit, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetVK(LLONG lLoginID, const NET_IN_GET_VKINFO* pInParam, NET_OUT_GET_VKINFO* pOutParam, int nWaitTime);
typedef enum EM_GDPR_VERSION
{
    EM_GDPR_VERSION_NON = 0, 
    EM_GDPR_VERSION_V1,      
    EM_GDPR_VERSION_V2,      
} EM_GDPR_VERSION;
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetGDPRVersion(LLONG lLoginID, EM_GDPR_VERSION* pVersion, int nWaitTime);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetMobilePushNotify(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY* pstuCfg, int* nError, int* nRestart, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelMobilePushNotify(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY_DEL* pstuIn, NET_OUT_DELETECFG* pstuOut, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_GetMobilePushNotifyCfg(LLONG lLoginID, NET_MOBILE_PUSH_NOTIFY_CFG* pstuCfg, int* nError, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_SetMobilePushNotifyCfg(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY_CFG* pstuCfg, int* nError, int* nRestart, int nWaitTime = 1000);
CLIENT_NET_API BOOL CALL_METHOD CLIENT_DelMobilePushNotifyCfg(LLONG lLoginID, const NET_MOBILE_PUSH_NOTIFY_CFG_DEL* pstuIn, NET_OUT_DELETECFG* pstuOut, int nWaitTime = 1000);
typedef enum tagNET_EVENT_OPERATE_TYPE
{
    NET_EVENT_OPERATE_TYPE_UNKOWN = 0, 
    NET_EVENT_OPERATE_TYPE_ADD,        
    NET_EVENT_OPERATE_TYPE_DELETE,     
    NET_EVENT_OPERATE_TYPE_MODIFY,     
} NET_EVENT_OPERATE_TYPE;
typedef enum tagNET_EVENT_USER_TYPE
{
    NET_EVENT_USER_TYPE_UNKOWN = 0, 
    NET_EVENT_USER_TYPE_KEYPAD,     
} NET_EVENT_USER_TYPE;
typedef enum tagNET_EVENT_DEVICE_TYPE
{
    NET_EVENT_DEVICE_TYPE_UNKOWN = 0, 
    NET_EVENT_DEVICE_TYPE_CARD,       
} NET_EVENT_DEVICE_TYPE;
typedef struct tagNET_ALARM_RF_JAMMING_INFO
{
    int nAction;            
    int nChannel;           
    NET_TIME_EX stuUTC;     
    char szDeviceName[256]; 
    char szReserved[1024];  
} NET_ALARM_RF_JAMMING_INFO;
typedef struct tagNET_ALARM_ARMING_FAILURE_INFO
{
    int nAction;           
    int nChannel;          
    NET_TIME_EX stuUTC;    
    EM_ARM_TYPE emMode;    
    char szReserved[1024]; 
} NET_ALARM_ARMING_FAILURE_INFO;
typedef struct tagNET_ALARM_USER_MODIFIED_INFO
{
    int nAction;                     
    int nChannel;                    
    char szUser[128];                
    NET_EVENT_OPERATE_TYPE emOpType; 
    NET_EVENT_USER_TYPE emUserType;  
    char szReserved[1024];           
} NET_ALARM_USER_MODIFIED_INFO;
typedef struct tagNET_ALARM_MANUAL_TEST_INFO
{
    int nAction;           
    int nChannel;          
    NET_TIME_EX stuUTC;    
    char szSN[32];         
    char szName[32];       
    char szAreaName[128];  
    char szReserved[1024]; 
} NET_ALARM_MANUAL_TEST_INFO;
typedef struct tagNET_ALARM_DEVICE_MODIFIED_INFO
{
    int nAction;                        
    int nChannel;                       
    NET_TIME_EX stuUTC;                 
    char szUser[32];                    
    NET_EVENT_OPERATE_TYPE emOpType;    
    NET_EVENT_DEVICE_TYPE emDeviceType; 
    char szReserved[1024];              
} NET_ALARM_DEVICE_MODIFIED_INFO;
typedef struct tagNET_ALARM_ATS_FAULT_INFO
{
    int nAction;           
    int nChannel;          
    NET_TIME_EX stuUTC;    
    char szReserved[1024]; 
} NET_ALARM_ATS_FAULT_INFO;
typedef struct tagNET_ALARM_ARC_OFFLINE_INFO
{
    int nAction;           
    int nChannel;          
    NET_TIME_EX stuUTC;    
    char szDetail[128];    
    char szReserved[1024]; 
} NET_ALARM_ARC_OFFLINE_INFO;
typedef struct tagNET_EVENT_AREAR_INFO
{
    char szName[128]; 
    int nIndex;       
    char szRsd[64];   
} NET_EVENT_AREAR_INFO;
typedef struct tagNET_ALARM_WIFI_FAILURE_INFO
{
    int nAction;                          
    NET_TIME_EX stuUTC;                   
    char szSN[32];                        
    char szName[64];                      
    int nErrorCode;                       
    int nAreaInfoNum;                     
    NET_EVENT_AREAR_INFO stuAreaInfo[64]; 
    char szReserved[1024];                
} NET_ALARM_WIFI_FAILURE_INFO;
typedef struct tagNET_ALARM_OVER_TEMPERATURE_INFO
{
    int nAction;                          
    int nChannel;                         
    NET_TIME_EX stuUTC;                   
    char szSN[32];                        
    char szName[64];                      
    int nTemperatureType;                 
    int nAreaInfoNum;                     
    NET_EVENT_AREAR_INFO stuAreaInfo[64]; 
    char szReserved[1024];                
} NET_ALARM_OVER_TEMPERATURE_INFO;
typedef struct tagNET_DETECTION_OBJECT_INFO
{
    char szObjectType[16];      
    NET_RECT_EX stuBoundingBox; 
    UINT nObjectID;             
    char szReserved[516];       
} NET_DETECTION_OBJECT_INFO;
typedef struct tagNET_DEV_EVENT_RAILING_PASS_DETECTION_INFO
{
    int nChannelID;                            
    int nEventAction;                          
    UINT nRuleID;                              
    NET_TIME_EX stuUTC;                        
    NET_EVENT_INFO_EXTEND stuEventInfoEx;      
    char szName[128];                          
    char szClass[16];                          
    int nGroupID;                              
    int nCountInGroup;                         
    int nIndexInGroup;                         
    int nCount;                                
    double dbPTS;                              
    UINT nUTCMS;                               
    UINT nEventID;                             
    DH_POINT_EX stuDetectLine[2];              
    DH_POINT_EX stuDetectRegion[20];           
    int nDetectRegionPointNum;                 
    int nObjectsCount;                         
    NET_DETECTION_OBJECT_INFO stuObjects[100]; 
    char szReserved[1024];                     
} NET_DEV_EVENT_RAILING_PASS_DETECTION_INFO;
#ifdef __cplusplus
}
#endif
#endif 
